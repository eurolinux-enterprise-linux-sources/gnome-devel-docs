# Greek translation for gnome-devel-docs.
# Copyright (C) 2011 gnome-devel-docs's COPYRIGHT HOLDER
# This file is distributed under the same license as the gnome-devel-docs package.
# Chris Triantafillis <christriant1995@gmail.com>, 2011.
# Simos Xenitellis <simos@gnome.org>, 2011.
# Dimitris Spingos (Δημήτρης Σπίγγος) <dmtrs32@gmail.com>, 2012, 2013.
msgid ""
msgstr ""
"Project-Id-Version: gnome-devel-docs master\n"
"POT-Creation-Date: 2014-08-31 06:41+0000\n"
"PO-Revision-Date: 2014-08-31 16:30+0200\n"
"Last-Translator: Tom Tryfonidis <tomtryf@gmail.com>\n"
"Language-Team: team@lists.gnome.gr\n"
"Language: el\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Poedit 1.6.5\n"
"X-Project-Style: gnome\n"

#. Put one translator per line, in the form NAME <EMAIL>, YEAR1, YEAR2
msgctxt "_"
msgid "translator-credits"
msgstr ""
"Ελληνική μεταφραστική ομάδα GNOME <team@gnome.gr>, 2012-2014\n"
"Δημήτρης Σπίγγος <dmtrs32@gmail.com>, 2012, 2013\n"
"Μαρία Θουκιδίδου <marablack3@gmail.com>, 2014\n"
"Θάνος Τρυφωνίδης <tomtryf@gmail.com>, 2014"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:95
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_01.png' md5='3fdc22d361cf801f71557fdc76ae5b49'"
msgstr ""
"external ref='media/02_jsgrid_01.png' md5='3fdc22d361cf801f71557fdc76ae5b49'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:150
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_02.png' md5='07db86b0043ba5c3c24a90d7322bd81e'"
msgstr ""
"external ref='media/02_jsgrid_02.png' md5='07db86b0043ba5c3c24a90d7322bd81e'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:167
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_03.png' md5='817351e73c687d47253c56ed06b6629f'"
msgstr ""
"external ref='media/02_jsgrid_03.png' md5='817351e73c687d47253c56ed06b6629f'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:197
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_04.png' md5='eeaead27cee2851877fc3cfe66177f07'"
msgstr ""
"external ref='media/02_jsgrid_04.png' md5='eeaead27cee2851877fc3cfe66177f07'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:206
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_05.png' md5='a3ad12f432d5977fc1f66302ad5b7498'"
msgstr ""
"external ref='media/02_jsgrid_05.png' md5='a3ad12f432d5977fc1f66302ad5b7498'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:217
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_06.png' md5='450e48dbf6b8f5ce1c208e4812e1714b'"
msgstr ""
"external ref='media/02_jsgrid_06.png' md5='450e48dbf6b8f5ce1c208e4812e1714b'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:227
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_07.png' md5='0b304d70728903fbb2601d55bf00fdb9'"
msgstr ""
"external ref='media/02_jsgrid_07.png' md5='0b304d70728903fbb2601d55bf00fdb9'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:249
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_08.png' md5='78890beb47bd11360154b8ca4d50d1ff'"
msgstr ""
"external ref='media/02_jsgrid_08.png' md5='78890beb47bd11360154b8ca4d50d1ff'"

#. (itstool) path: credit/name
#: C/02_welcome_to_the_grid.js.page:15 C/03_getting_the_signal.js.page:16
#: C/aboutdialog.js.page:12 C/button.js.page:13 C/checkbutton.js.page:13
#: C/comboboxtext.js.page:15 C/combobox.js.page:17 C/dialog.js.page:13
#: C/entry.js.page:13 C/grid.js.page:18 C/hellognome.js.page:12
#: C/image.js.page:12 C/label.js.page:13 C/linkbutton.js.page:13
#: C/messagedialog.js.page:16 C/progressbar.js.page:12
#: C/radiobutton.js.page:13 C/scale.js.page:13 C/set-up-gedit.js.page:12
#: C/spinbutton.js.page:16 C/spinner.js.page:13 C/statusbar.js.page:13
#: C/switch.js.page:13 C/textview.js.page:17 C/togglebutton.js.page:13
#: C/treeview_simple_liststore.js.page:16 C/window.js.page:13
msgid "Taryn Fox"
msgstr "Taryn Fox"

#. (itstool) path: credit/years
#: C/02_welcome_to_the_grid.js.page:17 C/03_getting_the_signal.js.page:18
#: C/aboutdialog.c.page:17 C/aboutdialog.js.page:14 C/aboutdialog.py.page:16
#: C/aboutdialog.vala.page:17 C/beginner.js.page:13 C/button.c.page:17
#: C/button.js.page:15 C/button.py.page:17 C/button.vala.page:16
#: C/buttonbox.py.page:17 C/checkbutton.c.page:15 C/checkbutton.js.page:15
#: C/checkbutton.py.page:16 C/checkbutton.vala.page:15
#: C/colorbutton.py.page:16 C/colorbutton.vala.page:17
#: C/comboboxtext.js.page:17 C/combobox.c.page:15 C/combobox.js.page:19
#: C/combobox.py.page:17 C/combobox.vala.page:15
#: C/combobox_multicolumn.py.page:16 C/dialog.c.page:17 C/dialog.js.page:15
#: C/dialog.py.page:17 C/dialog.vala.page:15 C/entry.c.page:15
#: C/entry.js.page:15 C/entry.py.page:17 C/entry.vala.page:15
#: C/filechooserdialog.py.page:19 C/filechooserdialog.vala.page:18
#: C/fontchooserwidget.py.page:17 C/gmenu.c.page:15 C/gmenu.js.page:15
#: C/gmenu.py.page:17 C/gmenu.py.page:23 C/gmenu.vala.page:16 C/grid.c.page:15
#: C/grid.js.page:15 C/grid.py.page:17 C/grid.py.page:23 C/grid.vala.page:17
#: C/GtkApplicationWindow.c.page:15 C/GtkApplicationWindow.js.page:15
#: C/GtkApplicationWindow.py.page:17 C/GtkApplicationWindow.py.page:22
#: C/GtkApplicationWindow.vala.page:15 C/guitar-tuner.js.page:14
#: C/hellognome.js.page:14 C/hello-world.c.page:17 C/hello-world.js.page:17
#: C/hello-world.py.page:17 C/hello-world.vala.page:17 C/image.c.page:15
#: C/image.js.page:14 C/image.py.page:17 C/image.vala.page:15
#: C/label.c.page:16 C/label.js.page:15 C/label.py.page:19 C/label.py.page:24
#: C/label.vala.page:15 C/linkbutton.c.page:15 C/linkbutton.js.page:15
#: C/linkbutton.py.page:16 C/linkbutton.vala.page:15 C/menubar.c.page:17
#: C/menubar.py.page:17 C/menubar.py.page:22 C/menubar.vala.page:17
#: C/menubutton.js.page:15 C/menubutton.py.page:16 C/menubutton.py.page:22
#: C/menubutton.vala.page:15 C/messagedialog.c.page:16
#: C/messagedialog.js.page:18 C/messagedialog.py.page:16
#: C/messagedialog.vala.page:15 C/model-view-controller.py.page:23
#: C/paned.c.page:15 C/paned.py.page:16 C/progressbar.c.page:16
#: C/progressbar.js.page:14 C/progressbar.py.page:16
#: C/progressbar.vala.page:15 C/properties.py.page:23 C/radiobutton.c.page:17
#: C/radiobutton.js.page:15 C/radiobutton.py.page:17
#: C/radiobutton.vala.page:18 C/response-type.page:11 C/scale.c.page:17
#: C/scale.js.page:15 C/scale.py.page:17 C/scale.vala.page:17
#: C/scrolledwindow.c.page:17 C/scrolledwindow.py.page:16
#: C/scrolledwindow.vala.page:16 C/separator.py.page:17
#: C/set-up-gedit.js.page:14 C/signals-callbacks.py.page:23
#: C/spinbutton.c.page:18 C/spinbutton.js.page:18 C/spinbutton.py.page:17
#: C/spinbutton.vala.page:17 C/spinner.c.page:16 C/spinner.js.page:15
#: C/spinner.py.page:16 C/spinner.vala.page:15 C/statusbar.c.page:19
#: C/statusbar.js.page:15 C/statusbar.py.page:17 C/statusbar.vala.page:18
#: C/strings.py.page:23 C/switch.c.page:15 C/switch.js.page:15
#: C/switch.py.page:16 C/switch.vala.page:19 C/textview.c.page:15
#: C/textview.js.page:19 C/textview.py.page:24 C/textview.vala.page:15
#: C/togglebutton.c.page:19 C/togglebutton.js.page:15
#: C/togglebutton.py.page:16 C/togglebutton.vala.page:18 C/toolbar.c.page:17
#: C/toolbar.js.page:15 C/toolbar.py.page:17 C/toolbar.vala.page:16
#: C/toolbar_builder.py.page:18 C/toolbar_builder.py.page:24
#: C/toolbar_builder.vala.page:17 C/tooltip.py.page:17
#: C/treeview_advanced_liststore.py.page:16
#: C/treeview_cellrenderertoggle.py.page:16
#: C/treeview_simple_liststore.js.page:18
#: C/treeview_simple_liststore.py.page:17
#: C/treeview_simple_liststore.vala.page:17 C/treeview_treestore.py.page:17
#: C/tutorial.py.page:17 C/weatherApp.js.page:14 C/weatherAppMain.js.page:13
#: C/weatherAutotools.js.page:13 C/weatherGeonames.js.page:13
#: C/window.c.page:15 C/window.js.page:15 C/window.py.page:17
#: C/window.py.page:22 C/window.vala.page:15
msgid "2012"
msgstr "2012"

#. (itstool) path: info/desc
#: C/02_welcome_to_the_grid.js.page:20
msgid "Learn how to lay out UI components, like Images and Labels."
msgstr ""
"Μάθετε πώς να τακτοποιήσετε στοιχεία διεπαφής χρήστη όπως εικόνες και "
"ετικέτες."

#. (itstool) path: page/title
#: C/02_welcome_to_the_grid.js.page:23
msgid "2. Welcome to the Grid"
msgstr "2. Καλώς ήλθατε στο πλέγμα"

#. (itstool) path: synopsis/p
#: C/02_welcome_to_the_grid.js.page:25
msgid ""
"This tutorial will show you how to create basic widgets, or parts of the "
"GNOME user interface, like Images and Labels. You'll then learn how to "
"arrange them all in a Grid, which lets you put widgets exactly where you "
"want them."
msgstr ""
"Αυτό το μάθημα θα σας δείξει πώς να δημιουργήσετε βασικά γραφικά στοιχεία, "
"ή μέρη της διεπαφής χρήστη του GNOME, όπως εικόνες και ετικέτες. Θα μάθετε "
"έπειτα πώς να τα τακτοποιήσετε όλα σε ένα πλέγμα, που σας επιτρέπει να "
"βάλετε τα γραφικά στοιχεία ακριβώς όπου τα θέλετε."

#. (itstool) path: note/p
#: C/02_welcome_to_the_grid.js.page:26
msgid ""
"Have you taken <link xref=\"hellognome.js\">the first tutorial in this "
"series</link> already? You'll want to do so before continuing."
msgstr ""
"Έχετε δει <link xref=\"hellognome.js\">το πρώτο μάθημα σε αυτή τη σειρά</"
"link> ήδη; Θα θέλετε να το κάνετε πριν να συνεχίσετε."

#. (itstool) path: section/title
#: C/02_welcome_to_the_grid.js.page:32
msgid "Going native"
msgstr "Πηγαίνοντας εγγενώς"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:34
msgid ""
"In the last tutorial, we created what was basically a GNOME window frame for "
"a web app. All the GNOME-specific code we needed to learn revolved around "
"putting the WebView -- the widget containing our application -- into an "
"ApplicationWindow, and telling it to display. The application itself was "
"written in HTML and JavaScript, just like most pages on the web."
msgstr ""
"Στο τελευταίο μάθημα, δημιουργήσαμε βασικά ένα πλαίσιο παραθύρου GNOME για "
"μια εφαρμογή ιστού. Ο συγκεκριμένος κώδικας GNOME που χρειαζόμαστε να "
"μάθουμε περιστρέφεται γύρω από την τοποθέτηση της WebView -- το γραφικό "
"στοιχείο που περιέχει την εφαρμογή μας -- σε ένα ApplicationWindow και την "
"εμφάνιση του. Η ίδια η εφαρμογή γράφτηκε σε HTML και JavaScript, ακριβώς "
"όπως οι περισσότερες σελίδες στον ιστό."

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:35
msgid ""
"This time, we're going to use only native GNOME widgets. A widget is just a "
"thing, like a checkbox or picture, and GNOME has a wide variety of them to "
"choose from. We call them \"native\" widgets to distinguish them from things "
"like the button and header in the web app we wrote. Because instead of using "
"web code, these are going to be 100 percent GNOME, using GTK+."
msgstr ""
"Αυτήν τη φορά, πρόκειται να χρησιμοποιήσουμε μόνο τα εγγενή γραφικά "
"στοιχεία του GNOME. Ένα γραφικό στοιχείο είναι μόνο ένα πράγμα, όπως ένα "
"πλαίσιο ελέγχου ή εικόνα και το GNOME έχει μια πλατιά ποικιλία για επιλογή. "
"Τα λέμε \"εγγενή\" γραφικά στοιχεία για να τα διακρίνουμε από πράγματα όπως "
"το κουμπί και η κεφαλίδα στην εφαρμογή ιστού που γράψαμε. Αντί να "
"χρησιμοποιήσουμε κώδικα ιστού, αυτά πρόκειται να είναι 100% GNOME, "
"χρησιμοποιώντας Gtk+."

#. (itstool) path: note/p
#: C/02_welcome_to_the_grid.js.page:36
msgid ""
"GTK+ stands for \"GIMP Toolkit\". It's like a toolbox of widgets that you "
"can reach into, while building your applications. It was originally written "
"for <link href=\"http://www.gimp.org/\">the GIMP</link>, which is a free "
"software image editor."
msgstr ""
"Το Gtk+ σημαίνει \"GIMP Toolkit\". Είναι σαν μια εργαλειοθήκη γραφικών "
"στοιχείων που μπορείτε να προσπελάσετε, ενώ δομείτε τις εφαρμογές σας. "
"Γράφτηκε αρχικά για το <link href=\"http://www.gimp.org/\">GIMP</link>, που "
"είναι ένας επεξεργαστής εικόνας ελεύθερου λογισμικού."

#. (itstool) path: section/title
#: C/02_welcome_to_the_grid.js.page:40
msgid "Setting up our application"
msgstr "Εγκατάσταση της εφαρμογής μας"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:42
msgid ""
"Before we dig out any widgets from the GTK+ toolbox, we first need to write "
"the basic boilerplate code that our application requires."
msgstr ""
"Πριν να ψάξουμε οποιαδήποτε γραφικά στοιχεία από την εργαλειοθήκη Gtk+, "
"χρειαζόμαστε πρώτα να γράψουμε το βασικό κώδικα στερεότυπου που η εφαρμογή "
"μας απαιτεί."

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:43 C/comboboxtext.js.page:31
#: C/textview.js.page:39
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
msgstr ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:49
msgid ""
"This part always goes at the start of your code. Depending on what you'll be "
"doing with it, you may want to declare more imports here. What we're writing "
"today is pretty basic, so these are all we need; Gtk for the widgets, and "
"Lang so we can use Lang.bind to connect our application's activate and "
"startup signals to the requisite functions."
msgstr ""
"Αυτό το μέρος πηγαίνει πάντα στην αρχή του κώδικά σας. Ανάλογα με το τι θα "
"κάνετε με αυτό, μπορεί να θέλετε να δηλώσετε περισσότερες εισαγωγές εδώ. "
"Αυτό που γράφουμε σήμερα είναι αρκετά βασικό, έτσι αυτά είναι που "
"χρειαζόμαστε· Gtk για γραφικά στοιχεία και Lang ώστε να μπορούμε να "
"χρησιμοποιήσουμε Lang.bind για να συνδέσουμε τα σήματα ενεργοποίησης και "
"εκκίνησης της εφαρμογής στις αναγκαίες συναρτήσεις."

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:50
msgid "Speaking of which:"
msgstr "Μιλώντας για:"

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:51
#, no-wrap
msgid ""
"\n"
"const WelcomeToTheGrid = new Lang.Class({\n"
"    Name: 'Welcome to the Grid',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const WelcomeToTheGrid = new Lang.Class({\n"
"    Name: 'Welcome to the Grid',\n"
"\n"
"    // Δημιουργία αυτής καθεαυτής της εφαρμογής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application()·\n"
"\n"
"        // Σύνδεση σημάτων 'activate' και 'startup' στις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate))·\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup))·\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present()·\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ()·\n"
"    },\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:74
msgid ""
"This is the start of the application itself, and the _init function which "
"creates it. It tells _buildUI to create an ApplicationWindow, which we're "
"going to call _window, and it tells our window to present itself whenever "
"needed."
msgstr ""
"Αυτή είναι η αρχή της ίδιας της εφαρμογής και η συνάρτηση _init που τη "
"δημιουργεί. Λέει στη _buildUI να δημιουργήσει μια ApplicationWindow, που "
"πρόκειται να καλέσει το _window και λέει στο παράθυρό μας να εμφανίζει τον "
"εαυτό του όποτε απαιτείται."

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:75
msgid ""
"This part, again, is pretty much copy-and-paste, but you always want to give "
"your application a unique name."
msgstr ""
"Αυτό το μέρος, πάλι, είναι αρκετά αντιγραφή και επικόλληση, αλλά θέλετε "
"πάντα να δώσετε στην εφαρμογή σας ένα μοναδικό όνομα."

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:77
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 10,\n"
"            title: \"Welcome to the Grid\"});\n"
msgstr ""
"\n"
"    // Δημιουργία της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 10,\n"
"            title: \"Welcome to the Grid\"})·\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:88
msgid ""
"Finally, we start off the _buildUI function by creating a new "
"ApplicationWindow. We specify that it goes with this application, that it "
"should appear in the center of the screen, and that there should be at least "
"10 pixels between the outside edge and any widgets inside of it. We also "
"give it a title, which will appear at the top of the window."
msgstr ""
"Τελικά, ξεκινάμε τη συνάρτηση _buildUI δημιουργώντας ένα νέο "
"ApplicationWindow. Ορίζουμε ότι πηγαίνει με αυτήν την εφαρμογή, που θα "
"πρέπει να εμφανιστεί στο κέντρο της οθόνης και εκεί θα πρέπει να είναι "
"τουλάχιστον 10 εικονοστοιχεία μεταξύ της εξωτερικής άκρης και όλων των "
"γραφικών στοιχείων της. Επίσης της δίνουμε έναν τίτλο, που θα εμφανιστεί "
"στην κορυφή του παραθύρου."

#. (itstool) path: section/title
#: C/02_welcome_to_the_grid.js.page:92
msgid "Reaching into the GTK+ toolbox"
msgstr "Φτάνοντας στην εργαλειοθήκη Gtk+"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:93
msgid ""
"What widgets should we use? Well, let's say we want to write an application "
"that looks like this:"
msgstr ""
"Ποια γραφικά στοιχεία πρέπει να χρησιμοποιήσουμε; Λοιπόν, ας πούμε ότι "
"θέλουμε να γράψουμε μια εφαρμογή που φαίνεται σαν αυτή:"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:97
msgid ""
"We're going to need, at the very least, a picture and a text label to go "
"with it. Let's start with the picture:"
msgstr ""
"Πρόκειται να χρειαστούμε, τουλάχιστον, μια εικόνα και μια ετικέτα κειμένου "
"να πάει μαζί της. Ας αρχίσουμε με την εικόνα:"

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:98
#, no-wrap
msgid ""
"\n"
"        // Create an image\n"
"        this._image = new Gtk.Image ({ file: \"gnome-image.png\" });\n"
msgstr ""
"\n"
"        // Δημιουργία εικόνας\n"
"        this._image = new Gtk.Image ({ file: \"gnome-image.png\" })·\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:103
msgid ""
"You can download the image file used in this example <link href=\"https://"
"live.gnome.org/TarynFox?action=AttachFile&amp;do=get&amp;target=gnome-image."
"png\">here</link>. Be sure to put it in the same directory as the code "
"you're writing."
msgstr ""
"Μπορείτε να κατεβάσετε το χρησιμοποιούμενο αρχείο εικόνας σε αυτό το "
"παράδειγμα <link href=\"https://live.gnome.org/TarynFox?"
"action=AttachFile&amp;do=get&amp;target=gnome-image.png\">εδώ</link>. "
"Βεβαιωθείτε να το βάλετε στον ίδιο κατάλογο με τον κώδικα που γράφετε."

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:105
#, no-wrap
msgid ""
"\n"
"        // Create a label\n"
"        this._label = new Gtk.Label ({ label: \"Welcome to GNOME, too!\" });\n"
msgstr ""
"\n"
"        // Δημιουργία ετικέτας\n"
"        this._label = new Gtk.Label ({ label: \"Welcome to GNOME, too!\" })·\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:109
msgid ""
"That code adds in the label beneath. You can see how we create widgets, "
"here; each one is a part of Gtk, and we can give it properties that "
"customize how it behaves. In this case, we set the Image's file property to "
"be the filename of the picture we want, and the Label's label property to be "
"the sentence that we want beneath the picture."
msgstr ""
"Αυτός ο κώδικας προσθέτει κάτω από την ετικέτα. Μπορείτε να δείτε πώς "
"δημιουργούμε γραφικά στοιχεία, εδώ· καθένα είναι μέρος του Gtk και μπορούμε "
"να του δώσουμε ιδιότητες που προσαρμόζουν τη συμπεριφορά του. Σε αυτήν την "
"περίπτωση, ορίζουμε την ιδιότητα αρχείο της εικόνας να είναι το όνομα "
"αρχείου της εικόνας που θέλουμε και η ιδιότητα ετικέτα της ετικέτας να είναι "
"η πρόταση που θέλουμε κάτω από την εικόνα."

#. (itstool) path: note/p
#: C/02_welcome_to_the_grid.js.page:110
msgid ""
"Yes, it sounds redundant for a Label to have a label property, but it's not. "
"Other widgets that contain text have a label property, so it's "
"<em>consistent</em> for the Label widget to have one too."
msgstr ""
"Ναι, ακούγεται περιττό για μια ετικέτα να έχει μια ιδιότητα ετικέτας, αλλά "
"δεν ισχύει. Άλλα γραφικά στοιχεία που περιέχουν κείμενο έχουν μια ιδιότητα "
"ετικέτας, έτσι είναι <em>συνεπές</em> για το γραφικό στοιχείο ετικέτας να "
"έχει επίσης μία."

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:111
msgid ""
"We can't just add these widgets to our window in order, though, the same way "
"HTML elements appear in the order you write them. That's because an "
"ApplicationWindow can only contain one widget."
msgstr ""
"Δεν μπορούμε απλά να προσθέσουμε αυτά τα γραφικά στοιχεία στο παράθυρό μας "
"στη σειρά, όμως, με τον ίδιο τρόπο που τα στοιχεία HTML εμφανίζονται στη "
"σειρά που τα γράφετε. Αυτό συμβαίνει επειδή ένα ApplicationWindow μπορεί να "
"περιέχει μόνο ένα γραφικό στοιχείο."

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:112
msgid ""
"How do we get around that? By making that one widget a container widget, "
"which can hold more than one widget and organize them inside it. Behold: The "
"Grid."
msgstr ""
"Πώς το παρακάμπτουμε; Κάνοντας αυτό το γραφικό στοιχείο έναν αποδέκτη "
"γραφικού στοιχείου, που μπορεί να κρατά περισσότερα από ένα γραφικό "
"στοιχείο και να τα οργανώσουμε μέσα του. Ιδού: το πλέγμα."

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:113
#, no-wrap
msgid ""
"\n"
"        // Create the Grid\n"
"        this._grid = new Gtk.Grid ();\n"
msgstr ""
"\n"
"        // Δημιουργία του πλέγματος\n"
"        this._grid = new Gtk.Grid ()·\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:118
msgid ""
"We're not giving it any properties yet. Those will come later, as we learn "
"how to use the Grid's powers. First, let's attach the Image and Label we "
"made to our Grid."
msgstr ""
"Δεν του δίνουμε ακόμα ιδιότητες. Αυτές θα έρθουν αργότερα, καθώς μαθαίνουμε "
"πώς να χρησιμοποιούμε τις δυνάμεις του πλέγματος. Πρώτα, ας προσαρτήσουμε "
"την εικόνα και την ετικέτα που κάναμε στο πλέγμα μας."

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:119
#, no-wrap
msgid ""
"\n"
"        // Attach the image and label to the grid\n"
"        this._grid.attach (this._image, 0, 0, 1, 1);\n"
"        this._grid.attach (this._label, 0, 1, 1, 1);\n"
msgstr ""
"\n"
"        // Προσάρτηση της εικόνας και της ετικέτας στο πλέγμα\n"
"        this._grid.attach (this._image, 0, 0, 1, 1)·\n"
"        this._grid.attach (this._label, 0, 1, 1, 1)·\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:125
msgid ""
"This code looks awfully complicated, but it's not. Here's what those numbers "
"mean:"
msgstr ""
"Αυτός ο κώδικας φαίνεται πολύ περίπλοκος, αλλά δεν είναι. Να τι σημαίνουν "
"αυτοί οι αριθμοί:"

#. (itstool) path: item/p
#: C/02_welcome_to_the_grid.js.page:127
msgid ""
"The <em>first</em> number is what left-to-right position to put things in, "
"starting from 0. Any widget that uses a 0 here goes all the way to the left."
msgstr ""
"Ο <em>πρώτος</em> αριθμός είναι σε ποια θέση από αριστερά προς τα δεξιά θα "
"τοποθετηθούν πράγματα, αρχίζοντας από 0. Κάθε γραφικό στοιχείο που "
"χρησιμοποιεί ένα 0 εδώ πηγαίνει όλο αριστερά."

#. (itstool) path: item/p
#: C/02_welcome_to_the_grid.js.page:128
msgid ""
"The <em>second</em> number is what top-to-botton position to put a given "
"widget in, starting from 0. The Label goes beneath the Image, so we give the "
"Image a 0 and the Label a 1 here."
msgstr ""
"Ο <em>δεύτερος</em> αριθμός είναι σε ποια θέση από πάνω προς τα κάτω θα μπει "
"το δεδομένο γραφικό στοιχείο, ξεκινώντας από 0. Η ετικέτα πηγαίνει κάτω από "
"την εικόνα, έτσι δίνουμε στην εικόνα ένα 0 και στην ετικέτα ένα 1 εδώ."

#. (itstool) path: item/p
#: C/02_welcome_to_the_grid.js.page:129
msgid ""
"The <em>third</em> and <em>fourth</em> numbers are how many columns and rows "
"a widget should take up. We'll see how these work in a minute."
msgstr ""
"Ο <em>τρίτος</em> και ο <em>τέταρτος</em> αριθμός είναι πόσες στήλες και "
"γραμμές πρέπει να καταλάβει ένα γραφικό στοιχείο. Θα δούμε πώς αυτά "
"δουλεύουν σε ένα λεπτό."

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:132
#, no-wrap
msgid ""
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new WelcomeToTheGrid ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"        // Προσθήκη του πλέγματος στο παράθυρο\n"
"        this._window.add (this._grid)·\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all()·\n"
"    }\n"
"\n"
"})·\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new WelcomeToTheGrid ()·\n"
"app.application.run (ARGV)·\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:146
msgid ""
"Now that we've created the Grid and attached all our widgets to it, we add "
"it to the window and tell the window to show itself, as the last part of the "
"_buildUI function. As always, to finish up we create a new instance of the "
"application's class and tell it to run."
msgstr ""
"Τώρα που έχουμε δημιουργήσει το πλέγμα και προσαρτήσαμε σε αυτό όλα τα "
"γραφικά στοιχεία μας, το προσθέτουμε στο παράθυρο και λέμε στο παράθυρο να "
"εμφανίσει τον εαυτόν του, όπως το τελευταίο μέρος της συνάρτησης _buildUI. "
"Όπως πάντα, για να τελειώσουμε δημιουργούμε ένα νέο στιγμιότυπο της κλάσης "
"της εφαρμογής και του λέμε να εκτελεστεί."

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:147
msgid ""
"Save your application as welcome_to_the_grid.js. Then, to run your "
"application just open a terminal, go to the directory where your application "
"is at, and type"
msgstr ""
"Αποθηκεύστε την εφαρμογή σας ως welcome_to_the_grid.js. Έπειτα, για να "
"εκτελέσετε την εφαρμογή σας ανοίξτε απλά έναν τερματικό, πηγαίνετε στον "
"κατάλογο όπου η εφαρμογή σας είναι και πληκτρολογήστε"

#. (itstool) path: section/screen
#: C/02_welcome_to_the_grid.js.page:148
#, no-wrap
msgid " <output style=\"prompt\">$ </output>gjs welcome_to_the_grid.js "
msgstr " <output style=\"prompt\">$ </output>gjs welcome_to_the_grid.js "

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:152
msgid ""
"There we go! But wait. That doesn't look right. Why is the Label crammed up "
"next to the Image like that? That doesn't look as nice, and it makes it "
"harder to read. What can we do about this?"
msgstr ""
"Να! Αλλά περιμένετε. Αυτό δεν φαίνεται σωστό. Γιατί στριμώχνεται η ετικέτα "
"δίπλα στην εικόνα έτσι; Αυτό δεν φαίνεται ωραίο και δυσκολεύει την ανάγνωση. "
"Τι μπορούμε να κάνουμε για αυτό;"

#. (itstool) path: section/title
#: C/02_welcome_to_the_grid.js.page:156
msgid "Tweaking the Grid"
msgstr "Μικρορύθμιση του πλέγματος"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:158
msgid ""
"One thing we can do, is we can give the Label a margin_top property when we "
"create it. This works sort of like setting a margin for an HTML element "
"using inline CSS styling."
msgstr ""
"Ένα πράγμα που μπορούμε να κάνουμε, είναι να δώσουμε στην ετικέτα μια "
"ιδιότητα margin_top όταν τη δημιουργούμε. Αυτό δουλεύει όπως η ρύθμιση ενός "
"περιθωρίου για ένα στοιχείο HTML χρησιμοποιώντας ενσωματωμένη μορφή CSS."

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:159
#, no-wrap
msgid ""
"\n"
"        // Create a label\n"
"        this._label = new Gtk.Label ({\n"
"            label: \"Welcome to GNOME, too!\",\n"
"            margin_top: 20 });\n"
msgstr ""
"\n"
"        // Δημιουργία ετικέτας\n"
"        this._label = new Gtk.Label ({\n"
"            label: \"Welcome to GNOME, too!\",\n"
"            margin_top: 20 })·\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:166
msgid ""
"Of course, if we do that then if we replace the Label with something else -- "
"or add in another widget -- then we have to repeat the margin_top on it too. "
"Otherwise we end up with something like this:"
msgstr ""
"Φυσικά, εάν κάνουμε αυτό τότε εάν αντικαταστήσουμε την ετικέτα με κάτι άλλο "
"-- ή προσθέτοντας σε ένα άλλο γραφικό στοιχείο -- τότε πρέπει να "
"επαναλάβουμε το margin_top σε αυτό ξανά. Αλλιώς τελειώνουμε μα κάτι σαν αυτό:"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:169
msgid ""
"We could give the Image a margin_bottom property, but that won't work when "
"the new Label is in a separate column. So how about we try this instead:"
msgstr ""
"Μπορούμε να δώσουμε στην εικόνα μια ιδιότητα margin_bottom, αλλά δεν θα "
"δουλέψει όταν η νέα ετικέτα είναι σε μια ξεχωριστή στήλη. Έτσι ας "
"δοκιμάσουμε αυτό:"

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:170
#, no-wrap
msgid ""
"\n"
"        // Create the Grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            row_spacing: 20 });\n"
msgstr ""
"\n"
"        // Δημιουργία του πλέγματος\n"
"        this._grid = new Gtk.Grid ({\n"
"            row_spacing: 20 })·\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:176
msgid ""
"That makes it so that there are always 20 pixels of space in between each "
"horizontal row."
msgstr ""
"Αυτό το κάνει έτσι ώστε να υπάρχουν πάντα 20 εικονοστοιχεία χώρου μεταξύ "
"κάθε οριζόντιας γραμμής."

#. (itstool) path: note/p
#: C/02_welcome_to_the_grid.js.page:177
msgid ""
"Yes, you can also set the column_spacing property on a Grid, or the "
"margin_left and margin_right properties on any widget. Try them out, if you "
"like!"
msgstr ""
"Ναι, μπορείτε επίσης να ορίσετε την ιδιότητα column_spacing σε ένα πλέγμα, ή "
"τις ιδιότητες margin_left και margin_right σε κάθε γραφικό στοιχείο. "
"Δοκιμάστε τες εάν θέλετε!"

#. (itstool) path: section/title
#: C/02_welcome_to_the_grid.js.page:181
msgid "Adding more widgets"
msgstr "Προσθήκη περισσότερων γραφικών στοιχείων"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:183
msgid ""
"If we did want to add a second Label, how would we do it so that it actually "
"looked like it belonged there? One way is to center the Image on top, so "
"that it's above both Labels instead of just the one on the left. That's "
"where those other numbers in the Grid's attach method come in:"
msgstr ""
"Εάν θέλουμε να προσθέσουμε μια δεύτερη ετικέτα, πώς θα μπορούσαμε να κάνουμε "
"έτσι ώστε να φαίνεται πράγματι ότι ανήκε εκεί; Ένας τρόπος είναι να "
"κεντράρετε την εικόνα στην κορυφή, έτσι ώστε να είναι πάνω και από τις δύο "
"ετικέτες αντί για τη μία μόνο στα αριστερά. Εδώ είναι που αυτοί οι άλλοι "
"αριθμοί στη μέθοδο προσάρτησης του πλέγματος έρχονται:"

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:184
#, no-wrap
msgid ""
"\n"
"        // Create a second label\n"
"        this._labelTwo = new Gtk.Label ({\n"
"            label: \"The cake is a pie.\" });\n"
"\n"
"        // Attach the image and labels to the grid\n"
"        this._grid.attach (this._image, 0, 0, 2, 1);\n"
"        this._grid.attach (this._label, 0, 1, 1, 1);\n"
"        this._grid.attach (this._labelTwo, 1, 1, 1, 1);\n"
msgstr ""
"\n"
"        // Δημιουργία δεύτερης ετικέτας\n"
"        this._labelTwo = new Gtk.Label ({\n"
"            label: \"The cake is a pie.\" })·\n"
"\n"
"        // Προσάρτηση εικόνας και ετικετών στο πλέγμα\n"
"        this._grid.attach (this._image, 0, 0, 2, 1)·\n"
"        this._grid.attach (this._label, 0, 1, 1, 1)·\n"
"        this._grid.attach (this._labelTwo, 1, 1, 1, 1)·\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:195
msgid ""
"After we create the second Label, we attach it to the Grid to the right of "
"the first Label. Remember, the first two numbers count columns and rows from "
"left to right and top to bottom, starting with 0. So if the first Label is "
"in column 0 and row 1, we can put the second in column 1 and row 1 to put it "
"to the right of the first Label."
msgstr ""
"Μετά τη δημιουργία της δεύτερης ετικέτας, την προσκολλάμε στο πλέγμα στα "
"δεξιά της πρώτης ετικέτας. Να θυμάστε, οι πρώτοι δύο αριθμοί υπολογίζουν "
"στήλες και γραμμές από αριστερά προς τα δεξιά και από πάνω προς τα κάτω, "
"ξεκινώντας από 0. Έτσι εάν η πρώτη ετικέτα είναι στη στήλη 0 και στη γραμμή "
"1, μπορούμε να βάλουμε τη δεύτερη στη στήλη 1 και στη γραμμή 1 για να τη "
"βάλουμε στα δεξιά της πρώτης ετικέτας."

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:196
msgid ""
"Note the number 2 in the attach statement for the Image. That's what does "
"the trick here. That number is how many columns the Image spans, remember? "
"So when we put it together, we get something like this:"
msgstr ""
"Σημειώστε τον αριθμό 2 στη δήλωση προσάρτησης για την εικόνα. Αυτό κάνει "
"εδώ. Αυτός ο αριθμός είναι πόσες στήλες καλύπτει η εικόνα, θυμάστε; Έτσι "
"όταν το βάζουμε μαζί, πάρουμε κάτι σαν αυτό:"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:199
msgid "There are two things you should take note of, here."
msgstr "Υπάρχουν δύο πράγματα που θα πρέπει να σημειώσετε, εδώ."

#. (itstool) path: item/p
#: C/02_welcome_to_the_grid.js.page:201
msgid ""
"Setting the Image to span two columns doesn't stretch the picture itself "
"horizontally. Instead, it stretches the invisible box taken up by the Image "
"widget to fill both columns, then places the Image in the center of that box."
msgstr ""
"Ο ορισμός της εικόνας να καλύψει δύο στήλες δεν τεντώνει την ίδια την εικόνα "
"οριζόντια. Αντίθετα, τεντώνει το αόρατο πλαίσιο που πάρθηκε από το γραφικό "
"στοιχείο της εικόνας για να γεμίσει και τις δύο στήλες, έπειτα βάζει την "
"εικόνα στο κέντρο αυτού του πλαισίου."

#. (itstool) path: item/p
#: C/02_welcome_to_the_grid.js.page:202
msgid ""
"Even though we've set the Grid's row_spacing and the ApplicationWindow's "
"border_width properties, we haven't yet set anything that puts a border in "
"between the two Labels. They were separate earlier when the Image was in "
"only one column, but now that it spans both GNOME doesn't see a reason to "
"keep them apart."
msgstr ""
"Αν και έχουμε ορίσει τη row_spacing του πλέγματος και τις ιδιότητες "
"border_width του ApplicationWindow, δεν έχουμε ορίσει ακόμα οτιδήποτε βάζει "
"ένα περίγραμμα μεταξύ των δύο ετικετών. Ήταν ξεχωριστές νωρίτερα όταν η "
"εικόνα ήταν μόνο μια στήλη, αλλά τώρα που καλύπτει και τις δύο το GNOME δεν "
"βλέπει λόγο να τις κρατήσει ξέχωρα."

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:205
msgid ""
"There are at least three ways we can get around that last one. First, we can "
"set a margin_left or margin_right on one of the Labels:"
msgstr ""
"Υπάρχουν τουλάχιστον τρεις τρόποι που μπορούμε να παρακάμψουμε την "
"τελευταία. Πρώτα, μπορούμε να ορίσουμε ένα margin_left ή margin_right σε μία "
"από τις ετικέτες:"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:208
msgid "Second, we can set the Grid's column_homogenous property to true."
msgstr "Δεύτερο, μπορούμε να ορίσουμε την ιδιότητα column_homogenous σε αληθή."

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:209
#, no-wrap
msgid ""
"\n"
"        // Create the Grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            column_homogeneous: true,\n"
"            row_spacing: 20 });\n"
msgstr ""
"\n"
"        // Δημιουργία του πλέγματος\n"
"        this._grid = new Gtk.Grid ({\n"
"            column_homogeneous: true,\n"
"            row_spacing: 20 })·\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:216
msgid "That makes it look something like this:"
msgstr "Αυτό το κάνει να μοιάζει σαν αυτό:"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:219
msgid ""
"And third, we can set the Grid's column_spacing property, the same way we "
"set its row_spacing."
msgstr ""
"Και τρίτο, μπορούμε να ορίσουμε την ιδιότητα column_spacing του πλέγματος, "
"με τον ίδιο τρόπο που ορίζουμε το row_spacing του."

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:220
#, no-wrap
msgid ""
"\n"
"        // Create the Grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            column_spacing: 20,\n"
"            row_spacing: 20 });\n"
msgstr ""
"\n"
"        // Δημιουργία του πλέγματος\n"
"        this._grid = new Gtk.Grid ({\n"
"            column_spacing: 20,\n"
"            row_spacing: 20 })·\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:226
msgid "That makes it look like this:"
msgstr "Αυτό το κάνει να μοιάζει σαν αυτό:"

#. (itstool) path: section/title
#: C/02_welcome_to_the_grid.js.page:231
msgid "Using stock images"
msgstr "Χρήση εικόνων παρακαταθήκης"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:233
msgid ""
"GNOME has a lot of stock images on hand already, that we can use if we don't "
"feel like creating our own or if we want a universally-recognized icon. "
"Here's how we create a stock image, compared to how we create a normal one:"
msgstr ""
"Το GNOME έχει πολλές εικόνες παρακαταθήκης ήδη, που μπορούμε να "
"χρησιμοποιήσουμε εάν δεν θέλουμε να δημιουργήσουμε τις δικές μας ή εάν "
"θέλουμε ένα γενικά αναγνωρισμένο εικονίδιο. Να πώς δημιουργούμε μια εικόνα "
"παρακαταθήκης, συγκρινόμενη με το πώς δημιουργούμε μια κανονική:"

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:234
#, no-wrap
msgid ""
"\n"
"        // Create an image\n"
"        this._image = new Gtk.Image ({ file: \"gnome-image.png\" });\n"
"\n"
"        // Create a second image using a stock icon\n"
"        this._icon = new Gtk.Image ({ stock: 'gtk-about' });\n"
msgstr ""
"\n"
"        // Δημιουργία εικόνας\n"
"        this._image = new Gtk.Image ({ file: \"gnome-image.png\" })·\n"
"\n"
"        // Δημιουργία δεύτερης εικόνας χρησιμοποιώντας έτοιμο εικονίδιο\n"
"        this._icon = new Gtk.Image ({ stock: 'gtk-about' })·\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:241
msgid ""
"After that, we attach it to the Grid to the left of the first Label. (We "
"aren't using the second one for this example.)"
msgstr ""
"Μετά από αυτό, το προσκολλάμε στο πλέγμα στα αριστερά της πρώτης ετικέτας. "
"(Δεν χρησιμοποιούμε τη δεύτερη για αυτό το παράδειγμα.)"

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:242
#, no-wrap
msgid ""
"\n"
"        // Attach the images and label to the grid\n"
"        this._grid.attach (this._image, 0, 0, 2, 1);\n"
"        this._grid.attach (this._icon,  0, 1, 1, 1);\n"
"        this._grid.attach (this._label, 1, 1, 1, 1);\n"
msgstr ""
"\n"
"        // Προσάρτηση εικόνων και ετικέτας στο πλέγμα\n"
"        this._grid.attach (this._image, 0, 0, 2, 1)·\n"
"        this._grid.attach (this._icon,  0, 1, 1, 1)·\n"
"        this._grid.attach (this._label, 1, 1, 1, 1)·\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:248
msgid "That gives us this, when we run it:"
msgstr "Αυτά μας δίνει αυτό, όταν το εκτελούμε:"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:251
msgid ""
"That's what the stock \"About\" icon looks like. You can see a list of all "
"the stock items starting with gtk-about in <link href=\"https://developer."
"gnome.org/gtk3/3.4/gtk3-Stock-Items.html#GTK-STOCK-ABOUT:CAPS\">GNOME's "
"developer documentation</link>. It was written for C programmers, but you "
"don't need to know C to use it; just look at the part in quotation marks, "
"like \"gtk-about\", and copy that part to use the icon next to it."
msgstr ""
"Αυτό είναι πώς το εικονίδιο παρακαταθήκης \"About\" μοιάζει. Μπορείτε να "
"δείτε μια λίστα όλων των στοιχείων παρακαταθήκης ξεκινώντας με το gtk-about "
"στο <link href=\"https://developer.gnome.org/gtk3/3.4/gtk3-Stock-Items."
"html#GTK-STOCK-ABOUT:CAPS\">τεκμηρίωση ανάπτυξης του GNOME</link>. Γράφτηκε "
"για προγραμματιστές C, αλλά δεν χρειάζεστε να ξέρετε C για να το "
"χρησιμοποιήσετε· απλά κοιτάξτε το μέρος σε εισαγωγικά, όπως \"gtk-about\" "
"και αντιγράψτε αυτό το μέρος για να χρησιμοποιήσετε το εικονίδιο δίπλα του."

#. (itstool) path: note/p
#: C/02_welcome_to_the_grid.js.page:252
msgid ""
"We put single quotes around 'gtk-about' here because, unlike text strings "
"that have double quotes around them, that part will never need to be "
"translated into another language. In fact, if it <em>were</em> translated "
"it'd break the icon, because its name is still \"gtk-about\" no matter which "
"language you speak."
msgstr ""
"Βάζουμε μονά εισαγωγικά γύρω από το 'gtk-about' εδώ επειδή, αντίθετα με τις "
"συμβολοσειρές κειμένου που έχουν διπλά εισαγωγικά γύρω τους, αυτό το μέρος "
"δεν θα χρειαστεί να μεταφραστεί ποτέ σε άλλη γλώσσα. Πράγματι, εάν "
"<em>μεταφραζότανε</em> θα έσπαγε το εικονίδιο, επειδή το όνομά του είναι "
"ακόμα \"gtk-about\" ανεξάρτητα από την ομιλούμενη γλώσσα."

#. (itstool) path: section/title
#: C/02_welcome_to_the_grid.js.page:257 C/03_getting_the_signal.js.page:338
#: C/hellognome.js.page:187
msgid "What's next?"
msgstr "Ποιο είναι το επόμενο;"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:258
msgid ""
"Before we go on to the next tutorial, let's try something a little different:"
msgstr "Πριν πάμε στο επόμενο μάθημα, ας δοκιμάσουμε κάτι λίγο διαφορετικό:"

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:259
#, no-wrap
msgid ""
"\n"
"        // Create a button\n"
"        this._button = new Gtk.Button ({\n"
"            label: \"Welcome to GNOME, too!\"});\n"
"\n"
"        // Attach the images and button to the grid\n"
"        this._grid.attach (this._image,  0, 0, 2, 1);\n"
"        this._grid.attach (this._icon,   0, 1, 1, 1);\n"
"        this._grid.attach (this._button, 1, 1, 1, 1);\n"
msgstr ""
"\n"
"        // Δημιουργία κουμπιού\n"
"        this._button = new Gtk.Button ({\n"
"            label: \"Welcome to GNOME, too!\"})·\n"
"\n"
"        // Προσάρτηση εικόνων και κουμπιού στο πλέγμα\n"
"        this._grid.attach (this._image,  0, 0, 2, 1)·\n"
"        this._grid.attach (this._icon,   0, 1, 1, 1)·\n"
"        this._grid.attach (this._button, 1, 1, 1, 1)·\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:270
msgid ""
"That's right, we turned the Label into a Button just by changing the name! "
"If you run the application and click on it, though, you'll find that it "
"doesn't do anything. How do we make our Button do something? That's what "
"we'll find out, in <link xref=\"03_getting_the_signal.js\">our next "
"tutorial</link>."
msgstr ""
"Ακριβώς, μετατρέπουμε την ετικέτα σε ένα κουμπί αλλάζοντας απλά το όνομα! "
"Εάν εκτελείτε την εφαρμογή και πατήστε πάνω της, όμως, θα δείτε ότι δεν "
"κάνει τίποτα. Πώς κάνουμε το κουμπί μας να κάνει κάτι; Αυτό θα μάθουμε στο "
"<link xref=\"03_getting_the_signal.js\">επόμενο μάθημά μας</link>."

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:271
msgid ""
"If you like, feel free to spend some time experimenting with Grids, Labels, "
"and Images, including stock images."
msgstr ""
"Εάν θέλετε, μπορείτε ελεύθερα να ξοδέψετε κάποιο χρόνο πειραματιζόμενοι με "
"πλέγματα, ετικέτες και εικόνες συμπεριλαμβανομένων των εικόνων παρακαταθήκης."

#. (itstool) path: note/p
#: C/02_welcome_to_the_grid.js.page:272
msgid ""
"One trick you can use to make more complex layouts is to nest Grids inside "
"of each other. This lets you group together related widgets, and rearrange "
"them easily. Take a look at the <link xref=\"radiobutton.js\">RadioButton</"
"link> code sample if you'd like to see how this is done."
msgstr ""
"Ένα κόλπο που μπορείτε να χρησιμοποιήσετε για να κάνετε πιο σύνθετες "
"διατάξεις είναι η ένθεση πλεγμάτων το ένα μέσα στο άλλο. Αυτό σας επιτρέπει "
"να ομαδοποιήσετε μαζί σχετικά γραφικά στοιχεία και να τα αναδιατάξετε "
"εύκολα. Ρίξτε μια ματιά στο δείγμα κώδικα <link xref=\"radiobutton.js"
"\">RadioButton</link> εάν θα θέλατε να δείτε πώς γίνεται αυτό."

#. (itstool) path: section/title
#: C/02_welcome_to_the_grid.js.page:276 C/checkbutton.js.page:131
#: C/comboboxtext.js.page:171 C/combobox.js.page:228 C/hellognome.js.page:194
#: C/messagedialog.js.page:184 C/radiobutton.js.page:269 C/scale.js.page:203
#: C/spinbutton.js.page:194 C/statusbar.js.page:216 C/switch.js.page:259
#: C/textview.js.page:243 C/togglebutton.js.page:148
#: C/treeview_simple_liststore.js.page:267
msgid "Complete code sample"
msgstr "Δείγμα πλήρους κώδικα"

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:277
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const WelcomeToTheGrid = new Lang.Class({\n"
"    Name: 'Welcome to the Grid',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 10,\n"
"            title: \"Welcome to the Grid\"});\n"
"\n"
"        // Create the Grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            // column_homogeneous: true,\n"
"            // column_spacing: 20,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Create an image\n"
"        this._image = new Gtk.Image ({ file: \"gnome-image.png\" });\n"
"\n"
"        // Create a second image using a stock icon\n"
"        this._icon = new Gtk.Image ({ stock: 'gtk-about' });\n"
"\n"
"        // Create a label\n"
"        this._label = new Gtk.Label ({\n"
"            label: \"Welcome to GNOME, too!\",\n"
"            /* margin_top: 20 */ });\n"
"\n"
"        /* Create a second label\n"
"        this._labelTwo = new Gtk.Label ({\n"
"            label: \"The cake is a pie.\" }); */\n"
"\n"
"        /* Create a button\n"
"        this._button = new Gtk.Button ({\n"
"            label: \"Welcome to GNOME, too!\"}); */\n"
"\n"
"        // Attach the images and button to the grid\n"
"        this._grid.attach (this._image,  0, 0, 2, 1);\n"
"        this._grid.attach (this._icon,   0, 1, 1, 1);\n"
"        this._grid.attach (this._label,  1, 1, 1, 1);\n"
"\n"
"        // this._grid.attach (this._label, 0, 1, 1, 1);\n"
"        // this._grid.attach (this._labelTwo, 1, 1, 1, 1);\n"
"\n"
"        // this._grid.attach (this._button, 1, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new WelcomeToTheGrid ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk·\n"
"const Lang = imports.lang·\n"
"\n"
"const WelcomeToTheGrid = new Lang.Class({\n"
"    Name: 'Welcome to the Grid',\n"
"\n"
"    // Δημιουργία αυτής καθεαυτής της εφαρμογής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application()·\n"
"\n"
"    // Σύνδεση σημάτων 'activate' και 'startup' στις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate))·\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup))·\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present()·\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ()·\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 10,\n"
"            title: \"Welcome to the Grid\"})·\n"
"\n"
"        // Δημιουργία του πλέγματος\n"
"        this._grid = new Gtk.Grid ({\n"
"            // column_homogeneous: true,\n"
"            // column_spacing: 20,\n"
"            row_spacing: 20 })·\n"
"\n"
"        // Δημιουργία εικόνας\n"
"        this._image = new Gtk.Image ({ file: \"gnome-image.png\" })·\n"
"\n"
"        // Δημιουργία δεύτερης εικόνας χρησιμοποιώντας έτοιμο εικονίδιο\n"
"        this._icon = new Gtk.Image ({ stock: 'gtk-about' })·\n"
"\n"
"        // Δημιουργία ετικέτας\n"
"        this._label = new Gtk.Label ({\n"
"            label: \"Welcome to GNOME, too!\",\n"
"            /* margin_top: 20 */ })·\n"
"\n"
"        /* Δημιουργία δεύτερης ετικέτας\n"
"        this._labelTwo = new Gtk.Label ({\n"
"            label: \"The cake is a pie.\" })· */\n"
"\n"
"        /* Δημιουργία κουμπιού\n"
"        this._button = new Gtk.Button ({\n"
"            label: \"Welcome to GNOME, too!\"})· */\n"
"\n"
"        // Προσάρτηση των εικόνων και του κουμπιού στο πλέγμα\n"
"        this._grid.attach (this._image,  0, 0, 2, 1)·\n"
"        this._grid.attach (this._icon,   0, 1, 1, 1)·\n"
"        this._grid.attach (this._label,  1, 1, 1, 1)·\n"
"\n"
"        // this._grid.attach (this._label, 0, 1, 1, 1)·\n"
"        // this._grid.attach (this._labelTwo, 1, 1, 1, 1)·\n"
"\n"
"        // this._grid.attach (this._button, 1, 1, 1, 1)·\n"
"\n"
"        // Προσθήκη του πλέγματος στο παράθυρο\n"
"        this._window.add (this._grid)·\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all()·\n"
"    }\n"
"\n"
"})·\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new WelcomeToTheGrid ()·\n"
"app.application.run (ARGV)·\n"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/03_getting_the_signal.js.page:37 C/03_getting_the_signal.js.page:351
msgctxt "_"
msgid ""
"external ref='media/03_jssignal_01.png' "
"md5='8d6ecab185f4af4534cc255d62b58b8e'"
msgstr ""
"external ref='media/03_jssignal_01.png' "
"md5='8d6ecab185f4af4534cc255d62b58b8e'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/03_getting_the_signal.js.page:157 C/03_getting_the_signal.js.page:357
msgctxt "_"
msgid ""
"external ref='media/03_jssignal_02.png' "
"md5='ba941390fbafc4a0f653c8f70bca92c0'"
msgstr ""
"external ref='media/03_jssignal_02.png' "
"md5='ba941390fbafc4a0f653c8f70bca92c0'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/03_getting_the_signal.js.page:231 C/03_getting_the_signal.js.page:363
msgctxt "_"
msgid ""
"external ref='media/03_jssignal_03.png' "
"md5='49ecf251b0bf57543c8d79a77b6f306d'"
msgstr ""
"external ref='media/03_jssignal_03.png' "
"md5='49ecf251b0bf57543c8d79a77b6f306d'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/03_getting_the_signal.js.page:302 C/03_getting_the_signal.js.page:369
msgctxt "_"
msgid ""
"external ref='media/03_jssignal_04.png' "
"md5='dfc5221ca15ca9fba7d3c76a73804e2d'"
msgstr ""
"external ref='media/03_jssignal_04.png' "
"md5='dfc5221ca15ca9fba7d3c76a73804e2d'"

#. (itstool) path: info/desc
#: C/03_getting_the_signal.js.page:21
msgid "Create Buttons and other widgets that do things when you click on them."
msgstr ""
"Δημιουργία κουμπιών και άλλων γραφικών στοιχείων που κάνουν πράγματα όταν "
"πατάτε πάνω τους."

#. (itstool) path: page/title
#: C/03_getting_the_signal.js.page:24
msgid "3. Getting the Signal"
msgstr "3. Λήψη του σήματος"

#. (itstool) path: synopsis/p
#: C/03_getting_the_signal.js.page:26
msgid ""
"In the last tutorial, we learned how to create widgets like Labels, Images, "
"and Buttons. Here, we'll learn how to make Buttons and other input widgets "
"actually do things, by writing functions which handle the signals they send "
"when they are clicked on or interacted with."
msgstr ""
"Στο τελευταίο μάθημα, μάθαμε πώς να δημιουργήσουμε γραφικά στοιχεία όπως "
"ετικέτες, εικόνες και κουμπιά. Εδώ, θα μάθουμε πώς να κάνουμε κουμπιά και "
"άλλα γραφικά στοιχεία εισόδου να κάνουν πράγματι πράγματα, γράφοντας "
"συναρτήσεις που χειρίζονται τα σήματα που στέλνουν όταν πατιούνται ή "
"αλληλεπιδρούν."

#. (itstool) path: section/title
#: C/03_getting_the_signal.js.page:32
msgid "A basic application"
msgstr "Μια βασική εφαρμογή"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:33
msgid ""
"In GNOME, widgets that you can interact with, like Buttons and Switches, "
"send out signals when they are clicked on or activated. A Button, for "
"instance, sends out the \"clicked\" signal when somebody clicks on it. When "
"this happens, GNOME looks for the part in your code that says what to do."
msgstr ""
"Στο GNOME, τα γραφικά στοιχεία με τα οποία μπορείτε να αλληλεπιδράτε, όπως "
"κουμπιά και διακόπτες, στέλνουν σήματα όταν πατιούνται ή ενεργοποιούνται. "
"Ένα κουμπί, για παράδειγμα, στέλνει το σήμα \"clicked\" όταν κάποιος το "
"πατά. Όταν αυτό συμβαίνει, το GNOME ψάχνει για το μέρος στον κώδικά σας που "
"λέει τι να κάνει."

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:34
msgid ""
"How do we write that code? By connecting that Button's \"clicked\" signal to "
"a callback function, which is a function you write just to handle that "
"signal. So whenever it gives off that signal, the function connected to that "
"signal is run."
msgstr ""
"Πώς γράφουμε αυτόν τον κώδικα; Συνδέοντας το \"clicked\" σήμα αυτού του "
"κουμπιού σε μια συνάρτηση επανάκλησης, που είναι μια συνάρτηση που γράψατε "
"απλά για να χειριστείτε αυτό το σήμα. Έτσι όποτε εκπέμπει αυτό το σήμα, η "
"συνδεμένη συνάρτηση με αυτό το σήμα εκτελείται."

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:35
msgid "Here is an extremely basic example:"
msgstr "Να ένα πολύ βασικό παράδειγμα:"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:39
msgid ""
"This ApplicationWindow has a Button and a Label inside it, arranged in a "
"Grid. Whenever the Button is clicked, a variable that holds the number of "
"cookies is increased by 1, and the Label that shows how many cookies there "
"are is updated."
msgstr ""
"Αυτό το ApplicationWindow έχει ένα κουμπί και μια ετικέτα μέσα του, "
"τακτοποιημένη σε ένα πλέγμα. Όποτε πατιέται το κουμπί, μια μεταβλητή που "
"κρατά τον αριθμό των μπισκότων αυξάνεται κατά 1 και η ετικέτα δείχνει πόσα "
"cookies ενημερώθηκαν."

#. (itstool) path: note/p
#: C/03_getting_the_signal.js.page:40
msgid ""
"The cookies in this example are not the same as the cookies that you get "
"from websites, which store your login information and may keep track of "
"which sites you've visited. They're just imaginary treats. You may bake some "
"real ones if you like."
msgstr ""
"Τα cookies σε αυτό το παράδειγμα δεν είναι το ίδιο όπως τα μπισκότα που "
"παίρνετε από τους ιστότοπους που αποθηκεύουν τις πληροφορίες σύνδεσή σας και "
"μπορούν να παρακολουθούν τους τόπους που έχετε επισκεφτεί. Είναι απλά "
"φανταστικές συμπεριφορές. Μπορείτε να κάνετε μερικές πραγματικές εάν θέλετε."

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:41
msgid ""
"Here is the basic, boilerplate code that goes at the start of the "
"application, before we start creating the window and widgets. Besides the "
"application having a unique name, the biggest change from the usual "
"boilerplate is that we create a global variable right near the beginning, to "
"hold the number of cookies."
msgstr ""
"Να ο βασικός στερεότυπος κώδικας που πηγαίνει στην αρχή της εφαρμογής, πριν "
"αρχίσουμε τη δημιουργία του παραθύρου και των γραφικών στοιχείων. Εκτός από "
"το να έχει η εφαρμογή ένα μοναδικό όνομα, η μεγαλύτερη αλλαγή από το σύνηθες "
"στερεότυπο είναι ότι δημιουργούμε μια καθολική μεταβλητή πολύ κοντά στην "
"αρχή, για να κρατήσουμε τον αριθμό των cookies."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:42
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// We start out with 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// Ξεκινάμε με 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Δημιουργούμε την ίδια την εφαρμογή\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Σύνδεση σημάτων 'activate' και 'startup' στις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' κατασκευάζει τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:73
msgid ""
"Take a look at the part that uses our application's connect method and Lang."
"bind, to connect its activate and startup signals to the functions that "
"present the window and build the UI. We're going to do the same thing with "
"our Button when we get to it, except that we're going to connect its "
"\"clicked\" signal instead."
msgstr ""
"Ρίξτε μια ματιά στο μέρος που χρησιμοποιεί τη μέθοδο σύνδεσης της εφαρμογής "
"μας και Lang.bind, για σύνδεση των ενεργών και αρχικών σημάτων στις "
"συναρτήσεις που εμφανίζουν το παράθυρο και δομούν τη UI. Πρόκειται να "
"κάνουμε το ίδιο πράγμα με το κουμπί μας όταν το πάρουμε, εκτός από το ότι "
"πρόκειται να συνδέσουμε στη θέση του το σήμα \"clicked\"."

#. (itstool) path: section/title
#: C/03_getting_the_signal.js.page:77
msgid "Click the button"
msgstr "Πάτημα του κουμπιού"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:79
msgid ""
"As usual, we'll put all the code to create our Button and other widgets "
"inside the _buildUI function, which is called when the application starts up."
msgstr ""
"Ως συνήθως, θα βάλουμε όλον τον κώδικα για να δημιουργήσουμε το κουμπί μας "
"και άλλα γραφικά στοιχεία μέσα στη συνάρτηση _buildUI, που καλείται όταν "
"ξεκινά η εφαρμογή."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:80
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
msgstr ""
"\n"
"    // Κατασκευή της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:85
msgid "First, we create the window itself:"
msgstr "Πρώτα, δημιουργούμε το ίδιο το παράθυρο:"

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:86
#, no-wrap
msgid ""
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            title: \"Click the button to get a cookie!\"});\n"
msgstr ""
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            title: \"Click the button to get a cookie!\"});\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:95
msgid ""
"Note that we've set its default_height and default_width properties. These "
"let us control how tall and wide the ApplicationWindow will be, in pixels."
msgstr ""
"Σημειώστε ότι έχουμε ορίσει τις ιδιότητες του default_height και "
"default_width. Αυτά μας επιτρέπουν να ελέγξουμε πόσο υψηλό και πλατύ θα "
"είναι το ApplicationWindow, σε εικονοστοιχεία."

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:96
msgid ""
"Next, we'll create the Label that shows us the number of cookies. We can use "
"the cookies variable as part of the Label's label property."
msgstr ""
"Ύστερα, θα δημιουργήσουμε την ετικέτα που μας εμφανίζει τον αριθμό των "
"cookies. Μπορούμε να χρησιμοποιήσουμε τη μεταβλητή των μπισκότων ως μέρος "
"της ιδιότητας ετικέτας της ετικέτας."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:97
#, no-wrap
msgid ""
"\n"
"        // Create the label\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
msgstr ""
"\n"
"        // Δημιουργία της ετικέτας\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:103
msgid ""
"Now we'll create the Button. We set its label property to show the text that "
"we want on the Button, and we connect its \"clicked\" signal to a function "
"called _getACookie, which we'll write after we're done building our "
"application's UI."
msgstr ""
"Τώρα θα δημιουργήσουμε to κουμπί. Ορίζουμε την ιδιότητα του ετικέτα για να "
"εμφανίσουμε το κείμενο που θέλουμε στο κουμπί και συνδέουμε το σήμα του "
"\"clicked\" σε μια συνάρτηση που λέγεται _getACookie, που θα γράψουμε αφού "
"έχουμε δομήσει την UI της δόμησής μας."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:104
#, no-wrap
msgid ""
"\n"
"        // Create the cookie button\n"
"        this._cookieButton = new Gtk.Button ({ label: \"Get a cookie\" });\n"
"\n"
"        // Connect the cookie button to the function that handles clicking it\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
msgstr ""
"\n"
"        // Δημιουργία του κουμπιού cookie\n"
"        this._cookieButton = new Gtk.Button ({ label: \"Get a cookie\" });\n"
"\n"
"        // Σύνδεση του κουμπιού μπισκότου με τη συνάρτηση που χειρίζεται το πάτημά του\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:111
msgid ""
"Finally, we create a Grid, attach the Label and Button to it, add it to the "
"window and tell the window to show itself and its contents. That's all we "
"need inside the _buildUI function, so we close it with a bracket, as well as "
"a comma that tells GNOME to go on to the next function. Note that even "
"though we wrote the code for the Label first, we can still attach it to the "
"Grid in a way that will put it on the bottom."
msgstr ""
"Τελικά, δημιουργούμε ένα πλέγμα, προσαρτήστε την ετικέτα και το κουμπί σε "
"αυτό, προσθέστε το στο παράθυρο και πείτε στο παράθυρο να εμφανίσει τον "
"εαυτό του και τα περιεχόμενά του. Αυτό χρειαζόμαστε μέσα στη συνάρτηση "
"_buildUI, έτσι το κλείνουμε με μια παρένθεση, καθώς και ένα κόμμα που λέει "
"στο GNOME να συνεχίσει στην επόμενη συνάρτηση. Σημειώστε ότι ακόμα κι αν "
"γράψαμε τον κώδικα για την ετικέτα πρώτα, μπορούμε ακόμα να την "
"προσαρτήσουμε στο πλέγμα με τρόπο που θα την βάλει στο τέλος."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:112
#, no-wrap
msgid ""
"\n"
"        // Create a grid to arrange everything inside\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._cookieButton, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
msgstr ""
"\n"
"        // Δημιουργία πλέγματος για τακτοποίηση όλων μέσα του\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Τοποθέτηση όλων μέσα του\n"
"        this._grid.attach (this._cookieButton, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 1, 1, 1);\n"
"\n"
"        // Προσθήκη του πλέγματος στο παράθυρο\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"\n"
"    },\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:131
msgid ""
"Now, we write the _getACookie function. Whenever our Button sends out its "
"\"clicked\" signal, the code in this function will run. In this case, all it "
"does is increase the number of cookies by 1, and update the Label to show "
"the new number of cookies. We do this using the Label's set_label method."
msgstr ""
"Τώρα, γράφουμε τη συνάρτηση _getACookie. Όποτε το κουμπί μας στέλνει το σήμα "
"του \"clicked\", ο κώδικας σε αυτή τη συνάρτηση θα εκτελεστεί. Σε αυτήν την "
"περίπτωση, αυτό που κάνει είναι να αυξήσει τον αριθμό των μπισκότων κατά 1 "
"και να ενημερώσει την ετικέτα να εμφανίσει τον νέο αριθμό των μπισκότων. Το "
"κάνουμε αυτό χρησιμοποιώντας τη μέθοδο set_label της ετικέτας."

#. (itstool) path: note/p
#: C/03_getting_the_signal.js.page:132
msgid ""
"Many widgets have the same properties and methods. Both Labels and Buttons, "
"for instance, have a label property that says what text is inside them, and "
"get_label and set_label methods that let you check what that text is and "
"change it, respectively. So if you learn how one widget works, you'll also "
"know how others like it work."
msgstr ""
"Πολλά γραφικά στοιχεία έχουν τις ίδιες ιδιότητες και μεθόδους. Και οι "
"ετικέτες και τα κουμπιά, για παράδειγμα, έχουν μια ιδιότητα ετικέτας που "
"λέει ποιο κείμενο είναι μέσα τους και τις μεθόδους et_label και set_label "
"που σας επιτρέπουν να ελέγξετε ποιο είναι αυτό το κείμενο και να το "
"αλλάξετε, αντίστοιχα. Έτσι εάν μαθαίνετε πώς ένα γραφικό στοιχείο δουλεύει, "
"θα ξέρετε επίσης πώς άλλα σαν κι αυτό δουλεύουν."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:133
#, no-wrap
msgid ""
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Increase the number of cookies by 1 and update the label\n"
"        cookies++;\n"
"        this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Αύξηση του αριθμού των μπισκότων κατά 1 και ενημέρωση της ετικέτας\n"
"        cookies++;\n"
"        this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:145
msgid ""
"Finally, we run the application, using the same kind of code as in our last "
"tutorial."
msgstr ""
"Τελικά, εκτελούμε την εφαρμογή, χρησιμοποιώντας το ίδιο είδος κώδικα όπως "
"στο τελευταίο μας μάθημα."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:146
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV)·\n"

#. (itstool) path: section/title
#: C/03_getting_the_signal.js.page:154
msgid "Flip the switch"
msgstr "Αναστροφή του διακόπτη"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:155
msgid ""
"Buttons aren't the only input widgets in our GTK+ toolbox. We can also use "
"switches, like the one in this example. Switches don't have a label "
"property, so we have to create a separate Label that says what it does to go "
"next to it."
msgstr ""
"Τα κουμπιά δεν είναι τα μόνα γραφικά στοιχεία εισόδου στην εργαλειοθήκη μας "
"Gtk+. Μπορούμε επίσης να χρησιμοποιήσουμε διακόπτες, όπως αυτόν σε αυτό το "
"παράδειγμα. Οι διακόπτες δεν έχουν μια ιδιότητα ετικέτας, έτσι πρέπει να "
"δημιουργήσουμε μια ξεχωριστή ετικέτα που λέει τι κάνει για να πάει δίπλα του."

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:159
msgid ""
"A Switch has two positions, Off and On. When a Switch is turned on, its text "
"and background color change, so you can tell which position it's in."
msgstr ""
"Ένας διακόπτης έχει δύο θέσεις, ανενεργό και ενεργό. Όταν ένας διακόπτης "
"ενεργοποιείται το κείμενο του και το χρώμα παρασκηνίου αλλάζουν και μπορείτε "
"να πείτε σε ποια θέση είναι."

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:161
msgid ""
"You may have seen Switches like these in GNOME's accessibility menu, which "
"let you turn features like large text and the on-screen keyboard on and off. "
"In this case, the Switch controls our imaginary cookie dispenser. If the "
"Switch is turned on, you can get cookies by clicking the \"Get a cookie\" "
"Button. If it's turned off, clicking the Button won't do anything."
msgstr ""
"Μπορείτε να έχετε δει διακόπτες όπως αυτούς στο μενού πρόσβασης του GNOME, "
"που σας επιτρέπει να αλλάξετε γνωρίσματα όπως μεγάλο κείμενο και το "
"πληκτρολόγιο οθόνης ενεργό και ανενεργό. Σε αυτήν την περίπτωση, ο διακόπτης "
"ελέγχει το φανταστικό μας δοχείο cookie. Εάν ο διακόπτης είναι ενεργός, "
"μπορείτε να πάρετε cookies πατώντας στο κουμπί \"Get a cookie\". Εάν είναι "
"ανενεργός, πατώντας το κουμπί δεν θα κάνει τίποτα."

#. (itstool) path: note/p
#: C/03_getting_the_signal.js.page:162
msgid ""
"You can get to the accessibility menu by clicking on the outline of a human, "
"near your name in the upper-right corner of the screen."
msgstr ""
"Μπορείτε να πάρετε το μενού πρόσβασης πατώντας στο περίγραμμα ενός ανθρώπου, "
"κοντά στο όνομά σας στην πάνω δεξιά γωνία της οθόνης."

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:163
msgid "Here's how we create the Switch:"
msgstr "Να πώς δημιουργούμε τον διακόπτη:"

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:164
#, no-wrap
msgid ""
"\n"
"        // Create the switch that controls whether or not you can win\n"
"        this._cookieSwitch = new Gtk.Switch ();\n"
msgstr ""
"\n"
"        // Δημιουργία του διακόπτη που ελέγχει αν μπορείτε να κερδίσετε ή όχι\n"
"        this._cookieSwitch = new Gtk.Switch ();\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:169
msgid ""
"We don't actually need to connect the Switch to anything. All we need to do "
"is write an if statement in our _getACookie function, to check to see if the "
"Switch is turned on. If we wanted to make something happen as soon as you "
"flip the Switch, though, we would connect its notify::active signal, like so:"
msgstr ""
"Δεν χρειαζόμαστε πράγματι να συνδέσουμε τον διακόπτη με κάτι. Αυτό που "
"χρειαζόμαστε να κάνουμε είναι να γράψουμε μια πρόταση if στη συνάρτηση μας "
"_getACookie, για να ελέγξουμε να δούμε εάν ο διακόπτης είναι ενεργός. Εάν θα "
"θέλαμε να κάνουμε κάτι να συμβεί μόλις αντιστρέψετε τον διακόπτη, όμως, θα "
"συνδέαμε το σήμα του notify::active, ως εξής:"

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:170
#, no-wrap
msgid ""
"\n"
"        // Connect the switch to the function that handles it\n"
"        this._cookieSwitch.connect ('notify::active', Lang.bind (this, this._cookieDispenser));\n"
msgstr ""
"\n"
"        // Σύνδεση του διακόπτη με τη συνάρτηση που το χειρίζεται\n"
"        this._cookieSwitch.connect ('notify::active', Lang.bind (this, this._cookieDispenser));\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:175
msgid ""
"A Switch is set to the off position by default. If we wanted the Switch to "
"start out turned on, we would set the value of its active property to true "
"when we create it."
msgstr ""
"Ένας διακόπτης ορίζεται στην ανενεργή θέση από προεπιλογή. Εάν θέλουμε ο "
"διακόπτης να ξεκινά ενεργός, θα ορίζαμε την τιμή της ενεργής ιδιότητας σε "
"αληθή όταν τη δημιουργούμε."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:176
#, no-wrap
msgid ""
"\n"
"        this._cookieSwitch = new Gtk.Switch ({ active: true });\n"
msgstr ""
"\n"
"        this._cookieSwitch = new Gtk.Switch ({ active: true });\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:180
msgid ""
"Let's just create it normally, though, and then create the Label that goes "
"with it. We want the Switch and the Label to be kept right next to each "
"other, so we'll create a Grid just for them, then put that Grid in our "
"larger Grid that holds all the widgets inside it. Here's what the code looks "
"like to create all that:"
msgstr ""
"Ας τον δημιουργήσουμε κανονικά, όμως, και έπειτα ας δημιουργήσουμε την "
"ετικέτα που πηγαίνει μαζί του. Θέλουμε ο διακόπτης και η ετικέτα να "
"κρατιούνται ακριβώς δίπλα μεταξύ τους, έτσι θα δημιουργήσουμε ένα πλέγμα "
"μόνο για αυτούς, έπειτα θα βάλουμε αυτό το πλέγμα στο μεγαλύτερό μας πλέγμα "
"που κρατά όλα τα γραφικά στοιχεία μέσα του. Να πώς θα φαίνεται ο κώδικας "
"για τη δημιουργία του:"

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:181
#, no-wrap
msgid ""
"\n"
"        // Create the switch that controls whether or not you can win\n"
"        this._cookieSwitch = new Gtk.Switch ();\n"
"\n"
"        // Create the label to go with the switch\n"
"        this._switchLabel = new Gtk.Label ({\n"
"            label: \"Cookie dispenser\" });\n"
"\n"
"        // Create a grid for the switch and its label\n"
"        this._switchGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Put the switch and its label inside that grid\n"
"        this._switchGrid.attach (this._switchLabel, 0, 0, 1, 1);\n"
"        this._switchGrid.attach (this._cookieSwitch, 1, 0, 1, 1);\n"
msgstr ""
"\n"
"        // Δημιουργία του διακόπτη που ελέγχει αν μπορείτε να κερδίσετε ή όχι\n"
"        this._cookieSwitch = new Gtk.Switch ();\n"
"\n"
"        // Δημιουργία της ετικέτας που πάει με τον διακόπτη\n"
"        this._switchLabel = new Gtk.Label ({\n"
"            label: \"Cookie dispenser\" });\n"
"\n"
"        // Δημιουργία πλέγματος για τον διακόπτη και την ετικέτα του\n"
"        this._switchGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Τοποθέτηση του διακόπτη και της ετικέτας του μες το πλέγμα\n"
"        this._switchGrid.attach (this._switchLabel, 0, 0, 1, 1);\n"
"        this._switchGrid.attach (this._cookieSwitch, 1, 0, 1, 1);\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:199
msgid "And now we arrange everything in the larger Grid like so."
msgstr "Και τώρα τακτοποιούμε το καθετί στο μεγαλύτερο πλέγμα έτσι."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:200
#, no-wrap
msgid ""
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._cookieButton, 0, 0, 1, 1);\n"
"        this._grid.attach (this._switchGrid, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
msgstr ""
"\n"
"        // Τοποθέτηση όλων μες το πλέγμα\n"
"        this._grid.attach (this._cookieButton, 0, 0, 1, 1);\n"
"        this._grid.attach (this._switchGrid, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:207
msgid ""
"Now we change the _getACookie function so that it checks to see if the "
"cookie dispenser is turned on. We do that by using the Switch's get_active "
"method. It returns true if the Switch is turned on, and false if the Switch "
"is turned off."
msgstr ""
"Τώρα αλλάζουμε τη συνάρτηση _getACookie έτσι ώστε να ελέγχει εάν ο περιέκτης "
"του μπισκότου είναι ενεργός. Το κάνουμε χρησιμοποιώντας τη μέθοδο του "
"διακόπτη get_active. Επιστρέφει αληθές εάν ο διακόπτης είναι ενεργός και "
"ψευδές εάν ο διακόπτης είναι ανενεργός."

#. (itstool) path: note/p
#: C/03_getting_the_signal.js.page:208
msgid ""
"When a method is used in an if statement like this, the code inside the if "
"statement is executed if the method returns true."
msgstr ""
"Όταν μια μέθοδος χρησιμοποιείται σε μια δήλωση if όπως αυτή, ο κώδικας μέσα "
"στην πρόταση if εκτελείται εάν η μέθοδος επιστρέφει αληθές."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:209
#, no-wrap
msgid ""
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Is the cookie dispenser turned on?\n"
"        if (this._cookieSwitch.get_active()) {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
msgstr ""
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Είναι η συσκευή μπισκότων ενεργή;\n"
"        if (this._cookieSwitch.get_active()) {\n"
"\n"
"            // Αύξηση του αριθμού των μπισκότων κατά 1 και ενημέρωση της ετικέτας\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"

#. (itstool) path: section/title
#: C/03_getting_the_signal.js.page:227
msgid "Tuning the radio"
msgstr "Ρύθμιση του ραδιοκουμπιού"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:229
msgid ""
"Another type of input widget we can use is called the RadioButton. You "
"create them in groups, and then only one RadioButton in a group can be "
"selected at a time. They're called RadioButtons because they work like the "
"channel preset button in old-style car radios. The radio could only be tuned "
"to one station at a time, so whenever you pressed one button in, another "
"would pop back out."
msgstr ""
"Ένας άλλος τύπος γραφικού στοιχείου εισόδου που μπορούμε να "
"χρησιμοποιήσουμε λέγεται το RadioButton. Τα δημιουργείτε σε ομάδες και "
"έπειτα μόνο ένα RadioButton σε μια ομάδα μπορεί να επιλεγεί τη φορά. "
"Λέγονται RadioButtons επειδή δουλεύουν όπως το κουμπί προεπιλογής καναλιού "
"σε παλιά ραδιόφωνα αυτοκινήτου. Το ραδιοπλήκτρο μπορεί να ρυθμιστεί μόνο σε "
"ένα σταθμό τη φορά, έτσι όποτε πατάτε ένα κουμπί, ένα άλλο πετάγεται έξω."

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:233
msgid ""
"First off, let's change our ApplicationWindow's name and increase its "
"border_width property, so that our widgets aren't packed in too tightly. The "
"border_width is the number of pixels between any widget and the edge of the "
"window."
msgstr ""
"Πρώτα, ας αλλάξουμε το όνομα του ApplicationWindow μας και ας αυξήσουμε την "
"ιδιότητά του border_width, έτσι ώστε τα γραφικά στοιχεία μας να μην "
"πακετάρονται υπερβολικά σφικτά. Το border_width είναι ο αριθμός των "
"εικονοστοιχείων μεταξύ κάθε γραφικού στοιχείου και της άκρης του παραθύρου."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:234
#, no-wrap
msgid ""
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            border_width: 20,\n"
"            title: \"Choose the one that says 'cookie'!\"});\n"
msgstr ""
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            border_width: 20,\n"
"            title: \"Choose the one that says 'cookie'!\"});\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:245
msgid ""
"After that, we create the RadioButtons. Remember how they're created in "
"groups? The way we do that, is we set each new RadioButton's group property "
"to the name of another RadioButton."
msgstr ""
"Μετά από αυτό, δημιουργούμε τα RadioButtons. Θυμάστε πώς δημιουργήθηκαν σε "
"ομάδες; Ο τρόπος που το κάνουμε, είναι ορίζοντας κάθε νέα ιδιότητα ομάδας "
"RadioButton στο όνομα ενός άλλου RadioButton."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:246
#, no-wrap
msgid ""
"\n"
"        // Create the radio buttons\n"
"        this._cookieRadio = new Gtk.RadioButton ({ label: \"Cookie\" });\n"
"        this._notCookieOne = new Gtk.RadioButton ({ label: \"Not cookie\",\n"
"            group: this._cookieRadio });\n"
"        this._notCookieTwo = new Gtk.RadioButton ({ label: \"Not cookie\",\n"
"            group: this._cookieRadio });\n"
msgstr ""
"\n"
"        // Δημιουργία των ραδιοπλήκτρων\n"
"        this._cookieRadio = new Gtk.RadioButton ({ label: \"Cookie\" });\n"
"        this._notCookieOne = new Gtk.RadioButton ({ label: \"Not cookie\",\n"
"            group: this._cookieRadio });\n"
"        this._notCookieTwo = new Gtk.RadioButton ({ label: \"Not cookie\",\n"
"            group: this._cookieRadio });\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:255
msgid ""
"Next, we create a Grid for the RadioButtons. Remember, we don't have to "
"arrange things in Grids in the same order that we create them in."
msgstr ""
"Ύστερα, δημιουργούμε ένα πλέγμα για τα RadioButtons. Να θυμάστε, δεν είμαστε "
"υποχρεωμένοι να τακτοποιήσουμε τα πράγματα σε πλέγματα με την ίδια σειρά που "
"τα δημιουργούμε."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:256
#, no-wrap
msgid ""
"\n"
"        // Arrange the radio buttons in their own grid\n"
"        this._radioGrid = new Gtk.Grid ();\n"
"        this._radioGrid.attach (this._notCookieOne, 0, 0, 1, 1);\n"
"        this._radioGrid.attach (this._cookieRadio, 0, 1, 1, 1);\n"
"        this._radioGrid.attach (this._notCookieTwo, 0, 2, 1, 1);\n"
msgstr ""
"\n"
"         // Τακτοποίηση των ραδιοπλήκτρων στο πλέγμα τους\n"
"        this._radioGrid = new Gtk.Grid ();\n"
"        this._radioGrid.attach (this._notCookieOne, 0, 0, 1, 1);\n"
"        this._radioGrid.attach (this._cookieRadio, 0, 1, 1, 1);\n"
"        this._radioGrid.attach (this._notCookieTwo, 0, 2, 1, 1);\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:264
msgid ""
"Normally, the RadioButton that's selected by default is the one that's the "
"name of the group. We want the first \"Not cookie\" button to be selected by "
"default, though, so we use its set_active method."
msgstr ""
"Κανονικά, το RadioButton που επιλέχτηκε από προεπιλογή είναι αυτό του "
"ονόματος της ομάδας. Θέλουμε το πρώτο κουμπί \"Not cookie\" να επιλέγεται "
"από προεπιλογή, όμως, έτσι χρησιμοποιούμε τη μέθοδό του set_active."

#. (itstool) path: note/p
#: C/03_getting_the_signal.js.page:265
msgid "We could also set its active property to true when we create it."
msgstr ""
"Θα μπορούσαμε επίσης να ορίσουμε την ενεργή του ιδιότητα σε αληθές όταν το "
"δημιουργούμε."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:266
#, no-wrap
msgid ""
"\n"
"        // Set the button that will be at the top to be active by default\n"
"        this._notCookieOne.set_active (true);\n"
msgstr ""
"\n"
"        // Ορισμός του πλήκτρου που θα είναι στην κορυφή για να είναι ενεργό από προεπιλογή\n"
"        this._notCookieOne.set_active (true);\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:271
msgid "Now we arrange everything in our main Grid like usual ..."
msgstr "Τώρα τακτοποιούμε καθετί στο δικό μας κύριο πλέγμα όπως συνήθως ..."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:272
#, no-wrap
msgid ""
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._radioGrid, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
msgstr ""
"\n"
"        // Τοποθέτηση όλων μες το πλέγμα\n"
"        this._grid.attach (this._radioGrid, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:279
msgid ""
"And then we change our _getACookie function to test to see if the cookie "
"button is the one that's selected."
msgstr ""
"Και έπειτα αλλάζουμε τη συνάρτησή μας _getACookie για να ελέγξουμε εάν το "
"κουμπί μπισκότο είναι αυτό που επιλέχτηκε."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:280
#, no-wrap
msgid ""
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Did you select \"cookie\" instead of \"not cookie\"?\n"
"        if (this._cookieRadio.get_active()) {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
msgstr ""
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Επιλέξατε \"cookie\" αντί για \"not cookie\";\n"
"        if (this._cookieButton.get_active()) {\n"
"\n"
"            // Αύξηση του αριθμού των cookies κατά 1 και ενημέρωση της ετικέτας\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"

#. (itstool) path: section/title
#: C/03_getting_the_signal.js.page:298
msgid "Can you spell \"cookie\"?"
msgstr "Μπορείτε να συλλαβίσετε \"cookie\";"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:300
msgid ""
"The last input widget we're going to cover is the Entry widget, which is "
"used for single-line text entry."
msgstr ""
"Στο τελευταίο γραφικό στοιχείο εισόδου που πρόκειται να καλύψουμε είναι το "
"γραφικό στοιχείο καταχώρισης, που χρησιμοποιείται για εισαγωγή κειμένου "
"μονής γραμμής."

#. (itstool) path: note/p
#: C/03_getting_the_signal.js.page:301
msgid ""
"If you need to be able to enter in a whole paragraph or more, like if you "
"are building a text editor, you'll want to look at the much more "
"customizable <link xref=\"textview.js\">TextView</link> widget."
msgstr ""
"Εάν χρειάζεστε να μπορείτε να εισάγετε σε μια πλήρη παράγραφο ή περισσότερο, "
"όπως εάν δομείτε έναν επεξεργαστή κειμένου, θα θέλετε να φαίνεται στο πολύ "
"περισσότερο προσαρμόσιμο γραφικό στοιχείο <link xref=\"textview.js"
"\">TextView</link>."

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:304
msgid "After we change the window's name, we create the Entry widget."
msgstr ""
"Αφού αλλάξουμε το όνομα του παραθύρου, δημιουργούμε το γραφικό στοιχείο "
"καταχώρισης."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:305
#, no-wrap
msgid ""
"\n"
"        // Create the text entry field\n"
"        this._spellCookie = new Gtk.Entry ();\n"
msgstr ""
"\n"
"        // Δημιουργία του πεδίου καταχώρισης κειμένου\n"
"        this._spellCookie = new Gtk.Entry ();\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:310
msgid "Next, we arrange everything in the Grid ..."
msgstr "Ύστερα, τακτοποιούμε καθετί στο πλέγμα ..."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:311
#, no-wrap
msgid ""
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._spellCookie, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
msgstr ""
"\n"
"        // Τοποθέτηση όλων μες το πλέγμα\n"
"        this._grid.attach (this._spellCookie, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:318
msgid ""
"And now we modify _getACookie's if statement again, using the Entry's "
"get_text method to retrieve the text that you entered into it and see if you "
"spelled \"cookie\" right. We don't care whether you capitalize \"cookie\" or "
"not, so we use JavaScript's built-in toLowerCase method to change the "
"Entry's text to all lower case inside the if statement."
msgstr ""
"Και τώρα τροποποιούμε την δήλωση if ξανά του _getACookie, χρησιμοποιώντας τη "
"μέθοδο get_text της καταχώρισης για ανάκτηση του κειμένου που βάλατε μέσα "
"του και δείτε εάν συλλαβίστηκε σωστά το \"cookie\". Δεν μας ενδιαφέρει εάν "
"κάνετε κεφαλαίο το \"cookie\" ή όχι, έτσι χρησιμοποιούμε την ενσωματωμένη "
"μέθοδο toLowerCase της JavaScript για αλλαγή του κειμένου καταχώρισης σε όλα "
"τα πεζά γράμματα στη δήλωση if."

#. (itstool) path: note/p
#: C/03_getting_the_signal.js.page:319
msgid ""
"An Entry widget doesn't have a label property, which is a set text string "
"that the user can't change. (You can't normally change the label on a "
"Button, for instance.) Instead, it has a text property, which changes to "
"match what the user types in."
msgstr ""
"Ένα γραφικό στοιχείο καταχώρισης δεν έχει μια ιδιότητα ετικέτας, που είναι "
"ένα σύνολο συμβολοσειράς κειμένου όπου ο χρήστης δεν μπορεί να αλλάξει. (Δεν "
"μπορείτε κανονικά να αλλάξετε την ετικέτα σε ένα κουμπί, για παράδειγμα.) "
"Στη θέση του έχει μια ιδιότητα κειμένου, που αλλάζει για να συμφωνεί με ότι "
"ο χρήστης πληκτρολογεί."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:320
#, no-wrap
msgid ""
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Did you spell \"cookie\" correctly?\n"
"        if ((this._spellCookie.get_text()).toLowerCase() == \"cookie\") {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
msgstr ""
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Συλλαβίσατε το \"cookie\" σωστά;\n"
"        if ((this._spellCookie.get_text()).toLowerCase() == \"cookie\") {\n"
"\n"
"            // Αύξηση του αριθμού των μπισκότων κατά 1 και ενημέρωση της ετικέτας\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:339
msgid ""
"Keep reading, if you'd like to see the complete code for each version of our "
"cookie maker application."
msgstr ""
"Συνεχίστε την ανάγνωση, εάν θα θέλατε να δείτε τον πλήρη κώδικα για κάθε "
"έκδοση της εφαρμογής δημιουργίας cookie."

#. (itstool) path: note/p
#: C/03_getting_the_signal.js.page:340
msgid ""
"The main JavaScript tutorials page has <link xref=\"beginner.js#buttons"
"\">more detailed code samples</link> for each input widget, including "
"several not covered here."
msgstr ""
"Η κύρια σελίδα μαθημάτων JavaScript έχει <link xref=\"beginner.js#buttons"
"\">πιο λεπτομερή δείγματα κώδικα</link> για κάθε γραφικό στοιχείο εισόδου, "
"συμπεριλαμβανομένων αρκετών που δεν καλύπτονται εδώ."

#. (itstool) path: section/title
#: C/03_getting_the_signal.js.page:345
msgid "Complete code samples"
msgstr "Δείγματα πλήρους κώδικα"

#. (itstool) path: section/title
#: C/03_getting_the_signal.js.page:350
msgid "Code sample with Button"
msgstr "Δείγμα κώδικα με κουμπί"

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:352
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// We start out with 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            title: \"Click the button to get a cookie!\"});\n"
"\n"
"        // Create the label\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
"\n"
"        // Create the cookie button\n"
"        this._cookieButton = new Gtk.Button ({ label: \"Get a cookie\" });\n"
"\n"
"        // Connect the cookie button to the function that handles clicking it\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
"\n"
"        // Create a grid to arrange everything inside\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._cookieButton, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Increase the number of cookies by 1 and update the label\n"
"        cookies++;\n"
"        this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// Ξεκινάμε με 0 μπισκότα\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Δημιουργία της ίδιας της εφαρμογής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Σύνδεση των σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρο όταν είναι ενεργή \n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Δόμηση της επαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            title: \"Click the button to get a cookie!\"});\n"
"\n"
"        // Δημιουργία της ετικέτας\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
"\n"
"        // Δημιουργία του κουμπιού μπισκότου\n"
"        this._cookieButton = new Gtk.Button ({ label: \"Get a cookie\" });\n"
"\n"
"        // Σύνδεση του κουμπιού μπισκότου με τη συνάρτηση που χειρίζεται το πάτημά του\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
"\n"
"        // Δημιουργία πλέγματος για τακτοποίηση όλων μέσα του\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Τοποθέτηση όλων μες το πλέγμα\n"
"        this._grid.attach (this._cookieButton, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 1, 1, 1);\n"
"\n"
"        // Προσθήκη του πλέγματος στο παράθυρο\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Αύξηση του αριθμού των μπισκότων κατά 1 και ενημέρωση της ετικέτας\n"
"        cookies++;\n"
"        this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/title
#: C/03_getting_the_signal.js.page:356
msgid "Code sample with Switch"
msgstr "Δείγμα κώδικα με διακόπτη"

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:358
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// We start out with 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            title: \"Click the button to get a cookie!\"});\n"
"\n"
"        // Create the label\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
"\n"
"        // Create the cookie button\n"
"        this._cookieButton = new Gtk.Button ({\n"
"            label: \"Get a cookie\" });\n"
"\n"
"        // Connect the cookie button to the function that handles clicking it\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
"\n"
"        // Create the switch that controls whether or not you can win\n"
"        this._cookieSwitch = new Gtk.Switch ();\n"
"\n"
"        // Create the label to go with the switch\n"
"        this._switchLabel = new Gtk.Label ({\n"
"            label: \"Cookie dispenser\" });\n"
"\n"
"        // Create a grid for the switch and its label\n"
"        this._switchGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Put the switch and its label inside that grid\n"
"        this._switchGrid.attach (this._switchLabel, 0, 0, 1, 1);\n"
"        this._switchGrid.attach (this._cookieSwitch, 1, 0, 1, 1);\n"
"\n"
"        // Create a grid to arrange everything else inside\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._cookieButton, 0, 0, 1, 1);\n"
"        this._grid.attach (this._switchGrid, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Is the cookie dispenser turned on?\n"
"        if (this._cookieSwitch.get_active()) {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// Ξεκινάμε με 0 μπισκότα\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Δημιουργία της ίδιας της εφαρμογής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Σύνδεση σημάτων 'activate' και 'startup' στις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Κατασκευή της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            title: \"Click the button to get a cookie!\"});\n"
"\n"
"        // Δημιουργία της ετικέτας\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
"\n"
"        // Δημιουργία του κουμπιού μπισκότου\n"
"        this._cookieButton = new Gtk.Button ({\n"
"            label: \"Get a cookie\" });\n"
"\n"
"        // Σύνδεση του κουμπιού μπισκότου με τη συνάρτηση που χειρίζεται το πάτημά του\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
"\n"
"        // Δημιουργία του διακόπτη που ελέγχει αν μπορείτε να κερδίσετε ή όχι\n"
"        this._cookieSwitch = new Gtk.Switch ();\n"
"\n"
"        // Δημιουργία της ετικέτας που πάει μαζί με τον διακόπτη\n"
"        this._switchLabel = new Gtk.Label ({\n"
"            label: \"Cookie dispenser\" });\n"
"\n"
"        // Δημιουργία πλέγματος για τον διακόπτη και την ετικέτα του\n"
"        this._switchGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Τοποθέτηση του διακόπτη και της ετικέτας του μέσα σε αυτό το πλέγμα\n"
"        this._switchGrid.attach (this._switchLabel, 0, 0, 1, 1);\n"
"        this._switchGrid.attach (this._cookieSwitch, 1, 0, 1, 1);\n"
"\n"
"        // Δημιουργία πλέγματος για τακτοποίηση όλων μέσα του\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Τοποθέτηση όλων μες το πλέγμα\n"
"        this._grid.attach (this._cookieButton, 0, 0, 1, 1);\n"
"        this._grid.attach (this._switchGrid, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
"\n"
"        // Προσθήκη του πλέγματος στο παράθυρο\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Είναι η συσκευή μπισκότων ενεργή?\n"
"        if (this._cookieSwitch.get_active()) {\n"
"\n"
"            // Αύξηση του αριθμού των μπισκότων κατά 1 και ενημέρωση της ετικέτας\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/title
#: C/03_getting_the_signal.js.page:362
msgid "Code sample with RadioButton"
msgstr "Δείγμα κώδικα με RadioButton"

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:364
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// We start out with 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            border_width: 20,\n"
"            title: \"Choose the one that says 'cookie'!\"});\n"
"\n"
"        // Create the radio buttons\n"
"        this._cookieRadio = new Gtk.RadioButton ({ label: \"Cookie\" });\n"
"        this._notCookieOne = new Gtk.RadioButton ({ label: \"Not cookie\",\n"
"            group: this._cookieRadio });\n"
"        this._notCookieTwo = new Gtk.RadioButton ({ label: \"Not cookie\",\n"
"            group: this._cookieRadio });\n"
"\n"
"        // Arrange the radio buttons in their own grid\n"
"        this._radioGrid = new Gtk.Grid ();\n"
"        this._radioGrid.attach (this._notCookieOne, 0, 0, 1, 1);\n"
"        this._radioGrid.attach (this._cookieRadio, 0, 1, 1, 1);\n"
"        this._radioGrid.attach (this._notCookieTwo, 0, 2, 1, 1);\n"
"\n"
"        // Set the button that will be at the top to be active by default\n"
"        this._notCookieOne.set_active (true);\n"
"\n"
"        // Create the cookie button\n"
"        this._cookieButton = new Gtk.Button ({\n"
"            label: \"Get a cookie\" });\n"
"\n"
"        // Connect the cookie button to the function that handles clicking it\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
"\n"
"        // Create the label\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
"\n"
"        // Create a grid to arrange everything inside\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._radioGrid, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Did you select \"cookie\" instead of \"not cookie\"?\n"
"        if (this._cookieRadio.get_active()) {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// Ξεκινάμε με 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Δημιουργία της ίδιας της εφαρμογής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Σύνδεση σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            border_width: 20,\n"
"            title: \"Choose the one that says 'cookie'!\"});\n"
"\n"
"        // Δημιουργία των ραδιοπλήκτρων\n"
"        this._cookieButton = new Gtk.RadioButton ({ label: \"Cookie\" });\n"
"        this._notCookieOne = new Gtk.RadioButton ({ label: \"Not cookie\",\n"
"            group: this._cookieButton });\n"
"        this._notCookieTwo = new Gtk.RadioButton ({ label: \"Not cookie\",\n"
"            group: this._cookieButton });\n"
"\n"
"        // Τακτοποίηση των ραδιοπλήκτρων στο δικό τους πλέγμα\n"
"        this._radioGrid = new Gtk.Grid ();\n"
"        this._radioGrid.attach (this._notCookieOne, 0, 0, 1, 1);\n"
"        this._radioGrid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._radioGrid.attach (this._notCookieTwo, 0, 2, 1, 1);\n"
"\n"
"        // Ορισμός του κουμπιού που θα είναι στην κορυφή για να είναι ενεργό από προεπιλογή\n"
"        this._notCookieOne.set_active (true);\n"
"\n"
"        // Δημιουργία του κουμπιού cookie\n"
"        this._cookieButton = new Gtk.Button ({\n"
"            label: \"Get a cookie\" });\n"
"\n"
"        // Σύνδεση του κουμπιού μπισκότο με τη συνάρτηση που χειρίζεται το πάτημά του\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
"\n"
"        // Δημιουργία της ετικέτας\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
"\n"
"        // Δημιουργία πλέγματος για τακτοποίηση όλων μέσα του\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Τοποθέτηση όλων μέσα στο πλέγμα\n"
"        this._grid.attach (this._radioGrid, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
"\n"
"        // Προσθήκη του πλέγματος στο παράθυρο\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Επιλέξατε \"cookie\" αντί για \"not cookie\"?\n"
"        if (this._cookieButton.get_active()) {\n"
"\n"
"            // Αύξηση του αριθμού των cookies κατά 1 και ενημέρωση της ετικέτας\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/title
#: C/03_getting_the_signal.js.page:368
msgid "Code sample with Entry"
msgstr "Δείγμα κώδικα με καταχώριση"

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:370
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// We start out with 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            border_width: 20,\n"
"            title: \"Spell 'cookie' to get a cookie!\"});\n"
"\n"
"        // Create the text entry field\n"
"        this._spellCookie = new Gtk.Entry ();\n"
"\n"
"        // Create the cookie button\n"
"        this._cookieButton = new Gtk.Button ({\n"
"            label: \"Get a cookie\" });\n"
"\n"
"        // Connect the cookie button to the function that handles clicking it\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
"\n"
"        // Create the label\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
"\n"
"        // Create a grid to arrange everything inside\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._spellCookie, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Did you spell \"cookie\" correctly?\n"
"        if ((this._spellCookie.get_text()).toLowerCase() == \"cookie\") {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// Ξεκινάμε με 0 μπισκότα\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Δημιουργία αυτής καθεαυτής της εφαρμογής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Σύνδεση σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            border_width: 20,\n"
"            title: \"Spell 'cookie' to get a cookie!\"});\n"
"\n"
"        // Δημιουργία του πεδίου καταχώρισης κειμένου\n"
"        this._spellCookie = new Gtk.Entry ();\n"
"\n"
"        // Δημιουργία του κουμπιού μπισκότο\n"
"        this._cookieButton = new Gtk.Button ({\n"
"            label: \"Get a cookie\" });\n"
"\n"
"        // Σύνδεση του κουμπιού μπισκότο με τη συνάρτηση που χειρίζεται το πάτημά του\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
"\n"
"        // Δημιουργία της ετικέτας\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
"\n"
"        // Δημιουργία πλέγματος για τακτοποίηση όλων μέσα του\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Τοποθέτηση όλων μες το πλέγμα\n"
"        this._grid.attach (this._spellCookie, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
"\n"
"        // Προσθήκη του πλέγματος στο παράθυρο\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Εμφάνιση του παραθύρου κι όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Συλλαβίσατε \"cookie\" σωστά?\n"
"        if ((this._spellCookie.get_text()).toLowerCase() == \"cookie\") {\n"
"\n"
"            // Αύξηση του αριθμού των μπισκότων κατά 1 και ενημέρωση της ετικέτας\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/aboutdialog.c.page:25 C/aboutdialog.js.page:21 C/aboutdialog.py.page:23
#: C/aboutdialog.vala.page:30
msgctxt "_"
msgid ""
"external ref='media/aboutdialog_GMenu.png' "
"md5='a36117a559fa98e25e2f6b3db593639f'"
msgstr ""
"external ref='media/aboutdialog_GMenu.png' "
"md5='a36117a559fa98e25e2f6b3db593639f'"

#. (itstool) path: info/title
#: C/aboutdialog.c.page:8
msgctxt "text"
msgid "AboutDialog (C)"
msgstr "AboutDialog (C)"

#. (itstool) path: credit/name
#: C/aboutdialog.c.page:15 C/button.c.page:15 C/combobox.c.page:13
#: C/dialog.c.page:15 C/entry.c.page:13 C/grid.c.page:13 C/image.c.page:13
#: C/label.c.page:14 C/linkbutton.c.page:13 C/menubar.c.page:15
#: C/messagedialog.c.page:14 C/progressbar.c.page:14 C/radiobutton.c.page:15
#: C/scale.c.page:15 C/scrolledwindow.c.page:15 C/spinbutton.c.page:16
#: C/spinner.c.page:14 C/statusbar.c.page:17 C/switch.c.page:13
#: C/textview.c.page:13 C/togglebutton.c.page:17 C/toolbar.c.page:15
msgid "Monica Kochofar"
msgstr "Monica Kochofar"

#. (itstool) path: info/desc
#: C/aboutdialog.c.page:20 C/aboutdialog.js.page:17 C/aboutdialog.vala.page:26
msgid "Display information about an application"
msgstr "Εμφάνιση πληροφοριών για μια εφαρμογή"

#. (itstool) path: page/title
#: C/aboutdialog.c.page:23 C/aboutdialog.js.page:20 C/aboutdialog.py.page:22
#: C/aboutdialog.vala.page:29
msgid "AboutDialog"
msgstr "AboutDialog"

#. (itstool) path: page/p
#: C/aboutdialog.c.page:26 C/aboutdialog.vala.page:31
msgid "An AboutDialog example using Gtk.ApplicationWindow and Menu"
msgstr ""
"Ένα παράδειγμα AboutDialog χρησιμοποιώντας Gtk.ApplicationWindow και μενού"

#. (itstool) path: note/p
#: C/aboutdialog.c.page:27 C/aboutdialog.vala.page:32 C/gmenu.c.page:24
msgid ""
"<em style=\"bold\">You need to be running Gtk3.4 or later for this to work</"
"em>"
msgstr ""
"<em style=\"bold\">You need to be running Gtk3.4 or later for this to work</"
"em>"

#. (itstool) path: page/code
#: C/aboutdialog.c.page:29
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* Callback function in which reacts to the \"response\" signal from the user in\n"
" * the message dialog window.\n"
" * This function is used to destroy the dialog window.\n"
" */\n"
"static void\n"
"on_close (GtkDialog *dialog,\n"
"          gint       response_id,\n"
"          gpointer   user_data)\n"
"{\n"
"  /*This will cause the dialog to be destroyed*/\n"
"  gtk_widget_destroy (GTK_WIDGET (dialog));\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the response signal \"activate\" related to the SimpleAction\n"
" * \"about_action\".\n"
" * This function is used to cause the about dialog window to popup.\n"
" */\n"
"static void\n"
"about_cb (GSimpleAction *simple,\n"
"          GVariant      *parameter,\n"
"          gpointer       user_data)\n"
"{\n"
"   GtkWidget *about_dialog;\n"
"\n"
"   about_dialog = gtk_about_dialog_new ();\n"
"\n"
"   /* Lists of authors/ documentators to be used later, they must be initialized\n"
"    * in a null terminated array of strings.\n"
"    */\n"
"   const gchar *authors[] = {\"GNOME Documentation Team\", NULL};\n"
"   const gchar *documenters[] = {\"GNOME Documentation Team\", NULL};\n"
"\n"
"   /* We fill in the information for the about dialog */\n"
"   gtk_about_dialog_set_program_name (GTK_ABOUT_DIALOG (about_dialog), \"AboutDialog Example\");\n"
"   gtk_about_dialog_set_copyright (GTK_ABOUT_DIALOG (about_dialog), \"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\");\n"
"   gtk_about_dialog_set_authors (GTK_ABOUT_DIALOG (about_dialog), authors);\n"
"   gtk_about_dialog_set_documenters (GTK_ABOUT_DIALOG (about_dialog), documenters);\n"
"   gtk_about_dialog_set_website_label (GTK_ABOUT_DIALOG (about_dialog), \"GNOME Developer Website\");\n"
"   gtk_about_dialog_set_website (GTK_ABOUT_DIALOG (about_dialog), \"http://developer.gnome.org\");\n"
"\n"
"  /* We do not wish to show the title, which in this case would be \n"
"   * \"AboutDialog Example\". We have to reset the title of the messagedialog \n"
"   * window after setting the program name.\n"
"   */\n"
"  gtk_window_set_title (GTK_WINDOW (about_dialog), \"\");\n"
"\n"
"  /* To close the aboutdialog when \"close\" is clicked we connect the response \n"
"   * signal to on_close\n"
"   */\n"
"  g_signal_connect (GTK_DIALOG (about_dialog), \"response\", \n"
"                    G_CALLBACK (on_close), NULL);\n"
"\n"
"  /* Show the about dialog */\n"
"  gtk_widget_show (about_dialog); \n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  GSimpleAction *about_action;\n"
"\n"
"  /* Create a window with a title and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"AboutDialog Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);\n"
"\n"
"  /* Create a new simple action, giving it a NULL parameter type. It will \n"
"   * always be NULL for actions invoked from a menu. (e.g clicking on an \"ok\" \n"
"   * or \"cancel\" button)\n"
"   */\n"
"  about_action = g_simple_action_new (\"about\", NULL); \n"
"\n"
"  /* Connect the \"activate\" signal to the appropriate callback function. \n"
"   * It will indicate that the action was just activated.\n"
"   */\n"
"  g_signal_connect (about_action, \"activate\", G_CALLBACK (about_cb), \n"
"                    GTK_WINDOW (window));\n"
"\n"
"  /* Adds the about_action to the overall action map. An Action map is an \n"
"   * interface that contains a number of named GAction instances \n"
"   * (such as about_action) \n"
"   */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (about_action));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the response signal \"activate\" from the \"quit\" action \n"
" * found in the function directly below.\n"
" */ \n"
"static void\n"
"quit_cb (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the menu we are creating in this sample */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GMenu *menu;\n"
"  GSimpleAction *quit_action;\n"
"\n"
"  /* Initialize the GMenu, and add a menu item with label \"About\" and action \n"
"   * \"win.about\". Also add another menu item with label \"Quit\" and action \n"
"   * \"app.quit\" \n"
"   */\n"
"  menu = g_menu_new ();\n"
"  g_menu_append (menu, \"About\", \"win.about\");\n"
"  g_menu_append (menu, \"Quit\", \"app.quit\");\n"
"\n"
"  /* Create a new simple action for the application. (In this case it is the \n"
"   * \"quit\" action.\n"
"   */\n"
"  quit_action = g_simple_action_new (\"quit\", NULL);\n"
"\n"
"  /* Ensure that the menu we have just created is set for the overall application */\n"
"  gtk_application_set_app_menu (GTK_APPLICATION (app), G_MENU_MODEL (menu));\n"
"\n"
"  g_signal_connect (quit_action, \n"
"                    \"activate\", \n"
"                    G_CALLBACK (quit_cb), \n"
"                    app);\n"
"\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (quit_action));\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the application */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#περιλαμβάνει &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* Η συνάρτηση επανάκλησης στην οποία αντιδρά το σήμα \"response\" από τον χρήστη\n"
" * στο παράθυρο διαλόγου του μηνύματος.\n"
" * Αυτή η συνάρτηση χρησιμοποιείται για την καταστροφή του παραθύρου διαλόγου.\n"
" */\n"
"static void\n"
"on_close (GtkDialog *dialog,\n"
"          gint       response_id,\n"
"          gpointer   user_data)\n"
"{\n"
"  /*Αυτό θα προκαλέσει την καταστροφή του διαλόγου*/\n"
"  gtk_widget_destroy (GTK_WIDGET (dialog));\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"/* Η συνάρτηση επανάκλησης για το σήμα απάντησης \"activate\" που σχετίζεται με την απλή ενέργεια\n"
" * \"about_action\".\n"
" * Αυτή η συνάρτηση χρησιμοποιείται για να προκαλέσει την ανάδυση του παραθύρου διαλόγου περί.\n"
" */\n"
"static void\n"
"about_cb (GSimpleAction *simple,\n"
"          GVariant      *parameter,\n"
"          gpointer       user_data)\n"
"{\n"
"   GtkWidget *about_dialog;\n"
"\n"
"   about_dialog = gtk_about_dialog_new ();\n"
"\n"
"   /* Λίστες των συγγραφέων/τεκμηριωτών που θα χρησιμοποιηθούν αργότερα, πρέπει να αρχικοποιηθούν\n"
"    * σε έναn πίνακα που τελειώνει σε μηδέν συμβολοσειρές.\n"
"    */\n"
"   const gchar *authors[] = {\"GNOME Documentation Team\", NULL};\n"
"   const gchar *documenters[] = {\"GNOME Documentation Team\", NULL};\n"
"\n"
"   /* Συμπλήρωση των πληροφοριών για τον διάλογο περί */\n"
"   gtk_about_dialog_set_program_name (GTK_ABOUT_DIALOG (about_dialog), \"AboutDialog Example\");\n"
"   gtk_about_dialog_set_copyright (GTK_ABOUT_DIALOG (about_dialog), \"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\");\n"
"   gtk_about_dialog_set_authors (GTK_ABOUT_DIALOG (about_dialog), authors);\n"
"   gtk_about_dialog_set_documenters (GTK_ABOUT_DIALOG (about_dialog), documenters);\n"
"   gtk_about_dialog_set_website_label (GTK_ABOUT_DIALOG (about_dialog), \"GNOME Developer Website\");\n"
"   gtk_about_dialog_set_website (GTK_ABOUT_DIALOG (about_dialog), \"http://developer.gnome.org\");\n"
"\n"
"  /* Δεν θέλουμε να εμφανίσουμε τον τίτλο, που σε αυτήν την περίπτωση θα είναι \n"
"   * \"AboutDialog Example\". Πρέπει να επαναφέουμε τον τίτλο του παραθύρου \n"
"   * του μηνύματος διαλόγου μετά τον ορισμό του ονόματος του προγράμματος.\n"
"   */\n"
"  gtk_window_set_title (GTK_WINDOW (about_dialog), \"\");\n"
"\n"
"  /* Για το κλείσιμο του διαλόγου περί όταν πατιέται \"close\", συνδέουμε\n"
"   * το σήμα της απάντησης στο on_close\n"
"   */\n"
"  g_signal_connect (GTK_DIALOG (about_dialog), \"response\", \n"
"                    G_CALLBACK (on_close), NULL);\n"
"\n"
"  /* Εμφάνιση του διαλόγου περί */\n"
"  gtk_widget_show (about_dialog); \n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  GSimpleAction *about_action;\n"
"\n"
"  /* Δημιουργία παραθύρου με τίτλο και προεπιλεγμένο μέγεθος */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"AboutDialog Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);\n"
"\n"
"  /* Δημιουργία μιας νέας απλής ενέργειας, που της δίνει έναν τύπο παραμέτρου NULL. \n"
"   * Θα είναι πάντα NULL για ενέργειες που καλούνται από ένα μενού. (π.χ.  \n"
"   * πατώντας σε ένα κουμπί \"ok\" ή \"cancel\")\n"
"   */\n"
"  about_action = g_simple_action_new (\"about\", NULL); \n"
"\n"
"  /* Σύνδεση του σήματος \"activate\" στην κατάλληλη συνάρτηση επανάκλησης. \n"
"   * Θα δείξει ότι η ενέργεια μόλις ενεργοποιήθηκε.\n"
"   */\n"
"  g_signal_connect (about_action, \"activate\", G_CALLBACK (about_cb), \n"
"                    GTK_WINDOW (window));\n"
"\n"
"  /* Προσθέτει την about_action στην συνολική απεικόνηση ενέργειας. Μια απεικόνιση\n"
"   * ενέργειας είναι μια διεπαφή που περιέχει έναν αριθμό επώνυμων στιγμιοτύπων\n"
"   *  GAction (όπως about_action) \n"
"   */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (about_action));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Η συνάρτηση επανάκλησης για το σήμα απάντησης \"activate\" από την ενέργεια \"quit\" \n"
" * βρίσκεται στην αμέσως παρακάτω συνάρτηση.\n"
" */ \n"
"static void\n"
"quit_cb (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Η συνάρτηση έναρξης για το μενού που δημιουργούμε σε αυτό το παράδειγμα */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GMenu *menu;\n"
"  GSimpleAction *quit_action;\n"
"\n"
"  /* Αρχικοποίηση του GMenu και προσθήκη ενός στοιχείου μενού με ετικέτα \"About\" \n"
"   * και ενέργεια \"win.about\". Επίσης, προσθήκη ενός άλλου στοιχείου μενού \n"
"   * με ετικέτα \"Quit\" και ενέργεια \"app.quit\" \n"
"   */\n"
"  menu = g_menu_new ();\n"
"  g_menu_append (menu, \"About\", \"win.about\");\n"
"  g_menu_append (menu, \"Quit\", \"app.quit\");\n"
"\n"
"  /* Δημιουργία μιας νέας απλής ενέργειας για την εφαρμογή. (Σε αυτήν την περίπτωση \n"
"   * είναι η ενέργεια \"quit\".\n"
"   */\n"
"  quit_action = g_simple_action_new (\"quit\", NULL);\n"
"\n"
"  /* Εξασφαλίστε ότι το μενού που μόλις έχουμε δημιουργήσει ορίζεται για τη συνολική εφαρμογή */\n"
"  gtk_application_set_app_menu (GTK_APPLICATION (app), G_MENU_MODEL (menu));\n"
"\n"
"  g_signal_connect (quit_action, \n"
"                    \"activate\", \n"
"                    G_CALLBACK (quit_cb), \n"
"                    app);\n"
"\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (quit_action));\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"/* Η συνάρτηση έναρξης για την εφαρμογή */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: page/p
#. (itstool) path: section/p
#: C/aboutdialog.c.page:31 C/aboutdialog.js.page:25 C/aboutdialog.py.page:42
#: C/aboutdialog.vala.page:35 C/button.c.page:30 C/button.js.page:27
#: C/button.py.page:53 C/buttonbox.js.page:36 C/buttonbox.py.page:47
#: C/checkbutton.c.page:26 C/checkbutton.py.page:43 C/checkbutton.vala.page:26
#: C/colorbutton.js.page:34 C/colorbutton.py.page:41
#: C/colorbutton.vala.page:28 C/comboboxtext.js.page:177 C/combobox.c.page:31
#: C/combobox.js.page:234 C/combobox.py.page:43 C/combobox.vala.page:26
#: C/combobox_multicolumn.py.page:42 C/combobox_multicolumn.vala.page:36
#: C/dialog.c.page:30 C/dialog.js.page:26 C/dialog.py.page:47
#: C/dialog.vala.page:28 C/entry.c.page:28 C/entry.js.page:26
#: C/entry.py.page:62 C/entry.vala.page:26 C/filechooserdialog.py.page:71
#: C/filechooserdialog.vala.page:36 C/fontchooserwidget.js.page:35
#: C/fontchooserwidget.py.page:45 C/fontchooserwidget.vala.page:35
#: C/gmenu.c.page:28 C/gmenu.js.page:26 C/gmenu.py.page:78
#: C/gmenu.vala.page:35 C/grid.c.page:28 C/grid.js.page:30 C/grid.py.page:55
#: C/grid.vala.page:28 C/GtkApplicationWindow.c.page:26
#: C/GtkApplicationWindow.js.page:27 C/GtkApplicationWindow.py.page:51
#: C/GtkApplicationWindow.vala.page:27 C/image.c.page:29 C/image.js.page:28
#: C/image.py.page:128 C/image.vala.page:28 C/label.c.page:33
#: C/label.js.page:26 C/label.py.page:103 C/label.vala.page:27
#: C/linkbutton.c.page:28 C/linkbutton.js.page:26 C/linkbutton.py.page:45
#: C/linkbutton.vala.page:26 C/menubar.c.page:33 C/menubar.py.page:184
#: C/menubar.vala.page:188 C/menubutton.c.page:36 C/menubutton.js.page:29
#: C/menubutton.py.page:54 C/menubutton.vala.page:29 C/messagedialog.c.page:32
#: C/messagedialog.js.page:190 C/messagedialog.py.page:55
#: C/messagedialog.vala.page:27 C/paned.c.page:34 C/paned.js.page:34
#: C/paned.py.page:40 C/paned.vala.page:34 C/progressbar.c.page:29
#: C/progressbar.js.page:35 C/progressbar.py.page:55
#: C/progressbar.vala.page:26 C/radiobutton.c.page:30 C/radiobutton.py.page:47
#: C/radiobutton.vala.page:29 C/scale.c.page:30 C/scale.py.page:55
#: C/scale.vala.page:28 C/scrolledwindow.c.page:30 C/scrolledwindow.js.page:34
#: C/scrolledwindow.py.page:43 C/scrolledwindow.vala.page:27
#: C/separator.c.page:36 C/separator.py.page:37 C/separator.vala.page:38
#: C/spinbutton.c.page:31 C/spinbutton.py.page:47 C/spinbutton.vala.page:28
#: C/spinner.c.page:29 C/spinner.js.page:26 C/spinner.py.page:40
#: C/spinner.vala.page:26 C/statusbar.c.page:32 C/statusbar.py.page:51
#: C/statusbar.vala.page:29 C/switch.c.page:29 C/switch.py.page:43
#: C/switch.vala.page:32 C/textview.c.page:32 C/textview.py.page:94
#: C/textview.vala.page:31 C/togglebutton.c.page:32 C/togglebutton.py.page:42
#: C/togglebutton.vala.page:29 C/toolbar.c.page:31 C/toolbar.js.page:27
#: C/toolbar.py.page:53 C/toolbar.vala.page:30 C/toolbar_builder.py.page:192
#: C/toolbar_builder.vala.page:147 C/tooltip.c.page:36 C/tooltip.js.page:35
#: C/tooltip.py.page:57 C/tooltip.vala.page:36
#: C/treeview_advanced_liststore.py.page:42
#: C/treeview_cellrenderertoggle.py.page:42
#: C/treeview_simple_liststore.js.page:273
#: C/treeview_simple_liststore.py.page:43
#: C/treeview_simple_liststore.vala.page:28 C/treeview_treestore.py.page:42
#: C/window.c.page:30 C/window.py.page:62 C/window.vala.page:34
msgid "In this sample we used the following:"
msgstr "Σε αυτό το παράδειγμα χρησιμοποιήσαμε τα παρακάτω:"

#. (itstool) path: item/p
#: C/aboutdialog.c.page:35 C/button.c.page:34 C/combobox.c.page:35
#: C/dialog.c.page:34 C/entry.c.page:32 C/grid.c.page:32
#: C/GtkApplicationWindow.c.page:30 C/image.c.page:33 C/label.c.page:37
#: C/linkbutton.c.page:32 C/messagedialog.c.page:36 C/progressbar.c.page:33
#: C/radiobutton.c.page:34 C/scale.c.page:34 C/spinbutton.c.page:35
#: C/spinner.c.page:33 C/statusbar.c.page:36 C/switch.c.page:33
#: C/textview.c.page:36 C/togglebutton.c.page:36 C/window.c.page:34
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/3.4/GtkApplication.html"
"\">GtkApplication</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/3.4/GtkApplication.html"
"\">GtkApplication</link>"

#. (itstool) path: item/p
#: C/aboutdialog.c.page:36 C/button.c.page:35 C/combobox.c.page:36
#: C/dialog.c.page:35 C/entry.c.page:33 C/grid.c.page:33
#: C/linkbutton.c.page:33 C/messagedialog.c.page:38 C/progressbar.c.page:34
#: C/radiobutton.c.page:35 C/scale.c.page:35 C/spinbutton.c.page:36
#: C/spinner.c.page:34 C/statusbar.c.page:37 C/switch.c.page:34
#: C/textview.c.page:37 C/togglebutton.c.page:37 C/window.c.page:35
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/3.4/GtkWindow.html\">GtkWindow</"
"link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/3.4/GtkWindow.html\">GtkWindow</"
"link>"

#. (itstool) path: item/p
#: C/aboutdialog.c.page:37
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkAboutDialog.html"
"\">GtkAboutDialog</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkAboutDialog.html"
"\">GtkAboutDialog</link>"

#. (itstool) path: item/p
#: C/aboutdialog.c.page:38 C/aboutdialog.py.page:48 C/messagedialog.c.page:42
#: C/messagedialog.py.page:64
msgid ""
"<link href=\"http://developer.gnome.org/gio/stable/GMenu.html\">GMenu</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gio/stable/GMenu.html\">GMenu</link>"

#. (itstool) path: item/p
#: C/aboutdialog.c.page:39 C/messagedialog.c.page:41
msgid ""
"<link href=\"http://developer.gnome.org/gio/stable/GActionMap.html"
"\">GActionMap</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gio/stable/GActionMap.html"
"\">GActionMap</link>"

#. (itstool) path: info/title
#: C/aboutdialog.js.page:7
msgctxt "text"
msgid "AboutDialog (JavaScript)"
msgstr "AboutDialog (JavaScript)"

#. (itstool) path: page/p
#: C/aboutdialog.js.page:22
msgid ""
"A modal dialog window which shows information about an application and its "
"creators. This one is triggered by clicking \"About\" in the application's "
"menu, which is normally a good place to put it."
msgstr ""
"Ένα παράθυρο αναγκαστικού διαλόγου που εμφανίζει πληροφορίες για μια "
"εφαρμογή και τους δημιουργούς της. Αυτό εμφανίζεται με κλικ στο \"Περί\" στο "
"μενού της εφαρμογής, που είναι κανονικά μια καλή θέση για να το βάλετε."

#. (itstool) path: page/code
#: C/aboutdialog.js.page:24
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const AboutDialogExample = new Lang.Class({\n"
"    Name: 'AboutDialog Example',\n"
"\n"
"    // Create the application itself\n"
"        _init: function() {\n"
"            this.application = new Gtk.Application({\n"
"                application_id: 'org.example.jsaboutdialog',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal creates the menu and builds the UI\n"
"    _onStartup: function() {\n"
"        this._initMenus();\n"
"        this._buildUI();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function(){\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"AboutDialog Example\",\n"
"                                                   default_height: 250,\n"
"                                                   default_width: 350 });\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    // Create the application menu\n"
"    _initMenus: function() {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"About\", 'app.about');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // Create the \"About\" menu option and have it call the _showAbout() function\n"
"        let aboutAction = new Gio.SimpleAction({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        // Create the \"Quit\" menu option and have it close the window\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"    _showAbout: function() {\n"
"\n"
"        // String arrays of the names of the people involved in the project\n"
"        var authors = [\"GNOME Documentation Team\"];\n"
"        var documenters = [\"GNOME Documentation Team\"];\n"
"\n"
"        // Create the About dialog\n"
"        let aboutDialog = new Gtk.AboutDialog({ title: \"AboutDialog Example\",\n"
"                                                program_name: \"GtkApplication Example\",\n"
"                                                copyright: \"Copyright \\xa9 2012 GNOME Documentation Team\",\n"
"                                                authors: authors,\n"
"                                                documenters: documenters,\n"
"                                                website: \"http://developer.gnome.org\",\n"
"                                                website_label: \"GNOME Developer Website\" });\n"
"\n"
"        // Attach the About dialog to the window\n"
"        aboutDialog.modal = true;\n"
"        aboutDialog.transient_for = this._window;\n"
"\n"
"        // Show the About dialog\n"
"        aboutDialog.show();\n"
"\n"
"        // Connect the Close button to the destroy signal for the dialog\n"
"        aboutDialog.connect('response', function() {\n"
"            aboutDialog.destroy();\n"
"        });\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new AboutDialogExample();\n"
"app.application.run(ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const AboutDialogExample = new Lang.Class({\n"
"    Name: 'AboutDialog Example',\n"
"\n"
"    // Δημιουργία αυτής καθεαυτής της εφαρμογής\n"
"        _init: function() {\n"
"            this.application = new Gtk.Application({\n"
"                application_id: 'org.example.jsaboutdialog',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Σύνδεση των σημάτων 'activate' και 'startup' στις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δημιουργεί το μενού και κατασκευάζει τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._initMenus();\n"
"        this._buildUI();\n"
"    },\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function(){\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"AboutDialog Example\",\n"
"                                                   default_height: 250,\n"
"                                                   default_width: 350 });\n"
"\n"
"        // Εμφάνιση του παραθύρου κι όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    // Δημιουργία του μενού της εφαρμογής\n"
"    _initMenus: function() {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"About\", 'app.about');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // Δημιουργία της επιλογής μενού \"About\" για να καλέσει την _showAbout() function\n"
"        let aboutAction = new Gio.SimpleAction({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        // Δημιουργία της επιλογής μενού \"Quit\" που κλείνει το παράθυρο\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"    _showAbout: function() {\n"
"\n"
"        // Πίνακες συμβολοσειρών των ονομάτων των ατόμων που εμπλέκονται στο έργο\n"
"        var authors = [\"GNOME Documentation Team\"];\n"
"        var documenters = [\"GNOME Documentation Team\"];\n"
"\n"
"        // Δημιουργία του διαλόγου περί\n"
"        let aboutDialog = new Gtk.AboutDialog({ title: \"AboutDialog Example\",\n"
"                                                program_name: \"GtkApplication Example\",\n"
"                                                copyright: \"Copyright \\xa9 2012 GNOME Documentation Team\",\n"
"                                                authors: authors,\n"
"                                                documenters: documenters,\n"
"                                                website: \"http://developer.gnome.org\",\n"
"                                                website_label: \"GNOME Developer Website\" });\n"
"\n"
"        // Προσάρτηση του διαλόγου περί στο παράθυρο\n"
"        aboutDialog.modal = true;\n"
"        aboutDialog.transient_for = this._window;\n"
"\n"
"        // Εμφάνιση του διαλόγου περί\n"
"        aboutDialog.show();\n"
"\n"
"        // Σύνδεση του κουμπιού κλεισίματος με το σήμα καταστροφής του διαλόγου\n"
"        aboutDialog.connect('response', function() {\n"
"            aboutDialog.destroy();\n"
"        });\n"
"    }\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new AboutDialogExample();\n"
"app.application.run(ARGV);\n"

#. (itstool) path: item/p
#: C/aboutdialog.js.page:29 C/gmenu.c.page:32 C/gmenu.js.page:30
#: C/gmenu.py.page:80 C/messagedialog.js.page:194 C/switch.js.page:266
msgid ""
"<link href=\"http://developer.gnome.org/gio/unstable/GMenu.html\">GMenu</"
"link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gio/unstable/GMenu.html\">GMenu</"
"link>"

#. (itstool) path: item/p
#: C/aboutdialog.js.page:30 C/filechooserdialog.py.page:80 C/gmenu.c.page:33
#: C/gmenu.js.page:31 C/gmenu.py.page:81 C/menubar.c.page:39
#: C/messagedialog.js.page:195 C/messagedialog.py.page:62 C/switch.js.page:267
msgid ""
"<link href=\"http://developer.gnome.org/gio/stable/GSimpleAction.html"
"\">GSimpleAction</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gio/stable/GSimpleAction.html"
"\">GSimpleAction</link>"

#. (itstool) path: item/p
#: C/aboutdialog.js.page:31
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.AboutDialog."
"html\">Gtk.AboutDialog</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.AboutDialog."
"html\">Gtk.AboutDialog</link>"

#. (itstool) path: item/p
#: C/aboutdialog.js.page:32 C/button.js.page:31 C/checkbutton.js.page:138
#: C/comboboxtext.js.page:181 C/combobox.js.page:238 C/dialog.js.page:30
#: C/entry.js.page:30 C/grid.js.page:34 C/GtkApplicationWindow.js.page:31
#: C/image.js.page:32 C/label.js.page:30 C/linkbutton.js.page:30
#: C/messagedialog.js.page:196 C/progressbar.js.page:40
#: C/radiobutton.js.page:276 C/scale.js.page:211 C/spinbutton.js.page:202
#: C/spinner.js.page:31 C/statusbar.js.page:223 C/switch.js.page:268
#: C/textview.js.page:250 C/togglebutton.js.page:155
#: C/treeview_simple_liststore.js.page:277 C/window.js.page:39
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Application."
"html\">Gtk.Application</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Application."
"html\">Gtk.Application</link>"

#. (itstool) path: item/p
#: C/aboutdialog.js.page:33 C/button.js.page:32 C/checkbutton.js.page:139
#: C/comboboxtext.js.page:182 C/combobox.js.page:239 C/dialog.js.page:31
#: C/entry.js.page:31 C/grid.js.page:35 C/GtkApplicationWindow.js.page:32
#: C/image.js.page:33 C/label.js.page:31 C/linkbutton.js.page:31
#: C/messagedialog.js.page:197 C/progressbar.js.page:41
#: C/radiobutton.js.page:277 C/scale.js.page:212 C/spinbutton.js.page:203
#: C/spinner.js.page:32 C/statusbar.js.page:224 C/switch.js.page:269
#: C/textview.js.page:251 C/togglebutton.js.page:156
#: C/treeview_simple_liststore.js.page:278
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkApplicationWindow.html"
"\">Gtk.ApplicationWindow</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkApplicationWindow.html"
"\">Gtk.ApplicationWindow</link>"

#. (itstool) path: info/title
#: C/aboutdialog.py.page:8
msgctxt "text"
msgid "AboutDialog (Python)"
msgstr "AboutDialog (Python)"

#. (itstool) path: credit/name
#: C/aboutdialog.py.page:14 C/beginner.c.page:20 C/beginner.js.page:16
#: C/beginner.py.page:19 C/beginner.vala.page:19 C/button.py.page:15
#: C/buttonbox.py.page:15 C/checkbutton.py.page:14 C/colorbutton.py.page:14
#: C/combobox.py.page:15 C/combobox_multicolumn.py.page:14 C/dialog.py.page:15
#: C/entry.py.page:15 C/filechooserdialog.py.page:17
#: C/fontchooserwidget.py.page:15 C/gmenu.py.page:21 C/grid.py.page:21
#: C/GtkApplicationWindow.py.page:20 C/guitar-tuner.c.page:23
#: C/guitar-tuner.cpp.page:21 C/guitar-tuner.py.page:23
#: C/guitar-tuner.py.page:28 C/guitar-tuner.vala.page:26 C/image.py.page:15
#: C/image-viewer.c.page:23 C/image-viewer.cpp.page:21
#: C/image-viewer.js.page:23 C/image-viewer.py.page:23
#: C/image-viewer.vala.page:31 C/js.page:16 C/label.py.page:17
#: C/linkbutton.py.page:14 C/magic-mirror.vala.page:23 C/menubar.py.page:20
#: C/menubutton.py.page:20 C/message-board.c.page:20
#: C/messagedialog.py.page:14 C/model-view-controller.py.page:21
#: C/paned.py.page:14 C/photo-wall.c.page:22 C/progressbar.py.page:14
#: C/properties.py.page:21 C/py.page:15 C/radiobutton.py.page:15
#: C/record-collection.js.page:23 C/scale.py.page:15
#: C/scrolledwindow.py.page:14 C/separator.py.page:15
#: C/signals-callbacks.py.page:21 C/spinbutton.py.page:15 C/spinner.py.page:14
#: C/statusbar.py.page:15 C/strings.py.page:21 C/switch.py.page:14
#: C/textview.py.page:22 C/togglebutton.py.page:14 C/toolbar.py.page:15
#: C/toolbar_builder.py.page:22 C/tooltip.py.page:15
#: C/treeview_advanced_liststore.py.page:14
#: C/treeview_cellrenderertoggle.py.page:14
#: C/treeview_simple_liststore.py.page:15 C/treeview_treestore.py.page:15
#: C/tutorial.py.page:20 C/vala.page:15 C/weatherApp.js.page:17
#: C/window.py.page:20
msgid "Marta Maria Casetti"
msgstr "Marta Maria Casetti"

#. (itstool) path: info/desc
#: C/aboutdialog.py.page:19
msgid "A window that displays information about an application"
msgstr "Ένα παράθυρο που εμφανίζει πληροφορίες για μια εφαρμογή"

#. (itstool) path: page/p
#: C/aboutdialog.py.page:24
msgid ""
"An AboutDialog example using Gtk.ApplicationWindow and Menu (the \"about\" "
"is displayed if \"About\" in the menu is selected)."
msgstr ""
"Ένα παράδειγμα AboutDialog χρησιμοποιώντας Gtk.ApplicationWindow και μενού "
"(το \"περί\" εμφανίζεται εάν επιλεγεί το \"Περί\" στο μενού)."

#. (itstool) path: section/title
#: C/aboutdialog.py.page:29 C/button.py.page:31 C/buttonbox.js.page:30
#: C/buttonbox.py.page:31 C/checkbutton.py.page:29 C/colorbutton.js.page:28
#: C/colorbutton.py.page:29 C/combobox.py.page:30
#: C/combobox_multicolumn.py.page:29 C/combobox_multicolumn.vala.page:29
#: C/dialog.py.page:30 C/entry.py.page:35 C/filechooserdialog.py.page:53
#: C/fontchooserwidget.js.page:29 C/fontchooserwidget.py.page:31
#: C/fontchooserwidget.vala.page:29 C/gmenu.py.page:36 C/grid.py.page:37
#: C/GtkApplicationWindow.py.page:35 C/image.py.page:41 C/label.py.page:37
#: C/linkbutton.py.page:30 C/menubutton.c.page:30 C/menubutton.py.page:37
#: C/messagedialog.py.page:29 C/paned.c.page:28 C/paned.js.page:28
#: C/paned.py.page:29 C/paned.vala.page:28 C/progressbar.py.page:39
#: C/radiobutton.py.page:30 C/scale.py.page:30 C/scrolledwindow.js.page:28
#: C/scrolledwindow.py.page:29 C/separator.c.page:30 C/separator.py.page:31
#: C/separator.vala.page:32 C/spinbutton.py.page:30 C/spinner.py.page:29
#: C/statusbar.py.page:30 C/switch.py.page:31 C/textview.py.page:44
#: C/togglebutton.py.page:29 C/toolbar.py.page:31
#: C/toolbar_builder.py.page:164 C/tooltip.c.page:30 C/tooltip.js.page:29
#: C/tooltip.py.page:31 C/tooltip.vala.page:30
#: C/treeview_advanced_liststore.py.page:29
#: C/treeview_cellrenderertoggle.py.page:29
#: C/treeview_simple_liststore.py.page:30 C/treeview_treestore.py.page:30
#: C/window.py.page:45
msgid "Code used to generate this example"
msgstr "Ο χρησιμοποιούμενος κώδικας για παραγωγή αυτού παραδείγματος"

#. (itstool) path: section/code
#: C/aboutdialog.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"     # constructor for a window (the parent window)\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"AboutDialog Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"\n"
"        # create the about_action (a Gio.SimpleAction)\n"
"        about_action = Gio.SimpleAction.new(\"about\", None)\n"
"        # connect the signal from the action to the function about_cb()\n"
"        about_action.connect(\"activate\", self.about_cb)\n"
"        # add the action to the application\n"
"        app.add_action(about_action)\n"
"\n"
"    # callback function for the about_action's \"activate\" signal\n"
"    def about_cb(self, action, parameter):\n"
"        # a  Gtk.AboutDialog\n"
"        aboutdialog = Gtk.AboutDialog()\n"
"\n"
"        # lists of authors and documenters (will be used later)\n"
"        authors = [\"GNOME Documentation Team\"]\n"
"        documenters = [\"GNOME Documentation Team\"]\n"
"\n"
"        # we fill in the aboutdialog\n"
"        aboutdialog.set_program_name(\"AboutDialog Example\")\n"
"        aboutdialog.set_copyright(\n"
"            \"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\")\n"
"        aboutdialog.set_authors(authors)\n"
"        aboutdialog.set_documenters(documenters)\n"
"        aboutdialog.set_website(\"http://developer.gnome.org\")\n"
"        aboutdialog.set_website_label(\"GNOME Developer Website\")\n"
"\n"
"        # we do not want to show the title, which by default would be \"About AboutDialog Example\"\n"
"        # we have to reset the title of the messagedialog window after setting\n"
"        # the program name\n"
"        aboutdialog.set_title(\"\")\n"
"\n"
"        # to close the aboutdialog when \"close\" is clicked we connect the\n"
"        # \"response\" signal to on_close\n"
"        aboutdialog.connect(\"response\", self.on_close)\n"
"        # show the aboutdialog\n"
"        aboutdialog.show()\n"
"\n"
"    # destroy the aboutdialog\n"
"    def on_close(self, action, parameter):\n"
"        action.destroy()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def quit_cb(self, action, parameter):\n"
"        self.quit()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # create a menu (a Gio.Menu)\n"
"        menu = Gio.Menu()\n"
"        # append a menu item with label \"About\" and action \"app.about\"\n"
"        menu.append(\"About\", \"app.about\")\n"
"        # append a menu item with label \"Quit\" and action \"app.quit\"\n"
"        menu.append(\"Quit\", \"app.quit\")\n"
"        # set menu as the menu for the application\n"
"        self.set_app_menu(menu)\n"
"\n"
"        # a new simpleaction - for the application\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_cb)\n"
"        self.add_action(quit_action)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"     # constructor for a window (the parent window)\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"AboutDialog Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"\n"
"        # create the about_action (a Gio.SimpleAction)\n"
"        about_action = Gio.SimpleAction.new(\"about\", None)\n"
"        # connect the signal from the action to the function about_cb()\n"
"        about_action.connect(\"activate\", self.about_cb)\n"
"        # add the action to the application\n"
"        app.add_action(about_action)\n"
"\n"
"    # callback function for the about_action's \"activate\" signal\n"
"    def about_cb(self, action, parameter):\n"
"        # a  Gtk.AboutDialog\n"
"        aboutdialog = Gtk.AboutDialog()\n"
"\n"
"        # lists of authors and documenters (will be used later)\n"
"        authors = [\"GNOME Documentation Team\"]\n"
"        documenters = [\"GNOME Documentation Team\"]\n"
"\n"
"        # we fill in the aboutdialog\n"
"        aboutdialog.set_program_name(\"AboutDialog Example\")\n"
"        aboutdialog.set_copyright(\n"
"            \"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\")\n"
"        aboutdialog.set_authors(authors)\n"
"        aboutdialog.set_documenters(documenters)\n"
"        aboutdialog.set_website(\"http://developer.gnome.org\")\n"
"        aboutdialog.set_website_label(\"GNOME Developer Website\")\n"
"\n"
"        # we do not want to show the title, which by default would be \"About AboutDialog Example\"\n"
"        # we have to reset the title of the messagedialog window after setting\n"
"        # the program name\n"
"        aboutdialog.set_title(\"\")\n"
"\n"
"        # to close the aboutdialog when \"close\" is clicked we connect the\n"
"        # \"response\" signal to on_close\n"
"        aboutdialog.connect(\"response\", self.on_close)\n"
"        # show the aboutdialog\n"
"        aboutdialog.show()\n"
"\n"
"    # destroy the aboutdialog\n"
"    def on_close(self, action, parameter):\n"
"        action.destroy()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def quit_cb(self, action, parameter):\n"
"        self.quit()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # create a menu (a Gio.Menu)\n"
"        menu = Gio.Menu()\n"
"        # append a menu item with label \"About\" and action \"app.about\"\n"
"        menu.append(\"About\", \"app.about\")\n"
"        # append a menu item with label \"Quit\" and action \"app.quit\"\n"
"        menu.append(\"Quit\", \"app.quit\")\n"
"        # set menu as the menu for the application\n"
"        self.set_app_menu(menu)\n"
"\n"
"        # a new simpleaction - for the application\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_cb)\n"
"        self.add_action(quit_action)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/aboutdialog.py.page:36
msgid "Useful methods for an AboutDialog widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο AboutDialog"

#. (itstool) path: section/p
#: C/aboutdialog.py.page:37
msgid ""
"In line 15 the signal <code>\"activate\"</code> is connected to the callback "
"function <code>about_cb()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"Στη γραμμή 15 το σήμα <code>\"activate\"</code> συνδέεται με τη συνάρτηση "
"επανάκλησης <code>about_cb()</code> χρησιμοποιώντας <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. Δείτε <link "
"xref=\"signals-callbacks.py\"/> για μια πιο λεπτομερή εξήγηση."

#. (itstool) path: section/title
#: C/aboutdialog.py.page:41 C/button.py.page:52 C/buttonbox.js.page:35
#: C/buttonbox.py.page:46 C/checkbutton.py.page:42 C/colorbutton.js.page:33
#: C/colorbutton.py.page:40 C/combobox.py.page:42
#: C/combobox_multicolumn.py.page:41 C/combobox_multicolumn.vala.page:35
#: C/dialog.py.page:46 C/entry.py.page:61 C/filechooserdialog.py.page:70
#: C/fontchooserwidget.js.page:34 C/fontchooserwidget.py.page:44
#: C/fontchooserwidget.vala.page:34 C/gmenu.py.page:77 C/grid.py.page:54
#: C/GtkApplicationWindow.py.page:50 C/image.py.page:126 C/label.py.page:102
#: C/linkbutton.py.page:44 C/menubar.py.page:183 C/menubutton.c.page:35
#: C/menubutton.py.page:53 C/messagedialog.py.page:54 C/paned.c.page:33
#: C/paned.js.page:33 C/paned.py.page:39 C/paned.vala.page:33
#: C/progressbar.py.page:54 C/radiobutton.py.page:46 C/scale.py.page:54
#: C/scrolledwindow.js.page:33 C/scrolledwindow.py.page:42
#: C/spinbutton.py.page:46 C/spinner.py.page:39 C/statusbar.py.page:50
#: C/switch.py.page:42 C/textview.py.page:93 C/togglebutton.py.page:41
#: C/toolbar.py.page:52 C/toolbar_builder.py.page:191 C/tooltip.c.page:35
#: C/tooltip.js.page:34 C/tooltip.py.page:56 C/tooltip.vala.page:35
#: C/treeview_advanced_liststore.py.page:41
#: C/treeview_cellrenderertoggle.py.page:41
#: C/treeview_simple_liststore.py.page:42 C/treeview_treestore.py.page:41
#: C/window.py.page:60
msgid "API References"
msgstr "Αναφορές API"

#. (itstool) path: item/p
#: C/aboutdialog.py.page:46
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkAboutDialog.html"
"\">GtkAboutDialog</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkAboutDialog.html"
"\">GtkAboutDialog</link>"

#. (itstool) path: item/p
#: C/aboutdialog.py.page:47 C/checkbutton.py.page:46 C/grid.py.page:58
#: C/GtkApplicationWindow.py.page:56 C/separator.c.page:38
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkApplicationWindow."
"html\">GtkApplicationWindow</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkApplicationWindow."
"html\">GtkApplicationWindow</link>"

#. (itstool) path: item/p
#: C/aboutdialog.py.page:49 C/checkbutton.py.page:45 C/grid.py.page:57
#: C/GtkApplicationWindow.py.page:55 C/messagedialog.py.page:65
#: C/window.py.page:64
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkApplication.html"
"\">GtkApplication</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkApplication.html"
"\">GtkApplication</link>"

#. (itstool) path: info/title
#: C/aboutdialog.vala.page:8
msgctxt "text"
msgid "AboutDialog (Vala)"
msgstr "AboutDialog (Vala)"

#. (itstool) path: credit/name
#: C/aboutdialog.vala.page:15 C/gmenu.vala.page:14
msgid "Ryan Lortie"
msgstr "Ryan Lortie"

#. (itstool) path: credit/name
#: C/aboutdialog.vala.page:21 C/beginner.py.page:15 C/beginner.vala.page:15
#: C/button.vala.page:14 C/c.page:11 C/checkbutton.c.page:13
#: C/checkbutton.vala.page:13 C/colorbutton.vala.page:15 C/combobox.c.page:18
#: C/combobox.vala.page:13 C/combobox_multicolumn.vala.page:14 C/cpp.page:11
#: C/dialog.vala.page:13 C/entry.vala.page:13 C/filechooserdialog.vala.page:16
#: C/gmenu.c.page:13 C/gmenu.js.page:13 C/gmenu.py.page:15
#: C/gmenu.vala.page:20 C/grid.py.page:15 C/grid.vala.page:15
#: C/GtkApplicationWindow.c.page:13 C/GtkApplicationWindow.js.page:13
#: C/GtkApplicationWindow.py.page:15 C/GtkApplicationWindow.vala.page:13
#: C/guitar-tuner.vala.page:22 C/hello-world.c.page:20
#: C/hello-world.js.page:20 C/hello-world.py.page:20
#: C/hello-world.vala.page:20 C/image.vala.page:13 C/image-viewer.vala.page:27
#: C/index.page:23 C/js.page:12 C/label.vala.page:13 C/linkbutton.vala.page:13
#: C/menubar.py.page:15 C/menubar.vala.page:15 C/menubutton.c.page:13
#: C/menubutton.py.page:14 C/menubutton.vala.page:13
#: C/messagedialog.vala.page:13 C/paned.c.page:13 C/paned.vala.page:13
#: C/progressbar.vala.page:13 C/py.page:11 C/radiobutton.vala.page:16
#: C/response-type.page:9 C/scale.vala.page:15 C/scrolledwindow.vala.page:14
#: C/separator.c.page:14 C/separator.vala.page:16 C/spinbutton.vala.page:15
#: C/spinner.vala.page:13 C/statusbar.vala.page:16 C/switch.vala.page:17
#: C/textview.vala.page:13 C/togglebutton.vala.page:16 C/toolbar.js.page:13
#: C/toolbar.vala.page:14 C/toolbar_builder.py.page:16
#: C/toolbar_builder.vala.page:15 C/tooltip.c.page:14 C/tooltip.vala.page:14
#: C/treeview_simple_liststore.vala.page:15 C/tutorial.py.page:15
#: C/vala.page:11 C/window.c.page:13 C/window.py.page:15 C/window.vala.page:13
msgid "Tiffany Antopolski"
msgstr "Tiffany Antopolski"

#. (itstool) path: page/code
#: C/aboutdialog.vala.page:34
#, no-wrap
msgid ""
"/* A window in the application */\n"
"public class Window : Gtk.ApplicationWindow {\n"
"\n"
"\t/* The constructor */\n"
"\tpublic Window (Application app) {\n"
"\t\tObject (application: app, title: \"AboutDialog Example\");\n"
"\n"
"\t\tvar about_action = new SimpleAction (\"about\", null);\n"
"\n"
"\t\tabout_action.activate.connect (this.about_cb);\n"
"\t\tthis.add_action (about_action);\n"
"\t\tthis.show_all ();\n"
"\t}\n"
"\n"
"\t/* This is the callback function connected to the 'activate' signal\n"
"\t * of the SimpleAction about_action.\n"
"\t */\n"
"\tvoid about_cb (SimpleAction simple, Variant? parameter) {\n"
"\t\tstring[] authors = { \"GNOME Documentation Team\", null };\n"
"\t\tstring[] documenters = { \"GNOME Documentation Team\", null };\n"
"\n"
"\t\tGtk.show_about_dialog (this,\n"
"                               \"program-name\", (\"GtkApplication Example\"),\n"
"                               \"copyright\", (\"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\"),\n"
"                               \"authors\", authors,\n"
"                               \"documenters\", documenters,\n"
"                               \"website\", \"http://developer.gnome.org\",\n"
"                               \"website-label\", (\"GNOME Developer Website\"),\n"
"                               null);\n"
"\t}\n"
"}\n"
"\n"
"/* This is the Application */\n"
"public class Application : Gtk.Application {\n"
"\n"
"\t/* Here we override the activate signal of GLib.Application */\n"
"\tprotected override void activate () {\n"
"\t\tnew Window (this);\n"
"\t}\n"
"\n"
"\t/* Here we override the startup signal of GLib.Application */\n"
"\tprotected override void startup () {\n"
"\n"
"\t\tbase.startup ();\n"
"\n"
"\t\tvar menu = new Menu ();\n"
"\t\tmenu.append (\"About\", \"win.about\");\n"
"\t\tmenu.append (\"Quit\", \"app.quit\");\n"
"\t\tthis.app_menu = menu;\n"
"\n"
"\t\tvar quit_action = new SimpleAction (\"quit\", null);\n"
"\t\t//quit_action.activate.connect (this.quit);\n"
"\t\tthis.add_action (quit_action);\n"
"\t}\n"
"\n"
"\t/* The constructor */\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.application\");\n"
"\t}\n"
"}\n"
"\n"
"/* main function creates Application and runs it */\n"
"int main (string[] args) {\n"
"\treturn new Application ().run (args);\n"
"}\n"
msgstr ""
"/* Ένα παράθυρο στην εφαρμογή */\n"
"public class Window : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Ο κατασκευαστής */\n"
"\tpublic Window (Application app) {\n"
"\t\tObject (application: app, title: \"AboutDialog Example\");\n"
"\n"
"\t\tvar about_action = new SimpleAction (\"about\", null);\n"
"\n"
"\t\tabout_action.activate.connect (this.about_cb);\n"
"\t\tthis.add_action (about_action);\n"
"\t\tthis.show_all ();\n"
"\t}\n"
"\n"
"\t/* Αυτή είναι η συνάρτηση επανάκλησης συνδεμένη στο σήμα 'activate'\n"
"\t * της απλής ενέργειας about_action.\n"
"\t */\n"
"\tvoid about_cb (SimpleAction simple, Variant? parameter) {\n"
"\t\tstring[] authors = { \"GNOME Documentation Team\", null };\n"
"\t\tstring[] documenters = { \"GNOME Documentation Team\", null };\n"
"\n"
"\t\tGtk.show_about_dialog (this,\n"
"                               \"program-name\", (\"GtkApplication Example\"),\n"
"                               \"copyright\", (\"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\"),\n"
"                               \"authors\", authors,\n"
"                               \"documenters\", documenters,\n"
"                               \"website\", \"http://developer.gnome.org\",\n"
"                               \"website-label\", (\"GNOME Developer Website\"),\n"
"                               null);\n"
"\t}\n"
"}\n"
"\n"
"/* Αυτή είναι η εφαρμογή */\n"
"public class Application : Gtk.Application {\n"
"\n"
"\t/* Εδώ αντικαθιστούμε το σήμα ενεργοποίησης της GLib.Application */\n"
"\tprotected override void activate () {\n"
"\t\tnew Window (this);\n"
"\t}\n"
"\n"
"\t/* Εδώ αντικαθιστούμε το σήμα έναρξης της GLib.Application */\n"
"\tprotected override void startup () {\n"
"\n"
"\t\tbase.startup ();\n"
"\n"
"\t\tvar menu = new Menu ();\n"
"\t\tmenu.append (\"About\", \"win.about\");\n"
"\t\tmenu.append (\"Quit\", \"app.quit\");\n"
"\t\tthis.app_menu = menu;\n"
"\n"
"\t\tvar quit_action = new SimpleAction (\"quit\", null);\n"
"\t\t//quit_action.activate.connect (this.quit);\n"
"\t\tthis.add_action (quit_action);\n"
"\t}\n"
"\n"
"\t/* Ο κατασκευαστής */\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.application\");\n"
"\t}\n"
"}\n"
"\n"
"/* Η κύρια συνάρτηση δημιουργεί την εφαρμογή και την εκτελεί */\n"
"int main (string[] args) {\n"
"\treturn new Application ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/aboutdialog.vala.page:39 C/gmenu.vala.page:39 C/window.vala.page:38
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Application.html\">Gtk."
"Application</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Application.html\">Gtk."
"Application</link>"

#. (itstool) path: item/p
#: C/aboutdialog.vala.page:40 C/gmenu.vala.page:40
#: C/GtkApplicationWindow.vala.page:32 C/label.vala.page:32
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ApplicationWindow.html"
"\">Gtk.ApplicationWindow</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ApplicationWindow.html"
"\">Gtk.ApplicationWindow</link>"

#. (itstool) path: item/p
#: C/aboutdialog.vala.page:41
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window.set_default_size.html"
"\">set_default_size</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window.set_default_size.html"
"\">set_default_size</link>"

#. (itstool) path: info/desc
#: C/audio-player.vala.page:10
msgid "Coming soon..."
msgstr "Έρχεται σύντομα..."

#. (itstool) path: credit/name
#: C/audio-player.vala.page:14 C/guitar-tuner.c.page:15
#: C/guitar-tuner.cpp.page:13 C/guitar-tuner.py.page:15
#: C/guitar-tuner.vala.page:14 C/image-viewer.c.page:15
#: C/image-viewer.cpp.page:13 C/image-viewer.vala.page:15
#: C/record-collection.js.page:15
msgid "GNOME Documentation Project"
msgstr "Έργο τεκμηρίωσης GNOME"

#. (itstool) path: page/title
#: C/audio-player.vala.page:19
msgid "Audio player"
msgstr "Αναπαραγωγός ήχου"

#. (itstool) path: info/title
#: C/beginner.c.page:9
msgctxt "text"
msgid "Tutorial for beginners (C)"
msgstr "Μάθημα για αρχάριους (C)"

#. (itstool) path: info/desc
#: C/beginner.c.page:13 C/beginner.vala.page:13
msgid ""
"A beginner's guide to GUI programming using GTK+, including code samples and "
"practice exercises."
msgstr ""
"Ένας οδηγός αρχαρίων στην ανάπτυξη διεπαφών χρήστη (GUI) χρησιμοποιώντας GTK"
"+, συμπεριλαμβάνει δείγματα κώδικα και πρακτικές ασκήσεις."

#. (itstool) path: credit/years
#: C/beginner.c.page:22 C/beginner.js.page:18 C/beginner.py.page:21
#: C/beginner.vala.page:21 C/buttonbox.js.page:16 C/colorbutton.js.page:15
#: C/combobox_multicolumn.vala.page:16 C/fontchooserwidget.js.page:15
#: C/fontchooserwidget.vala.page:15 C/guitar-tuner.c.page:25
#: C/guitar-tuner.cpp.page:23 C/guitar-tuner.py.page:25
#: C/guitar-tuner.py.page:30 C/guitar-tuner.vala.page:28
#: C/image-viewer.c.page:25 C/image-viewer.cpp.page:23
#: C/image-viewer.js.page:25 C/image-viewer.py.page:25
#: C/image-viewer.vala.page:33 C/js.page:18 C/magic-mirror.vala.page:25
#: C/menubutton.c.page:15 C/message-board.c.page:22 C/paned.js.page:15
#: C/paned.vala.page:15 C/photo-wall.c.page:24 C/py.page:17
#: C/record-collection.js.page:25 C/scrolledwindow.js.page:15
#: C/separator.c.page:16 C/separator.vala.page:18 C/tooltip.c.page:16
#: C/tooltip.js.page:16 C/tooltip.vala.page:16 C/tutorial.py.page:27
#: C/vala.page:17 C/weatherApp.js.page:19
msgid "2013"
msgstr "2013"

#. (itstool) path: page/title
#: C/beginner.c.page:26 C/beginner.js.page:24 C/beginner.vala.page:25
msgid "Tutorial for beginners and code samples"
msgstr "Μάθημα για αρχάριους και δείγματα κώδικα"

#. (itstool) path: synopsis/p
#: C/beginner.c.page:28 C/beginner.vala.page:27
msgid ""
"Although these tutorials are designed for beginners, we can't cover all the "
"basics. Before attempting to follow these tutorials, you are expected to be "
"familiar with the following concepts:"
msgstr ""
"Αν και αυτά τα μαθήματα σχεδιάστηκαν για αρχαρίους, δεν μπορούμε να "
"καλύψουμε όλα τα βασικά. Πριν να προσπαθήσετε να παρακολουθήσετε αυτά τα "
"μαθήματα, πρέπει να εξοικειωθείτε με τις παρακάτω έννοιες:"

#. (itstool) path: item/p
#: C/beginner.c.page:30 C/beginner.vala.page:29
msgid "Object oriented programming"
msgstr "Αντικειμενοστραφής προγραμματισμός"

#. (itstool) path: item/p
#: C/beginner.c.page:31
msgid "The C programming language"
msgstr "Η γλώσσα προγραμματισμού C"

#. (itstool) path: synopsis/p
#: C/beginner.c.page:35 C/beginner.vala.page:38
msgid ""
"By following these tutorials you will learn the basics of GUI programming "
"using GTK+."
msgstr ""
"Παρακολουθώντας αυτά τα μαθήματα θα μάθετε τα βασικά του προγραμματισμού GUI "
"χρησιμοποιώντας GTK+."

#. (itstool) path: section/title
#: C/beginner.c.page:39 C/beginner.js.page:42 C/beginner.vala.page:42
msgid "Tutorials"
msgstr "Μαθήματα"

#. (itstool) path: section/title
#: C/beginner.c.page:43 C/beginner.js.page:46 C/beginner.vala.page:46
#: C/py.page:32
msgid "Code samples"
msgstr "Δείγματα κώδικα"

#. (itstool) path: section/p
#: C/beginner.c.page:44 C/beginner.js.page:48 C/beginner.vala.page:47
msgid "To run the code samples:"
msgstr "Για να εκτελέσετε τα δείγματα κώδικα:"

#. (itstool) path: item/p
#: C/beginner.c.page:48
msgid "Copy and paste the code into <var>filename</var>.c"
msgstr "Αντιγράψτε και επικολλήστε τον κώδικα στο <var>filename</var>.c"

#. (itstool) path: item/p
#: C/beginner.c.page:49 C/beginner.c.page:62 C/beginner.vala.page:52
msgid "In the terminal type:"
msgstr "Πληκτρολογήστε στο τερματικό:"

#. (itstool) path: item/screen
#: C/beginner.c.page:50
#, no-wrap
msgid "gcc <var>filename</var>.c `pkg-config --cflags --libs gtk+-3.0` -o <var>filename</var>\n"
msgstr "gcc <var>filename</var>.c `pkg-config --cflags --libs gtk+-3.0` -o <var>filename</var>\n"

#. (itstool) path: item/screen
#: C/beginner.c.page:52 C/beginner.c.page:66 C/beginner.vala.page:54
#, no-wrap
msgid "./<var>filename</var>"
msgstr "./<var>filename</var>"

#. (itstool) path: note/p
#: C/beginner.c.page:56
msgid ""
"For more information about compiling GTK+ programs see <link href=\"http://"
"developer.gnome.org/gtk3/3.4/gtk-compiling.html\">Compiling GTK+ "
"Applications on UNIX</link>."
msgstr ""
"Για περισσότερες πληροφορίες σχετικά με τη μεταγλώττιση των προγραμμάτων GTK"
"+ δείτε <link href=\"http://developer.gnome.org/gtk3/3.4/gtk-compiling.html"
"\">Μεταγλωττίζοντας εφαρμογές GTK+ στο UNIX</link>."

#. (itstool) path: section/p
#: C/beginner.c.page:60
msgid "You can also use the Vala compiler to compile these samples:"
msgstr ""
"Μπορείτε επίσης να χρησιμοποιήσετε τον μεταγλωττιστή Vala για να "
"μεταγλωττίσετε αυτά τα παραδείγματα:"

#. (itstool) path: item/screen
#: C/beginner.c.page:63
#, no-wrap
msgid "valac --pkg gtk+-3.0 <var>filename</var>.c"
msgstr "valac --pkg gtk+-3.0 <var>filename</var>.c"

#. (itstool) path: item/p
#: C/beginner.c.page:65
msgid "To run:"
msgstr "Για εκτέλεση:"

#. (itstool) path: section/title
#: C/beginner.c.page:69 C/beginner.js.page:55 C/beginner.py.page:32
#: C/beginner.vala.page:58
msgid "Windows"
msgstr "Παράθυρα"

#. (itstool) path: section/title
#: C/beginner.c.page:72 C/beginner.js.page:57 C/beginner.py.page:34
#: C/beginner.vala.page:61
msgid "Display widgets"
msgstr "Εμφάνιση γραφικών στοιχείων"

#. (itstool) path: section/title
#: C/beginner.c.page:74 C/beginner.js.page:59 C/beginner.py.page:36
#: C/beginner.vala.page:63
msgid "Buttons and toggles"
msgstr "Κουμπιά και εναλλαγές"

#. (itstool) path: section/title
#: C/beginner.c.page:76 C/beginner.js.page:61 C/beginner.py.page:38
#: C/beginner.vala.page:65
msgid "Numeric and text data entry"
msgstr "Καταχώριση δεδομένων αριθμητικών και κειμένου"

#. (itstool) path: section/title
#: C/beginner.c.page:78 C/beginner.js.page:63 C/beginner.py.page:40
#: C/beginner.vala.page:67
msgid "Multiline text editor"
msgstr "Επεξεργαστής κειμένου πολλαπλών γραμμών"

#. (itstool) path: section/title
#: C/beginner.c.page:80 C/beginner.js.page:65 C/beginner.py.page:42
#: C/beginner.vala.page:69
msgid "Menu, combo box and toolbar widgets"
msgstr "Μενού, σύνθετο πλαίσιο και γραφικά στοιχεία εργαλειοθήκης"

#. (itstool) path: section/title
#: C/beginner.c.page:82 C/beginner.js.page:67 C/beginner.py.page:44
#: C/beginner.vala.page:71
msgid "TreeView widget"
msgstr "Γραφικό στοιχείο TreeView"

#. (itstool) path: section/title
#. (itstool) path: steps/title
#: C/beginner.c.page:84 C/beginner.js.page:69 C/beginner.py.page:46
#: C/beginner.vala.page:73 C/tutorial.py.page:127
msgid "Selectors"
msgstr "Επιλογείς"

#. (itstool) path: section/title
#: C/beginner.c.page:85 C/beginner.js.page:70 C/beginner.py.page:47
#: C/beginner.vala.page:74
msgid "File selectors"
msgstr "Επιλογείς αρχείων"

#. (itstool) path: section/title
#: C/beginner.c.page:87 C/beginner.js.page:72 C/beginner.py.page:49
#: C/beginner.vala.page:76
msgid "Font selectors"
msgstr "Επιλογείς γραμματοσειρών"

#. (itstool) path: section/title
#: C/beginner.c.page:89 C/beginner.js.page:74 C/beginner.py.page:51
#: C/beginner.vala.page:78
msgid "Color Selectors"
msgstr "Επιλογείς χρώματος"

#. (itstool) path: section/title
#: C/beginner.c.page:92 C/beginner.js.page:77 C/beginner.py.page:54
#: C/beginner.vala.page:81
msgid "Layout containers"
msgstr "Περιέκτες διάταξης"

#. (itstool) path: section/title
#: C/beginner.c.page:94 C/beginner.js.page:79 C/beginner.py.page:56
#: C/beginner.vala.page:83
msgid "Ornaments"
msgstr "Διακοσμητικά"

#. (itstool) path: section/title
#: C/beginner.c.page:96 C/beginner.js.page:81 C/beginner.py.page:58
#: C/beginner.vala.page:85
msgid "Scrolling"
msgstr "Κύλιση"

#. (itstool) path: section/title
#: C/beginner.c.page:98 C/beginner.js.page:83 C/beginner.py.page:60
#: C/beginner.vala.page:87
msgid "Miscellaneous"
msgstr "Διάφορα"

#. (itstool) path: section/title
#: C/beginner.c.page:103 C/beginner.js.page:88 C/beginner.vala.page:92
#: C/menubar.vala.page:198
msgid "Exercises"
msgstr "Ασκήσεις"

#. (itstool) path: credit/name
#: C/beginner.js.page:11 C/grid.js.page:13 C/guitar-tuner.js.page:12
#: C/hello-world.c.page:15 C/hello-world.js.page:15 C/hello-world.py.page:15
#: C/hello-world.vala.page:15 C/weatherApp.js.page:12
#: C/weatherAppMain.js.page:11 C/weatherAutotools.js.page:11
#: C/weatherGeonames.js.page:11
msgid "Susanna Huhtanen"
msgstr "Susanna Huhtanen"

#. (itstool) path: info/desc
#: C/beginner.js.page:21
msgid ""
"A beginner's guide to writing GNOME applications in JavaScript, including "
"code samples and practice exercises."
msgstr ""
"Ένας οδηγός αρχαρίων στη συγγραφή εφαρμογών GNOME σε JavaScript, "
"συμπεριλαμβάνοντας δείγματα κώδικα και πρακτικές ασκήσεις."

#. (itstool) path: synopsis/p
#: C/beginner.js.page:26
msgid ""
"JavaScript is one of the most popular programming languages on the web. It's "
"not just for the web, though. If you have even a basic understanding of "
"JavaScript, you can write full-fledged applications for GNOME. <link href="
"\"https://live.gnome.org/GnomeDocuments\">GNOME Documents</link> is written "
"in JavaScript, and so is <link href=\"https://live.gnome.org/GnomeShell/Tour"
"\">GNOME Shell</link>, the most basic part of GNOME."
msgstr ""
"Η JavaScript είναι μία από τις πιο δημοφιλείς γλώσσες προγραμματισμού στον "
"ιστό. Δεν είναι μόνο για τον ιστό, όμως. Εάν έχετε ακόμα μια βασική "
"κατανόηση της JavaScript, μπορείτε να γράψετε πλήρεις εφαρμογές για το "
"GNOME. <link href=\"https://live.gnome.org/GnomeDocuments\">έγγραφα GNOME</"
"link> είναι γραμμένο σε JavaScript και έτσι είναι το <link href=\"https://"
"live.gnome.org/GnomeShell/Tour\">κέλυφος GNOME</link>, το πιο βασικό μέρος "
"του GNOME."

#. (itstool) path: note/p
#: C/beginner.js.page:27
msgid ""
"GNOME Shell is what you see when you click on \"Activities\" in the top-left "
"corner of your screen. It also controls the clock and the rest of the top "
"panel. Besides showing how you to write GNOME applications, these tutorials "
"will also show you how to use JavaScript to write GNOME Shell extensions, "
"which give it new features or change the way it does things."
msgstr ""
"Το κέλυφος GNOME είναι αυτό που βλέπετε όταν πατάτε στις \"Activities\" στην "
"επάνω αριστερή γωνία της οθόνης σας. Ελέγχει επίσης το ρολόι και το υπόλοιπο "
"του πάνω πλαισίου. Επιπλέον δείχνοντας σας πώς να γράψετε εφαρμογές GNOME, "
"αυτά τα μαθήματα θα σας δείξουν επίσης πώς να χρησιμοποιήσετε JavaScript για "
"να γράψετε επεκτάσεις κελύφους GNOME, που του δίνουν νέα γνωρίσματα ή "
"αλλάζουν τον τρόπο που κάνει πράγματα."

#. (itstool) path: section/title
#: C/beginner.js.page:31
msgid "Getting Started"
msgstr "Ξεκίνημα"

#. (itstool) path: section/p
#: C/beginner.js.page:32
msgid ""
"These tutorials are designed for people who already know how to write in "
"JavaScript, and who have GNOME installed on their computers already, but who "
"are new to developing GNOME applications. If you don't already know "
"JavaScript, or if you need help getting GNOME set up, take a look at these "
"resources first:"
msgstr ""
"Αυτά τα μαθήματα σχεδιάστηκαν για άτομα που ήδη ξέρουν πώς να γράψουν σε "
"JavaScript, και έχουν ήδη εγκατεστημένο το GNOME στους υπολογιστές τους, "
"αλλά είναι νέοι στην ανάπτυξη εφαρμογών GNOME. Εάν δεν ξέρετε ήδη "
"JavaScript, ή εάν χρειαζόσαστε βοήθεια για εγκατάσταση του GNOME, ρίξτε μια "
"ματιά πρώτα σε αυτές τις πηγές πρώτα:"

#. (itstool) path: item/p
#: C/beginner.js.page:34
msgid ""
"<link href=\"http://eloquentjavascript.net/contents.html\">Eloquent "
"JavaScript</link> is a free, Creative Commons-licensed book, which explains "
"the basics of JavaScript programming. Since you won't be writing JavaScript "
"for the web, you only need to read up to chapter 10 or so."
msgstr ""
"<link href=\"http://eloquentjavascript.net/contents.html\">εύγλωττο "
"JavaScript</link> είναι ένα ελεύθερο, βιβλίο με την άδεια Creative Commons, "
"που εξηγεί τα βασικά του προγραμματισμού JavaScript. Αφού δεν θα γράψετε "
"JavaScript για τον ιστό, χρειάζεται να διαβάσετε μέχρι το κεφάλαιο 10 "
"περίπου."

#. (itstool) path: item/p
#: C/beginner.js.page:35
msgid ""
"<link href=\"http://www.gnome.org/getting-gnome/\">Download GNOME</link> as "
"part of a distribution, like Fedora, openSUSE, or Ubuntu. Each distribution "
"has its own instructions for how to get GNOME."
msgstr ""
"Η <link href=\"http://www.gnome.org/getting-gnome/\">λήψη του GNOME</link> "
"είναι μέρος μιας διανομής, όπως Fedora, openSUSE, ή Ubuntu. Κάθε διανομή "
"έχει τις δικές της οδηγίες για το πώς να πάρετε το GNOME."

#. (itstool) path: item/p
#: C/beginner.js.page:36
msgid ""
"<link xref=\"set-up-gedit.js\">Set up gedit</link> for writing applications. "
"GNOME's text editor, gedit, is sometimes just called \"text editor\"."
msgstr ""
"<link xref=\"set-up-gedit.js\">Εγκατάσταση gedit</link> για συγγραφή "
"εφαρμογών. Ο επεξεργαστής κειμένου του GNOME, gedit, αποκαλείται μερικές "
"φορές απλά \"επεξεργασία κειμένου\"."

#. (itstool) path: section/p
#: C/beginner.js.page:47
msgid ""
"These samples show how to use widgets in your GNOME applications. Each one "
"demonstrates a complete application which showcases the featured widget. At "
"the end of each sample, you will find links to more detailed reference "
"material."
msgstr ""
"Αυτά τα δείγματα εμφανίζουν τη χρήση γραφικών στοιχείων στις εφαρμογές σας "
"του GNOME. Κάθε μια δείχνει μια πλήρη εφαρμογή που δείχνει περιπτώσεις με "
"χαρακτηριστικά γραφικά στοιχείο. Στο τέλος κάθε δείγματος, θα βρείτε "
"συνδέσμους σε πιο λεπτομερή υλικά αναφοράς."

#. (itstool) path: item/p
#: C/beginner.js.page:50
msgid "Copy and paste the code into <var>filename</var>.js"
msgstr "Αντιγραφή και επικόλληση του κώδικα στο <var>filename</var>.js"

#. (itstool) path: item/p
#: C/beginner.js.page:51
msgid "In the terminal, type:"
msgstr "Στον τερματικό, πληκτρολογήστε:"

#. (itstool) path: item/screen
#: C/beginner.js.page:52
#, no-wrap
msgid "gjs <var>filename</var>.js"
msgstr "gjs <var>filename</var>.js"

#. (itstool) path: info/title
#: C/beginner.py.page:9
msgctxt "text"
msgid "GTK+ widgets sample code (Python)"
msgstr "Δείγμα κώδικα γραφικών στοιχείων GTK+ (Python)"

#. (itstool) path: info/desc
#: C/beginner.py.page:13
msgid ""
"A guide to GUI programming using GTK+, including code samples and practice "
"exercises."
msgstr ""
"Ένας οδηγός για την ανάπτυξη διεπαφών χρήστη (GUI) χρησιμοποιώντας GTK+, "
"συμπεριλαμβάνοντας δείγματα κώδικα και πρακτικές ασκήσεις."

#. (itstool) path: page/title
#: C/beginner.py.page:25
msgid "GTK+ widgets sample code"
msgstr "Κώδικας δείγματος γραφικών στοιχείων GTK+"

#. (itstool) path: synopsis/p
#: C/beginner.py.page:27
msgid ""
"If you are a beginner and you would like a tutorial to guide you step by "
"step in an exploration of what you can do with GTK+ 3, you should go to the "
"<link xref=\"tutorial.py\"/> page. If you are looking for a specific widget, "
"you can find it in the sections below."
msgstr ""
"Εάν είσαστε αρχάριος και θα θέλατε ένα μάθημα να σας καθοδηγήσει βήμα-βήμα "
"σε μια εξερεύνηση του τι μπορείτε να κάνετε με το GTK+ 3, θα πρέπει να πάτε "
"στη σελίδα <link xref=\"tutorial.py\"/>. Εάν ψάχνετε για ένα συγκεκριμένο "
"γραφικό στοιχείο, μπορείτε να το βρείτε στις παρακάτω ενότητες."

#. (itstool) path: section/title
#: C/beginner.py.page:64
msgid "Theory pages"
msgstr "Σελίδες θεωρίας"

#. (itstool) path: info/title
#: C/beginner.vala.page:9
msgctxt "text"
msgid "Tutorial for beginners (Vala)"
msgstr "Μάθημα για αρχάριους (Vala)"

#. (itstool) path: item/p
#: C/beginner.vala.page:30
msgid "The Vala programming language:"
msgstr "Η γλώσσα προγραμματισμού Vala:"

#. (itstool) path: item/p
#: C/beginner.vala.page:32
msgid ""
"<link href=\"https://live.gnome.org/Vala/Tutorial\">The Vala Tutorial</link>"
msgstr ""
"<link href=\"https://live.gnome.org/Vala/Tutorial\">Μαθήματα Vala</link>"

#. (itstool) path: item/p
#: C/beginner.vala.page:33
msgid ""
"<link href=\"https://live.gnome.org/Vala/Documentation#Sample_Code\">Sample "
"Vala code</link>"
msgstr ""
"<link href=\"https://live.gnome.org/Vala/Documentation#Sample_Code\">Δείγμα "
"κώδικα Vala</link>"

#. (itstool) path: item/p
#: C/beginner.vala.page:51
msgid "Copy and paste the code into <var>filename</var>.vala"
msgstr "Αντιγραφή και επικόλληση του κώδικα στο <var>filename</var>.vala"

#. (itstool) path: item/screen
#: C/beginner.vala.page:53
#, no-wrap
msgid "valac --pkg gtk+-3.0 <var>filename</var>.vala"
msgstr "valac --pkg gtk+-3.0 <var>filename</var>.vala"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/button.c.page:25 C/button.js.page:22 C/button.py.page:25
#: C/button.vala.page:24
msgctxt "_"
msgid "external ref='media/button.png' md5='8d69efbb3a0d3e043af6139b6492171c'"
msgstr "external ref='media/button.png' md5='8d69efbb3a0d3e043af6139b6492171c'"

#. (itstool) path: info/title
#: C/button.c.page:8
msgctxt "text"
msgid "Button (C)"
msgstr "Κουμπί (C)"

#. (itstool) path: info/desc
#: C/button.c.page:20 C/button.py.page:20 C/button.vala.page:19
msgid "A button widget which emits a signal when clicked"
msgstr "Ένα κουμπί γραφικού στοιχείου που εκπέμπει σήμα όταν πατηθεί"

#. (itstool) path: page/title
#: C/button.c.page:23 C/button.js.page:21 C/button.py.page:23
msgid "Button"
msgstr "Κουμπί"

#. (itstool) path: page/p
#: C/button.c.page:26
msgid ""
"A button widget connected to a callback function that reverses its label "
"when clicked."
msgstr ""
"Ένα γραφικό στοιχείο κουμπιού συνδεμένο με μια απλή συνάρτηση επανάκλησης "
"που αντιστρέφει την ετικέτα της όταν πατηθεί."

#. (itstool) path: page/code
#: C/button.c.page:28
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*This is the callback function. It is a handler function which \n"
"reacts to the signal. In this case, it will cause the button label's \n"
"string to reverse.*/\n"
"static void\n"
"button_clicked (GtkButton *button,\n"
"                gpointer   user_data)\n"
"{\n"
"  const char *old_label;\n"
"  char *new_label;\n"
"\n"
"  old_label = gtk_button_get_label (button);\n"
"  new_label = g_utf8_strreverse (old_label, -1);\n"
"\n"
"  gtk_button_set_label (button, new_label);\n"
"  g_free (new_label);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *button;\n"
"\n"
"  /*Create a window with a title and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"GNOME Button\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 250, 50);\n"
"\n"
"  /*Create a button with a label, and add it to the window*/\n"
"  button = gtk_button_new_with_label (\"Click Me\");\n"
"  gtk_container_add (GTK_CONTAINER (window), button);\n"
"\n"
"  /*Connecting the clicked signal to the callback function*/\n"
"  g_signal_connect (GTK_BUTTON (button),\n"
"                    \"clicked\", \n"
"                    G_CALLBACK (button_clicked), \n"
"                    G_OBJECT (window));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Αυτή είναι η συνάρτηση επανάκλησης. Είναι ένας χειριστής συνάρτησης που\n"
"αντιδρά στο σήμα. Σε αυτήν την περίπτωση, θα προκαλέσει την αναστροφή της συμβολοσειράς\n"
"της ετικέτας του κουμπιού.*/\n"
"static void\n"
"button_clicked (GtkButton *button,\n"
"                gpointer   user_data)\n"
"{\n"
"  const char *old_label;\n"
"  char *new_label;\n"
"\n"
"  old_label = gtk_button_get_label (button);\n"
"  new_label = g_utf8_strreverse (old_label, -1);\n"
"\n"
"  gtk_button_set_label (button, new_label);\n"
"  g_free (new_label);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *button;\n"
"\n"
"  /*Δημιουργήστε ένα παράθυρο με τίτλο και προεπιλεγμένο μέγεθος*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"GNOME Button\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 250, 50);\n"
"\n"
"  /*Δημιουργήστε ένα κουμπί με ετικέτα και προσθέστε το στο παράθυρο*/\n"
"  button = gtk_button_new_with_label */(  \"Click Me\");\n"
"  gtk_container_add (GTK_CONTAINER (window), button);\n"
"\n"
"  /*Σύνδεση του σήματος πατήματος με τη συνάρτηση επανάκλησης*/\n"
"  g_signal_connect (GTK_Button (button), \n"
"                    \"clicked\", \n"
"                    G_CALLBACK (button_clicked), \n"
"                    G_OBJECT (window));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/button.c.page:36 C/buttonbox.py.page:51 C/grid.c.page:35
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkButton.html"
"\">GtkButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkButton.html"
"\">GtkButton</link>"

#. (itstool) path: item/p
#: C/button.c.page:37
msgid ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-Unicode-"
"Manipulation.html#g-utf8-strreverse\">Unicode Manipulation</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-Unicode-"
"Manipulation.html#g-utf8-strreverse\">Unicode Manipulation</link>"

#. (itstool) path: info/title
#: C/button.js.page:8
msgctxt "text"
msgid "Button (JavaScript)"
msgstr "Κουμπί (JavaScript)"

#. (itstool) path: info/desc
#: C/button.js.page:18
msgid "A button which can be connected to other widgets"
msgstr "Ένα κουμπί που μπορεί να συνδεθεί με άλλα γραφικά στοιχεία"

#. (itstool) path: page/p
#: C/button.js.page:23
msgid "A button widget that changes its label when you click it."
msgstr ""
"Ένα γραφικό στοιχείο κουμπιού που αλλάζει την ετικέτα του όταν το πατάτε."

#. (itstool) path: page/code
#: C/button.js.page:25
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ButtonExample = new Lang.Class ({\n"
"    Name: 'Button Example',\n"
"\n"
"    /* Create the application itself\n"
"       This boilerplate code is needed to build any GTK+ application. */\n"
"        _init: function () {\n"
"            this.application = new Gtk.Application ({\n"
"                application_id: 'org.example.jsbutton',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                              window_position: Gtk.WindowPosition.CENTER,\n"
"                                                              title: \"GNOME Button\",\n"
"                                                              default_height: 50,\n"
"                                                              default_width: 250 });\n"
"\n"
"        // Create the button\n"
"        this.Button = new Gtk.Button ({label: \"Click Me\"});\n"
"        this._window.add (this.Button);\n"
"\n"
"        // Bind it to a function that says what to do when the button is clicked\n"
"        this.Button.connect (\"clicked\", Lang.bind(this, this._clickHandler));\n"
"\n"
"                // Show the window and all child widgets\n"
"                this._window.show_all();\n"
"    },\n"
"\n"
"    // Here's the function that says what happens when the button is clicked\n"
"    _clickHandler: function () {\n"
"        this.Button.set_label (\"Clicked!\");\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ButtonExample = new Lang.Class ({\n"
"    Name: 'Button Example',\n"
"\n"
"    /* Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"       Αυτός ο κώδικαςχρειάζεται για τη δόμηση οποιασδήποτε εφαρμογής GTK+. */\n"
"        _init: function () {\n"
"            this.application = new Gtk.Application ({\n"
"                application_id: 'org.example.jsbutton',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Σύνδεση σημάτων 'activate' και 'startup' στις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' αρχικοποιεί μενού και δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function () {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"            this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                              window_position: Gtk.WindowPosition.CENTER,\n"
"                                                              title: \"GNOME Button\",\n"
"                                                              default_height: 50,\n"
"                                                              default_width: 250 });\n"
"\n"
"        // Δημιουργία του κουμπιού\n"
"        this.Button = new Gtk.Button ({label: \"Click Me\"});\n"
"        this._window.add (this.Button);\n"
"\n"
"        // Σύνδεσή του με μια συνάρτηση που λέει τι να γίνει όταν πατιέται το κουμπί\n"
"        this.Button.connect (\"clicked\", Lang.bind(this, this._clickHandler));\n"
"\n"
"                // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"                this._window.show_all();\n"
"    },\n"
"\n"
"    // Ιδού η συνάρτηση που λέει τι συμβαίνει όταν πατιέται το κουμπί\n"
"    _clickHandler: function () {\n"
"        this.Button.set_label (\"Clicked!\");\n"
"    }\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new ButtonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/button.js.page:33 C/grid.js.page:36
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Button.html"
"\">Gtk.Button</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Button.html"
"\">Gtk.Button</link>"

#. (itstool) path: info/title
#: C/button.py.page:8
msgctxt "text"
msgid "Button (Python)"
msgstr "Κουμπί (Python)"

#. (itstool) path: page/p
#: C/button.py.page:26 C/button.vala.page:25
msgid "A button widget connected to a simple callback function."
msgstr ""
"Ένα γραφικό στοιχείο κουμπιού συνδεμένο με μια απλή συνάρτηση επανάκλησης."

#. (itstool) path: section/code
#: C/button.py.page:32
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GNOME Button\", application=app)\n"
"        self.set_default_size(250, 50)\n"
"\n"
"        # a button\n"
"        button = Gtk.Button()\n"
"        # with a label\n"
"        button.set_label(\"Click me\")\n"
"        # connect the signal \"clicked\" emitted by the button\n"
"        # to the callback function do_clicked\n"
"        button.connect(\"clicked\", self.do_clicked)\n"
"        # add the button to the window\n"
"        self.add(button)\n"
"\n"
"    # callback function connected to the signal \"clicked\" of the button\n"
"    def do_clicked(self, button):\n"
"        print \"You clicked me!\"\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GNOME Button\", application=app)\n"
"        self.set_default_size(250, 50)\n"
"\n"
"        # a button\n"
"        button = Gtk.Button()\n"
"        # with a label\n"
"        button.set_label(\"Click me\")\n"
"        # connect the signal \"clicked\" emitted by the button\n"
"        # to the callback function do_clicked\n"
"        button.connect(\"clicked\", self.do_clicked)\n"
"        # add the button to the window\n"
"        self.add(button)\n"
"\n"
"    # callback function connected to the signal \"clicked\" of the button\n"
"    def do_clicked(self, button):\n"
"        print \"You clicked me!\"\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/button.py.page:36
msgid "Useful methods for a Button widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο κουμπιού"

#. (itstool) path: section/p
#: C/button.py.page:37
msgid ""
"In line 16 the <code>\"clicked\"</code> signal from the button is connected "
"to the callback function <code>do_clicked()</code> using <code><var>widget</"
"var>.connect(<var>signal</var>, <var>callback function</var>)</code>. See "
"<link xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"Στη γραμμή 16 το σήμα <code>\"clicked\"</code> από το κουμπί συνδέεται με τη "
"συνάρτηση επανάκλησης <code>do_clicked()</code> χρησιμοποιώντας "
"<code><var>widget</var>.connect(<var>signal</var>, <var>callback function</"
"var>)</code>. Δείτε <link xref=\"signals-callbacks.py\"/> για μια πιο "
"λεπτομερή εξήγηση."

#. (itstool) path: item/p
#: C/button.py.page:39
msgid ""
"<code>set_relief(Gtk.ReliefStyle.NONE)</code> sets to none the relief style "
"of the edges of the Gtk.Button - as opposed to <code>Gtk.ReliefStyle.NORMAL</"
"code>."
msgstr ""
"Ο <code>set_relief(Gtk.ReliefStyle.NONE)</code> ορίζει σε κανένα τον τύπο "
"αναγλύφου των άκρων του Gtk.Button - καθώς αντιτίθεται στο <code>Gtk."
"ReliefStyle.NORMAL</code>."

#. (itstool) path: item/p
#: C/button.py.page:40
msgid ""
"If the label of the button is a <link href=\"http://developer.gnome.org/gtk3/"
"unstable/gtk3-Stock-Items.html\">stock icon</link>, "
"<code>set_use_stock(True)</code> sets the label as the name of the "
"corresponding stock icon."
msgstr ""
"Εάν η ετικέτα του κουμπιού είναι ένα <link href=\"http://developer.gnome.org/"
"gtk3/unstable/gtk3-Stock-Items.html\">εικονίδιο παρακαταθήκης</link>, ο "
"<code>set_use_stock(True)</code> ορίζει την ετικέτα ως το όνομα του "
"αντίστοιχου εικονιδίου παρακαταθήκης."

#. (itstool) path: item/p
#: C/button.py.page:41
msgid ""
"To set an image (e.g. a stock image) for the button <code>button</code>:"
msgstr ""
"Για ορισμό μιας εικόνας (π.χ. μια εικόνα παρακαταθήκης) για το κουμπί "
"<code>button</code>:"

#. (itstool) path: item/code
#: C/button.py.page:42
#, no-wrap
msgid ""
"\n"
"image = Gtk.Image()\n"
"image.set_from_stock(Gtk.STOCK_ABOUT, Gtk.IconSize.BUTTON)\n"
"button.set_image(image)"
msgstr ""
"\n"
"image = Gtk.Image()\n"
"image.set_from_stock(Gtk.STOCK_ABOUT, Gtk.IconSize.BUTTON)\n"
"button.set_image(image)"

#. (itstool) path: item/p
#: C/button.py.page:46
msgid ""
"You should not set a label for the button after this, otherwise it will show "
"the label and not the image."
msgstr ""
"Θα πρέπει να μην ορίσετε μια ετικέτα για το κουμπί μετά από αυτό, αλλιώς θα "
"εμφανίσει την ετικέτα και όχι την εικόνα."

#. (itstool) path: item/p
#: C/button.py.page:47
msgid ""
"If we use <code>set_focus_on_click(False)</code> the button will not grab "
"focus when it is clicked by the mouse. This could be useful in places like "
"toolbars, so that the keyboard focus is not removed from the main area of "
"the application."
msgstr ""
"Εάν χρησιμοποιήσουμε <code>set_focus_on_click(False)</code> το κουμπί δεν θα "
"εστιάσει όταν πατηθεί από το ποντίκι. Αυτό μπορεί να είναι χρήσιμο σε θέσεις "
"όπως εργαλειοθήκες, έτσι ώστε η εστίαση του πληκτρολογίου να μην αφαιρεθεί "
"από την κύρια περιοχή της εφαρμογής."

#. (itstool) path: item/p
#: C/button.py.page:55
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkButton.html"
"\">GtkButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkButton.html"
"\">GtkButton</link>"

#. (itstool) path: item/p
#: C/button.py.page:56 C/dialog.py.page:52 C/label.py.page:106
#: C/linkbutton.py.page:47 C/messagedialog.py.page:61 C/radiobutton.py.page:49
#: C/separator.py.page:39 C/window.py.page:65
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkWindow.html"
"\">GtkWindow</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkWindow.html"
"\">GtkWindow</link>"

#. (itstool) path: info/title
#: C/button.vala.page:8
msgctxt "text"
msgid "Button (Vala)"
msgstr "Κουμπί (Vala)"

#. (itstool) path: page/title
#: C/button.vala.page:22
msgid "Button widget"
msgstr "Γραφικό στοιχείο κουμπιού"

#. (itstool) path: page/code
#: C/button.vala.page:27
#, no-wrap
msgid ""
"\n"
"/* A window in the application */\n"
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* The constructor of the window */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"GNOME Button\");\n"
"\n"
"\t\tvar button = new Gtk.Button.with_label (\"Click Me\");\n"
"\t\tbutton.clicked.connect (this.reverse_label);\n"
"\t\tbutton.show ();\n"
"\n"
"\t\tthis.window_position = Gtk.WindowPosition.CENTER;\n"
"\t\tthis.set_default_size (250,50);\n"
"\t\tthis.add (button);\n"
"\t}\n"
"\n"
"\t/* The callback function connected to the\n"
"\t * 'clicked' signal of the button.\n"
"\t */\n"
"\tvoid reverse_label (Gtk.Button button) {\n"
"\t\tbutton.label = button.label.reverse ();\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\n"
"\t/* This is the constructor */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the activate signal of GLib.Application */\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"\n"
"/* Ένα παράθυρο στην εφαρμογή */\n"
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Ο κατασκευαστής του παραθύρου */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"GNOME Button\");\n"
"\n"
"\t\tvar button = new Gtk.Button.with_label (\"Click Me\");\n"
"\t\tbutton.clicked.connect (this.reverse_label);\n"
"\t\tbutton.show ();\n"
"\n"
"\t\tthis.window_position = Gtk.WindowPosition.CENTER;\n"
"\t\tthis.set_default_size (250,50);\n"
"\t\tthis.add (button);\n"
"\t}\n"
"\n"
"\t/* Σύνδεση της συνάρτησης επανάκλησης με το σήμα\n"
"\t * 'clicked' του κουμπιού.\n"
"\t */\n"
"\tvoid reverse_label (Gtk.Button button) {\n"
"\t\tbutton.label = button.label.reverse ();\n"
"\t}\n"
"}\n"
"\n"
"/* Αυτή είναι η εφαρμογή. */\n"
"public class MyApplication : Gtk.Application {\n"
"\n"
"\t/* Αυτός είναι ο κατασκευαστής */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Αντικατάσταση του ενεργού σήματος GLib.Application */\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"}\n"
"\n"
"/* το κύριο δημιουργεί και εκτελεί την εφαρμογή */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: page/p
#: C/button.vala.page:29
msgid ""
"In this sample we used the following: <link href=\"http://www.valadoc.org/gtk"
"+-3.0/Gtk.Button.html\">Gtk.Button</link>"
msgstr ""
"Σε αυτό το παράδειγμα χρησιμοποιούμε το παρακάτω: <link href=\"http://www."
"valadoc.org/gtk+-3.0/Gtk.Button.html\">Gtk.Button</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/buttonbox.js.page:24 C/buttonbox.py.page:25
msgctxt "_"
msgid ""
"external ref='media/buttonbox_calculator.png' "
"md5='ce0de08b7ac66f517290e33e6d33d508'"
msgstr ""
"external ref='media/buttonbox_calculator.png' "
"md5='ce0de08b7ac66f517290e33e6d33d508'"

#. (itstool) path: info/title
#: C/buttonbox.js.page:8
msgctxt "text"
msgid "ButtonBox (JavaScript)"
msgstr "Πλαίσιο κουμπιού (JavaScript)"

#. (itstool) path: credit/name
#: C/buttonbox.js.page:14 C/colorbutton.js.page:13
#: C/fontchooserwidget.js.page:13 C/paned.js.page:13
#: C/scrolledwindow.js.page:13 C/tooltip.js.page:14
msgid "Meg Ford"
msgstr "Meg Ford"

#. (itstool) path: info/desc
#: C/buttonbox.js.page:19 C/buttonbox.py.page:20
msgid "A container for arranging buttons"
msgstr "Ένας περιέκτης για διευθέτηση κουμπιών"

#. (itstool) path: page/title
#. (itstool) path: steps/title
#: C/buttonbox.js.page:22 C/buttonbox.py.page:23 C/tutorial.py.page:92
msgid "ButtonBox"
msgstr "ButtonBox"

#. (itstool) path: page/p
#: C/buttonbox.js.page:25 C/buttonbox.py.page:26
msgid "A calculator - the buttons are enclosed in horizontal ButtonBoxes."
msgstr "Μια αριθμομηχανή - τα κουμπιά περικλείονται σε οριζόντια ButtonBoxes."

#. (itstool) path: section/code
#: C/buttonbox.js.page:31
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ButtonBoxExample = new Lang.Class ({\n"
"    Name: 'ButtonBox Example',\n"
"\n"
"    // Create the application itthis\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application({ application_id: 'org.example.jsbuttonbox' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"        // Create the application window\n"
"        this.window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                    window_position: Gtk.WindowPosition.CENTER,\n"
"                                                    title: \"Calculator\",\n"
"                                                    default_width: 350,\n"
"                                                    default_height: 200,\n"
"                                                    border_width: 10 });\n"
"        this.entry = new Gtk.Entry();\n"
"        this.entry.set_text('0');\n"
"        // text aligned on the right\n"
"        this.entry.set_alignment(1);\n"
"        // the text in the entry cannot be modified by writing in it\n"
"        this.entry.set_can_focus(false);\n"
"\n"
"        // a grid\n"
"        this.grid = new Gtk.Grid();\n"
"        this.grid.set_row_spacing(5);\n"
"        \n"
"        // to attach the entry\n"
"        this.grid.attach(this.entry, 0, 0, 1, 1);\n"
"        \n"
"        // the labels for the buttons\n"
"        this.buttons = [ 7, 8, 9, '/', 4, 5, 6, '*', 1, 2, 3, '-', 'C', 0, '=', '+' ];\n"
"        \n"
"        // each row is a ButtonBox, attached to the grid            \n"
"        for (i = 0; i &lt; 4; i++) {\n"
"            this.hbox = Gtk.ButtonBox.new(Gtk.Orientation.HORIZONTAL);\n"
"            this.hbox.set_spacing(5);\n"
"            this.grid.attach(this.hbox, 0, i + 1, 1, 1);\n"
"            // each ButtonBox has 4 buttons, connected to the callback function\n"
"            for (j= 0; j &lt; 4; j++) {\n"
"                this.button = new Gtk.Button();\n"
"                this.buttonLabel = (this.buttons[i * 4 + j].toString());\n"
"                this.button.set_label(this.buttonLabel);\n"
"                this.button.set_can_focus(false);\n"
"                this.button.connect(\"clicked\", Lang.bind(this, this._buttonClicked, this.button));\n"
"                this.hbox.add(this.button);\n"
"            }\n"
"        }\n"
"            \n"
"        // some variables for the calculations\n"
"        this.firstNumber = 0;\n"
"        this.secondNumber = 0;\n"
"        this.counter = 0;\n"
"        this.operation = \"\";\n"
"\n"
"        // add the grid to the window\n"
"        this.window.add(this.grid);\n"
"        this.window.show_all();\n"
"    },\n"
"\n"
"    // callback function for all the buttons\n"
"    _buttonClicked: function(button) {\n"
"        this.button = button;\n"
"        // for the operations\n"
"        if (this.button.get_label() == '+') {\n"
"            this.counter += 1 \n"
"            if (this.counter &gt; 1)\n"
"                this._doOperation();\n"
"            this.entry.set_text('0');\n"
"            this.operation = \"plus\";\n"
"        }\n"
"\n"
"        else if (this.button.get_label() == '-') {\n"
"            this.counter += 1;\n"
"            if (this.counter &gt; 1)\n"
"                this._doOperation();\n"
"            this.entry.set_text('0');\n"
"            this.operation = \"minus\";\n"
"        }\n"
"\n"
"        else if (this.button.get_label() == '*') {\n"
"            this.counter += 1; \n"
"            if (this.counter &gt; 1)\n"
"                this._doOperation();\n"
"            this.entry.set_text('0');\n"
"            this.operation = \"multiplication\";\n"
"        }\n"
"\n"
"        else if (this.button.get_label() == '/') {\n"
"            this.counter += 1 \n"
"            if (this.counter &gt; 1)\n"
"                this._doOperation();\n"
"            this.entry.set_text('0');\n"
"            this.operation = \"division\";\n"
"        }\n"
"\n"
"        // for =\n"
"        else if (this.button.get_label() == '=') {\n"
"            this._doOperation();\n"
"            this.entry.set_text(this.firstNumber.toString());\n"
"            this.counter = 1;\n"
"        }\n"
"\n"
"        // for Cancel\n"
"        else if (this.button.get_label() == 'C') {\n"
"            this.firstNumber = 0;\n"
"            this.secondNumber = 0;\n"
"            this.counter = 0;\n"
"            this.entry.set_text('0');\n"
"            this.operation = \"\";\n"
"        }\n"
"\n"
"        // for a digit button\n"
"        else {\n"
"            this.newDigit = parseInt(this.button.get_label());\n"
"            if (this.entry.get_text() == \"error\")\n"
"                this.number = 0;\n"
"            else\n"
"                this.number = parseInt(this.entry.get_text());\n"
"            this.number = this.number * 10 + this.newDigit;            \n"
"            if (this.counter == 0)\n"
"                this.firstNumber = this.number;\n"
"            else\n"
"                this.secondNumber = this.number;\n"
"            this.entry.set_text(this.number.toString());\n"
"        }\n"
"     },\n"
"\n"
"     _doOperation: function() {\n"
"        if (this.operation == \"plus\") {\n"
"           this.firstNumber += this.secondNumber;\n"
"        } else if (this.operation == \"minus\") {\n"
"            this.firstNumber -= this.secondNumber;\n"
"        } else if (this.operation == \"multiplication\") {\n"
"            this.firstNumber *= this.secondNumber;\n"
"        } else if (this.operation == \"division\") {\n"
"            if (this.secondNumber != 0) {\n"
"                this.firstNumber /= this.secondNumber;\n"
"            } else {\n"
"                this.firstNumber = 0; \n"
"                this.secondNumber = 0;\n"
"                this.counter = 0; \n"
"                this.entry.set_text(\"error\");\n"
"                this.operation = \"\";\n"
"\n"
"                return\n"
"            }\n"
"        } else {\n"
"            this.firstNumber = 0;\n"
"            this.secondNumber = 0;\n"
"            this.counter = 0;\n"
"            this.entry.set_text(\"error\");\n"
"        }\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ButtonBoxExample();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ButtonBoxExample = new Lang.Class ({\n"
"    Name: 'ButtonBox Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής itthis\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application({ application_id: 'org.example.jsbuttonbox' });\n"
"\n"
"        // Σύνδεση σημάτων 'activate' και 'startup'στις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη γραφική διεπαφή\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Κατασκευή της γραφικής διεπαφής της εφαρμογής\n"
"    _buildUI: function() {\n"
"        // Δημιουργία του παραθύρου εφαρμογής\n"
"        this.window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                    window_position: Gtk.WindowPosition.CENTER,\n"
"                                                    title: \"Calculator\",\n"
"                                                    default_width: 350,\n"
"                                                    default_height: 200,\n"
"                                                    border_width: 10 });\n"
"        this.entry = new Gtk.Entry();\n"
"        this.entry.set_text('0');\n"
"        // κείμενο στοιχισμένο στα δεξιά\n"
"        this.entry.set_alignment(1);\n"
"        // Το κείμενο στην καταχώριση δεν μπορεί να τροποποιηθεί γράφοντας σε αυτό\n"
"          this.entry.set_can_focus(false);\n"
"\n"
"        // Πλέγμα\n"
"        this.grid = new Gtk.Grid();\n"
"        this.grid.set_row_spacing(5);\n"
"        \n"
"        // Για προσκόλληση της καταχώρισης\n"
"        this.grid.attach(this.entry, 0, 0, 1, 1);\n"
"        \n"
"        // Οι ετικέτες για τα κουμπιά\n"
"        this.buttons = [ 7, 8, 9, '/', 4, 5, 6, '*', 1, 2, 3, '-', 'C', 0, '=', '+' ];\n"
"        \n"
"        // Κάθε γραμμή είναι ένα πλαίσιο κουμπιού, προσκολλημένο στο πλέγμα            \n"
"        for (i = 0; i &lt; 4; i++) {\n"
"            this.hbox = Gtk.ButtonBox.new(Gtk.Orientation.HORIZONTAL);\n"
"            this.hbox.set_spacing(5);\n"
"            this.grid.attach(this.hbox, 0, i + 1, 1, 1);\n"
"            // Κάθε πλαίσιο κουμπιού έχει 4 κουμπιά, συνδεμένα με τη συνάρτηση επανάκλησης\n"
"            for (j= 0; j &lt; 4; j++) {\n"
"                this.button = new Gtk.Button();\n"
"                this.buttonLabel = (this.buttons[i * 4 + j].toString());\n"
"                this.button.set_label(this.buttonLabel);\n"
"                this.button.set_can_focus(false);\n"
"                this.button.connect(\"clicked\", Lang.bind(this, this._buttonClicked, this.button));\n"
"                this.hbox.add(this.button);\n"
"            }\n"
"        }\n"
"            \n"
"        // Μερικές μεταβλητές για τους υπολογισμούς\n"
"        this.firstNumber = 0;\n"
"        this.secondNumber = 0;\n"
"        this.counter = 0;\n"
"        this.operation = \"\";\n"
"\n"
"        // προσθήκη του πλέγματος στο παράθυρο\n"
"        this.window.add(this.grid);\n"
"        this.window.show_all();\n"
"    },\n"
"\n"
"    // Συνάρτηση επανάκλησης για όλα τα κουμπιά\n"
"    _buttonClicked: function(button) {\n"
"        this.button = button;\n"
"        // for the operations\n"
"        if (this.button.get_label() == '+') {\n"
"            this.counter += 1 \n"
"            if (this.counter &gt; 1)\n"
"                this._doOperation();\n"
"            this.entry.set_text('0');\n"
"            this.operation = \"plus\";\n"
"        }\n"
"\n"
"        else if (this.button.get_label() == '-') {\n"
"            this.counter += 1;\n"
"            if (this.counter &gt; 1)\n"
"                this._doOperation();\n"
"            this.entry.set_text('0');\n"
"            this.operation = \"minus\";\n"
"        }\n"
"\n"
"        else if (this.button.get_label() == '*') {\n"
"            this.counter += 1; \n"
"            if (this.counter &gt; 1)\n"
"                this._doOperation();\n"
"            this.entry.set_text('0');\n"
"            this.operation = \"multiplication\";\n"
"        }\n"
"\n"
"        else if (this.button.get_label() == '/') {\n"
"            this.counter += 1 \n"
"            if (this.counter &gt; 1)\n"
"                this._doOperation();\n"
"            this.entry.set_text('0');\n"
"            this.operation = \"division\";\n"
"        }\n"
"\n"
"        // Για =\n"
"        else if (this.button.get_label() == '=') {\n"
"            this._doOperation();\n"
"            this.entry.set_text(this.firstNumber.toString());\n"
"            this.counter = 1;\n"
"        }\n"
"\n"
"        // για ακύρωση\n"
"        else if (this.button.get_label() == 'C') {\n"
"            this.firstNumber = 0;\n"
"            this.secondNumber = 0;\n"
"            this.counter = 0;\n"
"            this.entry.set_text('0');\n"
"            this.operation = \"\";\n"
"        }\n"
"\n"
"        // Για ένα ψηφιακό κουμπί\n"
"        else {\n"
"            this.newDigit = parseInt(this.button.get_label());\n"
"            if (this.entry.get_text() == \"error\")\n"
"                this.number = 0;\n"
"            else\n"
"                this.number = parseInt(this.entry.get_text());\n"
"            this.number = this.number * 10 + this.newDigit;            \n"
"            if (this.counter == 0)\n"
"                this.firstNumber = this.number;\n"
"            else\n"
"                this.secondNumber = this.number;\n"
"            this.entry.set_text(this.number.toString());\n"
"        }\n"
"     },\n"
"\n"
"     _doOperation: function() {\n"
"        if (this.operation == \"plus\") {\n"
"           this.firstNumber += this.secondNumber;\n"
"        } else if (this.operation == \"minus\") {\n"
"            this.firstNumber -= this.secondNumber;\n"
"        } else if (this.operation == \"multiplication\") {\n"
"            this.firstNumber *= this.secondNumber;\n"
"        } else if (this.operation == \"division\") {\n"
"            if (this.secondNumber != 0) {\n"
"                this.firstNumber /= this.secondNumber;\n"
"            } else {\n"
"                this.firstNumber = 0; \n"
"                this.secondNumber = 0;\n"
"                this.counter = 0; \n"
"                this.entry.set_text(\"error\");\n"
"                this.operation = \"\";\n"
"\n"
"                return\n"
"            }\n"
"        } else {\n"
"            this.firstNumber = 0;\n"
"            this.secondNumber = 0;\n"
"            this.counter = 0;\n"
"            this.entry.set_text(\"error\");\n"
"        }\n"
"    }\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new ButtonBoxExample();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/buttonbox.js.page:38
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.ButtonBox.html"
"\">GtkButtonBox</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.ButtonBox.html"
"\">GtkButtonBox</link>"

#. (itstool) path: item/p
#: C/buttonbox.js.page:39
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Box.html"
"\">GtkBox</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Box.html"
"\">GtkBox</link>"

#. (itstool) path: item/p
#: C/buttonbox.js.page:40
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Button.html"
"\">GtkButton</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Button.html"
"\">GtkButton</link>"

#. (itstool) path: item/p
#: C/buttonbox.js.page:41
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Entry.html"
"\">GtkEntry</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Entry.html"
"\">GtkEntry</link>"

#. (itstool) path: item/p
#: C/buttonbox.js.page:42
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Grid.html"
"\">GtkGrid</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Grid.html"
"\">GtkGrid</link>"

#. (itstool) path: info/title
#: C/buttonbox.py.page:8
msgctxt "text"
msgid "ButtonBox (Python)"
msgstr "ButtonBox (Python)"

#. (itstool) path: section/code
#: C/buttonbox.py.page:32
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Calculator\", application=app)\n"
"        self.set_default_size(350, 200)\n"
"        self.set_border_width(10)\n"
"\n"
"        # an entry\n"
"        self.entry = Gtk.Entry()\n"
"        # with an initial text\n"
"        self.entry.set_text('0')\n"
"        # text aligned on the right\n"
"        self.entry.set_alignment(1)\n"
"        # the text in the entry cannot be modified writing in it\n"
"        self.entry.set_can_focus(False)\n"
"\n"
"        # a grid\n"
"        grid = Gtk.Grid()\n"
"        grid.set_row_spacing(5)\n"
"\n"
"        # to attach the entry\n"
"        grid.attach(self.entry, 0, 0, 1, 1)\n"
"\n"
"        # the labels for the buttons\n"
"        buttons = [7, 8, 9, '/',\n"
"                   4, 5, 6, '*',\n"
"                   1, 2, 3, '-',\n"
"                   'C', 0, '=', '+']\n"
"\n"
"        # each row is a ButtonBox, attached to the grid\n"
"        for i in range(4):\n"
"            hbox = Gtk.ButtonBox.new(Gtk.Orientation.HORIZONTAL)\n"
"            hbox.set_spacing(5)\n"
"            grid.attach(hbox, 0, i + 1, 1, 1)\n"
"            # each ButtonBox has 4 buttons, connected to the callback function\n"
"            for j in range(4):\n"
"                button = Gtk.Button(label=buttons[i * 4 + j])\n"
"                button.set_can_focus(False)\n"
"                button.connect(\"clicked\", self.button_clicked)\n"
"                hbox.add(button)\n"
"\n"
"        # some variables for the calculations\n"
"        self.first_number = 0\n"
"        self.second_number = 0\n"
"        self.counter = 0\n"
"        self.operation = \"\"\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # callback function for all the buttons\n"
"    def button_clicked(self, button):\n"
"        # for the operations\n"
"        if button.get_label() == '+':\n"
"            self.counter += 1\n"
"            if self.counter &gt; 1:\n"
"                self.do_operation()\n"
"            self.entry.set_text('0')\n"
"            self.operation = \"plus\"\n"
"        elif button.get_label() == '-':\n"
"            self.counter += 1\n"
"            if self.counter &gt; 1:\n"
"                self.do_operation()\n"
"            self.entry.set_text('0')\n"
"            self.operation = \"minus\"\n"
"        elif button.get_label() == '*':\n"
"            self.counter += 1\n"
"            if self.counter &gt; 1:\n"
"                self.do_operation()\n"
"            self.entry.set_text('0')\n"
"            self.operation = \"multiplication\"\n"
"        elif button.get_label() == '/':\n"
"            self.counter += 1\n"
"            if self.counter &gt; 1:\n"
"                self.do_operation()\n"
"            self.entry.set_text('0')\n"
"            self.operation = \"division\"\n"
"        # for =\n"
"        elif button.get_label() == '=':\n"
"            self.do_operation()\n"
"            self.entry.set_text(str(self.first_number))\n"
"            self.counter = 1\n"
"        # for Cancel\n"
"        elif button.get_label() == 'C':\n"
"            self.first_number = 0\n"
"            self.second_number = 0\n"
"            self.counter = 0\n"
"            self.entry.set_text('')\n"
"            self.operation = \"\"\n"
"        # for a digit button\n"
"        else:\n"
"            new_digit = int(button.get_label())\n"
"            if self.entry.get_text() == 'error':\n"
"                number = 0\n"
"            else:\n"
"                number = int(self.entry.get_text())\n"
"            number = number * 10 + new_digit\n"
"            if self.counter == 0:\n"
"                self.first_number = number\n"
"            else:\n"
"                self.second_number = number\n"
"            self.entry.set_text(str(number))\n"
"\n"
"    def do_operation(self):\n"
"        if self.operation == \"plus\":\n"
"            self.first_number += self.second_number\n"
"        elif self.operation == \"minus\":\n"
"            self.first_number -= self.second_number\n"
"        elif self.operation == \"multiplication\":\n"
"            self.first_number *= self.second_number\n"
"        elif self.operation == \"division\":\n"
"            try:\n"
"                self.first_number /= self.second_number\n"
"            except ZeroDivisionError:\n"
"                self.first_number = 0\n"
"                self.second_number = 0\n"
"                self.counter = 0\n"
"                self.entry.set_text('error')\n"
"                self.operation = \"\"\n"
"                return\n"
"        else:\n"
"            self.first_number = 0\n"
"            self.second_number = 0\n"
"            self.counter = 0\n"
"            self.entry.set_text('error')\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Calculator\", application=app)\n"
"        self.set_default_size(350, 200)\n"
"        self.set_border_width(10)\n"
"\n"
"        # an entry\n"
"        self.entry = Gtk.Entry()\n"
"        # with an initial text\n"
"        self.entry.set_text('0')\n"
"        # text aligned on the right\n"
"        self.entry.set_alignment(1)\n"
"        # the text in the entry cannot be modified writing in it\n"
"        self.entry.set_can_focus(False)\n"
"\n"
"        # a grid\n"
"        grid = Gtk.Grid()\n"
"        grid.set_row_spacing(5)\n"
"\n"
"        # to attach the entry\n"
"        grid.attach(self.entry, 0, 0, 1, 1)\n"
"\n"
"        # the labels for the buttons\n"
"        buttons = [7, 8, 9, '/',\n"
"                   4, 5, 6, '*',\n"
"                   1, 2, 3, '-',\n"
"                   'C', 0, '=', '+']\n"
"\n"
"        # each row is a ButtonBox, attached to the grid\n"
"        for i in range(4):\n"
"            hbox = Gtk.ButtonBox.new(Gtk.Orientation.HORIZONTAL)\n"
"            hbox.set_spacing(5)\n"
"            grid.attach(hbox, 0, i + 1, 1, 1)\n"
"            # each ButtonBox has 4 buttons, connected to the callback function\n"
"            for j in range(4):\n"
"                button = Gtk.Button(label=buttons[i * 4 + j])\n"
"                button.set_can_focus(False)\n"
"                button.connect(\"clicked\", self.button_clicked)\n"
"                hbox.add(button)\n"
"\n"
"        # some variables for the calculations\n"
"        self.first_number = 0\n"
"        self.second_number = 0\n"
"        self.counter = 0\n"
"        self.operation = \"\"\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # callback function for all the buttons\n"
"    def button_clicked(self, button):\n"
"        # for the operations\n"
"        if button.get_label() == '+':\n"
"            self.counter += 1\n"
"            if self.counter &gt; 1:\n"
"                self.do_operation()\n"
"            self.entry.set_text('0')\n"
"            self.operation = \"plus\"\n"
"        elif button.get_label() == '-':\n"
"            self.counter += 1\n"
"            if self.counter &gt; 1:\n"
"                self.do_operation()\n"
"            self.entry.set_text('0')\n"
"            self.operation = \"minus\"\n"
"        elif button.get_label() == '*':\n"
"            self.counter += 1\n"
"            if self.counter &gt; 1:\n"
"                self.do_operation()\n"
"            self.entry.set_text('0')\n"
"            self.operation = \"multiplication\"\n"
"        elif button.get_label() == '/':\n"
"            self.counter += 1\n"
"            if self.counter &gt; 1:\n"
"                self.do_operation()\n"
"            self.entry.set_text('0')\n"
"            self.operation = \"division\"\n"
"        # for =\n"
"        elif button.get_label() == '=':\n"
"            self.do_operation()\n"
"            self.entry.set_text(str(self.first_number))\n"
"            self.counter = 1\n"
"        # for Cancel\n"
"        elif button.get_label() == 'C':\n"
"            self.first_number = 0\n"
"            self.second_number = 0\n"
"            self.counter = 0\n"
"            self.entry.set_text('')\n"
"            self.operation = \"\"\n"
"        # for a digit button\n"
"        else:\n"
"            new_digit = int(button.get_label())\n"
"            if self.entry.get_text() == 'error':\n"
"                number = 0\n"
"            else:\n"
"                number = int(self.entry.get_text())\n"
"            number = number * 10 + new_digit\n"
"            if self.counter == 0:\n"
"                self.first_number = number\n"
"            else:\n"
"                self.second_number = number\n"
"            self.entry.set_text(str(number))\n"
"\n"
"    def do_operation(self):\n"
"        if self.operation == \"plus\":\n"
"            self.first_number += self.second_number\n"
"        elif self.operation == \"minus\":\n"
"            self.first_number -= self.second_number\n"
"        elif self.operation == \"multiplication\":\n"
"            self.first_number *= self.second_number\n"
"        elif self.operation == \"division\":\n"
"            try:\n"
"                self.first_number /= self.second_number\n"
"            except ZeroDivisionError:\n"
"                self.first_number = 0\n"
"                self.second_number = 0\n"
"                self.counter = 0\n"
"                self.entry.set_text('error')\n"
"                self.operation = \"\"\n"
"                return\n"
"        else:\n"
"            self.first_number = 0\n"
"            self.second_number = 0\n"
"            self.counter = 0\n"
"            self.entry.set_text('error')\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/buttonbox.py.page:36
msgid "Uselful methods for a ButtonBox widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο ButtonBox"

#. (itstool) path: item/p
#: C/buttonbox.py.page:38
msgid ""
"The layout of the ButtonBox are set with <code>set_layout(layout)</code>, "
"where <code>layout</code> can be <code>Gtk.ButtonBoxStyle.SPREAD</code> "
"(buttons are evenly spread across the box), <code>Gtk.ButtonBoxStyle.EDGE</"
"code> (buttons are placed at the edges of the box), <code>Gtk.ButtonBoxStyle."
"START</code> (buttons are grouped towards the start of the box), <code>Gtk."
"ButtonBoxStyle.END</code> (buttons are grouped towards the end of the box), "
"<code>Gtk.ButtonBoxStyle.CENTER</code> (buttons are centered in the box)."
msgstr ""
"Η διάταξη του ButtonBox ορίζεται με <code>set_layout(layout)</code>, όπου "
"<code>layout</code> μπορεί να είναι <code>Gtk.ButtonBoxStyle.SPREAD</code> "
"(τα κουμπιά διασπείρονται εξίσου κατά μήκος του πλαισίου), <code>Gtk."
"ButtonBoxStyle.EDGE</code> (τα κουμπιά τοποθετούνται στις άκρες του "
"πλαισίου), <code>Gtk.ButtonBoxStyle.START</code> (τα κουμπιά ομαδοποιούνται "
"προς την αρχή του πλαισίου), <code>Gtk.ButtonBoxStyle.END</code> (τα κουμπιά "
"ομαδοποιούνται προς το τέλος του πλαισίου), <code>Gtk.ButtonBoxStyle.CENTER</"
"code> (τα κουμπιά κεντράρονται στο πλαίσιο)."

#. (itstool) path: item/p
#: C/buttonbox.py.page:39
msgid ""
"<code>set_child_secondary(button, is_secondary)</code> sets whether "
"<code>button</code> should appear in a secondary group of children. A "
"typical use of a secondary child is the help button in a dialog. This group "
"appears after the other children if the style is <code>START</code>, "
"<code>SPREAD</code> or <code>EDGE</code>, and before the other children if "
"the style is <code>END</code>. If the style is <code>START</code> or "
"<code>END</code>, then the secondary children are aligned at the other end "
"of the button box from the main children. For the other styles, they appear "
"immediately next to the main children."
msgstr ""
"Ο <code>set_child_secondary(button, is_secondary)</code> ορίζει εάν το "
"<code>button</code> πρέπει να εμφανιστεί σε μια δευτερεύουσα ομάδα "
"θυγατρικών. Μια τυπική χρήση ενός δευτερεύοντος θυγατρικού είναι το "
"βοηθητικό κουμπί σε ένα διάλογο. Αυτή η ομάδα εμφανίζεται μετά τα άλλα "
"θυγατρικά εάν ο τύπος είναι <code>START</code>, <code>SPREAD</code> ή "
"<code>EDGE</code> και πριν τα άλλα θυγατρικά εάν ο τύπος είναι <code>END</"
"code>. Εάν ο τύπος είναι <code>START</code> ή <code>END</code>, τότε τα "
"δευτερεύοντα θυγατρικά στοιχίζονται στην άλλη άκρη του πλαισίου κουμπιού από "
"τα κύρια θυγατρικά. Για τους άλλους τύπους, εμφανίζονται αμέσως δίπλα στα "
"κύρια θυγατρικά."

#. (itstool) path: item/p
#: C/buttonbox.py.page:40
msgid ""
"<code>set_child_non_homogeneous(button, is_non_homogeneous)</code> sets "
"whether the child is exempted from homogeous sizing. Default value is "
"<code>False</code>."
msgstr ""
"Ο <code>set_child_non_homogeneous(button, is_non_homogeneous)</code> ορίζει "
"εάν το θυγατρικό εξαιρείται από το ομογενές μέγεθος. Προεπιλεγμένη τιμή "
"είναι <code>False</code>."

#. (itstool) path: item/p
#: C/buttonbox.py.page:41
msgid ""
"<code>set_spacing(spacing)</code> sets the spacing, in pixels, between the "
"buttons of the box."
msgstr ""
"<code>set_spacing(spacing)</code> ορίζει το διάκενο, σε εικονοστοιχεία, "
"μεταξύ των κουμπιών του πλαισίου."

#. (itstool) path: item/p
#: C/buttonbox.py.page:49
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkButtonBox.html"
"\">GtkButtonBox</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkButtonBox.html"
"\">GtkButtonBox</link>"

#. (itstool) path: item/p
#: C/buttonbox.py.page:50
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkBox.html\">GtkBox</"
"link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkBox.html\">GtkBox</"
"link>"

#. (itstool) path: item/p
#: C/buttonbox.py.page:52 C/entry.c.page:34
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkEntry.html"
"\">GtkEntry</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkEntry.html"
"\">GtkEntry</link>"

#. (itstool) path: item/p
#: C/buttonbox.py.page:53 C/grid.c.page:36 C/radiobutton.c.page:37
#: C/spinbutton.c.page:40 C/statusbar.c.page:40 C/switch.c.page:37
#: C/togglebutton.c.page:40
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkGrid.html\">GtkGrid</"
"link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkGrid.html\">GtkGrid</"
"link>"

#. (itstool) path: info/title
#: C/c.page:7
msgctxt "link"
msgid "C"
msgstr "C"

#. (itstool) path: page/title
#: C/c.page:16
msgid "Tutorials, code samples and plaform demos in C"
msgstr "Μαθήματα, δείγματα κώδικα και παραδείγματα πλατφόρμας σε C"

#. (itstool) path: section/title
#: C/c.page:21 C/vala.page:26
msgid "Code samples and tutorial"
msgstr "Δείγματα κώδικα και μάθημα"

#. (itstool) path: section/title
#: C/c.page:28 C/cpp.page:21 C/js.page:36 C/py.page:39 C/vala.page:30
msgid "Examples of applications"
msgstr "Παραδείγματα εφαρμογών"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/checkbutton.c.page:22 C/checkbutton.js.page:22 C/checkbutton.py.page:23
#: C/checkbutton.vala.page:22
msgctxt "_"
msgid ""
"external ref='media/checkbutton.png' md5='7921a6812c87dd2b3781f4fad241e858'"
msgstr ""
"external ref='media/checkbutton.png' md5='7921a6812c87dd2b3781f4fad241e858'"

#. (itstool) path: info/title
#: C/checkbutton.c.page:8
msgctxt "text"
msgid "CheckButton (C)"
msgstr "CheckButton (C)"

#. (itstool) path: info/desc
#: C/checkbutton.c.page:18
msgid "Create widgets with a discrete ToggleButton"
msgstr "Δημιουργία γραφικών στοιχείων με ένα διακριτό ToggleButton"

#. (itstool) path: page/title
#: C/checkbutton.c.page:21 C/checkbutton.js.page:21 C/checkbutton.py.page:22
#: C/checkbutton.vala.page:21
msgid "CheckButton"
msgstr "CheckButton"

#. (itstool) path: page/p
#: C/checkbutton.c.page:23 C/checkbutton.py.page:24 C/checkbutton.vala.page:23
msgid "This CheckButton toggles the title."
msgstr "Αυτό το CheckButton εναλλάσσει τον τίτλο."

#. (itstool) path: page/code
#: C/checkbutton.c.page:25
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"/* signal handler for \"toggled\" signal of the CheckButton */\n"
"static void\n"
"toggled_cb (GtkToggleButton *toggle_button,\n"
"            gpointer         user_data)\n"
"{\n"
"  GtkWindow *window = user_data;\n"
"\n"
"  if (gtk_toggle_button_get_active (toggle_button))\n"
"      gtk_window_set_title (window, \"CheckButton Example\");\n"
"  else\n"
"      gtk_window_set_title (window, \"\");\n"
"}\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *checkbutton;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"CheckButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 100);\n"
"\n"
"  checkbutton = gtk_check_button_new_with_label (\"Show Title\");\n"
"  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (checkbutton), TRUE);\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (checkbutton), \"toggled\", G_CALLBACK (toggled_cb), window);\n"
"  gtk_container_add (GTK_CONTAINER (window), checkbutton);\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.example.checkbutton\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"#περιλαμβάνει &lt;gtk/gtk.h&gt;\n"
"\n"
"/* ο χειριστής σήματος για το σήμα \"toggled\" του CheckButton */\n"
"static void\n"
"toggled_cb (GtkToggleButton *toggle_button,\n"
"            gpointer         user_data)\n"
"{\n"
"  GtkWindow *window = user_data;\n"
"\n"
"  if (gtk_toggle_button_get_active (toggle_button))\n"
"      gtk_window_set_title (window, \"CheckButton Example\");\n"
"  else\n"
"      gtk_window_set_title (window, \"\");\n"
"}\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *checkbutton;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"CheckButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 100);\n"
"\n"
"  checkbutton = gtk_check_button_new_with_label (\"Show Title\");\n"
"  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (checkbutton), TRUE);\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (checkbutton), \"toggled\", G_CALLBACK (toggled_cb), window);\n"
"  gtk_container_add (GTK_CONTAINER (window), checkbutton);\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.example.checkbutton\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/checkbutton.c.page:30
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/3.2/GtkCheckButton.html"
"\">GtkCheckButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/3.2/GtkCheckButton.html"
"\">GtkCheckButton</link>"

#. (itstool) path: info/title
#: C/checkbutton.js.page:8
msgctxt "text"
msgid "CheckButton (JavaScript)"
msgstr "CheckButton (JavaScript)"

#. (itstool) path: info/desc
#: C/checkbutton.js.page:18
msgid "A box which can be checked or unchecked"
msgstr "Ένα κουμπί που μπορεί να σημειωθεί ή να αποσημειωθεί"

#. (itstool) path: page/p
#: C/checkbutton.js.page:23
msgid ""
"This application has a CheckButton. Whether the box is checked dictates "
"whether the window's title bar shows anything."
msgstr ""
"Αυτή η εφαρμογή έχει ένα CheckButton. Εάν το πλαίσιο είναι σημειωμένο "
"υπαγορεύει εάν η γραμμή τίτλου του παραθύρου εμφανίζει οτιδήποτε."

#. (itstool) path: page/p
#: C/checkbutton.js.page:24
msgid ""
"A CheckButton sends the \"toggled\" signal when it's checked or unchecked. "
"While it's checked, the \"active\" property is true. While it's not, \"active"
"\" tests as false."
msgstr ""
"Ένα CheckButton στέλνει το σήμα \"εναλλαγής\" όταν σημειώνεται ή "
"αποσημειώνεται. Ενώ είναι σημειωμένο, η ιδιότητα \"ενεργή\" είναι αληθής. "
"Ενώ εάν δεν είναι, το \"ενεργή\" ελέγχεται ως ψευδής."

#. (itstool) path: section/title
#: C/checkbutton.js.page:28 C/comboboxtext.js.page:30 C/combobox.js.page:33
#: C/guitar-tuner.js.page:55 C/hello-world.c.page:44 C/hello-world.js.page:53
#: C/hello-world.py.page:46 C/messagedialog.js.page:31
#: C/radiobutton.js.page:28 C/scale.js.page:28 C/spinbutton.js.page:31
#: C/statusbar.js.page:28 C/switch.js.page:35 C/textview.js.page:38
#: C/togglebutton.js.page:28 C/treeview_simple_liststore.js.page:37
#: C/weatherAppMain.js.page:41
msgid "Libraries to import"
msgstr "Βιβλιοθήκες για εισαγωγή"

#. (itstool) path: section/code
#: C/checkbutton.js.page:29 C/messagedialog.js.page:32
#: C/radiobutton.js.page:29 C/scale.js.page:29 C/spinbutton.js.page:32
#: C/statusbar.js.page:29 C/switch.js.page:36 C/togglebutton.js.page:29
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
msgstr ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"

#. (itstool) path: section/p
#: C/checkbutton.js.page:36 C/comboboxtext.js.page:37 C/combobox.js.page:41
#: C/messagedialog.js.page:39 C/radiobutton.js.page:36 C/scale.js.page:36
#: C/spinbutton.js.page:39 C/statusbar.js.page:36 C/switch.js.page:43
#: C/textview.js.page:45 C/togglebutton.js.page:36
#: C/treeview_simple_liststore.js.page:46
msgid ""
"These are the libraries we need to import for this application to run. "
"Remember that the line which tells GNOME that we're using Gjs always needs "
"to go at the start."
msgstr ""
"Αυτές είναι οι βιβλιοθήκες που χρειαζόμαστε να εισάγουμε αυτήν την εφαρμογή "
"για να εκτελεστεί. Να θυμόσαστε ότι η γραμμή που λέει στο GNOME ότι "
"χρησιμοποιούμε Gjs χρειάζεται πάντοτε να πάει στην αρχή."

#. (itstool) path: section/title
#: C/checkbutton.js.page:40 C/comboboxtext.js.page:41 C/combobox.js.page:45
#: C/messagedialog.js.page:43 C/radiobutton.js.page:40 C/scale.js.page:40
#: C/spinbutton.js.page:43 C/statusbar.js.page:40 C/switch.js.page:47
#: C/textview.js.page:49 C/togglebutton.js.page:40
#: C/treeview_simple_liststore.js.page:50
msgid "Creating the application window"
msgstr "Δημιουργία του παραθύρου εφαρμογής"

#. (itstool) path: section/code
#: C/checkbutton.js.page:41
#, no-wrap
msgid ""
"\n"
"const CheckButtonExample = new Lang.Class({\n"
"    Name: 'CheckButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jscheckbutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const CheckButtonExample = new Lang.Class({\n"
"    Name: 'CheckButton Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jscheckbutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Σύνδεση σημάτων'activate' και 'startup' στις συναρτήσειs επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/checkbutton.js.page:67
msgid ""
"All the code for this sample goes in the CheckButtonExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.Application.html\">Gtk.Application</link> for our widgets and window to "
"go in."
msgstr ""
"Όλος ο κώδικας για αυτό το παράδειγμα πηγαίνει στην κλάση "
"CheckButtonExample. Ο παραπάνω κώδικας δημιουργεί μια <link href=\"http://"
"www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Application.html\">Gtk."
"Application</link> για να μπουν μέσα τα γραφικά στοιχεία μας και τα "
"παράθυρα."

#. (itstool) path: section/code
#: C/checkbutton.js.page:68
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 100,\n"
"            default_width: 300,\n"
"            border_width: 10,\n"
"            title: \"CheckButton Example\"});\n"
msgstr ""
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 100,\n"
"            default_width: 300,\n"
"            border_width: 10,\n"
"            title: \"CheckButton Example\"});\n"

#. (itstool) path: section/p
#: C/checkbutton.js.page:81
msgid ""
"The _buildUI function is where we put all the code to create the "
"application's user interface. The first step is creating a new <link href="
"\"GtkApplicationWindow.js.page\">Gtk.ApplicationWindow</link> to put all our "
"widgets into."
msgstr ""
"Η συνάρτηση _buildUI είναι εκεί που βάζουμε όλον τον κώδικα για να "
"δημιουργήσουμε τη διεπαφή χρήστη της εφαρμογής. Το πρώτο βήμα δημιουργεί ένα "
"νέο <link href=\"GtkApplicationWindow.js.page\">Gtk.ApplicationWindow</link> "
"για να βάλουμε μέσα τα γραφικά στοιχεία μας."

#. (itstool) path: section/title
#: C/checkbutton.js.page:85
msgid "Creating the checkbutton"
msgstr "Δημιουργία του πλήκτρου ελέγχου"

#. (itstool) path: section/code
#: C/checkbutton.js.page:86
#, no-wrap
msgid ""
"\n"
"        // Create the check button\n"
"        this._button = new Gtk.CheckButton ({label: \"Show Title\"});\n"
"        this._window.add (this._button);\n"
"\n"
"        // Have the check button be checked by default\n"
"        this._button.set_active (true);\n"
"\n"
"        // Connect the button to a function that does something when it's toggled\n"
"        this._button.connect (\"toggled\", Lang.bind (this, this._toggledCB));\n"
msgstr ""
"\n"
"        // Δημιουργία του κουμπιού ελέγχου\n"
"        this._button = new Gtk.CheckButton ({label: \"Show Title\"});\n"
"        this._window.add (this._button);\n"
"\n"
"        // Να ελέγχεται το κουμπί ελέγχου από προεπιλογή\n"
"        this._button.set_active (true);\n"
"\n"
"        // Σύνδεση του κουμπιού σε μια συνάρτηση που κάνει κάτι όταν εναλλάσσεται\n"
"        this._button.connect (\"toggled\", Lang.bind (this, this._toggledCB));\n"

#. (itstool) path: section/p
#: C/checkbutton.js.page:97
msgid ""
"This code creates the checkbutton itself. The label next to the checkbutton "
"is created by giving the checkbutton the \"label\" property and assigning a "
"string value to it. Since this checkbutton toggles whether the window title "
"is on or off, and the window title will be on to start with, we want the box "
"to be checked by default. Whenever the user checks or unchecks the box, we "
"call the _toggledCB function."
msgstr ""
"Αυτός ο κώδικας δημιουργεί το ίδιο το πλήκτρο ελέγχου. Η ετικέτα δίπλα στο "
"πλήκτρο ελέγχου δημιουργείται δίνοντας στο πλήκτρο ελέγχου την ιδιότητα "
"\"label\" και αποδίδοντας την τιμή μιας συμβολοσειράς σε αυτή. Επειδή αυτό "
"το πλήκτρο ελέγχου εναλλάσσεται εάν ο τίτλος παραθύρου είναι ενεργός ή όχι "
"και ο τίτλος παραθύρου θα είναι ενεργός στην εκκίνηση, θέλουμε το πλαίσιο να "
"σημειωθεί από προεπιλογή. Όταν ο χρήστης σημειώνει ή ξεσημειώνει το πλαίσιο, "
"καλούμε τη συνάρτηση _toggledCB."

#. (itstool) path: section/code
#: C/checkbutton.js.page:98 C/radiobutton.js.page:170
#, no-wrap
msgid ""
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"

#. (itstool) path: section/p
#: C/checkbutton.js.page:103
msgid ""
"This code finishes up creating the UI, by telling the window to show itself "
"and all child widgets (which is just the checkbutton in this case)."
msgstr ""
"Αυτός ο κώδικας τελειώνει δημιουργώντας τη γραφική διεπαφή, λέγοντας στο "
"παράθυρο να εμφανίσει τον εαυτό του και όλα τα θυγατρικά γραφικά στοιχεία "
"(που είναι μόνο το πλήκτρο ελέγχου σε αυτήν την περίπτωση)."

#. (itstool) path: section/title
#: C/checkbutton.js.page:107
msgid "Function which handles the checkbutton's toggling"
msgstr "Η συνάρτηση που χειρίζεται την εναλλαγή του πλαισίου ελέγχου"

#. (itstool) path: section/code
#: C/checkbutton.js.page:108
#, no-wrap
msgid ""
"\n"
"    _toggledCB: function () {\n"
"\n"
"        // Make the window title appear or disappear when the checkbox is toggled\n"
"        if (this._button.get_active() == true)\n"
"            this._window.set_title (\"CheckButton Example\");\n"
"        else\n"
"            this._window.set_title (\"\");\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _toggledCB: function () {\n"
"\n"
"        // Εμφάνιση του τίτλου του παραθύρου ή εξαφάνιση όταν το πλαίσιο ελέγχου εναλλάσσεται \n"
"        if (this._button.get_active() == true)\n"
"            this._window.set_title (\"CheckButton Example\");\n"
"        else\n"
"            this._window.set_title (\"\");\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/checkbutton.js.page:121
msgid ""
"If the checkbutton is toggled from on to off, we want the window title to "
"disappear. If it's toggled from off to on, we want it to reappear. We can "
"tell which way it was toggled by testing to see whether it's active "
"(checked) or not afterwards. A simple if / else statement which calls the "
"checkbutton's get_active() method will work for this."
msgstr ""
"Εάν το πλήκτρο ελέγχου εναλλάσσεται από ενεργό σε ανενεργό, θέλουμε ο τίτλος "
"του παραθύρου να εξαφανιστεί. Εάν εναλλάσσεται από ανενεργό σε ενεργό, το "
"θέλουμε να επανεμφανίζεται. Μπορούμε να πούμε με ποιο τρόπο εναλλάχτηκε "
"δοκιμάζοντας να δούμε εάν είναι ενεργό (σημειωμένο) ή όχι κατόπιν. Μια απλή "
"πρόταση if / else που καλεί τη μέθοδο get_active() του πλήκτρου ελέγχου θα "
"δουλέψει για αυτό."

#. (itstool) path: section/code
#: C/checkbutton.js.page:122
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new CheckButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new CheckButtonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/checkbutton.js.page:127
msgid ""
"Finally, we create a new instance of the finished CheckButtonExample class, "
"and set the application running."
msgstr ""
"Τελικά, δημιουργούμε ένα νέο παράδειγμα της τελειωμένης κλάσης "
"CheckButtonExample και εκτελούμε την εφαρμογή."

#. (itstool) path: section/code
#: C/checkbutton.js.page:132
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const CheckButtonExample = new Lang.Class({\n"
"    Name: 'CheckButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jscheckbutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 100,\n"
"            default_width: 300,\n"
"            border_width: 10,\n"
"            title: \"CheckButton Example\"});\n"
"\n"
"        // Create the check button\n"
"        this._button = new Gtk.CheckButton ({label: \"Show Title\"});\n"
"        this._window.add (this._button);\n"
"\n"
"        // Have the check button be checked by default\n"
"        this._button.set_active (true);\n"
"\n"
"        // Connect the button to a function that does something when it's toggled\n"
"        this._button.connect (\"toggled\", Lang.bind (this, this._toggledCB));\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _toggledCB: function () {\n"
"\n"
"        // Make the window title appear or disappear when the checkbox is toggled\n"
"        if (this._button.get_active() == true)\n"
"            this._window.set_title (\"CheckButton Example\");\n"
"        else\n"
"            this._window.set_title (\"\");\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new CheckButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const CheckButtonExample = new Lang.Class({\n"
"    Name: 'CheckButton Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jscheckbutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Σύνδεση των σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 100,\n"
"            default_width: 300,\n"
"            border_width: 10,\n"
"            title: \"CheckButton Example\"});\n"
"\n"
"        // Δημιουργία του κουμπιού ελέγχου\n"
"        this._button = new Gtk.CheckButton ({label: \"Show Title\"});\n"
"        this._window.add (this._button);\n"
"\n"
"        // Να ελέγχεται το κουμπί ελέγχου από προεπιλογή\n"
"        this._button.set_active (true);\n"
"\n"
"        // Σύνδεση του κουμπιού με μια συνάρτηση που κάνει κάτι όταν εναλλάσσεται\n"
"        this._button.connect (\"toggled\", Lang.bind (this, this._toggledCB));\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _toggledCB: function () {\n"
"\n"
"        // Εμφάνιση ή εξαφάνιση του τίτλου του παραθύρου όταν το πλαίσιο ελέγχου εναλλάσσεται\n"
"        if (this._button.get_active() == true)\n"
"            this._window.set_title (\"CheckButton Example\");\n"
"        else\n"
"            this._window.set_title (\"\");\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new CheckButtonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/title
#: C/checkbutton.js.page:136 C/comboboxtext.js.page:176 C/combobox.js.page:233
#: C/messagedialog.js.page:189 C/radiobutton.js.page:274 C/scale.js.page:208
#: C/spinbutton.js.page:199 C/statusbar.js.page:221 C/switch.js.page:264
#: C/textview.js.page:248 C/togglebutton.js.page:153
#: C/treeview_simple_liststore.js.page:272
msgid "In-depth documentation"
msgstr "Τεκμηρίωση σε βάθος"

#. (itstool) path: item/p
#: C/checkbutton.js.page:140
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.CheckButton."
"html\">Gtk.CheckButton</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.CheckButton."
"html\">Gtk.CheckButton</link>"

#. (itstool) path: info/title
#: C/checkbutton.py.page:8
msgctxt "text"
msgid "CheckButton (Python)"
msgstr "CheckButton (Python)"

#. (itstool) path: info/desc
#: C/checkbutton.py.page:19
msgid "A toggle button in a window"
msgstr "Ένα κουμπί εναλλαγής σε παράθυρο"

#. (itstool) path: section/code
#: C/checkbutton.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"CheckButton Example\", application=app)\n"
"        self.set_default_size(300, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a new checkbutton\n"
"        button = Gtk.CheckButton()\n"
"        #  with a label\n"
"        button.set_label(\"Show Title\")\n"
"        # connect the signal \"toggled\" emitted by the checkbutton\n"
"        # with the callback function toggled_cb\n"
"        button.connect(\"toggled\", self.toggled_cb)\n"
"        # by default, the checkbutton is active\n"
"        button.set_active(True)\n"
"\n"
"        # add the checkbutton to the window\n"
"        self.add(button)\n"
"\n"
"    # callback function\n"
"    def toggled_cb(self, button):\n"
"        # if the togglebutton is active, set the title of the window\n"
"        # as \"Checkbutton Example\"\n"
"        if button.get_active():\n"
"            self.set_title(\"CheckButton Example\")\n"
"        # else, set it as \"\" (empty string)\n"
"        else:\n"
"            self.set_title(\"\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"CheckButton Example\", application=app)\n"
"        self.set_default_size(300, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a new checkbutton\n"
"        button = Gtk.CheckButton()\n"
"        #  with a label\n"
"        button.set_label(\"Show Title\")\n"
"        # connect the signal \"toggled\" emitted by the checkbutton\n"
"        # with the callback function toggled_cb\n"
"        button.connect(\"toggled\", self.toggled_cb)\n"
"        # by default, the checkbutton is active\n"
"        button.set_active(True)\n"
"\n"
"        # add the checkbutton to the window\n"
"        self.add(button)\n"
"\n"
"    # callback function\n"
"    def toggled_cb(self, button):\n"
"        # if the togglebutton is active, set the title of the window\n"
"        # as \"Checkbutton Example\"\n"
"        if button.get_active():\n"
"            self.set_title(\"CheckButton Example\")\n"
"        # else, set it as \"\" (empty string)\n"
"        else:\n"
"            self.set_title(\"\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/checkbutton.py.page:36
msgid "Useful methods for a CheckButton widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο CheckButton"

#. (itstool) path: section/p
#: C/checkbutton.py.page:37
msgid ""
"In line 17 the <code>\"toggled\"</code> signal is connected to the callback "
"function <code>toggled_cb()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"Στη γραμμή 17 το σήμα <code>\"toggled\"</code> συνδέεται με τη συνάρτηση "
"επανάκλησης <code>toggled_cb()</code> χρησιμοποιώντας <code><var>widget</"
"var>.connect(<var>signal</var>, <var>callback function</var>)</code>. Δείτε "
"<link xref=\"signals-callbacks.py\"/> για μια πιο λεπτομερή εξήγηση."

#. (itstool) path: item/p
#: C/checkbutton.py.page:47 C/togglebutton.py.page:44
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkToggleButton.html"
"\">GtkToggleButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkToggleButton.html"
"\">GtkToggleButton</link>"

#. (itstool) path: item/p
#: C/checkbutton.py.page:48
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCheckButton.html"
"\">GtkCheckButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCheckButton.html"
"\">GtkCheckButton</link>"

#. (itstool) path: info/title
#: C/checkbutton.vala.page:8
msgctxt "text"
msgid "CheckButton (Vala)"
msgstr "CheckButton (Vala)"

#. (itstool) path: info/desc
#: C/checkbutton.vala.page:18
msgid "Create widgets with a disrete toggle button"
msgstr "Δημιουργία γραφικών στοιχείων με ένα διακριτό κουμπί εναλλαγής"

#. (itstool) path: page/code
#: C/checkbutton.vala.page:25
#, no-wrap
msgid ""
"/* A window in the application */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* The constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"CheckButton Example\");\n"
"\n"
"\t\tthis.set_default_size (300, 100);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tvar checkbutton = new Gtk.CheckButton.with_label (\"Show Title\");\n"
"\n"
"\t\t/* Connect the checkbutton to the\n"
"\t\t * callback function (aka. signal handler).\n"
"\t\t */\n"
"\t\tcheckbutton.toggled.connect (this.toggled_cb);\n"
"\n"
"\t\t/* Add the button to the this window */\n"
"\t\tthis.add (checkbutton);\n"
"\n"
"\t\tcheckbutton.set_active (true);\n"
"\t\tcheckbutton.show ();\n"
"\t}\n"
"\n"
"\t/* The signal handler for the 'toggled' signal of the checkbutton. */\n"
"\tvoid toggled_cb (Gtk.ToggleButton checkbutton) {\n"
"\t\tif (checkbutton.get_active())\n"
"\t\t\tthis.set_title (\"CheckButton Example\");\n"
"\t\telse\n"
"\t\t\tthis.set_title (\"\");\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication : Gtk.Application {\n"
"\n"
"\t/* The constructor */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.checkbutton\");\n"
"\t}\n"
"\n"
"\t/* Override the activate signal of GLib.Application */\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"}\n"
"\n"
"/* main creates and runs the application */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* Ένα παράθυρο στην εφαρμογή */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Ο κατασκευστής */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"CheckButton Example\");\n"
"\n"
"\t\tthis.set_default_size (300, 100);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tvar checkbutton = new Gtk.CheckButton.with_label (\"Show Title\");\n"
"\n"
"\t\t/* Σύνδεση του πλήκτρου ελέγχου στη\n"
"\t\t * συνάρτηση επανάκλησης (χειριστής σήματος aka.).\n"
"\t\t */\n"
"\t\tcheckbutton.toggled.connect (this.toggled_cb);\n"
"\n"
"\t\t/* Προσθήκη του πλήκτρου σε αυτό το παράθυρο */\n"
"\t\tthis.add (checkbutton);\n"
"\n"
"\t\tcheckbutton.set_active (true);\n"
"\t\tcheckbutton.show ();\n"
"\t}\n"
"\n"
"\t/* Ο χειριστής σήματος για το σήμα 'toggled' του πλήκτρου ελέγχου. */\n"
"\tvoid toggled_cb (Gtk.ToggleButton checkbutton) {\n"
"\t\tif (checkbutton.get_active())\n"
"\t\t\tthis.set_title (\"CheckButton Example\");\n"
"\t\telse\n"
"\t\t\tthis.set_title (\"\");\n"
"\t}\n"
"}\n"
"\n"
"/* Αυτή είναι η εφαρμογή */\n"
"class MyApplication : Gtk.Application {\n"
"\n"
"\t/* Ο κατασκευαστής */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.checkbutton\");\n"
"\t}\n"
"\n"
"\t/* Αντικατάσταση του ενεργού σήματος του GLib.Application */\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"}\n"
"\n"
"/* Το κύριο δημιουργεί και εκτελεί την εφαρμογή */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/checkbutton.vala.page:30
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CheckButton.html\">Gtk."
"CheckButton</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CheckButton.html\">Gtk."
"CheckButton</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/colorbutton.js.page:22 C/colorbutton.py.page:23
#: C/colorbutton.vala.page:24
msgctxt "_"
msgid ""
"external ref='media/colorbutton.png' md5='904539d26fe367bf99f9a0961cfc9a03'"
msgstr ""
"external ref='media/colorbutton.png' md5='904539d26fe367bf99f9a0961cfc9a03'"

#. (itstool) path: info/title
#: C/colorbutton.js.page:8
msgctxt "text"
msgid "ColorButton (JavaScript)"
msgstr "Κουμπί χρώματος (JavaScript)"

#. (itstool) path: info/desc
#: C/colorbutton.js.page:18 C/colorbutton.py.page:19
#: C/colorbutton.vala.page:20
msgid "A button to launch a color selection dialog"
msgstr "Ένα κουμπί για εκκίνηση του διαλόγου επιλογής χρώματος"

#. (itstool) path: page/title
#: C/colorbutton.js.page:21 C/colorbutton.py.page:22
#: C/colorbutton.vala.page:23
msgid "ColorButton"
msgstr "Πλήκτρο χρώματος (ColorButton)"

#. (itstool) path: page/p
#: C/colorbutton.js.page:23 C/colorbutton.py.page:24
msgid ""
"This ColorButton launches a color selection dialog and prints in the "
"terminal the RGB values of the color selected."
msgstr ""
"Αυτό το ColorButton ξεκινά τον διάλογο επιλογής χρωμάτων και τυπώνει στον "
"τερματικό τις τιμές RGB του επιλεγμένου χρώματος."

#. (itstool) path: section/code
#: C/colorbutton.js.page:29
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gdk = imports.gi.Gdk;\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ColorbuttonExample = new Lang.Class ({\n"
"    Name: 'Colorbutton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({ application_id: 'org.example.jscolorbutton' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this.window = new Gtk.ApplicationWindow ({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"ColorButton\",\n"
"                                                   default_width: 150,\n"
"                                                   default_height: 50,\n"
"                                                   border_width: 10 });\n"
"\n"
"        this.button = new Gtk.ColorButton();\n"
"        this.color = new Gdk.RGBA();\n"
"        this.color.red = 0.0;\n"
"        this.color.green = 0.0;\n"
"        this.color.blue = 1.0;\n"
"        this.color.alpha = 0.5;\n"
"        this.button.set_rgba(this.color);\n"
"        this.button.connect(\"color-set\", Lang.bind(this, this.onColorChosen));\n"
"        this.label = new Gtk.Label();\n"
"        this.label.set_text(\"Click to choose a color\");\n"
"\n"
"        let grid = new Gtk.Grid();\n"
"        grid.attach(this.button, 0, 0, 2, 1);\n"
"        grid.attach(this.label, 0, 1, 2, 1);\n"
"        this.window.add(grid);\n"
"        this.window.show_all();\n"
"    },\n"
"\n"
"    onColorChosen: function() {\n"
"    let colorName = this.color.to_string();\n"
"    this.label.set_text(\"You chose the color \" + colorName);\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ColorbuttonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gdk = imports.gi.Gdk·\n"
"const GObject = imports.gi.GObject·\n"
"const Gtk = imports.gi.Gtk·\n"
"const Lang = imports.lang·\n"
"\n"
"const ColorbuttonExample = new Lang.Class ({\n"
"    Name: 'Colorbutton Example',\n"
"\n"
"    // Δημιουργία αυτής καθεαυτής της εφαρμογής\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({ application_id: 'org.example.jscolorbutton' })·\n"
"\n"
"        // Σύνδεση σημάτων 'activate' και 'startup' στις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate))·\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup))·\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this.window.present()·\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί την UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ()·\n"
"    },\n"
"\n"
"    // Δόμηση της γραφικής διεπαφής της εφαρμογής\n"
"    _buildUI: function () {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this.window = new Gtk.ApplicationWindow ({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"ColorButton\",\n"
"                                                   default_width: 150,\n"
"                                                   default_height: 50,\n"
"                                                   border_width: 10 })·\n"
"\n"
"        this.button = new Gtk.ColorButton()·\n"
"        this.color = new Gdk.RGBA()·\n"
"        this.color.red = 0.0·\n"
"        this.color.green = 0.0·\n"
"        this.color.blue = 1.0·\n"
"        this.color.alpha = 0.5·\n"
"        this.button.set_rgba(this.color)·\n"
"        this.button.connect(\"color-set\", Lang.bind(this, this.onColorChosen))·\n"
"        this.label = new Gtk.Label()·\n"
"        this.label.set_text(\"Click to choose a color\")·\n"
"\n"
"        let grid = new Gtk.Grid()·\n"
"        grid.attach(this.button, 0, 0, 2, 1)·\n"
"        grid.attach(this.label, 0, 1, 2, 1)·\n"
"        this.window.add(grid)·\n"
"        this.window.show_all()·\n"
"    },\n"
"\n"
"    onColorChosen: function() {\n"
"    let colorName = this.color.to_string()·\n"
"    this.label.set_text(\"You chose the color \" + colorName)·\n"
"    }\n"
"})·\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new ColorbuttonExample ()·\n"
"app.application.run (ARGV)·\n"

#. (itstool) path: item/p
#: C/colorbutton.js.page:36
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.ColorButton."
"html\">GtkColorButton</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.ColorButton."
"html\">GtkColorButton</link>"

#. (itstool) path: item/p
#: C/colorbutton.js.page:37 C/colorbutton.py.page:45
msgid ""
"<link href=\"http://developer.gnome.org/gdk3/stable/gdk3-RGBA-Colors.html"
"\">RGBA Colors</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gdk3/stable/gdk3-RGBA-Colors.html"
"\">RGBA Colors</link>"

#. (itstool) path: info/title
#: C/colorbutton.py.page:8
msgctxt "text"
msgid "ColorButton (Python)"
msgstr "ColorButton (Python)"

#. (itstool) path: section/code
#: C/colorbutton.py.page:30
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"ColorButton\", application=app)\n"
"        self.set_default_size(150, 50)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a colorbutton (which opens a dialogue window in\n"
"        # which we choose a color)\n"
"        self.button = Gtk.ColorButton()\n"
"        # with a default color (blue, in this instance)\n"
"        color = Gdk.RGBA()\n"
"        color.red = 0.0\n"
"        color.green = 0.0\n"
"        color.blue = 1.0\n"
"        color.alpha = 0.5\n"
"        self.button.set_rgba(color)\n"
"\n"
"        # choosing a color in the dialogue window emits a signal\n"
"        self.button.connect(\"color-set\", self.on_color_chosen)\n"
"\n"
"        # a label\n"
"        label = Gtk.Label()\n"
"        label.set_text(\"Click to choose a color\")\n"
"\n"
"        # a grid to attach button and label\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(self.button, 0, 0, 2, 1)\n"
"        grid.attach(label, 0, 1, 2, 1)\n"
"        self.add(grid)\n"
"\n"
"    # if a new color is chosen, we print it as rgb(r,g,b) in the terminal\n"
"    def on_color_chosen(self, user_data):\n"
"        print \"You chose the color: \" + self.button.get_rgba().to_string()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"ColorButton\", application=app)\n"
"        self.set_default_size(150, 50)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a colorbutton (which opens a dialogue window in\n"
"        # which we choose a color)\n"
"        self.button = Gtk.ColorButton()\n"
"        # with a default color (blue, in this instance)\n"
"        color = Gdk.RGBA()\n"
"        color.red = 0.0\n"
"        color.green = 0.0\n"
"        color.blue = 1.0\n"
"        color.alpha = 0.5\n"
"        self.button.set_rgba(color)\n"
"\n"
"        # choosing a color in the dialogue window emits a signal\n"
"        self.button.connect(\"color-set\", self.on_color_chosen)\n"
"\n"
"        # a label\n"
"        label = Gtk.Label()\n"
"        label.set_text(\"Click to choose a color\")\n"
"\n"
"        # a grid to attach button and label\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(self.button, 0, 0, 2, 1)\n"
"        grid.attach(label, 0, 1, 2, 1)\n"
"        self.add(grid)\n"
"\n"
"    # if a new color is chosen, we print it as rgb(r,g,b) in the terminal\n"
"    def on_color_chosen(self, user_data):\n"
"        print \"You chose the color: \" + self.button.get_rgba().to_string()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/colorbutton.py.page:34
msgid "Useful methods for a ColorButton widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο ColorButton"

#. (itstool) path: section/p
#: C/colorbutton.py.page:35
msgid ""
"<code>set_color(color)</code>, where the <code>color</code> is defined as in "
"the example, sets the color of the ColorButton, which by default is black. "
"<code>get_color()</code> returns the color."
msgstr ""
"<code>set_color(color)</code>, όπου το <code>color</code> ορίζεται όπως στο "
"παράδειγμα, ορίζει το χρώμα του ColorButton, που από προεπιλογή είναι μαύρο. "
"<code>get_color()</code> επιστρέφει το χρώμα."

#. (itstool) path: section/p
#: C/colorbutton.py.page:36
msgid ""
"In line 23 the <code>\"color-set\"</code> signal is connected to the "
"callback function <code>on_color_chosen()</code> using <code><var>widget</"
"var>.connect(<var>signal</var>, <var>callback function</var>)</code>. See "
"<link xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"Στη γραμμή 23 το σήμα <code>\"color-set\"</code> συνδέεται με τη συνάρτηση "
"επανάκλησης <code>on_color_chosen()</code> χρησιμοποιώντας "
"<code><var>widget</var>.connect(<var>signal</var>, <var>callback function</"
"var>)</code>. Δείτε <link xref=\"signals-callbacks.py\"/> για μια πιο "
"λεπτομερή εξήγηση."

#. (itstool) path: item/p
#: C/colorbutton.py.page:43
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkColorButton.html"
"\">GtkColorButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkColorButton.html"
"\">GtkColorButton</link>"

#. (itstool) path: item/p
#: C/colorbutton.py.page:44
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkColorChooser.html"
"\">GtkColorChooser</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkColorChooser.html"
"\">GtkColorChooser</link>"

#. (itstool) path: info/title
#: C/colorbutton.vala.page:8
msgctxt "text"
msgid "ColorButton (Vala)"
msgstr "ColorButton (Vala)"

#. (itstool) path: page/p
#: C/colorbutton.vala.page:25
msgid "RGB values of the selected color are shown in the label."
msgstr "Τιμές RGB του επιλεγμένου χρώματος εμφανίζονται στην ετικέτα."

#. (itstool) path: page/code
#: C/colorbutton.vala.page:27
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\tGtk.Label label;\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\t/* Create the window of this application and show it. */\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"ColorButton\";\n"
"\t\twindow.set_default_size (150, 50);\n"
"\t\twindow.set_border_width (10);\n"
"\n"
"\t\t/* Create a new ColorButton with default blue. */\n"
"\t\tvar blue = Gdk.RGBA ();\n"
"\t\tblue.parse (\"blue\");\n"
"\t\tvar colorbutton = new Gtk.ColorButton.with_rgba (blue);\n"
"\n"
"\t\tlabel = new Gtk.Label (\"Click to choose a color\");\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.attach (colorbutton, 0, 0, 1, 1);\n"
"\t\tgrid.attach_next_to (label, colorbutton, Gtk.PositionType.BOTTOM, 1, 1);\n"
"\n"
"\t\tcolorbutton.color_set.connect (this.on_color_set);\n"
"\n"
"\t\twindow.add (grid);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"\n"
"\tvoid on_color_set (Gtk.ColorButton button) {\n"
"\t\tvar color =  button.get_rgba ();\n"
"\t\tlabel.set_text (\"RGBA: \" + color.to_string());\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* Αυτή είναι η εφαρμογή. */\n"
"public class MyApplication : Gtk.Application {\n"
"\tGtk.Label label;\n"
"\n"
"\t/* Αντικατάσταση του σήματος 'activate' της GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\t/* Δημιουργία του παραθύρου αυτής της εφαρμογής και εμφάνισή του. */\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"ColorButton\";\n"
"\t\twindow.set_default_size (150, 50);\n"
"\t\twindow.set_border_width (10);\n"
"\n"
"\t\t/* Δημιουργία ενός πλήκτρου χρώματος με προεπιλεγμένο γαλάζιο. */\n"
"\t\tvar blue = Gdk.RGBA ();\n"
"\t\tblue.parse (\"blue\");\n"
"\t\tvar colorbutton = new Gtk.ColorButton.with_rgba (blue);\n"
"\n"
"\t\tlabel = new Gtk.Label (\"Click to choose a color\");\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.attach (colorbutton, 0, 0, 1, 1);\n"
"\t\tgrid.attach_next_to (label, colorbutton, Gtk.PositionType.BOTTOM, 1, 1);\n"
"\n"
"\t\tcolorbutton.color_set.connect (this.on_color_set);\n"
"\n"
"\t\twindow.add (grid);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"\n"
"\tvoid on_color_set (Gtk.ColorButton button) {\n"
"\t\tvar color =  button.get_rgba ();\n"
"\t\tlabel.set_text (\"RGBA: \" + color.to_string());\n"
"\t}\n"
"}\n"
"\n"
"/* Το κύριο δημιουργεί και εκτελεί την εφαρμογή. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/colorbutton.vala.page:32
msgid ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.ColorButton.html\">Gtk."
"ColorButton</link>"
msgstr ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.ColorButton.html\">Gtk."
"ColorButton</link>"

#. (itstool) path: item/p
#: C/colorbutton.vala.page:33
msgid "<link href=\"http://valadoc.org/gdk-3.0/Gdk.RGBA.html\">Gdk.RGBA</link>"
msgstr ""
"<link href=\"http://valadoc.org/gdk-3.0/Gdk.RGBA.html\">Gdk.RGBA</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/comboboxtext.js.page:24 C/combobox.c.page:26 C/combobox.py.page:24
#: C/combobox.vala.page:22
msgctxt "_"
msgid ""
"external ref='media/combobox.png' md5='ab9e91bc1a58fe866cb00dd52159251d'"
msgstr ""
"external ref='media/combobox.png' md5='ab9e91bc1a58fe866cb00dd52159251d'"

#. (itstool) path: info/title
#: C/comboboxtext.js.page:8
msgctxt "text"
msgid "ComboBoxText (JavaScript)"
msgstr "ComboBoxText (JavaScript)"

#. (itstool) path: info/desc
#: C/comboboxtext.js.page:20
msgid "A text-only drop-down menu"
msgstr "Ένα πτυσσόμενο μενού μόνο για κείμενο"

#. (itstool) path: page/title
#: C/comboboxtext.js.page:23
msgid "ComboBoxText"
msgstr "ComboBoxText"

#. (itstool) path: page/p
#: C/comboboxtext.js.page:25
msgid ""
"A ComboBox is a drop-down menu. The difference between a <link xref="
"\"combobox.js\">ComboBox</link> and a ComboBoxText is that a ComboBoxText "
"just has basic text options, while a full ComboBox uses a ListStore or "
"TreeStore (which are basically spreadsheets) to show things like branching "
"options, or pictures to go alongside each choice."
msgstr ""
"Ένα σύνθετο πλαίσιο (ComboBox) είναι ένα πτυσσόμενο μενού. Η διαφορά μεταξύ "
"ενός <link xref=\"combobox.js\">ComboBox</link> και ενός κειμένου σύνθετου "
"πλαισίου (ComboBoxText) είναι ότι ένα κείμενο σύνθετου πλαισίου έχει μόνο "
"επιλογές βασικού κειμένου, ενώ ένα πλήρες σύνθετο πλαίσιο χρησιμοποιεί μια "
"αποθήκη λιστών ή αποθήκη δένδρου (που είναι βασικά υπολογιστικά φύλλα) για "
"την εμφάνιση πραγμάτων όπως επιλογές διακλάδωσης ή εικόνες που πηγαίνουν "
"δίπλα σε κάθε επιλογή."

#. (itstool) path: note/p
#: C/comboboxtext.js.page:26
msgid ""
"Unless you need the added features of a full ComboBox, or are comfortable "
"working with ListStores and TreeStores, you may find it a lot simpler to use "
"a ComboBoxText whenever possible."
msgstr ""
"Εκτός και χρειάζεστε τα πρόσθετα γνωρίσματα ενός πλήρους σύνθετου πλαισίου "
"(ComboBox), ή είναι άνετη η εργασία με αποθήκες λιστών (ListStores) και "
"αποθήκες δένδρου (TreeStores), μπορεί να το βρείτε πολύ απλούστερο να "
"χρησιμοποιήσετε ένα κείμενο σύνθετου πλαισίου (ComboBoxText) όποτε είναι "
"δυνατό."

#. (itstool) path: section/code
#: C/comboboxtext.js.page:42
#, no-wrap
msgid ""
"\n"
"const ComboBoxTextExample = new Lang.Class ({\n"
"    Name: 'ComboBoxText Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jscomboboxtext'});\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const ComboBoxTextExample = new Lang.Class ({\n"
"    Name: 'ComboBoxText Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jscomboboxtext'});\n"
"\n"
"        // Σύνδεση των σημάτων 'activate' και 'startup' στις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρα, όταν είναι ενεργή\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/comboboxtext.js.page:66 C/messagedialog.js.page:70
msgid ""
"All the code for this sample goes in the MessageDialogExample class. The "
"above code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/"
"gjs/Gtk.Application.html\">Gtk.Application</link> for our widgets and window "
"to go in."
msgstr ""
"Όλος ο κώδικας για αυτό το παράδειγμα πηγαίνει στην κλάση "
"MessageDialogExample. Ο παραπάνω κώδικας δημιουργεί μια <link href=\"http://"
"www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Application.html\">Gtk."
"Application</link> για να μπουν μέσα τα γραφικά στοιχεία μας και τα "
"παράθυρα."

#. (itstool) path: section/code
#: C/comboboxtext.js.page:67 C/combobox.js.page:71
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_width: 200,\n"
"            border_width: 10 });\n"
msgstr ""
"\n"
"   // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function () {\n"
"\n"
"        // Δημιουργία του παραθυύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_width: 200,\n"
"            border_width: 10 });\n"

#. (itstool) path: section/p
#: C/comboboxtext.js.page:79 C/combobox.js.page:83 C/messagedialog.js.page:84
#: C/radiobutton.js.page:79 C/scale.js.page:78 C/spinbutton.js.page:81
#: C/switch.js.page:88 C/textview.js.page:88 C/togglebutton.js.page:81
#: C/treeview_simple_liststore.js.page:90
msgid ""
"The _buildUI function is where we put all the code to create the "
"application's user interface. The first step is creating a new <link xref="
"\"GtkApplicationWindow.js\">Gtk.ApplicationWindow</link> to put all our "
"widgets into."
msgstr ""
"Η συνάρτηση _buildUI είναι εκεί που βάζουμε όλον τον κώδικα για να "
"δημιουργήσουμε τη διεπαφή χρήστη της εφαρμογής. Το πρώτο βήμα δημιουργεί ένα "
"νέο <link xref=\"GtkApplicationWindow.js\">Gtk.ApplicationWindow</link> για "
"να βάλουμε μέσα τα γραφικά στοιχεία μας."

#. (itstool) path: section/title
#: C/comboboxtext.js.page:83
msgid "Creating the ComboBoxText"
msgstr "Δημιουργία των ComboBoxText"

#. (itstool) path: section/code
#: C/comboboxtext.js.page:84
#, no-wrap
msgid ""
"\n"
"        // Create the combobox\n"
"        this._comboBoxText = new Gtk.ComboBoxText();\n"
"\n"
"        // Populate the combobox\n"
"        let distros = [\"Select distribution\", \"Fedora\", \"Mint\", \"Suse\"];\n"
"        for (let i = 0; i &lt; distros.length; i++)\n"
"            this._comboBoxText.append_text (distros[i]);\n"
"        this._comboBoxText.set_active (0);\n"
"\n"
"        // Connect the combobox's 'changed' signal to our callback function\n"
"        this._comboBoxText.connect ('changed', Lang.bind (this, this._onComboChanged));\n"
msgstr ""
"\n"
"               // Δημιουργία του σύνθετου πλαισίου\n"
"        this._comboBoxText = new Gtk.ComboBoxText();\n"
"\n"
"        // Γέμισμα του σύνθετου πλαισίου\n"
"        let distros = [\"Select distribution\", \"Fedora\", \"Mint\", \"Suse\"];\n"
"        for (let i = 0; i &lt; distros.length; i++)\n"
"            this._comboBoxText.append_text (distros[i]);\n"
"        this._comboBoxText.set_active (0);\n"
"\n"
"        // Σύνδεση του σήματος του σύνθετου πλαισίου 'changed' με τη συνάρτηση επανάκλησής μας\n"
"        this._comboBoxText.connect ('changed', Lang.bind (this, this._onComboChanged));\n"

#. (itstool) path: section/p
#: C/comboboxtext.js.page:97
msgid ""
"After we create the ComboBoxText, we use its <file>append_text</file> method "
"to add text strings to it. Like the entries in an array, they each have a "
"number for an ID, starting with 0. To make things simpler, you can actually "
"create an array for your ComboBoxText entries, then use a for loop to append "
"them in order, like we did here."
msgstr ""
"Μετά τη δημιουργία του ComboBoxText, χρησιμοποιούμε τη μέθοδό του "
"<file>append_text</file> για να προσθέσουμε συμβολοσειρές κειμένου σε αυτό. "
"Όπως οι καταχωρίσεις σε έναν πίνακα, έχει καθεμιά έναν αριθμό για ταυτότητα, "
"αρχίζοντας με 0. Για απλοποίηση, μπορείτε πράγματι να δημιουργήσετε έναν "
"πίνακα για τις καταχωρίσεις ComboBoxText, έπειτα να χρησιμοποιήσετε έναν "
"βρόχο for για να τα προσαρτήσετε σε σειρά, όπως κάναμε εδώ."

#. (itstool) path: section/p
#: C/comboboxtext.js.page:98
msgid ""
"After we populate the ComboBoxText, we set its first entry to be active, so "
"that we'll see the \"Select distribution\" line before we click on it. Then "
"we connect its <file>changed</file> signal to the _onComboChanged function, "
"so that it's called whenever you make a new selection from the drop-down "
"menu."
msgstr ""
"Μετά το γέμισμα του ComboBoxText, ορίζουμε την πρώτη του καταχώριση να είναι "
"ενεργή, έτσι ώστε θα δούμε τη γραμμή \"Select distribution\" πριν την "
"πατήσουμε. Έπειτα συνδέουμε το σήμα του <file>changed</file> στη συνάρτηση "
"_onComboChanged, έτσι ώστε να καλείται όποτε κάνετε μια νέα επιλογή από το "
"πτυσσόμενο μενού."

#. (itstool) path: note/p
#: C/comboboxtext.js.page:99
msgid ""
"If you'd like to add an entry to a ComboBoxText, you can use the "
"<file>insert_text</file> method. And if you'd rather use a text string as an "
"ID for each entry than rely on numbers alone, you can use the <file>append</"
"file> and <file>insert</file> methods. See the links at the bottom of this "
"tutorial for the details of how to use them."
msgstr ""
"Εάν θα θέλατε να προσθέσετε μια καταχώριση σε ένα ComboBoxText, μπορείτε να "
"χρησιμοποιήσετε τη μέθοδο <file>insert_text</file>. Εάν προτιμάτε να "
"χρησιμοποιήσετε μια συμβολοσειρά κειμένου ως μια ταυτότητα για κάθε "
"καταχώριση αντί να βασίζεστε σε αριθμούς μόνο, μπορείτε να χρησιμοποιήσετε "
"τις μεθόδους <file>append</file> και <file>insert</file>. Δείτε τους "
"συνδέσμους στο τέλος αυτού του μαθήματος για τις λεπτομέρειες χρήσης τους."

#. (itstool) path: section/code
#: C/comboboxtext.js.page:101
#, no-wrap
msgid ""
"\n"
"        // Add the combobox to the window\n"
"        this._window.add (this._comboBoxText);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""
"\n"
"        // Προσθήκη του σύνθετου πλαισίου στο παράθυρο\n"
"        this._window.add (this._comboBoxText);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"

#. (itstool) path: section/p
#: C/comboboxtext.js.page:109
msgid ""
"Finally, we add the ComboBoxText to the window, and tell the window to show "
"itself and the widget inside it."
msgstr ""
"Τελικά, προσθέτουμε το ComboBoxText στο παράθυρο, έπειτα λέμε στο παράθυρο "
"να εμφανίσει τον εαυτόν του και το γραφικό στοιχείο μέσα του."

#. (itstool) path: section/title
#: C/comboboxtext.js.page:113 C/combobox.js.page:170 C/radiobutton.js.page:181
msgid "Function which handles your selection"
msgstr "Η συνάρτηση που χειρίζεται την επιλογή σας"

#. (itstool) path: section/code
#: C/comboboxtext.js.page:114
#, no-wrap
msgid ""
"\n"
"    _onComboChanged: function () {\n"
"\n"
"        // The responses we'll use for our messagedialog\n"
"        let responses = [\"\",\n"
"            \"Fedora is a community distro sponsored by Red Hat.\",\n"
"            \"Mint is a popular distro based on Ubuntu.\",\n"
"            \"SUSE is a name shared by two separate distros.\"];\n"
msgstr ""
"\n"
"    _onComboChanged: function () {\n"
"\n"
"        // Οι απαντήσεις που θα χρησιμοποιήσουμε για τον διάλογο του μηνύματός μας\n"
"        let responses = [\"\",\n"
"            \"Fedora is a community distro sponsored by Red Hat.\",\n"
"            \"Mint is a popular distro based on Ubuntu.\",\n"
"            \"SUSE is a name shared by two separate distros.\"];\n"

#. (itstool) path: section/p
#: C/comboboxtext.js.page:123
msgid ""
"We're going to create a pop-up <link xref=\"messagedialog.js"
"\">MessageDialog</link>, which shows you a message based on which distro you "
"select. First, we create the array of responses to use. Since the first "
"string in our ComboBoxText is just the \"Select distribution\" message, we "
"make the first string in our array blank."
msgstr ""
"Πρόκειται να δημιουργήσουμε ένα αναδυόμενο <link xref=\"messagedialog.js"
"\">MessageDialog</link>, που σας εμφανίζει ένα μήνυμα με βάση ποια διανομή "
"επιλέγετε. Πρώτα, δημιουργούμε τον πίνακα των απαντήσεων για χρήση. Αφού η "
"πρώτη συμβολοσειρά στο ComboBoxText μας είναι μόνο το μήνυμα \"Select "
"distribution\", κάνουμε την πρώτη συμβολοσειρά στον πίνακά μας κενή."

#. (itstool) path: section/code
#: C/comboboxtext.js.page:125
#, no-wrap
msgid ""
"\n"
"        // Which combobox item is active?\n"
"        let activeItem = this._comboBoxText.get_active();\n"
"\n"
"        // No messagedialog if you chose \"Select distribution\"\n"
"        if (activeItem != 0) {\n"
"            this._popUp = new Gtk.MessageDialog ({\n"
"                transient_for: this._window,\n"
"                modal: true,\n"
"                buttons: Gtk.ButtonsType.OK,\n"
"                message_type: Gtk.MessageType.INFO,\n"
"                text: responses[activeItem]});\n"
"\n"
"            // Connect the OK button to a handler function\n"
"            this._popUp.connect ('response', Lang.bind (this, this._onDialogResponse));\n"
"\n"
"            // Show the messagedialog\n"
"            this._popUp.show();\n"
"        }\n"
"\n"
"    },\n"
msgstr ""
"\n"
"        // Ποιο στοιχείο του σύνθετου πλαισίου είναι ενεργό;\n"
"        let activeItem = this._comboBoxText.get_active();\n"
"\n"
"        // Χωρίς διάλογο μηνύματος αν επιλέξετε \"Select distribution\"\n"
"        if (activeItem != 0) {\n"
"            this._popUp = new Gtk.MessageDialog ({\n"
"                transient_for: this._window,\n"
"                modal: true,\n"
"                buttons: Gtk.ButtonsType.OK,\n"
"                message_type: Gtk.MessageType.INFO,\n"
"                text: responses[activeItem]});\n"
"\n"
"            // Σύνδεση του κουμπιού ΕΝΤΑΞΕΙ με συνάρτηση χειριστή\n"
"            this._popUp.connect ('response', Lang.bind (this, this._onDialogResponse));\n"
"\n"
"            // Εμφάνιση του διαλόγου μηνύματος\n"
"            this._popUp.show();\n"
"        }\n"
"\n"
"    },\n"

#. (itstool) path: section/p
#: C/comboboxtext.js.page:147
msgid ""
"Before showing a MessageDialog, we first test to make sure you didn't choose "
"the \"Select distribution\" message. After that, we set its text to be the "
"entry in the array that corresponds to the active entry in our ComboBoxText. "
"We do that using the <file>get_active</file> method, which returns the "
"number ID of your selection."
msgstr ""
"Πριν την προβολή ενός MessageDialog, δοκιμάζουμε πρώτα για να βεβαιωθούμε "
"ότι δεν επιλέξατε το μήνυμα \"Select distribution\". Μετά από αυτό, ορίζουμε "
"το κείμενο του να είναι στην καταχώριση στον πίνακα που αντιστοιχεί στην "
"ενεργή καταχώριση στο ComboBoxText μας. Το κάνουμε χρησιμοποιώντας τη μέθοδο "
"<file>get_active</file>, που επιστρέφει τον αριθμό ταυτότητας της επιλογής "
"σας."

#. (itstool) path: note/p
#: C/comboboxtext.js.page:148
msgid ""
"Other methods you can use include <file>get_active_id,</file> which returns "
"the text ID assigned by <file>append,</file> and <file>get_active_text,</"
"file> which returns the full text of the string you selected."
msgstr ""
"Άλλες μέθοδοι που μπορείτε να χρησιμοποιήσετε περιλαμβάνουν το "
"<file>get_active_id,</file> που επιστρέφει την ταυτότητα του κειμένου που "
"αποδόθηκε από το <file>append,</file> και <file>get_active_text</file>, τα "
"οποία επιστρέφουν το πλήρες κείμενο της επιλεγμένης συμβολοσειράς."

#. (itstool) path: section/p
#: C/comboboxtext.js.page:149 C/combobox.js.page:206
msgid ""
"After we create the MessageDialog, we connect its response signal to the "
"_onDialogResponse function, then tell it to show itself."
msgstr ""
"Μετά τη δημιουργία του MessageDialog, συνδέουμε το σήμα της απάντησής του "
"στη συνάρτηση _onDialogResponse, έπειτα του λέμε να εμφανίσει τον εαυτόν του."

#. (itstool) path: section/code
#: C/comboboxtext.js.page:151 C/combobox.js.page:208
#, no-wrap
msgid ""
"\n"
"    _onDialogResponse: function () {\n"
"\n"
"        this._popUp.destroy ();\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _onDialogResponse: function () {\n"
"\n"
"        this._popUp.destroy ();\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/comboboxtext.js.page:160 C/combobox.js.page:217
msgid ""
"Since the only button the MessageDialog has is an OK button, we don't need "
"to test its response_id to see which button was clicked. All we do here is "
"destroy the popup."
msgstr ""
"Αφού το μόνο κουμπί που ο MessageDialog έχει είναι ένα κουμπί εντάξει, δεν "
"χρειαζόμαστε να ελέγξουμε το response_id του για να δούμε ποιο κουμπί "
"πατήθηκε. Αυτό που κάνουμε εδώ είναι η καταστροφή του αναδυόμενου."

#. (itstool) path: section/code
#: C/comboboxtext.js.page:162
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new ComboBoxTextExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new ComboBoxTextExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/comboboxtext.js.page:167
msgid ""
"Finally, we create a new instance of the finished ComboBoxTextExample class, "
"and set the application running."
msgstr ""
"Τελικά, δημιουργούμε ένα νέο στιγμιότυπο της ολοκληρωμένης κλάσης "
"ComboBoxTextExample και εκτελούμε την εφαρμογή."

#. (itstool) path: section/code
#: C/comboboxtext.js.page:172
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ComboBoxTextExample = new Lang.Class ({\n"
"    Name: 'ComboBoxText Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jscomboboxtext'});\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_width: 200,\n"
"            border_width: 10 });\n"
"\n"
"        // Create the combobox\n"
"        this._comboBoxText = new Gtk.ComboBoxText();\n"
"\n"
"        // Populate the combobox\n"
"        let distros = [\"Select distribution\", \"Fedora\", \"Mint\", \"Suse\"];\n"
"        for (let i = 0; i &lt; distros.length; i++)\n"
"            this._comboBoxText.append_text (distros[i]);\n"
"        this._comboBoxText.set_active (0);\n"
"\n"
"        // Connect the combobox's 'changed' signal to our callback function\n"
"        this._comboBoxText.connect ('changed', Lang.bind (this, this._onComboChanged));\n"
"\n"
"        // Add the combobox to the window\n"
"        this._window.add (this._comboBoxText);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onComboChanged: function () {\n"
"\n"
"        // The responses we'll use for our messagedialog\n"
"        let responses = [\"\",\n"
"            \"Fedora is a community distro sponsored by Red Hat.\",\n"
"            \"Mint is a popular distro based on Ubuntu.\",\n"
"            \"SUSE is a name shared by two separate distros.\"];\n"
"\n"
"        // Which combobox item is active?\n"
"        let activeItem = this._comboBoxText.get_active();\n"
"\n"
"        // No messagedialog if you chose \"Select distribution\"\n"
"        if (activeItem != 0) {\n"
"            this._popUp = new Gtk.MessageDialog ({\n"
"                transient_for: this._window,\n"
"                modal: true,\n"
"                buttons: Gtk.ButtonsType.OK,\n"
"                message_type: Gtk.MessageType.INFO,\n"
"                text: responses[activeItem]});\n"
"\n"
"            // Connect the OK button to a handler function\n"
"            this._popUp.connect ('response', Lang.bind (this, this._onDialogResponse));\n"
"\n"
"            // Show the messagedialog\n"
"            this._popUp.show();\n"
"        }\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onDialogResponse: function () {\n"
"\n"
"        this._popUp.destroy ();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ComboBoxTextExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ComboBoxTextExample = new Lang.Class ({\n"
"    Name: 'ComboBoxText Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jscomboboxtext'});\n"
"\n"
"        // Σύνδεση των σημάτων 'activate' και 'startup' στις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function () {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_width: 200,\n"
"            border_width: 10 });\n"
"\n"
"        // Δημιουργία του σύνθετου πλαισίου\n"
"        this._comboBoxText = new Gtk.ComboBoxText();\n"
"\n"
"        // Γέμισμα του σύνθετου πλαισίου\n"
"        let distros = [\"Select distribution\", \"Fedora\", \"Mint\", \"Suse\"];\n"
"        for (let i = 0; i &lt; distros.length; i++)\n"
"            this._comboBoxText.append_text (distros[i]);\n"
"        this._comboBoxText.set_active (0);\n"
"\n"
"        // Σύνδεση του σήματος του σύνθετου πλαισίου 'changed' στη συνάρτηση επανάκλησής μας\n"
"        this._comboBoxText.connect ('changed', Lang.bind (this, this._onComboChanged));\n"
"\n"
"        // Προσθήκη του σύνθετου πλαισίου στο παράθυρο\n"
"        this._window.add (this._comboBoxText);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onComboChanged: function () {\n"
"\n"
"        // Οι απαντήσεις που θα χρησιμοποιήσουμε για τον διάλογο του μηνύματός μας\n"
"        let responses = [\"\",\n"
"            \"Fedora is a community distro sponsored by Red Hat.\",\n"
"            \"Mint is a popular distro based on Ubuntu.\",\n"
"            \"SUSE is a name shared by two separate distros.\"];\n"
"\n"
"        // Ποιο στοιχείο του σύνθετου πλαισίου είναι ενεργό;\n"
"        let activeItem = this._comboBoxText.get_active();\n"
"\n"
"        // Χωρίς διάλογο μηνύματος αν επιλέξετε \"Select distribution\"\n"
"        if (activeItem != 0) {\n"
"            this._popUp = new Gtk.MessageDialog ({\n"
"                transient_for: this._window,\n"
"                modal: true,\n"
"                buttons: Gtk.ButtonsType.OK,\n"
"                message_type: Gtk.MessageType.INFO,\n"
"                text: responses[activeItem]});\n"
"\n"
"            // Σύνδεση του κουμπιού ΕΝΤΑΞΕΙ σε συνάρτηση χειριστή\n"
"            this._popUp.connect ('response', Lang.bind (this, this._onDialogResponse));\n"
"\n"
"            // Εμφάνιση του διαλόγου μηνύματος\n"
"            this._popUp.show();\n"
"        }\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onDialogResponse: function () {\n"
"\n"
"        this._popUp.destroy ();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new ComboBoxTextExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/comboboxtext.js.page:183
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ComboBoxText."
"html\">Gtk.ComboBoxText</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ComboBoxText."
"html\">Gtk.ComboBoxText</link>"

#. (itstool) path: item/p
#: C/comboboxtext.js.page:184 C/combobox.js.page:244 C/entry.js.page:33
#: C/messagedialog.js.page:198
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.MessageDialog."
"html\">Gtk.MessageDialog</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.MessageDialog."
"html\">Gtk.MessageDialog</link>"

#. (itstool) path: info/title
#: C/combobox.c.page:8
msgctxt "text"
msgid "ComboBox (C)"
msgstr "Σύνθετο πλαίσιο (ComboBox) (C)"

#. (itstool) path: info/desc
#: C/combobox.c.page:22 C/combobox.py.page:20 C/combobox.vala.page:18
#: C/combobox_multicolumn.py.page:19 C/combobox_multicolumn.vala.page:19
msgid "A widget used to choose from a list of items"
msgstr ""
"Ένα γραφικό στοιχείο χρησιμοποιείται για επιλογή από μια λίστα στοιχείων"

#. (itstool) path: page/title
#: C/combobox.c.page:25 C/combobox.js.page:25 C/combobox.vala.page:21
msgid "ComboBox"
msgstr "ComboBox"

#. (itstool) path: page/p
#: C/combobox.c.page:27 C/combobox.vala.page:23
msgid "This ComboBox prints to the terminal when you change your selection."
msgstr "Αυτό το ComboBox τυπώνει στον τερματικό όταν αλλάζετε την επιλογή σας."

#. (itstool) path: page/code
#: C/combobox.c.page:29
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"/* This is the callback function. It is a handler function which reacts to the\n"
" * signal. In this case, if the row selected is not the first one of the\n"
" * ComboBox, we write its value in the terminal for the user.\n"
" */\n"
"static void\n"
"on_changed (GtkComboBox *widget,\n"
"            gpointer   user_data)\n"
"{\n"
"  GtkComboBox *combo_box = widget;\n"
"\n"
"  if (gtk_combo_box_get_active (combo_box) != 0) {\n"
"    gchar *distro = gtk_combo_box_text_get_active_text (GTK_COMBO_BOX_TEXT(combo_box));\n"
"    g_print (\"You chose %s\\n\", distro);\n"
"    g_free (distro);\n"
"  }\n"
"\n"
"}\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  gint i;\n"
"  GtkWidget *view;\n"
"  GtkWidget *window;\n"
"  GtkWidget *combo_box;\n"
"\n"
"  /* Create a window with a title, border width, and a default size. Setting the\n"
"   * size to -1 means to use the \"natural\" default size.\n"
"   * (the size request of the window)\n"
"   */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Welcome to GNOME\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, -1);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 10);\n"
"\n"
"\n"
"  /* Create the combo box and append your string values to it. */\n"
"  combo_box = gtk_combo_box_text_new ();\n"
"  const char *distros[] = {\"Select distribution\", \"Fedora\", \"Mint\", \"Suse\"};\n"
"\n"
" \n"
"  /* G_N_ELEMENTS is a macro which determines the number of elements in an array.*/ \n"
"  for (i = 0; i &lt; G_N_ELEMENTS (distros); i++){\n"
"  \tgtk_combo_box_text_append_text (GTK_COMBO_BOX_TEXT (combo_box), distros[i]);\n"
"  }\n"
"\n"
"  /* Choose to set the first row as the active one by default, from the beginning */\n"
"  gtk_combo_box_set_active (GTK_COMBO_BOX (combo_box), 0);\n"
"\n"
"  /* Connect the signal emitted when a row is selected to the appropriate\n"
"   * callback function.\n"
"   */\n"
"  g_signal_connect (combo_box,\n"
"                    \"changed\",\n"
"                    G_CALLBACK (on_changed),\n"
"                    NULL);\n"
"\n"
"  /* Add it to the window */\n"
"  gtk_container_add (GTK_CONTAINER (window), combo_box);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"/* Αυτή είναι η συνάρτηση επανάκλησης. Είναι μια συνάρτηση χειρισμού που αντιδρά\n"
" * στο σήμα. Σε αυτήν την περίπτωση, αν η επιλεγμένη γραμμή δεν είναι η πρώτη\n"
" * του σύνθετου πλαισίου, γράφουμε την τιμή της στον τερματικό για τον χρήστη.\n"
" */\n"
"static void\n"
"on_changed (GtkComboBox *widget,\n"
"            gpointer   user_data)\n"
"{\n"
"  GtkComboBox *combo_box = widget;\n"
"\n"
"  if (gtk_combo_box_get_active (combo_box) != 0) {\n"
"    gchar *distro = gtk_combo_box_text_get_active_text (GTK_COMBO_BOX_TEXT(combo_box));\n"
"    g_print (\"You chose %s\\n\", distro);\n"
"    g_free (distro);\n"
"  }\n"
"\n"
"}\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  gint i;\n"
"  GtkWidget *view;\n"
"  GtkWidget *window;\n"
"  GtkWidget *combo_box;\n"
"\n"
"  /* Δημιουργία παραθύρου με τίτλο, πλάτος περιγράμματος και προεπιλεγμένο μέγεθος.\n"
"   * Ορίζοντας το μέγεθος σε -1 σημαίνει να χρησιμοποιηθεί το \"φυσικό\" προεπιλεγμένο μέγεθος.\n"
"   * (το αίτημα μεγέθους του παραθύρου)\n"
"   */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Welcome to GNOME\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, -1);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 10);\n"
"\n"
"\n"
"  /* Δημιουργία του σύνθετου πλαισίου και προσάρτηση των τιμών συμβολοσειρών σας σε αυτό. */\n"
"  combo_box = gtk_combo_box_text_new ();\n"
"  const char *distros[] = {\"Select distribution\", \"Fedora\", \"Mint\", \"Suse\"};\n"
"\n"
" \n"
"  /* G_N_ELEMENTS είναι μια μακροεντολή που καθορίζει τον αριθμό των στοιχείων σε έναν πίνακα.*/ \n"
"  for (i = 0; i &lt; G_N_ELEMENTS (distros); i++){\n"
"  \tgtk_combo_box_text_append_text (GTK_COMBO_BOX_TEXT (combo_box), distros[i]);\n"
"  }\n"
"\n"
"  /* Επιλογή ορισμού της πρώτης γραμμής ως ενεργής από προεπιλογή, από την αρχή */\n"
"  gtk_combo_box_set_active (GTK_COMBO_BOX (combo_box), 0);\n"
"\n"
"  /* Σύνδεση του εκπεμπόμενου σήματος, όταν μια γραμμή επιλέγεται στην\n"
"   * κατάλληλη συνάρτηση επανάκλησης.\n"
"   */\n"
"  g_signal_connect (combo_box,\n"
"                    \"changed\",\n"
"                    G_CALLBACK (on_changed),\n"
"                    NULL);\n"
"\n"
"  /* Προσθήκη του στο παράθυρο */\n"
"  gtk_container_add (GTK_CONTAINER (window), combo_box);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/combobox.c.page:37
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkComboBoxText.html"
"\">GtkComboBoxText</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkComboBoxText.html"
"\">GtkComboBoxText</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/combobox.js.page:26 C/combobox_multicolumn.py.page:23
#: C/combobox_multicolumn.vala.page:23
msgctxt "_"
msgid ""
"external ref='media/combobox_multicolumn.png' "
"md5='43f16648fb11ebc7d2f70825ed0f63b3'"
msgstr ""
"external ref='media/combobox_multicolumn.png' "
"md5='43f16648fb11ebc7d2f70825ed0f63b3'"

#. (itstool) path: info/title
#: C/combobox.js.page:8
msgctxt "text"
msgid "ComboBox (JavaScript)"
msgstr "ComboBox (JavaScript)"

#. (itstool) path: info/desc
#: C/combobox.js.page:22
msgid "A customizable drop-down menu"
msgstr "Ένα προσαρμόσιμο πτυσσόμενο μενού"

#. (itstool) path: page/p
#: C/combobox.js.page:27
msgid ""
"A ComboBox is an extremely customizable drop-down menu. It holds the "
"equivalent of a <link xref=\"treeview_simple_liststore.js\">TreeView</link> "
"widget that appears when you click on it, complete with a ListStore "
"(basically a spreadsheet) that says what's in the rows and columns. In this "
"example, our ListStore has the name of each option in one column, and the "
"name of a stock icon in the other, which the ComboBox then turns into an "
"icon for each option."
msgstr ""
"Ένα ComboBox είναι ένα άκρως προσαρμόσιμο πτυσσόμενο μενού. Κρατά το "
"ισοδύναμο ενός γραφικού στοιχείου <link xref=\"treeview_simple_liststore.js"
"\">TreeView</link> που εμφανίζεται όταν το πατάτε πάνω του, πλήρες με μια "
"αποθήκη λιστών (ListStore) (βασικά ένα υπολογιστικό φύλλο) που λέει τι είναι "
"στις γραμμές και στις στήλες. Σε αυτό το παράδειγμα, η αποθήκη λιστών μας "
"έχει το όνομα κάθε επιλογής σε μια στήλη και το όνομα ενός εικονιδίου "
"παρακαταθήκης στην άλλη, που το σύνθετο πλαίσιο έπειτα μετατρέπει σε ένα "
"εικονίδιο για κάθε επιλογή."

#. (itstool) path: page/p
#: C/combobox.js.page:28
msgid ""
"You select a whole horizontal row at a time, so the icons aren't treated as "
"separate options. They and the text beside them make up each option you can "
"click on."
msgstr ""
"Επιλέγετε μια πλήρως οριζόντια γραμμή τη φορά, έτσι τα εικονίδια δεν "
"συμπεριφέρονται ως ξεχωριστές επιλογές. Αυτές και το κείμενο δίπλα τους "
"κατασκευάζουν κάθε επιλογή που μπορείτε να πατήσετε."

#. (itstool) path: note/p
#: C/combobox.js.page:29
msgid ""
"Working with a ListStore can be time-consuming. If you just want a simple "
"text-only drop-down menu, take a look at the <link xref=\"comboboxtext.js"
"\">ComboBoxText</link>. It doesn't take as much time to set up, and is "
"easier to work with."
msgstr ""
"Η εργασία με μια αποθήκη λιστών μπορεί να είναι χρονοβόρα. Εάν θέλετε μόνο "
"ένα απλό πτυσσόμενο μενού μόνο για κείμενο, ρίξτε μια ματιά στο <link xref="
"\"comboboxtext.js\">ComboBoxText</link>. Δεν παίρνει πολύ χρόνο για "
"εγκατάσταση και δουλεύετε πιο εύκολα."

#. (itstool) path: section/code
#: C/combobox.js.page:34
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
msgstr ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"

#. (itstool) path: section/code
#: C/combobox.js.page:46
#, no-wrap
msgid ""
"\n"
"const ComboBoxExample = new Lang.Class ({\n"
"    Name: 'ComboBox Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jscombobox'});\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const ComboBoxExample = new Lang.Class ({\n"
"    Name: 'ComboBox Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jscombobox'});\n"
"\n"
"        // Σύνδεση των σημάτων 'activate' και 'startup' στις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/combobox.js.page:70
msgid ""
"All the code for this sample goes in the ComboBoxExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.Application.html\">Gtk.Application</link> for our widgets and window to "
"go in."
msgstr ""
"Όλος ο κώδικας για αυτό το παράδειγμα πηγαίνει στην κλάση ComboBoxExample. Ο "
"παραπάνω κώδικας δημιουργεί μια <link href=\"http://www.roojs.com/seed/"
"gir-1.2-gtk-3.0/gjs/Gtk.Application.html\">Gtk.Application</link> για να "
"μπουν μέσα τα γραφικά στοιχεία μας και τα παράθυρα."

#. (itstool) path: section/title
#: C/combobox.js.page:87 C/treeview_simple_liststore.js.page:94
msgid "Creating the ListStore"
msgstr "Δημιουργία της αποθήκης λιστών (ListStore)"

#. (itstool) path: section/code
#: C/combobox.js.page:88
#, no-wrap
msgid ""
"\n"
"        // Create the liststore to put our options in\n"
"        this._listStore = new Gtk.ListStore();\n"
"        this._listStore.set_column_types ([\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING]);\n"
msgstr ""
"\n"
"        // Δημιουργία της αποθήκης λιστών για να τοποθετηθούν μέσα οι επιλογές μας\n"
"        this._listStore = new Gtk.ListStore();\n"
"        this._listStore.set_column_types ([\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING]);\n"

#. (itstool) path: section/p
#: C/combobox.js.page:95
msgid ""
"This ListStore works like the one used in the <link xref="
"\"treeview_simple_liststore.js\">TreeView</link> example. We're giving it "
"two columns, both strings, because one of them will contain the names of "
"<link href=\"https://developer.gnome.org/gtk3/3.4/gtk3-Stock-Items.html"
"\">stock Gtk icons</link>."
msgstr ""
"Αυτή η αποθήκη λιστών (ListStore) δουλεύει όπως αυτή που χρησιμοποιήθηκε στο "
"παράδειγμα <link xref=\"treeview_simple_liststore.js\">TreeView</link>. Του "
"δίνουμε δύο στήλες, αμφότερες συμβολοσειρές, επειδή η μια τους θα περιέχει "
"τα ονόματα των <link href=\"https://developer.gnome.org/gtk3/3.4/gtk3-Stock-"
"Items.html\">εικονιδίων παρακαταθήκης Gtk</link>."

#. (itstool) path: section/p
#: C/combobox.js.page:96
msgid ""
"If we'd wanted to use our own icons that weren't already built in to GNOME, "
"we'd have needed to use the <file>gtk.gdk.Pixbuf</file> type instead. Here "
"are a few other types you can use:"
msgstr ""
"Εάν θα θέλαμε να χρησιμοποιήσουμε τα δικά μας εικονίδια που δεν ήταν ήδη "
"ενσωματωμένα στο GNOME, θα χρειαζόμασταν να χρησιμοποιήσουμε τον τύπο "
"<file>gtk.gdk.Pixbuf</file>. Να μερικοί άλλοι τύποι που μπορείτε να "
"χρησιμοποιήσετε:"

#. (itstool) path: item/p
#: C/combobox.js.page:98 C/treeview_simple_liststore.js.page:107
msgid "<file>GObject.TYPE_BOOLEAN</file> -- True or false"
msgstr "<file>GObject.TYPE_BOOLEAN</file> -- αληθές ή ψευδές"

#. (itstool) path: item/p
#: C/combobox.js.page:99 C/treeview_simple_liststore.js.page:108
msgid ""
"<file>GObject.TYPE_FLOAT</file> -- A floating point number (one with a "
"decimal point)"
msgstr ""
"<file>GObject.TYPE_FLOAT</file> -- Ένας αριθμός κινητής υποδιαστολής (ένας "
"με δεκαδική υποδιαστολή)"

#. (itstool) path: item/p
#: C/combobox.js.page:100 C/treeview_simple_liststore.js.page:109
msgid "<file>GObject.TYPE_STRING</file> -- A string of letters and numbers"
msgstr ""
"<file>GObject.TYPE_STRING</file> -- Μια συμβολοσειρά γραμμάτων και αριθμών"

#. (itstool) path: note/p
#: C/combobox.js.page:102 C/treeview_simple_liststore.js.page:113
msgid ""
"You need to put the line <file>const GObject = imports.gi.GObject;</file> at "
"the start of your application's code, like we did in this example, if you "
"want to be able to use GObject types."
msgstr ""
"Χρειάζεται να βάλετε τη γραμμή <file>const GObject = imports.gi.GObject;</"
"file> στην αρχή του κώδικα της εφαρμογή σας, όπως κάναμε σε αυτό το "
"παράδειγμα, εάν θέλετε να μπορείτε να χρησιμοποιήσετε τύπους GObject."

#. (itstool) path: section/code
#: C/combobox.js.page:104
#, no-wrap
msgid ""
"\n"
"        // This array holds our list of options and their icons\n"
"        let options = [{ name: \"Select\" },\n"
"            { name: \"New\", icon: Gtk.STOCK_NEW },\n"
"            { name: \"Open\", icon: Gtk.STOCK_OPEN },\n"
"            { name: \"Save\", icon: Gtk.STOCK_SAVE }];\n"
"\n"
"        // Put the options in the liststore\n"
"        for (let i = 0; i &lt; options.length; i++ ) {\n"
"            let option = options[i];\n"
"            let iter = this._listStore.append();\n"
"            this._listStore.set (iter, [0], [option.name]);\n"
"            if ('icon' in option)\n"
"                this._listStore.set (iter, [1], [option.icon]);\n"
"        }\n"
msgstr ""
"\n"
"        // Αυτός ο πίνακας κρατά τη λίστα των επιλογών μας και των εικονιδίων τους\n"
"        let options = [{ name: \"Select\" },\n"
"            { name: \"New\", icon: Gtk.STOCK_NEW },\n"
"            { name: \"Open\", icon: Gtk.STOCK_OPEN },\n"
"            { name: \"Save\", icon: Gtk.STOCK_SAVE }];\n"
"\n"
"        // Τοποθέτηση των επιλογών στην αποθήκη λιστών\n"
"        for (let i = 0; i &lt; options.length; i++ ) {\n"
"            let option = options[i];\n"
"            let iter = this._listStore.append();\n"
"            this._listStore.set (iter, [0], [option.name]);\n"
"            if ('icon' in option)\n"
"                this._listStore.set (iter, [1], [option.icon]);\n"
"        }\n"

#. (itstool) path: section/p
#: C/combobox.js.page:120
msgid ""
"Here we create an array of the text options and their corresponding icons, "
"then put them into the ListStore in much the same way we would for a <link "
"xref=\"treeview_simple_liststore.js\">TreeView's</link> ListStore. We only "
"want to put an icon in if there's actually an icon in the options array, so "
"we make sure to check for that first."
msgstr ""
"Εδώ δημιουργούμε έναν πίνακα των επιλογών κειμένου και τα αντίστοιχα τους "
"εικονίδια, έπειτα τα βάζουμε στην αποθήκη λιστών (ListStore) με τον ίδιο "
"χοντρικά τρόπο που θα κάναμε για μία αποθήκη λιστών <link xref="
"\"treeview_simple_liststore.js\">της προβολής δένδρου</link>. Θέλουμε μόνο "
"να βάλουμε ένα εικονίδιο εάν υπάρχει πράγματι ένα εικονίδιο στον πίνακα "
"επιλογών, έτσι βεβαιωνόμαστε για να ελεγχθεί αυτό πρώτο."

#. (itstool) path: note/p
#: C/combobox.js.page:121
msgid ""
"\"Select\" isn't really an option so much as an invitation to click on our "
"ComboBox, so it doesn't need an icon."
msgstr ""
"Η \"Select\" δεν είναι πραγματικά μια επιλογή όσο μια πρόσκληση να πατήσουμε "
"στο ComboBox μας, έτσι δεν χρειάζεται ένα εικονίδιο."

#. (itstool) path: section/title
#: C/combobox.js.page:125
msgid "Creating the ComboBox"
msgstr "Δημιουργία των ComboBox"

#. (itstool) path: section/code
#: C/combobox.js.page:126
#, no-wrap
msgid ""
"\n"
"        // Create the combobox\n"
"        this._comboBox = new Gtk.ComboBox({\n"
"            model: this._listStore});\n"
msgstr ""
"\n"
"        // Δημιουργία του σύνθετου πλαισίου\n"
"        this._comboBox = new Gtk.ComboBox({\n"
"            model: this._listStore});\n"

#. (itstool) path: section/p
#: C/combobox.js.page:131
msgid ""
"Each ComboBox has an underlying \"model\" it takes all its options from. You "
"can use a TreeStore if you want to have a ComboBox with branching options. "
"In this case, we're just using the ListStore we already created."
msgstr ""
"Κάθε σύνθετο πλαίσιο έχει ένα υποκείμενο \"model\" από όπου παίρνει όλες τις "
"επιλογές του. Μπορείτε να χρησιμοποιήσετε μια αποθήκη δένδρου εάν θέλετε να "
"έχετε ένα σύνθετο πλαίσιο με επιλογές διακλάδωσης. Σε αυτήν την περίπτωση, "
"χρησιμοποιούμε απλά τη αποθήκη λιστών που ήδη δημιουργήσαμε."

#. (itstool) path: section/code
#: C/combobox.js.page:132
#, no-wrap
msgid ""
"\n"
"        // Create some cellrenderers for the items in each column\n"
"        let rendererPixbuf = new Gtk.CellRendererPixbuf();\n"
"        let rendererText = new Gtk.CellRendererText();\n"
"\n"
"        // Pack the renderers into the combobox in the order we want to see\n"
"        this._comboBox.pack_start (rendererPixbuf, false);\n"
"        this._comboBox.pack_start (rendererText, false);\n"
"\n"
"        // Set the renderers to use the information from our liststore\n"
"        this._comboBox.add_attribute (rendererText, \"text\", 0);\n"
"        this._comboBox.add_attribute (rendererPixbuf, \"stock_id\", 1);\n"
msgstr ""
"\n"
"        // Δημιουργία μερικών απεικονιστών κελιού για τα στοιχεία σε κάθε στήλη\n"
"        let rendererPixbuf = new Gtk.CellRendererPixbuf();\n"
"        let rendererText = new Gtk.CellRendererText();\n"
"\n"
"        // Συσκευασία των απεικονιστών στο σύνθετο πλαίσιο με τη σειρά που θέλουμε να δούμε\n"
"        this._comboBox.pack_start (rendererPixbuf, false);\n"
"        this._comboBox.pack_start (rendererText, false);\n"
"\n"
"        // Ορισμός των απεικονιστών για να χρησιμοποιήσουν τις πληροφορίες από την αποθήκη λιστών μας\n"
"        this._comboBox.add_attribute (rendererText, \"text\", 0);\n"
"        this._comboBox.add_attribute (rendererPixbuf, \"stock_id\", 1);\n"

#. (itstool) path: section/p
#: C/combobox.js.page:145
msgid ""
"This part, again, works much like creating CellRenderers and packing them "
"into the columns of a <link xref=\"treeview_simple_liststore.js\">TreeView</"
"link>. The biggest difference is that we don't need to create the ComboBox's "
"columns as separate objects. We just pack the CellRenderers into it in the "
"order we want them to show up, then tell them to pull information from the "
"ListStore (and what type of information we want them to expect)."
msgstr ""
"Αυτό το μέρος, πάλι, δουλεύει παρόμοια με τη δημιουργία απεικονιστών κελιών "
"(CellRenderers) και πακετάρισμα τους στις στήλες μιας <link xref="
"\"treeview_simple_liststore.js\">TreeView</link>. Η μεγαλύτερη διαφορά είναι "
"ότι δεν χρειαζόμαστε να δημιουργήσουμε τις στήλες του σύνθετου πλαισίου "
"(ComboBox) ως ξεχωριστά αντικείμενα. Απλά πακετάρουμε τους απεικονιστές "
"κελιών σε αυτό με τη σειρά που τα θέλουμε να εμφανιστούν, έπειτα τους λέμε "
"να πάρουν πληροφορίες από τη αποθήκη λιστών (ListStore) (και τι τύπο "
"πληροφορίας θέλουμε να τους περιμένει)."

#. (itstool) path: section/p
#: C/combobox.js.page:146
msgid ""
"We use a CellRendererText to show the text, and a CellRendererPixbuf to show "
"the icons. We can store the names of the icons' stock types as strings, but "
"when we display them we need a CellRenderer that's designed for pictures."
msgstr ""
"Χρησιμοποιούμε ένα κείμενο απεικονιστή κελιού (CellRendererText) για να "
"εμφανίσουμε το κείμενο και έναν απεικονιστή κελιού Pixbuf "
"(CellRendererPixbuf) για να προβάλουμε τα εικονίδια. Μπορούμε να "
"αποθηκεύσουμε τα ονόματα τύπων παρακαταθήκης των εικονιδίων ως "
"συμβολοσειρές, αλλά όταν τα εμφανίζουμε χρειαζόμαστε έναν απεικονιστή κελιού "
"(CellRenderer) που σχεδιάστηκε για εικόνες."

#. (itstool) path: note/p
#: C/combobox.js.page:147
msgid ""
"Just like with a TreeView, the \"model\" (in this case a ListStore) and the "
"\"view\" (in this case our ComboBox) are separate. Because of that, we can "
"do things like have the columns in one order in the ListStore, and then pack "
"the CellRenderers that correspond to those columns into the ComboBox in a "
"different order. We can even create a TreeView or other widget that shows "
"the information in the ListStore in a different way, without it affecting "
"our ComboBox."
msgstr ""
"Ακριβώς όπως με μια προβολή δένδρου (TreeView), το \"model\" (σε αυτήν την "
"περίπτωση μια αποθήκη λιστών (ListStore)) και η \"view\" (σε αυτήν την "
"περίπτωση το σύνθετο πλαίσιο (ComboBox) μας) είναι ξεχωριστά. Λόγω αυτού, "
"μπορούμε να κάνουμε πράγματα όπως να έχουμε τις στήλες σε μια σειρά στην "
"αποθήκη λιστών και έπειτα πακετάρουμε τους απεικονιστές κελιών "
"(CellRenderers) που αντιστοιχούν σε αυτές τις στήλες στο σύνθετο πλαίσιο με "
"διαφορετική σειρά. Μπορούμε ακόμα να δημιουργήσουμε μια προβολή δένδρου ή "
"άλλο γραφικό στοιχείο που εμφανίζει την πληροφορία στην αποθήκη λίστας με "
"διαφορετικό τρόπο, χωρίς αυτό να επηρεάζει το σύνθετο πλαίσιο."

#. (itstool) path: section/code
#: C/combobox.js.page:149
#, no-wrap
msgid ""
"\n"
"        // Set the first row in the combobox to be active on startup\n"
"        this._comboBox.set_active (0);\n"
"\n"
"        // Connect the combobox's 'changed' signal to our callback function\n"
"        this._comboBox.connect ('changed', Lang.bind (this, this._onComboChanged));\n"
msgstr ""
"\n"
"        // Ορισμός της πρώτης γραμμής στο σύνθετο πλαίσιο να είναι ενεργή στην έναρξη\n"
"        this._comboBox.set_active (0);\n"
"\n"
"        // Σύνδεση του σήματος του σύνθετου πλαισίου 'changed' στη συνάρτηση επανάκλησής μας \n"
"        this._comboBox.connect ('changed', Lang.bind (this, this._onComboChanged));\n"

#. (itstool) path: section/p
#: C/combobox.js.page:156
msgid ""
"We want the \"Select\" text to be the part people see at first, that gets "
"them to click on the ComboBox. So we set it to be the active entry. We also "
"connect the ComboBox's <file>changed</file> signal to a callback function, "
"so that any time someone clicks on a new option something happens. In this "
"case, we're just going to show a popup with a little haiku."
msgstr ""
"Θέλουμε το κείμενο \"Select\" να είναι το τμήμα που βλέπεται πρώτα, αυτό που "
"τα δέχεται στο πάτημα του ComboBox. Έτσι το ορίζουμε να είναι η ενεργή "
"καταχώριση. Επίσης συνδέουμε το σήμα <file>changed</file> του ComboBox σε "
"μια συνάρτηση επανάκλησης, έτσι ώστε οποτεδήποτε κάποιος πατά σε μια νέα "
"επιλογή κάτι να συμβαίνει. Σε αυτήν την περίπτωση, πρόκειται απλά να "
"εμφανίσουμε ένα αναδυόμενο με ένα μικρό ποίημα."

#. (itstool) path: section/code
#: C/combobox.js.page:158
#, no-wrap
msgid ""
"\n"
"        // Add the combobox to the window\n"
"        this._window.add (this._comboBox);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""
"\n"
"        // Προσθήκη του σύνθετου πλαισίου στο παράθυρο\n"
"        this._window.add (this._comboBox);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"

#. (itstool) path: section/p
#: C/combobox.js.page:166
msgid ""
"Finally, we add the ComboBox to the window, and tell the window to show "
"itself and everything inside it."
msgstr ""
"Τελικά, προσθέτουμε το ComboBox στο παράθυρο, έπειτα λέμε στο παράθυρο να "
"εμφανίσει τον εαυτόν του και όλα μέσα του."

#. (itstool) path: section/code
#: C/combobox.js.page:171
#, no-wrap
msgid ""
"\n"
"    _selected: function () {\n"
"\n"
"        // The silly pseudohaiku that we'll use for our messagedialog\n"
"        let haiku = [\"\",\n"
"            \"You ask for the new\\nwith no thought for the aged\\nlike fallen leaves trod.\",\n"
"            \"Like a simple clam\\nrevealing a lustrous pearl\\nit opens for you.\",\n"
"            \"A moment in time\\na memory on the breeze\\nthese things can't be saved.\"];\n"
msgstr ""
"\n"
"    _selected: function () {\n"
"\n"
"        // Το χαζό ψευδοποίημα που θα χρησιμοποιήσουμε για τον διάλογο μηνύματός μας\n"
"        let haiku = [\"\",\n"
"            \"You ask for the new\\nwith no thought for the aged\\nlike fallen leaves trod.\",\n"
"            \"Like a simple clam\\nrevealing a lustrous pearl\\nit opens for you.\",\n"
"            \"A moment in time\\na memory on the breeze\\nthese things can't be saved.\"];\n"

#. (itstool) path: section/p
#: C/combobox.js.page:180
msgid ""
"We're going to create a pop-up <link xref=\"messagedialog.js"
"\">MessageDialog</link>, which shows you a silly haiku based on which distro "
"you select. First, we create the array of haiku to use. Since the first "
"string in our ComboBox is just the \"Select\" message, we make the first "
"string in our array blank."
msgstr ""
"Πρόκειται να δημιουργήσουμε ένα αναδυόμενο <link xref=\"messagedialog.js"
"\">MessageDialog</link>, που σας εμφανίζει ένα χαζό ποίημα με βάση ποια "
"διανομή επιλέγετε. Πρώτα, δημιουργούμε τον πίνακα του ποιήματος για χρήση. "
"Αφού η πρώτη συμβολοσειρά στο ComboBox μας είναι μόνο το μήνυμα \"Select\", "
"κάνουμε την πρώτη συμβολοσειρά στον πίνακά μας κενή."

#. (itstool) path: section/code
#: C/combobox.js.page:182
#, no-wrap
msgid ""
"\n"
"        // Which combobox item is active?\n"
"        let activeItem = this._comboBox.get_active();\n"
"\n"
"        // No messagedialog if you choose \"Select\"\n"
"        if (activeItem != 0) {\n"
"            this._popUp = new Gtk.MessageDialog ({\n"
"                transient_for: this._window,\n"
"                modal: true,\n"
"                buttons: Gtk.ButtonsType.OK,\n"
"                message_type: Gtk.MessageType.INFO,\n"
"                text: haiku[activeItem]});\n"
"\n"
"            // Connect the OK button to a handler function\n"
"            this._popUp.connect ('response', Lang.bind (this, this._onDialogResponse));\n"
"\n"
"            // Show the messagedialog\n"
"            this._popUp.show();\n"
"        }\n"
"\n"
"    },\n"
msgstr ""
"\n"
"        // Ποιο στοιχείο του πλαισίου ελέγχου είναι ενεργό;\n"
"        let activeItem = this._comboBox.get_active();\n"
"\n"
"        // Κανένας διάλογος μηνύματος αν επιλέξετε \"Select\"\n"
"        if (activeItem != 0) {\n"
"            this._popUp = new Gtk.MessageDialog ({\n"
"                transient_for: this._window,\n"
"                modal: true,\n"
"                buttons: Gtk.ButtonsType.OK,\n"
"                message_type: Gtk.MessageType.INFO,\n"
"                text: haiku[activeItem]});\n"
"\n"
"            // Σύνδεση του κουμπιού ΕΝΤΑΞΕΙ σε μια συνάρτηση χειρισμού \n"
"            this._popUp.connect ('response', Lang.bind (this, this._onDialogResponse));\n"
"\n"
"            // Εμφάνιση του διαλόγου μηνύματος\n"
"            this._popUp.show();\n"
"        }\n"
"\n"
"    },\n"

#. (itstool) path: section/p
#: C/combobox.js.page:204
msgid ""
"Before showing a MessageDialog, we first test to make sure you didn't choose "
"the \"Select\" message. After that, we set its text to be the haiku in the "
"array that corresponds to the active entry in our ComboBoxText. We do that "
"using the <file>get_active</file> method, which returns the number ID of "
"your selection."
msgstr ""
"Πριν την προβολή ενός MessageDialog, δοκιμάζουμε πρώτα για να βεβαιωθούμε "
"ότι δεν επιλέξατε το μήνυμα \"Select\". Μετά από αυτό, ορίζουμε το κείμενο "
"του να είναι στο ποίημα στον πίνακα που αντιστοιχεί στην ενεργή καταχώριση "
"στο ComboBoxText μας. Το κάνουμε χρησιμοποιώντας τη μέθοδο <file>get_active</"
"file>, που επιστρέφει τον αριθμό ταυτότητας της επιλογής σας."

#. (itstool) path: note/p
#: C/combobox.js.page:205
msgid ""
"Other methods you can use include <file>get_active_id</file>, which returns "
"the text ID assigned by <file>append</file>, and <file>get_active_text</"
"file>, which returns the full text of the string you selected."
msgstr ""
"Άλλες μέθοδοι που μπορείτε να χρησιμοποιήσετε περιλαμβάνουν "
"<file>get_active_id,</file> που επιστρέφει το αναγνωριστικό κειμένου που "
"αποδόθηκε από <file>append</file> και <file>get_active_text,</file> που "
"επιστρέφει το πλήρες κείμενο της επιλεγμένης συμβολοσειράς."

#. (itstool) path: section/code
#: C/combobox.js.page:219
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new ComboBoxExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new ComboBoxExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/combobox.js.page:224
msgid ""
"Finally, we create a new instance of the finished ComboBoxExample class, and "
"set the application running."
msgstr ""
"Τελικά, δημιουργούμε ένα νέο στιγμιότυπο της ολοκληρωμένης κλάσης "
"ComboBoxExample και εκτελούμε την εφαρμογή."

#. (itstool) path: section/code
#: C/combobox.js.page:229
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ComboBoxExample = new Lang.Class ({\n"
"    Name: 'ComboBox Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jscombobox'});\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_width: 200,\n"
"            border_width: 10 });\n"
"\n"
"        // Create the liststore to put our options in\n"
"        this._listStore = new Gtk.ListStore();\n"
"        this._listStore.set_column_types ([\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING]);\n"
"\n"
"        // This array holds our list of options and their icons\n"
"        let options = [{ name: \"Select\" },\n"
"            { name: \"New\", icon: Gtk.STOCK_NEW },\n"
"            { name: \"Open\", icon: Gtk.STOCK_OPEN },\n"
"            { name: \"Save\", icon: Gtk.STOCK_SAVE }];\n"
"\n"
"        // Put the options in the liststore\n"
"        for (let i = 0; i &lt; options.length; i++ ) {\n"
"            let option = options[i];\n"
"            let iter = this._listStore.append();\n"
"            this._listStore.set (iter, [0], [option.name]);\n"
"            if ('icon' in option)\n"
"                this._listStore.set (iter, [1], [option.icon]);\n"
"        }\n"
"\n"
"        // Create the combobox\n"
"        this._comboBox = new Gtk.ComboBox({\n"
"            model: this._listStore});\n"
"\n"
"        // Create some cellrenderers for the items in each column\n"
"        let rendererPixbuf = new Gtk.CellRendererPixbuf();\n"
"        let rendererText = new Gtk.CellRendererText();\n"
"\n"
"        // Pack the renderers into the combobox in the order we want to see\n"
"        this._comboBox.pack_start (rendererPixbuf, false);\n"
"        this._comboBox.pack_start (rendererText, false);\n"
"\n"
"        // Set the renderers to use the information from our liststore\n"
"        this._comboBox.add_attribute (rendererText, \"text\", 0);\n"
"        this._comboBox.add_attribute (rendererPixbuf, \"stock_id\", 1);\n"
"\n"
"        // Set the first row in the combobox to be active on startup\n"
"        this._comboBox.set_active (0);\n"
"\n"
"        // Connect the combobox's 'changed' signal to our callback function\n"
"        this._comboBox.connect ('changed', Lang.bind (this, this._onComboChanged));\n"
"\n"
"        // Add the combobox to the window\n"
"        this._window.add (this._comboBox);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onComboChanged: function () {\n"
"\n"
"        // The silly pseudohaiku that we'll use for our messagedialog\n"
"        let haiku = [\"\",\n"
"            \"You ask for the new\\nwith no thought for the aged\\nlike fallen leaves trod.\",\n"
"            \"Like a simple clam\\nrevealing a lustrous pearl\\nit opens for you.\",\n"
"            \"A moment in time\\na memory on the breeze\\nthese things can't be saved.\"];\n"
"\n"
"        // Which combobox item is active?\n"
"        let activeItem = this._comboBox.get_active();\n"
"\n"
"        // No messagedialog if you choose \"Select\"\n"
"        if (activeItem != 0) {\n"
"            this._popUp = new Gtk.MessageDialog ({\n"
"                transient_for: this._window,\n"
"                modal: true,\n"
"                buttons: Gtk.ButtonsType.OK,\n"
"                message_type: Gtk.MessageType.INFO,\n"
"                text: haiku[activeItem]});\n"
"\n"
"            // Connect the OK button to a handler function\n"
"            this._popUp.connect ('response', Lang.bind (this, this._onDialogResponse));\n"
"\n"
"            // Show the messagedialog\n"
"            this._popUp.show();\n"
"        }\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onDialogResponse: function () {\n"
"\n"
"        this._popUp.destroy ();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ComboBoxExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ComboBoxExample = new Lang.Class ({\n"
"    Name: 'ComboBox Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jscombobox'});\n"
"\n"
"        // Σύνδεση των σημάτων 'activate' και 'startup' στις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function () {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_width: 200,\n"
"            border_width: 10 });\n"
"\n"
"        // Δημιουργία της αποθήκης λιστών για να τοποθετηθούν μέσα οι επιλογές μας\n"
"        this._listStore = new Gtk.ListStore();\n"
"        this._listStore.set_column_types ([\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING]);\n"
"\n"
"        // Αυτός ο πίνακας κρατά τη λίστα των επιλογών μας και τα εικονίδιά τους \n"
"        let options = [{ name: \"Select\" },\n"
"            { name: \"New\", icon: Gtk.STOCK_NEW },\n"
"            { name: \"Open\", icon: Gtk.STOCK_OPEN },\n"
"            { name: \"Save\", icon: Gtk.STOCK_SAVE }];\n"
"\n"
"        // Τοποθέτηση των επιλογών στη αποθήκη λιστών\n"
"        for (let i = 0; i &lt; options.length; i++ ) {\n"
"            let option = options[i];\n"
"            let iter = this._listStore.append();\n"
"            this._listStore.set (iter, [0], [option.name]);\n"
"            if ('icon' in option)\n"
"                this._listStore.set (iter, [1], [option.icon]);\n"
"        }\n"
"\n"
"        // Δημιουργία του σύνθετου πλαισίου\n"
"        this._comboBox = new Gtk.ComboBox({\n"
"            model: this._listStore});\n"
"\n"
"        // Δημιουργία μερικών απεικονιστών κελιών για τα στοιχεία σε κάθε στήλη\n"
"        let rendererPixbuf = new Gtk.CellRendererPixbuf();\n"
"        let rendererText = new Gtk.CellRendererText();\n"
"\n"
"        // Συσκευασία των απεικονιστών στο σύνθετο πλαίσιο με την επιθυμητή σειρά\n"
"        this._comboBox.pack_start (rendererPixbuf, false);\n"
"        this._comboBox.pack_start (rendererText, false);\n"
"\n"
"        // Ορισμός των απεικονιστών για να χρησιμοποιήσουν τις πληροφορίες από την αποθήκη των λιστών μας\n"
"        this._comboBox.add_attribute (rendererText, \"text\", 0);\n"
"        this._comboBox.add_attribute (rendererPixbuf, \"stock_id\", 1);\n"
"\n"
"        // Ορισμός της πρώτης γραμμής στο σύνθετο πλαίσιο να είναι ενεργή στην έναρξη\n"
"        this._comboBox.set_active (0);\n"
"\n"
"        // Σύνδεση του σήματος του σύνθετου πλαισίου 'changed' στη συνάρτηση επανάκλησής μας\n"
"        this._comboBox.connect ('changed', Lang.bind (this, this._onComboChanged));\n"
"\n"
"        // Προσθήκη του σύνθετου πλαισίου στο παράθυρο\n"
"        this._window.add (this._comboBox);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onComboChanged: function () {\n"
"\n"
"        // Το χαζό ψευδοποίημα που θα χρησιμοποιήσουμε για τον διάλογο μηνυμάτων μας\n"
"        let haiku = [\"\",\n"
"            \"You ask for the new\\nwith no thought for the aged\\nlike fallen leaves trod.\",\n"
"            \"Like a simple clam\\nrevealing a lustrous pearl\\nit opens for you.\",\n"
"            \"A moment in time\\na memory on the breeze\\nthese things can't be saved.\"];\n"
"\n"
"        // Ποιο στοιχείο του σύνθετου πλαισίου είναι ενεργό;\n"
"        let activeItem = this._comboBox.get_active();\n"
"\n"
"        // Κανένας διάλογος μηνύματος αν επιλέξετε \"Select\"\n"
"        if (activeItem != 0) {\n"
"            this._popUp = new Gtk.MessageDialog ({\n"
"                transient_for: this._window,\n"
"                modal: true,\n"
"                buttons: Gtk.ButtonsType.OK,\n"
"                message_type: Gtk.MessageType.INFO,\n"
"                text: haiku[activeItem]});\n"
"\n"
"            // Σύνδεση του κουμπιού ΕΝΤΑΞΕΙ σε συνάρτηση χειρισμού\n"
"            this._popUp.connect ('response', Lang.bind (this, this._onDialogResponse));\n"
"\n"
"            // Εμφάνιση του διαλόγου μηνύματος\n"
"            this._popUp.show();\n"
"        }\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onDialogResponse: function () {\n"
"\n"
"        this._popUp.destroy ();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new ComboBoxExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/combobox.js.page:240
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"CellRendererPixbuf.html\">Gtk.CellRendererPixbuf</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"CellRendererPixbuf.html\">Gtk.CellRendererPixbuf</link>"

#. (itstool) path: item/p
#: C/combobox.js.page:241 C/treeview_simple_liststore.js.page:279
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"CellRendererText.html\">Gtk.CellRendererText</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"CellRendererText.html\">Gtk.CellRendererText</link>"

#. (itstool) path: item/p
#: C/combobox.js.page:242
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ComboBox.html"
"\">Gtk.ComboBox</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ComboBox.html"
"\">Gtk.ComboBox</link>"

#. (itstool) path: item/p
#: C/combobox.js.page:243 C/treeview_simple_liststore.js.page:280
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ListStore.html"
"\">Gtk.ListStore</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ListStore.html"
"\">Gtk.ListStore</link>"

#. (itstool) path: item/p
#: C/combobox.js.page:245 C/treeview_simple_liststore.js.page:281
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TreeIter.html"
"\">Gtk.TreeIter</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TreeIter.html"
"\">Gtk.TreeIter</link>"

#. (itstool) path: info/title
#: C/combobox.py.page:8 C/combobox_multicolumn.py.page:8
msgctxt "text"
msgid "ComboBox (Python)"
msgstr "ComboBox (Python)"

#. (itstool) path: page/title
#: C/combobox.py.page:23
msgid "ComboBox (one column)"
msgstr "ComboBox (μία στήλη)"

#. (itstool) path: page/p
#: C/combobox.py.page:25 C/combobox_multicolumn.py.page:24
#: C/combobox_multicolumn.vala.page:24
msgid "This ComboBox prints to the terminal your selection when you change it."
msgstr ""
"Αυτό το ComboBox τυπώνει στον τερματικό την επιλογή σας όταν την αλλάζετε."

#. (itstool) path: section/code
#: C/combobox.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"distros = [[\"Select distribution\"], [\"Fedora\"], [\"Mint\"], [\"Suse\"]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(200, -1)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data in the model, of type string\n"
"        listmodel = Gtk.ListStore(str)\n"
"        # append the data in the model\n"
"        for i in range(len(distros)):\n"
"            listmodel.append(distros[i])\n"
"\n"
"        # a combobox to see the data stored in the model\n"
"        combobox = Gtk.ComboBox(model=listmodel)\n"
"\n"
"        # a cellrenderer to render the text\n"
"        cell = Gtk.CellRendererText()\n"
"\n"
"        # pack the cell into the beginning of the combobox, allocating\n"
"        # no more space than needed\n"
"        combobox.pack_start(cell, False)\n"
"        # associate a property (\"text\") of the cellrenderer (cell) to a column (column 0)\n"
"        # in the model used by the combobox\n"
"        combobox.add_attribute(cell, \"text\", 0)\n"
"\n"
"        # the first row is the active one by default at the beginning\n"
"        combobox.set_active(0)\n"
"\n"
"        # connect the signal emitted when a row is selected to the callback\n"
"        # function\n"
"        combobox.connect(\"changed\", self.on_changed)\n"
"\n"
"        # add the combobox to the window\n"
"        self.add(combobox)\n"
"\n"
"    def on_changed(self, combo):\n"
"        # if the row selected is not the first one, write its value on the\n"
"        # terminal\n"
"        if combo.get_active() != 0:\n"
"            print \"You chose \" + str(distros[combo.get_active()][0]) + \".\"\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"distros = [[\"Select distribution\"], [\"Fedora\"], [\"Mint\"], [\"Suse\"]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(200, -1)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data in the model, of type string\n"
"        listmodel = Gtk.ListStore(str)\n"
"        # append the data in the model\n"
"        for i in range(len(distros)):\n"
"            listmodel.append(distros[i])\n"
"\n"
"        # a combobox to see the data stored in the model\n"
"        combobox = Gtk.ComboBox(model=listmodel)\n"
"\n"
"        # a cellrenderer to render the text\n"
"        cell = Gtk.CellRendererText()\n"
"\n"
"        # pack the cell into the beginning of the combobox, allocating\n"
"        # no more space than needed\n"
"        combobox.pack_start(cell, False)\n"
"        # associate a property (\"text\") of the cellrenderer (cell) to a column (column 0)\n"
"        # in the model used by the combobox\n"
"        combobox.add_attribute(cell, \"text\", 0)\n"
"\n"
"        # the first row is the active one by default at the beginning\n"
"        combobox.set_active(0)\n"
"\n"
"        # connect the signal emitted when a row is selected to the callback\n"
"        # function\n"
"        combobox.connect(\"changed\", self.on_changed)\n"
"\n"
"        # add the combobox to the window\n"
"        self.add(combobox)\n"
"\n"
"    def on_changed(self, combo):\n"
"        # if the row selected is not the first one, write its value on the\n"
"        # terminal\n"
"        if combo.get_active() != 0:\n"
"            print \"You chose \" + str(distros[combo.get_active()][0]) + \".\"\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/combobox.py.page:35 C/combobox_multicolumn.py.page:35
msgid "Useful methods for a ComboBox widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο σύνθετουπλαισίου"

#. (itstool) path: section/p
#: C/combobox.py.page:36 C/combobox_multicolumn.py.page:36
msgid ""
"The ComboBox widget is designed around a <em>Model/View/Controller</em> "
"design: the <em>Model</em> stores the data; the <em>View</em> gets change "
"notifications and displays the content of the model; the <em>Controller</"
"em>, finally, changes the state of the model and notifies the view of these "
"changes. For more information and for a list of useful methods for ComboBox "
"see <link xref=\"model-view-controller.py\"/>."
msgstr ""
"Το γραφικό στοιχείο ComboBox σχεδιάστηκε γύρω από ένα σχέδιο <em>προτύπου/"
"προβολής/ελεγκτή</em>: το <em>πρότυπο</em> αποθηκεύει τα δεδομένα· το "
"<em>Προβολή</em> παίρνει ειδοποιήσεις αλλαγής και εμφανίζει το περιεχόμενο "
"του προτύπου· ο <em>ελεγκτής</em>, τελικά, αλλάζει την κατάσταση του "
"προτύπου και ειδοποιεί την προβολή για αυτές τις αλλαγές. Για περισσότερες "
"πληροφορίες και για μια λίστα χρήσιμων μεθόδων για ComboBox, δείτε <link "
"xref=\"model-view-controller.py\"/>."

#. (itstool) path: section/p
#: C/combobox.py.page:37
msgid ""
"In line 35 the <code>\"changed\"</code> signal is connected to the callback "
"function <code>on_changed()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"Στη γραμμή 35 το σήμα <code>\"changed\"</code> συνδέεται με τη συνάρτηση "
"επανάκλησης <code>on_changed()</code> χρησιμοποιώντας <code><var>widget</"
"var>.connect(<var>signal</var>, <var>callback function</var>)</code>. Δείτε "
"<link xref=\"signals-callbacks.py\"/> για μια πιο λεπτομερή εξήγηση."

#. (itstool) path: item/p
#: C/combobox.py.page:45 C/combobox_multicolumn.py.page:44
#: C/model-view-controller.py.page:190
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkComboBox.html"
"\">GtkComboBox</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkComboBox.html"
"\">GtkComboBox</link>"

#. (itstool) path: item/p
#: C/combobox.py.page:46 C/combobox_multicolumn.py.page:45
#: C/treeview_advanced_liststore.py.page:46
#: C/treeview_simple_liststore.py.page:47
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkListStore.html"
"\">GtkListStore</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkListStore.html"
"\">GtkListStore</link>"

#. (itstool) path: item/p
#: C/combobox.py.page:47 C/combobox_multicolumn.py.page:46
#: C/treeview_advanced_liststore.py.page:47
#: C/treeview_cellrenderertoggle.py.page:47
#: C/treeview_simple_liststore.py.page:48 C/treeview_treestore.py.page:47
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRendererText."
"html\">GtkCellRendererText</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRendererText."
"html\">GtkCellRendererText</link>"

#. (itstool) path: item/p
#: C/combobox.py.page:48
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellLayout.html"
"\">GtkCellLayout</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellLayout.html"
"\">GtkCellLayout</link>"

#. (itstool) path: item/p
#: C/combobox.py.page:49 C/combobox_multicolumn.py.page:49
#: C/treeview_advanced_liststore.py.page:49
#: C/treeview_simple_liststore.py.page:50
msgid ""
"<link href=\"http://git.gnome.org/browse/pygobject/tree/gi/overrides/Gtk.py"
"\">pygobject - Python bindings for GObject Introspection</link>"
msgstr ""
"<link href=\"http://git.gnome.org/browse/pygobject/tree/gi/overrides/Gtk.py"
"\">pygobject - δεσμεύσεις Python για αυτοέλεγχο GObject</link>"

#. (itstool) path: info/title
#: C/combobox.vala.page:8 C/combobox_multicolumn.vala.page:8
msgctxt "text"
msgid "ComboBox (Vala)"
msgstr "ComboBox (Vala)"

#. (itstool) path: page/code
#: C/combobox.vala.page:25
#, no-wrap
msgid ""
"/* A window in the application */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* An instance array of linux distributions belonging to this window. */\n"
"\tstring[] distros = {\"Select distribution\", \"Fedora\", \"Mint\", \"Suse\"};\n"
"\n"
"\t/* This enum makes the code more readable when we refer to\n"
"\t * the column as Column.DISTRO, instead of just 0.\n"
"\t */\n"
"\tenum Column {\n"
"\t\tDISTRO\n"
"\t}\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Welcome to GNOME\");\n"
"\n"
"\t\tthis.set_default_size (200, -1);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tGtk.ListStore liststore = new Gtk.ListStore (1, typeof (string));\n"
"\n"
"\t\tfor (int i = 0; i &lt; distros.length; i++){\n"
"\t\t\tGtk.TreeIter iter;\n"
"\t\t\tliststore.append (out iter);\n"
"\t\t\tliststore.set (iter, Column.DISTRO, distros[i]);\n"
"\t\t}\n"
"\n"
"\t\tGtk.ComboBox combobox = new Gtk.ComboBox.with_model (liststore);\n"
"\t\tGtk.CellRendererText cell = new Gtk.CellRendererText ();\n"
"\t\tcombobox.pack_start (cell, false);\n"
"\n"
"\t\tcombobox.set_attributes (cell, \"text\", Column.DISTRO);\n"
"\n"
"\t\t/* Set the first item in the list to be selected (active). */\n"
"\t\tcombobox.set_active (0);\n"
"\n"
"\t\t/* Connect the 'changed' signal of the combobox\n"
"\t\t * to the signal handler (aka. callback function.\n"
"\t\t */\n"
"\t\tcombobox.changed.connect (this.item_changed);\n"
"\n"
"\t\t/* Add the combobox to this window */\n"
"\t\tthis.add (combobox);\n"
"\t\tcombobox.show ();\n"
"\t}\n"
"\n"
"\t/* Signal handler for the 'changed' signal of the combobox. */\n"
"\tvoid item_changed (Gtk.ComboBox combo) {\n"
"\t\tif (combo.get_active () !=0) {\n"
"\t\t\tprint (\"You chose \" + distros [combo.get_active ()] +\"\\n\");\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication : Gtk.Application {\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the activate signal of GLib.Application,\n"
"\t * which is inherited by Gtk.Application.\n"
"\t */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create the window of this application\n"
"\t\t * and show it.\n"
"\t\t */\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* Ένα παράθυρο στην εφαρμογή */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Ένας πίνακας στιγμιοτύπων των διανομών λίνουξ που ανήκουν σε αυτό το παράθυρο. */\n"
"\tstring[] distros = {\"Select distribution\", \"Fedora\", \"Mint\", \"Suse\"};\n"
"\n"
"\t/* Αυτή η απαρίθμηση κάνει τον κώδικα πιο ευανάγνωστο, όταν αναφερόμαστε\n"
"\t * στη στήλη ως Column.DISTRO, αντί για απλώς 0.\n"
"\t */\n"
"\tenum Column {\n"
"\t\tDISTRO\n"
"\t}\n"
"\n"
"\t/* Κατασκευαστής */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Welcome to GNOME\");\n"
"\n"
"\t\tthis.set_default_size (200, -1);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tGtk.ListStore liststore = new Gtk.ListStore (1, typeof (string));\n"
"\n"
"\t\tfor (int i = 0; i &lt; distros.length; i++){\n"
"\t\t\tGtk.TreeIter iter;\n"
"\t\t\tliststore.append (out iter);\n"
"\t\t\tliststore.set (iter, Column.DISTRO, distros[i]);\n"
"\t\t}\n"
"\n"
"\t\tGtk.ComboBox combobox = new Gtk.ComboBox.with_model (liststore);\n"
"\t\tGtk.CellRendererText cell = new Gtk.CellRendererText ();\n"
"\t\tcombobox.pack_start (cell, false);\n"
"\n"
"\t\tcombobox.set_attributes (cell, \"text\", Column.DISTRO);\n"
"\n"
"\t\t/* Ορισμός του πρώτου στοιχείου στη λίστα για επιλογή (ενεργό). */\n"
"\t\tcombobox.set_active (0);\n"
"\n"
"\t\t/* Σύνδεση του σήματος 'changed' του σύνθετου πλαισίου\n"
"\t\t * με τον χειριστή σήματος (aka. συνάρτηση επανάκλησης.\n"
"\t\t */\n"
"\t\tcombobox.changed.connect (this.item_changed);\n"
"\n"
"\t\t/* Προσθήκη του σύνθετου πλαισίου σε αυτό το παράθυρο */\n"
"\t\tthis.add (combobox);\n"
"\t\tcombobox.show ();\n"
"\t}\n"
"\n"
"\t/* Χειριστής σήματος για το σήμα 'changed' του σύνθετου πλαισίου. */\n"
"\tvoid item_changed (Gtk.ComboBox combo) {\n"
"\t\tif (combo.get_active () !=0) {\n"
"\t\t\tprint (\"You chose \" + distros [combo.get_active ()] +\"\\n\");\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* Αυτή είναι η εφαρμογή */\n"
"class MyApplication : Gtk.Application {\n"
"\n"
"\t/* Κατασκευαστής */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Αντικατάσταση του ενεργού σήματος της GLib.Application,\n"
"\t * που κληρονομήθηκε από την Gtk.Application.\n"
"\t */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Δημιουργία του παραθύρου αυτής της εφαρμογής\n"
"\t\t * και εμφάνισή του.\n"
"\t\t */\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"}\n"
"\n"
"/* Το κύριο δημιουργεί και τρέχει την εφαρμογή */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/combobox.vala.page:30 C/treeview_simple_liststore.vala.page:33
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ListStore.html\">Gtk."
"ListStore</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ListStore.html\">Gtk."
"ListStore</link>"

#. (itstool) path: item/p
#: C/combobox.vala.page:31
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ComboBox.html\">Gtk."
"ComboBox</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ComboBox.html\">Gtk."
"ComboBox</link>"

#. (itstool) path: item/p
#: C/combobox.vala.page:32
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CellRendererText.html\">Gtk."
"CellRendererText</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CellRendererText.html\">Gtk."
"CellRendererText</link>"

#. (itstool) path: item/p
#: C/combobox.vala.page:33
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CellLayout.set_attributes."
"html\">set_attributes</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CellLayout.set_attributes."
"html\">set_attributes</link>"

#. (itstool) path: page/title
#: C/combobox_multicolumn.py.page:22 C/combobox_multicolumn.vala.page:22
msgid "ComboBox (two columns)"
msgstr "ComboBox (δύο στήλες)"

#. (itstool) path: section/code
#: C/combobox_multicolumn.py.page:30
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"actions = [[\"Select\", None],\n"
"           [\"New\", Gtk.STOCK_NEW],\n"
"           [\"Open\", Gtk.STOCK_OPEN],\n"
"           [\"Save\", Gtk.STOCK_SAVE]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(200, -1)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data in the model, of type string on two columns\n"
"        listmodel = Gtk.ListStore(str, str)\n"
"        # append the data\n"
"        for i in range(len(actions)):\n"
"            listmodel.append(actions[i])\n"
"\n"
"        # a combobox to see the data stored in the model\n"
"        combobox = Gtk.ComboBox(model=listmodel)\n"
"\n"
"        # cellrenderers to render the data\n"
"        renderer_pixbuf = Gtk.CellRendererPixbuf()\n"
"        renderer_text = Gtk.CellRendererText()\n"
"\n"
"        # we pack the cell into the beginning of the combobox, allocating\n"
"        # no more space than needed;\n"
"        # first the image, then the text;\n"
"        # note that it does not matter in which order they are in the model,\n"
"        # the visualization is decided by the order of the cellrenderers\n"
"        combobox.pack_start(renderer_pixbuf, False)\n"
"        combobox.pack_start(renderer_text, False)\n"
"\n"
"        # associate a property of the cellrenderer to a column in the model\n"
"        # used by the combobox\n"
"        combobox.add_attribute(renderer_text, \"text\", 0)\n"
"        combobox.add_attribute(renderer_pixbuf, \"stock_id\", 1)\n"
"\n"
"        # the first row is the active one at the beginning\n"
"        combobox.set_active(0)\n"
"\n"
"        # connect the signal emitted when a row is selected to the callback\n"
"        # function\n"
"        combobox.connect(\"changed\", self.on_changed)\n"
"\n"
"        # add the combobox to the window\n"
"        self.add(combobox)\n"
"\n"
"    def on_changed(self, combo):\n"
"        # if the row selected is not the first one, write on the terminal\n"
"        # the value of the first column in the model\n"
"        if combo.get_active() != 0:\n"
"            print \"You chose \" + str(actions[combo.get_active()][0]) + \"\\n\"\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"actions = [[\"Select\", None],\n"
"           [\"New\", Gtk.STOCK_NEW],\n"
"           [\"Open\", Gtk.STOCK_OPEN],\n"
"           [\"Save\", Gtk.STOCK_SAVE]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(200, -1)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data in the model, of type string on two columns\n"
"        listmodel = Gtk.ListStore(str, str)\n"
"        # append the data\n"
"        for i in range(len(actions)):\n"
"            listmodel.append(actions[i])\n"
"\n"
"        # a combobox to see the data stored in the model\n"
"        combobox = Gtk.ComboBox(model=listmodel)\n"
"\n"
"        # cellrenderers to render the data\n"
"        renderer_pixbuf = Gtk.CellRendererPixbuf()\n"
"        renderer_text = Gtk.CellRendererText()\n"
"\n"
"        # we pack the cell into the beginning of the combobox, allocating\n"
"        # no more space than needed;\n"
"        # first the image, then the text;\n"
"        # note that it does not matter in which order they are in the model,\n"
"        # the visualization is decided by the order of the cellrenderers\n"
"        combobox.pack_start(renderer_pixbuf, False)\n"
"        combobox.pack_start(renderer_text, False)\n"
"\n"
"        # associate a property of the cellrenderer to a column in the model\n"
"        # used by the combobox\n"
"        combobox.add_attribute(renderer_text, \"text\", 0)\n"
"        combobox.add_attribute(renderer_pixbuf, \"stock_id\", 1)\n"
"\n"
"        # the first row is the active one at the beginning\n"
"        combobox.set_active(0)\n"
"\n"
"        # connect the signal emitted when a row is selected to the callback\n"
"        # function\n"
"        combobox.connect(\"changed\", self.on_changed)\n"
"\n"
"        # add the combobox to the window\n"
"        self.add(combobox)\n"
"\n"
"    def on_changed(self, combo):\n"
"        # if the row selected is not the first one, write on the terminal\n"
"        # the value of the first column in the model\n"
"        if combo.get_active() != 0:\n"
"            print \"You chose \" + str(actions[combo.get_active()][0]) + \"\\n\"\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/p
#: C/combobox_multicolumn.py.page:37
msgid ""
"In line 45 the <code>\"changed\"</code> signal is connected to the callback "
"function <code>on_changed()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"Στη γραμμή 45 το σήμα <code>\"changed\"</code> συνδέεται με τη συνάρτηση "
"επανάκλησης <code>on_changed()</code> χρησιμοποιώντας <code><var>widget</"
"var>.connect(<var>signal</var>, <var>callback function</var>)</code>. Δείτε "
"<link xref=\"signals-callbacks.py\"/> για μια πιο λεπτομερή εξήγηση."

#. (itstool) path: item/p
#: C/combobox_multicolumn.py.page:47
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRendererPixbuf."
"html\">GtkCellRendererPixbuf</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRendererPixbuf."
"html\">GtkCellRendererPixbuf</link>"

#. (itstool) path: item/p
#: C/combobox_multicolumn.py.page:48 C/combobox_multicolumn.vala.page:42
#: C/toolbar.py.page:58
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/gtk3-Stock-Items.html"
"\">Stock Items</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/gtk3-Stock-Items.html"
"\">Stock Items</link>"

#. (itstool) path: section/code
#: C/combobox_multicolumn.vala.page:30
#, no-wrap
msgid ""
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tstring[] file = {\"Select\", \"New\", \"Open\", \"Save\"};\n"
"\tstring[] stock_item = {\"\",\"gtk-new\", \"gtk-open\", \"gtk-save\"};\n"
"\n"
"\tenum Column {\n"
"\t\tFILE,\n"
"\t\tSTOCK_ITEM\t\n"
"\t}\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Welcome to GNOME\");\n"
"\n"
"\t\tthis.set_default_size (200, -1);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tGtk.ListStore liststore = new Gtk.ListStore (2, typeof (string), typeof (string));\n"
"\n"
"\t\tfor (int i = 0; i &lt; file.length; i++){\n"
"\t\t\tGtk.TreeIter iter;\n"
"\t\t\tliststore.append (out iter);\n"
"\t\t\tliststore.set (iter, Column.FILE, file[i]);\n"
"\t\t\tliststore.set (iter, Column.STOCK_ITEM, stock_item[i]);\n"
"\t\t}\n"
"\n"
"\t\tGtk.ComboBox combobox = new Gtk.ComboBox.with_model (liststore);\n"
"\n"
"\t\t/* CellRenderers render the data. */\n"
"\t\tGtk.CellRendererText cell = new Gtk.CellRendererText ();\n"
"\t\tGtk.CellRendererPixbuf cell_pb = new Gtk.CellRendererPixbuf ();\n"
"\t\t\n"
"                /* we pack the cell into the beginning of the combobox, allocating\n"
"\t\t * no more space than needed;\n"
"\t\t * first the image, then the text;\n"
"\t\t * note that it does not matter in which order they are in the model,\n"
"\t\t * the visualization is decided by the order of the cellrenderers\n"
"\t\t */\n"
"\t\tcombobox.pack_start (cell_pb, false);\n"
"\t\tcombobox.pack_start (cell, false);\n"
"\n"
"\t\t/* associate a property of the cellrenderer to a column in the model\n"
"\t\t * used by the combobox\n"
"\t\t */\n"
"\t\tcombobox.set_attributes (cell_pb, \"stock_id\", Column.STOCK_ITEM);\n"
"\t\tcombobox.set_attributes (cell, \"text\", Column.FILE);\n"
"\n"
"\t\t/* Set the first item in the list to be selected (active). */\n"
"\t\tcombobox.set_active (0);\n"
"\n"
"\t\t/* Connect the 'changed' signal of the combobox\n"
"\t\t * to the signal handler (aka. callback function.\n"
"\t\t */\n"
"\t\tcombobox.changed.connect (this.item_changed);\n"
"\n"
"\t\t/* Add the combobox to this window */\n"
"\t\tthis.add (combobox);\n"
"\t\tcombobox.show ();\n"
"\t}\n"
"\n"
"\tvoid item_changed (Gtk.ComboBox combo) {\n"
"\t\tif (combo.get_active () !=0) {\n"
"\t\t\tprint (\"You chose \" + file [combo.get_active ()] +\"\\n\");\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication : Gtk.Application {\n"
"        protected override void activate () {\n"
"                new MyWindow (this).show ();\n"
"        }\n"
"}\n"
"\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tstring[] file = {\"Select\", \"New\", \"Open\", \"Save\"}·\n"
"\tstring[] stock_item = {\"\",\"gtk-new\", \"gtk-open\", \"gtk-save\"}·\n"
"\n"
"\tenum Column {\n"
"\t\tFILE,\n"
"\t\tSTOCK_ITEM\t\n"
"\t}\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Welcome to GNOME\")·\n"
"\n"
"\t\tthis.set_default_size (200, -1)·\n"
"\t\tthis.border_width = 10·\n"
"\n"
"\t\tGtk.ListStore liststore = new Gtk.ListStore (2, typeof (string), typeof (string))·\n"
"\n"
"\t\tfor (int i = 0· i &lt; file.length· i++){\n"
"\t\t\tGtk.TreeIter iter·\n"
"\t\t\tliststore.append (out iter)·\n"
"\t\t\tliststore.set (iter, Column.FILE, file[i])·\n"
"\t\t\tliststore.set (iter, Column.STOCK_ITEM, stock_item[i])·\n"
"\t\t}\n"
"\n"
"\t\tGtk.ComboBox combobox = new Gtk.ComboBox.with_model (liststore)·\n"
"\n"
"\t\t/* CellRenderers render the data. */\n"
"\t\tGtk.CellRendererText cell = new Gtk.CellRendererText ()·\n"
"\t\tGtk.CellRendererPixbuf cell_pb = new Gtk.CellRendererPixbuf ()·\n"
"\t\t\n"
"                /* we pack the cell into the beginning of the combobox, allocating\n"
"\t\t * no more space than needed·\n"
"\t\t * first the image, then the text·\n"
"\t\t * note that it does not matter in which order they are in the model,\n"
"\t\t * the visualization is decided by the order of the cellrenderers\n"
"\t\t */\n"
"\t\tcombobox.pack_start (cell_pb, false)·\n"
"\t\tcombobox.pack_start (cell, false)·\n"
"\n"
"\t\t/* associate a property of the cellrenderer to a column in the model\n"
"\t\t * used by the combobox\n"
"\t\t */\n"
"\t\tcombobox.set_attributes (cell_pb, \"stock_id\", Column.STOCK_ITEM)·\n"
"\t\tcombobox.set_attributes (cell, \"text\", Column.FILE)·\n"
"\n"
"\t\t/* Set the first item in the list to be selected (active). */\n"
"\t\tcombobox.set_active (0)·\n"
"\n"
"\t\t/* Connect the 'changed' signal of the combobox\n"
"\t\t * to the signal handler (aka. callback function.\n"
"\t\t */\n"
"\t\tcombobox.changed.connect (this.item_changed)·\n"
"\n"
"\t\t/* Add the combobox to this window */\n"
"\t\tthis.add (combobox)·\n"
"\t\tcombobox.show ()·\n"
"\t}\n"
"\n"
"\tvoid item_changed (Gtk.ComboBox combo) {\n"
"\t\tif (combo.get_active () !=0) {\n"
"\t\t\tprint (\"You chose \" + file [combo.get_active ()] +\"\\n\")·\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication : Gtk.Application {\n"
"        protected override void activate () {\n"
"                new MyWindow (this).show ()·\n"
"        }\n"
"}\n"
"\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args)·\n"
"}\n"

#. (itstool) path: item/p
#: C/combobox_multicolumn.vala.page:38
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ComboBox.html"
"\">GtkComboBox</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ComboBox.html"
"\">GtkComboBox</link>"

#. (itstool) path: item/p
#: C/combobox_multicolumn.vala.page:39
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ListStore.html"
"\">GtkListStore</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ListStore.html"
"\">GtkListStore</link>"

#. (itstool) path: item/p
#: C/combobox_multicolumn.vala.page:40
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CellRendererText.html"
"\">GtkCellRendererText</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CellRendererText.html"
"\">GtkCellRendererText</link>"

#. (itstool) path: item/p
#: C/combobox_multicolumn.vala.page:41
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CellRendererPixbuf.html"
"\">GtkCellRendererPixbuf</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CellRendererPixbuf.html"
"\">GtkCellRendererPixbuf</link>"

#. (itstool) path: info/title
#: C/cpp.page:7
msgctxt "link"
msgid "C++"
msgstr "C++"

#. (itstool) path: page/title
#: C/cpp.page:16
msgid "Code samples and platform demos in C++"
msgstr "Δείγματα κώδικα και παρουσιάσεις πλατφόρμας σε C++"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/dialog.c.page:25 C/dialog.js.page:22 C/dialog.py.page:24
#: C/dialog.vala.page:22
msgctxt "_"
msgid "external ref='media/dialog.png' md5='c90a33386a600e892fe623d4072c8c38'"
msgstr "external ref='media/dialog.png' md5='c90a33386a600e892fe623d4072c8c38'"

#. (itstool) path: info/title
#: C/dialog.c.page:8
msgctxt "text"
msgid "Dialog (C)"
msgstr "Διάλογος (C)"

#. (itstool) path: info/desc
#: C/dialog.c.page:20 C/dialog.js.page:18 C/dialog.py.page:20
#: C/dialog.vala.page:18
msgid "A popup window"
msgstr "Ένα αναδυόμενο παράθυρο"

#. (itstool) path: page/title
#: C/dialog.c.page:23 C/dialog.js.page:21 C/dialog.py.page:23
#: C/dialog.vala.page:21
msgid "Dialog"
msgstr "Διάλογος"

#. (itstool) path: page/p
#: C/dialog.c.page:26
msgid "A dialog window that pops up when a button is pressed."
msgstr "Ένα παράθυρο διαλόγου που αναδύεται όταν ένα κουμπί πατιέται."

#. (itstool) path: page/code
#: C/dialog.c.page:28
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
" \n"
"\n"
"/*Callback function in which reacts to the \"response\" signal. Be sure to place \n"
"it before the function it is called in*/\n"
"static void\n"
"on_response (GtkDialog *dialog,\n"
"             gint       response_id,\n"
"             gpointer   user_data)\n"
"{\n"
"  /*For demonstration purposes, this will show the int value \n"
"  of the response type*/\n"
"  g_print (\"response is %d\\n\", response_id);\n"
"  \n"
"  /*This will cause the dialog to be destroyed*/\n"
"  gtk_widget_destroy (GTK_WIDGET (dialog));\n"
"}\n"
"\n"
"\n"
"\n"
"/*Callback function in which reacts to the \"clicked\" signal*/\n"
"static void\n"
"show_dialog (GtkButton *button,\n"
"             gpointer   user_data)\n"
"{\n"
"  GtkWindow *window = user_data;\n"
"  GtkWidget *dialog;\n"
"  GtkWidget *content_area;\n"
"  GtkWidget *label;\n"
"\n"
"  gint response_id;\n"
"\n"
"  /*Create the dialog window. Modal windows prevent interaction with other \n"
"  windows in the same application*/\n"
"  dialog = gtk_dialog_new_with_buttons (\"A Gtk+ Dialog\", \n"
"                                        window, \n"
"                                        GTK_DIALOG_MODAL, \n"
"                                        GTK_STOCK_OK, \n"
"                                        GTK_RESPONSE_OK, \n"
"                                        NULL);\n"
"\n"
"  /*Create a label and attach it to the content area of the dialog*/\n"
"  content_area = gtk_dialog_get_content_area (GTK_DIALOG (dialog));\n"
"  label = gtk_label_new (\"This demonstrates a dialog with a label\");\n"
"  gtk_container_add (GTK_CONTAINER (content_area), label);\n"
"\n"
"  /*The main purpose of this is to show dialog's child widget, label*/\n"
"  gtk_widget_show_all (dialog);\n"
"  \n"
"  /*Connecting the \"response\" signal from the user to the associated\n"
"  callback function*/\n"
"  g_signal_connect (GTK_DIALOG (dialog), \n"
"                    \"response\", \n"
"                    G_CALLBACK (on_response), \n"
"                    NULL);\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *button;\n"
" \n"
"  /*Create a window with a title and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"GNOME Button\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 250, 50);\n"
"\n"
"  /*Create a button with a label, and add it to the window*/\n"
"  button = gtk_button_new_with_label (\"Click Me\");\n"
"  gtk_container_add (GTK_CONTAINER (window), button);\n"
" \n"
"  /*Connecting the clicked signal to the callback*/\n"
"  g_signal_connect (GTK_BUTTON (button), \n"
"                    \"clicked\", \n"
"                    G_CALLBACK (show_dialog), \n"
"                    GTK_WINDOW (window));\n"
" \n"
"  gtk_widget_show_all (window);\n"
"}\n"
" \n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
" \n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
" \n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
" \n"
"\n"
"/*Callback function in which reacts to the \"response\" signal. Be sure to place \n"
"it before the function it is called in*/\n"
"static void\n"
"on_response (GtkDialog *dialog,\n"
"             gint       response_id,\n"
"             gpointer   user_data)\n"
"{\n"
"  /*For demonstration purposes, this will show the int value \n"
"  of the response type*/\n"
"  g_print (\"response is %d\\n\", response_id);\n"
"  \n"
"  /*This will cause the dialog to be destroyed*/\n"
"  gtk_widget_destroy (GTK_WIDGET (dialog));\n"
"}\n"
"\n"
"\n"
"\n"
"/*Callback function in which reacts to the \"clicked\" signal*/\n"
"static void\n"
"show_dialog (GtkButton *button,\n"
"             gpointer   user_data)\n"
"{\n"
"  GtkWindow *window = user_data;\n"
"  GtkWidget *dialog;\n"
"  GtkWidget *content_area;\n"
"  GtkWidget *label;\n"
"\n"
"  gint response_id;\n"
"\n"
"  /*Create the dialog window. Modal windows prevent interaction with other \n"
"  windows in the same application*/\n"
"  dialog = gtk_dialog_new_with_buttons (\"A Gtk+ Dialog\", \n"
"                                        window, \n"
"                                        GTK_DIALOG_MODAL, \n"
"                                        GTK_STOCK_OK, \n"
"                                        GTK_RESPONSE_OK, \n"
"                                        NULL);\n"
"\n"
"  /*Create a label and attach it to the content area of the dialog*/\n"
"  content_area = gtk_dialog_get_content_area (GTK_DIALOG (dialog));\n"
"  label = gtk_label_new (\"This demonstrates a dialog with a label\");\n"
"  gtk_container_add (GTK_CONTAINER (content_area), label);\n"
"\n"
"  /*The main purpose of this is to show dialog's child widget, label*/\n"
"  gtk_widget_show_all (dialog);\n"
"  \n"
"  /*Connecting the \"response\" signal from the user to the associated\n"
"  callback function*/\n"
"  g_signal_connect (GTK_DIALOG (dialog), \n"
"                    \"response\", \n"
"                    G_CALLBACK (on_response), \n"
"                    NULL);\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *button;\n"
" \n"
"  /*Create a window with a title and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"GNOME Button\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 250, 50);\n"
"\n"
"  /*Create a button with a label, and add it to the window*/\n"
"  button = gtk_button_new_with_label (\"Click Me\");\n"
"  gtk_container_add (GTK_CONTAINER (window), button);\n"
" \n"
"  /*Connecting the clicked signal to the callback*/\n"
"  g_signal_connect (GTK_BUTTON (button), \n"
"                    \"clicked\", \n"
"                    G_CALLBACK (show_dialog), \n"
"                    GTK_WINDOW (window));\n"
" \n"
"  gtk_widget_show_all (window);\n"
"}\n"
" \n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
" \n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
" \n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/dialog.c.page:36
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkDialog.html"
"\">GtkDialog</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkDialog.html"
"\">GtkDialog</link>"

#. (itstool) path: item/p
#: C/dialog.c.page:37 C/radiobutton.c.page:36 C/spinbutton.c.page:38
#: C/switch.c.page:35
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkLabel.html"
"\">GtkLabel</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkLabel.html"
"\">GtkLabel</link>"

#. (itstool) path: info/title
#: C/dialog.js.page:8
msgctxt "text"
msgid "Dialog (JavaScript)"
msgstr "Διάλογος (JavaScript)"

#. (itstool) path: page/p
#: C/dialog.js.page:23
msgid ""
"A customizable popup window, which has a content area and an action area. "
"This example dialog's content area contains a short message, and its action "
"area contains a button which dismisses the dialog."
msgstr ""
"Ένα προσαρμόσιμο αναδυόμενο παράθυρο, που έχει μια περιοχή περιεχομένου και "
"μια περιοχή ενέργειας. Αυτό το παράδειγμα περιοχής περιεχομένου διαλόγου "
"περιέχει ένα σύντομο μήνυμα και η περιοχή ενέργειας περιέχει ένα κουμπί που "
"απορρίπτει το διάλογο."

#. (itstool) path: page/code
#: C/dialog.js.page:25
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const DialogExample = new Lang.Class ({\n"
"    Name: 'Dialog Example',\n"
"\n"
"    // Create the application itself\n"
"        _init: function () {\n"
"            this.application = new Gtk.Application ({\n"
"                application_id: 'org.example.jsdialog',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                         window_position: Gtk.WindowPosition.CENTER,\n"
"                                                         title: \"Gtk.Dialog Example\",\n"
"                                                         default_height: 50,\n"
"                                                         default_width: 250 });\n"
"\n"
"        // Create a button\n"
"        this._button = new Gtk.Button ({label: \"Click Me\"});\n"
"        this._window.add (this._button);\n"
"\n"
"        // Bind it to the function that creates the dialog\n"
"        this._button.connect (\"clicked\", Lang.bind(this, this._createDialog));\n"
"\n"
"                // Show the window and all child widgets\n"
"                this._window.show_all();\n"
"    },\n"
"\n"
"    _createDialog: function () {\n"
"\n"
"        // Create the dialog\n"
"        this._dialog = new Gtk.Dialog ({ transient_for: this._window,\n"
"                         modal: true,\n"
"                         title: \"A Gtk+ dialog\" });\n"
"\n"
"        // Create the dialog's content area, which contains a message\n"
"        this._contentArea = this._dialog.get_content_area();\n"
"        this._message = new Gtk.Label ({label: \"This demonstrates a dialog with a label\"});\n"
"        this._contentArea.add (this._message);\n"
"\n"
"        // Create the dialog's action area, which contains a stock OK button\n"
"        this._actionArea = this._dialog.get_action_area();\n"
"        this._OKButton = new Gtk.Button.new_from_stock (Gtk.STOCK_OK);\n"
"        this._actionArea.add (this._OKButton);\n"
"\n"
"        // Connect the button to the function that handles what it does\n"
"        this._OKButton.connect (\"clicked\", Lang.bind (this, this._OKHandler));\n"
"\n"
"        this._dialog.show_all();\n"
"    },\n"
"\n"
"    _OKHandler: function (dialog, response_id) {\n"
"\n"
"        // Destroy the dialog\n"
"        this._dialog.destroy();\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new DialogExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const DialogExample = new Lang.Class ({\n"
"    Name: 'Dialog Example',\n"
"\n"
"    // Create the application itself\n"
"        _init: function () {\n"
"            this.application = new Gtk.Application ({\n"
"                application_id: 'org.example.jsdialog',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                         window_position: Gtk.WindowPosition.CENTER,\n"
"                                                         title: \"Gtk.Dialog Example\",\n"
"                                                         default_height: 50,\n"
"                                                         default_width: 250 });\n"
"\n"
"        // Create a button\n"
"        this._button = new Gtk.Button ({label: \"Click Me\"});\n"
"        this._window.add (this._button);\n"
"\n"
"        // Bind it to the function that creates the dialog\n"
"        this._button.connect (\"clicked\", Lang.bind(this, this._createDialog));\n"
"\n"
"                // Show the window and all child widgets\n"
"                this._window.show_all();\n"
"    },\n"
"\n"
"    _createDialog: function () {\n"
"\n"
"        // Create the dialog\n"
"        this._dialog = new Gtk.Dialog ({ transient_for: this._window,\n"
"                         modal: true,\n"
"                         title: \"A Gtk+ dialog\" });\n"
"\n"
"        // Create the dialog's content area, which contains a message\n"
"        this._contentArea = this._dialog.get_content_area();\n"
"        this._message = new Gtk.Label ({label: \"This demonstrates a dialog with a label\"});\n"
"        this._contentArea.add (this._message);\n"
"\n"
"        // Create the dialog's action area, which contains a stock OK button\n"
"        this._actionArea = this._dialog.get_action_area();\n"
"        this._OKButton = new Gtk.Button.new_from_stock (Gtk.STOCK_OK);\n"
"        this._actionArea.add (this._OKButton);\n"
"\n"
"        // Connect the button to the function that handles what it does\n"
"        this._OKButton.connect (\"clicked\", Lang.bind (this, this._OKHandler));\n"
"\n"
"        this._dialog.show_all();\n"
"    },\n"
"\n"
"    _OKHandler: function (dialog, response_id) {\n"
"\n"
"        // Destroy the dialog\n"
"        this._dialog.destroy();\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new DialogExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/dialog.js.page:32
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Dialog.html"
"\">Gtk.Dialog</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Dialog.html"
"\">Gtk.Dialog</link>"

#. (itstool) path: info/title
#: C/dialog.py.page:8
msgctxt "text"
msgid "Dialog (Python)"
msgstr "Διάλογος (Python)"

#. (itstool) path: page/p
#: C/dialog.py.page:25
msgid "A dialog with the response signal connected to a callback function."
msgstr ""
"Ένας διάλογος με το σήμα απάντησης συνδεμένο σε μια συνάρτηση επανάκλησης."

#. (itstool) path: section/code
#: C/dialog.py.page:32
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # construct a window (the parent window)\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GNOME Button\", application=app)\n"
"        self.set_default_size(250, 50)\n"
"\n"
"        # a button on the parent window\n"
"        button = Gtk.Button(\"Click me\")\n"
"        # connect the signal \"clicked\" of the button with the function\n"
"        # on_button_click()\n"
"        button.connect(\"clicked\", self.on_button_click)\n"
"        # add the button to the window\n"
"        self.add(button)\n"
"\n"
"    # callback function for the signal \"clicked\" of the button in the parent\n"
"    # window\n"
"    def on_button_click(self, widget):\n"
"        # create a Gtk.Dialog\n"
"        dialog = Gtk.Dialog()\n"
"        dialog.set_title(\"A Gtk+ Dialog\")\n"
"        # The window defined in the constructor (self) is the parent of the dialog.\n"
"        # Furthermore, the dialog is on top of the parent window\n"
"        dialog.set_transient_for(self)\n"
"        # set modal true: no interaction with other windows of the application\n"
"        dialog.set_modal(True)\n"
"        # add a button to the dialog window\n"
"        dialog.add_button(button_text=\"OK\", response_id=Gtk.ResponseType.OK)\n"
"        # connect the \"response\" signal (the button has been clicked) to the\n"
"        # function on_response()\n"
"        dialog.connect(\"response\", self.on_response)\n"
"\n"
"        # get the content area of the dialog, add a label to it\n"
"        content_area = dialog.get_content_area()\n"
"        label = Gtk.Label(\"This demonstrates a dialog with a label\")\n"
"        content_area.add(label)\n"
"        # show the dialog\n"
"        dialog.show_all()\n"
"\n"
"    def on_response(self, widget, response_id):\n"
"        print \"response_id is\", response_id\n"
"        # destroy the widget (the dialog) when the function on_response() is called\n"
"        # (that is, when the button of the dialog has been clicked)\n"
"        widget.destroy()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # construct a window (the parent window)\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GNOME Button\", application=app)\n"
"        self.set_default_size(250, 50)\n"
"\n"
"        # a button on the parent window\n"
"        button = Gtk.Button(\"Click me\")\n"
"        # connect the signal \"clicked\" of the button with the function\n"
"        # on_button_click()\n"
"        button.connect(\"clicked\", self.on_button_click)\n"
"        # add the button to the window\n"
"        self.add(button)\n"
"\n"
"    # callback function for the signal \"clicked\" of the button in the parent\n"
"    # window\n"
"    def on_button_click(self, widget):\n"
"        # create a Gtk.Dialog\n"
"        dialog = Gtk.Dialog()\n"
"        dialog.set_title(\"A Gtk+ Dialog\")\n"
"        # The window defined in the constructor (self) is the parent of the dialog.\n"
"        # Furthermore, the dialog is on top of the parent window\n"
"        dialog.set_transient_for(self)\n"
"        # set modal true: no interaction with other windows of the application\n"
"        dialog.set_modal(True)\n"
"        # add a button to the dialog window\n"
"        dialog.add_button(button_text=\"OK\", response_id=Gtk.ResponseType.OK)\n"
"        # connect the \"response\" signal (the button has been clicked) to the\n"
"        # function on_response()\n"
"        dialog.connect(\"response\", self.on_response)\n"
"\n"
"        # get the content area of the dialog, add a label to it\n"
"        content_area = dialog.get_content_area()\n"
"        label = Gtk.Label(\"This demonstrates a dialog with a label\")\n"
"        content_area.add(label)\n"
"        # show the dialog\n"
"        dialog.show_all()\n"
"\n"
"    def on_response(self, widget, response_id):\n"
"        print \"response_id is\", response_id\n"
"        # destroy the widget (the dialog) when the function on_response() is called\n"
"        # (that is, when the button of the dialog has been clicked)\n"
"        widget.destroy()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/dialog.py.page:37
msgid "Useful methods for a Dialog widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο διαλόγου"

#. (itstool) path: section/p
#: C/dialog.py.page:38
msgid ""
"In line 16 the signal <code>\"clicked\"</code> is connected to the callback "
"function <code>on_button_click()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"Στη γραμμή 16 το σήμα <code>\"clicked\"</code> συνδέεται με τη συνάρτηση "
"επανάκλησης <code>on_button_click()</code> χρησιμοποιώντας "
"<code><var>widget</var>.connect(<var>signal</var>, <var>callback function</"
"var>)</code>. Δείτε <link xref=\"signals-callbacks.py\"/> για μια πιο "
"λεπτομερή εξήγηση."

#. (itstool) path: item/p
#: C/dialog.py.page:40
msgid ""
"Instead of <code>set_modal(True)</code> we could have "
"<code>set_modal(False)</code> followed by "
"<code>set_destroy_with_parent(True)</code> that would destroy the dialog "
"window if the main window is closed."
msgstr ""
"Αντί για <code>set_modal(True)</code> μπορούμε <code>set_modal(False)</code> "
"ακολουθούμενο από <code>set_destroy_with_parent(True)</code> που μπορεί να "
"καταστρέψει το παράθυρο διαλόγου εάν το κύριο παράθυρο κλείσει."

#. (itstool) path: item/p
#: C/dialog.py.page:41
msgid ""
"<code>add_button(button_text=\"The Answer\", response_id=42)</code>, where "
"<code>42</code> is any integer, is an alternative to "
"<code>add_button(button_text=\"text\", response_id=Gtk.ResponseType."
"RESPONSE)</code>, where <code>RESPONSE</code> could be one of <code>OK, "
"CANCEL, CLOSE, YES, NO, APPLY, HELP</code>, which in turn correspond to the "
"integers <code>-5, -6,..., -11</code>."
msgstr ""
"<code>add_button(button_text=\"The Answer\", response_id=42)</code>, όπου "
"<code>42</code> είναι οποιοσδήποτε ακέραιος, είναι μια εναλλακτική στο "
"<code>add_button(button_text=\"text\", response_id=Gtk.ResponseType."
"RESPONSE)</code>, όπου <code>RESPONSE</code> μπορεί να είναι ένα από τα "
"<code>OK, CANCEL, CLOSE, YES, NO, APPLY, HELP</code>, που με τη σειρά του "
"αντιστοιχεί σε ακέραιους <code>-5, -6,..., -11</code>."

#. (itstool) path: item/p
#: C/dialog.py.page:51 C/messagedialog.py.page:60
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkDialog.html"
"\">GtkDialog</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkDialog.html"
"\">GtkDialog</link>"

#. (itstool) path: info/title
#: C/dialog.vala.page:8
msgctxt "text"
msgid "Dialog (Vala)"
msgstr "Διάλογος (Vala)"

#. (itstool) path: page/p
#: C/dialog.vala.page:23
msgid "A dialog with the response signal hooked up to a callback function."
msgstr ""
"Ένας διάλογος με το σήμα απάντησης συνδεμένο σε μια συνάρτηση επανάκλησης."

#. (itstool) path: page/code
#: C/dialog.vala.page:25
#, no-wrap
msgid ""
"\n"
"/* A window in the application. */\n"
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"GNOME Button\");\n"
"\n"
"\t\tthis.window_position = Gtk.WindowPosition.CENTER;\n"
"\t\tthis.set_default_size (250,50);\n"
"\n"
"\t\tvar button = new Gtk.Button.with_label (\"Click Me\");\n"
"\n"
"\t\t/* Connect the button's \"clicked\" signal to\n"
"\t\t * the signal handler (aka. this.callback function).\n"
"\t\t */\n"
"\t\tbutton.clicked.connect (this.on_button_click);\n"
"\n"
"\t\t/* Add the button to this window and show it. */\n"
"\t\tthis.add (button);\n"
"\t\tbutton.show ();\n"
"\t}\n"
"\n"
"\t/* The signal handler for the buttons 'clicked' signal. */\n"
"\tvoid on_button_click (Gtk.Button button) {\n"
"\t\tvar dialog = new Gtk.Dialog.with_buttons (\"A Gtk+ Dialog\", this,\n"
"                                                          Gtk.DialogFlags.MODAL,\n"
"                                                          Gtk.Stock.OK,\n"
"                                                          Gtk.ResponseType.OK, null);\n"
"\n"
"\t\tvar content_area = dialog.get_content_area ();\n"
"\t\tvar label = new Gtk.Label (\"This demonstrates a dialog with a label\");\n"
"\n"
"\t\tcontent_area.add (label);\n"
"\n"
"\t\t/* Connect the 'response' signal of the dialog\n"
"\t\t * the signal handler.  It is emitted when the dialog's\n"
"\t\t * OK button is clicked.\n"
"\t\t */\n"
"\t\tdialog.response.connect (on_response);\n"
"\n"
"\t\t/* Show the dialog and all the widgets. */\n"
"\t\tdialog.show_all ();\n"
"\t}\n"
"\n"
"\t/* Signal handler for the 'response' signal of the dialog. */\n"
"        void on_response (Gtk.Dialog dialog, int response_id) {\n"
"\n"
"                /* To see the int value of the ResponseType. This is only\n"
"\t\t * for demonstration purposes.*/\n"
"                print (\"response is %d\\n\", response_id);\n"
"\n"
"\t\t/* This causes the dialog to be destroyed. */\n"
"                dialog.destroy ();\n"
"        }\n"
"\n"
"}\n"
"\n"
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\n"
"\t/* The constructore of the application. */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create a window for the this application and show it. */\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"\n"
"/* Ένα παράθυρο στην εφαρμογή. */\n"
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/*Κατασκευαστής*/\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"GNOME Button\");\n"
"\n"
"\t\tthis.window_position = Gtk.WindowPosition.CENTER;\n"
"\t\tthis.set_default_size (250,50);\n"
"\n"
"\t\tvar button = new Gtk.Button.with_label (\"Click Me\");\n"
"\n"
"\t\t/* Σύνδεση του σήματος \"clicked\" του κουμπιού στον\n"
"\t\t * χειριστή του σήματος (aka. this.callback function).\n"
"\t\t */\n"
"\t\tbutton.clicked.connect (this.on_button_click);\n"
"\n"
"\t\t/* Προσθήκη του κουμπιού σε αυτό το παράθυρο και εμφάνισή του. */\n"
"\t\tthis.add (button);\n"
"\t\tbutton.show ();\n"
"\t}\n"
"\n"
"\t/* Ο χειριστής σήματος για τα κουμπιά του σήματος  'clicked'.  */\n"
"\tvoid on_button_click (Gtk.Button button) {\n"
"\t\tvar dialog = new Gtk.Dialog.with_buttons (\"A Gtk+ Dialog\", this,\n"
"                                                          Gtk.DialogFlags.MODAL,\n"
"                                                          Gtk.Stock.OK,\n"
"                                                          Gtk.ResponseType.OK, null);\n"
"\n"
"\t\tvar content_area = dialog.get_content_area ();\n"
"\t\tvar label = new Gtk.Label (\"Αυτό δείχνει έναν διάλογο με ετικέτα\");\n"
"\n"
"\t\tcontent_area.add (label);\n"
"\n"
"\t\t/* Σύνδεση του σήματος 'response' του διαλόγου\n"
"\t\t * του χειριστή σήματος.  Εκπέμπεται όταν πατιέται το κουμπί ΕΝΤΑΞΕΙ \n"
"\t\t * του διαλόγου.\n"
"\t\t */\n"
"\t\tdialog.response.connect (on_response);\n"
"\n"
"\t\t/* Εμφάνιση του διαλόγου και όλων των γραφικών στοιχείων. */\n"
"\t\tdialog.show_all ();\n"
"\t}\n"
"\n"
"\t/* Ο χειριστής σήματος για το σήμα 'response' του διαλόγου. */\n"
"        void on_response (Gtk.Dialog dialog, int response_id) {\n"
"\n"
"                /* Για να δείτε την ακέραιη τιμή του τύπου απάντησης. Αυτό είναι μόνο\n"
"\t\t * για λόγους επίδειξης.*/\n"
"                print (\"response is %d\\n\", response_id);\n"
"\n"
"\t\t/* Αυτό προκαλεί την καταστροφή του διαλόγου. */\n"
"                dialog.destroy ();\n"
"        }\n"
"\n"
"}\n"
"\n"
"/* Αυτή είναι η εφαρμογή. */\n"
"public class MyApplication : Gtk.Application {\n"
"\n"
"\t/* Ο κατασκευαστής της εφαρμογής. */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Αντικατάσταση του σήματος 'activate' της GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Δημιουργία παραθύρου για αυτήν την εφαρμογή και εμφάνισή του. */\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"}\n"
"\n"
"/* Η κύρια συνάρτηση δημιουργεί και εκτελεί την εφαρμογή. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/dialog.vala.page:32
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Dialog.html\">Gtk.Dialog</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Dialog.html\">Gtk.Dialog</"
"link>"

#. (itstool) path: item/p
#: C/dialog.vala.page:33
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Dialog.Dialog.with_buttons."
"html\">Gtk.Dialog.with_buttons</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Dialog.Dialog.with_buttons."
"html\">Gtk.Dialog.with_buttons</link>"

#. (itstool) path: item/p
#: C/dialog.vala.page:34 C/label.vala.page:33
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Label.html\">Gtk.Label</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Label.html\">Gtk.Label</"
"link>"

#. (itstool) path: item/p
#: C/dialog.vala.page:35
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Dialog.get_content_area.html"
"\">get_content_area</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Dialog.get_content_area.html"
"\">get_content_area</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/entry.c.page:23 C/entry.js.page:22 C/entry.py.page:29
#: C/entry.vala.page:22
msgctxt "_"
msgid "external ref='media/entry.png' md5='8a828cffdcbaa4bad83342e109f28cc8'"
msgstr "external ref='media/entry.png' md5='8a828cffdcbaa4bad83342e109f28cc8'"

#. (itstool) path: info/title
#: C/entry.c.page:8
msgctxt "text"
msgid "Entry (C)"
msgstr "Καταχώριση (C)"

#. (itstool) path: info/desc
#: C/entry.c.page:18 C/entry.py.page:25 C/entry.vala.page:18
msgid "A single line text entry field"
msgstr "Ένα πεδίο καταχώρισης κειμένου μοναδικής γραμμής"

#. (itstool) path: page/title
#: C/entry.c.page:21 C/entry.js.page:21 C/entry.py.page:28
#: C/entry.vala.page:21
msgid "Entry"
msgstr "Καταχώριση"

#. (itstool) path: page/p
#: C/entry.c.page:24 C/entry.vala.page:23
msgid "This application greets you in the terminal."
msgstr "Αυτή η εφαρμογή σας υποδέχεται στο τερματικό."

#. (itstool) path: page/code
#: C/entry.c.page:26
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*This is the callback function. It is a handler function \n"
"which reacts to the signal. In this case, it will grab the \n"
"text input from the entry box and print out a line to the user.*/\n"
"static void\n"
"on_activate (GtkEntry *entry,\n"
"             gpointer  user_data)\n"
"{\n"
"  const char *name;\n"
"  name = gtk_entry_get_text (entry);\n"
"\n"
"  g_print (\"\\nHello %s!\\n\\n\", name);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *entry_box;\n"
"\n"
"  /*Create a window with a title, a default size, \n"
"  and a set border width*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"What is your name?\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 100);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 10);\n"
"\n"
"  /*Create a new entry box, and add it to the window*/\n"
"  entry_box = gtk_entry_new ();\n"
"  gtk_container_add (GTK_CONTAINER (window), entry_box);\n"
"\n"
"  /*Connecting the activate signal to the callback*/\n"
"  g_signal_connect (GTK_ENTRY (entry_box), \"activate\", \n"
"                    G_CALLBACK (on_activate), NULL);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Αυτή είναι η συνάρτηση επανάκλησης. Είναι μια συνάρτηση χειριστή \n"
"που αντιδρά στο σήμα. Σε αυτήν την περίπτωση, θα συλλάβει την \n"
"είσοδο κειμένου από το πλαίσιο καταχώρισης και εκτυπώνει μια γραμμή στον χρήστη.*/\n"
"static void\n"
"on_activate (GtkEntry *entry,\n"
"             gpointer  user_data)\n"
"{\n"
"  const char *name;\n"
"  name = gtk_entry_get_text (entry);\n"
"\n"
"  g_print (\"\\nHello %s!\\n\\n\", name);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *entry_box;\n"
"\n"
"  /*Δημιουργία παραθύρου με τίτλο, προεπιλεγμένο μέγεθος, \n"
"  και ορισμό πλάτους περιγράμματος*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"What is your name?\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 100);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 10);\n"
"\n"
"  /*Δημιουργία νέου πλαισίου καταχώρισης, και προσθήκη του στο παράθυρο*/\n"
"  entry_box = gtk_entry_new ();\n"
"  gtk_container_add (GTK_CONTAINER (window), entry_box);\n"
"\n"
"  /*Σύνδεση του ενεργού σήματος με την επανάκληση*/\n"
"  g_signal_connect (GTK_ENTRY (entry_box), \"activate\", \n"
"                    G_CALLBACK (on_activate), NULL);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: info/title
#: C/entry.js.page:8
msgctxt "text"
msgid "Entry (JavaScript)"
msgstr "Καταχώριση (JavaScript)"

#. (itstool) path: info/desc
#: C/entry.js.page:18
msgid "A single-line text entry field"
msgstr "Ένα πεδίο καταχώρισης κειμένου μονής γραμμής"

#. (itstool) path: page/p
#: C/entry.js.page:23
msgid "This application greets you by name through a pop-up window."
msgstr "Αυτή η εφαρμογή σας χαιρετά με το όνομα μέσα από αναδυόμενο παράθυρο."

#. (itstool) path: page/code
#: C/entry.js.page:25
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const EntryExample = new Lang.Class({\n"
"    Name: 'Entry Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsentry',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 100,\n"
"            default_width: 300,\n"
"            border_width: 10,\n"
"            title: \"What is your name?\"});\n"
"\n"
"        // Create the text entry box\n"
"        this.entry = new Gtk.Entry ();\n"
"        this._window.add(this.entry);\n"
"\n"
"        // Connect the text entry box to a function that responds to what you type in\n"
"        this.entry.connect(\"activate\", Lang.bind (this, this._hello));\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _hello: function() {\n"
"\n"
"        // Create a popup dialog to greet the person who types in their name\n"
"        this._greeter = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            text: \"Hello, \" + this.entry.get_text() + \"!\",\n"
"            message_type: Gtk.MessageType.OTHER,\n"
"            buttons: Gtk.ButtonsType.OK,\n"
"        });\n"
"\n"
"        // Show the popup dialog\n"
"        this._greeter.show();\n"
"\n"
"        // Bind the OK button to the function that closes the popup\n"
"        this._greeter.connect (\"response\", Lang.bind(this, this._okClicked));\n"
"    },\n"
"\n"
"    _okClicked: function () {\n"
"        this._greeter.destroy();\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new EntryExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const EntryExample = new Lang.Class({\n"
"    Name: 'Entry Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsentry',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Σύνδεση των σημάτων  'activate' και 'startup' στις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα  'activate' παρουσιάζει παράθυρα όταν είναι ενεργή \n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 100,\n"
"            default_width: 300,\n"
"            border_width: 10,\n"
"            title: \"What is your name?\"});\n"
"\n"
"        // Δημιουργία του πλαισίου καταχώρισης κειμένου\n"
"        this.entry = new Gtk.Entry ();\n"
"        this._window.add(this.entry);\n"
"\n"
"        // Σύνδεση του πλαισίου καταχώρισης κειμένου σε μια συνάρτηση που απαντά σε ό,τι πληκτρολογείτε\n"
"        this.entry.connect(\"activate\", Lang.bind (this, this._hello));\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _hello: function() {\n"
"\n"
"        // Δημιουργία αναδυόμενου διαλόγου για χαιρετισμό του προσώπου που πληκτρολογεί στο όνομά τους\n"
"        this._greeter = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            text: \"Hello, \" + this.entry.get_text() + \"!\",\n"
"            message_type: Gtk.MessageType.OTHER,\n"
"            buttons: Gtk.ButtonsType.OK,\n"
"        });\n"
"\n"
"        // Εμφάνιση του αναδυόμενου διαλόγου\n"
"        this._greeter.show();\n"
"\n"
"        // Σύνδεση του κουμπιού ΕΝΤΑΞΕΙ στη συνάρτηση που κλείνει το αναδυόμενο\n"
"        this._greeter.connect (\"response\", Lang.bind(this, this._okClicked));\n"
"    },\n"
"\n"
"    _okClicked: function () {\n"
"        this._greeter.destroy();\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new EntryExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/entry.js.page:32
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Entry.html"
"\">Gtk.Entry</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Entry.html"
"\">Gtk.Entry</link>"

#. (itstool) path: info/title
#: C/entry.py.page:8
msgctxt "text"
msgid "Entry (Python)"
msgstr "Καταχώριση (Python)"

#. (itstool) path: credit/name
#: C/entry.py.page:21 C/label.py.page:22 C/model-view-controller.py.page:16
#: C/properties.py.page:16 C/signals-callbacks.py.page:16 C/strings.py.page:16
#: C/textview.py.page:16 C/toolbar_builder.py.page:28
msgid "Sebastian Pölsterl"
msgstr "Sebastian Pölsterl"

#. (itstool) path: credit/years
#: C/entry.py.page:23 C/index.page:20 C/model-view-controller.py.page:18
#: C/properties.py.page:18 C/signals-callbacks.py.page:18 C/strings.py.page:18
#: C/textview.py.page:18 C/toolbar_builder.py.page:30
msgid "2011"
msgstr "2011"

#. (itstool) path: page/p
#: C/entry.py.page:30
msgid "This application greets you in the terminal with the name you provide."
msgstr "Αυτή η εφαρμογή σας χαιρετά στον τερματικό με το όνομα που δώσατε."

#. (itstool) path: section/code
#: C/entry.py.page:36
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"What is your name?\", application=app)\n"
"        self.set_default_size(300, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a single line entry\n"
"        name_box = Gtk.Entry()\n"
"        # emits a signal when the Enter key is pressed, connected to the\n"
"        # callback function cb_activate\n"
"        name_box.connect(\"activate\", self.cb_activate)\n"
"\n"
"        # add the Gtk.Entry to the window\n"
"        self.add(name_box)\n"
"\n"
"    # the content of the entry is used to write in the terminal\n"
"    def cb_activate(self, entry):\n"
"        # retrieve the content of the widget\n"
"        name = entry.get_text()\n"
"        # print it in a nice form in the terminal\n"
"        print \"Hello \" + name + \"!\"\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"What is your name?\", application=app)\n"
"        self.set_default_size(300, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a single line entry\n"
"        name_box = Gtk.Entry()\n"
"        # emits a signal when the Enter key is pressed, connected to the\n"
"        # callback function cb_activate\n"
"        name_box.connect(\"activate\", self.cb_activate)\n"
"\n"
"        # add the Gtk.Entry to the window\n"
"        self.add(name_box)\n"
"\n"
"    # the content of the entry is used to write in the terminal\n"
"    def cb_activate(self, entry):\n"
"        # retrieve the content of the widget\n"
"        name = entry.get_text()\n"
"        # print it in a nice form in the terminal\n"
"        print \"Hello \" + name + \"!\"\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/entry.py.page:40
msgid "Useful methods for an Entry widget"
msgstr "Χρήσιμες μέθοδοι για γραφικό στοιχείο εισαγωγής"

#. (itstool) path: section/p
#: C/entry.py.page:41
msgid ""
"In line 14 the signal <code>\"activate\"</code> is connected to the callback "
"function <code>cb_activate()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation. Some of the "
"signals that a Gtk.Entry widget can emit are: <code>\"activate\"</code> "
"(emitted when the user activates the Entry key); <code>\"backspace\"</code> "
"(emitted when the user activates the Backspace or Shift-Backspace keys); "
"<code>\"copy-clipboard\"</code> (Ctrl-c and Ctrl-Insert); <code>\"paste-"
"clipboard\"</code> (Ctrl-v and Shift-Insert); <code>\"delete-from-cursor\"</"
"code> (Delete, for deleting a character; Ctrl-Delete, for deleting a word); "
"<code>\"icon-press\"</code> (emitted when the user clicks an activable "
"icon); <code>\"icon-release\"</code> (emitted on the button release from a "
"mouse click over an activable icon); <code>\"insert-at-cursor\"</code> "
"(emitted when the user initiates the insertion of a fixed string at the "
"cursor); <code>\"move-cursor\"</code> (emitted when the user initiates a "
"cursor movement); <code>\"populate-popup\"</code> (emitted before showing "
"the context menu of the entry; it can be used to add items to it)."
msgstr ""
"Στη γραμμή 14 το σήμα <code>\"activate\"</code> συνδέεται με τη συνάρτηση "
"επανάκλησης <code>cb_activate()</code> χρησιμοποιώντας <code><var>widget</"
"var>.connect(<var>signal</var>, <var>callback function</var>)</code>. Δείτε "
"<link xref=\"signals-callbacks.py\"/> για μια πιο λεπτομερή εξήγηση. Μερικά "
"από τα σήματα που το γραφικό στοιχείο Gtk.Entry μπορεί να εκπέμψει είναι: "
"<code>\"activate\"</code> (εκπεμπόμενο όταν ο χρήστης ενεργοποιεί το πλήκτρο "
"εισαγωγής)· <code>\"backspace\"</code> (εκπεμπόμενο όταν ο χρήστης "
"ενεργοποιεί την οπισθοδιαγραφή ή τα πλήκτρα Shift-οπισθοδιαγραφή)· <code>"
"\"copy-clipboard\"</code> (Ctrl-c και Ctrl-Insert); <code>\"paste-clipboard"
"\"</code> (Ctrl-v και Shift-Insert); <code>\"delete-from-cursor\"</code> "
"(διαγραφή, για να διαγραφτεί ένας χαρακτήρας· Ctrl-διαγραφή, για να "
"διαγραφτεί μια λέξη)· <code>\"icon-press\"</code> (εκπεμπόμενο όταν ο "
"χρήστης πατά ένα ενεργοποιήσιμο εικονίδιο)· <code>\"icon-release\"</code> "
"(εκπεμπόμενο με την απελευθέρωση του κουμπιού από ένα πάτημα του ποντικιού "
"πάνω από ένα ενεργοποιήσιμο εικονίδιο)· <code>\"insert-at-cursor\"</code> "
"(εκπεμπόμενο όταν ο χρήστης αρχικοποιεί την εισαγωγή μιας σταθερής "
"συμβολοσειράς στον δρομέα)· <code>\"move-cursor\"</code> (εκπεμπόμενο όταν ο "
"χρήστης αρχικοποιεί μια μετακίνηση δρομέα)· <code>\"populate-popup\"</code> "
"(εκπεμπόμενο πριν την προβολή του μενού περιεχομένου της εισαγωγής· μπορεί "
"να χρησιμοποιηθεί για προσθήκη στοιχείων σε αυτή)."

#. (itstool) path: item/p
#: C/entry.py.page:43
msgid ""
"<code>get_buffer()</code> and <code>set_buffer(buffer)</code>, where "
"<code>buffer</code> is a Gtk.EntryBuffer object, can be used to get and set "
"the buffer for the entry."
msgstr ""
"<code>get_buffer()</code> και <code>set_buffer(buffer)</code>, όπου "
"<code>buffer</code> είναι ένα αντικείμενο Gtk.EntryBuffer, μπορούν να "
"χρησιμοποιηθούν για λήψη και ορισμό της ενδιάμεσης μνήμης για την εισαγωγή."

#. (itstool) path: item/p
#: C/entry.py.page:44
msgid ""
"<code>get_text()</code> and <code>set_text(\"some text\")</code> can be used "
"to get and set the content for the entry."
msgstr ""
"<code>get_text()</code> και <code>set_text(\"some text\")</code> μπορούν να "
"χρησιμοποιηθούν για λήψη και ορισμό του περιεχομένου για την εισαγωγή."

#. (itstool) path: item/p
#: C/entry.py.page:45
msgid "<code>get_text_length()</code> is self-explanatory."
msgstr "<code>get_text_length()</code> είναι αυτονόητο."

#. (itstool) path: item/p
#: C/entry.py.page:46
msgid ""
"<code>get_text_area()</code> gets the area where the entry's text is drawn."
msgstr ""
"<code>get_text_area()</code> δέχεται την περιοχή όπου το κείμενο εισαγωγής "
"σύρεται."

#. (itstool) path: item/p
#: C/entry.py.page:47
msgid ""
"If we set <code>set_visibility(False)</code> the characters in the entry are "
"displayed as the invisible char. This is the best available in the current "
"font, but it can be changed with <code>set_invisible_char(ch)</code>, where "
"<code>ch</code> is a Unicode charcater. The latter method is reversed by "
"<code>unset_invisbile_char()</code>."
msgstr ""
"Εάν ορίζουμε <code>set_visibility(False)</code> οι χαρακτήρες στην "
"καταχώριση εμφανίζονται ως ο αόρατος χαρακτήρας. Αυτό είναι καλύτερα "
"διαθέσιμο στην τρέχουσα γραμματοσειρά, αλλά μπορεί να αλλαχθεί με "
"<code>set_invisible_char(ch)</code>, όπου <code>ch</code> είναι ένας "
"χαρακτήρας Unicode. Η τελευταία μέθοδος αντιστρέφεται με τον "
"<code>unset_invisbile_char()</code>."

#. (itstool) path: item/p
#: C/entry.py.page:48
msgid ""
"<code>set_max_length(int)</code>, where <code>int</code> is an integer, "
"truncates every entry longer than <code>int</code> to have the desired "
"maximum length."
msgstr ""
"<code>set_max_length(int)</code>, όπου <code>int</code> είναι ένας ακέραιος, "
"που περικόπτει κάθε καταχώριση μεγαλύτερη από <code>int</code> για να έχει "
"το επιθυμητό μέγιστο μήκος."

#. (itstool) path: item/p
#: C/entry.py.page:49
msgid ""
"By default, if you press the Entry key the Gtk.Entry emits the signal <code>"
"\"activate\"</code>. If you would like to activate the default widget for "
"the window (set using <code>set_default(widget)</code> on the window), then "
"use <code>set_activates_default(True)</code>."
msgstr ""
"Από προεπιλογή, εάν πατήσετε το πλήκτρο καταχώρισης η Gtk.Entry εκπέμπει το "
"σήμα <code>\"activate\"</code>. Εάν θα θέλατε να ενεργοποιήσετε το "
"προεπιλεγμένο γραφικό στοιχείο για το παράθυρο (ορίστε χρησιμοποιώντας τον "
"<code>set_default(widget)</code> στο παράθυρο), έπειτα χρησιμοποιήστε "
"<code>set_activates_default(True)</code>."

#. (itstool) path: item/p
#: C/entry.py.page:50
msgid "To set a frame around the entry: <code>set_has_frame(True)</code>."
msgstr ""
"Για τον ορισμό ενός πλαισίου γύρω από την καταχώριση: "
"<code>set_has_frame(True)</code>."

#. (itstool) path: item/p
#: C/entry.py.page:51
msgid ""
"<code>set_placeholder_text(\"some text\")</code> sets the text to be "
"displayed in the entry when it is empty and unfocused."
msgstr ""
"Ο <code>set_placeholder_text(\"some text\")</code> ορίζει το εμφανιζόμενο "
"κείμενο στην καταχώριση όταν είναι κενό και χωρίς εστίαση."

#. (itstool) path: item/p
#: C/entry.py.page:52
msgid ""
"<code>set_overwrite_mode(True)</code> and <code>set_overwrite_mode(False)</"
"code> are self-explanatory."
msgstr ""
"<code>set_overwrite_mode(True)</code> και <code>set_overwrite_mode(False)</"
"code> είναι αυτονόητα."

#. (itstool) path: item/p
#: C/entry.py.page:53
msgid ""
"If we have <code>set_editable(False)</code> the user cannot edit the text in "
"the widget."
msgstr ""
"Εάν έχουμε <code>set_editable(False)</code> ο χρήστης δεν μπορεί να "
"επεξεργαστεί το κείμενο στο γραφικό στοιχείο."

#. (itstool) path: item/p
#: C/entry.py.page:54
msgid ""
"<code>set_completion(completion)</code>, where <code>completion</code> is a "
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkEntryCompletion.html"
"\"><code>Gtk.EntryCompletion</code></link>, sets completion - or disables it "
"if <code>completion</code> is <code>None</code>."
msgstr ""
"<code>set_completion(completion)</code>, όπου <code>completion</code> είναι "
"ένας <link href=\"http://developer.gnome.org/gtk3/unstable/"
"GtkEntryCompletion.html\"><code>Gtk.EntryCompletion</code></link>, ορίζει "
"την ολοκλήρωση - ή το απενεργοποιεί εάν η <code>completion</code> είναι "
"<code>None</code>."

#. (itstool) path: item/p
#: C/entry.py.page:55
msgid ""
"An Entry widget can display progress or activity information behind the "
"text. We use <code>set_progress_fraction(fraction)</code>, where "
"<code>fraction</code> is a <code>float</code> between <code>0.0</code> and "
"<code>1.0</code> inclusive, to fill in the given fraction of the bar. We use "
"<code>set_progress_pulse_step()</code> to set the fraction of total entry "
"width to move the progress bouncing block for each call to "
"<code>progress_pulse()</code>. The latter method indicates that some "
"progress is made, and causes the progress indicator of the entry to enter "
"\"activity mode\", where a block bounces back and forth. Each call to "
"<code>progress_pulse()</code> causes the block to move by a little bit (the "
"amount of movement per pulse is determined, as said before, by "
"<code>set_progress_pulse_step()</code>)."
msgstr ""
"Ένα γραφικό στοιχείο καταχώρισης μπορεί να εμφανίσει πρόοδο ή πληροφορίες "
"δραστηριότητας πίσω από το κείμενο. Χρησιμοποιούμε "
"<code>set_progress_fraction(fraction)</code>, όπου <code>fraction</code> "
"είναι ένας <code>float</code> between <code>0.0</code> και <code>1.0</code> "
"συμπεριλαμβανόμενου, για να συμπληρώσει τη δεδομένο κλάσμα της γραμμής. "
"Χρησιμοποιούμε <code>set_progress_pulse_step()</code> για τον ορισμό του "
"κλάσματος του συνολικού πλάτους καταχώρισης για να μετακινήσουμε την ομάδα "
"αναπήδησης προόδου για κάθε κλήση στον <code>progress_pulse()</code>. Η "
"τελευταία μέθοδος δείχνει ότι κάποια πρόοδος έχει γίνει και προκαλεί τον "
"δείκτη προόδου της καταχώρισης να μπει στην \"activity mode\", όπου μια "
"ομάδα αναπηδά πίσω και μπρος. Κάθε κλήση στον <code>progress_pulse()</code> "
"προκαλεί την μετακίνηση της ομάδας λιγο (η ποσότητα της μετακίνησης ανά "
"παλμό καθορίζεται, όπως ειπώθηκε πριν, κατά <code>set_progress_pulse_step()</"
"code>)."

#. (itstool) path: item/p
#: C/entry.py.page:56
msgid ""
"An Entry widget can also show icons. These icons can be activatable by "
"clicking, can be set up as drag source and can have tooltips. To add an "
"icon, use <code>set_icon_from_stock(icon_position, stock_id)</code>, or one "
"of <code>set_icon_from_pixbuf(icon_position, pixbuf)</code>, "
"<code>set_icon_from_icon_name(icon_position, icon_name)</code>, where "
"<code>icon_position</code> is one of <code>Gtk.EntryIconPosition.PRIMARY</"
"code> (to set the icon at the beginning of the entry) <code>Gtk."
"EntryIconPosition.SECONDARY</code> (to set the icon at the end of the "
"entry). To set a tooltip on an icon, use "
"<code>set_icon_tooltip_text(\"tooltip text\")</code> or "
"<code>set_icon_tooltip_markup(\"tooltip text in Pango markup language\")</"
"code>."
msgstr ""
"Ένα γραφικό στοιχείο καταχώρισης μπορεί επίσης να εμφανίσει εικονίδια. Αυτά "
"τα εικονίδια που μπορούν να ενεργοποιηθούν με κλικ, μπορούν να οριστούν ως "
"πηγή μεταφοράς και μπορούν να έχουν συμβουλές οθόνης. Για την προσθήκη ενός "
"εικονιδίου, χρησιμοποιήστε <code>set_icon_from_stock(icon_position, "
"stock_id)</code>, ή ένα από τα <code>set_icon_from_pixbuf(icon_position, "
"pixbuf)</code>, <code>set_icon_from_icon_name(icon_position, icon_name)</"
"code>, όπου <code>icon_position</code> είναι ένα από <code>Gtk."
"EntryIconPosition.PRIMARY</code> (για τον ορισμό του εικονιδίου στην αρχή "
"της καταχώρισης) <code>Gtk.EntryIconPosition.SECONDARY</code> (για τον "
"ορισμό του εικονιδίου στο τέλος της καταχώρισης). Για τον ορισμό μιας "
"συμβουλής οθόνης σε ένα εικονίδιο, χρησιμοποιήστε "
"<code>set_icon_tooltip_text(\"tooltip text\")</code> ή "
"<code>set_icon_tooltip_markup(\"tooltip text in Pango markup language\")</"
"code>."

#. (itstool) path: item/p
#: C/entry.py.page:64
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkEntry.html"
"\">GtkEntry</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkEntry.html"
"\">GtkEntry</link>"

#. (itstool) path: info/title
#: C/entry.vala.page:8
msgctxt "text"
msgid "Entry (Vala)"
msgstr "Καταχώριση (Vala)"

#. (itstool) path: page/code
#: C/entry.vala.page:25
#, no-wrap
msgid ""
"/* A window in the application. */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"What is your name?\");\n"
"\n"
"\t\tvar name_box = new Gtk.Entry ();\n"
"\n"
"\t\t/* Connect to the signal handler. */\n"
"\t\tname_box.activate.connect (this.on_activate);\n"
"\t\tname_box.show ();\n"
"\n"
"\t\tthis.set_default_size (300, 100);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\t/* Add the name_box to this window. */\n"
"\t\tthis.add (name_box);\n"
"\t}\n"
"\n"
"\t/* Signal handler (aka. callback function) for the 'activate'\n"
"\t * signal of a Gtk.Entry.\n"
"\t */\n"
"\tvoid on_activate (Gtk.Entry entry) {\n"
"\t\tname = entry.get_text ();\n"
"\t\tprint (\"\\nHello \" + name + \"!\\n\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application. */\n"
"class MyApplication : Gtk.Application {\n"
"\n"
"\t/* Constructor for the application. */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create a new window for this application\n"
"\t\t * and show it. */\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"}\n"
"\n"
"/* The main function creats and runs the application. */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* Ένα παράθυρο στην εφαρμογή. */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Κατασκευαστής */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"What is your name?\");\n"
"\n"
"\t\tvar name_box = new Gtk.Entry ();\n"
"\n"
"\t\t/* Connect to the signal handler. */\n"
"\t\tname_box.activate.connect (this.on_activate);\n"
"\t\tname_box.show ();\n"
"\n"
"\t\tthis.set_default_size (300, 100);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\t/* Προσθήκη του name_box σε αυτό το παράθυρο. */\n"
"\t\tthis.add (name_box);\n"
"\t}\n"
"\n"
"\t/* Ο χειριστής σήματος (aka. συνάρτηση επανάκλησης) για το 'activate'\n"
"\t * signal of a Gtk.Entry.\n"
"\t */\n"
"\tvoid on_activate (Gtk.Entry entry) {\n"
"\t\tname = entry.get_text ();\n"
"\t\tprint (\"\\nHello \" + name + \"!\\n\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* Αυτή είναι η εφαρμογή. */\n"
"class MyApplication : Gtk.Application {\n"
"\n"
"\t/* Ο κατασκευαστής για την εφαρμογή. */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Αντικατάσταση του σήματος 'activate' της GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Δημιουργία νέου παραθύρου για την εφαρμογή\n"
"\t\t * και εμφάνισή του. */\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"}\n"
"\n"
"/* Η κύρια συνάρτηση δημιουργεί και τρέχει την εφαρμογή. */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/entry.vala.page:30
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Entry.html\">Gtk.Entry</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Entry.html\">Gtk.Entry</"
"link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/filechooserdialog.py.page:26
msgctxt "_"
msgid ""
"external ref='media/filechooserdialog_save.png' "
"md5='3a7a3b71b9d3a36066857843b68ff27f'"
msgstr ""
"external ref='media/filechooserdialog_save.png' "
"md5='3a7a3b71b9d3a36066857843b68ff27f'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/filechooserdialog.py.page:28
msgctxt "_"
msgid ""
"external ref='media/filechooserdialog_menu.png' "
"md5='8a75f04127a70eba0ed68a9eb1d3bbca'"
msgstr ""
"external ref='media/filechooserdialog_menu.png' "
"md5='8a75f04127a70eba0ed68a9eb1d3bbca'"

#. (itstool) path: info/title
#: C/filechooserdialog.py.page:8
msgctxt "text"
msgid "FileChooserDialog (Python)"
msgstr "FileChooserDialog (Python)"

#. (itstool) path: info/desc
#: C/filechooserdialog.py.page:22
msgid "A dialog suitable for \"Open\" and \"Save\" commands"
msgstr "Ένας διάλογος κατάλληλος για τις εντολές \"Open\" και \"Save\""

#. (itstool) path: page/title
#: C/filechooserdialog.py.page:25 C/filechooserdialog.vala.page:24
msgid "FileChooserDialog"
msgstr "FileChooserDialog"

#. (itstool) path: page/p
#: C/filechooserdialog.py.page:27
msgid ""
"This FileChooserDialog saves a text document, which can be opened or written "
"from scratch in a TextView (see below)."
msgstr ""
"Αυτός ο FileChooserDialog αποθηκεύει ένα έγγραφο κειμένου, που μπορεί να "
"ανοιχτεί ή να γραφτεί από την αρχή σε μια TextView (δείτε παρακάτω)."

#. (itstool) path: page/p
#: C/filechooserdialog.py.page:29
msgid "It is also possible to call a FileChooserDialog to open a new document."
msgstr ""
"Είναι επίσης πιθανό να καλείτε έναν FileChooserDialog για να ανοίξετε ένα "
"νέο έγγραφο."

#. (itstool) path: section/title
#: C/filechooserdialog.py.page:34
msgid "Steps to recreate the example"
msgstr "Βήματα για αναδημιουργία του παραδείγματος"

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:36
msgid ""
"Create a file .ui to describe an app-menu with items \"New\", \"Open\", "
"\"Save\", \"Save as\", and \"Quit\". This can be done with Glade or in a "
"text editor. See <link xref=\"#xml\"/>"
msgstr ""
"Δημιουργήστε ένα αρχείο .ui για να περιγράψετε ένα μενού εφαρμογών με "
"στοιχεία \"New\", \"Open\", \"Save\", \"Save as\" και \"Quit\". Αυτό μπορεί "
"να γίνει με Glade ή έναν επεξεργαστή κειμένου. Δείτε <link xref=\"#xml\"/>"

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:37
msgid ""
"Create a Python program for a Gtk.TextView with a Gtk.Buffer <code>self."
"buffer</code>, and a <code>self.file</code> which will be a Gio.File and we "
"set initially as <code>None</code>."
msgstr ""
"Δημιουργήστε ένα πρόγραμμα Python για μία Gtk.TextView με μια Gtk.Buffer "
"<code>self.buffer</code> και ένα <code>self.file</code> που θα είναι ένα Gio."
"File και το ορίζουμε αρχικά ως <code>None</code>."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:38
msgid ""
"In this program, create also the actions corresponding to the items in the "
"app-menu, connect them to callback functions, and import the menu in the "
"<code>do_startup()</code> method with a Gtk.Builder."
msgstr ""
"Σε αυτό το πρόγραμμα, δημιουργήστε επίσης τις ενέργειες που αντιστοιχούν στα "
"στοιχεία στο μενού εφαρμογών, συνδέστε τα στις συναρτήσεις επανάκλησης και "
"εισάγετε το μενού στη μέθοδο <code>do_startup()</code> με ένα Gtk.Builder."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:39
msgid ""
"\"New\" and \"Quit\" actions and callback functions are quite "
"straightforward, see <link xref=\"#code\"/>. See <link xref=\"signals-"
"callbacks.py\"/> for a more detailed explanation of signals and callback "
"functions."
msgstr ""
"Οι ενέργειες \"New\" και \"Quit\" και οι συναρτήσεις επανάκλησης είναι "
"αρκετά απλές, δείτε <link xref=\"#code\"/>. Δείτε <link xref=\"signals-"
"callbacks.py\"/> για μια πιο λεπτομερή εξήγηση των σημάτων και των "
"συναρτήσεων επανάκλησης."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:40
msgid ""
"\"Open\" callback should create and open a Gtk.FileChooserDialog for \"Open"
"\", connected with another callback function for each of the two \"Open\" "
"and \"Cancel\" buttons of the FileChooserDialog."
msgstr ""
"Η επανάκληση \"Open\" πρέπει να δημιουργεί και να ανοίγει έναν Gtk."
"FileChooserDialog για \"Open\", συνδεμένο με μια άλλη συνάρτηση επανάκλησης "
"για κάθε κουμπί από τα δύο \"Open\" και \"Cancel\" του FileChooserDialog."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:41
msgid ""
"\"Save as\" works basically as \"Open\", but the callback function of the "
"\"Save\" button depends on a more complex method <code>save_to_file()</code>."
msgstr ""
"Η \"Save as\" δουλεύει βασικά ως \"Open\", αλλά η συνάρτηση επανάκλησης του "
"κουμπιού \"Save\" εξαρτάται από μια πιο σύνθετη μέθοδο <code>save_to_file()</"
"code>."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:42
msgid ""
"\"Save\" can be reduced to the case where the file is <code>None</code>, "
"that is the case where <code>self.file</code> is a new file, which in turn "
"is the case \"Save as\"; and to the case where the file is not <code>None</"
"code>, which in turn is reduced to <code>save_to_file()</code>."
msgstr ""
"Η \"Save\" μπορεί να αναχθεί σε περίπτωση όπου το αρχείο είναι <code>None</"
"code>, δηλαδή η περίπτωση όπου <code>self.file</code> είναι ένα νέο αρχείο, "
"που με τη σειρά του είναι η περίπτωση \"Save as\"· και στην περίπτωση όπου "
"το αρχείο δεν είναι <code>None</code>, που με τη σειρά του ανάγεται σε to "
"<code>save_to_file()</code>."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:43
msgid ""
"Finally, the method <code>save_to_file()</code>: see <link xref=\"#code\"/>, "
"lines 146 - 175."
msgstr ""
"Τελικά, η μέθοδος <code>save_to_file()</code>: δείτε <link xref=\"#code\"/>, "
"γραμμές 146 - 175."

#. (itstool) path: section/title
#: C/filechooserdialog.py.page:48
msgid "XML file which creates the app-menu"
msgstr "Το αρχείο XML που δημιουργεί το μενού εφαρμογών"

#. (itstool) path: section/code
#: C/filechooserdialog.py.page:49 C/filechooserdialog.vala.page:30
#, no-wrap
msgid ""
"&lt;?xml version=\"1.0\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"appmenu\"&gt;\n"
"    &lt;section&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;win.new&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Open&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;win.open&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"    &lt;/section&gt;\n"
"    &lt;section&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Save&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;win.save&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Save As...&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;win.save-as&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"    &lt;/section&gt;\n"
"    &lt;section&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Quit&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"    &lt;/section&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;\n"
msgstr ""
"&lt;?xml version=\"1.0\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"appmenu\"&gt;\n"
"    &lt;section&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;win.new&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Open&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;win.open&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"    &lt;/section&gt;\n"
"    &lt;section&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Save&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;win.save&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Save As...&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;win.save-as&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"    &lt;/section&gt;\n"
"    &lt;section&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Quit&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"    &lt;/section&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;\n"

#. (itstool) path: section/code
#: C/filechooserdialog.py.page:54
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"from gi.repository import Gio\n"
"from gi.repository import GObject\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(\n"
"            self, title=\"FileChooserDialog Example\", application=app)\n"
"        self.set_default_size(400, 400)\n"
"\n"
"        # the actions for the window menu, connected to the callback functions\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        self.add_action(new_action)\n"
"\n"
"        open_action = Gio.SimpleAction.new(\"open\", None)\n"
"        open_action.connect(\"activate\", self.open_callback)\n"
"        self.add_action(open_action)\n"
"\n"
"        save_action = Gio.SimpleAction.new(\"save\", None)\n"
"        save_action.connect(\"activate\", self.save_callback)\n"
"        self.add_action(save_action)\n"
"\n"
"        save_as_action = Gio.SimpleAction.new(\"save-as\", None)\n"
"        save_as_action.connect(\"activate\", self.save_as_callback)\n"
"        self.add_action(save_as_action)\n"
"\n"
"        # the file\n"
"        self.file = None\n"
"\n"
"        # the textview with the buffer\n"
"        self.buffer = Gtk.TextBuffer()\n"
"        textview = Gtk.TextView(buffer=self.buffer)\n"
"        textview.set_wrap_mode(Gtk.WrapMode.WORD)\n"
"\n"
"        # a scrolled window for the textview\n"
"        self.scrolled_window = Gtk.ScrolledWindow()\n"
"        self.scrolled_window.set_policy(\n"
"            Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)\n"
"        self.scrolled_window.add(textview)\n"
"        self.scrolled_window.set_border_width(5)\n"
"\n"
"        # add the scrolled window to the window\n"
"        self.add(self.scrolled_window)\n"
"\n"
"    # callback for new\n"
"    def new_callback(self, action, parameter):\n"
"        self.buffer.set_text(\"\")\n"
"        print \"New file created\"\n"
"\n"
"    # callback for open\n"
"    def open_callback(self, action, parameter):\n"
"        # create a filechooserdialog to open:\n"
"        # the arguments are: title of the window, parent_window, action,\n"
"        # (buttons, response)\n"
"        open_dialog = Gtk.FileChooserDialog(\"Pick a file\", self,\n"
"                                            Gtk.FileChooserAction.OPEN,\n"
"                                           (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,\n"
"                                            Gtk.STOCK_OPEN, Gtk.ResponseType.ACCEPT))\n"
"\n"
"        # not only local files can be selected in the file selector\n"
"        open_dialog.set_local_only(False)\n"
"        # dialog always on top of the textview window\n"
"        open_dialog.set_modal(True)\n"
"        # connect the dialog with the callback function open_response_cb()\n"
"        open_dialog.connect(\"response\", self.open_response_cb)\n"
"        # show the dialog\n"
"        open_dialog.show()\n"
"\n"
"    # callback function for the dialog open_dialog\n"
"    def open_response_cb(self, dialog, response_id):\n"
"        open_dialog = dialog\n"
"        # if response is \"ACCEPT\" (the button \"Open\" has been clicked)\n"
"        if response_id == Gtk.ResponseType.ACCEPT:\n"
"            # self.file is the file that we get from the FileChooserDialog\n"
"            self.file = open_dialog.get_file()\n"
"            # an empty string (provisionally)\n"
"            content = \"\"\n"
"            try:\n"
"                # load the content of the file into memory:\n"
"                # success is a boolean depending on the success of the operation\n"
"                # content is self-explanatory\n"
"                # etags is an entity tag (can be used to quickly determine if the\n"
"                # file has been modified from the version on the file system)\n"
"                [success, content, etags] = self.file.load_contents(None)\n"
"            except GObject.GError as e:\n"
"                print \"Error: \" + e.message\n"
"            # set the content as the text into the buffer\n"
"            self.buffer.set_text(content, len(content))\n"
"            print \"opened: \" + open_dialog.get_filename()\n"
"        # if response is \"CANCEL\" (the button \"Cancel\" has been clicked)\n"
"        elif response_id == Gtk.ResponseType.CANCEL:\n"
"            print \"cancelled: FileChooserAction.OPEN\"\n"
"        # destroy the FileChooserDialog\n"
"        dialog.destroy()\n"
"\n"
"    # callback function for save_as\n"
"    def save_as_callback(self, action, parameter):\n"
"        # create a filechooserdialog to save:\n"
"        # the arguments are: title of the window, parent_window, action,\n"
"        # (buttons, response)\n"
"        save_dialog = Gtk.FileChooserDialog(\"Pick a file\", self,\n"
"                                            Gtk.FileChooserAction.SAVE,\n"
"                                           (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,\n"
"                                            Gtk.STOCK_SAVE, Gtk.ResponseType.ACCEPT))\n"
"        # the dialog will present a confirmation dialog if the user types a file name that\n"
"        # already exists\n"
"        save_dialog.set_do_overwrite_confirmation(True)\n"
"        # dialog always on top of the textview window\n"
"        save_dialog.set_modal(True)\n"
"        # if self.file has already been saved\n"
"        if self.file is not None:\n"
"            try:\n"
"                # set self.file as the current filename for the file chooser\n"
"                save_dialog.set_file(self.file)\n"
"            except GObject.GError as e:\n"
"                print \"Error: \" + e.message\n"
"        # connect the dialog to the callback function save_response_cb()\n"
"        save_dialog.connect(\"response\", self.save_response_cb)\n"
"        # show the dialog\n"
"        save_dialog.show()\n"
"\n"
"    # callback function for the dialog save_dialog\n"
"    def save_response_cb(self, dialog, response_id):\n"
"        save_dialog = dialog\n"
"        # if response is \"ACCEPT\" (the button \"Save\" has been clicked)\n"
"        if response_id == Gtk.ResponseType.ACCEPT:\n"
"            # self.file is the currently selected file\n"
"            self.file = save_dialog.get_file()\n"
"            # save to file (see below)\n"
"            self.save_to_file()\n"
"        # if response is \"CANCEL\" (the button \"Cancel\" has been clicked)\n"
"        elif response_id == Gtk.ResponseType.CANCEL:\n"
"            print \"cancelled: FileChooserAction.SAVE\"\n"
"        # destroy the FileChooserDialog\n"
"        dialog.destroy()\n"
"\n"
"    # callback function for save\n"
"    def save_callback(self, action, parameter):\n"
"        # if self.file is not already there\n"
"        if self.file is not None:\n"
"            self.save_to_file()\n"
"        # self.file is a new file\n"
"        else:\n"
"            # use save_as\n"
"            self.save_as_callback(action, parameter)\n"
"\n"
"    # save_to_file\n"
"    def save_to_file(self):\n"
"        # get the content of the buffer, without hidden characters\n"
"        [start, end] = self.buffer.get_bounds()\n"
"        current_contents = self.buffer.get_text(start, end, False)\n"
"        # if there is some content\n"
"        if current_contents != \"\":\n"
"            # set the content as content of self.file.\n"
"            # arguments: contents, etags, make_backup, flags, GError\n"
"            try:\n"
"                self.file.replace_contents(current_contents,\n"
"                                           None,\n"
"                                           False,\n"
"                                           Gio.FileCreateFlags.NONE,\n"
"                                           None)\n"
"                print \"saved: \" + self.file.get_path()\n"
"            except GObject.GError as e:\n"
"                print \"Error: \" + e.message\n"
"        # if the contents are empty\n"
"        else:\n"
"            # create (if the file does not exist) or overwrite the file in readwrite mode.\n"
"            # arguments: etags, make_backup, flags, GError\n"
"            try:\n"
"                self.file.replace_readwrite(None,\n"
"                                            False,\n"
"                                            Gio.FileCreateFlags.NONE,\n"
"                                            None)\n"
"                print \"saved: \" + self.file.get_path()\n"
"            except GObject.GError as e:\n"
"                print \"Error: \" + e.message\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # app action quit, connected to the callback function\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_callback)\n"
"        self.add_action(quit_action)\n"
"\n"
"        # get the menu from the ui file with a builder\n"
"        builder = Gtk.Builder()\n"
"        try:\n"
"            builder.add_from_file(\"filechooserdialog.ui\")\n"
"        except:\n"
"            print \"file not found\"\n"
"            sys.exit()\n"
"        menu = builder.get_object(\"appmenu\")\n"
"        self.set_app_menu(menu)\n"
"\n"
"    # callback function for quit\n"
"    def quit_callback(self, action, parameter):\n"
"        self.quit()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"from gi.repository import Gio\n"
"from gi.repository import GObject\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(\n"
"            self, title=\"FileChooserDialog Example\", application=app)\n"
"        self.set_default_size(400, 400)\n"
"\n"
"        # the actions for the window menu, connected to the callback functions\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        self.add_action(new_action)\n"
"\n"
"        open_action = Gio.SimpleAction.new(\"open\", None)\n"
"        open_action.connect(\"activate\", self.open_callback)\n"
"        self.add_action(open_action)\n"
"\n"
"        save_action = Gio.SimpleAction.new(\"save\", None)\n"
"        save_action.connect(\"activate\", self.save_callback)\n"
"        self.add_action(save_action)\n"
"\n"
"        save_as_action = Gio.SimpleAction.new(\"save-as\", None)\n"
"        save_as_action.connect(\"activate\", self.save_as_callback)\n"
"        self.add_action(save_as_action)\n"
"\n"
"        # the file\n"
"        self.file = None\n"
"\n"
"        # the textview with the buffer\n"
"        self.buffer = Gtk.TextBuffer()\n"
"        textview = Gtk.TextView(buffer=self.buffer)\n"
"        textview.set_wrap_mode(Gtk.WrapMode.WORD)\n"
"\n"
"        # a scrolled window for the textview\n"
"        self.scrolled_window = Gtk.ScrolledWindow()\n"
"        self.scrolled_window.set_policy(\n"
"            Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)\n"
"        self.scrolled_window.add(textview)\n"
"        self.scrolled_window.set_border_width(5)\n"
"\n"
"        # add the scrolled window to the window\n"
"        self.add(self.scrolled_window)\n"
"\n"
"    # callback for new\n"
"    def new_callback(self, action, parameter):\n"
"        self.buffer.set_text(\"\")\n"
"        print \"New file created\"\n"
"\n"
"    # callback for open\n"
"    def open_callback(self, action, parameter):\n"
"        # create a filechooserdialog to open:\n"
"        # the arguments are: title of the window, parent_window, action,\n"
"        # (buttons, response)\n"
"        open_dialog = Gtk.FileChooserDialog(\"Pick a file\", self,\n"
"                                            Gtk.FileChooserAction.OPEN,\n"
"                                           (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,\n"
"                                            Gtk.STOCK_OPEN, Gtk.ResponseType.ACCEPT))\n"
"\n"
"        # not only local files can be selected in the file selector\n"
"        open_dialog.set_local_only(False)\n"
"        # dialog always on top of the textview window\n"
"        open_dialog.set_modal(True)\n"
"        # connect the dialog with the callback function open_response_cb()\n"
"        open_dialog.connect(\"response\", self.open_response_cb)\n"
"        # show the dialog\n"
"        open_dialog.show()\n"
"\n"
"    # callback function for the dialog open_dialog\n"
"    def open_response_cb(self, dialog, response_id):\n"
"        open_dialog = dialog\n"
"        # if response is \"ACCEPT\" (the button \"Open\" has been clicked)\n"
"        if response_id == Gtk.ResponseType.ACCEPT:\n"
"            # self.file is the file that we get from the FileChooserDialog\n"
"            self.file = open_dialog.get_file()\n"
"            # an empty string (provisionally)\n"
"            content = \"\"\n"
"            try:\n"
"                # load the content of the file into memory:\n"
"                # success is a boolean depending on the success of the operation\n"
"                # content is self-explanatory\n"
"                # etags is an entity tag (can be used to quickly determine if the\n"
"                # file has been modified from the version on the file system)\n"
"                [success, content, etags] = self.file.load_contents(None)\n"
"            except GObject.GError as e:\n"
"                print \"Error: \" + e.message\n"
"            # set the content as the text into the buffer\n"
"            self.buffer.set_text(content, len(content))\n"
"            print \"opened: \" + open_dialog.get_filename()\n"
"        # if response is \"CANCEL\" (the button \"Cancel\" has been clicked)\n"
"        elif response_id == Gtk.ResponseType.CANCEL:\n"
"            print \"cancelled: FileChooserAction.OPEN\"\n"
"        # destroy the FileChooserDialog\n"
"        dialog.destroy()\n"
"\n"
"    # callback function for save_as\n"
"    def save_as_callback(self, action, parameter):\n"
"        # create a filechooserdialog to save:\n"
"        # the arguments are: title of the window, parent_window, action,\n"
"        # (buttons, response)\n"
"        save_dialog = Gtk.FileChooserDialog(\"Pick a file\", self,\n"
"                                            Gtk.FileChooserAction.SAVE,\n"
"                                           (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,\n"
"                                            Gtk.STOCK_SAVE, Gtk.ResponseType.ACCEPT))\n"
"        # the dialog will present a confirmation dialog if the user types a file name that\n"
"        # already exists\n"
"        save_dialog.set_do_overwrite_confirmation(True)\n"
"        # dialog always on top of the textview window\n"
"        save_dialog.set_modal(True)\n"
"        # if self.file has already been saved\n"
"        if self.file is not None:\n"
"            try:\n"
"                # set self.file as the current filename for the file chooser\n"
"                save_dialog.set_file(self.file)\n"
"            except GObject.GError as e:\n"
"                print \"Error: \" + e.message\n"
"        # connect the dialog to the callback function save_response_cb()\n"
"        save_dialog.connect(\"response\", self.save_response_cb)\n"
"        # show the dialog\n"
"        save_dialog.show()\n"
"\n"
"    # callback function for the dialog save_dialog\n"
"    def save_response_cb(self, dialog, response_id):\n"
"        save_dialog = dialog\n"
"        # if response is \"ACCEPT\" (the button \"Save\" has been clicked)\n"
"        if response_id == Gtk.ResponseType.ACCEPT:\n"
"            # self.file is the currently selected file\n"
"            self.file = save_dialog.get_file()\n"
"            # save to file (see below)\n"
"            self.save_to_file()\n"
"        # if response is \"CANCEL\" (the button \"Cancel\" has been clicked)\n"
"        elif response_id == Gtk.ResponseType.CANCEL:\n"
"            print \"cancelled: FileChooserAction.SAVE\"\n"
"        # destroy the FileChooserDialog\n"
"        dialog.destroy()\n"
"\n"
"    # callback function for save\n"
"    def save_callback(self, action, parameter):\n"
"        # if self.file is not already there\n"
"        if self.file is not None:\n"
"            self.save_to_file()\n"
"        # self.file is a new file\n"
"        else:\n"
"            # use save_as\n"
"            self.save_as_callback(action, parameter)\n"
"\n"
"    # save_to_file\n"
"    def save_to_file(self):\n"
"        # get the content of the buffer, without hidden characters\n"
"        [start, end] = self.buffer.get_bounds()\n"
"        current_contents = self.buffer.get_text(start, end, False)\n"
"        # if there is some content\n"
"        if current_contents != \"\":\n"
"            # set the content as content of self.file.\n"
"            # arguments: contents, etags, make_backup, flags, GError\n"
"            try:\n"
"                self.file.replace_contents(current_contents,\n"
"                                           None,\n"
"                                           False,\n"
"                                           Gio.FileCreateFlags.NONE,\n"
"                                           None)\n"
"                print \"saved: \" + self.file.get_path()\n"
"            except GObject.GError as e:\n"
"                print \"Error: \" + e.message\n"
"        # if the contents are empty\n"
"        else:\n"
"            # create (if the file does not exist) or overwrite the file in readwrite mode.\n"
"            # arguments: etags, make_backup, flags, GError\n"
"            try:\n"
"                self.file.replace_readwrite(None,\n"
"                                            False,\n"
"                                            Gio.FileCreateFlags.NONE,\n"
"                                            None)\n"
"                print \"saved: \" + self.file.get_path()\n"
"            except GObject.GError as e:\n"
"                print \"Error: \" + e.message\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # app action quit, connected to the callback function\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_callback)\n"
"        self.add_action(quit_action)\n"
"\n"
"        # get the menu from the ui file with a builder\n"
"        builder = Gtk.Builder()\n"
"        try:\n"
"            builder.add_from_file(\"filechooserdialog.ui\")\n"
"        except:\n"
"            print \"file not found\"\n"
"            sys.exit()\n"
"        menu = builder.get_object(\"appmenu\")\n"
"        self.set_app_menu(menu)\n"
"\n"
"    # callback function for quit\n"
"    def quit_callback(self, action, parameter):\n"
"        self.quit()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/filechooserdialog.py.page:58
msgid "Useful methods for a FileChooserDialog"
msgstr "Χρήσιμες μέθοδοι για ένα FileChooserDialog"

#. (itstool) path: section/p
#: C/filechooserdialog.py.page:59
msgid ""
"Note that the action of the FileChooserDialog can be one of the following: "
"<code>Gtk.FileChooserAction.OPEN</code> (the file chooser will only let the "
"user pick an existing file) <code>Gtk.FileChooserAction.SAVE</code> (the "
"file chooser will let the user pick an existing file, or type in a new "
"filename), <code>Gtk.FileChooserAction.SELECT_FOLDER</code> (the file "
"chooser will let the user pick an existing folder), <code>Gtk."
"FileChooserAction.CREATE_FOLDER</code> (the file chooser will let the user "
"name an existing or new folder)."
msgstr ""
"Σημειώστε ότι η ενέργεια του FileChooserDialog μπορεί να είναι μία από τις "
"ακόλουθες: <code>Gtk.FileChooserAction.OPEN</code> (ο επιλογέας αρχείου θα "
"επιτρέψει μόνο ο χρήστης να επιλέξει ένα υπάρχον αρχείο) <code>Gtk."
"FileChooserAction.SAVE</code> (ο επιλογέας αρχείου θα επιτρέψει στον χρήστη "
"να επιλέξει ένα υπάρχον αρχείο, ή τύπο σε ένα νέο όνομα αρχείου), <code>Gtk."
"FileChooserAction.SELECT_FOLDER</code> (ο επιλογέας αρχείου θα επιτρέψει "
"στον χρήστη να επιλέξει έναν υπάρχοντα φάκελο), <code>Gtk.FileChooserAction."
"CREATE_FOLDER</code> (ο επιλογέας αρχείου θα επιτρέψει στον χρήστη να "
"ονομάσει έναν υπάρχοντα ή νέο φάκελο)."

#. (itstool) path: section/p
#: C/filechooserdialog.py.page:60
msgid "Besides the methods used in the <link xref=\"#code\"/>, we have:"
msgstr ""
"Εκτός από τις χρησιμοποιούμενες μεθόδους στο <link xref=\"#code\"/>, έχουμε:"

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:62
msgid ""
"<code>set_show_hidden(True)</code> is used to display hidden files and "
"folders."
msgstr ""
"<code>set_show_hidden(True)</code> χρησιμοποιείται για προβολή κρυφών "
"αρχείων και φακέλων."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:63
msgid ""
"<code>set_select_multiple(True)</code> sets that multiple files can be "
"selected. This is only relevant if the mode is <code>Gtk.FileChooserAction."
"OPEN</code> or <code>Gtk.FileChooserAction.SELECT_FOLDER</code>."
msgstr ""
"Ο <code>set_select_multiple(True)</code> ορίζει ότι πολλά αρχεία μπορούν να "
"επιλεγούν. Αυτό είναι κατάλληλο μόνο εάν η κατάσταση είναι <code>Gtk."
"FileChooserAction.OPEN</code> ή <code>Gtk.FileChooserAction.SELECT_FOLDER</"
"code>."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:64
msgid ""
"In a \"Save as\" dialog, <code>set_current_name(current_name)</code> sets "
"<code>current_name</code> in the file selector, as if entered by the user; "
"<code>current_name</code> can be something like <em>Untitled.txt</em>. This "
"method should not be used except in a \"Save as\" dialog."
msgstr ""
"Σε έναν διάλογο \"Save as\", ο <code>set_current_name(current_name)</code> "
"ορίζει το <code>current_name</code> στον επιλογέα αρχείου, σαν να εισαγόταν "
"από τον χρήστη· το <code>current_name</code> μπορεί να είναι κάτι σαν "
"<em>άτιτλο.txt</em>. Αυτή η μέθοδος δεν πρέπει να χρησιμοποιηθεί εκτός από "
"έναν διάλογο \"Save as\"."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:65
msgid ""
"The default current folder is \"recent items\". To set another folder use "
"<code>set_current_folder_uri(uri)</code>; but note you should use this "
"method and cause the file chooser to show a specific folder only when you "
"are doing a \"Save as\" command and you already have a file saved somewhere."
msgstr ""
"Ο προεπιλεγμένος τρέχον φάκελος είναι \"recent items\". Για τον ορισμό άλλου "
"φακέλου χρησιμοποιήστε <code>set_current_folder_uri(uri)</code>· αλλά "
"σημειώστε ότι θα πρέπει να χρησιμοποιήσετε αυτήν τη μέθοδο και να "
"προκαλέσετε τον επιλογέα αρχείου να εμφανίσει έναν συγκεκριμένο φάκελο μόνο "
"όταν εκτελείτε μια εντολή \"Save as\" και έχετε ήδη ένα αρχείο αποθηκευμένο "
"κάπου."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:73
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkFileChooserDialog.html"
"\">GtkFileChooserDialog</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkFileChooserDialog.html"
"\">GtkFileChooserDialog</link>"

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:74
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkFileChooser.html"
"\">GtkFileChooser</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkFileChooser.html"
"\">GtkFileChooser</link>"

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:75 C/image.c.page:34 C/label.c.page:38
#: C/menubar.c.page:38 C/scrolledwindow.c.page:35
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkWindow.html"
"\">GtkWindow</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkWindow.html"
"\">GtkWindow</link>"

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:76 C/textview.c.page:39
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkTextView.html"
"\">GtkTextView</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkTextView.html"
"\">GtkTextView</link>"

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:77 C/textview.c.page:38
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkTextBuffer.html"
"\">GtkTextBuffer</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkTextBuffer.html"
"\">GtkTextBuffer</link>"

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:78 C/scrolledwindow.c.page:36
#: C/textview.c.page:40
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkScrolledWindow.html"
"\">GtkScrolledWindow</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkScrolledWindow.html"
"\">GtkScrolledWindow</link>"

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:79
msgid ""
"<link href=\"http://developer.gnome.org/gio/stable/GFile.html\">GFile</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gio/stable/GFile.html\">GFile</link>"

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:81
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkBuilder.html"
"\">GtkBuilder</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkBuilder.html"
"\">GtkBuilder</link>"

#. (itstool) path: info/title
#: C/filechooserdialog.vala.page:8
msgctxt "text"
msgid "FileChooserDialog (Vala)"
msgstr "FileChooserDialog (Vala)"

#. (itstool) path: info/desc
#: C/filechooserdialog.vala.page:21
msgid "A dialog suitable for \"Open\" and \"Save\" commands."
msgstr "Ένας διάλογος κατάλληλος για τις εντολές \"Open\" και \"Save\"."

#. (itstool) path: section/title
#: C/filechooserdialog.vala.page:26
msgid "Overview of the example"
msgstr "Επισκόπηση του παραδείγματος"

#. (itstool) path: section/p
#: C/filechooserdialog.vala.page:27
msgid ""
"This example demonstrates how the FileChooserDialog can be used. It is "
"incorporated into a very simple text editor application. All the <link xref="
"\"menubar.vala#win-app\">actions</link>, including the \"open\", \"save\" "
"and \"save-as\" commands can be found in the <link xref=\"gmenu.vala\">app-"
"menu</link>. Here, the app-menu is created using an XML UI file, which is "
"then imported into the application using Gtk.Builder."
msgstr ""
"Αυτό το παράδειγμα δείχνει πώς μπορεί να χρησιμοποιηθεί ο FileChooserDialog. "
"Είναι ενσωματωμένος σε μια πολλή απλή εφαρμογή επεξεργαστή κειμένου. Όλες οι "
"<link xref=\"menubar.vala#win-app\">ενέργειες</link>, συμπεριλαμβάνοντας τις "
"εντολές \"open\", \"save\" και \"save-as\" μπορούν να βρεθούν στο <link xref="
"\"gmenu.vala\">app-menu</link>. Εδώ, το μενού εφαρμογών δημιουργήθηκε "
"χρησιμοποιώντας ένα αρχείο UI XML, που έπειτα εισήχθη στην εφαρμογή "
"χρησιμοποιώντας Gtk.Builder."

#. (itstool) path: section/title
#: C/filechooserdialog.vala.page:29
msgid "XML UI file which creates the app-menu"
msgstr "Το αρχείο UI XML που δημιουργεί το μενού εφαρμογών"

#. (itstool) path: section/title
#: C/filechooserdialog.vala.page:32
msgid "Vala Code"
msgstr "Κώδικας Vala"

#. (itstool) path: section/code
#: C/filechooserdialog.vala.page:33
#, no-wrap
msgid ""
"class MyWindow: Gtk.ApplicationWindow {\n"
"\n"
"\t/* MyWindow instance variables. */\n"
"\tGLib.File? file;\n"
"\tGtk.TextBuffer buffer;\n"
"\tGtk.TextView textview;\n"
"\tGtk.ScrolledWindow scrolled_window;\n"
"\n"
"\t/* Create ActionEntries. */\n"
"\tconst ActionEntry[] actions = {\n"
"\t\t{ \"new\", new_cb },\n"
"\t\t{ \"open\", open_cb },\n"
"\t\t{ \"save\", save_cb },\n"
"\t\t{ \"save-as\", save_as_cb }\n"
"\t};\n"
"\n"
"\t/* Constructor creates MyWindow, and add the scrolled_window. */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"FileChooserDialog Example\");\n"
"\t\tthis.set_default_size (400, 400);\n"
"\n"
"\t\t/* Add the ActionEntries to MyWindow. */\n"
"\t\tthis.add_action_entries (actions, this);\n"
"\n"
"\t\tbuffer = new Gtk.TextBuffer (null); //stores text to be displayed\n"
"\t\ttextview = new Gtk.TextView.with_buffer (buffer); //displays TextBuffer\n"
"\t\ttextview.set_wrap_mode (Gtk.WrapMode.WORD); //sets line wrapping\n"
"\n"
"\t\tscrolled_window = new Gtk.ScrolledWindow (null, null);\n"
"\t\tscrolled_window.set_policy (Gtk.PolicyType.AUTOMATIC,\n"
"\t\t                            Gtk.PolicyType.AUTOMATIC);\n"
"\n"
"\t\tscrolled_window.add (textview);\n"
"\t\tscrolled_window.set_border_width (5);\n"
"\n"
"        this.add (scrolled_window);\n"
"\t\tthis.show_all ();\n"
"\t}\n"
"\n"
"\tvoid new_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tfile = null;\n"
"\t\tbuffer.set_text (\"\");\n"
"\t\tprint (\"New file created\\n\");\n"
"\t}\n"
"\n"
"\t/* Create FileChooserDialog in OPEN mode. */\n"
"\tvoid open_cb (SimpleAction action, Variant? parameter) {\n"
"\n"
"\t\tvar open_dialog = new Gtk.FileChooserDialog (\"Pick a file\",\n"
"\t\t                                             this as Gtk.Window,\n"
"\t\t                                             Gtk.FileChooserAction.OPEN,\n"
"\t\t                                             Gtk.Stock.CANCEL,\n"
"\t\t                                             Gtk.ResponseType.CANCEL,\n"
"\t\t                                             Gtk.Stock.OPEN,\n"
"\t\t                                             Gtk.ResponseType.ACCEPT);\n"
"\n"
"\t\topen_dialog.local_only = false; //allow for uri\n"
"\t\topen_dialog.set_modal (true);\n"
"\t\topen_dialog.response.connect (open_response_cb);\n"
"\t\topen_dialog.show ();\n"
"\t}\n"
"\n"
"\t/* Either open the file and load the file contents or cancel. */\n"
"\tvoid open_response_cb (Gtk.Dialog dialog, int response_id) {\n"
"\t\tvar open_dialog = dialog as Gtk.FileChooserDialog;\n"
"\n"
"\t\tswitch (response_id) {\n"
"\t\t\tcase Gtk.ResponseType.ACCEPT: //open the file\n"
"\t\t\t\tfile = open_dialog.get_file();\n"
"\n"
"\t\t\t\tuint8[] file_contents;\n"
"\n"
"\t\t\t\ttry {\n"
"\t\t\t\t\tfile.load_contents (null, out file_contents, null);\n"
"\t\t\t\t}\n"
"\t\t\t\tcatch (GLib.Error err) { //handle the exception\n"
"\t\t\t\t\terror (\"%s\\n\", err.message);\n"
"\t\t\t\t}\n"
"\t\t\t\t/* Set the buffer text to be the contents of the file. */\n"
"\t\t\t\tbuffer.set_text ((string) file_contents,\n"
"\t\t\t\t                 file_contents.length);\n"
"\n"
"\t\t\t\tprint (\"opened: %s\\n\", (open_dialog.get_filename ()));\n"
"\t\t\t\tbreak;\n"
"\n"
"\t\t\tcase Gtk.ResponseType.CANCEL:\n"
"\t\t\t\tprint (\"cancelled: FileChooserAction.OPEN\\n\");\n"
"\t\t\t\tbreak;\n"
"\t\t}\n"
"\t\tdialog.destroy ();\n"
"\t}\n"
"\n"
"\n"
"\t/* Create FileChooserDialog in SAVE mode. */\n"
"\tvoid save_as_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tvar save_dialog = new Gtk.FileChooserDialog (\"Pick a file\",\n"
"\t\t                                             this as Gtk.Window,\n"
"\t\t                                             Gtk.FileChooserAction.SAVE,\n"
"\t\t                                             Gtk.Stock.CANCEL,\n"
"\t\t                                             Gtk.ResponseType.CANCEL,\n"
"\t\t                                             Gtk.Stock.SAVE,\n"
"\t\t                                             Gtk.ResponseType.ACCEPT);\n"
"\n"
"\t\tsave_dialog.set_do_overwrite_confirmation (true);\n"
"\t\tsave_dialog.set_modal (true);\n"
"\t\tif (file != null) {\n"
"\t\t\ttry {\n"
"\t\t\t\t(save_dialog as Gtk.FileChooser).set_file (file);\n"
"\t\t\t}\n"
"\t\t\tcatch (GLib.Error error) {\n"
"\t\t\t\tprint (\"%s\\n\", error.message);\n"
"\t\t\t}\n"
"\t\t}\n"
"\t\tsave_dialog.response.connect (save_as_response_cb);\n"
"\t\tsave_dialog.show ();\n"
"\t}\n"
"\n"
"\tvoid save_as_response_cb (Gtk.Dialog dialog, int response_id) {\n"
"\t\tvar save_dialog = dialog as Gtk.FileChooserDialog;\n"
"\n"
"\t\tswitch (response_id) {\n"
"\t\t\tcase Gtk.ResponseType.ACCEPT:\n"
"\t\t\t\tfile = save_dialog.get_file();\n"
"\t\t\t\tthis.save_to_file ();\n"
"\t\t\t\tbreak;\n"
"\t\t\tdefault:\n"
"\t\t\t\tbreak;\n"
"\t\t}\n"
"\t\t\tdialog.destroy ();\n"
"\t}\n"
"\n"
"\t/* Save the existing contents to the file.\n"
"\t * If file does not exist, call save_as_cb.\n"
"\t */\n"
"\tvoid save_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tif (file != null) {\n"
"\t\t\tthis.save_to_file ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tsave_as_cb (action, parameter);\n"
"\t\t}\n"
"\t}\n"
"\n"
"\tvoid save_to_file (){\n"
"\t\tGtk.TextIter start;\n"
"\t\tGtk.TextIter end;\n"
"\n"
"\t\tbuffer.get_bounds (out start, out end);\n"
"\t\tstring current_contents = buffer.get_text (start, end, false);\n"
"\t\ttry {\n"
"\t\t\t\tfile.replace_contents (current_contents.data, null, false,\n"
"\t\t\t\t                       GLib.FileCreateFlags.NONE, null, null);\n"
"\n"
"\t\t\t\tprint (\"saved: %s\\n\", file.get_path ());\n"
"\t\t}\n"
"\t\tcatch (GLib.Error err) {\n"
"\t\t\terror (\"%s\\n\", err.message);\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication: Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show_all;\n"
"\t}\n"
"\n"
"\tconst ActionEntry[] actions = {\n"
"\t\t{ \"quit\", quit_cb }\n"
"\t};\n"
"\n"
"\tvoid quit_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tthis.quit ();\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Setup actions */\n"
"\t\tthis.add_action_entries (actions, this);\n"
"\n"
"\t\t/* Setup menus */\n"
"\t\tvar builder = new Gtk.Builder ();\n"
"\t\ttry {\n"
"\t\t\tbuilder.add_from_file (\"filechooserdialog.ui\");\n"
"\t\t} catch (GLib.Error err) {\n"
"\t\t\terror (\"Unable to load file: %s\\n\", err.message);\n"
"\t\t}\n"
"\t\tthis.app_menu = builder.get_object (\"appmenu\") as MenuModel;\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"class MyWindow: Gtk.ApplicationWindow {\n"
"\n"
"\t/* MyWindow instance variables. */\n"
"\tGLib.File? file;\n"
"\tGtk.TextBuffer buffer;\n"
"\tGtk.TextView textview;\n"
"\tGtk.ScrolledWindow scrolled_window;\n"
"\n"
"\t/* Create ActionEntries. */\n"
"\tconst ActionEntry[] actions = {\n"
"\t\t{ \"new\", new_cb },\n"
"\t\t{ \"open\", open_cb },\n"
"\t\t{ \"save\", save_cb },\n"
"\t\t{ \"save-as\", save_as_cb }\n"
"\t};\n"
"\n"
"\t/* Constructor creates MyWindow, and add the scrolled_window. */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"FileChooserDialog Example\");\n"
"\t\tthis.set_default_size (400, 400);\n"
"\n"
"\t\t/* Add the ActionEntries to MyWindow. */\n"
"\t\tthis.add_action_entries (actions, this);\n"
"\n"
"\t\tbuffer = new Gtk.TextBuffer (null); //stores text to be displayed\n"
"\t\ttextview = new Gtk.TextView.with_buffer (buffer); //displays TextBuffer\n"
"\t\ttextview.set_wrap_mode (Gtk.WrapMode.WORD); //sets line wrapping\n"
"\n"
"\t\tscrolled_window = new Gtk.ScrolledWindow (null, null);\n"
"\t\tscrolled_window.set_policy (Gtk.PolicyType.AUTOMATIC,\n"
"\t\t                            Gtk.PolicyType.AUTOMATIC);\n"
"\n"
"\t\tscrolled_window.add (textview);\n"
"\t\tscrolled_window.set_border_width (5);\n"
"\n"
"        this.add (scrolled_window);\n"
"\t\tthis.show_all ();\n"
"\t}\n"
"\n"
"\tvoid new_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tfile = null;\n"
"\t\tbuffer.set_text (\"\");\n"
"\t\tprint (\"New file created\\n\");\n"
"\t}\n"
"\n"
"\t/* Create FileChooserDialog in OPEN mode. */\n"
"\tvoid open_cb (SimpleAction action, Variant? parameter) {\n"
"\n"
"\t\tvar open_dialog = new Gtk.FileChooserDialog (\"Pick a file\",\n"
"\t\t                                             this as Gtk.Window,\n"
"\t\t                                             Gtk.FileChooserAction.OPEN,\n"
"\t\t                                             Gtk.Stock.CANCEL,\n"
"\t\t                                             Gtk.ResponseType.CANCEL,\n"
"\t\t                                             Gtk.Stock.OPEN,\n"
"\t\t                                             Gtk.ResponseType.ACCEPT);\n"
"\n"
"\t\topen_dialog.local_only = false; //allow for uri\n"
"\t\topen_dialog.set_modal (true);\n"
"\t\topen_dialog.response.connect (open_response_cb);\n"
"\t\topen_dialog.show ();\n"
"\t}\n"
"\n"
"\t/* Either open the file and load the file contents or cancel. */\n"
"\tvoid open_response_cb (Gtk.Dialog dialog, int response_id) {\n"
"\t\tvar open_dialog = dialog as Gtk.FileChooserDialog;\n"
"\n"
"\t\tswitch (response_id) {\n"
"\t\t\tcase Gtk.ResponseType.ACCEPT: //open the file\n"
"\t\t\t\tfile = open_dialog.get_file();\n"
"\n"
"\t\t\t\tuint8[] file_contents;\n"
"\n"
"\t\t\t\ttry {\n"
"\t\t\t\t\tfile.load_contents (null, out file_contents, null);\n"
"\t\t\t\t}\n"
"\t\t\t\tcatch (GLib.Error err) { //handle the exception\n"
"\t\t\t\t\terror (\"%s\\n\", err.message);\n"
"\t\t\t\t}\n"
"\t\t\t\t/* Set the buffer text to be the contents of the file. */\n"
"\t\t\t\tbuffer.set_text ((string) file_contents,\n"
"\t\t\t\t                 file_contents.length);\n"
"\n"
"\t\t\t\tprint (\"opened: %s\\n\", (open_dialog.get_filename ()));\n"
"\t\t\t\tbreak;\n"
"\n"
"\t\t\tcase Gtk.ResponseType.CANCEL:\n"
"\t\t\t\tprint (\"cancelled: FileChooserAction.OPEN\\n\");\n"
"\t\t\t\tbreak;\n"
"\t\t}\n"
"\t\tdialog.destroy ();\n"
"\t}\n"
"\n"
"\n"
"\t/* Create FileChooserDialog in SAVE mode. */\n"
"\tvoid save_as_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tvar save_dialog = new Gtk.FileChooserDialog (\"Pick a file\",\n"
"\t\t                                             this as Gtk.Window,\n"
"\t\t                                             Gtk.FileChooserAction.SAVE,\n"
"\t\t                                             Gtk.Stock.CANCEL,\n"
"\t\t                                             Gtk.ResponseType.CANCEL,\n"
"\t\t                                             Gtk.Stock.SAVE,\n"
"\t\t                                             Gtk.ResponseType.ACCEPT);\n"
"\n"
"\t\tsave_dialog.set_do_overwrite_confirmation (true);\n"
"\t\tsave_dialog.set_modal (true);\n"
"\t\tif (file != null) {\n"
"\t\t\ttry {\n"
"\t\t\t\t(save_dialog as Gtk.FileChooser).set_file (file);\n"
"\t\t\t}\n"
"\t\t\tcatch (GLib.Error error) {\n"
"\t\t\t\tprint (\"%s\\n\", error.message);\n"
"\t\t\t}\n"
"\t\t}\n"
"\t\tsave_dialog.response.connect (save_as_response_cb);\n"
"\t\tsave_dialog.show ();\n"
"\t}\n"
"\n"
"\tvoid save_as_response_cb (Gtk.Dialog dialog, int response_id) {\n"
"\t\tvar save_dialog = dialog as Gtk.FileChooserDialog;\n"
"\n"
"\t\tswitch (response_id) {\n"
"\t\t\tcase Gtk.ResponseType.ACCEPT:\n"
"\t\t\t\tfile = save_dialog.get_file();\n"
"\t\t\t\tthis.save_to_file ();\n"
"\t\t\t\tbreak;\n"
"\t\t\tdefault:\n"
"\t\t\t\tbreak;\n"
"\t\t}\n"
"\t\t\tdialog.destroy ();\n"
"\t}\n"
"\n"
"\t/* Save the existing contents to the file.\n"
"\t * If file does not exist, call save_as_cb.\n"
"\t */\n"
"\tvoid save_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tif (file != null) {\n"
"\t\t\tthis.save_to_file ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tsave_as_cb (action, parameter);\n"
"\t\t}\n"
"\t}\n"
"\n"
"\tvoid save_to_file (){\n"
"\t\tGtk.TextIter start;\n"
"\t\tGtk.TextIter end;\n"
"\n"
"\t\tbuffer.get_bounds (out start, out end);\n"
"\t\tstring current_contents = buffer.get_text (start, end, false);\n"
"\t\ttry {\n"
"\t\t\t\tfile.replace_contents (current_contents.data, null, false,\n"
"\t\t\t\t                       GLib.FileCreateFlags.NONE, null, null);\n"
"\n"
"\t\t\t\tprint (\"saved: %s\\n\", file.get_path ());\n"
"\t\t}\n"
"\t\tcatch (GLib.Error err) {\n"
"\t\t\terror (\"%s\\n\", err.message);\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication: Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show_all;\n"
"\t}\n"
"\n"
"\tconst ActionEntry[] actions = {\n"
"\t\t{ \"quit\", quit_cb }\n"
"\t};\n"
"\n"
"\tvoid quit_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tthis.quit ();\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Setup actions */\n"
"\t\tthis.add_action_entries (actions, this);\n"
"\n"
"\t\t/* Setup menus */\n"
"\t\tvar builder = new Gtk.Builder ();\n"
"\t\ttry {\n"
"\t\t\tbuilder.add_from_file (\"filechooserdialog.ui\");\n"
"\t\t} catch (GLib.Error err) {\n"
"\t\t\terror (\"Unable to load file: %s\\n\", err.message);\n"
"\t\t}\n"
"\t\tthis.app_menu = builder.get_object (\"appmenu\") as MenuModel;\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: section/title
#: C/filechooserdialog.vala.page:35 C/menubar.vala.page:187
msgid "Relevant API documentation"
msgstr "Σχετική τεκμηρίωση API"

#. (itstool) path: item/p
#: C/filechooserdialog.vala.page:40
msgid ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.FileChooser.html\">FileChooser</"
"link>"
msgstr ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.FileChooser.html\">FileChooser</"
"link>"

#. (itstool) path: item/p
#: C/filechooserdialog.vala.page:41
msgid ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.FileChooserDialog.html"
"\">FileChooserDialog</link>"
msgstr ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.FileChooserDialog.html"
"\">FileChooserDialog</link>"

#. (itstool) path: item/p
#: C/filechooserdialog.vala.page:42
msgid ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.Builder.html\">Gtk.Builder</"
"link>"
msgstr ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.Builder.html\">Gtk.Builder</"
"link>"

#. (itstool) path: item/p
#: C/filechooserdialog.vala.page:43
msgid ""
"<link href=\"http://valadoc.org/gio-2.0/GLib.ActionEntry.html\">GLib."
"ActionEntry</link>"
msgstr ""
"<link href=\"http://valadoc.org/gio-2.0/GLib.ActionEntry.html\">GLib."
"ActionEntry</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/fontchooserwidget.js.page:23 C/fontchooserwidget.py.page:25
#: C/fontchooserwidget.vala.page:23
msgctxt "_"
msgid ""
"external ref='media/fontchooserwidget.png' "
"md5='9161245e307b432ae1313e9a9941edae'"
msgstr ""
"external ref='media/fontchooserwidget.png' "
"md5='9161245e307b432ae1313e9a9941edae'"

#. (itstool) path: info/title
#: C/fontchooserwidget.js.page:8
msgctxt "text"
msgid "FontChooserWidget (JavaScript)"
msgstr ""
"Γραφικό στοιχείο επιλογής γραμματοσειράς (FontChooserWidget) (JavaScript)"

#. (itstool) path: info/desc
#: C/fontchooserwidget.js.page:18 C/fontchooserwidget.py.page:20
#: C/fontchooserwidget.vala.page:18
msgid "A widget to choose a font"
msgstr "Ένα γραφικό στοιχείο για επιλογή μιας γραμματοσειράς"

#. (itstool) path: page/title
#: C/fontchooserwidget.js.page:21 C/fontchooserwidget.py.page:23
#: C/fontchooserwidget.vala.page:21
msgid "FontChooserWidget"
msgstr "FontChooserWidget"

#. (itstool) path: page/p
#: C/fontchooserwidget.js.page:24 C/fontchooserwidget.py.page:26
msgid "A FontChooserWidget with a callback function."
msgstr "Ένα FontChooserWidget με μια συνάρτηση επανάκλησης."

#. (itstool) path: section/code
#: C/fontchooserwidget.js.page:30
#, no-wrap
msgid ""
"//!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const FontChooserWidgetExample = new Lang.Class ({\n"
"    Name: 'Font Chooser Widget Example',\n"
"\n"
"    // Create the application itthis\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application({ application_id: 'org.example.fontchooserwidget' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"        // Create the application window\n"
"        this.window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                    window_position: Gtk.WindowPosition.CENTER,\n"
"                                                    title: \"FontChooserWidget\",\n"
"                                                    default_width: 200,\n"
"                                                    default_height: 200,\n"
"                                                    border_width: 10 });\n"
"\n"
"        this.fontChooser = new Gtk.FontChooserWidget();\n"
"        // a default font\n"
"        this.fontChooser.set_font(\"Sans\");\n"
"        // a text to preview the font\n"
"        this.fontChooser.set_preview_text(\"This is an example of preview text!\");\n"
"\n"
"        // connect signal from the font chooser to the callback function\n"
"        this.fontChooser.connect(\"notify::font\", Lang.bind(this, this._fontCb));\n"
"\n"
"        // add the font chooser to the window\n"
"        this.window.add(this.fontChooser);\n"
"        this.window.show_all();\n"
"   },\n"
"\n"
"     // callback function:\n"
"     _fontCb: function() {\n"
"        // print in the terminal\n"
"        print(\"You chose the font \" + this.fontChooser.get_font());\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new FontChooserWidgetExample();\n"
"app.application.run (ARGV);\n"
msgstr ""
"//!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk·\n"
"const Lang = imports.lang·\n"
"\n"
"const FontChooserWidgetExample = new Lang.Class ({\n"
"    Name: 'Font Chooser Widget Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής itthis\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application({ application_id: 'org.example.fontchooserwidget' })·\n"
"\n"
"        // Σύνδεση σημάτων 'activate' και 'startup' στις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate))·\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup))·\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this.window.present()·\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ()·\n"
"    },\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this.window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                    window_position: Gtk.WindowPosition.CENTER,\n"
"                                                    title: \"FontChooserWidget\",\n"
"                                                    default_width: 200,\n"
"                                                    default_height: 200,\n"
"                                                    border_width: 10 })·\n"
"\n"
"        this.fontChooser = new Gtk.FontChooserWidget()·\n"
"        // Μια προεπιλεγμένη γραμματοσειρά\n"
"        this.fontChooser.set_font(\"Sans\")·\n"
"        // Κείμενο για προεπισκόπηση της γραμματοσειράς\n"
"        this.fontChooser.set_preview_text(\"This is an example of preview text!\")·\n"
"\n"
"        // Σύνδεση σήματος από τον επιλογέα γραμματοσειράς στη συνάρτηση επανάκλησης\n"
"        this.fontChooser.connect(\"notify::font\", Lang.bind(this, this._fontCb))·\n"
"\n"
"        // Προσθήκη του επιλογέα γραμματοσειράς στο παράθυρο\n"
"        this.window.add(this.fontChooser)·\n"
"        this.window.show_all()·\n"
"   },\n"
"\n"
"     // Συνάρτηση επανάκλησης:\n"
"     _fontCb: function() {\n"
"        // Εκτύπωση στο τερματικό\n"
"        print(\"You chose the font \" + this.fontChooser.get_font())·\n"
"    }\n"
"})·\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new FontChooserWidgetExample()·\n"
"app.application.run (ARGV)·\n"

#. (itstool) path: item/p
#: C/fontchooserwidget.js.page:37 C/fontchooserwidget.py.page:47
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkFontChooserWidget."
"html\">GtkFontChooserWidget</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkFontChooserWidget."
"html\">GtkFontChooserWidget</link>"

#. (itstool) path: info/title
#: C/fontchooserwidget.py.page:8
msgctxt "text"
msgid "FontChooserWidget (Python)"
msgstr "FontChooserWidget (Python)"

#. (itstool) path: section/code
#: C/fontchooserwidget.py.page:32
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"FontChooserWidget\", application=app)\n"
"\n"
"        # a font chooser\n"
"        self.font_chooser = Gtk.FontChooserWidget()\n"
"        # a default font\n"
"        self.font_chooser.set_font(\"Sans\")\n"
"        # a text to preview the font\n"
"        self.font_chooser.set_preview_text(\n"
"            \"This is an example of preview text!\")\n"
"\n"
"        # connect signal from the font chooser to the callback function\n"
"        self.font_chooser.connect(\"notify::font\", self.font_cb)\n"
"\n"
"        # add the font chooser to the window\n"
"        self.add(self.font_chooser)\n"
"\n"
"    # callback function:\n"
"    def font_cb(self, event, user_data):\n"
"        # print in the terminal\n"
"        print \"You chose the font \" + self.font_chooser.get_font()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"FontChooserWidget\", application=app)\n"
"\n"
"        # a font chooser\n"
"        self.font_chooser = Gtk.FontChooserWidget()\n"
"        # a default font\n"
"        self.font_chooser.set_font(\"Sans\")\n"
"        # a text to preview the font\n"
"        self.font_chooser.set_preview_text(\n"
"            \"This is an example of preview text!\")\n"
"\n"
"        # connect signal from the font chooser to the callback function\n"
"        self.font_chooser.connect(\"notify::font\", self.font_cb)\n"
"\n"
"        # add the font chooser to the window\n"
"        self.add(self.font_chooser)\n"
"\n"
"    # callback function:\n"
"    def font_cb(self, event, user_data):\n"
"        # print in the terminal\n"
"        print \"You chose the font \" + self.font_chooser.get_font()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/fontchooserwidget.py.page:35
msgid "Useful methods for a FontChooserWidget"
msgstr "Χρήσιμες μέθοδοι για ένα FontChooserWidget"

#. (itstool) path: section/p
#: C/fontchooserwidget.py.page:36
msgid ""
"In line 16 the <code>\"notify::font\"</code> signal from the widget is "
"connected to the callback function <code>font_cb()</code> using "
"<code><var>widget</var>.connect(<var>signal</var>, <var>callback function</"
"var>)</code>. See <link xref=\"signals-callbacks.py\"/> for a more detailed "
"explanation."
msgstr ""
"Στη γραμμή 16 το σήμα <code>\"notify::font\"</code> από το γραφικό στοιχείο "
"συνδέεται με τη συνάρτηση επανάκλησης <code>font_cb()</code> χρησιμοποιώντας "
"<code><var>widget</var>.connect(<var>signal</var>, <var>callback function</"
"var>)</code>. Δείτε <link xref=\"signals-callbacks.py\"/> για μια πιο "
"λεπτομερή εξήγηση."

#. (itstool) path: item/p
#: C/fontchooserwidget.py.page:38
msgid ""
"To set the font which is initially selected, use <code>set_font(font)</code> "
"(where <code>font</code> is the font name) or <code>set_font_desc(font)</"
"code> (where <code>font</code> is the PangoFontDescription)."
msgstr ""
"Για ορισμό της γραμματοσειράς που αρχικά επιλέχτηκε, χρησιμοποιήστε "
"<code>set_font(font)</code> (όπου <code>font</code> είναι το όνομα της "
"γραμματοσειράς) ή <code>set_font_desc(font)</code> (όπου <code>font</code> "
"είναι η PangoFontDescription)."

#. (itstool) path: item/p
#: C/fontchooserwidget.py.page:39
msgid ""
"To get the selected font use <code>get_font()</code> or "
"<code>get_font_desc()</code>."
msgstr ""
"Για τη λήψη της επιλεγμένης γραμματοσειράς χρησιμοποιήστε <code>get_font()</"
"code> ή <code>get_font_desc()</code>."

#. (itstool) path: item/p
#: C/fontchooserwidget.py.page:40
msgid ""
"To change the text which is shown in the preview area, use "
"<code>set_preview_text()</code>."
msgstr ""
"Για αλλαγή του κειμένου που προβάλλεται στην περιοχή προεπισκόπησης, "
"χρησιμοποιήστε <code>set_preview_text()</code>."

#. (itstool) path: info/title
#: C/fontchooserwidget.vala.page:8
msgctxt "text"
msgid "FontChooserWidget (Vala)"
msgstr "Γραφικό στοιχείο επιλογής γραμματοσειράς (FontChooserWidget) (Vala)"

#. (itstool) path: credit/name
#: C/fontchooserwidget.vala.page:13
msgid "Tiffany Antpoolski"
msgstr "Tiffany Antopolski"

#. (itstool) path: page/p
#: C/fontchooserwidget.vala.page:24
msgid "A FontChooserWidget with a lambda callback function."
msgstr ""
"Ένα γραφικό στοιχείο επιλογής γραμματοσειράς (FontChooserWidget) με μια "
"συνάρτηση επανάκλησης λάμδα."

#. (itstool) path: section/code
#: C/fontchooserwidget.vala.page:30
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"        internal MyWindow (MyApplication app) {\n"
"                Object (application: app, title: \"FontChooserWidget\");\n"
"\n"
"\t\tvar font_chooser = new Gtk.FontChooserWidget ();\n"
"\t\tfont_chooser.set_font (\"Sans\");\n"
"\t\tfont_chooser.set_preview_text (\"This is an example of preview text!\");\n"
"\t\tthis.add (font_chooser);\n"
"\n"
"\t\tfont_chooser.notify[\"font\"].connect (() =&gt; {\n"
"\t\t\tprint (\"font: %s\\n\", font_chooser.get_font ().to_string ());\n"
"\t\t\tprint (\"desc: %s\\n\", font_chooser.get_font_desc ().to_string ());\n"
"\t\t\tprint (\"face: %s\\n\", font_chooser.get_font_face ().get_face_name ());\n"
"\t\t\tprint (\"size: %d\\n\", font_chooser.get_font_size ());\n"
"\t\t\tprint (\"family: %s\\n\", font_chooser.get_font_family ().get_name ());\n"
"\t\t\tprint (\"monospace: %s\\n\\n\", font_chooser.get_font_family ().is_monospace ().to_string ());\n"
"\t\t});\n"
"\n"
"                this.show_all ();\n"
"        }\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"        protected override void activate () {\n"
"                new MyWindow (this).show ();\n"
"        }\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"        return new MyApplication ().run (args);\n"
"}\n"
"\n"
msgstr ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"        internal MyWindow (MyApplication app) {\n"
"                Object (application: app, title: \"FontChooserWidget\")·\n"
"\n"
"\t\tvar font_chooser = new Gtk.FontChooserWidget ()·\n"
"\t\tfont_chooser.set_font (\"Sans\")·\n"
"\t\tfont_chooser.set_preview_text (\"This is an example of preview text!\")·\n"
"\t\tthis.add (font_chooser)·\n"
"\n"
"\t\tfont_chooser.notify[\"font\"].connect (() =&gt; {\n"
"\t\t\tprint (\"font: %s\\n\", font_chooser.get_font ().to_string ())·\n"
"\t\t\tprint (\"desc: %s\\n\", font_chooser.get_font_desc ().to_string ())·\n"
"\t\t\tprint (\"face: %s\\n\", font_chooser.get_font_face ().get_face_name ())·\n"
"\t\t\tprint (\"size: %d\\n\", font_chooser.get_font_size ())·\n"
"\t\t\tprint (\"family: %s\\n\", font_chooser.get_font_family ().get_name ())·\n"
"\t\t\tprint (\"monospace: %s\\n\\n\", font_chooser.get_font_family ().is_monospace ().to_string ())·\n"
"\t\t})·\n"
"\n"
"                this.show_all ()·\n"
"        }\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"        protected override void activate () {\n"
"                new MyWindow (this).show ()·\n"
"        }\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"        return new MyApplication ().run (args)·\n"
"}\n"
"\n"

#. (itstool) path: item/p
#: C/fontchooserwidget.vala.page:37
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.FontChooserWidget.html"
"\">GtkFontChooserWidget</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.FontChooserWidget.html"
"\">GtkFontChooserWidget</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/gmenu.c.page:22
msgctxt "_"
msgid "external ref='media/gmenu.c.png' md5='f305fc3cae8d16d72b734ee53b559e33'"
msgstr ""
"external ref='media/gmenu.c.png' md5='f305fc3cae8d16d72b734ee53b559e33'"

#. (itstool) path: info/title
#: C/gmenu.c.page:8
msgctxt "text"
msgid "GMenu (C)"
msgstr "GMenu (C)"

#. (itstool) path: info/desc
#: C/gmenu.c.page:18 C/gmenu.js.page:18 C/gmenu.vala.page:24
msgid "A simple implementation of GMenuModel"
msgstr "Μια απλή υλοποίηση του GMenuModel"

#. (itstool) path: page/title
#: C/gmenu.c.page:21 C/gmenu.js.page:21 C/gmenu.py.page:29
#: C/gmenu.vala.page:27
msgid "GMenu"
msgstr "GMenu"

#. (itstool) path: page/p
#: C/gmenu.c.page:23 C/gmenu.js.page:23 C/gmenu.py.page:31
#: C/gmenu.vala.page:32
msgid "A GtkApplication with a simple GMenu and SimpleActions"
msgstr "Μια GtkApplication με ένα απλό GMenu και SimpleActions"

#. (itstool) path: page/code
#: C/gmenu.c.page:26
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"new_window (GSimpleAction *action,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"  g_print (\"This does nothing. It is only a demonstration.\\n\");\n"
"}\n"
"\n"
"static void\n"
"quit (GSimpleAction *action,\n"
"      GVariant      *parameter,\n"
"      gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"static void\n"
"startup (GtkApplication *application,\n"
"         gpointer        user_data)\n"
"{\n"
"  static const GActionEntry actions[] = {\n"
"    { \"new\", new_window },\n"
"    { \"quit\", quit }\n"
"  };\n"
"\n"
"  GMenu *menu;\n"
"\n"
"  g_action_map_add_action_entries (G_ACTION_MAP (application), actions, G_N_ELEMENTS (actions), application);\n"
"\n"
"  menu = g_menu_new ();\n"
"  g_menu_append (menu, \"New\", \"app.new\");\n"
"  g_menu_append (menu, \"Quit\", \"app.quit\");\n"
"  gtk_application_set_app_menu (application, G_MENU_MODEL (menu));\n"
"  g_object_unref (menu);\n"
"}\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"\n"
"  gtk_window_set_application (GTK_WINDOW (window), GTK_APPLICATION (app));\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Hello GNOME\");\n"
"\n"
"  gtk_widget_show_all (GTK_WIDGET (window));\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\",G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"new_window (GSimpleAction *action,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"  g_print (\"Αυτό δεν κάνει τίποτα. Είναι μόνο μια επίδειξη.\\n\");\n"
"}\n"
"\n"
"static void\n"
"quit (GSimpleAction *action,\n"
"      GVariant      *parameter,\n"
"      gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"static void\n"
"startup (GtkApplication *application,\n"
"         gpointer        user_data)\n"
"{\n"
"  static const GActionEntry actions[] = {\n"
"    { \"new\", new_window },\n"
"    { \"quit\", quit }\n"
"  };\n"
"\n"
"  GMenu *menu;\n"
"\n"
"  g_action_map_add_action_entries (G_ACTION_MAP (application), actions, G_N_ELEMENTS (actions), application);\n"
"\n"
"  menu = g_menu_new ();\n"
"  g_menu_append (menu, \"New\", \"app.new\");\n"
"  g_menu_append (menu, \"Quit\", \"app.quit\");\n"
"  gtk_application_set_app_menu (application, G_MENU_MODEL (menu));\n"
"  g_object_unref (menu);\n"
"}\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"\n"
"  gtk_window_set_application (GTK_WINDOW (window), GTK_APPLICATION (app));\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Hello GNOME\");\n"
"\n"
"  gtk_widget_show_all (GTK_WIDGET (window));\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\",G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/gmenu.js.page:22
msgctxt "_"
msgid ""
"external ref='media/gmenu.js.png' md5='16b8bee122197771ec8498dac42f196b'"
msgstr ""
"external ref='media/gmenu.js.png' md5='16b8bee122197771ec8498dac42f196b'"

#. (itstool) path: info/title
#: C/gmenu.js.page:8
msgctxt "text"
msgid "GMenu (JavaScript)"
msgstr "GMenu (JavaScript)"

#. (itstool) path: page/code
#: C/gmenu.js.page:25
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class ({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.myapp',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"       //connect to 'activate' and 'startup' signals to the callback functions\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI (in this case it's just the ApplicationWindow\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"Welcome to GNOME\" });\n"
"\n"
"        //uncommenting the line below will change the window size\n"
"        //this._window.set_default_size(600, 400);\n"
"\n"
"        //show the window and all child widgets (none in this case)\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    _showNew: function() {\n"
"    print (\"This doesn't do anything. It is only a demonstration.\");\n"
"    },\n"
"\n"
"    _showAbout: function() {\n"
"        print (\"No AboutDialog here.  This is only a demonstration.\");\n"
"    },\n"
"\n"
"    //create the menu items and connect the signals to the callback functions.\n"
"    _initMenus: function() {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"New\",'app.new');\n"
"        menu.append(\"About\", 'app.about');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        let newAction = new Gio.SimpleAction ({ name: 'new' });\n"
"        newAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showNew();\n"
"            }));\n"
"        this.application.add_action(newAction);\n"
"\n"
"        let aboutAction = new Gio.SimpleAction ({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"         this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    //callback function for 'startup' signal\n"
"    _onStartup: function() {\n"
"        //You must call _initMenus() before calling _buildUI().\n"
"        this._initMenus();\n"
"        this._buildUI();\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class ({\n"
"    Name: 'Application',\n"
"\n"
"    //Δημιουργία της εφαρμογής\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.myapp',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"       //Σύνδεση των σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //Δημιουργία της διεπαφής χρήστη(σε αυτήν την περίπτωση είναι απλά το παράθυρο της εφαρμογής \n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"Welcome to GNOME\" });\n"
"\n"
"        //Αποσχολιάζοντας την παρακάτω γραμμή θα αλλάξει το μέγεθος του παραθύρου\n"
"        //this._window.set_default_size(600, 400);\n"
"\n"
"        //Εμφάνιση του παραθύρου και όλων των θυγατικών γραφικών στοιχείων (κανένα σε αυτήν την περίπτωση)\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    _showNew: function() {\n"
"    print (\"This doesn't do anything. It is only a demonstration.\");\n"
"    },\n"
"\n"
"    _showAbout: function() {\n"
"        print (\"No AboutDialog here.  This is only a demonstration.\");\n"
"    },\n"
"\n"
"    //Δημιουργία των στοιχείων μενού και σύνδεση των σημάτων με τις συναρτήσεις επανάκλησης.\n"
"    _initMenus: function() {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"New\",'app.new');\n"
"        menu.append(\"About\", 'app.about');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        let newAction = new Gio.SimpleAction ({ name: 'new' });\n"
"        newAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showNew();\n"
"            }));\n"
"        this.application.add_action(newAction);\n"
"\n"
"        let aboutAction = new Gio.SimpleAction ({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"         this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"    //Η συνάρτηση επανάκλησης για το σήμα 'activate'\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    //Η συνάρτηση επανάκλησης για το σήμα 'startup'\n"
"    _onStartup: function() {\n"
"        //You must call _initMenus() before calling _buildUI().\n"
"        this._initMenus();\n"
"        this._buildUI();\n"
"    }\n"
"});\n"
"\n"
"//Εκτέλεση της εφαρμογής\n"
"let app = new Application ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/gmenu.py.page:30
msgctxt "_"
msgid ""
"external ref='media/gmenu.py.png' md5='52c68b34d5d566f37e9f803dedb6353a'"
msgstr ""
"external ref='media/gmenu.py.png' md5='52c68b34d5d566f37e9f803dedb6353a'"

#. (itstool) path: info/title
#: C/gmenu.py.page:8
msgctxt "text"
msgid "GMenu (Python)"
msgstr "GMenu (Python)"

#. (itstool) path: info/desc
#: C/gmenu.py.page:26
msgid "A simple implementation of GMenu"
msgstr "Μια απλή εφαρμογή του GMenuModel"

#. (itstool) path: section/code
#: C/gmenu.py.page:37
#, no-wrap
msgid ""
"\n"
"    from gi.repository import Gtk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GMenu Example\", application=app)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        # start the application\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # create a menu\n"
"        menu = Gio.Menu()\n"
"        # append to the menu three options\n"
"        menu.append(\"New\", \"app.new\")\n"
"        menu.append(\"About\", \"app.about\")\n"
"        menu.append(\"Quit\", \"app.quit\")\n"
"        # set the menu as menu of the application\n"
"        self.set_app_menu(menu)\n"
"\n"
"        # create an action for the option \"new\" of the menu\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        # connect it to the callback function new_cb\n"
"        new_action.connect(\"activate\", self.new_cb)\n"
"        # add the action to the application\n"
"        self.add_action(new_action)\n"
"\n"
"        # option \"about\"\n"
"        about_action = Gio.SimpleAction.new(\"about\", None)\n"
"        about_action.connect(\"activate\", self.about_cb)\n"
"        self.add_action(about_action)\n"
"\n"
"        # option \"quit\"\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_cb)\n"
"        self.add_action(quit_action)\n"
"\n"
"    # callback function for \"new\"\n"
"    def new_cb(self, action, parameter):\n"
"        print \"This does nothing. It is only a demonstration.\"\n"
"\n"
"    # callback function for \"about\"\n"
"    def about_cb(self, action, parameter):\n"
"        print \"No AboutDialog for you. This is only a demonstration.\"\n"
"\n"
"    # callback function for \"quit\"\n"
"    def quit_cb(self, action, parameter):\n"
"        print \"You have quit.\"\n"
"        self.quit()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"\n"
"    from gi.repository import Gtk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GMenu Example\", application=app)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        # start the application\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # create a menu\n"
"        menu = Gio.Menu()\n"
"        # append to the menu three options\n"
"        menu.append(\"New\", \"app.new\")\n"
"        menu.append(\"About\", \"app.about\")\n"
"        menu.append(\"Quit\", \"app.quit\")\n"
"        # set the menu as menu of the application\n"
"        self.set_app_menu(menu)\n"
"\n"
"        # create an action for the option \"new\" of the menu\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        # connect it to the callback function new_cb\n"
"        new_action.connect(\"activate\", self.new_cb)\n"
"        # add the action to the application\n"
"        self.add_action(new_action)\n"
"\n"
"        # option \"about\"\n"
"        about_action = Gio.SimpleAction.new(\"about\", None)\n"
"        about_action.connect(\"activate\", self.about_cb)\n"
"        self.add_action(about_action)\n"
"\n"
"        # option \"quit\"\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_cb)\n"
"        self.add_action(quit_action)\n"
"\n"
"    # callback function for \"new\"\n"
"    def new_cb(self, action, parameter):\n"
"        print \"This does nothing. It is only a demonstration.\"\n"
"\n"
"    # callback function for \"about\"\n"
"    def about_cb(self, action, parameter):\n"
"        print \"No AboutDialog for you. This is only a demonstration.\"\n"
"\n"
"    # callback function for \"quit\"\n"
"    def quit_cb(self, action, parameter):\n"
"        print \"You have quit.\"\n"
"        self.quit()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/gmenu.py.page:42
msgid "Useful methods for a GSimpleAction and a GMenu"
msgstr "Χρήσιμες μέθοδοι για μια GSimpleAction και ένα GMenu"

#. (itstool) path: section/p
#: C/gmenu.py.page:44
msgid ""
"In line 33 the signal <code>\"activate\"</code> from the action "
"<code>new_action</code> (not the menu!) is connected to the callback "
"function <code>new_cb()</code> using <code><var>action</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"Στη γραμμή 33 το σήμα <code>\"activate\"</code> από την ενέργεια "
"<code>new_action</code> (όχι το μενού!) συνδέεται με τη συνάρτηση "
"επανάκλησης <code>new_cb()</code> χρησιμοποιώντας <code><var>action</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. Δείτε <link "
"xref=\"signals-callbacks.py\"/> για μια πιο λεπτομερή εξήγηση."

#. (itstool) path: section/p
#: C/gmenu.py.page:46
msgid "Useful methods for a GSimpleAction:"
msgstr "Χρήσιμες μέθοδοι για μια GSimpleAction:"

#. (itstool) path: item/p
#: C/gmenu.py.page:48
msgid ""
"To create a new action that is <em>stateless</em>, that is, an action that "
"do not retain or depend on a state given by the action itself, use"
msgstr ""
"Για τη δημιουργία μιας νέας ενέργειας που είναι <em>χωρίς κατάσταση</em>, "
"δηλαδή, μια ενέργεια που δεν κρατά ή εξαρτάται από τη δεδομένη κατάσταση από "
"την ίδια την ενέργεια, χρησιμοποιήστε"

#. (itstool) path: item/code
#: C/gmenu.py.page:49
#, no-wrap
msgid ""
"\n"
"action = Gio.SimpleAction.new(\"name\", parameter_type)"
msgstr ""
"\n"
"action = Gio.SimpleAction.new(\"name\", parameter_type)"

#. (itstool) path: item/p
#: C/gmenu.py.page:51
msgid ""
"where <code>\"name\"</code> is the name of the action and "
"<code>parameter_type</code> is the type of the parameters that the action "
"receives when being activated. This can be <code>None</code>, or <code>GLib."
"VariantType.new('s')</code> if the parameter is of type <code>str</code>, or "
"instead of <code>'s'</code> a character as described <link href=\"http://"
"developer.gnome.org/glib/unstable/glib-GVariantType.html\">here</link>. To "
"create a new <em>stateful</em> (i.e. not stateless) action, use"
msgstr ""
"όπου <code>\"name\"</code> είναι το όνομα της ενέργειας και "
"<code>parameter_type</code> είναι ο τύπος των παραμέτρων που δέχεται η "
"ενέργεια όταν ενεργοποιείται. Αυτό μπορεί να είναι <code>None</code>, ή "
"<code>GLib.VariantType.new('s')</code> εάν η παράμετρος είναι ο τύπος "
"<code>str</code>, ή στη θέση του <code>'s'</code> ένας χαρακτήρας όπως "
"περιγράφεται <link href=\"http://developer.gnome.org/glib/unstable/glib-"
"GVariantType.html\">εδώ</link>. Για τη δημιουργία μιας νέας ενέργειας <em>με "
"κατάσταση</em> (δηλαδή όχι χωρίς κατάσταση), χρησιμοποιήστε"

#. (itstool) path: item/code
#: C/gmenu.py.page:52
#, no-wrap
msgid ""
"\n"
"action = Gio.SimpleAction.new_stateful(\"name\", parameter_type, initial_state)"
msgstr ""
"\n"
"action = Gio.SimpleAction.new_stateful(\"name\", parameter_type, initial_state)"

#. (itstool) path: item/p
#: C/gmenu.py.page:54
msgid ""
"where <code>initial_state</code> is defined as a GVariant - for instance "
"<code>Glib.Variant.new_string('start')</code>; for a list of possiblities "
"see <link href=\"http://developer.gnome.org/glib/unstable/glib-GVariant.html"
"\">here</link>."
msgstr ""
"όπου <code>initial_state</code> ορίζεται ως μια GVariant - για παράδειγμα "
"<code>Glib.Variant.new_string('start')</code>; για μια λίστα δυνατοτήτων "
"δείτε <link href=\"http://developer.gnome.org/glib/unstable/glib-GVariant."
"html\">εδώ</link>."

#. (itstool) path: item/p
#: C/gmenu.py.page:55
msgid ""
"<code>set_enabled(True)</code> sets the action as enabled; an action must be "
"enabled in order to be activated or in order to have its state changed from "
"outside callers. This should only be called by the implementor of the "
"action. Users of the action should not attempt to modify its enabled flag."
msgstr ""
"<code>set_enabled(True)</code> ορίζει την ενέργεια ως ενεργή· μια ενέργεια "
"πρέπει να είναι ενεργή για να ενεργοποιηθεί ή για να έχει την κατάσταση της "
"αλλαγμένη από εξωτερικές κλήσεις . Αυτό πρέπει να καλείται μόνο από την "
"εφαρμογή της ενέργειας. Οι χρήστες της ενέργειας δεν πρέπει να προσπαθούν να "
"τροποποιήσουν την ενεργή σημαία του."

#. (itstool) path: item/p
#: C/gmenu.py.page:56
msgid ""
"<code>set_state(state)</code>, where <code>state</code> is a GVariant, sets "
"the state of the action, updating the 'state' property to the given value. "
"This should only be called by the implementor of the action; users of the "
"action should instead call <code>change_state(state)</code> (where "
"<code>state</code> is as above) to request the change."
msgstr ""
"<code>set_state(state)</code>, όπου <code>state</code> είναι μια GVariant, "
"που ορίζει την κατάσταση της ενέργειας, ενημερώνοντας την ιδιότητα 'state' "
"στη δεδομένη τιμή. Αυτή πρέπει να καλείται μόνο από τον εκτελεστή της "
"ενέργειας· Οι χρήστες της ενέργειας πρέπει να καλούν "
"<code>change_state(state)</code> (όπου <code>state</code> είναι όπως πιο "
"πάνω) για να ζητούν την αλλαγή."

#. (itstool) path: section/p
#: C/gmenu.py.page:59
msgid "Useful methods for a GMenu:"
msgstr "Χρήσιμες μέθοδοι για ένα GMenu:"

#. (itstool) path: item/p
#: C/gmenu.py.page:61
msgid ""
"To insert an item in the menu in position <code>position</code>, use "
"<code>insert(position, label, detailed_action)</code>, where <code>label</"
"code> is the label that will appear in the menu and <code>detailed_action</"
"code> is a string composed of the name of the action to which we prepend the "
"prefix <code>app.</code>. A more detailed discussion of this can be found in "
"<link xref=\"menubar.py#win-app\"/>."
msgstr ""
"Για εισαγωγή ενός στοιχείου στο μενού στη θέση <code>position</code>, "
"χρησιμοποιήστε <code>insert(position, label, detailed_action)</code>, όπου "
"<code>label</code> είναι η ετικέτα που θα εμφανιστεί στο μενού και "
"<code>detailed_action</code> είναι μια συμβολοσειρά αποτελούμενη από το "
"όνομα της ενέργειας στην οποία προτάσσουμε το πρόθεμα <code>app.</code>. Μια "
"πιο λεπτομερής συζήτηση αυτού μπορεί να βρεθεί στο <link xref=\"menubar."
"py#win-app\"/>."

#. (itstool) path: item/p
#: C/gmenu.py.page:62
msgid ""
"To append or prepend an item in the menu use respectively "
"<code>append(label, detailed_action)</code> and <code>prepend(label, "
"detailed_action)</code>."
msgstr ""
"Για προσάρτηση ή πρόταξη ενός στοιχείου στο μενού χρησιμοποιήστε αντίστοιχα "
"<code>append(label, detailed_action)</code> και <code>prepend(label, "
"detailed_action)</code>."

#. (itstool) path: item/p
#: C/gmenu.py.page:63
msgid ""
"Another way of adding items to the menu is to create them as "
"<code>GMenuItem</code>s and use <code>insert_item(position, item)</code>, "
"<code>append_item(item)</code>, or <code>prepend_item(item)</code>; so for "
"instance we might have:"
msgstr ""
"Ένας άλλος τρόπος προσθήκης στοιχείων στο μενού είναι η δημιουργία τους ως "
"<code>GMenuItem</code> και η χρήση <code>insert_item(position, item)</code>, "
"<code>append_item(item)</code>, ή <code>prepend_item(item)</code>; έτσι για "
"παράδειγμα πρέπει να έχουμε:"

#. (itstool) path: item/code
#: C/gmenu.py.page:64
#, no-wrap
msgid ""
"\n"
"about = Gio.MenuItem.new(\"About\", \"app.about\")\n"
"menu.append_item(about)"
msgstr ""
"\n"
"about = Gio.MenuItem.new(\"About\", \"app.about\")\n"
"menu.append_item(about)"

#. (itstool) path: item/p
#: C/gmenu.py.page:68
msgid ""
"We can also add a whole subsection in a menu using "
"<code>insert_section(position, label, section)</code>, "
"<code>append_section(label, section)</code>, or <code>prepend_section(label, "
"section)</code>, where <code>label</code> is the title of the subsection."
msgstr ""
"Μπορούμε επίσης να προσθέσουμε μια ολόκληρη υποενότητα σε ένα μενού "
"χρησιμοποιώντας <code>insert_section(position, label, section)</code>, "
"<code>append_section(label, section)</code>, ή <code>prepend_section(label, "
"section)</code>, όπου <code>label</code> είναι ο τίτλος της υποενότητας."

#. (itstool) path: item/p
#: C/gmenu.py.page:69
msgid ""
"To add a submenu that will expand and collapse, use "
"<code>insert_submenu(position, label, section)</code>, "
"<code>append_submenu(label, section)</code>, or <code>prepend_submenu(label, "
"section)</code>, where <code>label</code> is the title of the subsection."
msgstr ""
"Για να προσθέσουμε ένα υπομενού που θα επεκταθεί και θα συμπτυχθεί, "
"χρησιμοποιήστε <code>insert_submenu(position, label, section)</code>, "
"<code>append_submenu(label, section)</code>, ή <code>prepend_submenu(label, "
"section)</code>, όπου <code>label</code> είναι ο τίτλος της υποενότητας."

#. (itstool) path: item/p
#: C/gmenu.py.page:70
msgid "To remove an item from the menu, use <code>remove(postion)</code>."
msgstr ""
"Για την αφαίρεση ενός στοιχείου από το μενού, χρησιμοποιήστε "
"<code>remove(postion)</code>."

#. (itstool) path: item/p
#: C/gmenu.py.page:71
msgid "To set a label for the menu, use <code>set_label(label)</code>."
msgstr ""
"Για ορισμό μιας ετικέτας για το μενού, χρησιμοποιήστε "
"<code>set_label(label)</code>."

#. (itstool) path: item/p
#: C/gmenu.py.page:82
msgid ""
"<link href=\"http://developer.gnome.org/glib/unstable/glib-GVariantType.html"
"\">GVariantType</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/glib/unstable/glib-GVariantType.html"
"\">GVariantType</link>"

#. (itstool) path: item/p
#: C/gmenu.py.page:83
msgid ""
"<link href=\"http://developer.gnome.org/glib/unstable/glib-GVariant.html"
"\">GVariant</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/glib/unstable/glib-GVariant.html"
"\">GVariant</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/gmenu.vala.page:28
msgctxt "_"
msgid ""
"external ref='media/gmenu.vala.png' md5='7a9f381fc3ed5bf8d1c50d2acb095400'"
msgstr ""
"external ref='media/gmenu.vala.png' md5='7a9f381fc3ed5bf8d1c50d2acb095400'"

#. (itstool) path: info/title
#: C/gmenu.vala.page:8
msgctxt "text"
msgid "GMenu (Vala)"
msgstr "GMenu (Vala)"

#. (itstool) path: note/p
#: C/gmenu.vala.page:30
msgid ""
"<em style=\"strong\">You need to be running GTK+-3.4 or later for this to "
"work</em>"
msgstr ""
"<em style=\"strong\">Χρειάζεται να τρέξετε το Gtk+-3.4 ή μεταγενέστερο για "
"να δουλέψει αυτό</em>"

#. (itstool) path: page/code
#: C/gmenu.vala.page:34
#, no-wrap
msgid ""
"/* A window in the application. */\n"
"public class Window : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Constructor */\n"
"\tpublic Window (Application app) {\n"
"\t\tObject (application: app, title: \"Gmenu Example\");\n"
"\n"
"\t\tvar about_action = new SimpleAction (\"about\", null);\n"
"\n"
"\t\t/* Connect the 'activate' signal to the\n"
"\t\t * signal handler (aka. callback).\n"
"\t\t */\n"
"\t\tabout_action.activate.connect (this.about_cb);\n"
"\n"
"\t\t/* Add the action to this window. */\n"
"\t\tthis.add_action (about_action);\n"
"\n"
"\t\tthis.show ();\n"
"\t}\n"
"\n"
"\t/* Signal handler for 'activate' signal of the SimpleAction. */\n"
"\tvoid about_cb (SimpleAction simple, Variant? parameter) {\n"
"\t\tprint (\"This does nothing.  It is only a demonstration.\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* This is the Application. */\n"
"public class Application : Gtk.Application {\n"
"\n"
"\t/* Constructor */\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.application\");\n"
"\t}\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create a new window for this application. */\n"
"\t\tnew Window (this);\n"
"\t}\n"
"\n"
"\t/* Override the 'startup' signal of GLib.Application. */\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\tvar menu = new Menu ();\n"
"\t\tmenu.append (\"About\", \"win.about\");\n"
"\t\tmenu.append (\"Quit\", \"app.quit\");\n"
"\t\tthis.app_menu = menu;\n"
"\n"
"\t\tvar quit_action = new SimpleAction (\"quit\", null);\n"
"\t\tquit_action.activate.connect (this.quit);\n"
"\t\tthis.add_action (quit_action);\n"
"\t}\n"
"}\n"
"\n"
"/* main function creates Application and runs it. */\n"
"int main (string[] args) {\n"
"\treturn new Application ().run (args);\n"
"}\n"
msgstr ""
"/* A window in the application. */\n"
"public class Window : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Constructor */\n"
"\tpublic Window (Application app) {\n"
"\t\tObject (application: app, title: \"Gmenu Example\");\n"
"\n"
"\t\tvar about_action = new SimpleAction (\"about\", null);\n"
"\n"
"\t\t/* Connect the 'activate' signal to the\n"
"\t\t * signal handler (aka. callback).\n"
"\t\t */\n"
"\t\tabout_action.activate.connect (this.about_cb);\n"
"\n"
"\t\t/* Add the action to this window. */\n"
"\t\tthis.add_action (about_action);\n"
"\n"
"\t\tthis.show ();\n"
"\t}\n"
"\n"
"\t/* Signal handler for 'activate' signal of the SimpleAction. */\n"
"\tvoid about_cb (SimpleAction simple, Variant? parameter) {\n"
"\t\tprint (\"This does nothing.  It is only a demonstration.\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* This is the Application. */\n"
"public class Application : Gtk.Application {\n"
"\n"
"\t/* Constructor */\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.application\");\n"
"\t}\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create a new window for this application. */\n"
"\t\tnew Window (this);\n"
"\t}\n"
"\n"
"\t/* Override the 'startup' signal of GLib.Application. */\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\tvar menu = new Menu ();\n"
"\t\tmenu.append (\"About\", \"win.about\");\n"
"\t\tmenu.append (\"Quit\", \"app.quit\");\n"
"\t\tthis.app_menu = menu;\n"
"\n"
"\t\tvar quit_action = new SimpleAction (\"quit\", null);\n"
"\t\tquit_action.activate.connect (this.quit);\n"
"\t\tthis.add_action (quit_action);\n"
"\t}\n"
"}\n"
"\n"
"/* main function creates Application and runs it. */\n"
"int main (string[] args) {\n"
"\treturn new Application ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/gmenu.vala.page:41
msgid ""
"<link href=\"http://www.valadoc.org/gio-2.0/GLib.Menu.Menu.html\">Menu</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gio-2.0/GLib.Menu.Menu.html\">Menu</link>"

#. (itstool) path: item/p
#: C/gmenu.vala.page:42
msgid ""
"<link href=\"http://www.valadoc.org/gio-2.0/GLib.Menu.append.html\">append</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gio-2.0/GLib.Menu.append.html\">append</"
"link>"

#. (itstool) path: item/p
#: C/gmenu.vala.page:43
msgid ""
"<link href=\"http://www.valadoc.org/gio-2.0/GLib.SimpleAction.html"
"\">SimpleAction</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gio-2.0/GLib.SimpleAction.html"
"\">SimpleAction</link>"

#. (itstool) path: item/p
#: C/gmenu.vala.page:44
msgid ""
"<link href=\"http://www.valadoc.org/gio-2.0/GLib.ActionMap.add_action.html"
"\">add_action</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gio-2.0/GLib.ActionMap.add_action.html"
"\">add_action</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/grid.c.page:23 C/grid.js.page:26 C/grid.vala.page:24
msgctxt "_"
msgid "external ref='media/grid.png' md5='27d45da115401127456a3b854dcfc5be'"
msgstr "external ref='media/grid.png' md5='27d45da115401127456a3b854dcfc5be'"

#. (itstool) path: info/title
#: C/grid.c.page:8
msgctxt "text"
msgid "Grid (C)"
msgstr "Πλέγμα (C)"

#. (itstool) path: info/desc
#: C/grid.c.page:18 C/grid.js.page:22 C/grid.py.page:26 C/grid.vala.page:20
msgid "Pack widgets in rows and columns"
msgstr "Πακετάρισμα γραφικών στοιχείων σε γραμμές και στήλες"

#. (itstool) path: page/title
#: C/grid.c.page:21 C/grid.js.page:25 C/grid.py.page:29
msgid "Grid"
msgstr "Πλέγμα"

#. (itstool) path: page/p
#: C/grid.c.page:24 C/grid.vala.page:25
msgid "A button widget connected to a progress bar."
msgstr "Ένα γραφικό στοιχείο κουμπιού συνδεμένο με μια γραμμή προόδου."

#. (itstool) path: page/code
#: C/grid.c.page:26
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Signal handler for the \"clicked\" signal of the Button. Each\n"
"click generates a progress bar pulse*/\n"
"static void\n"
"on_button_click (GtkButton *button,\n"
"                 gpointer   user_data)\n"
"{\n"
"  GtkProgressBar *progress_bar = user_data;\n"
"  gtk_progress_bar_pulse (progress_bar);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"  GtkWidget *button;\n"
"  GtkWidget *progress_bar;\n"
"\n"
"  /*Create the window and set a title*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Grid Example\");\n"
"\n"
"  /*Create a button with a label*/\n"
"  button = gtk_button_new_with_label (\"Button\");\n"
"\n"
"  /*Create the progress bar*/\n"
"  progress_bar = gtk_progress_bar_new ();\n"
"\n"
"  /*Create a grid and attach the button and progress bar\n"
"  accordingly*/\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_attach (GTK_GRID (grid), button, 1, 1, 1, 1);\n"
"  gtk_grid_attach_next_to (GTK_GRID (grid), \n"
"                           progress_bar, \n"
"                           button, \n"
"                           GTK_POS_BOTTOM, 1, 1);\n"
"\n"
"  /*Connecting the clicked signal to the callback function*/\n"
"  g_signal_connect (GTK_BUTTON (button), \"clicked\", \n"
"                    G_CALLBACK (on_button_click), progress_bar);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Signal handler for the \"clicked\" signal of the Button. Each\n"
"click generates a progress bar pulse*/\n"
"static void\n"
"on_button_click (GtkButton *button,\n"
"                 gpointer   user_data)\n"
"{\n"
"  GtkProgressBar *progress_bar = user_data;\n"
"  gtk_progress_bar_pulse (progress_bar);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"  GtkWidget *button;\n"
"  GtkWidget *progress_bar;\n"
"\n"
"  /*Create the window and set a title*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Grid Example\");\n"
"\n"
"  /*Create a button with a label*/\n"
"  button = gtk_button_new_with_label (\"Button\");\n"
"\n"
"  /*Create the progress bar*/\n"
"  progress_bar = gtk_progress_bar_new ();\n"
"\n"
"  /*Create a grid and attach the button and progress bar\n"
"  accordingly*/\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_attach (GTK_GRID (grid), button, 1, 1, 1, 1);\n"
"  gtk_grid_attach_next_to (GTK_GRID (grid), \n"
"                           progress_bar, \n"
"                           button, \n"
"                           GTK_POS_BOTTOM, 1, 1);\n"
"\n"
"  /*Connecting the clicked signal to the callback function*/\n"
"  g_signal_connect (GTK_BUTTON (button), \"clicked\", \n"
"                    G_CALLBACK (on_button_click), progress_bar);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/grid.c.page:34 C/progressbar.c.page:35
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkProgressBar.html"
"\">GtkProgressBar</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkProgressBar.html"
"\">GtkProgressBar</link>"

#. (itstool) path: info/title
#: C/grid.js.page:8
msgctxt "text"
msgid "Grid (JavaScript)"
msgstr "Πλέγμα (JavaScript)"

#. (itstool) path: page/p
#: C/grid.js.page:27
msgid ""
"A button widget connected to a progress bar, inside of a grid which handles "
"the layout."
msgstr ""
"Ένα γραφικό στοιχείο κουμπιού συνδεμένο με μια γραμμή προόδου, μέσα σε ένα "
"πλέγμα που χειρίζεται τη διάταξη."

#. (itstool) path: page/code
#: C/grid.js.page:29
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const GridExample = new Lang.Class ({\n"
"    Name: 'Grid Example',\n"
"\n"
"    /* Create the application itself\n"
"       This boilerplate code is needed to build any GTK+ application. */\n"
"        _init: function () {\n"
"            this.application = new Gtk.Application ({\n"
"                application_id: 'org.example.jsgrid',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                         window_position: Gtk.WindowPosition.CENTER,\n"
"                                                         title: \"Grid Example\"});\n"
"\n"
"        // Create the grid\n"
"        this.Grid = new Gtk.Grid ();\n"
"\n"
"        // Create the widgets inside the grid\n"
"        this.progressBar = new Gtk.ProgressBar ();\n"
"        this.Button = new Gtk.Button ({ label: \"Button\" });\n"
"        this.Button.connect (\"clicked\", Lang.bind(this, this._clickHandler));\n"
"\n"
"        // Assemble the grid\n"
"        this._window.add (this.Grid);\n"
"        this.Grid.attach (this.Button, 1, 1, 1, 1);\n"
"        this.Grid.attach_next_to (this.progressBar, this.Button, Gtk.PositionType.BOTTOM, 1, 1);\n"
"\n"
"                // Show the window and all child widgets\n"
"                this._window.show_all();\n"
"    },\n"
"\n"
"    // Here's the function that says what happens when the button is clicked\n"
"    _clickHandler: function () {\n"
"        this.progressBar.pulse ();\n"
"    }\n"
"\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GridExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const GridExample = new Lang.Class ({\n"
"    Name: 'Grid Example',\n"
"\n"
"    /* Create the application itself\n"
"       This boilerplate code is needed to build any GTK+ application. */\n"
"        _init: function () {\n"
"            this.application = new Gtk.Application ({\n"
"                application_id: 'org.example.jsgrid',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                         window_position: Gtk.WindowPosition.CENTER,\n"
"                                                         title: \"Grid Example\"});\n"
"\n"
"        // Create the grid\n"
"        this.Grid = new Gtk.Grid ();\n"
"\n"
"        // Create the widgets inside the grid\n"
"        this.progressBar = new Gtk.ProgressBar ();\n"
"        this.Button = new Gtk.Button ({ label: \"Button\" });\n"
"        this.Button.connect (\"clicked\", Lang.bind(this, this._clickHandler));\n"
"\n"
"        // Assemble the grid\n"
"        this._window.add (this.Grid);\n"
"        this.Grid.attach (this.Button, 1, 1, 1, 1);\n"
"        this.Grid.attach_next_to (this.progressBar, this.Button, Gtk.PositionType.BOTTOM, 1, 1);\n"
"\n"
"                // Show the window and all child widgets\n"
"                this._window.show_all();\n"
"    },\n"
"\n"
"    // Here's the function that says what happens when the button is clicked\n"
"    _clickHandler: function () {\n"
"        this.progressBar.pulse ();\n"
"    }\n"
"\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GridExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/grid.js.page:37
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Grid.html"
"\">Gtk.Grid</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Grid.html"
"\">Gtk.Grid</link>"

#. (itstool) path: item/p
#: C/grid.js.page:38 C/progressbar.js.page:42
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.ProgressBar."
"html\">Gtk.ProgressBar</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.ProgressBar."
"html\">Gtk.ProgressBar</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/grid.py.page:31
msgctxt "_"
msgid ""
"external ref='media/grid_simple.png' md5='c806f2e69b30373d4d2e08b41d6cc1f6'"
msgstr ""
"external ref='media/grid_simple.png' md5='c806f2e69b30373d4d2e08b41d6cc1f6'"

#. (itstool) path: info/title
#: C/grid.py.page:8
msgctxt "text"
msgid "Grid (Python)"
msgstr "Πλέγμα (Python)"

#. (itstool) path: page/p
#: C/grid.py.page:32
msgid "Some labels in a grid."
msgstr "Μερικές ετικέτες σε ένα πλέγμα."

#. (itstool) path: section/code
#: C/grid.py.page:38
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Grid Example\", application=app)\n"
"\n"
"        # three labels\n"
"        label_top_left = Gtk.Label(label=\"This is Top Left\")\n"
"        label_top_right = Gtk.Label(label=\"This is Top Right\")\n"
"        label_bottom = Gtk.Label(label=\"This is Bottom\")\n"
"\n"
"        # a grid\n"
"        grid = Gtk.Grid()\n"
"\n"
"        # some space between the columns of the grid\n"
"        grid.set_column_spacing(20)\n"
"\n"
"        # in the grid:\n"
"        # attach the first label in the top left corner\n"
"        grid.attach(label_top_left, 0, 0, 1, 1)\n"
"        # attach the second label\n"
"        grid.attach(label_top_right, 1, 0, 1, 1)\n"
"        # attach the third label below the first label\n"
"        grid.attach_next_to(\n"
"            label_bottom, label_top_left, Gtk.PositionType.BOTTOM, 2, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Grid Example\", application=app)\n"
"\n"
"        # three labels\n"
"        label_top_left = Gtk.Label(label=\"This is Top Left\")\n"
"        label_top_right = Gtk.Label(label=\"This is Top Right\")\n"
"        label_bottom = Gtk.Label(label=\"This is Bottom\")\n"
"\n"
"        # a grid\n"
"        grid = Gtk.Grid()\n"
"\n"
"        # some space between the columns of the grid\n"
"        grid.set_column_spacing(20)\n"
"\n"
"        # in the grid:\n"
"        # attach the first label in the top left corner\n"
"        grid.attach(label_top_left, 0, 0, 1, 1)\n"
"        # attach the second label\n"
"        grid.attach(label_top_right, 1, 0, 1, 1)\n"
"        # attach the third label below the first label\n"
"        grid.attach_next_to(\n"
"            label_bottom, label_top_left, Gtk.PositionType.BOTTOM, 2, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/grid.py.page:42
msgid "Useful methods for a Grid widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο πλέγματος"

#. (itstool) path: item/p
#: C/grid.py.page:45
msgid ""
"To attach a widget <code>child</code> in position <code>left, top</code> in "
"a slot of given <code>width, height</code> use <code>attach(child, top, "
"left, width, height)</code>. If a widget <code>sibling</code> is already in "
"place, we can also use <code>attach_next_to(child, sibling, side, width, "
"height)</code>, where <code>side</code> is one of <code>Gtk.PositionType."
"LEFT, Gtk.PositionType.RIGHT, Gtk.PositionType.TOP, Gtk.PositionType.BOTTOM</"
"code>."
msgstr ""
"Για να προσαρτήσετε ένα <code>child</code> γραφικό στοιχείο σε θέση "
"<code>left, top</code> σε μια υποδοχή του δοσμένου <code>width, height</"
"code> χρησιμοποιήστε <code>attach(child, top, left, width, height)</code>. "
"Εάν ένα <code>sibling</code> γραφικό στοιχείο είναι ήδη στη θέση, μπορούμε "
"να χρησιμοποιήσουμε επίσης <code>attach_next_to(child, sibling, side, width, "
"height)</code>, όπου <code>side</code> είναι ένα από τα <code>Gtk."
"PositionType.LEFT, Gtk.PositionType.RIGHT, Gtk.PositionType.TOP, Gtk."
"PositionType.BOTTOM</code>."

#. (itstool) path: item/p
#: C/grid.py.page:46
msgid ""
"<code>insert_row(position)</code> and <code>insert_column(position)</code> "
"do exactly what they say; children which are attached at or below this "
"position are moved one row down, and children which span across this "
"position are grown to span the new row. <code>insert_next_to(sibling, side)</"
"code> inserts a row or column at the specified position. The new row or "
"column is placed next to <code>sibling</code>, on the side determined by "
"<code>side</code>; if side is <code>Gtk.PositionType.TOP</code> or <code>Gtk."
"PositionType.BOTTOM</code>, a row is inserted, if side is <code>Gtk."
"PositionType.LEFT</code> or <code>Gtk.PositionType.RIGHT</code>, a column is "
"inserted."
msgstr ""
"<code>insert_row(position)</code> και <code>insert_column(position)</code> "
"κάνουν ακριβώς ότι λένε· τα θυγατρικά που προσαρτώνται σε αυτή τη θέση ή από "
"κάτω της μετακινούνται μια γραμμή κάτω και τα θυγατρικά που καλύπτουν κατά "
"μήκος αυτή τη θέση επεκτείνονται για να καλύψουν τη νέα γραμμή. "
"<code>insert_next_to(sibling, side)</code> εισάγει μια γραμμή ή στήλη στη "
"συγκεκριμένη θέση. Η νέα γραμμή ή στήλη τοποθετείται δίπλα στο "
"<code>sibling</code>, στην πλευρά που ορίστηκε από <code>side</code>; εάν η "
"πλευρά είναι <code>Gtk.PositionType.TOP</code> ή <code>Gtk.PositionType."
"BOTTOM</code>, εισάγεται μια γραμμή, εάν η πλευρά είναι <code>Gtk."
"PositionType.LEFT</code> του <code>Gtk.PositionType.RIGHT</code>, εισάγεται "
"μια στήλη."

#. (itstool) path: item/p
#: C/grid.py.page:47
msgid ""
"<code>set_row_homogeneous(True)</code> and "
"<code>set_column_homogeneous(True)</code> ensure that (respectively) every "
"row or every column has the same width or height."
msgstr ""
"<code>set_row_homogeneous(True)</code> και "
"<code>set_column_homogeneous(True)</code> βεβαιώνουν ότι (αντίστοιχα) κάθε "
"γραμμή ή στήλη έχει το ίδιο πλάτος ή ύψος."

#. (itstool) path: item/p
#: C/grid.py.page:48
msgid ""
"<code>set_row_spacing(spacing)</code> and <code>set_column_spacing(spacing)</"
"code> force a spacing between (respectively) rows or columns. The value of "
"<code>spacing</code> can be between <code>0</code>, which is the default "
"value, and <code>32767</code>."
msgstr ""
"<code>set_row_spacing(spacing)</code> και <code>set_column_spacing(spacing)</"
"code> εξαναγκάζουν ένα διάκενο μεταξύ (αντίστοιχα) γραμμών ή στηλών. Η τιμή "
"του <code>spacing</code> μπορεί να είναι μεταξύ <code>0</code>, που είναι η "
"προεπιλεγμένη τιμή και <code>32767</code>."

#. (itstool) path: item/p
#: C/grid.py.page:59 C/label.py.page:105 C/separator.c.page:41
#: C/separator.py.page:42 C/switch.py.page:46
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkLabel.html"
"\">GtkLabel</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkLabel.html"
"\">GtkLabel</link>"

#. (itstool) path: item/p
#: C/grid.py.page:60 C/paned.c.page:38 C/paned.py.page:44
#: C/scrolledwindow.py.page:47
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkImage.html"
"\">GtkImage</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkImage.html"
"\">GtkImage</link>"

#. (itstool) path: item/p
#: C/grid.py.page:61 C/radiobutton.py.page:50 C/separator.c.page:40
#: C/separator.py.page:41 C/switch.py.page:47 C/toolbar_builder.py.page:196
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkGrid.html"
"\">GtkGrid</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkGrid.html"
"\">GtkGrid</link>"

#. (itstool) path: info/title
#: C/grid.vala.page:8
msgctxt "text"
msgid "Grid (Vala)"
msgstr "Πλέγμα (Vala)"

#. (itstool) path: page/title
#: C/grid.vala.page:23
msgid "Grid widget"
msgstr "Γραφικό στοιχείο πλέγματος"

#. (itstool) path: page/code
#: C/grid.vala.page:27
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Widget progress_bar;\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Grid Example\");\n"
"\t\tvar grid = new Gtk.Grid();\n"
"\t\tprogress_bar = new Gtk.ProgressBar ();\n"
"\t\tprogress_bar.show ();\n"
"\n"
"\t\tvar button = new Gtk.Button.with_label (\"Button\");\n"
"\t\tbutton.clicked.connect (on_button_click);\n"
"\t\tbutton.show ();\n"
"\n"
"\t\tthis.add(grid);\n"
"\t\tgrid.attach(button, 0, 1, 1, 1);\n"
"\t\tgrid.attach_next_to (progress_bar, button, Gtk.PositionType.BOTTOM, 1, 1);\n"
"\t\tgrid.show ();\n"
"\t}\n"
"\n"
"\tvoid on_button_click (Gtk.Button button) {\n"
"\t\t(progress_bar as Gtk.ProgressBar).pulse ();\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Widget progress_bar;\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Grid Example\");\n"
"\t\tvar grid = new Gtk.Grid();\n"
"\t\tprogress_bar = new Gtk.ProgressBar ();\n"
"\t\tprogress_bar.show ();\n"
"\n"
"\t\tvar button = new Gtk.Button.with_label (\"Button\");\n"
"\t\tbutton.clicked.connect (on_button_click);\n"
"\t\tbutton.show ();\n"
"\n"
"\t\tthis.add(grid);\n"
"\t\tgrid.attach(button, 0, 1, 1, 1);\n"
"\t\tgrid.attach_next_to (progress_bar, button, Gtk.PositionType.BOTTOM, 1, 1);\n"
"\t\tgrid.show ();\n"
"\t}\n"
"\n"
"\tvoid on_button_click (Gtk.Button button) {\n"
"\t\t(progress_bar as Gtk.ProgressBar).pulse ();\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/grid.vala.page:32
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Grid.html\">Gtk.Grid</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Grid.html\">Gtk.Grid</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/GtkApplicationWindow.c.page:22 C/GtkApplicationWindow.js.page:22
#: C/GtkApplicationWindow.py.page:29 C/GtkApplicationWindow.vala.page:22
#: C/window.c.page:22 C/window.js.page:25 C/window.py.page:33
#: C/window.vala.page:25
msgctxt "_"
msgid "external ref='media/window.png' md5='eb0cde3530978619c25bddfaeb453345'"
msgstr "external ref='media/window.png' md5='eb0cde3530978619c25bddfaeb453345'"

#. (itstool) path: info/title
#: C/GtkApplicationWindow.c.page:8
msgctxt "text"
msgid "ApplicationWindow (C)"
msgstr "ApplicationWindow (C)"

#. (itstool) path: info/desc
#: C/GtkApplicationWindow.c.page:18
msgid "A toplevel window which can contain other widgets, and support GMenu"
msgstr ""
"Ένα παράθυρο ανώτατου επιπέδου που μπορεί να περιέχει άλλα γραφικά στοιχεία "
"και υποστηρίζει το GMenu"

#. (itstool) path: page/title
#: C/GtkApplicationWindow.c.page:21 C/GtkApplicationWindow.js.page:21
#: C/GtkApplicationWindow.py.page:28 C/GtkApplicationWindow.vala.page:21
msgid "ApplicationWindow"
msgstr "ApplicationWindow"

#. (itstool) path: page/p
#: C/GtkApplicationWindow.c.page:23
msgid "A minimal GtkApplication with a GtkApplicationWindow"
msgstr "Μια ελάχιστη GtkApplication με ένα GtkApplicationWindow"

#. (itstool) path: page/code
#: C/GtkApplicationWindow.c.page:25
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Hello GNOME\");\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Hello GNOME\");\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/GtkApplicationWindow.c.page:31
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/3.4/GtkApplicationWindow.html"
"\">GtkApplicationWindow</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/3.4/GtkApplicationWindow.html"
"\">GtkApplicationWindow</link>"

#. (itstool) path: info/title
#: C/GtkApplicationWindow.js.page:8
msgctxt "text"
msgid "ApplicationWindow (JavaScript)"
msgstr "ApplicationWindow (JavaScript)"

#. (itstool) path: info/desc
#: C/GtkApplicationWindow.js.page:18 C/GtkApplicationWindow.py.page:25
#: C/GtkApplicationWindow.vala.page:18
msgid "GtkWindow subclass with GtkApplication support"
msgstr "Η υποκλάση GtkWindow με υποστήριξη GtkApplication"

#. (itstool) path: page/p
#: C/GtkApplicationWindow.js.page:23
msgid "A simple GtkApplicationWindow which can support Menus."
msgstr "Ένα απλό GtkApplicationWindow που μπορεί να υποστηρίξει μενού."

#. (itstool) path: page/code
#: C/GtkApplicationWindow.js.page:25
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class ({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.myapp',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"       //connect to 'activate' and 'startup' signals to the callback functions\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI (in this case it's just the ApplicationWindow\n"
"    _buildUI: function () {\n"
"        this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"Welcome to GNOME\" });\n"
"\n"
"        //uncommenting the line below will change the window size\n"
"        //this._window.set_default_size(600, 400);\n"
"\n"
"        //show the window and all child widgets (none in this case)\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    //callback function for 'startup' signal\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class ({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.myapp',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"       //connect to 'activate' and 'startup' signals to the callback functions\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI (in this case it's just the ApplicationWindow\n"
"    _buildUI: function () {\n"
"        this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"Welcome to GNOME\" });\n"
"\n"
"        //uncommenting the line below will change the window size\n"
"        //this._window.set_default_size(600, 400);\n"
"\n"
"        //show the window and all child widgets (none in this case)\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    //callback function for 'startup' signal\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: info/title
#: C/GtkApplicationWindow.py.page:8
msgctxt "text"
msgid "ApplicationWindow (Python)"
msgstr "ApplicationWindow (Python)"

#. (itstool) path: page/p
#: C/GtkApplicationWindow.py.page:30
msgid ""
"The simplest GtkApplication Window which can support <link xref=\"gmenu.py\"/"
">."
msgstr ""
"Το απλούστερο παράθυρο GtkApplication που μπορεί να υποστηρίξει <link xref="
"\"gmenu.py\"/>."

#. (itstool) path: section/code
#: C/GtkApplicationWindow.py.page:37
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"# a Gtk ApplicationWindow\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # constructor: the title is \"Welcome to GNOME\" and the window belongs\n"
"    # to the application app\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    # constructor of the Gtk Application\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    # create and activate a MyWindow, with self (the MyApplication) as\n"
"    # application the window belongs to.\n"
"    # Note that the function in C activate() becomes do_activate() in Python\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        # show the window and all its content\n"
"        # this line could go in the constructor of MyWindow as well\n"
"        win.show_all()\n"
"\n"
"    # start up the application\n"
"    # Note that the function in C startup() becomes do_startup() in Python\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"# create and run the application, exit with the value returned by\n"
"# running the program\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"# a Gtk ApplicationWindow\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # constructor: the title is \"Welcome to GNOME\" and the window belongs\n"
"    # to the application app\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    # constructor of the Gtk Application\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    # create and activate a MyWindow, with self (the MyApplication) as\n"
"    # application the window belongs to.\n"
"    # Note that the function in C activate() becomes do_activate() in Python\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        # show the window and all its content\n"
"        # this line could go in the constructor of MyWindow as well\n"
"        win.show_all()\n"
"\n"
"    # start up the application\n"
"    # Note that the function in C startup() becomes do_startup() in Python\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"# create and run the application, exit with the value returned by\n"
"# running the program\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/GtkApplicationWindow.py.page:41
msgid "Useful methods for a Gtk.ApplicationWindow widget"
msgstr "Χρήσιμες μέθοδοι για γραφικό στοιχείο Gtk.ApplicationWindow"

#. (itstool) path: item/p
#: C/GtkApplicationWindow.py.page:44 C/window.py.page:54
msgid ""
"<code>set_default_size(200, 100)</code> sets the default size of the window "
"to a width of <code>200</code> and a height of <code>100</code>; if instead "
"of a positive number we pass <code>-1</code> we have the default size."
msgstr ""
"<code>set_default_size(200, 100)</code> ορίζει το προεπιλεγμένο μέγεθος του "
"παραθύρου σε πλάτος <code>200</code> και ύψος <code>100</code>· εάν αντί για "
"ένα θετικό αριθμό περνάμε το <code>-1</code> έχουμε το προεπιλεγμένο μέγεθος."

#. (itstool) path: item/p
#: C/GtkApplicationWindow.py.page:45 C/window.py.page:55
msgid ""
"<code>set_position(Gtk.WindowPosition.CENTER)</code> centers the window. "
"Other options are <code>Gtk.WindowPosition.NONE, Gtk.WindowPosition.MOUSE, "
"Gtk.WindowPosition.CENTER_ALWAYS, Gtk.WindowPosition.CENTER_ON_PARENT</code>."
msgstr ""
"<code>set_position(Gtk.WindowPosition.CENTER)</code> κεντράρει το παράθυρο. "
"Άλλες επιλογές είναι <code>Gtk.WindowPosition.NONE, Gtk.WindowPosition."
"MOUSE, Gtk.WindowPosition.CENTER_ALWAYS, Gtk.WindowPosition."
"CENTER_ON_PARENT</code>."

#. (itstool) path: info/title
#: C/GtkApplicationWindow.vala.page:8
msgctxt "text"
msgid "ApplicationWindow (Vala)"
msgstr "ApplicationWindow (Vala)"

#. (itstool) path: page/p
#: C/GtkApplicationWindow.vala.page:23
msgid "The simplest GtkApplication Window which can support Menus."
msgstr "Το απλούστερο παράθυρο GtkApplication που μπορεί να υποστηρίξει μενού."

#. (itstool) path: page/code
#: C/GtkApplicationWindow.vala.page:25
#, no-wrap
msgid ""
"\n"
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\t/* Create the window of this application and show it. */\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"Welcome to GNOME\";\n"
"\t\twindow.show ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"\n"
"/* Αυτή είναι η εφαρμογή. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Αντκατάσταση του σήματος 'activate' της GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\t/* Δημιουργία του παραθύρου της εφαρμογής και εμφάνισή του. */\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"Welcome to GNOME\";\n"
"\t\twindow.show ();\n"
"\t}\n"
"}\n"
"\n"
"/* Η κύρια δημιουργεί και εκτελεί την εφαρμογή. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/GtkApplicationWindow.vala.page:31 C/label.vala.page:31
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Application.html.content.tpl"
"\">Gtk.Application</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Application.html.content.tpl"
"\">Gtk.Application</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/guitar-tuner.c.page:45 C/guitar-tuner.cpp.page:43
#: C/guitar-tuner.js.page:37 C/guitar-tuner.py.page:50
#: C/guitar-tuner.vala.page:48
msgctxt "_"
msgid ""
"external ref='media/guitar-tuner.png' md5='35e615e0f5e293671d00c5c414ac2f6b'"
msgstr ""
"external ref='media/guitar-tuner.png' md5='35e615e0f5e293671d00c5c414ac2f6b'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/guitar-tuner.c.page:100 C/guitar-tuner.cpp.page:94
#: C/guitar-tuner.py.page:101 C/guitar-tuner.vala.page:101
msgctxt "_"
msgid ""
"external ref='media/guitar-tuner-glade.png' "
"md5='f6606525443ab2160f53a87a454364d0'"
msgstr ""
"external ref='media/guitar-tuner-glade.png' "
"md5='f6606525443ab2160f53a87a454364d0'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/guitar-tuner.c.page:145 C/guitar-tuner.cpp.page:123
#: C/guitar-tuner.js.page:43 C/guitar-tuner.py.page:144
#: C/guitar-tuner.vala.page:135
msgctxt "_"
msgid ""
"external ref='media/guitar-tuner-pipeline.png' "
"md5='5adc952909d92af5dae6954781b4ad5f'"
msgstr ""
"external ref='media/guitar-tuner-pipeline.png' "
"md5='5adc952909d92af5dae6954781b4ad5f'"

#. (itstool) path: info/title
#: C/guitar-tuner.c.page:8
msgctxt "text"
msgid "Guitar tuner (C)"
msgstr "Συντονιστής κιθάρας (C)"

#. (itstool) path: info/desc
#: C/guitar-tuner.c.page:11 C/guitar-tuner.py.page:11
msgid ""
"Use GTK+ and GStreamer to build a simple guitar tuner application for GNOME. "
"Shows off how to use the interface designer."
msgstr ""
"Χρησιμοποιήστε GTK+ και GStreamer για να φτιάξετε ένα απλό πρόγραμμα "
"συντονιστή κιθάρας για το GNOME. Αναδεικνύει πώς να χρησιμοποιήσετε τον "
"σχεδιαστή διεπαφών."

#. (itstool) path: credit/name
#: C/guitar-tuner.c.page:19 C/guitar-tuner.cpp.page:17
#: C/guitar-tuner.py.page:19 C/guitar-tuner.vala.page:18
#: C/image-viewer.c.page:19 C/image-viewer.cpp.page:17
#: C/image-viewer.js.page:19 C/image-viewer.py.page:19
#: C/image-viewer.vala.page:19 C/index.page:18 C/magic-mirror.vala.page:19
#: C/photo-wall.c.page:18 C/record-collection.js.page:19
msgid "Johannes Schmid"
msgstr "Johannes Schmid"

#. (itstool) path: page/title
#: C/guitar-tuner.c.page:29 C/guitar-tuner.cpp.page:27
#: C/guitar-tuner.js.page:20 C/guitar-tuner.py.page:34
#: C/guitar-tuner.vala.page:32
msgid "Guitar tuner"
msgstr "Συντονιστής κιθάρας"

#. (itstool) path: synopsis/p
#: C/guitar-tuner.c.page:32 C/guitar-tuner.cpp.page:30
#: C/guitar-tuner.py.page:37
msgid ""
"In this tutorial, we're going to make a program which plays tones that you "
"can use to tune a guitar. You will learn how to:"
msgstr ""
"Σε αυτόν τον οδηγό, θα φτιάξουμε ένα πρόγραμμα που παίζει μουσικούς τόνους "
"και μπορεί να συντονίσει μια κιθάρα. Θα μάθετε να:"

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:34 C/guitar-tuner.cpp.page:32
#: C/guitar-tuner.py.page:39
msgid "Set up a basic project in Anjuta"
msgstr "Ρυθμίζετε το κύριο έργο στο Anjuta"

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:35 C/guitar-tuner.cpp.page:33
#: C/guitar-tuner.py.page:40
msgid "Create a simple GUI with Anjuta's UI designer"
msgstr "Δημιουργείτε απλό GUI με τον σχεδιαστή UI του Anjuta"

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:36 C/guitar-tuner.cpp.page:34
#: C/guitar-tuner.py.page:41
msgid "Use GStreamer to play sounds"
msgstr "Χρησιμοποιείτε το GStreamer για να παίζετε ήχους"

#. (itstool) path: synopsis/p
#: C/guitar-tuner.c.page:38 C/guitar-tuner.cpp.page:36
#: C/guitar-tuner.py.page:43 C/guitar-tuner.vala.page:41
#: C/image-viewer.js.page:39 C/image-viewer.py.page:39
#: C/image-viewer.vala.page:46 C/magic-mirror.vala.page:39
msgid "You'll need the following to be able to follow this tutorial:"
msgstr ""
"Θα χρειαστείτε τα παρακάτω για να μπορέσετε να ακολουθήσετε αυτό το μάθημα:"

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:40 C/guitar-tuner.cpp.page:38
#: C/guitar-tuner.py.page:45 C/image-viewer.js.page:41
#: C/image-viewer.py.page:41 C/magic-mirror.vala.page:41
msgid "An installed copy of the <link xref=\"getting-ready\">Anjuta IDE</link>"
msgstr ""
"Ένα εγκατεστημένο αντίγραφο του <link xref=\"getting-ready\">Anjuta IDE</"
"link>"

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:41
msgid "Basic knowledge of the C programming language"
msgstr "Βασική γνώση της γλώσσας προγραμματισμού C"

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:48 C/guitar-tuner.cpp.page:46
#: C/guitar-tuner.py.page:53 C/image-viewer.c.page:42
#: C/image-viewer.cpp.page:40 C/image-viewer.js.page:50
#: C/image-viewer.py.page:49 C/image-viewer.vala.page:57
#: C/magic-mirror.vala.page:50 C/message-board.c.page:46
#: C/photo-wall.c.page:52 C/record-collection.js.page:53
msgid "Create a project in Anjuta"
msgstr "Δημιουργία έργου με το Anjuta"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:49 C/guitar-tuner.cpp.page:47
#: C/guitar-tuner.py.page:54 C/guitar-tuner.vala.page:52
#: C/image-viewer.c.page:43 C/image-viewer.cpp.page:41
#: C/image-viewer.js.page:51 C/image-viewer.py.page:50
#: C/image-viewer.vala.page:58 C/magic-mirror.vala.page:51
#: C/photo-wall.c.page:53 C/record-collection.js.page:54
msgid ""
"Before you start coding, you'll need to set up a new project in Anjuta. This "
"will create all of the files you need to build and run the code later on. "
"It's also useful for keeping everything together."
msgstr ""
"Πριν ξεκινήσετε να προγραμματίζετε, πρέπει να δημιουργήσετε ένα καινούργιο "
"έργο στο Anjuta. Έτσι θα δημιουργηθούν όλα τα απαραίτητα αρχεία που "
"χρειάζονται για την εκτέλεση του κώδικα αργότερα. Επίσης θα ήταν χρήσιμο να "
"τα κρατάτε όλα μαζί."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:52 C/guitar-tuner.cpp.page:50
#: C/guitar-tuner.py.page:57 C/image-viewer.c.page:46
#: C/image-viewer.cpp.page:44 C/image-viewer.js.page:54
#: C/image-viewer.py.page:53 C/magic-mirror.vala.page:54
#: C/photo-wall.c.page:56 C/record-collection.js.page:57
msgid ""
"Start Anjuta and click <guiseq><gui>File</gui><gui>New</gui><gui>Project</"
"gui></guiseq> to open the project wizard."
msgstr ""
"Ξεκινήστε το Anjuta και πατήστε <guiseq><gui>αρχείο</gui><gui>νέο</"
"gui><gui>έργο</gui></guiseq> για να ανοίξετε τον οδηγό του έργου."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:55
msgid ""
"Choose <gui>GTK+ (Simple)</gui> from the <gui>C</gui> tab, click "
"<gui>Continue</gui>, and fill out your details on the next few pages. Use "
"<file>guitar-tuner</file> as project name and directory."
msgstr ""
"Επιλέξτε <gui>GTK+ (απλό)</gui> από την καρτέλα <gui>C</gui>, πατήστε "
"<gui>συνέχεια</gui>, και συμπληρώστε τις λεπτομέρειές σας στις επόμενες "
"λίγες σελίδες. Χρησιμοποιήστε το <file>guitar-tuner</file> ως όνομα του "
"έργου και του καταλόγου."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:58
msgid ""
"Make sure that <gui>Configure external packages</gui> is switched <gui>ON</"
"gui>. On the next page, select <em>gstreamer-0.10</em> from the list to "
"include the GStreamer library in your project."
msgstr ""
"Βεβαιωθείτε ότι το <gui>ρύθμιση εξωτερικών πακέτων</gui> είναι <gui>ενεργό</"
"gui>. Στην επόμενη σελίδα, επιλέξτε <em>gstreamer-0.10</em> από τη λίστα για "
"συμπερίληψη της βιβλιοθήκης GStreamer στο έργο σας."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:62 C/image-viewer.c.page:57 C/photo-wall.c.page:71
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. Open "
"<file>src/main.c</file> from the <gui>Project</gui> or <gui>File</gui> tabs. "
"You should see some code which starts with the lines:"
msgstr ""
"Πατήστε <gui>εφαρμογή</gui> και το έργο θα δημιουργηθεί για σας. Ανοίξτε το "
"<file>src/main.c</file> από τις καρτέλες <gui>έργο</gui> ή <gui>αρχείο</"
"gui>. Θα πρέπει να δείτε κάποιο κώδικα που ξεκινάει με τις γραμμές:"

#. (itstool) path: item/code
#: C/guitar-tuner.c.page:63 C/image-viewer.c.page:58 C/photo-wall.c.page:72
#, no-wrap
msgid ""
"\n"
"#include &lt;config.h&gt;\n"
"#include &lt;gtk/gtk.h&gt;"
msgstr ""
"\n"
"#include &lt;config.h&gt;\n"
"#include &lt;gtk/gtk.h&gt;"

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:71 C/guitar-tuner.cpp.page:69
#: C/guitar-tuner.vala.page:74 C/image-viewer.c.page:66
#: C/image-viewer.cpp.page:66 C/image-viewer.vala.page:113
#: C/magic-mirror.vala.page:78
msgid "Build the code for the first time"
msgstr "Κατασκευάστε τον κώδικα για πρώτη φορά"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:72
msgid ""
"C is a rather verbose language, so don't be surprised that the file contains "
"quite a lot of code. Most of it is template code. It loads an (empty) window "
"from the user interface description file and shows it. More details are "
"given below; skip this list if you understand the basics:"
msgstr ""
"Η C είναι μια μάλλον αναλυτική γλώσσα, έτσι μην εκπλαγείτε που το αρχείο "
"περιέχει πολύ κώδικα. Ο περισσότερος κώδικας είναι πρότυπο κώδικα. Φορτώνει "
"ένα (κενό) παράθυρο από την περιγραφή διεπαφής χρήστη και το εμφανίζει. "
"Περισσότερες λεπτομέρειες δίνονται πιο κάτω· προσπεράστε αυτή τη λίστα αν "
"καταλαβαίνετε τα βασικά:"

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:76 C/image-viewer.c.page:71
msgid ""
"The three <code>#include</code> lines at the top include the <code>config</"
"code> (useful autoconf build defines), <code>gtk</code> (user interface) and "
"<code>gi18n</code> (internationalization) libraries. Functions from these "
"libraries are used in the rest of the code."
msgstr ""
"Οι τρεις γραμμές <code>#include</code> στην κορυφή περιλαμβάνουν τον "
"<code>config</code> (ορίζει χρήσιμη κατασκευή του autoconf), <code>gtk</"
"code> (διεπαφή χρήστη) και βιβλιοθήκες <code>gi18n</code> (διεθνοποίηση). "
"Συναρτήσεις από αυτές τις βιβλιοθήκες χρησιμοποιούνται στον υπόλοιπο κώδικα."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:79
msgid ""
"The <code>create_window</code> function creates a new window by opening a "
"GtkBuilder file (<file>src/guitar-tuner.ui</file>, defined a few lines "
"above), connecting its signals and then displaying it in a window. The "
"GtkBuilder file contains a description of a user interface and all of its "
"elements. You can use Anjuta's editor to design GtkBuilder user interfaces."
msgstr ""
"Ο συνάρτηση <code>create_window</code> δημιουργεί ένα νέο παράθυρο "
"ανοίγοντας ένα αρχείο GtkBuilder (<file>src/guitar-tuner.ui</file>, που "
"ορίζεται λίγες γραμμές παραπάνω), συνδέοντας τα σήματά του και έπειτα "
"εμφανίζοντας τα σε παράθυρο. Αυτό το αρχείο GtkBuilder περιέχει μια "
"περιγραφή μιας διεπαφής χρήστη και όλων των στοιχείων του. Μπορείτε να "
"χρησιμοποιήσετε τον επεξεργαστή του Anjuta για σχεδίαση διεπαφών χρήστη "
"GtkBuilder."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:80 C/image-viewer.c.page:75
#: C/image-viewer.vala.page:123
msgid ""
"Connecting signals is how you define what happens when you push a button, or "
"when some other event happens. Here, the <code>destroy</code> function is "
"called (and quits the app) when you close the window."
msgstr ""
"Σύνδεση σημάτων είναι πώς καθορίζετε τι συμβαίνει όταν πατάτε ένα κουμπί, ή "
"όταν συμβεί κάποιο άλλο συμβάν. Εδώ, καλείται η συνάρτηση <code>destroy</"
"code> (και τερματίζει την εφαρμογή) όταν κλείνετε το παράθυρο."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:83 C/image-viewer.c.page:78
msgid ""
"The <code>main</code> function is run by default when you start a C "
"application. It calls a few functions which set up and then run the "
"application. The <code>gtk_main</code> function starts the GTK main loop, "
"which runs the user interface and starts listening for events (like clicks "
"and key presses)."
msgstr ""
"Η συνάρτηση <code>main</code> τρέχει από προεπιλογή όταν ξεκινάτε μια "
"εφαρμογή C. Καλεί λίγες συναρτήσεις που ρυθμίζουν και έπειτα εκτελούν την "
"εφαρμογή. Η συνάρτηση <code>gtk_main</code> ξεκινά τον κύριο βρόχο του GTK, "
"που εκτελεί τη διεπαφή χρήστη και ξεκινά την απάντηση για συμβάντα (όπως "
"κλικ και πατήματα κουμπιών)."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:86 C/image-viewer.c.page:81
msgid ""
"The <code>ENABLE_NLS</code> conditional definition sets up <code>gettext</"
"code>, which is a framework for translating applications. These functions "
"specify how translation tools should handle your app when you run them."
msgstr ""
"Ο υπό όρους ορισμός <code>ENABLE_NLS</code> εγκαθιστά <code>gettext</code>, "
"που είναι ο σκελετός για μετάφραση εφαρμογών. Αυτές οι συναρτήσεις ορίζουν "
"πώς τα εργαλεία μετάφρασης θα χειριστούν την εφαρμογή σας όταν τις εκτελείτε."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:90 C/guitar-tuner.cpp.page:84
#: C/image-viewer.c.page:85 C/image-viewer.cpp.page:82
#: C/image-viewer.vala.page:133 C/magic-mirror.vala.page:93
msgid ""
"This code is ready to be used, so you can compile it by clicking "
"<guiseq><gui>Build</gui><gui>Build Project</gui></guiseq> (or press "
"<keyseq><key>Shift</key><key>F7</key></keyseq>)."
msgstr ""
"Αυτός ο κώδικας είναι έτοιμος να χρησιμοποιηθεί, οπότε μπορείτε να τον "
"μεταγλωττίσετε με κλικ <guiseq><gui>κατασκευή</gui><gui>κατασκευή έργου</"
"gui></guiseq> (ή πιέζοντας <keyseq><key>Shift</key><key>F7</key></keyseq>)."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:91 C/guitar-tuner.cpp.page:85
#: C/image-viewer.c.page:86 C/image-viewer.cpp.page:83
msgid ""
"Press <gui>Execute</gui> on the next window that appears to configure a "
"debug build. You only need to do this once, for the first build."
msgstr ""
"Πατήστε <gui>Execute</gui> στο επόμενο παράθυρο που εμφανίζεται για ρύθμιση "
"κατασκευής αποσφαλμάτωσης. Χρειάζεται να το κάνετε αυτό μόνο μια φορά, για "
"την πρώτη κατασκευή."

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:95 C/guitar-tuner.cpp.page:89
#: C/guitar-tuner.py.page:96 C/guitar-tuner.vala.page:96
msgid "Create the user interface"
msgstr "Δημιουργία της διεπαφής χρήστη"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:96 C/guitar-tuner.cpp.page:90
msgid ""
"A description of the user interface (UI) is contained in the GtkBuilder "
"file. To edit the user interface, open <file>src/guitar_tuner.ui</file>. "
"This will switch to the interface designer. The design window is in the "
"center; widgets and widgets' properties are on the left, and the palette of "
"available widgets is on the right."
msgstr ""
"Μια περιγραφή της διεπαφής χρήστη (UI) περιέχεται στο αρχείο GtkBuilder. Για "
"να επεξεργαστείτε τη διεπαφή χρήστη, ανοίξτε το <file>src/guitar_tuner.ui</"
"file>. Θα βρεθείτε στο σχεδιαστή διεπαφής. Το παράθυρο σχεδίασης είναι στο "
"κέντρο· τα γραφικά στοιχεία και οι ρυθμίσεις τους είναι στα αριστερά, η "
"παλέτα με τα διαθέσιμα γραφικά στοιχεία στα δεξιά."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:98 C/guitar-tuner.cpp.page:92
#: C/guitar-tuner.py.page:99
msgid ""
"The layout of every UI in GTK+ is organized using boxes and tables. Let's "
"use a vertical <gui>GtkButtonBox</gui> here to assign six <gui>GtkButtons</"
"gui>, one for each of the six guitar strings."
msgstr ""
"Η διάταξη κάθε διεπαφής χρήστη σε Gtk+ οργανώνεται σε κουτιά και πίνακες. Ας "
"χρησιμοποιήσουμε εδώ ένα κάθετο <gui>GtkButtonBox</gui> για να τοποθετήσουμε "
"έξι <gui>GtkButtons</gui>, ένα για κάθε μία από τις χορδές της κιθάρας."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:104 C/guitar-tuner.cpp.page:98
#: C/guitar-tuner.py.page:105
msgid ""
"Select a <gui>GtkButtonBox</gui> from the <gui>Container</gui> section of "
"the <gui>Palette</gui> on the right and put it into the window. In the "
"<gui>Properties</gui> pane, set the number of elements to 6 (for the six "
"strings) and the orientation to vertical."
msgstr ""
"Διαλέξτε ένα <gui>GtkButtonBox</gui> από το τμήμα <gui>Container</gui> στην "
"<gui>Παλέτα</gui> στο δεξιά και προσθέστε το στο παράθυρο. Στο φάτνωμα "
"<gui>Ιδιότητες</gui> καθορίστε τον αριθμό των στοιχείων σε 6 (για τις έξι "
"χορδές της κιθάρας) και τον προσανατολισμό σε κάθετο."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:108 C/guitar-tuner.cpp.page:102
#: C/guitar-tuner.py.page:109
msgid ""
"Now, choose a <gui>GtkButton</gui> from the palette and put it into the "
"first part of the box."
msgstr ""
"Τώρα, διαλέξτε ένα <gui>GtkButton</gui> από την παλέτα και βάλτε το στο "
"πρώτο μέρος του κουτιού."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:111 C/guitar-tuner.py.page:112
msgid ""
"While the button is still selected, change the <gui>Label</gui> property in "
"the <gui>Widgets</gui> tab to <gui>E</gui>. This will be the low E string."
msgstr ""
"Έχοντας το κουμπί ακόμα επιλεγμένο, αλλάξτε την <gui>Ετικέτα</gui> στην "
"καρτέλα <gui>Γραφικά στοιχεία</gui> σε <gui>E</gui>. Αυτή θα είναι η χαμηλή "
"χορδή Ε."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:114 C/guitar-tuner.py.page:115
msgid ""
"Switch to the <gui>Signals</gui> tab (inside the <gui>Widgets</gui> tab) and "
"look for the <code>clicked</code> signal of the button. You can use this to "
"connect a signal handler that will be called when the button is clicked by "
"the user. To do this, click on the signal and type <code>on_button_clicked</"
"code> in the <gui>Handler</gui> column and press <key>Return</key>."
msgstr ""
"Πηγαίνετε στην καρτέλα <gui>Σήματα</gui> (μέσα στην καρτέλα <gui>Γραφικά "
"στοιχεία</gui>) και βρείτε το σήμα <code>clicked</code> του κουμπιού. "
"Μπορείτε να το χρησιμοποιήσετε για να συνδέσετε έναν χειριστή σημάτων που θα "
"καλείται όταν πατηθεί το κουμπί από τον χρήστη. Για να το κάνετε αυτό, "
"πατήστε πάνω στο σήμα και πληκτρολογήστε <code>on_button_clicked</code> στη "
"στήλη <gui>χειριστής</gui> και πατήστε <key>Επιστροφή</key>."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:117 C/guitar-tuner.py.page:118
#: C/guitar-tuner.vala.page:122
msgid ""
"Repeat the above steps for the other buttons, adding the next 5 strings with "
"the names <em>A</em>, <em>D</em>, <em>G</em>, <em>B</em>, and <em>e</em>."
msgstr ""
"Επαναλάβετε τα παραπάνω βήματα για τα υπόλοιπα κουμπιά, προσθέστε τις "
"επόμενες 5 χορδές με τα ονόματα <em>A</em>, <em>D</em>, <em>G</em>, <em>B</"
"em>, και <em>e</em>."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:120 C/guitar-tuner.py.page:121
#: C/guitar-tuner.vala.page:125
msgid ""
"Save the UI design (by clicking <guiseq><gui>File</gui><gui>Save</gui></"
"guiseq>) and keep it open."
msgstr ""
"Αποθηκεύστε τη σχεδίαση UI (πατώντας <guiseq><gui>αρχείο</"
"gui><gui>αποθήκευση</gui></guiseq>) και κρατήστε το ανοιχτό."

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:126 C/guitar-tuner.vala.page:203
msgid "Creating the signal handler"
msgstr "Δημιουργία χειριστή σημάτων"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:127 C/guitar-tuner.py.page:128
msgid ""
"In the UI designer, you made it so that all of the buttons will call the "
"same function, <gui>on_button_clicked</gui>, when they are clicked. We need "
"to add that function in the source file."
msgstr ""
"Στον σχεδιαστή διεπαφών χρήστη, κάνατε όλα τα κουμπιά να καλούν την ίδια "
"συνάρτηση, <gui>on_button_clicked</gui>, όταν πατηθούν. Πρέπει να "
"προσθέσουμε αυτή την συνάρτηση στο πηγαίο κώδικα."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:128
msgid ""
"To do this, open <file>main.c</file> while the user interface file is still "
"open. Switch to the <gui>Signals</gui> tab, which you already used to set "
"the signal name. Now take the row where you set the <gui>clicked</gui> "
"signal and drag it into to the source file at a position that is outside any "
"function. The following code will be added to your source file:"
msgstr ""
"Για να το κάνετε αυτό, ανοίξτε το <file>main.c</file>, έχοντας ανοιχτό και "
"το αρχείο της διεπαφής χρήστη. Πηγαίνετε στην καρτέλα <gui>σήματα</gui> που "
"ήδη χρησιμοποιήσατε για να ορίσετε το όνομα του σήματος. Τώρα πάρτε τη "
"γραμμή όπου είχατε ορίσει το σήμα <gui>πατημένο</gui> και σύρετε την στο "
"πηγαίο αρχείο σε μια θέση που είναι έξω από κάθε συνάρτηση. Ο ακόλουθος "
"κώδικας θα προστεθεί στο πηγαίο αρχείο:"

#. (itstool) path: section/code
#: C/guitar-tuner.c.page:131
#, no-wrap
msgid ""
"\n"
"void on_button_clicked (GtkWidget* button, gpointer user_data)\n"
"{\n"
"\n"
"}"
msgstr ""
"\n"
"void on_button_clicked (GtkWidget* button, gpointer user_data)\n"
"{\n"
"\n"
"}"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:136
msgid ""
"This signal handler has two arguments: a pointer to the <code>GtkWidget</"
"code> that called the function (in our case, always a <code>GtkButton</"
"code>), and a pointer to some \"user data\" that you can define, but which "
"we won't be using here. (You can set the user data by calling "
"<code>gtk_builder_connect_signals</code>; it is normally used to pass a "
"pointer to a data structure that you might need to access inside the signal "
"handler.)"
msgstr ""
"Αυτός ο χειριστής σήματος έχει δύο ορίσματα: ένα δείκτη στο <code>GtkWidget</"
"code> που κάλεσε τη συνάρτηση (στην περίπτωση μας, πάντοτε ένα "
"<code>GtkButton</code>) και ένα δείκτη στο κάποια \"δεδομένα χρήστη\" που "
"μπορείτε να ορίσετε, αλλά τα οποία δεν θα χρησιμοποιήσουμε εδώ. (Μπορείτε να "
"ορίσετε τα δεδομένα χρήστη καλώντας <code>gtk_builder_connect_signals</"
"code>; χρησιμοποιείται κανονικά για το πέρασμα ενός δείκτη σε μια δομή "
"δεδομένων που ίσως χρειαστείτε να προσπελάσετε στο χειριστή σήματος.)"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:137 C/guitar-tuner.py.page:136
msgid ""
"For now, we'll leave the signal handler empty while we work on writing the "
"code to produce sounds."
msgstr ""
"Για την ώρα, θα αφήσουμε το χειριστή σημάτων άδειο καθώς θα ασχοληθούμε με "
"το γράψιμο του κώδικα που θα παράγει τους ήχους."

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:141 C/guitar-tuner.cpp.page:118
#: C/guitar-tuner.js.page:39 C/guitar-tuner.py.page:140
#: C/guitar-tuner.vala.page:131
msgid "GStreamer pipelines"
msgstr "Διοχετεύσεις GStreamer"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:142 C/guitar-tuner.js.page:40
#: C/guitar-tuner.py.page:141
msgid ""
"GStreamer is GNOME's multimedia framework — you can use it for playing, "
"recording, and processing video, audio, webcam streams and the like. Here, "
"we'll be using it to produce single-frequency tones."
msgstr ""
"Το Gtreamer είναι ο σκελετός πολυμέσων του GNOME — μπορείτε να το "
"χρησιμοποιήσετε για να αναπαράγετε, ηχογραφήσετε, και να επεξεργαστείτε "
"βίντεο, ήχο, ροές βίντεο και τα λοιπά. Εδώ, θα το χρησιμοποιήσουμε για να "
"παράγουμε μονές-συχνότητες τόνων."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:143 C/guitar-tuner.cpp.page:121
#: C/guitar-tuner.js.page:41 C/guitar-tuner.py.page:142
msgid ""
"Conceptually, GStreamer works as follows: You create a <em>pipeline</em> "
"containing several processing elements going from the <em>source</em> to the "
"<em>sink</em> (output). The source can be an image file, a video, or a music "
"file, for example, and the output could be a widget or the soundcard."
msgstr ""
"Εννοιολογικά, το GStreamer λειτουργεί ως εξής: δημιουργείς μια "
"<em>διοχέτευση</em> που περιέχει διάφορα επεξεργαζόμενα στοιχεία που "
"πηγαίνουν από την <em>πηγή</em> στην <em>έξοδο</em>. Η πηγή μπορεί να είναι "
"ένα αρχείο εικόνας, βίντεο, ή και μουσικής, για παράδειγμα, και η έξοδος "
"μπορεί να είναι ένα γραφικό στοιχείο ή η κάρτα ήχου."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:144 C/guitar-tuner.cpp.page:122
#: C/guitar-tuner.js.page:42 C/guitar-tuner.py.page:143
#: C/guitar-tuner.vala.page:134
msgid ""
"Between source and sink, you can apply various filters and converters to "
"handle effects, format conversions and so on. Each element of the pipeline "
"has properties which can be used to change its behaviour."
msgstr ""
"Ανάμεσα στην πηγή και στην έξοδο, μπορείτε να εφαρμόσετε διάφορα φίλτρα και "
"οι μετατροπείς να χειριστούν εφέ, μετατροπές μορφών και λοιπά. Κάθε στοιχείο "
"της διοχέτευσης έχει ιδιότητες που μπορούν να χρησιμοποιηθούν για να "
"αλλάξουν τη συμπεριφορά τους."

#. (itstool) path: media/p
#: C/guitar-tuner.c.page:146 C/guitar-tuner.cpp.page:124
#: C/guitar-tuner.js.page:44 C/guitar-tuner.py.page:145
#: C/guitar-tuner.vala.page:136
msgid "An example GStreamer pipeline."
msgstr "Ένα παράδειγμα διοχέτευσης GStreamer."

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:151 C/guitar-tuner.py.page:150
#: C/guitar-tuner.vala.page:141
msgid "Set up the pipeline"
msgstr "Ρύθμιση της διοχέτευσης"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:152 C/guitar-tuner.cpp.page:135
#: C/guitar-tuner.py.page:151
msgid ""
"In this simple example we will use a tone generator source called "
"<code>audiotestsrc</code> and send the output to the default system sound "
"device, <code>autoaudiosink</code>. We only need to configure the frequency "
"of the tone generator; this is accessible through the <code>freq</code> "
"property of <code>audiotestsrc</code>."
msgstr ""
"Σε αυτό το απλό παράδειγμα θα χρησιμοποιήσουμε μια πηγή παραγωγής τόνων, την "
"<code>audiotestsrc</code> και θα στείλουμε την έξοδο στην προεπιλεγμένη "
"συσκευή ήχου του συστήματος, <code>autoaudiosink</code>. Πρέπει μόνο να "
"ρυθμίσουμε την συχνότητα της παραγωγής τόνου· αυτό είναι εφικτό μέσα από την "
"ρύθμιση <code>freq</code> του <code>audiotestsrc</code>."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:154
msgid ""
"Insert the following line into <file>main.c</file>, just below the "
"<code>#include &lt;gtk/gtk.h&gt;</code> line:"
msgstr ""
"Εισάγετε την παρακάτω γραμμή στο <file>main.c</file>, ακριβώς κάτω από τη "
"γραμμή <code>#include &lt;gtk/gtk.h&gt;</code>:"

#. (itstool) path: section/code
#: C/guitar-tuner.c.page:155
#, no-wrap
msgid "#include &lt;gst/gst.h&gt;"
msgstr "#include &lt;gst/gst.h&gt;"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:156
msgid ""
"This includes the GStreamer library. You also need to add a line to "
"initialize GStreamer; put the following code on the line above the "
"<code>gtk_init</code> call in the <code>main</code> function:"
msgstr ""
"Αυτό περιλαμβάνει τη βιβλιοθήκη του GStreamer. Χρειάζεται επίσης να "
"προσθέσουμε μια γραμμή για αρχικοποίηση του GStreamer· βάλτε τον παρακάτω "
"κώδικα στην γραμμή πάνω από την κλήση <code>gtk_init</code> στη συνάρτηση "
"<code>main</code>:"

#. (itstool) path: section/code
#: C/guitar-tuner.c.page:157
#, no-wrap
msgid "gst_init (&amp;argc, &amp;argv);"
msgstr "gst_init (&amp;argc, &amp;argv);"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:158
msgid ""
"Then, copy the following function into <file>main.c</file> above the empty "
"<code>on_button_clicked</code> function:"
msgstr ""
"Μετά, αντιγράψτε την ακόλουθη συνάρτηση στην <file>main.c</file> πάνω από "
"την κενή συνάρτηση <code>on_button_clicked</code>:"

#. (itstool) path: section/code
#: C/guitar-tuner.c.page:159
#, no-wrap
msgid ""
"static void\n"
"play_sound (gdouble frequency)\n"
"{\n"
"\tGstElement *source, *sink;\n"
"\tGstElement *pipeline;\n"
"\n"
"\tpipeline = gst_pipeline_new (\"note\");\n"
"\tsource   = gst_element_factory_make (\"audiotestsrc\",\n"
"\t                                     \"source\");\n"
"\tsink     = gst_element_factory_make (\"autoaudiosink\",\n"
"\t                                     \"output\");\n"
"\n"
"\t/* set frequency */\n"
"\tg_object_set (source, \"freq\", frequency, NULL);\n"
"\n"
"\tgst_bin_add_many (GST_BIN (pipeline), source, sink, NULL);\n"
"\tgst_element_link (source, sink);\n"
"\n"
"\tgst_element_set_state (pipeline, GST_STATE_PLAYING);\n"
"\n"
"\t/* stop it after 500ms */\n"
"\tg_timeout_add (LENGTH, (GSourceFunc) pipeline_stop, pipeline);\n"
"}"
msgstr ""
"static void\n"
"play_sound (gdouble frequency)\n"
"{\n"
"\tGstElement *source, *sink;\n"
"\tGstElement *pipeline;\n"
"\n"
"\tpipeline = gst_pipeline_new (\"note\");\n"
"\tsource   = gst_element_factory_make (\"audiotestsrc\",\n"
"\t                                     \"source\");\n"
"\tsink     = gst_element_factory_make (\"autoaudiosink\",\n"
"\t                                     \"output\");\n"
"\n"
"\t/* set frequency */\n"
"\tg_object_set (source, \"freq\", frequency, NULL);\n"
"\n"
"\tgst_bin_add_many (GST_BIN (pipeline), source, sink, NULL);\n"
"\tgst_element_link (source, sink);\n"
"\n"
"\tgst_element_set_state (pipeline, GST_STATE_PLAYING);\n"
"\n"
"\t/* stop it after 500ms */\n"
"\tg_timeout_add (LENGTH, (GSourceFunc) pipeline_stop, pipeline);\n"
"}"

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:185
msgid ""
"The first five lines create source and sink GStreamer elements "
"(<code>GstElement</code>), and a pipeline element (which will be used as a "
"container for the other two elements). The pipeline is given the name \"note"
"\"; the source is named \"source\" and is set to the <code>audiotestsrc</"
"code> source; and the sink is named \"output\" and set to the "
"<code>autoaudiosink</code> sink (default sound card output)."
msgstr ""
"Οι τρεις πέντε γραμμές δημιουργούν τα στοιχεία πηγή και έξοδος του GStreamer "
"(<code>GstElement</code>) και ένα στοιχείο διοχέτευσης (το οποίο θα "
"χρησιμοποιηθεί ως περιέκτης για τα δυο άλλα στοιχεία). Δίνουμε το όνομα "
"\"note\" στη διοχέτευση· ονομάζουμε την πηγή \"source\" και το ρυθμίζετε "
"στην πηγή <code>audiotestsrc</code>· και ονομάζουμε την έξοδο \"output\" και "
"την ρυθμίζετε στην έξοδο <code>autoaudiosink</code> (προεπιλεγμένη έξοδος "
"κάρτας ήχου)."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:188
msgid ""
"The call to <code>g_object_set</code> sets the <code>freq</code> property of "
"the source element to <code>frequency</code>, which is passed as an argument "
"to the <code>play_sound</code> function. This is just the frequency of the "
"note in Hertz; some useful frequencies will be defined later on."
msgstr ""
"Το κάλεσμα του <code>g_object_set</code> ορίζει την ιδιότητα <code>freq</"
"code> του στοιχείου πηγή σε <code>frequency</code>, η οποία έχει περαστεί ως "
"όρισμα στη συνάρτηση <code>play_sound</code>. Αυτή είναι μόνο η συχνότητα "
"της νότας σε Hertz· μερικές χρήσιμες συχνότητες θα οριστούν αργότερα."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:191
msgid ""
"<code>gst_bin_add_many</code> puts the source and sink into the pipeline. "
"The pipeline is a <code>GstBin</code>, which is just an element that can "
"contain multiple other GStreamer elements. In general, you can add as many "
"elements as you like to the pipeline by adding more arguments to "
"<code>gst_bin_add_many</code>."
msgstr ""
"Ο <code>gst_bin_add_many</code> βάζει την πηγή και την έξοδο στη διοχέτευση. "
"Η διοχέτευση είναι ένας <code>GstBin</code>, που είναι μόλις ένα στοιχείο "
"που μπορεί να περιέχει πολλαπλά άλλα στοιχεία GStreamer. Γενικά, μπορείτε να "
"προσθέσετε όσα στοιχεία θέλετε στη διοχέτευση προσθέτοντας περισσότερα "
"ορίσματα στον <code>gst_bin_add_many</code>."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:194
msgid ""
"Next, <code>gst_element_link</code> is used to connect the elements "
"together, so the output of <code>source</code> (a tone) goes into the input "
"of <code>sink</code> (which is then output to the sound card). "
"<code>gst_element_set_state</code> is then used to start playback, by "
"setting the state of the pipeline to playing (<code>GST_STATE_PLAYING</"
"code>)."
msgstr ""
"Κατόπιν, ο <code>gst_element_link</code> χρησιμοποιείται για σύνδεση των "
"στοιχείων μαζί, έτσι η έξοδος του <code>source</code> (ένας τόνος) πηγαίνει "
"στην είσοδο της <code>sink</code> (που είναι έπειτα έξοδος στην κάρτα ήχου). "
"Το <code>gst_element_set_state</code> χρησιμοποιείται έπειτα για έναρξη "
"αναπαραγωγής, ορίζοντας την κατάσταση της διοχέτευσης να παίξει "
"(<code>GST_STATE_PLAYING</code>)."

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:201 C/guitar-tuner.py.page:191
msgid "Stopping playback"
msgstr "Διακοπή αναπαραγωγής"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:202
msgid ""
"We don't want to play an annoying tone forever, so the last thing "
"<code>play_sound</code> does is to call <code>g_timeout_add</code>. This "
"sets a timeout for stopping the sound; it waits for <code>LENGTH</code> "
"milliseconds before calling the function <code>pipeline_stop</code>, and "
"will keep calling it until <code>pipeline_stop</code> returns <code>FALSE</"
"code>."
msgstr ""
"Δεν θέλουμε να παίζουμε έναν ενοχλητικό ήχο για πάντα, οπότε το τελευταίο "
"πράγμα που κάνει η <code>play_sound</code> είναι να καλεί το "
"<code>g_timeout_add</code>. Αυτό ορίζει ένα χρονικό περιθώριο που θα "
"σταματήσει τον ήχο· περιμένει για <code>LENGTH</code> ms πριν καλέσει τη "
"συνάρτηση <code>pipeline_stop</code>, και θα συνεχίσει να την καλεί μέχρι η "
"<code>pipeline_stop</code> να επιστρέψει <code>False</code>."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:203
msgid ""
"Now, we'll write the <code>pipeline_stop</code> function which is called by "
"<code>g_timeout_add</code>. Insert the following code <em>above</em> the "
"<code>play_sound</code> function:"
msgstr ""
"Τώρα θα γράψουμε τη συνάρτηση <code>pipeline_stop</code>, η οποία καλείται "
"από το <code>g_timeout_add</code>. Προσθέστε τον ακόλουθο κώδικα <em>πάνω</"
"em> από τη συνάρτηση <code>play_sound</code>:"

#. (itstool) path: section/code
#: C/guitar-tuner.c.page:204
#, no-wrap
msgid ""
"\n"
"#define LENGTH 500 /* Length of playing in ms */\n"
"\n"
"static gboolean\n"
"pipeline_stop (GstElement* pipeline)\n"
"{\n"
"\tgst_element_set_state (pipeline, GST_STATE_NULL);\n"
"\tg_object_unref (pipeline);\n"
"\n"
"\treturn FALSE;\n"
"}"
msgstr ""
"\n"
"#define LENGTH 500 /* Χρόνος αναπαραγωγής σε ms */\n"
"\n"
"static gboolean\n"
"pipeline_stop (GstElement* pipeline)\n"
"{\n"
"\tgst_element_set_state (pipeline, GST_STATE_NULL);\n"
"\tg_object_unref (pipeline);\n"
"\n"
"\treturn FALSE;\n"
"}"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:215
msgid ""
"The call to <code>gst_element_set_state</code> stops the playback of the "
"pipeline and <code>g_object_unref</code> unreferences the pipeline, "
"destroying it and freeing its memory."
msgstr ""
"Η κλήση σε <code>gst_element_set_state</code> σταματά την αναπαραγωγή της "
"διοχέτευσης και ο <code>g_object_unref</code> σταματά την αναφορά στη "
"διοχέτευση, καταστρέφοντας την και ελευθερώνοντας τη μνήμη της."

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:219 C/guitar-tuner.py.page:208
msgid "Define the tones"
msgstr "Ορισμός των τόνων"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:220
msgid ""
"We want to play the correct sound when the user clicks a button. First of "
"all, we need to know the frequencies for the six guitar strings, which are "
"defined (at the top of <file>main.c</file>) as follows:"
msgstr ""
"Θέλουμε να παίζουμε το σωστό ήχο όταν ο χρήστης πατά ένα κουμπί. Πρώτα από "
"όλα, θέλουμε να ξέρουμε τις συχνότητες για τις έξι χορδές της κιθάρας, οι "
"οποίες ορίζονται (στην αρχή του <file>main.c</file>) ως ακολούθως:"

#. (itstool) path: section/code
#: C/guitar-tuner.c.page:221
#, no-wrap
msgid ""
"\n"
"/* Frequencies of the strings */\n"
"#define NOTE_E 329.63\n"
"#define NOTE_A 440\n"
"#define NOTE_D 587.33\n"
"#define NOTE_G 783.99\n"
"#define NOTE_B 987.77\n"
"#define NOTE_e 1318.5"
msgstr ""
"\n"
"/* Συχνότητες των γραμματοσειρών */\n"
"#define NOTE_E 329.63\n"
"#define NOTE_A 440\n"
"#define NOTE_D 587.33\n"
"#define NOTE_G 783.99\n"
"#define NOTE_B 987.77\n"
"#define NOTE_e 1318.5"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:229 C/guitar-tuner.py.page:222
msgid ""
"Now to flesh out the signal handler that we defined earlier, "
"<code>on_button_clicked</code>. We could have connected every button to a "
"different signal handler, but that would lead to a lot of code duplication. "
"Instead, we can use the label of the button to figure out which button was "
"clicked:"
msgstr ""
"Για να δούμε τον χειριστή σημάτων που ορίσαμε πριν, <code>on_button_clicked</"
"code>. Θα μπορούσαμε να είχαμε συνδέσει όλα τα κουμπιά σε διαφορετικό "
"χειριστή σημάτων, αλλά αυτό θα οδηγούσε σε πολλές επαναλήψεις του κώδικα. "
"Αντί αυτού, μπορούμε να χρησιμοποιήσουμε τις ετικέτες στα κουμπιά για να "
"δούμε ποιο πατήθηκε:"

#. (itstool) path: section/code
#: C/guitar-tuner.c.page:230
#, no-wrap
msgid ""
"\n"
"/* Callback for the buttons */\n"
"void on_button_clicked (GtkButton* button,\n"
"                        gpointer user_data)\n"
"{\n"
"\tconst gchar* text = gtk_button_get_label (button);\n"
"\n"
"\tif (g_str_equal (text, _(\"E\")))\n"
"\t    play_sound (NOTE_E);\n"
"\telse if (g_str_equal (text, _(\"A\")))\n"
"\t    play_sound (NOTE_A);\n"
"\telse if (g_str_equal (text, _(\"G\")))\n"
"\t    play_sound (NOTE_G);\n"
"\telse if (g_str_equal (text, _(\"D\")))\n"
"\t    play_sound (NOTE_D);\n"
"\telse if (g_str_equal (text, _(\"B\")))\n"
"\t    play_sound (NOTE_B);\n"
"\telse if (g_str_equal (text, _(\"e\")))\n"
"\t    play_sound (NOTE_e);\n"
"}\n"
msgstr ""
"\n"
"/* Επανάκληση των κουμπιών */\n"
"void on_button_clicked (GtkButton* button,\n"
"                        gpointer user_data)\n"
"{\n"
"\tconst gchar* text = gtk_button_get_label (button);\n"
"\n"
"\tif (g_str_equal (text, _(\"E\")))\n"
"\t    play_sound (NOTE_E);\n"
"\telse if (g_str_equal (text, _(\"A\")))\n"
"\t    play_sound (NOTE_A);\n"
"\telse if (g_str_equal (text, _(\"G\")))\n"
"\t    play_sound (NOTE_G);\n"
"\telse if (g_str_equal (text, _(\"D\")))\n"
"\t    play_sound (NOTE_D);\n"
"\telse if (g_str_equal (text, _(\"B\")))\n"
"\t    play_sound (NOTE_B);\n"
"\telse if (g_str_equal (text, _(\"e\")))\n"
"\t    play_sound (NOTE_e);\n"
"}\n"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:251
msgid ""
"A pointer to the <code>GtkButton</code> that was clicked is passed as an "
"argument (<code>button</code>) to <code>on_button_clicked</code>. We can get "
"the text of that button using <code>gtk_button_get_label</code>."
msgstr ""
"Ο δείκτης στο <code>Gtk.Button</code> που πατήθηκε περνά ως όρισμα "
"(<code>button</code>) στο <code>on_button_clicked</code>. Μπορούμε να "
"πάρουμε το κείμενο αυτού του κουμπιού χρησιμοποιώντας "
"<code>gtk_button_get_label</code>."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:252
msgid ""
"The text is then compared to the notes that we have using <code>g_str_equal</"
"code>, and <code>play_sound</code> is called with the frequency appropriate "
"for that note. This plays the tone; we have a working guitar tuner!"
msgstr ""
"Το κείμενο έπειτα συγκρίνεται με τις νότες που έχουμε χρησιμοποιήσει "
"<code>g_str_equal</code> και <code>play_sound</code> καλείται με την "
"κατάλληλη συχνότητα για αυτήν την νότα. Αυτό παίζει τον τόνο· ο συντονιστής "
"κιθάρας είναι έτοιμος!"

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:256 C/guitar-tuner.cpp.page:255
#: C/guitar-tuner.vala.page:253 C/image-viewer.c.page:222
#: C/image-viewer.cpp.page:210 C/image-viewer.vala.page:280
#: C/photo-wall.c.page:392
msgid "Build and run the application"
msgstr "Κατασκευή και εκτέλεση της εφαρμογής"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:257 C/guitar-tuner.vala.page:254
#: C/image-viewer.c.page:223 C/image-viewer.cpp.page:211
#: C/image-viewer.vala.page:281
msgid ""
"All of the code should now be ready to go. Click <guiseq><gui>Build</"
"gui><gui>Build Project</gui></guiseq> to build everything again, and then "
"<guiseq><gui>Run</gui><gui>Execute</gui></guiseq> to start the application."
msgstr ""
"Όλος ο κώδικας πρέπει να είναι έτοιμος τώρα. Κλικ <guiseq><gui>κατασκευή</"
"gui><gui>κατασκευή έργου</gui></guiseq> για ανακατασκευή των πάντων και "
"έπειτα <guiseq><gui>τρέξιμο</gui><gui>εκτέλεση</gui></guiseq> για έναρξη της "
"εφαρμογής."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:258 C/guitar-tuner.cpp.page:257
#: C/guitar-tuner.vala.page:255
msgid ""
"If you haven't already done so, choose the <file>Debug/src/guitar-tuner</"
"file> application in the dialog that appears. Finally, hit <gui>Run</gui> "
"and enjoy!"
msgstr ""
"Εάν δεν το έχετε ήδη κάνει, επιλέξτε την εφαρμογή <file>Debug/src/guitar-"
"tuner</file> στον διάλογο που εμφανίζεται. Τελικά, πατήστε <gui>τρέξιμο</"
"gui> και απολαύστε!"

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:262 C/guitar-tuner.cpp.page:261
#: C/guitar-tuner.js.page:242 C/guitar-tuner.py.page:240
#: C/guitar-tuner.vala.page:259 C/image-viewer.c.page:228
#: C/image-viewer.cpp.page:216 C/image-viewer.js.page:316
#: C/image-viewer.py.page:230 C/image-viewer.vala.page:288
#: C/magic-mirror.vala.page:150 C/photo-wall.c.page:400
#: C/record-collection.js.page:297
msgid "Reference Implementation"
msgstr "Υλοποίηση αναφοράς"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:263
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"guitar-tuner/guitar-tuner.c\">reference code</link>."
msgstr ""
"Αν αντιμετωπίσετε προβλήματα με το μάθημα, συγκρίνετε τον κώδικά σας με "
"αυτόν τον <link href=\"guitar-tuner/guitar-tuner.c\">κώδικα αναφοράς</link>."

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:267 C/guitar-tuner.cpp.page:274
#: C/guitar-tuner.py.page:245 C/guitar-tuner.vala.page:270
#: C/image-viewer.c.page:233 C/image-viewer.cpp.page:221
#: C/image-viewer.js.page:321 C/image-viewer.py.page:235
#: C/image-viewer.vala.page:293
msgid "Next steps"
msgstr "Επόμενα βήματα"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:268 C/guitar-tuner.cpp.page:275
#: C/guitar-tuner.py.page:246 C/guitar-tuner.vala.page:271
#: C/image-viewer.c.page:234 C/image-viewer.cpp.page:222
#: C/image-viewer.js.page:322 C/image-viewer.py.page:236
#: C/image-viewer.vala.page:294
msgid "Here are some ideas for how you can extend this simple demonstration:"
msgstr ""
"Εδώ είναι κάποιες ιδέες για το πώς μπορείτε να επεκτείνετε αυτή την απλή "
"παρουσίαση:"

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:271 C/guitar-tuner.cpp.page:278
#: C/guitar-tuner.py.page:249 C/guitar-tuner.vala.page:274
msgid "Have the program automatically cycle through the notes."
msgstr "Βάλτε το πρόγραμμα να περνάει αυτόματα μέσα από τις νότες."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:274 C/guitar-tuner.cpp.page:281
#: C/guitar-tuner.py.page:252 C/guitar-tuner.vala.page:277
msgid "Make the program play recordings of real guitar strings being plucked."
msgstr ""
"Κάντε το πρόγραμμα να αναπαράγει ηχογραφήσεις από αληθινές χορδές κιθάρας "
"που έχουν εισαχθεί."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:275 C/guitar-tuner.cpp.page:282
#: C/guitar-tuner.py.page:253 C/guitar-tuner.vala.page:278
msgid ""
"To do this, you would need to set up a more complicated GStreamer pipeline "
"which allows you to load and play back music files. You'll have to choose "
"<link href=\"http://gstreamer.freedesktop.org/documentation/plugins.html"
"\">decoder and demuxer</link> GStreamer elements based on the file format of "
"your recorded sounds — MP3s use different elements to Ogg Vorbis files, for "
"example."
msgstr ""
"Για να το κάνετε αυτό, πρέπει να ρυθμίσετε μια πιο περίπλοκη διοχέτευση "
"GStreamer που θα σας επιτρέπει να φορτώνετε και να αναπαράγετε αρχεία ήχου. "
"Θα πρέπει να διαλέξετε τα στοιχεία GStreamer <link href=\"http://gstreamer."
"freedesktop.org/documentation/plugins.html\">decoder και demuxer</link> με "
"βάση τον τύπο του αρχείου των ηχογραφημένων ήχων — για παράδειγμα το MP3 "
"χρησιμοποιεί διαφορετικά στοιχεία από το Ogg Vorbis."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:276 C/guitar-tuner.cpp.page:283
#: C/guitar-tuner.py.page:254 C/guitar-tuner.vala.page:279
msgid ""
"You might need to connect the elements in more complicated ways too. This "
"could involve using <link href=\"http://gstreamer.freedesktop.org/data/doc/"
"gstreamer/head/manual/html/chapter-intro-basics.html\">GStreamer concepts</"
"link> that we didn't cover in this tutorial, such as <link href=\"http://"
"gstreamer.freedesktop.org/data/doc/gstreamer/head/manual/html/section-intro-"
"basics-pads.html\">pads</link>. You may also find the <cmd>gst-inspect</cmd> "
"command useful."
msgstr ""
"Ίσως χρειαστεί να συνδέσετε τα στοιχεία με πιο περίπλοκους τρόπους. Αυτό "
"μπορεί να συμπεριλαμβάνει τη χρήση <link href=\"http://gstreamer.freedesktop."
"org/data/doc/gstreamer/head/manual/html/chapter-intro-basics.html\">Εννοιών "
"GStreamer</link> που δεν καλύπτουμε σε αυτόν τον οδηγό, όπως και <link href="
"\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/manual/html/"
"section-intro-basics-pads.html\">pad</link>. Ίσως βρείτε χρήσιμη και την "
"εντολή <cmd>gst-inspect</cmd>."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:279 C/guitar-tuner.cpp.page:286
#: C/guitar-tuner.py.page:257 C/guitar-tuner.vala.page:282
msgid "Automatically analyze notes that the user plays."
msgstr "Αυτόματη ανάλυση νότων που παίζει ο χρήστης."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:280 C/guitar-tuner.cpp.page:287
#: C/guitar-tuner.py.page:258 C/guitar-tuner.vala.page:283
msgid ""
"You could connect a microphone and record sounds from it using an <link href="
"\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-good-"
"plugins/html/gst-plugins-good-plugins-autoaudiosrc.html\">input source</"
"link>. Perhaps some form of <link href=\"http://gstreamer.freedesktop.org/"
"data/doc/gstreamer/head/gst-plugins-good-plugins/html/gst-plugins-good-"
"plugins-plugin-spectrum.html\">spectrum analysis</link> would allow you to "
"figure out what notes are being played?"
msgstr ""
"Μπορείτε να συνδέσετε μικρόφωνο και να ηχογραφήσετε από αυτό χρησιμοποιώντας "
"την <link href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/"
"gst-plugins-good-plugins/html/gst-plugins-good-plugins-autoaudiosrc.html"
"\">πηγή εισόδου</link>. Ίσως κάποια μορφή της <link href=\"http://gstreamer."
"freedesktop.org/data/doc/gstreamer/head/gst-plugins-good-plugins/html/gst-"
"plugins-good-plugins-plugin-spectrum.html\">ανάλυσης φάσματος</link> θα σας "
"βοηθούσε να καταλάβετε ποια νότα παίζει;"

#. (itstool) path: info/desc
#: C/guitar-tuner.cpp.page:9
msgid ""
"Use GTKmm and GStreamermm to build a simple guitar tuner application for "
"GNOME. Shows off how to use the interface designer."
msgstr ""
"Χρησιμοποιήστε Gtk+ και GStreamer για να κατασκευάσετε μια απλή εφαρμογή "
"συντονιστή κιθάρας για το GNOME. Αναδεικνύοντας τη χρήση του σχεδιαστή "
"διεπαφών."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:39
msgid "Basic knowledge of the C++ programming language"
msgstr "Βασική γνώση της γλώσσας προγραμματισμού C++"

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:53
msgid ""
"Choose <gui>GTKmm (Simple)</gui> from the <gui>C++</gui> tab, click "
"<gui>Forward</gui>, and fill out your details on the next few pages. Use "
"<file>guitar-tuner</file> as project name and directory."
msgstr ""
"Επιλέξτε <gui>GTKmm (απλό)</gui> από την καρτέλα <gui>C++</gui>, κλικ "
"<gui>μπροστά</gui> και συμπληρώστε τις λεπτομέρειές σας στις επόμενες λίγες "
"σελίδες. Χρησιμοποιήστε ως όνομα του έργου και του καταλόγου το <file>guitar-"
"tuner</file>."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:56
msgid ""
"Make sure that <gui>Configure external packages</gui> is selected. On the "
"next page, select <em>gstreamermm-0.10</em> from the list to include the "
"GStreamermm library in your project."
msgstr ""
"Βεβαιωθείτε ότι το <gui>ρύθμιση εξωτερικών πακέτων</gui> επιλέχτηκε. Στην "
"επόμενη σελίδα, επιλέξτε <em>gstreamer-0.10</em> από τη λίστα για "
"συμπερίληψη της βιβλιοθήκης GStreamermm στο έργο σας."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:60
msgid ""
"Click <gui>Finished</gui> and the project will be created for you. Open "
"<file>src/main.cc</file> from the <gui>Project</gui> or <gui>File</gui> "
"tabs. You should see some code which starts with the lines:"
msgstr ""
"Πατήστε <gui>τέλος</gui> και το έργο θα δημιουργηθεί για σας. Ανοίξτε "
"<file>src/main.cc</file> από τις καρτέλες <gui>έργο</gui> ή <gui>αρχείο</"
"gui>. Θα πρέπει να δείτε κάποιο κώδικα που ξεκινάει με τις γραμμές:"

#. (itstool) path: item/code
#: C/guitar-tuner.cpp.page:61
#, no-wrap
msgid ""
"\n"
"#include &lt;gtkmm.h&gt;\n"
"#include &lt;iostream&gt;"
msgstr ""
"\n"
"#include &lt;gtkmm.h&gt;\n"
"#include &lt;iostream&gt;"

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:70 C/image-viewer.cpp.page:67
msgid ""
"This is a very basic C++ code setting up GTKmm. More details are given "
"below; skip this list if you understand the basics:"
msgstr ""
"Αυτός είναι ένας πολύ βασικός κώδικας C++ εγκατάστασης GTKmm. Περισσότερες "
"λεπτομέρειες δίνονται παρακάτω· προσπεράστε αυτή τη λίστα αν καταλαβαίνετε "
"τα βασικά:"

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:74
msgid ""
"The three <code>#include</code> lines at the top include the <code>config</"
"code> (useful autoconf build defines), <code>gtkmm</code> (user interface) "
"and <code>iostream</code> (STL). Functions from these libraries are used in "
"the rest of the code."
msgstr ""
"Οι τρεις γραμμές <code>#include</code> στην κορυφή περιλαμβάνουν τον "
"<code>config</code> (ορίζει χρήσιμη κατασκευή του autoconf), <code>gtkmm</"
"code> (διεπαφή χρήστη) και <code>iostream</code> (STL). Συναρτήσεις από "
"αυτές τις βιβλιοθήκες χρησιμοποιούνται στον υπόλοιπο κώδικα."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:77
msgid ""
"The <code>main</code> function creates a new window by opening a GtkBuilder "
"file (<file>src/guitar-tuner.ui</file>, defined a few lines above) and then "
"displaying it in a window. The GtkBuilder file contains a description of a "
"user interface and all of its elements. You can use Anjuta's editor to "
"design GtkBuilder user interfaces."
msgstr ""
"Η συνάρτηση <code>Main</code> δημιουργεί ένα νέο παράθυρο ανοίγοντας ένα "
"αρχείο GtkBuilder (<file>src/guitar-tuner.ui</file>, που ορίζεται λίγες "
"γραμμές παραπάνω), και έπειτα εμφανίζοντας το σε παράθυρο. Το αρχείο "
"GtkBuilder περιέχει μια περιγραφή μιας διεπαφής χρήστη και όλων των "
"στοιχείων του. Μπορείτε να χρησιμοποιήσετε τον επεξεργαστή του Anjuta για "
"σχεδίαση διεπαφών χρήστη GtkBuilder."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:80
msgid ""
"Afterwards it calls a few functions which set up and then run the "
"application. The <code>kit.run</code> function starts the GTKmm main loop, "
"which runs the user interface and starts listening for events (like clicks "
"and key presses)."
msgstr ""
"Κατόπιν καλεί λίγες συναρτήσεις που ρυθμίζουν και έπειτα εκτελούν την "
"εφαρμογή. Η συνάρτηση <code>kit.run</code> ξεκινά τον κύριο βρόχο του GTK, "
"που εκτελεί τη διεπαφή χρήστη και ξεκινά την απάντηση για συμβάντα (όπως "
"κλικ και πατήματα κουμπιών)."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:105
msgid ""
"While the button is still selected, change the <gui>Label</gui> property in "
"the <gui>Widgets</gui> tab to <gui>E</gui>. This will be the low E string. "
"Also change the <gui>Name</gui> property to <gui>button_E</gui>. This is the "
"name we will refer to the widget later in code."
msgstr ""
"Έχοντας το κουμπί ακόμα επιλεγμένο, αλλάξτε την ιδιότητα <gui>ετικέτα</gui> "
"στην καρτέλα <gui>γραφικά στοιχεία</gui> σε <gui>E</gui>. Αυτή θα είναι η "
"χαμηλή χορδή Ε. Επίσης αλλάξτε την ιδιότητα <gui>όνομα</gui> σε "
"<gui>button_E</gui>. Με αυτό το όνομα θα αναφερθούμε στο γραφικό στοιχείο "
"αργότερα στον κώδικα."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:109
msgid ""
"Repeat the above steps for the other buttons, adding the next 5 strings with "
"the labels <em>A</em>, <em>D</em>, <em>G</em>, <em>B</em>, and <em>e</em> "
"and the names <em>button_A</em>, etc."
msgstr ""
"Επαναλάβετε τα παραπάνω βήματα για τα υπόλοιπα κουμπιά, προσθέστε τις "
"επόμενες 5 χορδές με τις ετικέτες <em>A</em>, <em>D</em>, <em>G</em>, <em>B</"
"em>, και <em>e</em> και τα ονόματα <em>button_A</em>, κλπ."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:112
msgid ""
"Save the UI design (by clicking <guiseq><gui>File</gui><gui>Save</gui></"
"guiseq>) and close the file."
msgstr ""
"Αποθηκεύστε τη σχεδίαση UI (πατώντας <guiseq><gui>αρχείο</"
"gui><gui>αποθήκευση</gui></guiseq>) και κλείστε το αρχείο."

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:119
msgid ""
"GStreamer is GNOME's multimedia framework — you can use it for playing, "
"recording, and processing video, audio, webcam streams and the like. Here, "
"we'll be using it to produce single-frequency tones. GStreamermm is the C++ "
"binding to GStreamer which we will use here."
msgstr ""
"Το Gtreamer είναι ο σκελετός πολυμέσων του GNOME — μπορείτε να το "
"χρησιμοποιήσετε για να αναπαραγωγή ηχογράφηση και επεξεργασία βίντεο, ήχου, "
"ροών ιστοκάμερας και τα παρόμοια. Εδώ, θα το χρησιμοποιήσουμε για να "
"παράξουμε μονές συχνότητες τόνων. Το GStreamermm είναι ένας σύνδεσμος C++ "
"στο GStreamer που θα χρησιμοποιήσουμε εδώ."

#. (itstool) path: section/title
#: C/guitar-tuner.cpp.page:129
msgid "Using GStreamermm"
msgstr "Χρήση GStreamermm"

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:130
msgid ""
"To use GStreamermm, it has to be initialised. We do that by adding the "
"following line of code next to the <code>Gtk::Main kit(argc, argv);</code> "
"line in <file>main.cc</file>:"
msgstr ""
"Για να χρησιμοποιήσετε το GStreamermm, πρέπει να αρχικοποιηθεί. Το κάνουμε "
"αυτό προσθέτοντας την παρακάτω γραμμή του κώδικα δίπλα στη γραμμή <code>Gtk::"
"Main kit(argc, argv);</code> στο <file>main.cc</file>:"

#. (itstool) path: section/code
#: C/guitar-tuner.cpp.page:132
#, no-wrap
msgid "\tGst::init (argc, argv);"
msgstr "\tGst::init (argc, argv);"

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:133
msgid ""
"While we are on it, also make sure that the <file>gstreamermm.h</file> is "
"included in <file>main.cc</file> properly."
msgstr ""
"Ενώ είμαστε σε αυτό, βεβαιωθείτε επίσης ότι το <file>gstreamermm.h</file> "
"περιέχεται κατάλληλα στο <file>main.cc</file>."

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:137
msgid ""
"To simplify the handling of the pipeline we will define a helper class "
"<code>Sound</code>. We do that in <file>main.cc</file> in order to keep this "
"example simple, whereas you might usually want to use a separate file:"
msgstr ""
"Για απλοποίηση του χειρισμού της διοχέτευσης θα ορίσουμε μια βοηθητική κλάση "
"<code>Sound</code>. Το κάνουμε στο <file>main.cc</file> για να κρατήσουμε "
"αυτό το παράδειγμα απλό, ενώ ίσως συνήθως να θέλατε να το χρησιμοποιήσετε σε "
"ξεχωριστό αρχείο:"

#. (itstool) path: section/code
#: C/guitar-tuner.cpp.page:140
#, no-wrap
msgid ""
"\n"
"class Sound\n"
"{\n"
"\tpublic:\n"
"\t\tSound();\n"
"\n"
"\t\tvoid start_playing(double frequency);\n"
"\t\tbool stop_playing();\n"
"\n"
"\tprivate:\n"
"\t\tGlib::RefPtr&lt;Gst::Pipeline&gt; m_pipeline;\n"
"\t\tGlib::RefPtr&lt;Gst::Element&gt; m_source;\n"
"\t\tGlib::RefPtr&lt;Gst::Element&gt; m_sink;\n"
"};\n"
"\n"
"Sound::Sound()\n"
"{\n"
"\tm_pipeline = Gst::Pipeline::create(\"note\");\n"
"\tm_source = Gst::ElementFactory::create_element(\"audiotestsrc\",\n"
"\t                                               \"source\");\n"
"\tm_sink = Gst::ElementFactory::create_element(\"autoaudiosink\",\n"
"\t                                             \"output\");\n"
"\tm_pipeline-&gt;add(m_source);\n"
"\tm_pipeline-&gt;add(m_sink);\n"
"\tm_source-&gt;link(m_sink);\n"
"}\n"
"\n"
"void Sound::start_playing (double frequency)\n"
"{\n"
"\tm_source-&gt;set_property(\"freq\", frequency);\n"
"\tm_pipeline-&gt;set_state(Gst::STATE_PLAYING);\n"
"\n"
"\t/* stop it after 200ms */\n"
"\tGlib::signal_timeout().connect(sigc::mem_fun(*this, &amp;Sound::stop_playing),\n"
"\t                               200);\n"
"}\n"
"\n"
"bool Sound::stop_playing()\n"
"{\n"
"\tm_pipeline-&gt;set_state(Gst::STATE_NULL);\n"
"\treturn false;\n"
"}\n"
msgstr ""
"\n"
"class Sound\n"
"{\n"
"\tpublic:\n"
"\t\tSound();\n"
"\n"
"\t\tvoid start_playing(double frequency);\n"
"\t\tbool stop_playing();\n"
"\n"
"\tprivate:\n"
"\t\tGlib::RefPtr&lt;Gst::Pipeline&gt; m_pipeline;\n"
"\t\tGlib::RefPtr&lt;Gst::Element&gt; m_source;\n"
"\t\tGlib::RefPtr&lt;Gst::Element&gt; m_sink;\n"
"};\n"
"\n"
"Sound::Sound()\n"
"{\n"
"\tm_pipeline = Gst::Pipeline::create(\"note\");\n"
"\tm_source = Gst::ElementFactory::create_element(\"audiotestsrc\",\n"
"\t                                               \"source\");\n"
"\tm_sink = Gst::ElementFactory::create_element(\"autoaudiosink\",\n"
"\t                                             \"output\");\n"
"\tm_pipeline-&gt;add(m_source);\n"
"\tm_pipeline-&gt;add(m_sink);\n"
"\tm_source-&gt;link(m_sink);\n"
"}\n"
"\n"
"void Sound::start_playing (double frequency)\n"
"{\n"
"\tm_source-&gt;set_property(\"freq\", frequency);\n"
"\tm_pipeline-&gt;set_state(Gst::STATE_PLAYING);\n"
"\n"
"\t/* stop it after 200ms */\n"
"\tGlib::signal_timeout().connect(sigc::mem_fun(*this, &amp;Sound::stop_playing),\n"
"\t                               200);\n"
"}\n"
"\n"
"bool Sound::stop_playing()\n"
"{\n"
"\tm_pipeline-&gt;set_state(Gst::STATE_NULL);\n"
"\treturn false;\n"
"}\n"

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:184
msgid "The code has the following purpose:"
msgstr "Ο κώδικας έχει τον παρακάτω σκοπό:"

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:187
msgid ""
"In the constructor, source and sink GStreamer elements (<code>Gst::Element</"
"code>) are created, and a pipeline element (which will be used as a "
"container for the other two elements). The pipeline is given the name \"note"
"\"; the source is named \"source\" and is set to the <code>audiotestsrc</"
"code> source; and the sink is named \"output\" and set to the "
"<code>autoaudiosink</code> sink (default sound card output). After the "
"elements have been added to the pipeline and linked together, the pipeline "
"is ready to run."
msgstr ""
"Στον κατασκευαστή, τα στοιχεία πηγής και εξόδου του GStreamer (<code>Gst::"
"Element</code>)δημιουργούνται και ένα στοιχείο διοχέτευσης (το οποίο θα "
"χρησιμοποιηθεί ως περιέκτης για τα δυο άλλα στοιχεία). Δίνουμε το όνομα "
"\"note\" στη διοχέτευση· ονομάζουμε την πηγή \"source\" και ρυθμίζεται στην "
"πηγή <code>audiotestsrc</code>· και ονομάζουμε την έξοδο \"output\" και την "
"ρυθμίζετε στην έξοδο <code>autoaudiosink</code> (προεπιλεγμένη έξοδος κάρτας "
"ήχου). Αφού τα στοιχεία προστεθούν στη διοχέτευση και συνδεθούν μαζί, η "
"σωλήνωση είναι έτοιμη να τρέξει."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:190
msgid ""
"<code>start_playing</code> sets the source element to play a particular "
"frequency and then starts the pipeline so the sound actually starts playing. "
"As we don't want to have the annoying sound for ages, a timeout is set up to "
"stop the pipeline after 200 ms by calling <code>stop_playing</code>."
msgstr ""
"Ο <code>start_playing</code> ορίζει το στοιχείο πηγής να αναπαράγει μια "
"συγκεκριμένη συχνότητα και έπειτα ξεκινά τη διοχέτευση ώστε ο ήχος στην "
"πραγματικότητα να ξεκινήσει αναπαραγωγή. Καθώς δεν θέλουμε να έχουμε τον "
"ενοχλητικό ήχο για πολύ, ορίζεται μια λήξη χρόνου για να σταματήσει τη "
"διοχέτευση μετά από 200 ms καλώντας <code>stop_playing</code>."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:195
msgid ""
"In <code>stop_playing</code> which is called when the timeout has elapsed, "
"the pipeline is stopped and as such there isn't any sound output anymore. As "
"GStreamermm uses reference counting through the <code>Glib::RefPtr</code> "
"object, the memory is automatically freed once the <code>Sound</code> class "
"is destroyed."
msgstr ""
"Στον <code>stop_playing</code> που καλείται όταν η λήξη χρόνου περάσει, η "
"διοχέτευση σταματά και έτσι δεν υπάρχει κανένας ήχος εξόδου πια. Καθώς το "
"GStreamermm χρησιμοποιεί μετρητή αναφοράς μέσα από το αντικείμενο "
"<code>Glib::RefPtr</code>, η μνήμη αυτόματα ελευθερώνεται μόλις η κλάση "
"<code>Sound</code> καταστραφεί."

#. (itstool) path: section/title
#: C/guitar-tuner.cpp.page:203
msgid "Connecting the signals"
msgstr "Σύνδεση σημάτων"

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:204
msgid ""
"We want to play the correct sound when the user clicks a button. That means "
"that we have to connect to the signal that is fired when the user clicks the "
"button. We also want to provide information to the called function which "
"tone to play. GTKmm makes that quite easy as we can easily bind information "
"with the <em>sigc</em> library."
msgstr ""
"Θέλουμε να παίξουμε τον σωστό ήχο, όταν ο χρήστης πατά ένα κουμπί. Αυτό "
"σημαίνει ότι πρέπει να συνδεθούμε στο σήμα που ξεκινά όταν ο χρήστης πατά το "
"κουμπί. Θέλουμε επίσης να δώσουμε πληροφορίες στην καλούμενη συνάρτηση ποιο "
"τόνο να παίξει. Το GTKmm το κάνει αρκετά απλό καθώς μπορούμε εύκολα να "
"συνδέσουμε πληροφορίες με τη βιβλιοθήκη <em>sigc</em>."

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:209
msgid ""
"The function that is called when the user clicks a button can be pretty "
"simple, as all the interesting stuff is done in the helper class now:"
msgstr ""
"Η συνάρτηση που καλείται όταν ο χρήστης πατά ένα κουμπί μπορεί να είναι "
"αρκετά απλή, καθώς όλο το ενδιαφέρον υλικό γίνεται τώρα στη βοηθητική κλάση:"

#. (itstool) path: section/code
#: C/guitar-tuner.cpp.page:211
#, no-wrap
msgid ""
"\n"
"static void\n"
"on_button_clicked(double frequency, Sound* sound)\n"
"{\n"
"\tsound-&gt;start_playing (frequency);\n"
"}\n"
msgstr ""
"\n"
"static void\n"
"on_button_clicked(double frequency, Sound* sound)\n"
"{\n"
"\tsound-&gt;start_playing (frequency);\n"
"}\n"

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:218
msgid ""
"It only calls the helper class we defined before to play the correct "
"frequencies. With some more clever code we would also have been able to "
"directly connect to the class without using the function but we will leave "
"that to use as an exercise."
msgstr ""
"Καλεί μόνο τη βοηθητική κλάση που ορίσαμε πριν να παίξει τις σωστές "
"συχνότητες. Με κάποια επιπλέον κώδικα θα μπορούσαμε επίσης να μπορέσουμε την "
"άμεση σύνδεση στην κλάση χωρίς χρήση της συνάρτησης, αλλά θα το αφήσουμε να "
"χρησιμοποιηθεί ως άσκηση."

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:222
msgid ""
"The code to set up the signals should be added to the <code>main()</code> "
"function just after the <code>builder-&gt;get_widget(\"main_window\", "
"main_win);</code> line:"
msgstr ""
"Ο κώδικας για ρύθμιση των σημάτων πρέπει να προστεθεί στη συνάρτηση "
"<code>main()</code> αμέσως μετά τη γραμμή <code>builder-&gt;"
"get_widget(\"main_window\", main_win);</code>:"

#. (itstool) path: section/code
#: C/guitar-tuner.cpp.page:224
#, no-wrap
msgid ""
"\n"
"Sound sound;\n"
"Gtk::Button* button;\n"
"\n"
"builder-&gt;get_widget(\"button_E\", button);\n"
"button-&gt;signal_clicked().connect (sigc::bind&lt;double, Sound*&gt;(sigc::ptr_fun(&amp;on_button_clicked),\n"
"                                              329.63, &amp;sound));\n"
msgstr ""
"\n"
"Sound sound;\n"
"Gtk::Button* button;\n"
"\n"
"builder-&gt;get_widget(\"button_E\", button);\n"
"button-&gt;signal_clicked().connect (sigc::bind&lt;double, Sound*&gt;(sigc::ptr_fun(&amp;on_button_clicked),\n"
"                                              329.63, &amp;sound));\n"

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:234
msgid ""
"At first we create an instance of our helper class that we want to use now "
"and declare a variable for the button we want to connect to."
msgstr ""
"Πρώτα δημιουργούμε ένα στιγμιότυπο της βοηθητικής μας κλάσης που θέλουμε να "
"χρησιμοποιήσουμε τώρα και δηλώνουμε μια μεταβλητή για το κουμπί στο οποίο "
"θέλουμε να συνδεθούμε."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:238
msgid ""
"Next, we receive the button object from the user interface that was created "
"out of the user interface file. Remember that <em>button_E</em> is the name "
"we gave to the first button."
msgstr ""
"Κατόπιν, δεχόμαστε το αντικείμενο κουμπιού από τη διεπαφή χρήστη που "
"δημιουργήθηκε από το αρχείο διεπαφής χρήστη. Να θυμάστε ότι <em>button_E</"
"em> είναι το όνομα που δώσαμε στο πρώτο κουμπί."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:242
msgid ""
"Finally we connect the <em>clicked</em> signal. This isn't fully "
"straightforward because this is done in a fully type-safe way and we "
"actually want to pass the frequency and our helper class to the signal "
"handler. <code>sigc::ptr_fun(&amp;on_button_clicked)</code> creates a "
"<em>slot</em> for the <code>on_button_clicked</code> method we defined "
"above. With <code>sigc::bind</code> we are able to pass additional arguments "
"to the slot and in this case we pass the frequency (as double) and our "
"helper class."
msgstr ""
"Τελικά συνδέουμε το σήμα <em>πατημένο</em>. Αυτό δεν είναι πλήρως κατανοητό "
"επειδή αυτό γίνεται με έναν πλήρη τρόπο ασφαλούς τύπου και στην "
"πραγματικότητα θέλουμε να περάσουμε τη συχνότητα και τη βοηθητική μας κλάση "
"στο χειριστή σήματος. Ο <code>sigc::ptr_fun(&amp;on_button_clicked)</code> "
"δημιουργεί μια <em>υποδοχή</em> για τη μέθοδο <code>on_button_clicked</code> "
"που ορίσαμε παραπάνω. Με τον <code>sigc::bind</code> μπορούμε να περάσουμε "
"πρόσθετα ορίσματα στην υποδοχή και σε αυτήν την περίπτωση περνάμε τη "
"συχνότητα (ως διπλή) και τη βοηθητική μας κλάση."

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:249
msgid ""
"Now that we have set up the <em>E</em> button we also need to connect the "
"other buttons according to their frequencies: 440 for A, 587.33 for D, "
"783.99 for G, 987.77 for B and 1318.5 for the high E. This is done in the "
"same way, just passing a different frequency to the handler."
msgstr ""
"Τώρα που ρυθμίσαμε το κουμπί <em>E</em> θα χρειαστούμε επίσης να συνδέσουμε "
"τα άλλα κουμπιά σύμφωνα με τις συχνότητές τους: 440 για A, 587.33 για D, "
"783.99 για G, 987.77 για B και 1318.5 για την υψηλή Ε. Αυτό γίνεται με τον "
"ίδιο τρόπο, απλά περνώντας μια διαφορετική συχνότητα στον χειριστή."

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:256
msgid ""
"All of the code should now be ready to go. Click <guiseq><gui>Build</"
"gui><gui>Build Project</gui></guiseq> to build everything again, and then "
"<guiseq><gui>Run</gui><gui>Run</gui></guiseq> to start the application."
msgstr ""
"Όλος ο κώδικας πρέπει να είναι έτοιμος τώρα. Κλικ <guiseq><gui>κατασκευή</"
"gui><gui>κατασκευή έργου</gui></guiseq> για ανακατασκευή των πάντων και "
"έπειτα <guiseq><gui>τρέξιμο</gui><gui>τρέξιμο</gui></guiseq> για έναρξη της "
"εφαρμογής."

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:262
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"guitar-tuner/guitar-tuner.cc\">reference code</link>."
msgstr ""
"Αν αντιμετωπίσετε προβλήματα με το μάθημα, συγκρίνετε τον κώδικά σας με "
"αυτόν τον <link href=\"guitar-tuner/guitar-tuner.cc\">κώδικα αναφοράς</link>."

#. (itstool) path: section/title
#: C/guitar-tuner.cpp.page:266
msgid "Further Reading"
msgstr "Περαιτέρω ανάγνωση"

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:267
msgid ""
"Many of the things shown above are explained in detail in the <link href="
"\"http://library.gnome.org/devel/gtkmm-tutorial/stable/\">GTKmm book</link> "
"which also covers a lot more key concept for using the full power of GTKmm. "
"You might also be interested in the <link href=\"http://library.gnome.org/"
"devel/gstreamermm/\">GStreamermm reference documentation</link>."
msgstr ""
"Πολλά από τα πράγματα που εμφανίστηκαν παραπάνω εξηγούνται με λεπτομέρεια "
"στο <link href=\"http://library.gnome.org/devel/gtkmm-tutorial/stable/"
"\">βιβλίο GTKmm</link> που επίσης καλύπτει πολύ περισσότερες βασικές έννοιες "
"χρήσης όλης της δύναμης του GTKmm. Ίσως επίσης ενδιαφέρεστε για την <link "
"href=\"http://library.gnome.org/devel/gstreamermm/\">τεκμηρίωση αναφοράς "
"GStreamermm</link>."

#. (itstool) path: info/title
#: C/guitar-tuner.js.page:7
msgctxt "text"
msgid "Guitar tuner (JavaScript)"
msgstr "Συντονιστής κιθάρας (JavaScript)"

#. (itstool) path: info/desc
#: C/guitar-tuner.js.page:17
msgid ""
"Use GTK+ and GStreamer to build a simple guitar tuner application for GNOME."
msgstr ""
"Χρησιμοποιήστε GTK+ και GStreamer για να κατασκευάσετε μια απλή εφαρμογή "
"ρυθμιστή κιθάρας για το GNOME."

#. (itstool) path: synopsis/p
#: C/guitar-tuner.js.page:23
msgid ""
"In this tutorial we'll construct a small application, Guitar Tuner, using "
"JavaScript and GTK+ and GStreamer. To do and run all the code examples "
"yourself, you need an editor to write code in, terminal and GNOME 3. or "
"higher installed into your computer."
msgstr ""
"Σε αυτό το μάθημα θα κατασκευάσουμε μια μικρή εφαρμογή, Guitar Tuner, "
"χρησιμοποιώντας JavaScript, GTK+ και GStreamer. Για να κάνετε και να τρέξετε "
"όλα τα παραδείγματα κώδικα οι ίδιοι, χρειαζόσαστε έναν επεξεργαστή για το "
"γράψιμο του κώδικα, τερματικό και GNOME 3 ή μεταγενέστερο εγκατεστημένο στον "
"υπολογιστή σας."

#. (itstool) path: item/p
#: C/guitar-tuner.js.page:25
msgid "<link xref=\"#gstreamer\">GStreamer pipelines</link>"
msgstr "<link xref=\"#gstreamer\">Διοχετεύσεις GStreamer</link>"

#. (itstool) path: item/p
#: C/guitar-tuner.js.page:26 C/weatherAppMain.js.page:23
msgid "<link xref=\"#script\">Script for running the application</link>"
msgstr "<link xref=\"#script\">Σενάριο για εκτέλεση της εφαρμογής</link>"

#. (itstool) path: item/p
#: C/guitar-tuner.js.page:27 C/weatherAppMain.js.page:24
msgid "<link xref=\"#imports\">Libraries to import</link>"
msgstr "<link xref=\"#imports\">Βιβλιοθήκες για εισαγωγή</link>"

#. (itstool) path: item/p
#: C/guitar-tuner.js.page:28 C/weatherAppMain.js.page:25
msgid ""
"<link xref=\"#mainwindow\">Creating the main window for the application</"
"link>"
msgstr ""
"<link xref=\"#mainwindow\">Δημιουργία του κύριου παραθύρου για την εφαρμογή</"
"link>"

#. (itstool) path: item/p
#: C/guitar-tuner.js.page:29
msgid "<link xref=\"#buttons\">Buttons for the tunes</link>"
msgstr "<link xref=\"#buttons\">Κουμπιά για τις μελωδίες</link>"

#. (itstool) path: item/p
#: C/guitar-tuner.js.page:30
msgid "<link xref=\"#playSound\">Making the sounds with GStreamer</link>"
msgstr "<link xref=\"#playSound\">Κάνοντας τους ήχους με GStreamer</link>"

#. (itstool) path: item/p
#: C/guitar-tuner.js.page:31
msgid "<link xref=\"#connecting\">Connecting buttons to playSound</link>"
msgstr "<link xref=\"#connecting\">Συνδέοντας κουμπιά στο playSound</link>"

#. (itstool) path: item/p
#: C/guitar-tuner.js.page:32
msgid "<link xref=\"#guitarjs\">The whole program</link>"
msgstr "<link xref=\"#guitarjs\">Ολόκληρο το προόγραμμα</link>"

#. (itstool) path: item/p
#: C/guitar-tuner.js.page:33
msgid "<link xref=\"#terminal\">Running the application form Terminal</link>"
msgstr "<link xref=\"#terminal\">Εκτέλεση της εφαρμογής από τερματικό</link>"

#. (itstool) path: page/p
#: C/guitar-tuner.js.page:36 C/weatherApp.js.page:40
msgid "After reading this tutorial, you should see this in your screen:"
msgstr ""
"Μετά την ανάγνωση αυτού του μαθήματος, θα πρέπει να δείτε αυτό στην οθόνη "
"σας:"

#. (itstool) path: section/title
#: C/guitar-tuner.js.page:48 C/hello-world.js.page:46
#: C/weatherAppMain.js.page:33
msgid "Script for running the application"
msgstr "Σενάριο για εκτέλεση της εφαρμογής"

#. (itstool) path: section/code
#: C/guitar-tuner.js.page:49 C/weatherAppMain.js.page:34
#, no-wrap
msgid ""
"\n"
"  #!/usr/bin/gjs"
msgstr ""
"\n"
"  #!/usr/bin/gjs"

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:51
msgid ""
"This line tells how to run the script. It needs to be the first line of the "
"code and it needs to be executable. To get the execution rights go to "
"terminal and run in right folder: chmod +x scriptname. Or you can use the "
"graphical filemanager. Just go to the right folder where your code is, right "
"click you code file, choose properties, click the permissions tab and check "
"the box for allow executing file as a program"
msgstr ""
"Αυτή η γραμμή λέει πώς θα εκτελεστεί το σενάριο. Πρέπει να είναι η πρώτη "
"γραμμή του κώδικα και να είναι εκτελέσιμη. Για λήψη των δικαιωμάτων "
"εκτέλεσης πηγαίνετε στον τερματικό και εκτελέστε στον σωστό φάκελο: chmod +x "
"όνομα σεναρίου. Ή μπορείτε να χρησιμοποιήσετε τον διαχειριστή αρχείου "
"γραφικών. Απλά πηγαίνετε στον σωστό φάκελο όπου είναι ο κώδικας σας δεξί "
"κλικ στο αρχείο του κώδικα σας, επιλέξτε ιδιότητες, κλικ στην καρτέλα "
"δικαιωμάτων και σημειώστε το πλαίσιο για να επιτραπεί η εκτέλεση του αρχείου "
"ως πρόγραμμα"

#. (itstool) path: section/code
#: C/guitar-tuner.js.page:56
#, no-wrap
msgid ""
"\n"
"var Gtk = imports.gi.Gtk;\n"
"var Gst = imports.gi.Gst;\n"
"\n"
"const Mainloop = imports.mainloop;"
msgstr ""
"\n"
"var Gtk = imports.gi.Gtk;\n"
"var Gst = imports.gi.Gst;\n"
"\n"
"const Mainloop = imports.mainloop;"

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:61
msgid ""
"In order to have a working program we need to import a few GObject "
"Introspection -libraries to our use. For working UI, we need Gtk and for "
"Gstreamer to work we need Gst. These are imported in the beginning so we "
"have them at use everywhere. Also in the beginning we import a construct "
"Mainloop to handle the timeout to be used with the tuning sounds."
msgstr ""
"Για να υπάρχει ένα λειτουργικό πρόγραμμα χρειάζεται να εισαχθούν λίγα "
"GObject αυτοελέγχου - βιβλιοθήκες για τη χρήση μας. Για λειτουργικό UI, "
"χρειάζεται Gtk και για Gstreamer χρειάζεται Gst. Αυτά εισάγονται στην αρχή "
"για να τα έχουμε για χρήση παντού. Επίσης στην αρχή εισάγουμε έναν κύριο "
"βρόχο κατασκευής για χειρισμό του χρόνου λήξης στη χρήση του με ήχους "
"μελωδίας."

#. (itstool) path: section/title
#: C/guitar-tuner.js.page:64 C/hello-world.c.page:49 C/hello-world.js.page:59
#: C/hello-world.py.page:52 C/hello-world.vala.page:44
#: C/weatherAppMain.js.page:49
msgid "Creating the main window for the application"
msgstr "Δημιουργία του κύριου παραθύρου για την εφαρμογή"

#. (itstool) path: section/code
#: C/guitar-tuner.js.page:65
#, no-wrap
msgid ""
"\n"
"Gtk.init(null, 0);\n"
"Gst.init(null, 0);\n"
"\n"
"var guitarwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL, border_width: 100});\n"
"guitarwindow.title = \"Guitar Tuner\";\n"
"guitarwindow.connect(\"destroy\", function(){Gtk.main_quit()});\n"
"\n"
"guitarwindow.show();\n"
"Gtk.main();"
msgstr ""
"\n"
"Gtk.init(null, 0);\n"
"Gst.init(null, 0);\n"
"\n"
"var guitarwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL, border_width: 100});\n"
"guitarwindow.title = \"Guitar Tuner\";\n"
"guitarwindow.connect(\"destroy\", function(){Gtk.main_quit()});\n"
"\n"
"guitarwindow.show();\n"
"Gtk.main();"

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:75
msgid ""
"Importing Gtk and Gst is not enough, we need to initialize them in order to "
"get them working. When Gtk and Gst are up and running we need to create the "
"window for the application. Later we are going to put all the buttons for "
"making sounds inside this window. In order to get the window showing, we "
"need to tell it to show and we need also to run the code with the Gtk.main()"
msgstr ""
"Η εισαγωγή των Gtk και Gst δεν είναι αρκετή, χρειάζεται η αρχικοποίησή τους "
"για να δουλέψουν. Όταν τα Gtk και Gst εκτελούνται χρειάζεται να "
"δημιουργήσουμε το παράθυρο για την εφαρμογή. Αργότερα πρόκειται να βάλουμε "
"όλα τα κουμπιά να παράγουν ήχους μέσα σε αυτό το παράθυρο. Για την εμφάνιση "
"του παραθύρου, χρειαζόμαστε να του πούμε να εμφανιστεί και χρειαζόμαστε "
"επίσης να τρέξει ο κώδικας με το Gtk.main()"

#. (itstool) path: section/title
#: C/guitar-tuner.js.page:78
msgid "Buttons for the tunes"
msgstr "Κουμπιά για τις μελωδίες"

#. (itstool) path: section/code
#: C/guitar-tuner.js.page:79
#, no-wrap
msgid ""
"\n"
"var guitar_box = new Gtk.ButtonBox ({orientation: Gtk.Orientation.VERTICAL, spacing: 10});\n"
"\n"
"var E = new Gtk.Button({label: \"E\"});\n"
"var A = new Gtk.Button({label: \"A\"});\n"
"var D = new Gtk.Button({label: \"D\"});\n"
"var G = new Gtk.Button({label: \"G\"});\n"
"var B = new Gtk.Button({label: \"B\"});\n"
"var e = new Gtk.Button({label: \"e\"});\n"
"\n"
"guitar_box.add(E);\n"
"guitar_box.add(A);\n"
"guitar_box.add(D);\n"
"guitar_box.add(G);\n"
"guitar_box.add(B);\n"
"guitar_box.add(e);\n"
"\n"
"guitarwindow.add(guitar_box);\n"
"\n"
"guitar_box.show_all();"
msgstr ""
"\n"
"var guitar_box = new Gtk.ButtonBox ({orientation: Gtk.Orientation.VERTICAL, spacing: 10});\n"
"\n"
"var E = new Gtk.Button({label: \"E\"});\n"
"var A = new Gtk.Button({label: \"A\"});\n"
"var D = new Gtk.Button({label: \"D\"});\n"
"var G = new Gtk.Button({label: \"G\"});\n"
"var B = new Gtk.Button({label: \"B\"});\n"
"var e = new Gtk.Button({label: \"e\"});\n"
"\n"
"guitar_box.add(E);\n"
"guitar_box.add(A);\n"
"guitar_box.add(D);\n"
"guitar_box.add(G);\n"
"guitar_box.add(B);\n"
"guitar_box.add(e);\n"
"\n"
"guitarwindow.add(guitar_box);\n"
"\n"
"guitar_box.show_all();"

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:99
msgid ""
"Because Gtk.Window can only contain a single widget, we need to create "
"something under it to be able to add all the necessary buttons inside it. In "
"this example we use Buttonbox. After creating the Buttonbox we create "
"buttons with necessary labels. After we have the buttons we need to add them "
"to the Buttonbox and the Buttonbox must be added to the Gtk.Window and "
"everything in the Buttonbox must be shown."
msgstr ""
"Επειδή το Gtk.Window μπορεί να περιέχει μόνο ένα γραφικό στοιχείο, "
"χρειάζεται να δημιουργηθεί κάτι από κάτω του για να μπορεί να προσθέσει όλα "
"τα απαραίτητα κουμπιά μέσα του. Σε αυτό το παράδειγμα χρησιμοποιούμε πλαίσιο "
"κουμπιού. Μετά τη δημιουργία του πλαισίου κουμπιού δημιουργούμε κουμπιά με "
"αναγκαίες ετικέτες. Αφού έχουμε τα κουμπιά πρέπει να τα προσθέσουμε στο "
"πλαίσιο κουμπιού και το πλαίσιο κουμπιού πρέπει να προστεθεί στο Gtk.Window "
"και όλα στο πλαίσιο κουμπιού πρέπει να εμφανίζονται."

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:100
msgid ""
"After this stage you should have a window appearing to your screen showing 6 "
"buttons. Right now the buttons don't do anything and we shall address that "
"issue later. Before we can connect the button signals to something we need "
"to code that something first."
msgstr ""
"Μετά από αυτό το στάδιο πρέπει να έχετε ένα εμφανιζόμενο παράθυρο στην οθόνη "
"σας που να δείχνει 6 κουμπιά. Τώρα τα κουμπιά δεν κάνουν τίποτα και θα "
"αντιμετωπίσουμε αυτό το θέμα αργότερα. Πριν να μπορέσουμε να συνδέσουμε τα "
"σήματα του κουμπιού με κάτι χρειάζεται να κωδικοποιήσουμε αυτό το κάτι πρώτα."

#. (itstool) path: section/title
#: C/guitar-tuner.js.page:103
msgid "Making the sounds with GStreamer"
msgstr "Κάνοντας τους ήχους με GStreamer"

#. (itstool) path: section/code
#: C/guitar-tuner.js.page:104
#, no-wrap
msgid ""
"\n"
"var frequencies = {E: 329.63, A: 440,\tD: 587.33,\tG: 783.99,\tB: 987.77,\te: 1318.5}\n"
"\n"
"function playSound(frequency){\n"
"  var pipeline = new Gst.Pipeline({name: \"note\"});\n"
"  var source = new Gst.ElementFactory.make(\"audiotestsrc\",\"source\");\n"
"  var sink = new Gst.ElementFactory.make(\"autoaudiosink\",\"output\");\n"
"\n"
"  source.set_property('freq', frequency);\n"
"  pipeline.add(source);\n"
"  pipeline.add(sink);\n"
"  source.link(sink);\n"
"  pipeline.set_state(Gst.State.PLAYING);\n"
"\n"
"  Mainloop.timeout_add(500, function () {\n"
"    pipeline.set_state(Gst.State.NULL);\n"
"\t  return false;\n"
"  });\n"
"}"
msgstr ""
"\n"
"var frequencies = {E: 329.63, A: 440,\tD: 587.33,\tG: 783.99,\tB: 987.77,\te: 1318.5}\n"
"\n"
"function playSound(frequency){\n"
"  var pipeline = new Gst.Pipeline({name: \"note\"});\n"
"  var source = new Gst.ElementFactory.make(\"audiotestsrc\",\"source\");\n"
"  var sink = new Gst.ElementFactory.make(\"autoaudiosink\",\"output\");\n"
"\n"
"  source.set_property('freq', frequency);\n"
"  pipeline.add(source);\n"
"  pipeline.add(sink);\n"
"  source.link(sink);\n"
"  pipeline.set_state(Gst.State.PLAYING);\n"
"\n"
"  Mainloop.timeout_add(500, function () {\n"
"    pipeline.set_state(Gst.State.NULL);\n"
"\t  return false;\n"
"  });\n"
"}"

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:123
msgid ""
"The first thing we need to do is decide what tunes we want to make when we "
"push a button. The frequencies list takes care of that. After that we get to "
"actually making the sounds with the function playSound. For function "
"playSound we give as an input a frequency (that we just defined in the "
"frequencies variable). First thing we need to construct is a pipeline, a "
"source and a sink. For the source we set the frequency. To the pipeline we "
"add both the source and the sink and then we tell it to keep playing. As a "
"last thing we use the const Mainloop to get the pipeline to stop after a "
"500ms."
msgstr ""
"Το πρώτο πράγμα που χρειαζόμαστε είναι να αποφασίσουμε τι μελωδίες θέλουμε "
"να κάνουμε όταν πατάμε ένα κουμπί. Η λίστα συχνοτήτων το φροντίζει. Μετά από "
"αυτό φροντίζουμε να κάνει στην πραγματικότητα τους ήχους με τη συνάρτηση "
"playSound. Για τη συνάρτηση playSound δίνουμε ως είσοδο μια συχνότητα (που "
"μόλις ορίσαμε στη μεταβλητή συχνοτήτων). Το πρώτο πράγμα που χρειαζόμαστε να "
"κατασκευάσουμε είναι μια διοχέτευση, μια πηγή και μια έξοδο. Για την πηγή "
"ορίζουμε τη συχνότητα. Στη διοχέτευση προσθέτουμε και την πηγή και την έξοδο "
"και έπειτα της λέμε να συνεχίσει να παίζει. Ως τελευταίο πράγμα "
"χρησιμοποιούμε τη σταθερά κύριου βρόχου για να κάνει τη διοχέτευση να "
"σταματήσει μετά από 500ms."

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:124
msgid ""
"Now we have the method of playing a tune when clicking a button. Next well "
"make the conncetions between pushing a button and playing the correct sound "
"from that button."
msgstr ""
"Τώρα έχουμε τη μέθοδο αναπαραγωγής μιας μελωδίας πατώντας ένα κουμπί. Μετά "
"γίνονται οι συνδέσεις μεταξύ πατήματος ενός κουμπιού και αναπαραγωγής του "
"σωστού ήχου από αυτό το κουμπί."

#. (itstool) path: section/title
#: C/guitar-tuner.js.page:127
msgid "Connecting buttons to playSound"
msgstr "Συνδέοντας κουμπιά στο playSound"

#. (itstool) path: section/code
#: C/guitar-tuner.js.page:128
#, no-wrap
msgid ""
"\n"
"E.connect(\"clicked\", function() {\n"
"  playSound(frequencies.E);\n"
"});\n"
"A.connect(\"clicked\", function(){\n"
"  playSound(frequencies.A);\n"
"});\n"
"D.connect(\"clicked\", function(){\n"
"  playSound(frequencies.D);\n"
"});\n"
"G.connect(\"clicked\", function(){\n"
"  playSound(frequencies.G);\n"
"});\n"
"B.connect(\"clicked\", function(){\n"
"  playSound(frequencies.B);\n"
"});\n"
"e.connect(\"clicked\", function(){\n"
"  playSound(frequencies.e);\n"
"});"
msgstr ""
"\n"
"E.connect(\"clicked\", function() {\n"
"  playSound(frequencies.E);\n"
"});\n"
"A.connect(\"clicked\", function(){\n"
"  playSound(frequencies.A);\n"
"});\n"
"D.connect(\"clicked\", function(){\n"
"  playSound(frequencies.D);\n"
"});\n"
"G.connect(\"clicked\", function(){\n"
"  playSound(frequencies.G);\n"
"});\n"
"B.connect(\"clicked\", function(){\n"
"  playSound(frequencies.B);\n"
"});\n"
"e.connect(\"clicked\", function(){\n"
"  playSound(frequencies.e);\n"
"});"

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:147
msgid ""
"The method of connecting button clicks to playSound with the correct tune is "
"by using the connect method of the button widget. So we choose a button to "
"be connected and type <code>E.connect(\"clicked\", function()"
"{playSound(frequencies.E);});</code> The <code>connect</code> tells that "
"when pushing E, something should happen. The <code>clicked</code> tells the "
"type of the signal happening to E and then in the <code>function(){};</code> "
"we call playSound with the correct note that should be associated with the "
"button."
msgstr ""
"Η μέθοδος σύνδεσης κουμπιού πατά το playSound με τη σωστή μελωδία γίνεται "
"χρησιμοποιώντας τη μέθοδο σύνδεσης του γραφικού στοιχείου κουμπιού. Έτσι "
"επιλέγουμε ένα κουμπί να συνδεθεί και πληκτρολογούμε <code>E."
"connect(\"clicked\", function(){playSound(frequencies.E);});</code> Το "
"<code>connect</code> λέει ότι όταν πατάμε Ε, κάτι θα συμβεί. Το "
"<code>clicked</code> λέει τον τύπο του σήματος που κάτι συμβαίνει στο Ε και "
"έπειτα στη <code>function(){};</code> καλούμε το playSound με τη σωστή "
"μελωδία που μπορεί να συσχετιστεί με το κουμπί."

#. (itstool) path: section/title
#: C/guitar-tuner.js.page:157
msgid "The whole program"
msgstr "Όλο το πρόγραμμα"

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:158
msgid ""
"So this is what all the parts combined looks like. When running this code, "
"you should be able to tune your guitar(if you have correctly calibrated "
"speakers)."
msgstr ""
"Έτσι αυτό είναι πώς δείχνουν όλα τα ενωμένα τμήματα. Όταν τρέχει αυτός ο "
"κώδικας, θα μπορούσατε να συντονίσετε την κιθάρα σας (εάν έχετε σωστά "
"βαθμονομημένα ηχεία)."

#. (itstool) path: section/code
#: C/guitar-tuner.js.page:159
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"var Gtk = imports.gi.Gtk;\n"
"var Gst = imports.gi.Gst;\n"
"\n"
"const Mainloop = imports.mainloop;\n"
"\n"
"Gtk.init(null, 0);\n"
"Gst.init(null, 0);\n"
"\n"
"var guitarwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL, border_width: 100});\n"
"guitarwindow.title = \"Guitar Tuner\";\n"
"guitarwindow.connect(\"destroy\", function(){Gtk.main_quit()});\n"
"\n"
"var guitar_box = new Gtk.ButtonBox ({orientation: Gtk.Orientation.VERTICAL, spacing: 10});\n"
"\n"
"var E = new Gtk.Button({label: \"E\"});\n"
"var A = new Gtk.Button({label: \"A\"});\n"
"var D = new Gtk.Button({label: \"D\"});\n"
"var G = new Gtk.Button({label: \"G\"});\n"
"var B = new Gtk.Button({label: \"B\"});\n"
"var e = new Gtk.Button({label: \"e\"});\n"
"\n"
"var frequencies = {E: 329.63, A: 440,\tD: 587.33,\tG: 783.99,\tB: 987.77,\te: 1318.5}\n"
"\n"
"\n"
"function playSound(frequency){\n"
"  var pipeline = new Gst.Pipeline({name: \"note\"});\n"
"\n"
"  var source = new Gst.ElementFactory.make(\"audiotestsrc\",\"source\");\n"
"  var sink = new Gst.ElementFactory.make(\"autoaudiosink\",\"output\");\n"
"\n"
"  source.set_property('freq', frequency);\n"
"  pipeline.add(source);\n"
"  pipeline.add(sink);\n"
"  source.link(sink);\n"
"  pipeline.set_state(Gst.State.PLAYING);\n"
"\n"
"  Mainloop.timeout_add(500, function () {\n"
"    pipeline.set_state(Gst.State.NULL);\n"
"\t  return false;\n"
"});\n"
"}\n"
"\n"
"E.connect(\"clicked\", function() {\n"
"  playSound(frequencies.E);\n"
"});\n"
"A.connect(\"clicked\", function(){\n"
"  playSound(frequencies.A);\n"
"});\n"
"D.connect(\"clicked\", function(){\n"
"  playSound(frequencies.D);\n"
"});\n"
"G.connect(\"clicked\", function(){\n"
"  playSound(frequencies.G);\n"
"});\n"
"B.connect(\"clicked\", function(){\n"
"  playSound(frequencies.B);\n"
"});\n"
"e.connect(\"clicked\", function(){\n"
"  playSound(frequencies.e);\n"
"});\n"
"\n"
"guitar_box.add(E);\n"
"guitar_box.add(A);\n"
"guitar_box.add(D);\n"
"guitar_box.add(G);\n"
"guitar_box.add(B);\n"
"guitar_box.add(e);\n"
"\n"
"guitarwindow.add(guitar_box);\n"
"\n"
"guitar_box.show_all();\n"
"guitarwindow.show();\n"
"Gtk.main();"
msgstr ""
"\n"
"#!/usr/bin/gjs\n"
"var Gtk = imports.gi.Gtk;\n"
"var Gst = imports.gi.Gst;\n"
"\n"
"const Mainloop = imports.mainloop;\n"
"\n"
"Gtk.init(null, 0);\n"
"Gst.init(null, 0);\n"
"\n"
"var guitarwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL, border_width: 100});\n"
"guitarwindow.title = \"Guitar Tuner\";\n"
"guitarwindow.connect(\"destroy\", function(){Gtk.main_quit()});\n"
"\n"
"var guitar_box = new Gtk.ButtonBox ({orientation: Gtk.Orientation.VERTICAL, spacing: 10});\n"
"\n"
"var E = new Gtk.Button({label: \"E\"});\n"
"var A = new Gtk.Button({label: \"A\"});\n"
"var D = new Gtk.Button({label: \"D\"});\n"
"var G = new Gtk.Button({label: \"G\"});\n"
"var B = new Gtk.Button({label: \"B\"});\n"
"var e = new Gtk.Button({label: \"e\"});\n"
"\n"
"var frequencies = {E: 329.63, A: 440,\tD: 587.33,\tG: 783.99,\tB: 987.77,\te: 1318.5}\n"
"\n"
"\n"
"function playSound(frequency){\n"
"  var pipeline = new Gst.Pipeline({name: \"note\"});\n"
"\n"
"  var source = new Gst.ElementFactory.make(\"audiotestsrc\",\"source\");\n"
"  var sink = new Gst.ElementFactory.make(\"autoaudiosink\",\"output\");\n"
"\n"
"  source.set_property('freq', frequency);\n"
"  pipeline.add(source);\n"
"  pipeline.add(sink);\n"
"  source.link(sink);\n"
"  pipeline.set_state(Gst.State.PLAYING);\n"
"\n"
"  Mainloop.timeout_add(500, function () {\n"
"    pipeline.set_state(Gst.State.NULL);\n"
"\t  return false;\n"
"});\n"
"}\n"
"\n"
"E.connect(\"clicked\", function() {\n"
"  playSound(frequencies.E);\n"
"});\n"
"A.connect(\"clicked\", function(){\n"
"  playSound(frequencies.A);\n"
"});\n"
"D.connect(\"clicked\", function(){\n"
"  playSound(frequencies.D);\n"
"});\n"
"G.connect(\"clicked\", function(){\n"
"  playSound(frequencies.G);\n"
"});\n"
"B.connect(\"clicked\", function(){\n"
"  playSound(frequencies.B);\n"
"});\n"
"e.connect(\"clicked\", function(){\n"
"  playSound(frequencies.e);\n"
"});\n"
"\n"
"guitar_box.add(E);\n"
"guitar_box.add(A);\n"
"guitar_box.add(D);\n"
"guitar_box.add(G);\n"
"guitar_box.add(B);\n"
"guitar_box.add(e);\n"
"\n"
"guitarwindow.add(guitar_box);\n"
"\n"
"guitar_box.show_all();\n"
"guitarwindow.show();\n"
"Gtk.main();"

#. (itstool) path: section/title
#: C/guitar-tuner.js.page:237
msgid "Running the application form Terminal"
msgstr "Εκτέλεση της εφαρμογής από τερματικό"

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:238
msgid ""
"To run this application open Terminal, go to the folder where your "
"application is stored and then run"
msgstr ""
"Για να τρέξετε αυτήν την εφαρμογή ανοίξτε τον τερματικό, πηγαίνετε στον "
"φάκελο όπου είναι αποθηκευμένη η εφαρμογή σας και μετά τρέξτε την"

#. (itstool) path: section/screen
#: C/guitar-tuner.js.page:238
#, no-wrap
msgid " <output style=\"prompt\">$ </output><input> GJS_PATH=`pwd` gjs guitarTuner.js</input> "
msgstr " <output style=\"prompt\">$ </output><input> GJS_PATH=`pwd` gjs guitarTuner.js</input> "

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:243
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"guitar-tuner/guitar-tuner.js\">reference code</link>."
msgstr ""
"Αν αντιμετωπίσετε προβλήματα με το μάθημα, συγκρίνετε τον κώδικά σας με "
"αυτόν τον <link href=\"guitar-tuner/guitar-tuner.js\">κώδικα αναφοράς</link>."

#. (itstool) path: info/title
#: C/guitar-tuner.py.page:8
msgctxt "text"
msgid "Guitar tuner (Python)"
msgstr "Συντονιστής κιθάρας (Python)"

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:46
msgid "Basic knowledge of the Python programming language"
msgstr "Βασική γνώση της γλώσσας προγραμματισμού Python"

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:60
msgid ""
"Choose <gui>PyGTK (automake)</gui> from the <gui>Python</gui> tab, click "
"<gui>Continue</gui>, and fill out your details on the next few pages. Use "
"<file>guitar-tuner</file> as project name and directory."
msgstr ""
"Επιλέξτε <gui>PyGTK (automake)</gui> από την καρτέλα <gui>Python</gui>, "
"πατήστε <gui>συνέχεια</gui> και συμπληρώστε τις λεπτομέρειές σας στις "
"επόμενες λίγες σελίδες. Χρησιμοποιήστε ως όνομα του έργου και του καταλόγου "
"το <file>guitar-tuner</file>."

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:63
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. Open "
"<file>src/guitar_tuner.py</file> from the <gui>Project</gui> or <gui>File</"
"gui> tabs. You should see some code which starts with the lines:"
msgstr ""
"Πατήστε <gui>Εφαρμογή</gui> και το έργο θα δημιουργηθεί. Ανοίξτε <file>src/"
"guitar_tuner.py</file> από τις καρτέλες <gui>έργο</gui> ή <gui>αρχείο</gui>. "
"Θα πρέπει να δείτε κάποιο κώδικα που ξεκινάει με τις γραμμές:"

#. (itstool) path: item/code
#: C/guitar-tuner.py.page:64
#, no-wrap
msgid ""
"\n"
"from gi.repository import Gtk, GdkPixbuf, Gdk\n"
"import os, sys"
msgstr ""
"\n"
"from gi.repository import Gtk, GdkPixbuf, Gdk\n"
"import os, sys"

#. (itstool) path: section/title
#: C/guitar-tuner.py.page:72
msgid "Run the code for the first time"
msgstr "Εκτέλεση του κώδικα για πρώτη φορά"

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:73
msgid ""
"Most of the code in the file is template code. It loads an (empty) window "
"from the user interface description file and shows it. More details are "
"given below; skip this list if you understand the basics:"
msgstr ""
"Ο περισσότερος κώδικας στο αρχείο είναι πρότυπο κώδικα. Φορτώνει ένα (κενό) "
"παράθυρο από το αρχείο περιγραφής της διεπαφής χρήστη και το εμφανίζει. "
"Περισσότερες πληροφορίες υπάρχουν πιο κάτω· προσπεράστε αυτή τη λίστα αν "
"καταλαβαίνετε τα βασικά:"

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:77
msgid ""
"The <code>import</code> lines at the top include the tell Python to load the "
"user interface and system libraries needed."
msgstr ""
"Οι γραμμές <code>import</code> στην αρχή λένε στην Python να φορτώσει τις "
"βιβλιοθήκες του συστήματος και της διεπαφής χρήστη που χρειάζονται."

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:81
msgid ""
"A class is declared that will be the main class for our application. In the "
"<code>__init__</code> method the main window is loaded from the GtkBuilder "
"file (<file>src/guitar-tuner.ui</file>) and the signals are connected."
msgstr ""
"Μια κλάση δηλώνεται ότι θα είναι η κύρια κλάση για το πρόγραμμά μας. Στην "
"μέθοδο <code>__init__</code> το κύριο παράθυρο φορτώνεται από το αρχείο "
"GtkBuilder (<file>src/guitar-tuner.ui</file>) και τα σήματα συνδέονται."

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:84
msgid ""
"Connecting signals is how you define what happens when you push a button, or "
"when some other event happens. Here, the <code>destroy</code> method is "
"called (and quits the app) when you close the window."
msgstr ""
"Συνδέοντας σήματα είστε σε θέση να καθορίζετε τι θα συμβεί όταν ένα κουμπί "
"πατηθεί, ή όταν συμβεί κάποιο άλλο σήμα. Εδώ, καλείται η μέθοδος "
"<code>destroy</code> όταν κλείνετε το παράθυρο (και τερματίζει την εφαρμογή)."

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:87
msgid ""
"The <code>main</code> function is run by default when you start a Python "
"application. It just creates an instance of the main class and starts the "
"main loop to bring up the window."
msgstr ""
"Η συνάρτηση <code>main</code> εκτελείται προκαθορισμένα μόλις τρέξετε ένα "
"πρόγραμμα σε Python. Δημιουργεί ένα στιγμιότυπο της κύριας κλάσης και "
"ξεκινάει τον κύριο βρόχο για να εμφανίσει το παράθυρο."

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:92
msgid ""
"This code is ready to be used, so you can run it by clicking "
"<guiseq><gui>Run</gui><gui>Execute</gui></guiseq>."
msgstr ""
"Ο κώδικας είναι έτοιμος να χρησιμοποιηθεί, οπότε μπορείτε να τον εκτελέσετε "
"πηγαίνοντας <guiseq><gui>Εκτέλεση</gui><gui>Εκτέλεση</gui></guiseq>."

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:97
msgid ""
"A description of the user interface (UI) is contained in the GtkBuilder "
"file. To edit the user interface, open <file>src/guitar_tuner.ui</file>. "
"This will switch to the interface designer. The design window is in the "
"center; widgets and widgets' properties are on the right, and the palette of "
"available widgets is on the left."
msgstr ""
"Μια περιγραφή της διεπαφής χρήστη (UI) περιέχεται στο αρχείο GtkBuilder. Για "
"να επεξεργαστείτε τη διεπαφή χρήστη, ανοίξτε το <file>src/guitar_tuner.ui</"
"file>. Θα βρεθείτε στο σχεδιαστή διεπαφής. Το παράθυρο σχεδίασης είναι στο "
"κέντρο· τα γραφικά στοιχεία και οι ιδιότητες τους είναι στα δεξιά και η "
"παλέτα των διαθέσιμων γραφικών στοιχείων στα αριστερά."

#. (itstool) path: section/title
#: C/guitar-tuner.py.page:127
msgid "Write the signal handler"
msgstr "Εγγραφή του χειριστή σημάτων"

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:129
msgid ""
"To do this, open <file>guitar_tuner.py</file> while the user interface file "
"is still open. Switch to the <gui>Signals</gui> tab, which you already used "
"to set the signal name. Now take the row where you set the <gui>clicked</"
"gui> signal and drag it into to the source file inside the class. The "
"following code will be added to your source file:"
msgstr ""
"Για να το κάνετε αυτό, ανοίξτε το <file>guitar_tuner.py</file>, έχοντας "
"ανοιχτό και το αρχείο της διεπαφής χρήστη. Πηγαίνετε στην καρτέλα "
"<gui>σήματα</gui> που είχατε χρησιμοποιήσει για να ορίσετε το όνομα του "
"σήματος. Τώρα πάρτε την γραμμή όπου ορίσατε το σήμα <gui>clicked</gui> και "
"σύρετε την στον πηγαίο κώδικα μέσα στην κλάση. Ο ακόλουθος κώδικας θα "
"προστεθεί στον πηγαίο σας αρχείο:"

#. (itstool) path: section/code
#: C/guitar-tuner.py.page:131
#, no-wrap
msgid ""
"\n"
"def on_button_clicked (self, button):\n"
msgstr ""
"\n"
"def on_button_clicked (self, button):\n"

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:135
msgid ""
"This signal handler has two arguments: the usual Python class pointer, and "
"the <code>Gtk.Button</code> that called the function."
msgstr ""
"Ο χειριστής σημάτων έχει δυο παράμετρους: τον τυπικό δείκτη κλάσης της "
"Python και το <code>Gtk.Button</code> που καλεί την συνάρτηση."

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:153
msgid ""
"Change the import line in <file>guitar_tuner.py</file>, just at the "
"beginning to :"
msgstr ""
"Αλλάξτε τη γραμμή import στο αρχείο <file>guitar_tuner.py</file>, μόνο στην "
"αρχή σε :"

#. (itstool) path: section/code
#: C/guitar-tuner.py.page:154
#, no-wrap
msgid "from gi.repository import Gtk, Gst, GObject "
msgstr "from gi.repository import Gtk, Gst, GObject "

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:155
msgid ""
"The <code>Gst</code> includes the GStreamer library. You also need to "
"initialise GStreamer properly which is done in the <code>main()</code> "
"method with this call added above the <code>app = GUI()</code> line:"
msgstr ""
"Το <code>Gst</code> περιέχει τη βιβλιοθήκη GStreamer. Επίσης πρέπει να "
"αρχικοποιήσετε σωστά το GStreamer το οποίο γίνεται στη μέθοδο <code>main()</"
"code> με την προσθήκη αυτής γραμμής πάνω από την γραμμή <code>app = GUI()</"
"code>:"

#. (itstool) path: section/code
#: C/guitar-tuner.py.page:158
#, no-wrap
msgid "Gst.init_check(sys.argv)"
msgstr "Gst.init_check(sys.argv)"

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:159
msgid ""
"Then, copy the following function into the class in <file>guitar_tuner.py</"
"file> somewhere:"
msgstr ""
"Μετά, αντιγράψτε την ακόλουθη συνάρτηση κάπου στην κλάση στο "
"<file>guitar_tuner.py</file>:"

#. (itstool) path: section/code
#: C/guitar-tuner.py.page:160
#, no-wrap
msgid ""
"\n"
"def play_sound(self, frequency):\n"
"\tpipeline = Gst.Pipeline(name='note')\n"
"\tsource = Gst.ElementFactory.make('audiotestsrc', 'src')\n"
"\tsink = Gst.ElementFactory.make('autoaudiosink', 'output')\n"
"\n"
"\tsource.set_property('freq', frequency)\n"
"\tpipeline.add(source)\n"
"\tpipeline.add(sink)\n"
"\tsource.link(sink)\n"
"\tpipeline.set_state(Gst.State.PLAYING)\n"
"\n"
"\tGObject.timeout_add(self.LENGTH, self.pipeline_stop, pipeline)"
msgstr ""
"\n"
"def play_sound(self, frequency):\n"
"\tpipeline = Gst.Pipeline(name='note')\n"
"\tsource = Gst.ElementFactory.make('audiotestsrc', 'src')\n"
"\tsink = Gst.ElementFactory.make('autoaudiosink', 'output')\n"
"\n"
"\tsource.set_property('freq', frequency)\n"
"\tpipeline.add(source)\n"
"\tpipeline.add(sink)\n"
"\tsource.link(sink)\n"
"\tpipeline.set_state(Gst.State.PLAYING)\n"
"\n"
"\tGObject.timeout_add(self.LENGTH, self.pipeline_stop, pipeline)"

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:175
msgid ""
"The first three lines create source and sink GStreamer elements and a "
"pipeline element (which will be used as a container for the other two "
"elements). The pipeline is given the name \"note\"; the source is named "
"\"source\" and is set to the <code>audiotestsrc</code> source; and the sink "
"is named \"output\" and set to the <code>autoaudiosink</code> sink (default "
"sound card output)."
msgstr ""
"Οι τρεις πρώτες γραμμές δημιουργούν τα στοιχεία πηγή, έξοδος και διοχέτευση "
"(το οποίο θα χρησιμοποιηθεί σαν υποδοχέας για τα δυο άλλα στοιχεία). Δίνουμε "
"το όνομα \"note\" στη διοχέτευση· ονομάζουμε την πηγή \"source\" και το "
"ρυθμίζετε στην πηγή <code>audiotestsrc</code>· και ονομάζουμε την έξοδο "
"\"output\" και την ρυθμίζετε στην έξοδο <code>autoaudiosink</code> "
"(προεπιλεγμένη κάρτα ήχου)."

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:178
msgid ""
"The call to <code>source.set_property</code> sets the <code>freq</code> "
"property of the source element to <code>frequency</code>, which was passed "
"as an argument to the <code>play_sound</code> function. This is just the "
"frequency of the note in Hertz; some useful frequencies will be defined "
"later on."
msgstr ""
"Το κάλεσμα της <code>source.set_property</code> ορίζει την ιδιότητα "
"<code>freq</code> του στοιχείου πηγή σε <code>frequency</code>, η οποία έχει "
"περαστεί σαν παράμετρος στη συνάρτηση <code>play_sound</code>. Αυτή είναι η "
"συχνότητα της νότας σε Hertz· πολλές χρήσιμες συχνότητες θα οριστούν "
"αργότερα."

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:181
msgid ""
"The next two lines call <code>pipeline.add</code>, putting the source and "
"sink into the pipeline. The pipeline can contain multiple other GStreamer "
"elements. In general, you can add as many elements as you like to the "
"pipeline by calling its <code>add</code> method repeatedly."
msgstr ""
"Οι επόμενες δύο γραμμές καλούν το <code>pipeline.add</code>, βάζοντας την "
"πηγή και την έξοδο στη διοχέτευση. Η διοχέτευση μπορεί να περιέχει διάφορα "
"στοιχεία του GStreamer. Γενικά, μπορείτε να προσθέσετε όσα στοιχεία θέλετε "
"στη διοχέτευση καλώντας συνεχόμενα τη μέθοδο <code>add</code>."

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:184
msgid ""
"Next <code>pipeline.set_state</code> is used to start playback, by setting "
"the state of the pipeline to playing (<code>Gst.State.PLAYING</code>)."
msgstr ""
"Μετά η <code>pipeline.set_state</code> χρησιμοποιείται για να ξεκινήσει η "
"αναπαραγωγή, αλλάζοντας την κατάσταση της διοχέτευσης σε αναπαραγωγή "
"(<code>Gst.State.PLAYING</code>)."

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:192
msgid ""
"We don't want to play an annoying tone forever, so the last thing "
"<code>play_sound</code> does is to call <code>GObject.timeout_add</code>. "
"This sets a timeout for stopping the sound; it waits for <code>LENGTH</code> "
"milliseconds before calling the function <code>pipeline_stop</code>, and "
"will keep calling it until <code>pipeline_stop</code> returns <code>False</"
"code>."
msgstr ""
"Δεν θέλουμε να παίζουμε έναν ενοχλητικό ήχο για πάντα, οπότε το τελευταίο "
"πράγμα που κάνει η <code>play_sound</code> είναι να καλεί το <code>GObject."
"timeout_add</code>. Αυτό ορίζει ένα χρονικό περιθώριο που θα σταματήσει τον "
"ήχο· περιμένει για <code>LENGTH</code> χιλιοστά του δευτερολέπτου πριν "
"καλέσει τη συνάρτηση <code>pipeline_stop</code>, και θα συνεχίσει να την "
"καλεί μέχρι η <code>pipeline_stop</code> να επιστρέψει <code>False</code>."

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:193
msgid ""
"Now, we'll write the <code>pipeline_stop</code> function which is called by "
"<code>GObject.timeout_add</code>. Insert the following code <em>above</em> "
"the <code>play_sound</code> function:"
msgstr ""
"Τώρα θα γράψουμε τη συνάρτηση <code>pipeline_stop</code>, η οποία καλείται "
"από το <code>GObject.timeout_add</code>. Προσθέστε τον ακόλουθο κώδικα "
"<em>πάνω</em> από τη συνάρτηση <code>play_sound</code>:"

#. (itstool) path: section/code
#: C/guitar-tuner.py.page:194
#, no-wrap
msgid ""
"\n"
"def pipeline_stop(self, pipeline):\n"
"\tpipeline.set_state(Gst.State.NULL)\n"
"\treturn False\n"
msgstr ""
"\n"
"def pipeline_stop(self, pipeline):\n"
"\tpipeline.set_state(Gst.State.NULL)\n"
"\treturn False\n"

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:199
msgid ""
"You need to define the <code>LENGTH</code> constant inside the class, so add "
"this code at the beginning of the main class:"
msgstr ""
"Πρέπει να ορίσετε τη σταθερά <code>LENGTH</code> μέσα στην κλάση, οπότε "
"προσθέστε αυτόν τον κώδικα στην αρχή της κύριας κλάσης:"

#. (itstool) path: section/code
#: C/guitar-tuner.py.page:201
#, no-wrap
msgid ""
"\n"
"LENGTH = 500\n"
msgstr ""
"\n"
"LENGTH = 500\n"

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:204
msgid ""
"The call to <code>pipeline.set_state</code> stops the playback of the "
"pipeline."
msgstr ""
"Η κλήση στη <code>pipeline.set_state</code> σταματά την αναπαραγωγή της "
"διοχέτευσης."

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:209
msgid ""
"We want to play the correct sound when the user clicks a button. First of "
"all, we need to know the frequencies for the six guitar strings, which are "
"defined (at the beginning of the main class) inside a dictionary so we can "
"easily map them to the names of the strings:"
msgstr ""
"Θέλουμε να παίζουμε το σωστό ήχο όταν ο χρήστης πατάει ένα κουμπί. Πρώτα από "
"όλα, χρειαζόμαστε να ξέρουμε τις συχνότητες για τις έξι χορδές της κιθάρας, "
"οι οποίες είναι ορισμένες (στην αρχή της κύριας κλάσης) μέσα σε ένα λεξικό "
"ώστε να μπορούμε εύκολα να τις απεικονίσουμε στα ονόματα των χορδών:"

#. (itstool) path: section/code
#: C/guitar-tuner.py.page:211
#, no-wrap
msgid ""
"\n"
"# Frequencies of the strings\n"
"frequencies = {\n"
"\t'E': 329.63,\n"
"\t'A': 440,\n"
"\t'D': 587.33,\n"
"\t'G': 783.99,\n"
"\t'B': 987.77,\n"
"\t'e': 1318.5\n"
"}\n"
msgstr ""
"\n"
"# Συχνότητες των συμβολοσειρών\n"
"frequencies = {\n"
"\t'E': 329.63,\n"
"\t'A': 440,\n"
"\t'D': 587.33,\n"
"\t'G': 783.99,\n"
"\t'B': 987.77,\n"
"\t'e': 1318.5\n"
"}\n"

#. (itstool) path: section/code
#: C/guitar-tuner.py.page:223
#, no-wrap
msgid ""
"\n"
"def on_button_clicked(self, button):\n"
"\tlabel = button.get_child()\n"
"\ttext = label.get_label()\n"
"\n"
"\tself.play_sound (self.frequencies[text])\n"
msgstr ""
"\n"
"def on_button_clicked(self, button):\n"
"\tlabel = button.get_child()\n"
"\ttext = label.get_label()\n"
"\n"
"\tself.play_sound (self.frequencies[text])\n"

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:230
msgid ""
"The button that was clicked is passed as an argument (<code>button</code>) "
"to <code>on_button_clicked</code>. We can get the label of that button by "
"using <code>button.get_child</code>, and then get the text from that label "
"using <code>label.get_label</code>."
msgstr ""
"Το κουμπί που πατήθηκε περνάει σαν παράμετρος (<code>button</code>) στο "
"<code>on_button_clicked</code>. Μπορούμε να πάρουμε την ετικέτα του κουμπιού "
"χρησιμοποιώντας το <code>button.get_child</code>, και το κείμενο από την "
"ετικέτα χρησιμοποιώντας το <code>label.get_label</code>."

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:231
msgid ""
"The label text is then used as a key for the dictionary and "
"<code>play_sound</code> is called with the frequency appropriate for that "
"note. This plays the tone; we have a working guitar tuner!"
msgstr ""
"Το κείμενο της ετικέτας χρησιμοποιείται σαν κλειδί για το λεξικό και "
"καλείται η <code>play_sound</code> με την κατάλληλη συχνότητα από την νότα. "
"Αυτό παίζει τον τόνο· ο συντονιστής κιθάρας είναι έτοιμος!"

#. (itstool) path: section/title
#: C/guitar-tuner.py.page:235 C/image-viewer.js.page:311
#: C/image-viewer.py.page:225 C/record-collection.js.page:292
msgid "Run the application"
msgstr "Τρέξτε την εφαρμογή"

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:236
msgid ""
"All of the code should now be ready to go. Click <guiseq><gui>Run</"
"gui><gui>Execute</gui></guiseq> to start the application. Enjoy!"
msgstr ""
"Το πρόγραμμα πρέπει να είναι έτοιμο τώρα. Για να ξεκινήσετε το πρόγραμμα "
"πατήστε <guiseq><gui>Εκτέλεση</gui><gui>Εκτέλεση</gui></guiseq>. Απολαύστε "
"το!"

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:241
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"guitar-tuner/guitar-tuner.py\">reference code</link>."
msgstr ""
"Αν αντιμετωπίσετε προβλήματα με το μάθημα, συγκρίνετε τον κώδικά σας με "
"αυτόν τον <link href=\"guitar-tuner/guitar-tuner.py\">κώδικα αναφοράς</link>."

#. (itstool) path: info/desc
#: C/guitar-tuner.vala.page:10
msgid ""
"Use <link href=\"http://developer.gnome.org/platform-overview/stable/gtk"
"\">GTK+</link> and <link href=\"http://developer.gnome.org/platform-overview/"
"stable/gstreamer\">GStreamer</link> to build a simple guitar tuner "
"application for GNOME. Shows off how to use the interface designer."
msgstr ""
"Χρησιμοποιήστε <link href=\"http://developer.gnome.org/platform-overview/"
"stable/gtk\">GTK+</link> και <link href=\"http://developer.gnome.org/"
"platform-overview/stable/gstreamer\">GStreamer</link> για να φτιάξετε ένα "
"απλό πρόγραμμα ρυθμιστή κιθάρας για το GNOME. Αναδεικνύει πώς να "
"χρησιμοποιήσετε το σχεδιαστή διεπαφής."

#. (itstool) path: synopsis/p
#: C/guitar-tuner.vala.page:35
msgid ""
"In this tutorial you will create an application which plays tones that you "
"can use to tune a guitar. You will learn how to:"
msgstr ""
"Σε αυτό το μάθημα, θα δημιουργήσουμε μια εφαρμογή που παίζει τόνους και "
"μπορεί να συντονίσει μια κιθάρα. Θα μάθετε πώς να:"

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:37
msgid ""
"Set up a basic project using the <link xref=\"getting-ready\">Anjuta IDE</"
"link>."
msgstr ""
"Εγκαταστήσετε ένα βασικό έργο χρησιμοποιώντας το <link xref=\"getting-ready"
"\">Anjuta IDE</link>."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:38
msgid "Create a simple GUI with <app>Anjuta</app>'s UI designer."
msgstr "Δημιουργήσετε ένα απλό GUI με τον σχεδιαστή UI του <app>Anjuta</app>."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:39
msgid ""
"Use the <link href=\"http://developer.gnome.org/platform-overview/stable/"
"gstreamer\">GStreamer</link> library to play sounds."
msgstr ""
"Χρησιμοποιήσετε τη βιβλιοθήκη <link href=\"http://developer.gnome.org/"
"platform-overview/stable/gstreamer\">GStreamer</link> για να παίξει ήχους."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:43 C/image-viewer.vala.page:48
msgid ""
"Basic knowledge of the <link href=\"https://live.gnome.org/Vala/Tutorial"
"\">Vala</link> programming language."
msgstr ""
"Βασική γνώση της γλώσσας προγραμματισμού <link href=\"https://live.gnome.org/"
"Vala/Tutorial\">Vala</link>."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:44 C/image-viewer.vala.page:49
msgid "An installed copy of <app>Anjuta</app>."
msgstr "Ένα εγκατεστημένο αντίγραφο του <app>Anjuta</app>."

#. (itstool) path: section/title
#: C/guitar-tuner.vala.page:51
msgid "Create a project in <app>Anjuta</app>"
msgstr "Δημιουργήστε ένα έργο με το <app>Anjuta</app>"

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:55 C/image-viewer.vala.page:63
msgid ""
"Start <app>Anjuta</app> and click <gui>Create a new project</gui> or "
"<guiseq><gui>File</gui><gui>New</gui><gui>Project</gui></guiseq> to open the "
"project wizard."
msgstr ""
"Ξεκινήστε το <app>Anjuta</app> και πατήστε <gui>δημιουργία νέου έργου</gui> "
"ή <guiseq><gui>αρχείο</gui><gui>νέο</gui><gui>έργο</gui></guiseq> για να "
"ανοίξετε τον οδηγό του έργου."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:58
msgid ""
"Click on the <gui>Vala</gui> tab and select <gui>GTK+ (Simple)</gui>. Click "
"<gui>Continue</gui>, and fill out your details on the next few pages. Use "
"<file>guitar-tuner</file> as project name and directory."
msgstr ""
"Πατήστε στην καρτέλα <gui>Vala</gui> και επιλέξτε <gui>GTK+ (απλό)</gui>. "
"Πατήστε <gui>συνέχεια</gui> και συμπληρώστε τις λεπτομέρειές σας στις "
"επόμενες λίγες σελίδες. Χρησιμοποιήστε ως όνομα του έργου και του καταλόγου "
"το <file>guitar-tuner</file>."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:61
msgid ""
"Make sure that <gui>Configure external packages</gui> is switched <gui>ON</"
"gui>. On the next page, select <link href=\"http://valadoc.org/"
"gstreamer-0.10/index.htm\"><em>gstreamer-0.10</em></link> from the list to "
"include the GStreamer library in your project. Click <gui>Continue</gui>"
msgstr ""
"Βεβαιωθείτε ότι η <gui>ρύθμιση εξωτερικών πακέτων</gui> είναι <gui>ενεργή</"
"gui>. Στην επόμενη σελίδα, επιλέξτε <link href=\"http://valadoc.org/"
"gstreamer-0.10/index.htm\"><em>gstreamer-0.10</em></link> από τη λίστα για "
"συμπερίληψη της βιβλιοθήκης GStreamer στο έργο σας. Κάντε κλικ στη "
"<gui>συνέχεια</gui>"

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:65
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. From the "
"<gui>Project</gui> or <gui>Files</gui> tab, open <file>src/guitar_tuner."
"vala</file> by double-clicking on it. You should see some code which starts "
"with the lines:"
msgstr ""
"Κλικ στην <gui>εφαρμογή</gui> και το έργο θα δημιουργηθεί για σας. Από τις "
"καρτέλες <gui>έργο</gui> ή <gui>αρχεία</gui>, ανοίξτε το <file>src/"
"guitar_tuner.vala</file> με διπλό κλικ πάνω του. Θα πρέπει να δείτε κάποιο "
"κώδικα που ξεκινάει με τις γραμμές:"

#. (itstool) path: item/code
#: C/guitar-tuner.vala.page:66 C/magic-mirror.vala.page:70
#, no-wrap
msgid ""
"\n"
"using GLib;\n"
"using Gtk;"
msgstr ""
"\n"
"using GLib;\n"
"using Gtk;"

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:75
msgid ""
"The code loads an (empty) window from the user interface description file "
"and displays it. More details are given below; you may choose to skip this "
"list if you understand the basics:"
msgstr ""
"Ο κώδικας φορτώνει ένα (κενό) παράθυρο από το αρχείο περιγραφής διεπαφής "
"χρήστη και το εμφανίζει. Περισσότερες λεπτομέρειες δίνονται παρακάτω· μπορεί "
"να επιλέξετε να προσπεράστε αυτή τη λίστα αν καταλαβαίνετε τα βασικά:"

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:79 C/magic-mirror.vala.page:82
msgid ""
"The two <code>using</code> lines import namespaces so we don't have to name "
"them explicitly."
msgstr ""
"Οι δύο γραμμές <code>using</code> εισάγουν χώρους ονομάτων έτσι ώστε να μην "
"τους ονομάσουμε ρητά."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:82
msgid ""
"The constructor of the <code>Main</code> class creates a new window by "
"opening a GtkBuilder file (<file>src/guitar-tuner.ui</file>, defined a few "
"lines above), connecting its signals and then displaying it in a window. "
"This GtkBuilder file contains a description of a user interface and all of "
"its elements. You can use Anjuta's editor to design GtkBuilder user "
"interfaces."
msgstr ""
"Ο κατασκευαστής της κλάσης <code>Main</code> δημιουργεί ένα νέο παράθυρο "
"ανοίγοντας ένα αρχείο GtkBuilder (<file>src/guitar-tuner.ui</file>, που "
"ορίζεται λίγες γραμμές παραπάνω), συνδέοντας τα σήματά του και έπειτα "
"εμφανίζοντας τα σε παράθυρο. Αυτό το αρχείο GtkBuilder περιέχει μια "
"περιγραφή μιας διεπαφής χρήστη και όλων των στοιχείων του. Μπορείτε να "
"χρησιμοποιήσετε τον επεξεργαστή του Anjuta για σχεδίαση διεπαφών χρήστη "
"GtkBuilder."

#. (itstool) path: note/p
#: C/guitar-tuner.vala.page:84
msgid ""
"Connecting signals is how you define what happens when you push a button, or "
"when some other event happens. Here, the <code>on_destroy</code> function is "
"called (and quits the app) when you close the window."
msgstr ""
"Η σύνδεση σημάτων είναι πώς ορίζετε τι συμβαίνει όταν πατάτε ένα κουμπί, ή "
"όταν συμβεί κάποιο άλλο συμβάν. Εδώ, καλείται η συνάρτηση <code>on_destroy</"
"code> (και τερματίζει την εφαρμογή) όταν κλείνετε το παράθυρο."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:88
msgid ""
"The static <code>main</code> function is run by default when you start a "
"Vala application. It calls a few functions which create the Main class, set "
"up and then run the application. The <code>Gtk.main</code> function starts "
"the GTK main loop, which runs the user interface and starts listening for "
"events (like clicks and key presses)."
msgstr ""
"Η στατική συνάρτηση <code>main</code> τρέχει από προεπιλογή όταν ξεκινάτε "
"μια εφαρμογή Vala. Καλεί λίγες συναρτήσεις που δημιουργούν την κύρια κλάση, "
"ρυθμίζουν και έπειτα εκτελούν την εφαρμογή. Η συνάρτηση <code>Gtk.main</"
"code> ξεκινά τον κύριο βρόχο του GTK, που εκτελεί τη διεπαφή χρήστη και "
"ξεκινά την απάντηση για συμβάντα (όπως κλικ και πατήματα πλήκτρου)."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:92
msgid ""
"This code is ready to be used, so you can compile it by clicking "
"<guiseq><gui>Build</gui><gui>Build Project</gui></guiseq> (or press "
"<keyseq><key>Shift</key><key>F7</key></keyseq>). When you do this, a dialog "
"will appear. Change the <gui>Configuration</gui> to <gui>Default</gui> and "
"then click <gui>Execute</gui> to configure the build directory. You only "
"need to do this once, for the first build."
msgstr ""
"Αυτός ο κώδικας είναι έτοιμος να χρησιμοποιηθεί. έτσι μπορείτε να τον "
"μεταγλωττίσετε με κλικ <guiseq><gui>κατασκευή</gui><gui>κατασκευή έργου</"
"gui></guiseq> (ή πατώντας <keyseq><key>Shift</key><key>F7</key></keyseq>). "
"Όταν το κάνετε αυτό, θα εμφανιστεί ένας διάλογος. Αλλάξτε τη <gui>ρύθμιση</"
"gui> σε <gui>προεπιλογή</gui> και έπειτα κλικ <gui>εκτέλεση</gui> για "
"ρύθμιση του καταλόγου κατασκευής. Χρειάζεστε να το κάνετε αυτό μόνο μια "
"φορά, για την πρώτη κατασκευή."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:97
msgid ""
"A description of the user interface (UI) is contained in the GtkBuilder file "
"<file>src/guitar_tuner.ui</file> defined at the top of the class. To edit "
"the user interface, open <file>src/guitar_tuner.ui</file> by double-clicking "
"on it in the <gui>Project</gui> or <gui>Files</gui> section. This will "
"switch to the interface designer. The design window is in the center; "
"<gui>Widgets</gui> and the widget properties are on the right, and the "
"<gui>Palette</gui> of available widgets is on the left."
msgstr ""
"Μια περιγραφή της διεπαφής χρήστη (UI) περιέχεται στο αρχείο του GtkBuilder "
"<file>src/guitar_tuner.ui</file> που ορίστηκε στην κορυφή της κλάσης. Για να "
"επεξεργαστείτε τη διεπαφή χρήστη, ανοίξτε το <file>src/guitar_tuner.ui</"
"file> με διπλό κλικ πάνω του στην ενότητα <gui>έργο</gui> ή <gui>αρχεία</"
"gui>. Θα βρεθείτε στο σχεδιαστή διεπαφής. Το παράθυρο σχεδίασης είναι στο "
"κέντρο· τα <gui>γραφικά στοιχεία</gui> και οι ιδιότητες γραφικού στοιχείου "
"είναι στα δεξιά και η <gui>παλέτα</gui> με τα διαθέσιμα γραφικά στοιχεία "
"είναι στα αριστερά."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:99
msgid ""
"The layout of every UI in GTK+ is organized using boxes and tables. Let's "
"use a vertical GtkButtonBox here to assign six GtkButtons, one for each of "
"the six guitar strings."
msgstr ""
"Η διάταξη κάθε διεπαφής χρήστη στο Gtk+ οργανώνεται σε πλαίσια και πίνακες. "
"Ας χρησιμοποιήσουμε εδώ ένα κάθετο GtkButtonBox για να αποδώσουμε έξι "
"GtkButtons, ένα για κάθε μία από τις έξι χορδές της κιθάρας."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:105
msgid ""
"In the <gui>Palette</gui> tab, from the <gui>Containers</gui> section, "
"select a <gui>Button Box</gui> (GtkButtonBox) by clicking on the icon. Then "
"click on the design window in the center to place it into the window. A "
"dialog will display where you can set the <gui>Number of items</gui> to "
"<input>6</input>. Then click <gui>Create</gui>."
msgstr ""
"Στην καρτέλα <gui>παλέτα</gui>, από την ενότητα <gui>περιέκτες</gui>, "
"επιλέξτε ένα <gui>πλαίσιο κουμπιού</gui> (GtkButtonBox) με κλικ στο "
"εικονίδιο. Έπειτα κλικ στο παράθυρο σχεδίασης στο κέντρο για τοποθέτηση του "
"στο παράθυρο. Ένας διάλογος θα εμφανίσει που μπορείτε να ορίσετε τον "
"<gui>αριθμό των στοιχείων</gui> σε <input>6</input>. Έπειτα κλικ στο "
"<gui>δημιουργία</gui>."

#. (itstool) path: note/p
#: C/guitar-tuner.vala.page:106
msgid ""
"You can also change the <gui>Number of elements</gui> and the "
"<gui>Orientation</gui> in the <gui>General</gui> tab on the right."
msgstr ""
"Μπορείτε επίσης να αλλάξετε τον <gui>αριθμό των στοιχείων</gui> και τον "
"<gui>προσανατολισμό</gui> στην καρτέλα <gui>γενικά</gui> στα δεξιά."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:110
msgid ""
"Now, from the <gui>Control and Display</gui> section of the <gui>Palette</"
"gui> choose a <gui>Button</gui> (GtkButton) by clicking on it. Place it into "
"the first section of the GtkButtonBox by clicking in the first section."
msgstr ""
"Τώρα, από την ενότητα <gui>έλεγχος και εμφάνιση</gui> της <gui>παλέτας</gui> "
"επιλέξτε ένα <gui>κουμπί</gui> (GtkButton) με κλικ πάνω του. Τοποθετήστε το "
"στην πρώτη ενότητα του GtkButtonBox με κλικ στην πρώτη ενότητα."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:113
msgid ""
"While the button is still selected, scroll down in the <gui>General</gui> "
"tab on the right to the <gui>Label</gui> property, and change it to <gui>E</"
"gui>. This will be the low E guitar string."
msgstr ""
"Έχοντας το κουμπί ακόμα επιλεγμένο, κυλήστε κάτω στην καρτέλα <gui>γενικά</"
"gui> στα δεξιά της ιδιότητας <gui>ετικέτα</gui> και αλλάξτε την σε <gui>E</"
"gui>. Αυτή θα είναι η χαμηλή χορδή της κιθάρας Ε."

#. (itstool) path: note/p
#: C/guitar-tuner.vala.page:114
msgid ""
"The <gui>General</gui> tab is located in the <gui>Widgets</gui> section on "
"the right."
msgstr ""
"Η καρτέλα <gui>γενικά</gui> εντοπίζεται στην ενότητα <gui>γραφικά στοιχεία</"
"gui> στα δεξιά."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:119
msgid ""
"Click on the <gui>Signals</gui> tab in the <gui>Widgets</gui> section on the "
"right, and look for the <code>clicked</code> signal of the button. You can "
"use this to connect a signal handler that will be called when the button is "
"clicked by the user. To do this, click on the signal and type "
"<code>main_on_button_clicked</code> in the <gui>Handler</gui> column and "
"press the <key>Enter</key>."
msgstr ""
"Πηγαίνετε στην καρτέλα <gui>σήματα</gui> στην ενότητα <gui>γραφικά "
"στοιχεία</gui> στα δεξιά και βρείτε το σήμα <code>clicked</code> του "
"κουμπιού. Μπορείτε να το χρησιμοποιήσετε για να συνδέσετε έναν χειριστή "
"σημάτων που θα καλείται όταν πατηθεί το κουμπί από τον χρήστη. Για να το "
"κάνετε αυτό, κλικ στο σήμα και πληκτρολογήστε <code>main_on_button_clicked</"
"code> στη στήλη <gui>χειριστής</gui> και πατήστε <key>Enter</key>."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:132
msgid ""
"This section will show you how to create the code to produce sounds. <link "
"href=\"http://developer.gnome.org/platform-overview/stable/gstreamer"
"\">GStreamer</link> is GNOME's multimedia framework — you can use it for "
"playing, recording, and processing video, audio, webcam streams and the "
"like. Here, we'll be using it to produce single-frequency tones."
msgstr ""
"Αυτή η ενότητα θα δείξει πώς να παράξει ο κώδικας ήχους. <link href=\"http://"
"developer.gnome.org/platform-overview/stable/gstreamer\">GStreamer</link> "
"είναι ο σκελετός πολυμέσων του GNOME - μπορείτε να τον χρησιμοποιήσετε για "
"παίξιμο, εγγραφή και επεξεργασία βίντεο, ήχου, ροών ιστοκάμερας και τα "
"παρόμοια. Εδώ, θα το χρησιμοποιήσουμε για να παράξουμε τόνους μιας "
"συχνότητας."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:133
msgid ""
"Conceptually, GStreamer works as follows: You create a <link href=\"http://"
"gstreamer.freedesktop.org/data/doc/gstreamer/head/manual/html/section-intro-"
"basics-bins.html\"><em>pipeline</em></link> containing several processing "
"elements going from the <em>source</em> to the <em>sink</em> (output). The "
"source can be an image file, a video, or a music file, for example, and the "
"output could be a widget or the soundcard."
msgstr ""
"Εννοιολογικά, το GStreamer λειτουργεί ως εξής: δημιουργείτε μια<link href="
"\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/manual/html/"
"section-intro-basics-bins.html\"> <em>διοχέτευση</em></link> που περιέχει "
"διάφορα στοιχεία επεξεργασίας που πηγαίνουν από την <em>πηγή</em> στο "
"<em>ταμιευτήρα</em> (έξοδο). Η πηγή μπορεί να είναι ένα αρχείο εικόνας, "
"βίντεο, ή μουσικής, για παράδειγμα, και η έξοδος μπορεί να είναι γραφικό "
"στοιχείο ή κάρτα ήχου."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:142
msgid ""
"In this example we will use a tone generator source called "
"<code>audiotestsrc</code> and send the output to the default system sound "
"device, <code>autoaudiosink</code>. We only need to configure the frequency "
"of the tone generator; this is accessible through the <code>freq</code> "
"property of <code>audiotestsrc</code>."
msgstr ""
"Σε αυτό το παράδειγμα θα χρησιμοποιήσουμε μια πηγή παραγωγής τόνων που "
"λέγεται <code>audiotestsrc</code> και θα στείλουμε την έξοδο στην "
"προεπιλεγμένη συσκευή ήχου του συστήματος, <code>autoaudiosink</code>. "
"Πρέπει μόνο να ρυθμίσουμε την συχνότητα της παραγωγής τόνου· αυτό είναι "
"διαθέσιμο μέσα από την ιδιότητα <code>freq</code> του <code>audiotestsrc</"
"code>."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:144
msgid ""
"We need to add a line to initialize GStreamer; put the following code on the "
"line above the <code>Gtk.init</code> call in the <code>main</code> function:"
msgstr ""
"Χρειάζεται να προσθέσουμε μια γραμμή για αρχικοποίηση του GStreamer· βάλτε "
"τον παρακάτω κώδικα στην γραμμή πάνω από την κλήση <code>Gtk.init</code> στη "
"συνάρτηση <code>main</code>:"

#. (itstool) path: section/code
#: C/guitar-tuner.vala.page:145
#, no-wrap
msgid "Gst.init (ref args);"
msgstr "Gst.init (ref args);"

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:146
msgid ""
"Then, copy the following function into <file>guitar_tuner.vala</file> inside "
"our <code>Main</code> class:"
msgstr ""
"Μετά, αντιγράψτε την ακόλουθη συνάρτηση στο <file>guitar_tuner.vala</file> "
"μέσα στην κλάση μας <code>Main</code>:"

#. (itstool) path: section/code
#: C/guitar-tuner.vala.page:147
#, no-wrap
msgid ""
"\n"
"Gst.Element sink;\n"
"Gst.Element source;\n"
"Gst.Pipeline pipeline;\n"
"\n"
"private void play_sound(double frequency)\n"
"{\n"
"\tpipeline = new Gst.Pipeline (\"note\");\n"
"\tsource   = Gst.ElementFactory.make (\"audiotestsrc\",\n"
"\t                                    \"source\");\n"
"\tsink     = Gst.ElementFactory.make (\"autoaudiosink\",\n"
"\t                                    \"output\");\n"
"\n"
"\t/* set frequency */\n"
"\tsource.set (\"freq\", frequency);\n"
"\n"
"\tpipeline.add (source);\n"
"\tpipeline.add (sink);\n"
"\tsource.link (sink);\n"
"\n"
"\tpipeline.set_state (Gst.State.PLAYING);\n"
"\n"
"\t/* stop it after 200ms */\n"
"\tvar time = new TimeoutSource(200);\n"
"\n"
"\ttime.set_callback(() =&gt; {\n"
"\t\tpipeline.set_state (Gst.State.NULL);\n"
"\t\treturn false;\n"
"\t});\n"
"\ttime.attach(null);\n"
"}"
msgstr ""
"\n"
"Gst.Element sink;\n"
"Gst.Element source;\n"
"Gst.Pipeline pipeline;\n"
"\n"
"private void play_sound(double frequency)\n"
"{\n"
"\tpipeline = new Gst.Pipeline (\"note\");\n"
"\tsource   = Gst.ElementFactory.make (\"audiotestsrc\",\n"
"\t                                    \"source\");\n"
"\tsink     = Gst.ElementFactory.make (\"autoaudiosink\",\n"
"\t                                    \"output\");\n"
"\n"
"\t/* set frequency */\n"
"\tsource.set (\"freq\", frequency);\n"
"\n"
"\tpipeline.add (source);\n"
"\tpipeline.add (sink);\n"
"\tsource.link (sink);\n"
"\n"
"\tpipeline.set_state (Gst.State.PLAYING);\n"
"\n"
"\t/* stop it after 200ms */\n"
"\tvar time = new TimeoutSource(200);\n"
"\n"
"\ttime.set_callback(() =&gt; {\n"
"\t\tpipeline.set_state (Gst.State.NULL);\n"
"\t\treturn false;\n"
"\t});\n"
"\ttime.attach(null);\n"
"}"

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:181
msgid ""
"The first three lines create source and sink GStreamer elements (<link href="
"\"http://valadoc.org/gstreamer-0.10/Gst.Element.html\"><code>Gst.Element</"
"code></link>), and a <link href=\"http://valadoc.org/gstreamer-0.10/Gst."
"Pipeline.html\">pipeline element</link> (which will be used as a container "
"for the other two elements). Those are class variables so they are defined "
"outside the method. The pipeline is given the name \"note\"; the source is "
"named \"source\" and is set to the <code>audiotestsrc</code> source; and the "
"sink is named \"output\" and set to the <code>autoaudiosink</code> sink "
"(default sound card output)."
msgstr ""
"Οι τρεις πρώτες γραμμές δημιουργούν τα στοιχεία πηγή και έξοδο του GStreamer "
"(<link href=\"http://valadoc.org/gstreamer-0.10/Gst.Element.html\"><code>Gst."
"Element</code></link>), και ένα <link href=\"http://valadoc.org/"
"gstreamer-0.10/Gst.Pipeline.html\">στοιχείο διοχέτευσης</link> (το οποίο θα "
"χρησιμοποιηθεί σαν περιέκτης για τα δυο άλλα στοιχεία). Αυτά είναι "
"μεταβλητές κλάσεων, έτσι ορίζονται έξω από τη μέθοδο. Δίνουμε το όνομα \"note"
"\" στη διοχέτευση· ονομάζουμε την πηγή \"source\" και ρυθμίζεται στην πηγή "
"<code>audiotestsrc</code>· και ονομάζουμε την έξοδο \"output\" και "
"ρυθμίζεται στην έξοδο <code>autoaudiosink</code> (προεπιλεγμένη έξοδος "
"κάρτας ήχου)."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:184
msgid ""
"The call to <link href=\"http://valadoc.org/gobject-2.0/GLib.Object.set.html"
"\"><code>source.set</code></link> sets the <code>freq</code> property of the "
"source element to <code>frequency</code>, which is passed in as an argument "
"to the <code>play_sound</code> function. This is just the frequency of the "
"note in Hertz; some useful frequencies will be defined later on."
msgstr ""
"Η κλήση στο <link href=\"http://valadoc.org/gobject-2.0/GLib.Object.set.html"
"\"><code>source.set</code></link> ορίζει την ιδιότητα <code>freq</code> του "
"στοιχείου πηγής σε <code>frequency</code>, η οποία έχει περαστεί ως όρισμα "
"στη συνάρτηση <code>play_sound</code>. Αυτή είναι η συχνότητα της νότας σε "
"Hertz· πολλές χρήσιμες συχνότητες θα οριστούν αργότερα."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:187
msgid ""
"<link href=\"http://valadoc.org/gstreamer-0.10/Gst.Bin.add.html"
"\"><code>pipeline.add</code></link> puts the source and sink into the "
"pipeline. The pipeline is a <link href=\"http://valadoc.org/gstreamer-0.10/"
"Gst.Bin.html\"><code>Gst.Bin</code></link>, which is just an element that "
"can contain multiple other GStreamer elements. In general, you can add as "
"many elements as you like to the pipeline by adding more calls to "
"<code>pipeline.add</code>."
msgstr ""
"Το <link href=\"http://valadoc.org/gstreamer-0.10/Gst.Bin.add.html"
"\"><code>pipeline.add</code></link> βάζει την πηγή και την έξοδο στη "
"διοχέτευση. Η διοχέτευση είναι ένα <link href=\"http://valadoc.org/"
"gstreamer-0.10/Gst.Bin.html\"><code>Gst.Bin</code></link>,που είναι απλά ένα "
"στοιχείο που μπορεί να περιέχει πολλαπλά άλλα στοιχεία GStreamer. Γενικά, "
"μπορείτε να προσθέσετε όσα στοιχεία θέλετε στη διοχέτευση προσθέτοντας "
"περισσότερες κλήσεις στο <code>pipeline.add</code>."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:190
msgid ""
"Next, <link href=\"http://valadoc.org/gstreamer-0.10/Gst.Element.link.html"
"\"><code>sink.link</code></link> is used to connect the elements together, "
"so the output of source (a tone) goes into the input of sink (which is then "
"output to the sound card). <link href=\"http://www.valadoc.org/"
"gstreamer-0.10/Gst.Element.set_state.html\"><code>pipeline.set_state</code></"
"link> is then used to start playback, by setting the <link href=\"http://www."
"valadoc.org/gstreamer-0.10/Gst.State.html\">state of the pipeline</link> to "
"playing (<code>Gst.State.PLAYING</code>)."
msgstr ""
"Κατόπιν, το <link href=\"http://valadoc.org/gstreamer-0.10/Gst.Element.link."
"html\"><code>sink.link</code></link> χρησιμοποιείται για σύνδεση των "
"στοιχείων μαζί, έτσι ώστε η έξοδος της πηγής (ένας τόνος) να πηγαίνει στην "
"είσοδο της εξόδου (η οποία μετά είναι έξοδος στην κάρτα ήχου). Το <link href="
"\"http://www.valadoc.org/gstreamer-0.10/Gst.Element.set_state.html"
"\"><code>pipeline.set_state</code></link> χρησιμοποιείται έπειτα για την "
"εκκίνηση της αναπαραγωγής, ρυθμίζοντας την <link href=\"http://www.valadoc."
"org/gstreamer-0.10/Gst.State.html\">κατάσταση της σωλήνωσης</link> να παίξει "
"(<code>Gst.State.PLAYING</code>)."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:193
msgid ""
"We don't want to play an annoying tone forever, so the last thing "
"<code>play_sound</code> does is to add a <link href=\"http://www.valadoc.org/"
"glib-2.0/GLib.TimeoutSource.html\"><code>TimeoutSource</code></link>. This "
"sets a timeout for stopping the sound; it waits for 200 milliseconds before "
"calling a signal handler defined inline that stops and destroys the "
"pipeline. It returns <code>false</code> to remove itself from the timeout, "
"otherwise it would continue to be called every 200 ms."
msgstr ""
"Δεν θέλουμε να παίζουμε έναν ενοχλητικό ήχο για πάντα, οπότε το τελευταίο "
"πράγμα που κάνει ο <code>play_sound</code> είναι να προσθέσει έναν <link "
"href=\"http://www.valadoc.org/glib-2.0/GLib.TimeoutSource.html"
"\"><code>TimeoutSource</code></link>. Αυτό ορίζει ένα χρονικό όριο που θα "
"σταματήσει τον ήχο· περιμένει για 200 ms πριν καλέσει τον χειριστή σήματος "
"που ορίστηκε στη γραμμή που σταματά και καταστρέφει τη διοχέτευση. "
"Επιστρέφει <code>false</code> για να αφαιρέσει την ίδια από το χρονικό όριο, "
"αλλιώς θα συνέχιζε να καλείται κάθε 200 ms."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:204
msgid ""
"In the UI designer, you made it so that all of the buttons will call the "
"same function, <gui>on_button_clicked</gui>, when they are clicked. Actually "
"we type <gui>main_on_button_clicked</gui> which tells the UI designer that "
"this method is part of our <code>Main</code>. We need to add that function "
"in the source file."
msgstr ""
"Στον σχεδιαστή διεπαφών χρήστη, κάνατε όλα τα κουμπιά να καλούν την ίδια "
"συνάρτηση, <gui>on_button_clicked</gui>, όταν πατηθούν. Στην πραγματικότητα, "
"πληκτρολογούμε <gui>main_on_button_clicked</gui> που λέει στον σχεδιαστή UI "
"ότι αυτή η μέθοδος είναι τμήμα του <code>Main</code> μας. Πρέπει να "
"προσθέσουμε αυτή την συνάρτηση στο πηγαίο αρχείο."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:205
msgid ""
"To do this, in the user interface file (guitar_tuner.ui) select one of the "
"buttons by clicking on it, then open <file>guitar_tuner.vala</file> (by "
"clicking on the tab in the center). Switch to the <gui>Signals</gui> tab on "
"the right, which you used to set the signal name. Now take the row where you "
"set the <gui>clicked</gui> signal and drag and drop it into to the source "
"file at the beginning of the class. The following code will be added to your "
"source file:"
msgstr ""
"Για να το κάνετε αυτό, στο αρχείο διεπαφής χρήστη (guitar_tuner.ui), "
"επιλέξτε ένα από τα κουμπιά με κλικ πάνω του, έπειτα ανοίξτε "
"<file>guitar_tuner.vala</file> (με κλικ στην καρτέλα στο κέντρο). Εναλλαγή "
"στην καρτέλα <gui>σήματα</gui> στα δεξιά, που χρησιμοποιήσατε για τον ορισμό "
"του ονόματος αρχείου. Τώρα, πάρτε τη γραμμή όπου ορίσατε το σήμα "
"<gui>πατημένο</gui> και σύρσιμο και απόθεσή του στο πηγαίο αρχείο στην αρχή "
"της κλάσης. Ο παρακάτω κώδικας θα προστεθεί στο πηγαίο σας αρχείο:"

#. (itstool) path: section/code
#: C/guitar-tuner.vala.page:207
#, no-wrap
msgid ""
"\n"
"public void on_button_clicked (Gtk.Button sender) {\n"
"\n"
"}"
msgstr ""
"\n"
"public void on_button_clicked (Gtk.Button sender) {\n"
"\n"
"}"

#. (itstool) path: note/p
#: C/guitar-tuner.vala.page:212
msgid ""
"You can also just type the code at the beginning of the class instead of "
"using the drag and drop."
msgstr ""
"Μπορείτε επίσης να πληκτρολογήσετε απλά των κώδικα στην αρχή της κλάσης αντί "
"της χρήσης συρσίματος και απόθεσης."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:213
msgid ""
"This signal handler has only one argument: the <link href=\"http://valadoc."
"org/gtk+-3.0/Gtk.Widget.html\"><code>Gtk.Widget</code></link> that called "
"the function (in our case, always a <link href=\"http://valadoc.org/gtk+-3.0/"
"Gtk.Button.html\"><code>Gtk.Button</code></link>)."
msgstr ""
"Αυτός ο χειριστής σήματος έχει μόνο ένα όρισμα: το <link href=\"http://"
"valadoc.org/gtk+-3.0/Gtk.Widget.html\"><code>Gtk.Widget</code></link> που "
"κάλεσε η συνάρτηση (στην περίπτωσή μας, πάντοτε ένα <link href=\"http://"
"valadoc.org/gtk+-3.0/Gtk.Button.html\"><code>Gtk.Button</code></link>)."

#. (itstool) path: section/title
#: C/guitar-tuner.vala.page:219
msgid "Define the signal handler"
msgstr "Ορισμός του χειριστή σημάτων"

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:220
msgid ""
"We want to play the correct sound when the user clicks a button. For this, "
"we flesh out the signal handler which we defined above, "
"<code>on_button_clicked</code>. We could have connected every button to a "
"different signal handler, but that would lead to a lot of code duplication. "
"Instead, we can use the label of the button to figure out which button was "
"clicked:"
msgstr ""
"Θέλουμε να παίξουμε τον σωστό ήχο όταν ο χρήστης πατά ένα κουμπί. Για αυτό, "
"ζωντανεύουμε τον χειριστή σήματος που ορίσαμε παραπάνω, "
"<code>on_button_clicked</code>. Θα μπορούσαμε να έχουμε συνδέσει κάθε κουμπί "
"σε διαφορετικό χειριστή σήματος, αλλά αυτό θα μπορούσε να οδηγήσει σε "
"εκτεταμένο διπλασιασμό του κώδικα. Αντίθετα, μπορούμε να χρησιμοποιήσουμε "
"την ετικέτα του κουμπιού για να καταλάβουμε ποιο κουμπί πατήθηκε:"

#. (itstool) path: section/code
#: C/guitar-tuner.vala.page:221
#, no-wrap
msgid ""
"\n"
"public void on_button_clicked (Gtk.Button sender) {\n"
"\tvar label = sender.get_child () as Gtk.Label;\n"
"\tswitch (label.get_label()) {\n"
"\t\tcase \"E\":\n"
"\t\t\tplay_sound (329.63);\n"
"\t\t\tbreak;\n"
"\t\tcase \"A\":\n"
"\t\t\tplay_sound (440);\n"
"\t\t\tbreak;\n"
"\t\tcase \"D\":\n"
"\t\t\tplay_sound (587.33);\n"
"\t\t\tbreak;\n"
"\t\tcase \"G\":\n"
"\t\t\tplay_sound (783.99);\n"
"\t\t\tbreak;\n"
"\t\tcase \"B\":\n"
"\t\t\tplay_sound (987.77);\n"
"\t\t\tbreak;\n"
"\t\tcase \"e\":\n"
"\t\t\tplay_sound (1318);\n"
"\t\t\tbreak;\n"
"\t\tdefault:\n"
"\t\t\tbreak;\n"
"\t}\n"
"}\n"
msgstr ""
"\n"
"public void on_button_clicked (Gtk.Button sender) {\n"
"\tvar label = sender.get_child () as Gtk.Label;\n"
"\tswitch (label.get_label()) {\n"
"\t\tcase \"E\":\n"
"\t\t\tplay_sound (329.63);\n"
"\t\t\tbreak;\n"
"\t\tcase \"A\":\n"
"\t\t\tplay_sound (440);\n"
"\t\t\tbreak;\n"
"\t\tcase \"D\":\n"
"\t\t\tplay_sound (587.33);\n"
"\t\t\tbreak;\n"
"\t\tcase \"G\":\n"
"\t\t\tplay_sound (783.99);\n"
"\t\t\tbreak;\n"
"\t\tcase \"B\":\n"
"\t\t\tplay_sound (987.77);\n"
"\t\t\tbreak;\n"
"\t\tcase \"e\":\n"
"\t\t\tplay_sound (1318);\n"
"\t\t\tbreak;\n"
"\t\tdefault:\n"
"\t\t\tbreak;\n"
"\t}\n"
"}\n"

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:248
msgid ""
"The <code>Gtk.Button</code> that was clicked is passed as an argument "
"(<code>sender</code>) to <code>on_button_clicked</code>. We can get the "
"label of that button by using <code>get_child</code>, and then get the text "
"from that label using <code>get_label</code>."
msgstr ""
"Το <code>Gtk.Button</code> που πατήθηκε περνά ως όρισμα (<code>sender</"
"code>) στο <code>on_button_clicked</code>. Μπορούμε να πάρουμε την ετικέτα "
"αυτού του κουμπιού χρησιμοποιώντας τον <code>get_child</code> και έπειτα να "
"πάρουμε το κείμενο από αυτήν την ετικέτα χρησιμοποιώντας <code>get_label</"
"code>."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:249
msgid ""
"The switch statement compares the label text to the notes that we can play, "
"and <code>play_sound</code> is called with the frequency appropriate for "
"that note. This plays the tone; we have a working guitar tuner!"
msgstr ""
"Η πρόταση διακόπτη συγκρίνει το κείμενο ετικέτας με τις νότες που μπορούμε "
"να παίξουμε και καλείται ο <code>play_sound</code> με την κατάλληλη "
"συχνότητα για αυτήν την νότα. Αυτό παίζει τον τόνο· ο ρυθμιστής κιθάρας "
"είναι έτοιμος!"

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:260
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"guitar-tuner/guitar-tuner.vala\">reference code</link>."
msgstr ""
"Αν αντιμετωπίσετε προβλήματα με το μάθημα, συγκρίνετε τον κώδικά σας με "
"αυτόν τον <link href=\"guitar-tuner/guitar-tuner.vala\">κώδικα αναφοράς</"
"link>."

#. (itstool) path: section/title
#: C/guitar-tuner.vala.page:264 C/magic-mirror.vala.page:157
msgid "Further reading"
msgstr "Περαιτέρω ανάγνωση"

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:265
msgid ""
"To find out more about the Vala programming language you might want to check "
"out the <link href=\"http://live.gnome.org/Vala/Tutorial\">Vala Tutorial</"
"link> and the <link href=\"http://valadoc.org/\">Vala API Documentation</"
"link>"
msgstr ""
"Για να βρείτε περισσότερα για τη γλώσσα προγραμματισμού Vala ίσως θελήσετε "
"να κοιτάξετε το <link href=\"http://live.gnome.org/Vala/Tutorial\">μάθημα "
"Vala</link> και το <link href=\"http://valadoc.org/\">τεκμηρίωση API Vala</"
"link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/hellognome.js.page:65
msgctxt "_"
msgid ""
"external ref='media/hellognomewebapp.png' "
"md5='948efb6148ede3bc6b47b4b0bbe4a74f'"
msgstr ""
"external ref='media/hellognomewebapp.png' "
"md5='948efb6148ede3bc6b47b4b0bbe4a74f'"

#. (itstool) path: info/desc
#: C/hellognome.js.page:17
msgid "Your first GNOME application!"
msgstr "Η πρώτη σας εφαρμογή σε GNOME!"

#. (itstool) path: page/title
#: C/hellognome.js.page:20
msgid "1. Hello, GNOME!"
msgstr "1. Hello, GNOME!"

#. (itstool) path: synopsis/p
#: C/hellognome.js.page:22
msgid ""
"This tutorial will show you how to write your first GNOME application in "
"JavaScript. You will use JavaScript to write for GNOME the same way you "
"would for the web. Afterwards, you will learn how to use \"native\" widgets, "
"to write applications that look and feel like other GNOME apps."
msgstr ""
"Αυτό το μάθημα θα σας δείξει πώς να γράψετε την πρώτη σας εφαρμογή GNOME σε "
"JavaScript. Θα χρησιμοποιήσετε JavaScript για να γράψετε για GNOME με τον "
"ίδιο τρόπο που θα έπρεπε για τον ιστό. Κατόπιν, θα μάθετε πώς να "
"χρησιμοποιήσετε \"native\" γραφικά στοιχεία, για να γράψετε εφαρμογές που "
"δείχνουν και αισθάνονται σαν άλλες εφαρμογές GNOME."

#. (itstool) path: note/p
#: C/hellognome.js.page:23
msgid ""
"Have you gotten GNOME installed on your computer, and <link xref=\"set-up-"
"gedit.js\">gedit</link> set up to write code with? You'll want to do these "
"things first."
msgstr ""
"Έχετε πάρει τον υπολογιστή σας με εγκατεστημένο το GNOME και <link xref="
"\"set-up-gedit.js\">gedit</link> ρυθμισμένο να γράφει κώδικα με ?. Θα θέλετε "
"να κάνετε αυτά τα πράγματα πρώτα."

#. (itstool) path: section/title
#: C/hellognome.js.page:29
msgid "Let's start with a web page"
msgstr "Ας αρχίσουμε με μια ιστοσελίδα"

#. (itstool) path: section/p
#: C/hellognome.js.page:31
msgid ""
"Here's some basic HTML, CSS, and JavaScript code. Does this look familiar?"
msgstr ""
"Ιδού κάποιος βασικός κώδικας HTML, CSS και JavaScript. Σας φαίνεται αυτός "
"οικείος;"

#. (itstool) path: section/code
#: C/hellognome.js.page:32
#, no-wrap
msgid ""
"\n"
"&lt;!DOCTYPE html&gt;\n"
"&lt;html&gt;\n"
"    &lt;head&gt;\n"
"        &lt;title&gt;Hello, GNOME!&lt;/title&gt;\n"
"\n"
"        &lt;!-- Use JavaScript to show a greeting when someone clicks the button --&gt;\n"
"        &lt;script type=\"application/javascript\"&gt;\n"
"        function greeting () {\n"
"            document.getElementById (\"greeting\").innerHTML = (\"O hai!\");\n"
"        }\n"
"        &lt;/script&gt;\n"
"\n"
"        &lt;!-- Very basic CSS style using the GNOME font --&gt;\n"
"        &lt;style type=\"text/css\"&gt;\n"
"            body {\n"
"                font-face: Cantarell, sans-serif;\n"
"                text-align: center; }\n"
"        &lt;/style&gt;\n"
"\n"
"    &lt;/head&gt;\n"
"    &lt;body&gt;\n"
"        &lt;br /&gt; &lt;br /&gt;\n"
"        &lt;button type=\"button\" onclick=\"greeting()\"&gt;Hello, GNOME!&lt;/button&gt;\n"
"\n"
"        &lt;!-- Empty H1 element gets filled in when the button is clicked --&gt;\n"
"        &lt;h1 id=\"greeting\"&gt;&lt;/h1&gt;\n"
"    &lt;/body&gt;\n"
"&lt;/html&gt;\n"
msgstr ""
"\n"
"&lt;!DOCTYPE html&gt;\n"
"&lt;html&gt;\n"
"    &lt;head&gt;\n"
"        &lt;title&gt;Hello, GNOME!&lt;/title&gt;\n"
"\n"
"        &lt;!-- Use JavaScript to show a greeting when someone clicks the button --&gt;\n"
"        &lt;script type=\"application/javascript\"&gt;\n"
"        function greeting () {\n"
"            document.getElementById (\"greeting\").innerHTML = (\"O hai!\");\n"
"        }\n"
"        &lt;/script&gt;\n"
"\n"
"        &lt;!-- Very basic CSS style using the GNOME font --&gt;\n"
"        &lt;style type=\"text/css\"&gt;\n"
"            body {\n"
"                font-face: Cantarell, sans-serif;\n"
"                text-align: center; }\n"
"        &lt;/style&gt;\n"
"\n"
"    &lt;/head&gt;\n"
"    &lt;body&gt;\n"
"        &lt;br /&gt; &lt;br /&gt;\n"
"        &lt;button type=\"button\" onclick=\"greeting()\"&gt;Hello, GNOME!&lt;/button&gt;\n"
"\n"
"        &lt;!-- Empty H1 element gets filled in when the button is clicked --&gt;\n"
"        &lt;h1 id=\"greeting\"&gt;&lt;/h1&gt;\n"
"    &lt;/body&gt;\n"
"&lt;/html&gt;\n"

#. (itstool) path: section/p
#: C/hellognome.js.page:63
msgid ""
"Let's save this as <file>hellognome.html</file>, and see what it looks like "
"when we run it!"
msgstr ""
"Ας το αποθηκεύσουμε ως <file>hellognome.html</file> και να δούμε πώς "
"φαίνεται όταν τον εκτελούμε!"

#. (itstool) path: section/p
#: C/hellognome.js.page:67
msgid ""
"You <em>can</em> run the above code by opening <file>hellognome.html</file> "
"in a web browser. But here, we're going to create a GNOME application that "
"runs our web app inside of it, just like you see in the screenshot. You'll "
"be able to resize and maximize the window, and click the X in the corner to "
"close it, just like you'd expect from any other GNOME app. The difference is "
"that this one will run our web code inside of it."
msgstr ""
"<em>Μπορείτε</em> να εκτελέσετε τον παραπάνω κώδικα ανοίγοντας το "
"<file>hellognome.html</file> σε έναν περιηγητή ιστού. Αλλά εδώ, πρόκειται να "
"δημιουργήσουμε μια εφαρμογή GNOME που τρέχει την εφαρμογή ιστού μας μέσα "
"του, ακριβώς όπως βλέπετε στο στιγμιότυπο. Θα μπορέσετε να αυξομειώσετε και "
"να μεγιστοποιήσετε το παράθυρο και πατώντας το Χ στη γωνία να το κλείσετε, "
"ακριβώς όπως θα περιμένατε από κάθε άλλη εφαρμογή GNOME. Η διαφορά είναι ότι "
"αυτό θα εκτελέσει τον κώδικα του ιστού μέσα του."

#. (itstool) path: section/p
#: C/hellognome.js.page:68
msgid ""
"The best part? We're going to continue to use JavaScript, to write all the "
"parts that make our app work with GNOME. Let's look at the code, and see how "
"it's done!"
msgstr ""
"Το άριστο μέρος; Πρόκειται να συνεχίσουμε να χρησιμοποιούμε JavaScript, να "
"γράψουμε όλα τα μέρη που κάνουν την εφαρμογή μας να δουλεύει με GNOME. Ας "
"κοιτάξουμε τον κώδικα και ας δούμε πώς τελειώνει!"

#. (itstool) path: section/title
#: C/hellognome.js.page:72
msgid "Creating a GNOME window to frame our web app"
msgstr "Δημιουργία ενός παραθύρου GNOME ως πλαισίου για την εφαρμογή μας"

#. (itstool) path: section/p
#: C/hellognome.js.page:74
msgid ""
"First, we need to tell GNOME that this is a JavaScript application, which "
"uses gjs. Gjs is GNOME's way of turning your JavaScript code into "
"instructions it understands, so this line always has to go at the start of "
"your applications."
msgstr ""
"Πρώτα, χρειαζόμαστε να πούμε στο GNOME ότι αυτή είναι μια εφαρμογή "
"JavaScript, που χρησιμοποιεί gjs. Gjs είναι ένας τρόπος του GNOME να "
"μετατρέπει τον κώδικα σας JavaScript σε οδηγίες που καταλαβαίνει, έτσι αυτή "
"η γραμμή πρέπει πάντα να πηγαίνει στην αρχή των εφαρμογών σας."

#. (itstool) path: section/code
#: C/hellognome.js.page:75
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
msgstr ""
"\n"
"#!/usr/bin/gjs\n"

#. (itstool) path: section/p
#: C/hellognome.js.page:78
msgid "After that, we need to tell GNOME which libraries we want to import."
msgstr ""
"Μετά από αυτό, χρειαζόμαστε να πούμε στο GNOME ποιες βιβλιοθήκες θέλουμε να "
"εισάγουμε."

#. (itstool) path: section/code
#: C/hellognome.js.page:79
#, no-wrap
msgid ""
"\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"const Webkit = imports.gi.WebKit;\n"
msgstr ""
"\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"const Webkit = imports.gi.WebKit;\n"

#. (itstool) path: section/p
#: C/hellognome.js.page:85
msgid ""
"Just like how add-on libraries like jQuery let us do extra things with "
"JavaScript, each of these libraries gives us new capabilities for our GNOME "
"apps:"
msgstr ""
"Πώς πρόσθετες βιβλιοθήκες όπως η jQuery μας επιτρέπουν να κάνουμε πρόσθετα "
"πράγματα με την JavaScript, καθεμιά από αυτές τις βιβλιοθήκες μας δίνει νέες "
"δυνατότητες για τις εφαρμογές μας στο GNOME:"

#. (itstool) path: item/p
#: C/hellognome.js.page:87
msgid ""
"<file>Gtk</file> and <file>Lang</file> are basic parts of any GNOME "
"application, which let you create windows and widgets and tie them together."
msgstr ""
"<file>Gtk</file> και <file>Lang</file> είναι βασικά μέρη κάθε εφαρμογής "
"GNOME, που σας επιτρέπει να δημιουργήσετε παράθυρα και γραφικά στοιχεία και "
"να τα συνδέσετε μαζί."

#. (itstool) path: item/p
#: C/hellognome.js.page:88
msgid ""
"<file>GLib</file> is a helper library, which lets us do things like tell "
"GNOME where the <file>hellognome.html</file> file we created is."
msgstr ""
"Η <file>GLib</file> είναι μια βοηθητική βιβλιοθήκη, που επιτρέπει να κάνετε "
"πράγματα όπως να πείτε στο GNOME πού είναι το αρχείο <file>hellognome.html</"
"file>που δημιουργήσαμε."

#. (itstool) path: item/p
#: C/hellognome.js.page:89
msgid ""
"And <file>Webkit</file> is a web rendering engine, which we'll use to "
"basically create a browser window to open our HTML file with."
msgstr ""
"Και το <file>Webkit</file> είναι μια μηχανή απόδοσης ιστού, που θα "
"χρησιμοποιήσουμε για να δημιουργήσουμε βασικά ένα παράθυρο περιηγητή για να "
"ανοίξουμε το αρχείο μας HTML."

#. (itstool) path: section/p
#: C/hellognome.js.page:92
msgid "Now we create the application itself:"
msgstr "Τώρα δημιουργούμε την ίδια την εφαρμογή:"

#. (itstool) path: section/code
#: C/hellognome.js.page:93
#, no-wrap
msgid ""
"\n"
"const HelloGNOME = new Lang.Class ({\n"
"    Name: 'Hello GNOME',\n"
msgstr ""
"\n"
"const HelloGNOME = new Lang.Class ({\n"
"    Name: 'Hello GNOME',\n"

#. (itstool) path: section/p
#: C/hellognome.js.page:97
msgid ""
"This will look familiar to you if you've worked with object-oriented "
"JavaScript before. That's right; our whole application is a class called "
"HelloGNOME. And as you can see, we've given it a property that says what its "
"name is."
msgstr ""
"Αυτό θα δείχνει οικείο σε σας εάν έχετε δουλέψει με αντικειμενοστραφή "
"JavaScript πριν. Αυτό είναι σωστό· όλη μας η εφαρμογή είναι μια κλάση που "
"λέγεται HelloGNOME. Και όπως μπορείτε να δείτε, της δώσαμε μια ιδιότητα που "
"λέει ποιο είναι το όνομά της."

#. (itstool) path: section/code
#: C/hellognome.js.page:99
#, no-wrap
msgid ""
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ();\n"
"\n"
"        // Σύνδεση των σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/hellognome.js.page:119
msgid ""
"Here's some code you will more or less copy-and-paste for every JavaScript "
"application you build. It creates a new Application, and then binds its "
"activate and startup signals to functions that make the window show itself "
"and build its user interface, respectively."
msgstr ""
"Ιδού μερικός κώδικας που περισσότερο ή λιγότερο θα αντιγράψετε και θα "
"επικολλήσετε για κάθε εφαρμογή JavaScript που κατασκευάζετε. Δημιουργεί μια "
"νέα εφαρμογή και έπειτα συνδέει τα ενεργοποιημένα και αρχικά σήματα της με "
"συναρτήσεις που κάνουν το παράθυρο να εμφανίζεται το ίδιο και να "
"κατασκευάζει τη διεπαφή χρήστη της αντίστοιχα."

#. (itstool) path: section/p
#: C/hellognome.js.page:120
msgid ""
"What does that mean? Well, everything in a GNOME application sends out a "
"signal when something important happens. A button might send out the clicked "
"signal when you click on it, for instance. Our job is to connect the signals "
"to functions which handle them, and make the things that we want to have "
"happen occur. We do this using each object's connect method, which takes two "
"arguments: The signal we want to handle, and the Lang.bind function, which "
"we have to use to tell connect which function we want to have handle the "
"signal."
msgstr ""
"Τι σημαίνει αυτό; Λοιπόν, το καθετί σε μια εφαρμογή GNOME στέλνει ένα σήμα "
"όταν κάτι σημαντικό συμβαίνει. Ένα κουμπί μπορεί να στέλνει το πατημένο σήμα "
"όταν το πατάτε, για παράδειγμα. Η δουλειά μας είναι να συνδέσουμε τα σήματα "
"με τις συναρτήσεις που τις χειρίζονται και να κάνουμε τα πράγματα που "
"θέλουμε να έχουν συμβεί να γίνουν. Το κάνουμε χρησιμοποιώντας τη μέθοδο "
"σύνδεσης κάθε αντικειμένου, που παίρνει δύο ορίσματα: Το σήμα που θέλουμε να "
"χειριστούμε και τη συνάρτηση Lang.bind, που πρέπει να χρησιμοποιήσουμε για "
"να πούμε στη σύνδεση ποια συνάρτηση θέλουμε να χειριστεί το σήμα."

#. (itstool) path: section/p
#: C/hellognome.js.page:121
msgid ""
"In this case, we want _onActivate to handle the activate signal, and "
"_onStartup to handle the startup signal. _onActivate just tells the window "
"to present itself; so basically, whenever you <keyseq><key>Alt</key> "
"<key>Tab</key></keyseq> to the application it appears, like you would expect "
"it to. _onStartup calls _buildUI, which is the function that creates our "
"user interface and is the next part that we will look at."
msgstr ""
"Σε αυτήν την περίπτωση, θέλουμε την _onActivate να χειριστεί το "
"ενεργοποιημένο σήμα και το _onStartup να χειριστεί το αρχικό σήμα. Η "
"_onActivate απλά λέει στο παράθυρο να παρουσιάσει τον εαυτόν του· έτσι "
"βασικά, όποτε πατάτε <keyseq><key>Alt</key> <key>Tab</key></keyseq> στην "
"εφαρμογή φαίνεται, όπως θα το περιμένατε. Η _onStartup καλεί _buildUI, που "
"είναι η συνάρτηση που δημιουργεί τη διεπαφή χρήστη μας και είναι το επόμενο "
"μέρος που θα κοιτάξουμε."

#. (itstool) path: note/p
#: C/hellognome.js.page:122
msgid ""
"When you copy and paste the above code for your own applications, be sure to "
"change the name to a unique one each time."
msgstr ""
"Όταν αντιγράφετε και επικολλάτε τον παραπάνω κώδικα για τις δικές σας "
"εφαρμογές, βεβαιωθείτε να αλλάξετε το όνομα σε ένα μοναδικό κάθε φορά."

#. (itstool) path: section/title
#: C/hellognome.js.page:126
msgid "Designing our window's UI"
msgstr "Σχεδίαση της UI του παραθύρου μας"

#. (itstool) path: section/p
#: C/hellognome.js.page:127
msgid ""
"In the _buildUI function, we're going to tell GNOME about our window and the "
"things inside it, one at a time. After that, we're going to connect "
"everything together and put it all on display."
msgstr ""
"Στη συνάρτηση _buildUI, πρόκειται να πούμε στο GNOME για το παράθυρό μας και "
"τα πράγματα μέσα του, ένα τη φορά. Μετά από αυτό, πρόκειται να συνδέσουμε το "
"καθετί μαζί και να το βάλουμε όλο σε προβολή."

#. (itstool) path: section/code
#: C/hellognome.js.page:129
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            window_position: Gtk.WindowPosition.CENTER });\n"
msgstr ""
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function () {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            window_position: Gtk.WindowPosition.CENTER });\n"

#. (itstool) path: section/p
#: C/hellognome.js.page:142
msgid ""
"The first object we create is an ApplicationWindow. It needs a title to go "
"in the title bar, and its application property needs to be the application "
"that we created, above. Beyond that, there are various ways of customizing "
"how it looks, which the <link xref=\"GtkApplicationWindow.js"
"\">ApplicationWindow</link> reference page will go into more detail about. "
"As you can see here, we gave it a default height and width (measured in "
"pixels), and told GNOME we want our window to appear in the center of the "
"screen."
msgstr ""
"Το πρώτο αντικείμενο που δημιουργούμε είναι ένα ApplicationWindow. "
"Χρειάζεται έναν τίτλο να μπει στη γραμμή τίτλου και η ιδιότητα εφαρμογής του "
"χρειάζεται να είναι η εφαρμογή που δημιουργήσαμε, παραπάνω. Πέρα από αυτό, "
"υπάρχουν ποικίλοι τρόποι προσαρμογής της εμφάνισης του, που η σελίδα "
"αναφοράς <link xref=\"GtkApplicationWindow.js\">ApplicationWindow</link> θα "
"μπει σε περισσότερες λεπτομέρειες. Όπως μπορείτε να δείτε εδώ, του δίνουμε "
"ένα προεπιλεγμένο ύψος και πλάτος (μετρημένο σε εικονοστοιχεία) και λέμε στο "
"GNOME ότι θέλουμε το παράθυρο μας να εμφανιστεί στο κέντρο της οθόνης."

#. (itstool) path: section/code
#: C/hellognome.js.page:143
#, no-wrap
msgid ""
"\n"
"        // Create a webview to show the web app\n"
"        this._webView = new Webkit.WebView ();\n"
"\n"
"        // Put the web app into the webview\n"
"        this._webView.load_uri (GLib.filename_to_uri (GLib.get_current_dir() +\n"
"            \"/hellognome.html\", null));\n"
msgstr ""
"\n"
"        // Δημιουργία μιας προβολής ιστού για προβολή της εφαρμογής ιστού\n"
"        this._webView = new Webkit.WebView ();\n"
"\n"
"        // Τοποθέτηση της εφαρμογής ιστού στην προβολή ιστού\n"
"        this._webView.load_uri (GLib.filename_to_uri (GLib.get_current_dir() +\n"
"            \"/hellognome.html\", null));\n"

#. (itstool) path: section/p
#: C/hellognome.js.page:151
msgid ""
"Remember how we imported Webkit right at the start? Here we're creating a "
"new instance of a Webkit class called a WebView, which is more or less a "
"browser window you can put inside of your app. After that, we then give it "
"the URI that we want it to load when the application starts up."
msgstr ""
"Να θυμάστε πώς εισάγαμε το Webkit δεξιά στην αρχή. Εδώ δημιουργούμε ένα νέο "
"στιγμιότυπο της κλάσης Webkit που λέγεται μια WebView, που είναι περισσότερο "
"ή λιγότερο ένα παράθυρο περιηγητή όπου μπορείτε να βάλετε μέσα την εφαρμογή "
"σας. Μετά από αυτό, του δίνουμε έπειτα την URI που θέλουμε να φορτώσει όταν "
"η εφαρμογή ξεκινά."

#. (itstool) path: section/p
#: C/hellognome.js.page:152
msgid ""
"We <em>could</em> just give it a web URI, like <link href=\"http://gnome.org"
"\">http://gnome.org</link>. Instead, here we use a couple of GLib helper "
"functions to tell the WebView where our <file>hellognome.html</file> file "
"is. GLib.get_current_dir returns the directory that our app's running in, "
"and GLib.filename_to_uri turns our file's path and filename into a URI that "
"the WebView's load_uri function understands. (filename_to_uri's second "
"parameter should be null unless you know what it's used for and have a "
"reason for changing it.)"
msgstr ""
"Θα <em>μπορούσαμε</em> να του δώσουμε μόνο μια URI ιστού, όπως <link href="
"\"http://gnome.org\">http://gnome.org</link>. Αντίθετα, εδώ χρησιμοποιούμε "
"λίγες βοηθητικές συναρτήσεις του GLib για να πούμε στο WebView που είναι το "
"αρχείο μας <file>hellognome.html</file>. Ο GLib.get_current_dir επιστρέφει "
"τον κατάλογο που εκτελείται η εφαρμογή μας και το GLib.filename_to_uri "
"επιστρέφει τη διαδρομή του αρχείου μας και το όνομα αρχείου σε μια URI που η "
"συνάρτηση load_uri της WebView καταλαβαίνει. (η δεύτερη παράμετρος "
"filename_to_uri's πρέπει να είναι μηδέν εκτός και ξέρετε τι χρησιμοποιείται "
"και έχετε έναν λόγο να το αλλάξετε.)"

#. (itstool) path: section/code
#: C/hellognome.js.page:153
#, no-wrap
msgid ""
"\n"
"        // Put the webview into the window\n"
"        this._window.add (this._webView);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"});\n"
msgstr ""
"\n"
"        // Τοποθέτηση της προβολής ιστού στο παράθυρο\n"
"        this._window.add (this._webView);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/hellognome.js.page:163
msgid ""
"Each window can hold one, and only one, widget. Normally, we'd use a "
"container widget like a <link xref=\"grid.js\">Grid</link> to put multiple "
"widgets into, then use the window's add function to add the Grid to it. "
"Here, we just need the WebView, so that's all we add to the window. After "
"that, as the last part of the _buildUI function that creates our window, we "
"tell the window to show itself and its contents."
msgstr ""
"Κάθε παράθυρο μπορεί να κρατήσει ένα και μόνο ένα γραφικό στοιχείο. "
"Κανονικά, θα πρέπει να χρησιμοποιήσουμε έναν περιέκτη γραφικού στοιχείου "
"όπως ένα <link xref=\"grid.js\">πλέγμα</link> για να βάλουμε πολλαπλά "
"γραφικά στοιχεία σε αυτό, έπειτα χρησιμοποιήστε τη συνάρτηση προσθήκης "
"παραθύρου για να προσθέσετε το πλέγμα σε αυτό. Εδώ, προσθέτουμε απλά την "
"WebView, έτσι ώστε να είναι ότι προσθέτουμε στο παράθυρο. Μετά από αυτό, ως "
"το τελευταίο μέρος της συνάρτησης _buildUI που δημιουργεί το παράθυρο μας, "
"λέμε στο παράθυρο να εμφανίσει τον εαυτόν του και τα περιεχόμενά του."

#. (itstool) path: section/code
#: C/hellognome.js.page:164
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new HelloGNOME ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new HelloGNOME ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/hellognome.js.page:169
msgid ""
"Finally, we create a new instance of our HelloGNOME class, and tell GNOME to "
"run it."
msgstr ""
"Τελικά, δημιουργούμε ένα νέο στιγμιότυπο της κλάσης HelloGNOME και λέμε στο "
"GNOME να εκτελέσει την εφαρμογή."

#. (itstool) path: section/title
#: C/hellognome.js.page:173
msgid "Running your GNOME application"
msgstr "Εκτέλεση της εφαρμογής σας GNOME"

#. (itstool) path: section/p
#: C/hellognome.js.page:175
msgid ""
"Now that we've created our first GNOME application, it's time to test it "
"out! You don't need to compile your app or install any special software for "
"this; GNOME has gjs built in, to let it run GNOME Shell. Just save "
"<file>hellognome.html</file> and our actual application, <file>hellognome."
"js</file>, to a directory you can get to with the terminal. (They usually "
"open onto your home directory, the one that's called by your username.) "
"After that, open a terminal, go there, and type:"
msgstr ""
"Τώρα που έχουμε δημιουργήσει την πρώτη μας εφαρμογή GNOME, είναι καιρός να "
"τη δοκιμάσουμε! Δεν χρειάζεται να μεταγλωττίσετε την εφαρμογή σας ή να "
"εγκαταστήσετε οποιοδήποτε ειδικό λογισμικό για αυτό· το GNOME έχει "
"ενσωματωμένο το gjs για να μπορέσετε να εκτελέσετε το κέλυφος GNOME. Απλά "
"αποθηκεύστε το <file>hellognome.html</file> και την ενεργή μας εφαρμογή, "
"<file>hellognome.js</file>, σε έναν κατάλογο που μπορείτε να πάρετε με το "
"τερματικό. (Συνήθως ανοίγουν στον προσωπικό σας κατάλογο, αυτόν που "
"ονομάζεται με το όνομα σας του χρήστη.) Μετά από αυτό, ανοίξτε ένα "
"τερματικό, πηγαίνετε εκεί και πληκτρολογήστε:"

#. (itstool) path: section/screen
#: C/hellognome.js.page:176
#, no-wrap
msgid " <output style=\"prompt\">$ </output>gjs hellognome.js "
msgstr " <output style=\"prompt\">$ </output>gjs hellognome.js "

#. (itstool) path: section/p
#: C/hellognome.js.page:177
msgid ""
"You should see more or less the same screenshot as before, with a button "
"that you can click to make a short message appear."
msgstr ""
"Θα πρέπει να δείτε πάνω κάτω το ίδιο στιγμιότυπο όπως πριν, με ένα κουμπί "
"όπου μπορείτε να πατήσετε για να προκαλέσετε την εμφάνιση ενός σύντομου "
"μηνύματος."

#. (itstool) path: note/p
#: C/hellognome.js.page:180
msgid "You can use the terminal command"
msgstr "Μπορείτε να χρησιμοποιήσετε την εντολή τερματικού"

#. (itstool) path: note/screen
#: C/hellognome.js.page:181
#, no-wrap
msgid " <output style=\"prompt\">$ </output>cd <var>(directory name)</var> "
msgstr " <output style=\"prompt\">$ </output>cd <var>(directory name)</var> "

#. (itstool) path: note/p
#: C/hellognome.js.page:182
msgid ""
"to navigate between directories inside the Terminal, in order to get to "
"where you saved the files. There is also an extension for Nautilus, GNOME's "
"file manager, which lets you right-click anywhere inside it to open a "
"terminal window right there. Check the app you use to install new software "
"(like Add/Remove Programs or the Software Center) for it."
msgstr ""
"για να περιηγηθείτε μεταξύ καταλόγων μες τον τερματικό, για να δείτε πού "
"αποθηκεύσατε τα αρχεία. Υπάρχει επίσης μια επέκταση για τον Ναυτίλο, τον "
"διαχειριστή αρχείων του GNOME, που σας επιτρέπει με δεξί κλικ οπουδήποτε "
"μέσα του να ανοίξετε ένα τερματικό παράθυρο ακριβώς εκεί. Ελέγξτε την "
"εφαρμογή που χρησιμοποιείτε για την εγκατάσταση νέου λογισμικού (όπως "
"προσθήκη/αφαίρεση προγραμμάτων στο κέντρο λογισμικού) για αυτό."

#. (itstool) path: section/p
#: C/hellognome.js.page:189
msgid ""
"<link xref=\"02_welcome_to_the_grid.js\">Continue on to the next tutorial</"
"link> to learn how to build \"native\" GNOME applications that look and feel "
"like the others, instead of a webview with HTML code inside. Or take a look "
"at some <link xref=\"beginner.js#samples\">code samples</link>, if you'd "
"like to see example code for each Gtk widget."
msgstr ""
"<link xref=\"02_welcome_to_the_grid.js\">Συνεχίστε με το επόμενο μάθημα</"
"link> για να μάθετε πώς να δομήσετε \"native\" εφαρμογές GNOME που φαίνονται "
"και αισθάνονται όπως οι άλλες, αντίθετα από μια προβολή ιστού με κώδικα HTML "
"μέσα της. Ή ρίξτε μια ματιά σε κάποια <link xref=\"beginner.js#samples"
"\">δείγματα κώδικα</link>, εάν θα θέλατε να δείτε τον κώδικα του "
"παραδείγματος για κάθε γραφικό στοιχείο Gtk."

#. (itstool) path: section/p
#: C/hellognome.js.page:190
msgid ""
"Finally, if you want to just build GNOME applications using JavaScript "
"libraries designed for the web, you can basically stop here and go do that! "
"Check out <link xref=\"beginner.js#tutorials\">the later tutorials</link> if "
"you'd like to see how to create a .desktop file for your application, which "
"will let it appear in your desktop's Activities menu with all your other "
"apps."
msgstr ""
"Τελικά, εάν θέλετε να κατασκευάσετε απλά εφαρμογές GNOME χρησιμοποιώντας "
"βιβλιοθήκες JavaScript που σχεδιάστηκαν για τον ιστό, μπορείτε βασικά να "
"σταματήσετε εδώ και να πάτε να το κάνετε! Ελέγξετε <link xref=\"beginner."
"js#tutorials\">τα τελευταία μαθήματα</link> εάν θα θέλατε να δείτε τη "
"δημιουργία ενός αρχείου .desktop για την εφαρμογή σας, που θα επιτρέψει την "
"εμφάνισή του στο μενού ενεργειών της επιφάνειας εργασίας σας με όλες τις "
"άλλες εφαρμογές σας."

#. (itstool) path: section/code
#: C/hellognome.js.page:195
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"const Webkit = imports.gi.WebKit;\n"
"\n"
"const HelloGNOME = new Lang.Class ({\n"
"    Name: 'Hello GNOME',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            window_position: Gtk.WindowPosition.CENTER });\n"
"\n"
"        // Create a webview to show the web app\n"
"        this._webView = new Webkit.WebView ();\n"
"\n"
"        // Put the web app into the webview\n"
"        this._webView.load_uri (GLib.filename_to_uri (GLib.get_current_dir() +\n"
"            \"/hellognome.html\", null));\n"
"\n"
"        // Put the webview into the window\n"
"        this._window.add (this._webView);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new HelloGNOME ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"const Webkit = imports.gi.WebKit;\n"
"\n"
"const HelloGNOME = new Lang.Class ({\n"
"    Name: 'Hello GNOME',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ();\n"
"\n"
"        // Σύνδεση των σημάτων 'activate' και 'startup' στις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function () {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            window_position: Gtk.WindowPosition.CENTER });\n"
"\n"
"        // Δημιουργία μιας προβολής ιστού για προβολή της εφαρμογής  ιστού\n"
"        this._webView = new Webkit.WebView ();\n"
"\n"
"        // Το ποθέτηση της εφαρμογής ιστού στην προβολή ιστού\n"
"        this._webView.load_uri (GLib.filename_to_uri (GLib.get_current_dir() +\n"
"            \"/hellognome.html\", null));\n"
"\n"
"        // Τοποθέτηση της προβολής ιστού στο παράθυρο\n"
"        this._window.add (this._webView);\n"
"\n"
"        // Εμφάνιση του παραθύρου κι όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new HelloGNOME ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/hello-world.c.page:28 C/hello-world.js.page:28 C/hello-world.py.page:28
#: C/hello-world.vala.page:28
msgctxt "_"
msgid ""
"external ref='media/hello-world.png' md5='4c88a27211dfd1b33e504c9f78602f2d'"
msgstr ""
"external ref='media/hello-world.png' md5='4c88a27211dfd1b33e504c9f78602f2d'"

#. (itstool) path: info/title
#: C/hello-world.c.page:9
msgctxt "text"
msgid "Hello World (C)"
msgstr "Hello World (C)"

#. (itstool) path: info/desc
#: C/hello-world.c.page:24 C/hello-world.js.page:24 C/hello-world.py.page:24
#: C/hello-world.vala.page:24
msgid "A basic \"hello, world\" application"
msgstr "Μια βασική εφαρμογή \"hello, world\""

#. (itstool) path: page/title
#: C/hello-world.c.page:27 C/hello-world.js.page:27 C/hello-world.py.page:27
#: C/hello-world.vala.page:27
msgid ""
"How to build, install and create a <file>tar.xz</file> of a Hello World "
"program"
msgstr ""
"Πώς να κατασκευάσετε, να εγκαταστήσετε και να δημιουργήσετε ένα <file>tar."
"xz</file> ενός προγράμματος Hello World"

#. (itstool) path: synopsis/p
#: C/hello-world.c.page:30 C/hello-world.js.page:30 C/hello-world.py.page:30
#: C/hello-world.vala.page:30
msgid "This tutorial will demonstrate how to:"
msgstr "Αυτό το μάθημα θα δείξει πώς να:"

#. (itstool) path: item/p
#: C/hello-world.c.page:32 C/hello-world.vala.page:32
msgid "create a small \"Hello, World\" application using GTK+"
msgstr "δημιουργήσετε μια μικρή εφαρμογή \"Hello, World\" χρησιμοποιώντας GTK+"

#. (itstool) path: item/p
#: C/hello-world.c.page:33 C/hello-world.js.page:33 C/hello-world.py.page:33
#: C/hello-world.vala.page:33
msgid "make the <file>.desktop</file> file"
msgstr "κάνετε το αρχείο <file>.desktop</file>"

#. (itstool) path: item/p
#: C/hello-world.c.page:34 C/hello-world.js.page:34 C/hello-world.py.page:34
#: C/hello-world.vala.page:34
msgid "how to set up the build system"
msgstr "ρυθμίσετε το σύστημα δόμησης"

#. (itstool) path: section/title
#: C/hello-world.c.page:40 C/hello-world.js.page:42 C/hello-world.py.page:42
#: C/hello-world.vala.page:40
msgid "Create the program"
msgstr "Δημιουργήστε το πρόγραμμα"

#. (itstool) path: section/code
#: C/hello-world.c.page:45
#, no-wrap
msgid "#include &lt;gtk/gtk.h&gt;\n"
msgstr "#include &lt;gtk/gtk.h&gt;\n"

#. (itstool) path: section/code
#: C/hello-world.c.page:50
#, no-wrap
msgid ""
"static void\n"
"activate (GtkApplication* app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Hello World\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 100);\n"
"  gtk_widget_show_all (window);\n"
"}\n"
msgstr ""
"static void\n"
"activate (GtkApplication* app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window·\n"
"\n"
"  window = gtk_application_window_new (app)·\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Hello World\")·\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 100)·\n"
"  gtk_widget_show_all (window)·\n"
"}\n"

#. (itstool) path: section/p
#: C/hello-world.c.page:63 C/hello-world.js.page:92
msgid ""
"GtkApplication initializes GTK+. It also connects the <gui>x</gui> button "
"that's automatically generated along with the window to the \"destroy\" "
"signal."
msgstr ""
"Η GtkApplication αρχικοποιεί το GTK+. Επίσης συνδέει το κουμπί <gui>x</gui> "
"που δημιουργείται αυτόματα μαζί με το παράθυρο στο σήμα \"destroy\"."

#. (itstool) path: section/p
#: C/hello-world.c.page:64
msgid ""
"We can start building our first window. We do this by creating a variable "
"called <var>window</var> and assigning it a gtk_application_window_new"
msgstr ""
"Μπορούμε να αρχίσουμε να κατασκευάζουμε το πρώτο μας παράθυρο. Αυτό το "
"κάνουμε δημιουργώντας μια μεταβλητή που λέγεται <var>window</var> και της "
"αποδίδουμε ένα gtk_application_window_new"

#. (itstool) path: section/p
#: C/hello-world.c.page:65
msgid ""
"The window title can be any string you want it to be. To be on the safe "
"side, it's best to stick to UTF-8 encoding."
msgstr ""
"Ο τίτλος του παραθύρου μπορεί να είναι οποιαδήποτε επιθυμητή συμβολοσειρά. "
"Για να είσαστε ασφαλείς, είναι καλύτερο να επιλέξετε την κωδικοποίηση UTF-8."

#. (itstool) path: section/p
#: C/hello-world.c.page:66 C/hello-world.js.page:95 C/hello-world.py.page:74
#: C/hello-world.vala.page:57
msgid ""
"Now we have a window which has a title and a working \"close\" button. Let's "
"add the actual \"Hello World\" text."
msgstr ""
"Τώρα έχουμε ένα παράθυρο που έχει τίτλο και ένα λειτουργικό κουμπί \"close"
"\". Ας προσθέσουμε το ενεργό κείμενο \"Hello world\"."

#. (itstool) path: section/title
#: C/hello-world.c.page:69 C/hello-world.js.page:98 C/hello-world.py.page:77
#: C/hello-world.vala.page:60
msgid "Label for the window"
msgstr "Ετικέτα για το παράθυρο"

#. (itstool) path: section/code
#: C/hello-world.c.page:70
#, no-wrap
msgid ""
"GtkWidget *label;\n"
"\n"
"  label = gtk_label_new (\"Hello World!\");\n"
"  gtk_container_add (GTK_CONTAINER (window), label);\n"
msgstr ""
"GtkWidget *label·\n"
"\n"
"  label = gtk_label_new (\"Hello World!\")·\n"
"  gtk_container_add (GTK_CONTAINER (window), label)·\n"

#. (itstool) path: section/p
#: C/hello-world.c.page:76 C/hello-world.vala.page:65
msgid "Finally, we create and run the application:"
msgstr "Τελικά, δημιουργούμε και εκτελούμε την εφαρμογή:"

#. (itstool) path: section/code
#: C/hello-world.c.page:78
#, no-wrap
msgid ""
"int\n"
"main (int    argc,\n"
"      char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (NULL, G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}"
msgstr ""
"int\n"
"main (int    argc,\n"
"      char **argv)\n"
"{\n"
"  GtkApplication *app·\n"
"  int status·\n"
"\n"
"  app = gtk_application_new (NULL, G_APPLICATION_FLAGS_NONE)·\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL)·\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv)·\n"
"  g_object_unref (app)·\n"
"\n"
"  return status·\n"
"}"

#. (itstool) path: section/p
#: C/hello-world.c.page:93
msgid ""
"GtkApplicationWindow can only hold one widget at a time. To construct more "
"elaborate programs you need to create a holder widget like GtkGrid inside "
"the window, and then add all the other widgets to it."
msgstr ""
"Το GtkApplicationWindow μπορεί να κρατήσει μόνο ένα γραφικό στοιχείο τη "
"φορά. Για κατασκευή πιο περίπλοκων προγραμμάτων χρειαζόσαστε τη δημιουργία "
"ενός χειριστή γραφικού στοιχείου όπως GtkGrid μέσα στο παράθυρο και έπειτα "
"να προσθέσετε όλα τα άλλα γραφικά στοιχεία σε αυτό."

#. (itstool) path: section/title
#: C/hello-world.c.page:97
msgid "hello-world.c"
msgstr "hello-world.c"

#. (itstool) path: section/p
#: C/hello-world.c.page:98 C/hello-world.js.page:115 C/hello-world.py.page:102
#: C/hello-world.vala.page:76
msgid "The complete file:"
msgstr "Το πλήρες αρχείο:"

#. (itstool) path: section/code
#: C/hello-world.c.page:99
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication* app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  label = gtk_label_new (\"Hello GNOME!\");\n"
"  gtk_container_add (GTK_CONTAINER (window), label);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Welcome to GNOME\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 100);\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int    argc,\n"
"      char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (NULL, G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication* app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window·\n"
"  GtkWidget *label·\n"
"\n"
"  window = gtk_application_window_new (app)·\n"
"  label = gtk_label_new (\"Hello GNOME!\")·\n"
"  gtk_container_add (GTK_CONTAINER (window), label)·\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Welcome to GNOME\")·\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 100)·\n"
"  gtk_widget_show_all (window)·\n"
"}\n"
"\n"
"int\n"
"main (int    argc,\n"
"      char **argv)\n"
"{\n"
"  GtkApplication *app·\n"
"  int status·\n"
"\n"
"  app = gtk_application_new (NULL, G_APPLICATION_FLAGS_NONE)·\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL)·\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv)·\n"
"  g_object_unref (app)·\n"
"\n"
"  return status·\n"
"}\n"

#. (itstool) path: section/title
#: C/hello-world.c.page:102 C/hello-world.js.page:119
#: C/hello-world.py.page:106 C/hello-world.vala.page:80
msgid "Running the application from terminal"
msgstr "Εκτελέστε την εφαρμογή από τερματικό"

#. (itstool) path: section/p
#: C/hello-world.c.page:103
msgid ""
"To run this application, first save it as hello-world.c. Then open Terminal, "
"go to the folder where your application is stored."
msgstr ""
"Για να τρέξετε αυτήν την εφαρμογή, πρώτα αποθηκεύστε την ως hello-world.c. "
"Έπειτα ανοίξτε το τερματικό, πηγαίνετε στον φάκελο όπου η εφαρμογή σας "
"αποθηκεύεται."

#. (itstool) path: section/p
#: C/hello-world.c.page:104 C/hello-world.vala.page:82
msgid "Compile the program:"
msgstr "Μεταγλωττίστε το πρόγραμμα:"

#. (itstool) path: section/screen
#: C/hello-world.c.page:105
#, no-wrap
msgid "gcc <var>hello-world</var>.c `pkg-config --cflags --libs gtk+-3.0` -o <var>hello-world</var>"
msgstr "gcc <var>hello-world</var>.c `pkg-config --cflags --libs gtk+-3.0` -o <var>hello-world</var>"

#. (itstool) path: section/p
#: C/hello-world.c.page:106 C/hello-world.vala.page:84
msgid "Run the program:"
msgstr "Εκτελέστε το πρόγραμμα:"

#. (itstool) path: section/screen
#: C/hello-world.c.page:107 C/hello-world.vala.page:85
#, no-wrap
msgid "./<var>hello-world</var>"
msgstr "./<var>hello-world</var>"

#. (itstool) path: section/title
#: C/hello-world.c.page:111 C/hello-world.js.page:127
#: C/hello-world.py.page:112 C/hello-world.vala.page:89
msgid "The <file>.desktop.in</file> file"
msgstr "Το αρχείο <file>.desktop.in</file>"

#. (itstool) path: section/p
#: C/hello-world.c.page:112 C/hello-world.js.page:128
#: C/hello-world.py.page:113 C/hello-world.vala.page:90
msgid ""
"Running applications from the Terminal is useful at the beginning of the "
"application making process. To have fully working <link href=\"https://"
"developer.gnome.org/integration-guide/stable/mime.html.en\">application "
"integration</link> in GNOME 3 requires a desktop launcher. For this you need "
"to create a <file>.desktop</file> file. The <file>.desktop</file> file "
"describes the application name, the used icon and various integration bits. "
"A deeper insight into the <file>.desktop</file> file can be found <link href="
"\"http://developer.gnome.org/desktop-entry-spec/\">here</link>. The <file>."
"desktop.in</file> file will create the <file>.desktop</file>."
msgstr ""
"Τρέχοντας εφαρμογές από το τερματικό είναι χρήσιμο στην αρχή της διεργασίας "
"κατασκευής της εφαρμογής. Για να έχετε μια πλήρως λειτουργική <link href="
"\"https://developer.gnome.org/integration-guide/stable/mime.html.en"
"\">ολοκληρωμένη εφαρμογή</link> στο GNOME 3 απαιτείται ένας εκκινητής "
"επιφάνεια εργασίας. Για αυτό χρειάζεται να δημιουργήσετε ένα αρχείο <file>."
"desktop</file>. Το αρχείο <file>.desktop</file> περιγράφει το όνομα της "
"εφαρμογής, το χρησιμοποιούμενο εικονίδιο και ποικίλα δυαδικά ολοκλήρωσης. "
"Μια βαθύτερη ματιά στο αρχείο <file>.desktop</file> μπορεί να βρεθεί <link "
"href=\"http://developer.gnome.org/desktop-entry-spec/\">εδώ</link>. Το "
"αρχείο <file>.desktop.in</file> θα δημιουργήσει το <file>.desktop</file>."

#. (itstool) path: section/p
#: C/hello-world.c.page:114 C/hello-world.js.page:135
#: C/hello-world.py.page:115 C/hello-world.vala.page:92
msgid ""
"The example shows you the minimum requirements for a <code>.desktop.in</"
"code> file."
msgstr ""
"Το παράδειγμα εμφανίζει τις ελάχιστες απαιτήσεις για ένα αρχείο<code>."
"desktop.in</code>."

#. (itstool) path: section/code
#: C/hello-world.c.page:115 C/hello-world.js.page:136
#: C/hello-world.py.page:116 C/hello-world.vala.page:93
#, no-wrap
msgid ""
"[Desktop Entry]\n"
"Version=1.0\n"
"Encoding=UTF-8\n"
"Name=Hello World\n"
"Comment=Say Hello\n"
"Exec=@prefix@/bin/hello-world\n"
"Icon=application-default-icon\n"
"Terminal=false\n"
"Type=Application\n"
"StartupNotify=true\n"
"Categories=GNOME;GTK;Utility;\n"
msgstr ""
"[Desktop Entry]\n"
"Version=1.0\n"
"Encoding=UTF-8\n"
"Name=Hello World\n"
"Comment=Say Hello\n"
"Exec=@prefix@/bin/hello-world\n"
"Icon=application-default-icon\n"
"Terminal=false\n"
"Type=Application\n"
"StartupNotify=true\n"
"Categories=GNOME·GTK·Utility·\n"

#. (itstool) path: section/p
#: C/hello-world.c.page:117 C/hello-world.js.page:138
#: C/hello-world.py.page:118 C/hello-world.vala.page:95
msgid "Now let's go through some parts of the <code>.desktop.in</code> file."
msgstr "Τώρα, ας εξετάσουμε μερικά μέρη του αρχείου <code>.desktop.in</code>."

#. (itstool) path: item/title
#. (itstool) path: td/p
#: C/hello-world.c.page:119 C/hello-world.js.page:140
#: C/hello-world.py.page:120 C/hello-world.vala.page:97
#: C/toolbar_builder.py.page:95 C/toolbar_builder.vala.page:78
msgid "Name"
msgstr "Όνομα"

#. (itstool) path: item/p
#: C/hello-world.c.page:119 C/hello-world.js.page:140
#: C/hello-world.py.page:120 C/hello-world.vala.page:97
msgid "The application name."
msgstr "Το όνομα της εφαρμογής."

#. (itstool) path: item/title
#: C/hello-world.c.page:120 C/hello-world.js.page:141
#: C/hello-world.py.page:121 C/hello-world.vala.page:98
msgid "Comment"
msgstr "Σχόλιο"

#. (itstool) path: item/p
#: C/hello-world.c.page:120 C/hello-world.js.page:141
#: C/hello-world.py.page:121 C/hello-world.vala.page:98
msgid "A short description of the application."
msgstr "Μια σύντομη περιγραφή της εφαρμογής."

#. (itstool) path: item/title
#: C/hello-world.c.page:121 C/hello-world.js.page:142
#: C/hello-world.py.page:122 C/hello-world.vala.page:99
msgid "Exec"
msgstr "Exec"

#. (itstool) path: item/p
#: C/hello-world.c.page:121 C/hello-world.js.page:142
#: C/hello-world.py.page:122 C/hello-world.vala.page:99
msgid ""
"Specifies a command to execute when you choose the application from the "
"menu. In this example exec just tells where to find the <file>hello-world</"
"file> file and the file takes care of the rest."
msgstr ""
"Ορίζει μια εντολή για εκτέλεση όταν επιλέξετε την εφαρμογή από το μενού. Σε "
"αυτό το παράδειγμα το exec απλά λέει πού να βρείτε το αρχείο <file>hello-"
"world</file> και το αρχείο φροντίζει για τα υπόλοιπα."

#. (itstool) path: item/title
#: C/hello-world.c.page:122 C/hello-world.js.page:143
#: C/hello-world.py.page:123 C/hello-world.vala.page:100
msgid "Terminal"
msgstr "Τερματικός"

#. (itstool) path: item/p
#: C/hello-world.c.page:122 C/hello-world.js.page:143
#: C/hello-world.py.page:123 C/hello-world.vala.page:100
msgid ""
"Specifies whether the command in the Exec key runs in a terminal window."
msgstr "Ορίζει εάν η εντολή στο κλειδί Exec τρέχει σε ένα παράθυρο τερματικού."

#. (itstool) path: section/p
#: C/hello-world.c.page:125 C/hello-world.js.page:146
#: C/hello-world.py.page:126 C/hello-world.vala.page:103
msgid ""
"To put your application into the appropriate category, you need to add the "
"necessary categories to the Categories line. More information on the "
"different categories can be found in the <link href=\"http://standards."
"freedesktop.org/menu-spec/latest/apa.html\">menu specification</link>."
msgstr ""
"Για να βάλετε την εφαρμογή σας στη σωστή κατηγορία χρειάζεται να προσθέσετε "
"τις απαραίτητες κατηγορίες στη γραμμή κατηγοριών. Περισσότερες πληροφορίες "
"για τις διαφορετικές κατηγορίες μπορούν να βρεθούν στο <link href=\"http://"
"standards.freedesktop.org/menu-spec/latest/apa.html\">προδιαγραφές μενού</"
"link>."

#. (itstool) path: section/p
#: C/hello-world.c.page:126 C/hello-world.js.page:147
#: C/hello-world.py.page:127 C/hello-world.vala.page:104
msgid ""
"In this example we use an existing icon. For a custom icon you need to have "
"a .svg file of your icon, stored in <file>/usr/share/icons/hicolor/scalable/"
"apps</file>. Write the name of your icon file to the .desktop.in file, on "
"line 7. More information on icons in: <link href=\"https://live.gnome.org/"
"GnomeGoals/AppIcon\">Installing Icons for Themes</link> and <link href="
"\"http://freedesktop.org/wiki/Specifications/icon-theme-spec\">on "
"freedesktop.org: Specifications/icon-theme-spec</link>."
msgstr ""
"Σε αυτό το παράδειγμα χρησιμοποιήσαμε ένα υπάρχον εικονίδιο. Για ένα "
"προσαρμοσμένο εικονίδιο χρειάζεται να έχετε ένα αρχείο .svg του εικονιδίου "
"σας, αποθηκευμένο στο <file>/usr/share/icons/hicolor/scalable/apps</file>. "
"Γράψτε το όνομα του αρχείου του εικονιδίου σας στο αρχείο .desktop.in, στη "
"γραμμή 7. Περισσότερες πληροφορίες για εικονίδια στο: <link href=\"https://"
"live.gnome.org/GnomeGoals/AppIcon\">Εγκατάσταση εικονιδίων για θέματα</"
"link>, και <link href=\"http://freedesktop.org/wiki/Specifications/icon-"
"theme-spec\">on freedesktop.org: Specifications/icon-theme-spec</link>."

#. (itstool) path: section/title
#: C/hello-world.c.page:129 C/hello-world.js.page:150
#: C/hello-world.py.page:130 C/hello-world.vala.page:107
msgid "The build system"
msgstr "Το σύστημα δόμησης"

#. (itstool) path: section/p
#: C/hello-world.c.page:130 C/hello-world.js.page:151
#: C/hello-world.py.page:131 C/hello-world.vala.page:108
msgid ""
"To make your application truly a part of the GNOME 3 system you need to "
"install it with the help of autotools. The autotools build will install all "
"the necessary files to all the right places."
msgstr ""
"Για να κάνετε την εφαρμογή σας πραγματικά τμήμα του συστήματος GNOME 3 "
"χρειαζόσαστε την εγκατάσταση του με τη βοήθεια των autotools. Η κατασκευή "
"των autotools θα εγκαταστήσει όλα τα απαραίτητα αρχεία σε όλες τις σωστές "
"θέσεις."

#. (itstool) path: section/p
#: C/hello-world.c.page:131 C/hello-world.js.page:152
#: C/hello-world.py.page:132 C/hello-world.vala.page:109
msgid "For this you need to have the following files:"
msgstr "Για αυτό χρειαζόσαστε να έχετε τα παρακάτω αρχεία:"

#. (itstool) path: section/title
#. (itstool) path: item/p
#: C/hello-world.c.page:134 C/hello-world.js.page:155
#: C/hello-world.py.page:135 C/hello-world.vala.page:112
#: C/weatherAutotools.js.page:40
msgid "autogen.sh"
msgstr "autogen.sh"

#. (itstool) path: section/code
#: C/hello-world.c.page:135 C/hello-world.js.page:156
#: C/hello-world.py.page:136 C/hello-world.vala.page:113
#, no-wrap
msgid ""
"#!/bin/sh\n"
"\n"
"set -e\n"
"\n"
"test -n \"$srcdir\" || srcdir=`dirname \"$0\"`\n"
"test -n \"$srcdir\" || srcdir=.\n"
"\n"
"olddir=`pwd`\n"
"cd \"$srcdir\"\n"
"\n"
"# This will run autoconf, automake, etc. for us\n"
"autoreconf --force --install\n"
"\n"
"cd \"$olddir\"\n"
"\n"
"if test -z \"$NOCONFIGURE\"; then\n"
"  \"$srcdir\"/configure \"$@\"\n"
"fi\n"
msgstr ""
"#!/bin/sh\n"
"\n"
"set -e\n"
"\n"
"test -n \"$srcdir\" || srcdir=`dirname \"$0\"`\n"
"test -n \"$srcdir\" || srcdir=.\n"
"\n"
"olddir=`pwd`\n"
"cd \"$srcdir\"\n"
"\n"
"# Αυτό θα εκτελέσει autoconf, automake, κλπ. για μας\n"
"autoreconf --force --install\n"
"\n"
"cd \"$olddir\"\n"
"\n"
"if test -z \"$NOCONFIGURE\"; then\n"
"  \"$srcdir\"/configure \"$@\"\n"
"fi\n"

#. (itstool) path: section/p
#: C/hello-world.c.page:137 C/hello-world.js.page:158
#: C/hello-world.py.page:138 C/hello-world.vala.page:115
msgid "After the <file>autogen.sh</file> file is ready and saved, run:"
msgstr ""
"Αφού το αρχείο <file>autogen.sh</file> είναι έτοιμο και αποθηκευμένο, "
"εκτελέστε:"

#. (itstool) path: section/screen
#: C/hello-world.c.page:138 C/hello-world.js.page:159
#: C/hello-world.py.page:139 C/hello-world.vala.page:116
#, no-wrap
msgid "<output style=\"prompt\">$ </output><input>chmod +x autogen.sh</input>"
msgstr "<output style=\"prompt\">$ </output><input>chmod +x autogen.sh</input>"

#. (itstool) path: section/title
#. (itstool) path: item/p
#. (itstool) path: section/p
#: C/hello-world.c.page:142 C/hello-world.js.page:163
#: C/hello-world.py.page:143 C/hello-world.vala.page:120
#: C/weatherAutotools.js.page:38 C/weatherAutotools.js.page:64
msgid "Makefile.am"
msgstr "Makefile.am"

#. (itstool) path: section/code
#: C/hello-world.c.page:143
#, no-wrap
msgid ""
"# The actual runnable program is set to the SCRIPTS primitive.\n"
"# # Prefix bin_ tells where to copy this\n"
"bin_PROGRAMS = hello-world\n"
"hello_world_CFLAGS = $(gtk_CFLAGS)\n"
"hello_world_LDADD = $(gtk_LIBS)\n"
"hello_world_SOURCES = hello-world.c\n"
"\n"
"desktopdir = $(datadir)/applications\n"
"desktop_DATA = \\\n"
"\thello-world.desktop\n"
msgstr ""
"# Το αρχικό εκτελέσιμο πρόγραμμα ορίζεται σε θεμαλιακά SCRIPTS.\n"
"# # Το π-ρόθεμα bin_ λέει πού να αντιγραφεί αυτό\n"
"bin_PROGRAMS = hello-world\n"
"hello_world_CFLAGS = $(gtk_CFLAGS)\n"
"hello_world_LDADD = $(gtk_LIBS)\n"
"hello_world_SOURCES = hello-world.c\n"
"\n"
"desktopdir = $(datadir)/applications\n"
"desktop_DATA = \\\n"
"\thello-world.desktop\n"

#. (itstool) path: section/title
#. (itstool) path: item/p
#. (itstool) path: section/p
#: C/hello-world.c.page:147 C/hello-world.js.page:168
#: C/hello-world.py.page:148 C/hello-world.vala.page:125
#: C/weatherAutotools.js.page:39 C/weatherAutotools.js.page:131
msgid "configure.ac"
msgstr "configure.ac"

#. (itstool) path: section/code
#: C/hello-world.c.page:148 C/hello-world.vala.page:126
#, no-wrap
msgid ""
"# This file is processed by autoconf to create a configure script\n"
"AC_INIT([Hello World], 1.0)\n"
"AM_INIT_AUTOMAKE([1.10 no-define foreign dist-xz no-dist-gzip])\n"
"AC_PROG_CC\n"
"AM_PROG_VALAC([0.16])\n"
"PKG_CHECK_MODULES(gtk, gtk+-3.0)\n"
"AC_CONFIG_FILES([Makefile hello-world.desktop])\n"
"\n"
"AC_OUTPUT\n"
msgstr ""
"# Αυτό το αρχείο επεξεργάζεται από autoconf για τη δημιουργία ενός σεναρίου ρυθμίσεων\n"
"AC_INIT([Hello World], 1.0)\n"
"AM_INIT_AUTOMAKE([1.10 no-define foreign dist-xz no-dist-gzip])\n"
"AC_PROG_CC\n"
"AM_PROG_VALAC([0.16])\n"
"PKG_CHECK_MODULES(gtk, gtk+-3.0)\n"
"AC_CONFIG_FILES([Makefile hello-world.desktop])\n"
"\n"
"AC_OUTPUT\n"

#. (itstool) path: section/title
#: C/hello-world.c.page:152 C/hello-world.js.page:173
#: C/hello-world.py.page:153 C/hello-world.vala.page:130
msgid "README"
msgstr "README"

#. (itstool) path: section/p
#: C/hello-world.c.page:153 C/hello-world.js.page:174
#: C/hello-world.py.page:154 C/hello-world.vala.page:131
msgid "Information users should read first. This file can be blank."
msgstr ""
"Οι πληροφορίες χρηστών πρέπει να διαβαστούν πρώτα. Αυτό το αρχείο μπορεί να "
"είναι κενό."

#. (itstool) path: section/p
#: C/hello-world.c.page:155 C/hello-world.vala.page:133
msgid ""
"When you have the <file>hello-world.c</file>, <file>hello-world.desktop.in</"
"file>, <file>Makefile.am</file>, <file>configure.ac</file> and <file>autogen."
"sh</file> files with correct information and rights, the <file>README</file> "
"file can include the following instructions:"
msgstr ""
"Όταν έχετε τα αρχεία <file>hello-world.c</file>, <file>hello-world.desktop."
"in</file>, <file>Makefile.am</file>, <file>configure.ac</file> και "
"<file>autogen.sh</file> με σωστές πληροφορίες και δικαιώματα, το αρχείο "
"<file>README</file> μπορεί να συμπεριλάβει τις ακόλουθες οδηγίες:"

#. (itstool) path: section/code
#: C/hello-world.c.page:156
#, no-wrap
msgid ""
"To build and install this program:\n"
"\n"
"./autogen.sh --prefix=/home/your_username/.local\n"
"make\n"
"make install\n"
"\n"
"-------------\n"
"Running the first line above creates the following files:\n"
"\n"
"aclocal.m4\n"
"autom4te.cache\n"
"config.log\n"
"config.status\n"
"configure\n"
"depcomp\n"
"hello-world\n"
"hello-world.desktop\n"
"hello_world-hello-world.o\n"
"install-sh\n"
"missing\n"
"Makefile.in\n"
"Makefile\n"
"\n"
"Running \"make\" links all the appropriate libraries.\n"
"\n"
"Running \"make install\", installs the application in /home/your_username/.local/bin\n"
"and installs the hello-world.desktop file in /home/your_username/.local/share/applications\n"
"\n"
"You can now run the application by typing \"Hello World\" in the Overview.\n"
"\n"
"----------------\n"
"To uninstall, type:\n"
"\n"
"make uninstall\n"
"\n"
"----------------\n"
"To create a tarball type:\n"
"\n"
"make distcheck\n"
"\n"
"This will create hello-world-1.0.tar.xz\n"
msgstr ""
"Για κατασκευή και εγκατάσταση αυτού του προγράμματος:\n"
"\n"
"./autogen.sh --prefix=/home/your_username/.local\n"
"make\n"
"make install\n"
"\n"
"-------------\n"
"Εκτελώντας την πρώτη παραπάνω γραμμή δημιουργεί τα παρακάτω αρχεία:\n"
"\n"
"aclocal.m4\n"
"autom4te.cache\n"
"config.log\n"
"config.status\n"
"configure\n"
"depcomp\n"
"hello-world\n"
"hello-world.desktop\n"
"hello_world-hello-world.o\n"
"install-sh\n"
"missing\n"
"Makefile.in\n"
"Makefile\n"
"\n"
"Η εκτέλεση \"make\" συνδέει όλες τις κατάλληλες βιβλιοθήκες.\n"
"\n"
"Η εκτέλεση \"make install\", εγκαθιστά την εφαρμογή στο /home/your_username/.local/bin\n"
"και εγκαθιστά το αρχείο hello-world.desktop στο /home/your_username/.local/share/applications\n"
"\n"
"Μπορείτε τώρα να εκτελέσετε την εφαρμογή πληκτρολογώντας \"Hello World\" στη επισκόπηση.\n"
"\n"
"----------------\n"
"Για απεγκατάσταση, πληκτρολογήστε:\n"
"\n"
"make uninstall\n"
"\n"
"----------------\n"
"Για δημιουργήσετε έναν τύπο tarball:\n"
"\n"
"make distcheck\n"
"\n"
"Αυτό θα δημιουργήσει hello-world-1.0.tar.xz\n"

#. (itstool) path: info/title
#: C/hello-world.js.page:9
msgctxt "text"
msgid "Hello World (JavaScript)"
msgstr "Hello World (JavaScript)"

#. (itstool) path: item/p
#: C/hello-world.js.page:32
msgid "create a small \"Hello, World\" application using JavaScript and GTK+"
msgstr ""
"δημιουργήσετε μια μικρή εφαρμογή \"Hello, World\" χρησιμοποιώντας JavaScript "
"και GTK+"

#. (itstool) path: section/p
#: C/hello-world.js.page:47
msgid "This needs to be the first line of your script:"
msgstr "Αυτό χρειάζεται να είναι η πρώτη γραμμή του σεναρίου σας:"

#. (itstool) path: section/code
#: C/hello-world.js.page:48
#, no-wrap
msgid "#!/usr/bin/gjs"
msgstr "#!/usr/bin/gjs"

#. (itstool) path: section/p
#: C/hello-world.js.page:49
msgid ""
"It tells the script to use <link href=\"https://live.gnome.org/Gjs/\">Gjs</"
"link>. Gjs is a JavaScript binding for GNOME."
msgstr ""
"Λέει στο σενάριο να χρησιμοποιήσετε <link href=\"https://live.gnome.org/Gjs/"
"\">Gjs</link>. Gjs είναι ένας σύνδεσμος JavaScript για GNOME."

#. (itstool) path: section/code
#: C/hello-world.js.page:54
#, no-wrap
msgid ""
"const Lang = imports.lang;\n"
"const Gtk = imports.gi.Gtk;"
msgstr ""
"const Lang = imports.lang;\n"
"const Gtk = imports.gi.Gtk;"

#. (itstool) path: section/p
#: C/hello-world.js.page:56 C/hello-world.py.page:49
msgid ""
"In order for our script to work with GNOME, we need to import GNOME "
"libraries via GObject Introspection. Here we import the language bindings "
"and GTK+, the library which contains the graphical widgets used to make "
"GNOME applications."
msgstr ""
"Για να δουλέψει το σενάριό μας με GNOME, χρειαζόμαστε να εισάγουμε τις "
"βιβλιοθήκες GNOME μέσα από τον αυτοέλεγχο GObject. Εδώ εισάγουμε τους "
"συνδέσμους γλώσσας και GTK+, την βιβλιοθήκη που περιέχει τα χρησιμοποιούμενα "
"γραφικά στοιχεία για την δόμηση εφαρμογών GNOME."

#. (itstool) path: section/code
#: C/hello-world.js.page:60
#, no-wrap
msgid ""
"const Application = new Lang.Class({\n"
"    //A Class requires an explicit Name parameter. This is the Class Name.\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"       //connect to 'activate' and 'startup' signals to handlers.\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   title: \"Hello World!\" });\n"
"    },\n"
"\n"
"    //handler for 'activate' signal\n"
"    _onActivate: function() {\n"
"        //show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    //handler for 'startup' signal\n"
"    _onStartup: function() {\n"
"        this._buildUI();\n"
"    }\n"
"});\n"
msgstr ""
"const Application = new Lang.Class({\n"
"    //Μια κλάση απαιτεί μια ρητή παράμετρο ονόματος. Αυτή είναι η κλάση ονόματος.\n"
"    Name: 'Application',\n"
"\n"
"    //Δημιουργία της εφαρμογής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"       //Σ,υνδεση των σημάτων 'activate' και 'startup' με τους χειριστές.\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //Δημιουργία της διεπαφής χρήστη\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   title: \"Hello World!\" });\n"
"    },\n"
"\n"
"    //Ο χεριριστής για το σήμα 'activate'\n"
"    _onActivate: function() {\n"
"        //Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    //Ο χειριστής του σήματος 'startup'\n"
"    _onStartup: function() {\n"
"        this._buildUI();\n"
"    }\n"
"});\n"

#. (itstool) path: section/p
#: C/hello-world.js.page:93
msgid ""
"We can start building our first window. We do this by creating a variable "
"called <var>_window</var> and assigning it a new Gtk.ApplicationWindow."
msgstr ""
"Μπορούμε να αρχίσουμε να κατασκευάζουμε το πρώτο μας παράθυρο. Αυτό το "
"κάνουμε δημιουργώντας μια μεταβλητή που λέγεται <var>_window</var> και της "
"αποδίδουμε ένα νέο Gtk.ApplicationWindow."

#. (itstool) path: section/p
#: C/hello-world.js.page:94 C/hello-world.py.page:73
msgid ""
"We give the window a property called <var>title</var>. The title can be any "
"string you want it to be. To be on the safe side, it's best to stick to "
"UTF-8 encoding."
msgstr ""
"Δίνουμε στο παράθυρο μια ιδιότητα που λέγεται <var>title</var>. Ο τίτλος "
"μπορεί να είναι οποιαδήποτε επιθυμητή συμβολοσειρά. Για να είσαστε ασφαλείς, "
"είναι καλύτερο να επιλέξετε την κωδικοποίηση UTF-8."

#. (itstool) path: section/code
#: C/hello-world.js.page:99
#, no-wrap
msgid ""
"// Add a label widget to your window\n"
"this.label = new Gtk.Label({ label: \"Hello World\" });\n"
"this._window.add(this.label);\n"
"this._window.set_default_size(200, 200);"
msgstr ""
"// Προσθήκη γραφικού στοιχείου ετικέτας στο παράθυρό σας\n"
"this.label = new Gtk.Label({ label: \"Hello World\" });\n"
"this._window.add(this.label);\n"
"this._window.set_default_size(200, 200);"

#. (itstool) path: section/p
#: C/hello-world.js.page:104
msgid ""
"A text label is one of the GTK+ widgets we can use, on account of having "
"imported the GTK+ library. To use it, we create a new variable called label, "
"and assign it a new Gtk.Label. Then we give it properties inside the curly "
"braces {}. In this case, we're setting the text that the label will hold. "
"Finally, we create and run the application:"
msgstr ""
"Μια ετικέτα κειμένου είναι ένα από τα γραφικά στοιχεία του GTK+ που "
"μπορούμε να χρησιμοποιήσουμε, λόγω της εισαγωγής της βιβλιοθήκης GTK+. Για "
"τη χρήση του, δημιουργούμε μια νέα μεταβλητή που ονομάζουμε ετικέτα και της "
"αποδίδουμε μια νέα Gtk.Label. Έπειτα της δίνουμε ιδιότητες μέσα σε αγκύλες "
"{}. Σε αυτήν την περίπτωση, ορίζουμε το κείμενο που θα κρατήσει η ετικέτα. "
"Τελικά, δημιουργούμε και τρέχουμε την εφαρμογή:"

#. (itstool) path: section/code
#: C/hello-world.js.page:106
#, no-wrap
msgid ""
"//run the application\n"
"let app = new Application();\n"
"app.application.run(ARGV);"
msgstr ""
"//Εκτέλεση της εφαρμογής\n"
"let app = new Application();\n"
"app.application.run(ARGV);"

#. (itstool) path: section/p
#: C/hello-world.js.page:110 C/hello-world.py.page:97
#: C/hello-world.vala.page:71
msgid ""
"Gtk.ApplicationWindow can only hold one widget at a time. To construct more "
"elaborate programs you need to create a holder widget like Gtk.Grid inside "
"the window, and then add all the other widgets to it."
msgstr ""
"Το Gtk.Window μπορεί να κρατήσει μόνο ένα γραφικό στοιχείο τη φορά. Για "
"κατασκευή πιο περίπλοκων προγραμμάτων χρειαζόσαστε τη δημιουργία ενός "
"χειριστή γραφικού στοιχείου όπως Gtk.Grid μέσα στο παράθυρο και έπειτα να "
"προσθέσετε όλα τα άλλα γραφικά στοιχεία σε αυτό."

#. (itstool) path: section/title
#: C/hello-world.js.page:114
msgid "hello-world.js"
msgstr "hello-world.js"

#. (itstool) path: section/code
#: C/hello-world.js.page:116
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Lang = imports.lang;\n"
"const Gtk = imports.gi.Gtk;\n"
"\n"
"const Application = new Lang.Class({\n"
"    //A Class requires an explicit Name parameter. This is the Class Name.\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"       //connect to 'activate' and 'startup' signals to handlers.\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   title: \"Hello World!\" });\n"
"        this._window.set_default_size(200, 200);\n"
"        this.label = new Gtk.Label({ label: \"Hello World\" });\n"
"        this._window.add(this.label);\n"
"    },\n"
"\n"
"    //handler for 'activate' signal\n"
"    _onActivate: function() {\n"
"        //show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    //handler for 'startup' signal\n"
"    _onStartup: function() {\n"
"        this._buildUI();\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application();\n"
"app.application.run(ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Lang = imports.lang;\n"
"const Gtk = imports.gi.Gtk;\n"
"\n"
"const Application = new Lang.Class({\n"
"    //Μια κλάση απαιτεί μια ρητή παράμετρο ονόματος.  Αυτή είναι το όνομα κλάσης.\n"
"    Name: 'Application',\n"
"\n"
"    //Δημιουργία της εφαρμογής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"       //Σύνδεση των σημάτων  'activate' και 'startup' στους χειριστές.\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //Δημιουργία της διεπαφής χρήστη\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   title: \"Hello World!\" });\n"
"        this._window.set_default_size(200, 200);\n"
"        this.label = new Gtk.Label({ label: \"Hello World\" });\n"
"        this._window.add(this.label);\n"
"    },\n"
"\n"
"    //Χειριστής για το σήμα  'activate'\n"
"    _onActivate: function() {\n"
"        //Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    //Χειριστής για το σήμα 'startup'\n"
"    _onStartup: function() {\n"
"        this._buildUI();\n"
"    }\n"
"});\n"
"\n"
"//Εκτέλεση της εφαρμογής\n"
"let app = new Application();\n"
"app.application.run(ARGV);\n"

#. (itstool) path: section/p
#: C/hello-world.js.page:120
msgid ""
"To run this application, first save it as hello-world.js. Then open "
"Terminal, go to the folder where your application is stored and run:"
msgstr ""
"Για να τρέξετε αυτήν την εφαρμογή, πρώτα αποθηκεύστε την ως hello-world.js. "
"Έπειτα ανοίξτε το τερματικό, πηγαίνετε στον φάκελο όπου η εφαρμογή σας "
"αποθηκεύεται και τρέξτε:"

#. (itstool) path: section/screen
#: C/hello-world.js.page:121
#, no-wrap
msgid "<output style=\"prompt\">$ </output><input>gjs hello-world.js</input>"
msgstr "<output style=\"prompt\">$ </output><input>gjs hello-world.js</input>"

#. (itstool) path: note/p
#: C/hello-world.js.page:131
msgid ""
"Before continuing, resave <file>hello-world.js</file> as <file>hello-world</"
"file>. Then run this in the command line:"
msgstr ""
"Πριν συνεχίσετε, ξανααποθηκεύστε το <file>hello-world.js</file> ως "
"<file>hello-world</file>. Έπειτα εκτελέστε το στη γραμμή εντολών:"

#. (itstool) path: note/screen
#: C/hello-world.js.page:132
#, no-wrap
msgid "<output style=\"prompt\">$ </output><input>chmod +x hello-world</input>"
msgstr "<output style=\"prompt\">$ </output><input>chmod +x hello-world</input>"

#. (itstool) path: section/code
#: C/hello-world.js.page:164
#, no-wrap
msgid ""
"# The actual runnable program is set to the SCRIPTS primitive.\n"
"# # Prefix bin_ tells where to copy this\n"
"bin_SCRIPTS = hello-world\n"
"# # List of files to be distributed\n"
"EXTRA_DIST =  \\\n"
"\t$(bin_SCRIPTS)\n"
"#\n"
"#     # The desktop files\n"
"desktopdir = $(datadir)/applications\n"
"desktop_DATA = \\\n"
"\thello-world.desktop\n"
msgstr ""
"# Το τρέχον εκτελέσιμο πρόγραμμα ορίζεται στα θεμελιακά SCRIPTS.\n"
"# # Το πρόθεμα bin_ λέει που να το αντιγράψετε\n"
"bin_SCRIPTS = hello-world\n"
"# # Η λίστα των αρχείων που θα διανεμηθούν\n"
"EXTRA_DIST =  \\\n"
"\t$(bin_SCRIPTS)\n"
"#\n"
"#     # Τα αρχεία της επιφάνειας εργασίας\n"
"desktopdir = $(datadir)/applications\n"
"desktop_DATA = \\\n"
"\thello-world.desktop\n"

#. (itstool) path: section/code
#: C/hello-world.js.page:169 C/hello-world.py.page:149
#, no-wrap
msgid ""
"# This file is processed by autoconf to create a configure script\n"
"AC_INIT([Hello World], 1.0)\n"
"AM_INIT_AUTOMAKE([1.10 no-define foreign dist-xz no-dist-gzip])\n"
"AC_CONFIG_FILES([Makefile hello-world.desktop])\n"
"AC_OUTPUT\n"
msgstr ""
"# Αυτό το αρχείο επεξεργάζεται από το autoconf για τη δημιουργία ενός σεναρίου διαμόρφωσης\n"
"AC_INIT([Hello World], 1.0)\n"
"AM_INIT_AUTOMAKE([1.10 no-define foreign dist-xz no-dist-gzip])\n"
"AC_CONFIG_FILES([Makefile hello-world.desktop])\n"
"AC_OUTPUT\n"

#. (itstool) path: section/p
#: C/hello-world.js.page:176 C/hello-world.py.page:156
msgid ""
"When you have the <file>hello-world</file>, <file>hello-world.desktop.in</"
"file>, <file>Makefile.am</file>, <file>configure.ac</file> and <file>autogen."
"sh</file> files with correct information and rights, the <file>README</file> "
"file can include the following instructions:"
msgstr ""
"Όταν έχετε τα αρχεία <file>hello-world</file>, <file>hello-world.desktop.in</"
"file>, <file>Makefile.am</file>, <file>configure.ac</file> και <file>autogen."
"sh</file> με σωστές πληροφορίες και δικαιώματα, το αρχείο <file>README</"
"file> μπορεί να συμπεριλάβει τις ακόλουθες οδηγίες:"

#. (itstool) path: section/code
#: C/hello-world.js.page:177 C/hello-world.py.page:157
#, no-wrap
msgid ""
"To build and install this program:\n"
"\n"
"./autogen.sh --prefix=/home/your_username/.local\n"
"make install\n"
"\n"
"-------------\n"
"Running the first line above creates the following files:\n"
"\n"
"aclocal.m4\n"
"autom4te.cache\n"
"config.log\n"
"config.status\n"
"configure\n"
"hello-world.desktop\n"
"install-sh\n"
"missing\n"
"Makefile.in\n"
"Makefile\n"
"\n"
"Running \"make install\", installs the application in /home/your_username/.local/bin\n"
"and installs the hello-world.desktop file in /home/your_username/.local/share/applications\n"
"\n"
"You can now run the application by typing \"Hello World\" in the Overview.\n"
"\n"
"----------------\n"
"To uninstall, type:\n"
"\n"
"make uninstall\n"
"\n"
"----------------\n"
"To create a tarball type:\n"
"\n"
"make distcheck\n"
"\n"
"This will create hello-world-1.0.tar.xz\n"
msgstr ""
"Για να δομήσετε και να εγκαταστήσετε αυτό το πρόγραμμα:\n"
"\n"
"./autogen.sh --prefix=/home/your_username/.local\n"
"make install\n"
"\n"
"-------------\n"
"Η εκτέλεση της πρώτης παραπάνω γραμμής δημιουργεί τα ακόλουθα αρχεία:\n"
"\n"
"aclocal.m4\n"
"autom4te.cache\n"
"config.log\n"
"config.status\n"
"configure\n"
"hello-world.desktop\n"
"install-sh\n"
"missing\n"
"Makefile.in\n"
"Makefile\n"
"\n"
"Η εκτέλεση \"make install\", εγκαθιστά την εφαρμογή στο /home/your_username/.local/bin\n"
"και εγκαθιστά το αρχείο hello-world.desktop στο /home/your_username/.local/share/applications\n"
"\n"
"Μπορείτε τώρα να εκτελέσετε την εφαρμογή πληκτρολογώντας \"Hello World\" στην επισκόπηση.\n"
"\n"
"----------------\n"
"Για απεγκατάσταση, πληκτρολογήστε:\n"
"\n"
"make uninstall\n"
"\n"
"----------------\n"
"Για δημιουργία tarball, πληκτρολογήστε:\n"
"\n"
"make distcheck\n"
"\n"
"Αυτό θα δημιουργήσει hello-world-1.0.tar.xz\n"

#. (itstool) path: info/title
#: C/hello-world.py.page:9
msgctxt "text"
msgid "Hello World (Python)"
msgstr "Hello World (Python)"

#. (itstool) path: item/p
#: C/hello-world.py.page:32
msgid "create a small \"Hello, World\" application using Python and GTK+"
msgstr ""
"δημιουργήσετε μια μικρή εφαρμογή \"Hello, World\" χρησιμοποιώντας Python και "
"GTK+"

#. (itstool) path: section/code
#: C/hello-world.py.page:47
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys"
msgstr ""
"from gi.repository import Gtk\n"
"import sys"

#. (itstool) path: section/code
#: C/hello-world.py.page:53
#, no-wrap
msgid ""
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    # constructor for a Gtk.ApplicationWindow\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Hello World!\", application=app)\n"
"        self.set_default_size(200, 100)\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)"
msgstr ""
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    # Κατασκευαστής για μια Gtk.ApplicationWindow\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Hello World!\", application=app)\n"
"        self.set_default_size(200, 100)\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)"

#. (itstool) path: section/p
#: C/hello-world.py.page:71 C/hello-world.vala.page:54
msgid ""
"Gtk.Application initializes GTK+. It also connects the <gui>x</gui> button "
"that's automatically generated along with the window to the \"destroy\" "
"signal."
msgstr ""
"Η Gtk.Application αρχικοποιεί το GTK+. Επίσης συνδέει το κουμπί <gui>x</gui> "
"που δημιουργείται αυτόματα μαζί με το παράθυρο στο σήμα \"destroy\"."

#. (itstool) path: section/p
#: C/hello-world.py.page:72
msgid ""
"We can start building our first window. We do this by creating a class "
"called <var>MyWindow</var> and assigning it a Gtk.ApplicationWindow."
msgstr ""
"Μπορούμε να αρχίσουμε να κατασκευάζουμε το πρώτο μας παράθυρο. Αυτό το "
"κάνουμε δημιουργώντας μια κλάση που λέγεται <var>MyWindow</var> και της "
"αποδίδουμε ένα Gtk.ApplicationWindow."

#. (itstool) path: section/code
#: C/hello-world.py.page:78
#, no-wrap
msgid ""
"# Add a label widget to your window\n"
"\n"
"        # create a label\n"
"        label = Gtk.Label()\n"
"\n"
"        # set the text of the label\n"
"        label.set_text(\"Hello GNOME!\")\n"
"\n"
"        # add the label to the window\n"
"        self.add(label)"
msgstr ""
"# Προσθήκη ενός γραφικού στοιχείου ετικέτας στο παράθυρό σας\n"
"\n"
"        # δημιουργία ετικέτας\n"
"        label = Gtk.Label()\n"
"\n"
"        # ορισμός του κειμένου της ετικέτας\n"
"        label.set_text(\"Hello GNOME!\")\n"
"\n"
"        # προσθήκη της ετικέτας στο παράθυρο\n"
"        self.add(label)"

#. (itstool) path: section/p
#: C/hello-world.py.page:89
msgid ""
"A text label is one of the GTK+ widgets we can use, on account of having "
"imported the GTK+ library. To use it, we create a variable called "
"<var>label</var> and set the text that the label will hold. Finally, we "
"create and run the application:"
msgstr ""
"Μια ετικέτα κειμένου είναι ένα από τα γραφικά στοιχεία του GTK+ που "
"μπορούμε να χρησιμοποιήσουμε, λόγω της εισαγωγής της βιβλιοθήκης GTK+. Για "
"τη χρήση του, δημιουργούμε μια νέα μεταβλητή που ονομάζουμε <var>ετικέτα</"
"var> και ορίζουμε το κείμενο που η ετικέτα θα κρατά. Τελικά, δημιουργούμε "
"και τρέχουμε την εφαρμογή:"

#. (itstool) path: section/code
#: C/hello-world.py.page:91
#, no-wrap
msgid ""
"#run the application\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)"
msgstr ""
"#εκτέλεση της εφαρμογής\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)"

#. (itstool) path: section/title
#: C/hello-world.py.page:101
msgid "hello-world.py"
msgstr "hello-world.py"

#. (itstool) path: section/code
#: C/hello-world.py.page:103 C/label.py.page:39
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # constructor for a Gtk.ApplicationWindow\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(200, 100)\n"
"\n"
"        # create a label\n"
"        label = Gtk.Label()\n"
"        # set the text of the label\n"
"        label.set_text(\"Hello GNOME!\")\n"
"        # add the label to the window\n"
"        self.add(label)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # constructor for a Gtk.ApplicationWindow\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(200, 100)\n"
"\n"
"        # create a label\n"
"        label = Gtk.Label()\n"
"        # set the text of the label\n"
"        label.set_text(\"Hello GNOME!\")\n"
"        # add the label to the window\n"
"        self.add(label)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/p
#: C/hello-world.py.page:107
msgid ""
"To run this application, first save it as hello-world.py. Then open "
"Terminal, go to the folder where your application is stored and run:"
msgstr ""
"Για να τρέξετε αυτήν την εφαρμογή, πρώτα αποθηκεύστε την ως helloWorld.py. "
"Έπειτα ανοίξτε το τερματικό, πηγαίνετε στον φάκελο όπου η εφαρμογή σας "
"αποθηκεύεται και τρέξτε:"

#. (itstool) path: section/screen
#: C/hello-world.py.page:108
#, no-wrap
msgid "<output style=\"prompt\">$ </output><input>python hello-world.py</input>"
msgstr "<output style=\"prompt\">$ </output><input>python hello-world.py</input>"

#. (itstool) path: section/code
#: C/hello-world.py.page:144
#, no-wrap
msgid ""
"# The actual runnable program is set to the SCRIPTS primitive.\n"
"# # Prefix bin_ tells where to copy this\n"
"bin_SCRIPTS = hello-world.py\n"
"# # List of files to be distributed\n"
"EXTRA_DIST=  \\\n"
"\t$(bin_SCRIPTS)\n"
"#\n"
"#     # The desktop files\n"
"desktopdir = $(datadir)/applications\n"
"desktop_DATA = \\\n"
"\thello-world.desktop\n"
msgstr ""
"# Το ενεργό εκτελέσιμο πρόγραμμα ορίζεται στα θεμελιακά SCRIPTS.\n"
"# # Το πρόθεμα bin_ λέει που να αντιγραφεί αυτό\n"
"bin_SCRIPTS = hello-world.py\n"
"# # Λίστα των αρχείων που θα διανεμηθούν\n"
"EXTRA_DIST=  \\\n"
"\t$(bin_SCRIPTS)\n"
"#\n"
"#     # Τα αρχεία επιφάνειας εργασίας\n"
"desktopdir = $(datadir)/applications\n"
"desktop_DATA = \\\n"
"\thello-world.desktop\n"

#. (itstool) path: info/title
#: C/hello-world.vala.page:9
msgctxt "text"
msgid "Hello World (Vala)"
msgstr "Hello World (Vala)"

#. (itstool) path: section/code
#: C/hello-world.vala.page:45
#, no-wrap
msgid ""
"class MyApplication : Gtk.Application {\n"
"        protected override void activate () {\n"
"                var window = new Gtk.ApplicationWindow (this);\n"
"                window.set_title (\"Welcome to GNOME\");\n"
"                window.set_default_size (200, 100);\n"
"                window.show_all ();\n"
"        }\n"
"}"
msgstr ""
"class MyApplication : Gtk.Application {\n"
"        protected override void activate () {\n"
"                var window = new Gtk.ApplicationWindow (this);\n"
"                window.set_title (\"Welcome to GNOME\");\n"
"                window.set_default_size (200, 100);\n"
"                window.show_all ();\n"
"        }\n"
"}"

#. (itstool) path: section/p
#: C/hello-world.vala.page:55
msgid ""
"We can start building our first window. We do this by creating a variable "
"called <var>window</var> and assigning it a new Gtk.ApplicationWindow."
msgstr ""
"Μπορούμε να αρχίσουμε να κατασκευάζουμε το πρώτο μας παράθυρο. Αυτό το "
"κάνουμε δημιουργώντας μια μεταβλητή που λέγεται <var>window</var> και της "
"αποδίδουμε ένα νέο Gtk.ApplicationWindow."

#. (itstool) path: section/p
#: C/hello-world.vala.page:56
msgid ""
"We give the window a title using <code>set_title</code>. The title can be "
"any string you want it to be. To be on the safe side, it's best to stick to "
"UTF-8 encoding."
msgstr ""
"Δίνουμε στο παράθυρο έναν τίτλο χρησιμοποιώντας <code>set_title</code>. Ο "
"τίτλος μπορεί να είναι οποιαδήποτε επιθυμητή συμβολοσειρά. Για να είσαστε "
"ασφαλείς, είναι καλύτερο να επιλέξετε την κωδικοποίηση UTF-8."

#. (itstool) path: section/code
#: C/hello-world.vala.page:61
#, no-wrap
msgid ""
"var label = new Gtk.Label (\"Hello GNOME!\");\n"
"                window.add (label);\n"
msgstr ""
"var label = new Gtk.Label (\"Hello GNOME!\");\n"
"                window.add (label);\n"

#. (itstool) path: section/code
#: C/hello-world.vala.page:67
#, no-wrap
msgid ""
"int main (string[] args) {\n"
"        return new MyApplication ().run (args);\n"
"}"
msgstr ""
"int main (string[] args) {\n"
"        return new MyApplication ().run (args);\n"
"}"

#. (itstool) path: section/title
#: C/hello-world.vala.page:75
msgid "hello-world.vala"
msgstr "hello-world.vala"

#. (itstool) path: section/code
#: C/hello-world.vala.page:77
#, no-wrap
msgid ""
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\tvar label = new Gtk.Label (\"Hello GNOME!\");\n"
"\t\twindow.add (label);\n"
"\t\twindow.set_title (\"Welcome to GNOME\");\n"
"\t\twindow.set_default_size (200, 100);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\tvar label = new Gtk.Label (\"Hello GNOME!\");\n"
"\t\twindow.add (label);\n"
"\t\twindow.set_title (\"Welcome to GNOME\");\n"
"\t\twindow.set_default_size (200, 100);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: section/p
#: C/hello-world.vala.page:81
msgid ""
"To run this application, first save it as hello-world.vala. Then open "
"Terminal, go to the folder where your application is stored."
msgstr ""
"Για να τρέξετε αυτήν την εφαρμογή, πρώτα αποθηκεύστε την ως helloWorld.vala. "
"Έπειτα ανοίξτε το τερματικό, πηγαίνετε στον φάκελο όπου η εφαρμογή σας "
"αποθηκεύεται."

#. (itstool) path: section/screen
#: C/hello-world.vala.page:83
#, no-wrap
msgid "valac --pkg gtk+-3.0 <file>hello-world.vala</file>"
msgstr "valac --pkg gtk+-3.0 <file>hello-world.vala</file>"

#. (itstool) path: section/code
#: C/hello-world.vala.page:121
#, no-wrap
msgid ""
"# The actual runnable program is set to the SCRIPTS primitive.\n"
"# # Prefix bin_ tells where to copy this\n"
"bin_PROGRAMS = hello-world\n"
"hello_world_CFLAGS = $(gtk_CFLAGS)\n"
"hello_world_LDADD = $(gtk_LIBS)\n"
"hello_world_VALAFLAGS = --pkg gtk+-3.0\n"
"hello_world_SOURCES = hello-world.vala\n"
"\n"
"desktopdir = $(datadir)/applications\n"
"desktop_DATA = \\\n"
"\thello-world.desktop\n"
msgstr ""
"# Το ενεργό εκτελέσιμο πρόγραμμα ορίζεται στα θεμελιακά SCRIPTS.\n"
"# # Το πρόθεμα bin_ λέει πού να το αντιγράψετε αυτό\n"
"bin_PROGRAMS = hello-world\n"
"hello_world_CFLAGS = $(gtk_CFLAGS)\n"
"hello_world_LDADD = $(gtk_LIBS)\n"
"hello_world_VALAFLAGS = --pkg gtk+-3.0\n"
"hello_world_SOURCES = hello-world.vala\n"
"\n"
"desktopdir = $(datadir)/applications\n"
"desktop_DATA = \\\n"
"\thello-world.desktop\n"

#. (itstool) path: section/code
#: C/hello-world.vala.page:134
#, no-wrap
msgid ""
"To build and install this program:\n"
"\n"
"./autogen.sh --prefix=/home/your_username/.local\n"
"make\n"
"make install\n"
"\n"
"-------------\n"
"Running the first line above creates the following files:\n"
"\n"
"aclocal.m4\n"
"autom4te.cache\n"
"config.log\n"
"config.status\n"
"configure\n"
"depcomp\n"
"hello-world\n"
"hello-world.c\n"
"hello-world.desktop\n"
"hello_world-hello-world.o\n"
"hello_world_vala.stamp\n"
"install-sh\n"
"missing\n"
"Makefile.in\n"
"Makefile\n"
"\n"
"Running \"make\" links all the appropriate libraries.\n"
"\n"
"Running \"make install\", installs the application in /home/your_username/.local/bin\n"
"and installs the hello-world.desktop file in /home/your_username/.local/share/applications\n"
"\n"
"You can now run the application by typing \"Hello World\" in the Overview.\n"
"\n"
"----------------\n"
"To uninstall, type:\n"
"\n"
"make uninstall\n"
"\n"
"----------------\n"
"To create a tarball type:\n"
"\n"
"make distcheck\n"
"\n"
"This will create hello-world-1.0.tar.xz\n"
msgstr ""
"Για να κατασκευάσετε και να εγκαταστήσετε αυτό το πρόγραμμα:\n"
"\n"
"./autogen.sh --prefix=/home/your_username/.local\n"
"make\n"
"make install\n"
"\n"
"-------------\n"
"Η εκτέλεση της πρώτης παραπάνω γραμμής δημιουργεί τα παρακάτω αρχεία:\n"
"\n"
"aclocal.m4\n"
"autom4te.cache\n"
"config.log\n"
"config.status\n"
"configure\n"
"depcomp\n"
"hello-world\n"
"hello-world.c\n"
"hello-world.desktop\n"
"hello_world-hello-world.o\n"
"hello_world_vala.stamp\n"
"install-sh\n"
"missing\n"
"Makefile.in\n"
"Makefile\n"
"\n"
"Η εκτέλεση του \"make\" συνδέει όλες τις κατάλληλες βιβλιοθήκες.\n"
"\n"
"Η εκτέλεση \"make install\", εγκαθιστά την εφαρμογή στο /home/your_username/.local/bin\n"
"και εγκαθιστά το αρχείο hello-world.desktop στο /home/your_username/.local/share/applications\n"
"\n"
"Μπορείτε τώρα να εκτελέσετε την εφαρμογή πληκτρολογώντας \"Hello World\" στην επισκόπηση.\n"
"\n"
"----------------\n"
"Για απεγκατάσταση, πληκτρολογήστε:\n"
"\n"
"make uninstall\n"
"\n"
"----------------\n"
"Για δημιουργία τύπου tarball πληκτρολογήστε:\n"
"\n"
"make distcheck\n"
"\n"
"Αυτό θα δημιουργήσει hello-world-1.0.tar.xz\n"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/image.c.page:22 C/image.js.page:21 C/image.py.page:29
#: C/image.vala.page:22
msgctxt "_"
msgid "external ref='media/image.png' md5='9416aa74d9d6a857783f7a36338e7a02'"
msgstr "external ref='media/image.png' md5='9416aa74d9d6a857783f7a36338e7a02'"

#. (itstool) path: info/title
#: C/image.c.page:8
msgctxt "text"
msgid "Image (C)"
msgstr "Εικόνα (C)"

#. (itstool) path: info/desc
#: C/image.c.page:18 C/image.js.page:17 C/image.py.page:25
#: C/image.vala.page:18
msgid "A widget displaying an image"
msgstr "Ένα γραφικό στοιχείο που εμφανίζει μια εικόνα"

#. (itstool) path: page/title
#: C/image.c.page:21 C/image.js.page:20 C/image.py.page:28
#: C/image.vala.page:21
msgid "Image"
msgstr "Εικόνα"

#. (itstool) path: page/p
#: C/image.c.page:23 C/image.js.page:22 C/image.py.page:30
#: C/image.vala.page:23
msgid "This GtkApplication displays an image file from the current directory."
msgstr ""
"Αυτή η GtkApplication εμφανίζει ένα αρχείο εικόνας από τον τρέχοντα κατάλογο."

#. (itstool) path: note/p
#: C/image.c.page:24 C/image.js.page:23 C/image.vala.page:24
msgid ""
"If the image file isn't loaded successfully, the image will contain a "
"\"broken image\" icon. The <file>filename.png</file> needs to be in the "
"current directory for this code to work. Use your favorite picture!"
msgstr ""
"Εάν το αρχείο εικόνας δεν φορτωθεί επιτυχώς, η εικόνα θα περιέχει ένα "
"εικονίδιο \"σπασμένης εικόνας\". Το <file>filename.png</file> χρειάζεται να "
"είναι στον τρέχοντα κατάλογο για να δουλέψει αυτός ο κώδικας. Χρησιμοποιήστε "
"την αγαπημένη σας εικόνα!"

#. (itstool) path: page/code
#: C/image.c.page:28
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *image;\n"
"\n"
"  /*Create a window with a title and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Welcome to GNOME\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 300);\n"
"\n"
"  image = gtk_image_new_from_file (\"gnome-image.png\");\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (image));\n"
"\n"
"  gtk_widget_show_all (GTK_WIDGET (window));\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\",G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *image;\n"
"\n"
"  /*Δημιουργία παραθύρου με τίτλο και προεπιλεγμένο μέγεθος*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Welcome to GNOME\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 300);\n"
"\n"
"  image = gtk_image_new_from_file (\"gnome-image.png\");\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (image));\n"
"\n"
"  gtk_widget_show_all (GTK_WIDGET (window));\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\",G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/image.c.page:35
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkImage.html"
"\">GtkImage</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkImage.html"
"\">GtkImage</link>"

#. (itstool) path: info/title
#: C/image.js.page:7
msgctxt "text"
msgid "Image (JavaScript)"
msgstr "Εικόνα (JavaScript)"

#. (itstool) path: page/code
#: C/image.js.page:27
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ImageExample = new Lang.Class ({\n"
"\tName: 'Image Example',\n"
"\n"
"\t/* Create the application itself\n"
"\t   This boilerplate code is needed to build any GTK+ application. */\n"
"        _init: function () {\n"
"   \t     this.application = new Gtk.Application ({\n"
"  \t          application_id: 'org.example.jsimage',\n"
"  \t          flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"   \t     });\n"
"\n"
"\t// Connect 'activate' and 'startup' signals to the callback functions\n"
"\tthis.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"\tthis.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"\t},\n"
"\n"
"\t// Callback function for 'activate' signal presents windows when active\n"
"\t_onActivate: function () {\n"
"\t\tthis._window.present ();\n"
"\t},\n"
"\n"
"\t// Callback function for 'startup' signal initializes menus and builds the UI\n"
"\t_onStartup: function () {\n"
"\t\tthis._buildUI ();\n"
"\t},\n"
"\n"
"\n"
"\n"
"\n"
"\t// Build the application's UI\n"
"\t_buildUI: function () {\n"
"\n"
"\t\t// Create the application window\n"
"        \tthis._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                     \t     window_position: Gtk.WindowPosition.CENTER,\n"
"                                                     \t     title: \"Welcome to GNOME\",\n"
"                                                     \t     default_height: 300,\n"
"                                                     \t     default_width: 300 });\n"
"\n"
"\t\t// Create the label\n"
"\t\tthis.jsimage = new Gtk.Image ({file: \"gnome-image.png\"});\n"
"\t\tthis._window.add (this.jsimage);\n"
"\n"
"       \t \t// Show the window and all child widgets\n"
"       \t \tthis._window.show_all();\n"
"\t}\n"
"\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ImageExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ImageExample = new Lang.Class ({\n"
"\tName: 'Image Example',\n"
"\n"
"\t/* Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"\t   Αυτός ο κώδικας χρειάζεται για τη δόμηση οποιασδήποτε εφαρμογής  GTK+. */\n"
"        _init: function () {\n"
"   \t     this.application = new Gtk.Application ({\n"
"  \t          application_id: 'org.example.jsimage',\n"
"  \t          flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"   \t     });\n"
"\n"
"\t// Σύνδεση σημάτων 'activate' και 'startup' στις συναρτήσεις επανάκλησης\n"
"\tthis.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"\tthis.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"\t},\n"
"\n"
"\t// Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"\t_onActivate: function () {\n"
"\t\tthis._window.present ();\n"
"\t},\n"
"\n"
"\t// Η συνάρτηση επανάκλησης για το σήμα 'startup' αρχικοποιεί τα μενού και δομεί τη διεπαφή χρήστη\n"
"\t_onStartup: function () {\n"
"\t\tthis._buildUI ();\n"
"\t},\n"
"\n"
"\n"
"\n"
"\n"
"\t// Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"\t_buildUI: function () {\n"
"\n"
"\t\t// Δημιουργία παραθυύρου της εφαρμογής\n"
"        \tthis._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                     \t     window_position: Gtk.WindowPosition.CENTER,\n"
"                                                     \t     title: \"Welcome to GNOME\",\n"
"                                                     \t     default_height: 300,\n"
"                                                     \t     default_width: 300 });\n"
"\n"
"\t\t// Δημιουργία της ετικέτας\n"
"\t\tthis.jsimage = new Gtk.Image ({file: \"gnome-image.png\"});\n"
"\t\tthis._window.add (this.jsimage);\n"
"\n"
"       \t \t// Εμφάνιση του παραθύρου και όλων των θυγατικών γραφικών στοιχείων\n"
"       \t \tthis._window.show_all();\n"
"\t}\n"
"\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new ImageExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/image.js.page:34
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Image.html"
"\">Gtk.Image</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Image.html"
"\">Gtk.Image</link>"

#. (itstool) path: info/title
#: C/image.py.page:8
msgctxt "text"
msgid "Image (Python)"
msgstr "Εικόνα (Python)"

#. (itstool) path: credit/name
#: C/image.py.page:20
msgid "Sindhu S"
msgstr "Sindhu S"

#. (itstool) path: credit/years
#: C/image.py.page:22
msgid "2014"
msgstr "2014"

#. (itstool) path: note/p
#: C/image.py.page:32
msgid ""
"If the image file is not loaded successfully, the image will contain a "
"\"broken image\" icon. <file>filename.png</file> needs to be in the current "
"directory for this code to work."
msgstr ""
"Εάν το αρχείο εικόνας δεν φορτωθεί επιτυχώς, η εικόνα θα περιέχει ένα "
"εικονίδιο \"σπασμένης εικόνας\". Το <file>filename.png</file> χρειάζεται να "
"είναι στον τρέχοντα κατάλογο για να δουλέψει αυτός ο κώδικας."

#. (itstool) path: section/code
#: C/image.py.page:43
#, no-wrap
msgid ""
"\n"
"  from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # create a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(300, 300)\n"
"\n"
"        # create an image\n"
"        image = Gtk.Image()\n"
"        # set the content of the image as the file filename.png\n"
"        image.set_from_file(\"gnome-image.png\")\n"
"        # add the image to the window\n"
"        self.add(image)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
"\n"
"  "
msgstr ""
"\n"
"  from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # create a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(300, 300)\n"
"\n"
"        # create an image\n"
"        image = Gtk.Image()\n"
"        # set the content of the image as the file filename.png\n"
"        image.set_from_file(\"gnome-image.png\")\n"
"        # add the image to the window\n"
"        self.add(image)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
"\n"
"  "

#. (itstool) path: section/p
#: C/image.py.page:47
msgid ""
"Another way to obtain what we have in the example is to create the image as "
"an instance of another class and add it to the instance of <code>MyWindow</"
"code> in the <code>do_activate(self)</code> method:"
msgstr ""
"Ένας άλλος τρόπος για να πάρετε ότι έχουμε στο παράδειγμα είναι η δημιουργία "
"της εικόνας ως ένα στιγμιότυπο μιας άλλης κλάσης και προσθήκη του στο "
"στιγμιότυπο του <code>MyWindow</code> στη μέθοδο <code>do_activate(self)</"
"code>:"

#. (itstool) path: section/code
#: C/image.py.page:51
#, no-wrap
msgid ""
"\n"
"    # a class to create a window\n"
"    class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(300, 300)\n"
"\n"
"    # a class to create an image\n"
"    class MyImage(Gtk.Image):\n"
"    def __init__(self):\n"
"        Gtk.Image.__init__(self)\n"
"        self.set_from_file(\"gnome-image.png\")\n"
"\n"
"    class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        # create an instance of MyWindow\n"
"        win = MyWindow(self)\n"
"        # create an instance of MyImage and add it to the window\n"
"        win.add(MyImage())\n"
"        # show the window and everything on it\n"
"        win.show_all()\n"
"  "
msgstr ""
"\n"
"    # a class to create a window\n"
"    class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(300, 300)\n"
"\n"
"    # a class to create an image\n"
"    class MyImage(Gtk.Image):\n"
"    def __init__(self):\n"
"        Gtk.Image.__init__(self)\n"
"        self.set_from_file(\"gnome-image.png\")\n"
"\n"
"    class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        # create an instance of MyWindow\n"
"        win = MyWindow(self)\n"
"        # create an instance of MyImage and add it to the window\n"
"        win.add(MyImage())\n"
"        # show the window and everything on it\n"
"        win.show_all()\n"
"  "

#. (itstool) path: note/p
#: C/image.py.page:78
msgid ""
"To use this code snippet, you will need to add the code that imports "
"<code>Gtk</code> and <code>GdkPixbuf</code> from <code>gi.repository</code> "
"and lines that instantiate the <code>MyApplication</code> window."
msgstr ""
"Για να χρησιμοποιήσετε αυτό το τμήμα κώδικα, θα χρειαστεί να προσθέσετε τον "
"κώδικα που εισάγει τα <code>Gtk</code> και <code>GdkPixbuf</code> από το "
"<code>gi.repository</code> και τις γραμμές που αντιπροσωπεύουν το παράθυρο "
"<code>MyApplication</code>."

#. (itstool) path: section/title
#: C/image.py.page:85
msgid "Useful methods for an Image widget"
msgstr "Χρήσιμες μέθοδοι για γραφικό στοιχείο εικόνας"

#. (itstool) path: item/p
#: C/image.py.page:89
msgid ""
"To load an image over a network use <code>set_from_pixbuf(pixbuf)</code>, "
"where <code>pixbuf</code> is a <link href=\"https://developer.gnome.org/gdk-"
"pixbuf/unstable/index.html\"> GdkPixbuf</link>."
msgstr ""
"Για φόρτωση εικόνας μέσω δικτύου χρησιμοποιήστε "
"<code>set_from_pixbuf(pixbuf)</code>, όπου <code>pixbuf</code> είναι <link "
"href=\"https://developer.gnome.org/gdk-pixbuf/unstable/index.html\"> "
"GdkPixbuf</link>."

#. (itstool) path: item/code
#: C/image.py.page:93
#, no-wrap
msgid ""
"\n"
"        from gi.repository import Gtk\n"
"        from gi.repository import GdkPixbuf\n"
"        import sys\n"
"\n"
"        class MyWindow(Gtk.ApplicationWindow):\n"
"            # create a window\n"
"            def __init__(self, app):\n"
"                Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"                self.set_default_size(300, 300)\n"
"\n"
"                # create a pixbuf from file filename=\"gnome-image.png\", with width=32\n"
"                # and height=64 amd boolean preserve_aspect_ratio=False.\n"
"                pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(\"gnome-image.png\", 64, 128, False)\n"
"\n"
"                # create an image\n"
"                image = Gtk.Image()\n"
"                # set the content of the image as the pixbuf\n"
"                image.set_from_pixbuf(pixbuf)\n"
"                # add the image to the window\n"
"                self.add(image)\n"
"        "
msgstr ""
"\n"
"        from gi.repository import Gtk\n"
"        from gi.repository import GdkPixbuf\n"
"        import sys\n"
"\n"
"        class MyWindow(Gtk.ApplicationWindow):\n"
"            # create a window\n"
"            def __init__(self, app):\n"
"                Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"                self.set_default_size(300, 300)\n"
"\n"
"                # create a pixbuf from file filename=\"gnome-image.png\", with width=32\n"
"                # and height=64 amd boolean preserve_aspect_ratio=False.\n"
"                pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(\"gnome-image.png\", 64, 128, False)\n"
"\n"
"                # create an image\n"
"                image = Gtk.Image()\n"
"                # set the content of the image as the pixbuf\n"
"                image.set_from_pixbuf(pixbuf)\n"
"                # add the image to the window\n"
"                self.add(image)\n"
"        "

#. (itstool) path: item/p
#: C/image.py.page:115
msgid ""
"If <code>preserve_aspect_ratio=True</code> we can use "
"<code>new_from_file_at_size(filename, width, height)</code>. If <code>width</"
"code> or <code>height</code> is <code>-1</code>, it is not constrained."
msgstr ""
"Εάν <code>preserve_aspect_ratio=True</code> μπορούμε να χρησιμοποιήσουμε "
"<code>new_from_file_at_size(filename, width, height)</code>. Εάν "
"<code>width</code> ή <code>height</code> είναι <code>-1</code>, δεν "
"περιορίζεται."

#. (itstool) path: item/p
#: C/image.py.page:119
msgid ""
"For loading from an input stream, see <code>new_from_stream()</code> and "
"<code>new_from_stream_at_scale()</code> in the documentation."
msgstr ""
"Για φόρτωση από ροή εισόδου, δείτε <code>new_from_stream()</code> και "
"<code>new_from_stream_at_scale()</code> στην τεκμηρίωση"

#. (itstool) path: item/p
#: C/image.py.page:131
msgid ""
"<link href=\"https://developer.gnome.org/gtk3/unstable/GtkImage.html\"> "
"GtkImage</link>"
msgstr ""
"<link href=\"https://developer.gnome.org/gtk3/unstable/GtkImage.html\"> "
"GtkImage</link>"

#. (itstool) path: item/p
#: C/image.py.page:135
msgid ""
"<link href=\"https://developer.gnome.org/gtk3/unstable/GtkWindow.html\"> "
"GtkWindow</link>"
msgstr ""
"<link href=\"https://developer.gnome.org/gtk3/unstable/GtkWindow.html\"> "
"GtkWindow</link>"

#. (itstool) path: info/title
#: C/image.vala.page:8
msgctxt "text"
msgid "Image (Vala)"
msgstr "Εικόνα (Vala)"

#. (itstool) path: page/code
#: C/image.vala.page:27
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Welcome to GNOME\");\n"
"\n"
"\t\tvar image = new Gtk.Image ();\n"
"\t\timage.set_from_file (\"gnome-image.png\");\n"
"\t\tthis.add (image);\n"
"\t\tthis.set_default_size (300, 300);\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Welcome to GNOME\");\n"
"\n"
"\t\tvar image = new Gtk.Image ();\n"
"\t\timage.set_from_file (\"gnome-image.png\");\n"
"\t\tthis.add (image);\n"
"\t\tthis.set_default_size (300, 300);\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/image.vala.page:32 C/separator.vala.page:40
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Application.html"
"\">GtkApplication</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Application.html"
"\">GtkApplication</link>"

#. (itstool) path: item/p
#: C/image.vala.page:33
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ApplicationWindow.html"
"\">GtkApplicationWindow</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ApplicationWindow.html"
"\">GtkApplicationWindow</link>"

#. (itstool) path: item/p
#: C/image.vala.page:34 C/paned.vala.page:38
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Image.html\">GtkImage</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Image.html\">GtkImage</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/image-viewer.c.page:39 C/image-viewer.cpp.page:37
#: C/image-viewer.js.page:47 C/image-viewer.py.page:46
#: C/image-viewer.vala.page:54
msgctxt "_"
msgid ""
"external ref='media/image-viewer.png' md5='7720360611243b14283b83527be968c2'"
msgstr ""
"external ref='media/image-viewer.png' md5='7720360611243b14283b83527be968c2'"

#. (itstool) path: info/title
#: C/image-viewer.c.page:8
msgctxt "text"
msgid "Image viewer (C)"
msgstr "Προβολέας εικόνων (C)"

#. (itstool) path: info/desc
#: C/image-viewer.c.page:11
msgid "A little bit more than a simple \"Hello world\" Gtk application."
msgstr "Κάτι περισσότερο από απλή εφαρμογή Gtk όπως το \"Γεια σου κόσμε\"."

#. (itstool) path: page/title
#: C/image-viewer.c.page:29 C/image-viewer.cpp.page:27
#: C/image-viewer.js.page:29 C/image-viewer.py.page:29
#: C/image-viewer.vala.page:37
msgid "Image viewer"
msgstr "Προβολή εικόνων"

#. (itstool) path: synopsis/p
#: C/image-viewer.c.page:32 C/image-viewer.cpp.page:30
#: C/message-board.c.page:29 C/record-collection.js.page:32
msgid "In this tutorial, you will learn:"
msgstr "Σε αυτό το μάθημα, θα μάθετε:"

#. (itstool) path: item/p
#: C/image-viewer.c.page:34
msgid "Some basic concepts of C/GObject programming"
msgstr "Μερικές βασικές έννοιες του προγραμματισμού C/GObject"

#. (itstool) path: item/p
#: C/image-viewer.c.page:35
msgid "How to write a Gtk application in C"
msgstr "Πώς να γράψετε μια εφαρμογή Gtk σε C"

#. (itstool) path: item/p
#: C/image-viewer.c.page:49
msgid ""
"Choose <gui>GTK+ (Simple)</gui> from the <gui>C</gui> tab, click "
"<gui>Continue</gui>, and fill out your details on the next few pages. Use "
"<file>image-viewer</file> as project name and directory."
msgstr ""
"Επιλέξτε <gui>GTK+ (απλό)</gui> από την καρτέλα <gui>C</gui>, πατήστε "
"<gui>συνέχεια</gui>, και συμπληρώστε τις λεπτομέρειές σας στις επόμενες "
"λίγες σελίδες. Χρησιμοποιήστε το <file>image-viewer</file> ως όνομα του "
"έργου και του καταλόγου."

#. (itstool) path: item/p
#: C/image-viewer.c.page:52
msgid ""
"Make sure that <gui>Use GtkBuilder for user interface</gui> is disabled as "
"we will create the UI manually in this tutorial. Check the <link xref="
"\"guitar-tuner.c\">Guitar-Tuner</link> tutorial if you want to learn how to "
"use the interface builder."
msgstr ""
"Βεβαιωθείτε ότι απενεργοποιήσατε το <gui>χρήση του GtkBuilder για διεπαφή "
"χρήση</gui> επειδή θα φτιάξουμε τη διεπαφή χρήστη χειροκίνητα σε αυτό το "
"μάθημα. Σημειώστε το μάθημα <link xref=\"guitar-tuner.c\">ρυθμιστής κιθάρας</"
"link> εάν θέλετε να μάθετε τη χρήση του κατασκευαστή διεπαφής."

#. (itstool) path: section/p
#: C/image-viewer.c.page:67
msgid ""
"C is a rather verbose language, so don't be surprised that the file contains "
"quite a lot of code. Most of it is template code. It loads an (empty) window "
"and shows it. More details are given below; skip this list if you understand "
"the basics:"
msgstr ""
"Η C είναι μια μάλλον περιγραφική γλώσσα, έτσι μην εκπλαγείτε που το αρχείο "
"περιέχει πολύ κώδικα. Ο περισσότερος κώδικας είναι πρότυπο κώδικα. Φορτώνει "
"ένα (κενό) παράθυρο και το εμφανίζει. Περισσότερες λεπτομέρειες υπάρχουν πιο "
"κάτω· προσπεράστε αυτή τη λίστα αν καταλαβαίνετε τα βασικά:"

#. (itstool) path: item/p
#: C/image-viewer.c.page:74
msgid ""
"The <code>create_window</code> function creates a new (empty) window and "
"connects a signal to exit the application when that window is closed."
msgstr ""
"Η συνάρτηση <code>create_window</code> δημιουργεί ένα νέο (άδειο) παράθυρο "
"και συνδέει ένα σήμα για έξοδο της εφαρμογής όταν το παράθυρο κλείνει."

#. (itstool) path: section/title
#: C/image-viewer.c.page:90 C/image-viewer.cpp.page:87
#: C/image-viewer.vala.page:139
msgid "Creating the user interface"
msgstr "Δημιουργία της διεπαφής χρήστη"

#. (itstool) path: section/p
#: C/image-viewer.c.page:91
msgid ""
"Now we will bring life into the empty window. GTK organizes the user "
"interface with <code>GtkContainer</code>s that can contain other widgets and "
"even other containers. Here we will use the simplest available container, a "
"<code>GtkBox</code>:"
msgstr ""
"Τώρα δίνουμε ζωή στο άδειο παράθυρο. Το GTK οργανώνει τη διεπαφή χρήστη με "
"το <code>GtkContainer</code> που μπορεί να περιέχει άλλα γραφικά στοιχεία "
"και ακόμα άλλους περιέκτες. Εδώ θα χρησιμοποιήσουμε τον απλούστερο διαθέσιμο "
"περιέκτη, έναν <code>GtkBox</code>:"

#. (itstool) path: section/code
#: C/image-viewer.c.page:94
#, no-wrap
msgid ""
"\n"
"static GtkWidget*\n"
"create_window (void)\n"
"{\n"
"\tGtkWidget *window;\n"
"\tGtkWidget *button;\n"
"\tGtkWidget *image;\n"
"\tGtkWidget *box;\n"
"\n"
"\t/* Set up the UI */\n"
"\twindow = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n"
"\tgtk_window_set_title (GTK_WINDOW (window), \"image-viewer-c\");\n"
"\n"
"\tbox = gtk_box_new (GTK_ORIENTATION_VERTICAL, 5);\n"
"\tbutton = gtk_button_new_with_label (_(\"Open image\"));\n"
"\timage = gtk_image_new ();\n"
"\n"
"\tgtk_box_pack_start (GTK_BOX (box), image, TRUE, TRUE, 0);\n"
"\tgtk_box_pack_start (GTK_BOX (box), button, FALSE, FALSE, 0);\n"
"\n"
"\tgtk_container_add (GTK_CONTAINER (window), box);\n"
"\n"
"\t/* Connect signals */\n"
"\n"
"\t/* Show open dialog when opening a file */\n"
"\tg_signal_connect (button, \"clicked\", G_CALLBACK (on_open_image), image);\n"
"\n"
"\t/* Exit when the window is closed */\n"
"\tg_signal_connect (window, \"destroy\", G_CALLBACK (gtk_main_quit), NULL);\n"
"\n"
"\treturn window;\n"
"}\n"
msgstr ""
"\n"
"static GtkWidget*\n"
"create_window (void)\n"
"{\n"
"\tGtkWidget *window;\n"
"\tGtkWidget *button;\n"
"\tGtkWidget *image;\n"
"\tGtkWidget *box;\n"
"\n"
"\t/* Ρύθμιση της διεπαφής χρήστη */\n"
"\twindow = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n"
"\tgtk_window_set_title (GTK_WINDOW (window), \"image-viewer-c\");\n"
"\n"
"\tbox = gtk_box_new (GTK_ORIENTATION_VERTICAL, 5);\n"
"\tbutton = gtk_button_new_with_label (_(\"Open image\"));\n"
"\timage = gtk_image_new ();\n"
"\n"
"\tgtk_box_pack_start (GTK_BOX (box), image, TRUE, TRUE, 0);\n"
"\tgtk_box_pack_start (GTK_BOX (box), button, FALSE, FALSE, 0);\n"
"\n"
"\tgtk_container_add (GTK_CONTAINER (window), box);\n"
"\n"
"\t/* Σήματα σύνδεσης */\n"
"\n"
"\t/* Εμφάνιση ανοικτού διαλόγου κατά το άνοιγμα αρχείου */\n"
"\tg_signal_connect (button, \"clicked\", G_CALLBACK (on_open_image), image);\n"
"\n"
"\t/* Έξοδος όταν το παράθυρο κλείνει */\n"
"\tg_signal_connect (window, \"destroy\", G_CALLBACK (gtk_main_quit), NULL);\n"
"\n"
"\treturn window;\n"
"}\n"

#. (itstool) path: item/p
#: C/image-viewer.c.page:129
msgid ""
"The first lines create the widgets we want to use: a button for opening up "
"an image, the image view widget itself and the box we will use as a "
"container. The macros like <code>GTK_BOX</code> are used for dynamic type "
"checking and casting which is needed as C doesn't support object-orientation "
"out-of-the-box."
msgstr ""
"Οι πρώτες γραμμές δημιουργούν τα επιθυμητά γραφικά στοιχεία για χρήση: ένα "
"κουμπί για άνοιγμα μιας εικόνας, το ίδιο το γραφικό στοιχείο προβολής της "
"εικόνας και το πλαίσιο που θα χρησιμοποιήσουμε ως περιέκτη. Οι μακροεντολές "
"όπως <code>GTK_BOX</code> χρησιμοποιούνται για έλεγχο δυναμικού τύπου και "
"αλλαγές που απαιτούνται καθώς η C δεν υποστηρίζει προσανατολισμό "
"αντικειμένου εκτός πλαισίου."

#. (itstool) path: item/p
#: C/image-viewer.c.page:134
msgid ""
"The calls to <code>gtk_box_pack_start</code> add the two widgets to the box "
"and define their behaviour. The image will expand into any available space "
"while the button will just be as big as needed. You will notice that we "
"don't set explicit sizes on the widgets. In GTK this is usually not needed "
"as it makes it much easier to have a layout that looks good in different "
"window sizes. Next, the box is added to the window."
msgstr ""
"Οι κλήσεις στο <code>gtk_box_pack_start</code> προσθέτουν τα δύο γραφικά "
"στοιχεία στο πλαίσιο και ορίζουν τη συμπεριφορά τους. Η εικόνα θα επεκταθεί "
"σε κάθε διαθέσιμο χώρο, ενώ το κουμπί θα είναι απλά τόσο μεγάλο όσο "
"χρειάζεται. Θα παρατηρήσετε ότι δεν ορίζουμε ρητά μεγέθη στα γραφικά "
"στοιχεία. Στο GTK αυτό συνήθως δεν χρειάζεται επειδή είναι πιο απλό να "
"έχετε μια διάταξη που φαίνεται καλή με διαφορετικά μεγέθη παραθύρων. Στη "
"συνέχεια, το πλαίσιο προστίθεται στο παράθυρο."

#. (itstool) path: item/p
#: C/image-viewer.c.page:140
msgid ""
"We need to define what happens when the user clicks on the button. GTK uses "
"the concept of <em>signals</em>. When the button is clicked, it fires the "
"<em>clicked</em> signal, which we can connect to some action. This is done "
"using the <code>g_signal_connect</code> function which tells GTK to call the "
"<code>on_image_open</code> function when the button is clicked and to pass "
"the image as an additional argument to that function. We will define the "
"<em>callback</em> in the next section."
msgstr ""
"Χρειαζόμαστε να ορίσουμε τι συμβαίνει όταν ο χρήστης πατά σε ένα πλήκτρο. Το "
"GTK χρησιμοποιεί την έννοια των <em>σημάτων</em>. Όταν το κουμπί πατιέται, "
"ξεκινά το σήμα <em>πατημένο</em>, που μπορούμε να συνδέσουμε με κάποια "
"ενέργεια. Αυτό γίνεται χρησιμοποιώντας τη συνάρτηση <code>g_signal_connect</"
"code> που λέει στο GTK να καλέσει τη συνάρτηση <code>on_open_image</code> "
"όταν το κουμπί πατιέται και να περάσει την εικόνα ως πρόσθετο όρισμα σε αυτή "
"τη συνάρτηση. Θα ορίσουμε την <em>επανάκληση</em> στην επόμενη ενότητα."

#. (itstool) path: item/p
#: C/image-viewer.c.page:145
msgid ""
"The last <code>g_signal_connect()</code> makes sure that the application "
"exits when the window is closed."
msgstr ""
"Ο τελευταίος <code>g_signal_connect()</code> επιβεβαιώνει ότι η εφαρμογή "
"φεύγει όταν το παράθυρο κλείνει."

#. (itstool) path: item/p
#: C/image-viewer.c.page:148
msgid ""
"As a last step, make sure to replace the <code>gtk_widget_show</code> call "
"in the <code>main()</code> function by <code>gtk_widget_show_all()</code> to "
"show the window and all the widgets it contains."
msgstr ""
"Ως τελευταίο βήμα, βεβαιωθείτε να αντικαταστήσετε την κλήση "
"<code>gtk_widget_show</code> στη συνάρτηση <code>main()</code> από "
"<code>gtk_widget_show_all()</code> για να εμφανιστεί το παράθυρο και όλα τα "
"γραφικά στοιχεία που περιέχει."

#. (itstool) path: section/title
#: C/image-viewer.c.page:155 C/image-viewer.cpp.page:142
#: C/image-viewer.vala.page:210
msgid "Showing the image"
msgstr "Εμφάνιση της εικόνας"

#. (itstool) path: section/p
#: C/image-viewer.c.page:156
msgid ""
"We will now define the signal handler for the <em>clicked</em> signal or the "
"button we mentioned before. Add this code before the <code>create_window()</"
"code> method."
msgstr ""
"Θα ορίσουμε τώρα τον χειριστή σήματος για το σήμα <em>πατημένο</em> ή για το "
"κουμπί που αναφέραμε πριν. Προσθέστε αυτόν τον κώδικα πριν τη μέθοδο "
"<code>create_window()</code>."

#. (itstool) path: section/code
#: C/image-viewer.c.page:159
#, no-wrap
msgid ""
"\n"
"static void\n"
"on_open_image (GtkButton* button, gpointer user_data)\n"
"{\n"
"\tGtkWidget *image = GTK_WIDGET (user_data);\n"
"\tGtkWidget *toplevel = gtk_widget_get_toplevel (image);\n"
"\tGtkFileFilter *filter = gtk_file_filter_new ();\n"
"\tGtkWidget *dialog = gtk_file_chooser_dialog_new (_(\"Open image\"),\n"
"\t                                                 GTK_WINDOW (toplevel),\n"
"\t                                                 GTK_FILE_CHOOSER_ACTION_OPEN,\n"
"\t                                                 GTK_STOCK_OK, GTK_RESPONSE_ACCEPT,\n"
"\t                                                 GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,\n"
"\t                                                 NULL);\n"
"\n"
"\tgtk_file_filter_add_pixbuf_formats (filter);\n"
"\tgtk_file_chooser_add_filter (GTK_FILE_CHOOSER (dialog),\n"
"\t                             filter);\n"
"\n"
"\tswitch (gtk_dialog_run (GTK_DIALOG (dialog)))\n"
"\t{\n"
"\t\tcase GTK_RESPONSE_ACCEPT:\n"
"\t\t{\n"
"\t\t\tgchar *filename =\n"
"\t\t\t\tgtk_file_chooser_get_filename (GTK_FILE_CHOOSER (dialog));\n"
"\t\t\tgtk_image_set_from_file (GTK_IMAGE (image), filename);\n"
"\t\t\tbreak;\n"
"\t\t}\n"
"\t\tdefault:\n"
"\t\t\tbreak;\n"
"\t}\n"
"\tgtk_widget_destroy (dialog);\n"
"}\n"
msgstr ""
"\n"
"static void\n"
"on_open_image (GtkButton* button, gpointer user_data)\n"
"{\n"
"\tGtkWidget *image = GTK_WIDGET (user_data);\n"
"\tGtkWidget *toplevel = gtk_widget_get_toplevel (image);\n"
"\tGtkFileFilter *filter = gtk_file_filter_new ();\n"
"\tGtkWidget *dialog = gtk_file_chooser_dialog_new (_(\"Open image\"),\n"
"\t                                                 GTK_WINDOW (toplevel),\n"
"\t                                                 GTK_FILE_CHOOSER_ACTION_OPEN,\n"
"\t                                                 GTK_STOCK_OK, GTK_RESPONSE_ACCEPT,\n"
"\t                                                 GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,\n"
"\t                                                 NULL);\n"
"\n"
"\tgtk_file_filter_add_pixbuf_formats (filter);\n"
"\tgtk_file_chooser_add_filter (GTK_FILE_CHOOSER (dialog),\n"
"\t                             filter);\n"
"\n"
"\tswitch (gtk_dialog_run (GTK_DIALOG (dialog)))\n"
"\t{\n"
"\t\tcase GTK_RESPONSE_ACCEPT:\n"
"\t\t{\n"
"\t\t\tgchar *filename =\n"
"\t\t\t\tgtk_file_chooser_get_filename (GTK_FILE_CHOOSER (dialog));\n"
"\t\t\tgtk_image_set_from_file (GTK_IMAGE (image), filename);\n"
"\t\t\tbreak;\n"
"\t\t}\n"
"\t\tdefault:\n"
"\t\t\tbreak;\n"
"\t}\n"
"\tgtk_widget_destroy (dialog);\n"
"}\n"

#. (itstool) path: section/p
#: C/image-viewer.c.page:192 C/image-viewer.cpp.page:178
#: C/image-viewer.js.page:283 C/image-viewer.py.page:197
msgid ""
"This is a bit more complicated than anything we've attempted so far, so "
"let's break it down:"
msgstr ""
"Αυτό είναι λίγο πιο περίπλοκο από όσα έχουμε κάνει μέχρι τώρα, για αυτό θα "
"το χωρίσουμε σε κομμάτια:"

#. (itstool) path: item/p
#: C/image-viewer.c.page:194
msgid ""
"The first argument of the signal is always the widget that sent the signal. "
"Sometimes other arguments related to the signal come after that, but "
"<em>clicked</em> doesn't have any. Next is the <code>user_data</code> "
"argument which is a pointer to the data we passed when connecting the "
"signal. In this case it is our <code>GtkImage</code> object."
msgstr ""
"Το πρώτο όρισμα του σήματος είναι πάντοτε το γραφικό στοιχείο που έστειλε "
"το σήμα. Μερικές φορές άλλα ορίσματα σχετικά με το σήμα έρχονται μετά από "
"αυτό, αλλά το <em>πατημένο</em> δεν έχει. Επόμενο όρισμα είναι το "
"<code>user_data</code> που είναι ένας δείκτης στα δεδομένα που περάσαμε όταν "
"συνδέσαμε το σήμα. Σε αυτήν την περίπτωση είναι το αντικείμενό μας "
"<code>GtkImage</code>."

#. (itstool) path: item/p
#: C/image-viewer.c.page:200
msgid ""
"The next interesting line is where the dialog for choosing the file is "
"created using <code>gtk_file_chooser_dialog_new</code>. The function takes "
"the title of the dialog, the parent window of the dialog and several options "
"like the number of buttons and their corresponding values."
msgstr ""
"Η επόμενη ενδιαφέρουσα γραμμή είναι όταν ο διάλογος επιλογής του αρχείου "
"δημιουργείται χρησιμοποιώντας το <code>gtk_file_chooser_dialog_new</code>. Η "
"συνάρτηση παίρνει τον τίτλο του διαλόγου, το ανιόν παράθυρο του διαλόγου και "
"πολλές επιλογές όπως ο αριθμός των κουμπιών και οι αντίστοιχες τιμές τους."

#. (itstool) path: item/p
#: C/image-viewer.c.page:204 C/image-viewer.cpp.page:186
#: C/image-viewer.js.page:290 C/image-viewer.py.page:204
msgid ""
"Notice that we are using <em>stock</em> button names from Gtk, instead of "
"manually typing \"Cancel\" or \"Open\". The advantage of using stock names "
"is that the button labels will already be translated into the user's "
"language."
msgstr ""
"Σημειώστε όταν χρησιμοποιούμε τα <em>προκαθορισμένα</em> ονόματα κουμπιών "
"που υπάρχουν στο Gtk, αντί να γράψουμε οι ίδιοι \"Ακύρωση\" ή \"Άνοιγμα\". "
"Το πλεονέκτημα στη χρήση των προκαθορισμένων ονομάτων είναι ότι οι ετικέτες "
"των κουμπιών θα έχουν ήδη μεταφραστεί στη γλώσσα του χρήστη."

#. (itstool) path: item/p
#: C/image-viewer.c.page:207
msgid ""
"The next two lines restrict the <gui>Open</gui> dialog to only display files "
"which can be opened by GtkImage. A filter object is created first; we then "
"add all kinds of files supported by <code>GdkPixbuf</code> (which includes "
"most image formats like PNG and JPEG) to the filter. Finally, we set this "
"filter to be the <gui>Open</gui> dialog's filter."
msgstr ""
"Οι επόμενες δύο γραμμές περιορίζουν το διάλογο <gui>άνοιγμα</gui> να "
"εμφανίζει μόνο αρχεία που μπορούν να ανοιχθούν από το GtkImage. Ένα "
"αντικείμενο φίλτρου δημιουργείται πρώτα· έπειτα προσθέτουμε όλα τα είδη των "
"αρχείων που υποστηρίζονται από <code>GdkPixbuf</code> (που περιλαμβάνει τις "
"περισσότερες μορφές όπως PNG και JPEG) στο φίλτρο. Τέλος, ορίζουμε αυτό το "
"φίλτρο να είναι το φίλτρο του διαλόγου <gui>άνοιγμα</gui>."

#. (itstool) path: item/p
#: C/image-viewer.c.page:210
msgid ""
"<code>gtk_dialog_run</code> displays the <gui>Open</gui> dialog. The dialog "
"will wait for the user to choose an image; when they do, "
"<code>gtk_dialog_run</code> will return the value <code>GTK_RESPONSE_ACCEPT</"
"code> (it would return <code>GTK_RESPONSE_CANCEL</code> if the user clicked "
"<gui>Cancel</gui>). The <code>switch</code> statement tests for this."
msgstr ""
"Ο <code>gtk_dialog_run</code> εμφανίζει το διάλογο <gui>άνοιγμα</gui>. Ο "
"διάλογος θα περιμένει τον χρήστη να διαλέξει μια εικόνα· όταν διαλέξει, ο "
"<code>gtk_dialog_run</code> θα επιστρέψει την τιμή "
"<code>GTK_RESPONSE_ACCEPT</code> (θα επιστρέψει <code>GTK_RESPONSE_CANCEL</"
"code> αν ο χρήστης πατήσει <gui>ακύρωση</gui>). Η πρόταση <code>switch</"
"code> ελέγχει για αυτό."

#. (itstool) path: item/p
#: C/image-viewer.c.page:212
msgid ""
"Assuming that the user did click <gui>Open</gui>, the next line sets the "
"<code>file</code> property of the GtkImage to the filename of the image "
"selected by the user. The GtkImage will then load and display the chosen "
"image."
msgstr ""
"Αν υποθέσουμε ότι ο χρήστης πάτησε το <gui>άνοιγμα</gui>, η επόμενη γραμμή "
"ορίζει την ιδιότητα <code>file</code> του GtkImage στο όνομα του αρχείου "
"εικόνας που επέλεξε ο χρήστης. Το GtkImage θα φορτώσει τότε και θα εμφανίσει "
"την επιλεγμένη εικόνα."

#. (itstool) path: item/p
#: C/image-viewer.c.page:215
msgid ""
"In the final line of this method, we destroy the <gui>Open</gui> dialog "
"because we don't need it any more. Destroying automatically hides the dialog."
msgstr ""
"Στην τελευταία γραμμή αυτής της μεθόδου, καταστρέφουμε τον διάλογο "
"<gui>άνοιγμα</gui> γιατί δεν τον χρειαζόμαστε πια. Καταστρέφοντας τον "
"αυτόματα κρύβεται ο διάλογος."

#. (itstool) path: section/p
#: C/image-viewer.c.page:224 C/image-viewer.cpp.page:212
msgid ""
"If you haven't already done so, choose the <file>Debug/src/image-viewer</"
"file> application in the dialog that appears. Finally, hit <gui>Run</gui> "
"and enjoy!"
msgstr ""
"Εάν δεν το έχετε ήδη κάνει, επιλέξτε την εφαρμογή <file>Debug/src/image-"
"viewer</file> στον διάλογο που εμφανίζεται. Τελικά, πατήστε <gui>τρέξιμο</"
"gui> και απολαύστε!"

#. (itstool) path: section/p
#: C/image-viewer.c.page:229
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"image-viewer/image-viewer.c\">reference code</link>."
msgstr ""
"Αν αντιμετωπίσετε πρόβλημα με το μάθημα, συγκρίνετε τον κώδικά σας με αυτόν "
"τον <link href=\"image-viewer/image-viewer.c\">κώδικα αναφοράς</link>."

#. (itstool) path: item/p
#: C/image-viewer.c.page:237 C/image-viewer.cpp.page:225
#: C/image-viewer.js.page:325 C/image-viewer.py.page:239
#: C/image-viewer.vala.page:298
msgid ""
"Have the user select a directory rather than a file, and provide controls to "
"cycle through all of the images in a directory."
msgstr ""
"Βάλτε τον χρήστη να επιλέξει ένα κατάλογο αντί για αρχείο και δώστε ελέγχους "
"να γυρίζουν όλες τις εικόνες σε έναν κατάλογο."

#. (itstool) path: item/p
#: C/image-viewer.c.page:240 C/image-viewer.cpp.page:228
#: C/image-viewer.js.page:328 C/image-viewer.py.page:242
#: C/image-viewer.vala.page:301
msgid ""
"Apply random filters and effects to the image when it is loaded and allow "
"the user to save the modified image."
msgstr ""
"Εφαρμόστε τυχαία φίλτρα και εφέ στην εικόνα όταν αυτή φορτωθεί και επιτρέψτε "
"στον χρήστη να αποθηκεύσει την επεξεργασμένη εικόνα."

#. (itstool) path: item/p
#: C/image-viewer.c.page:241 C/image-viewer.cpp.page:229
#: C/image-viewer.js.page:329 C/image-viewer.py.page:243
#: C/image-viewer.vala.page:302
msgid ""
"<link href=\"http://www.gegl.org/api.html\">GEGL</link> provides powerful "
"image manipulation capabilities."
msgstr ""
"Το <link href=\"http://www.gegl.org/api.html\">GEGL</link> παρέχει ισχυρές "
"δυνατότητες επεξεργασίας εικόνας."

#. (itstool) path: item/p
#: C/image-viewer.c.page:244 C/image-viewer.cpp.page:232
#: C/image-viewer.js.page:332 C/image-viewer.py.page:246
#: C/image-viewer.vala.page:305
msgid ""
"Allow the user to load images from network shares, scanners, and other more "
"complicated sources."
msgstr ""
"Επιτρέψτε στον χρήστη να φορτώνει εικόνες από μερισμό δικτύου, από σαρωτές "
"και από άλλες περίπλοκες πηγές."

#. (itstool) path: item/p
#: C/image-viewer.c.page:245 C/image-viewer.cpp.page:233
#: C/image-viewer.js.page:333 C/image-viewer.py.page:247
#: C/image-viewer.vala.page:306
msgid ""
"You can use <link href=\"http://library.gnome.org/devel/gio/unstable/\">GIO</"
"link> to handle network file tranfers and the like, and <link href=\"http://"
"library.gnome.org/devel/gnome-scan/unstable/\">GNOME Scan</link> to handle "
"scanning."
msgstr ""
"Μπορείτε να χρησιμοποιήσετε το <link href=\"http://library.gnome.org/devel/"
"gio/unstable/\">GIO</link> για χειρισμό μεταφορών αρχείων δικτύου και τα "
"παρόμοια, και τη <link href=\"http://library.gnome.org/devel/gnome-scan/"
"unstable/\">Σάρωση του GNOME</link> για χειρισμό σάρωσης."

#. (itstool) path: info/desc
#: C/image-viewer.cpp.page:9
msgid "A little bit more than a simple \"Hello world\" GTKmm application."
msgstr "Μια λίγο περισσότερο από απλή εφαρμογή GTKmm σαν το \"Hello, world!\"."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:32
msgid "Some basic concepts of C++/GObject programming"
msgstr "Μερικές βασικές έννοιες του προγραμματισμού C++/GObject"

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:33
msgid "How to write a Gtk application in C++"
msgstr "Πώς να γράψετε μια εφαρμογή Gtk σε C++"

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:47
msgid ""
"Choose <gui>GTKmm (Simple)</gui> from the <gui>C++</gui> tab, click "
"<gui>Forward</gui>, and fill out your details on the next few pages. Use "
"<file>image-viewer</file> as project name and directory."
msgstr ""
"Επιλέξτε <gui>GTKmm (απλό)</gui> από την καρτέλα <gui>C++</gui>, πατήστε "
"<gui>μπροστά</gui> και συμπληρώστε τις λεπτομέρειές σας στις επόμενες λίγες "
"σελίδες. Χρησιμοποιήστε το <file>image-viewer</file> ως όνομα του έργου και "
"του καταλόγου."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:50
msgid ""
"Make sure that <gui>Use GtkBuilder for user interface</gui> is disabled as "
"we will create the UI manually in this tutorial. Check the <link xref="
"\"guitar-tuner.cpp\">Guitar-Tuner</link> tutorial if you want to learn how "
"to use the interface builder."
msgstr ""
"Σιγουρευτείτε ότι απενεργοποιήσατε το <gui>Χρήση του GtkBuilder για διεπαφή "
"χρήση</gui> επειδή θα φτιάξουμε τη διεπαφή χρήστη χειροκίνητα σε αυτό το "
"μάθημα. Σημειώστε το μάθημα <link xref=\"guitar-tuner.cpp\">ρυθμιστής "
"κιθάρας</link> εάν θέλετε να μάθετε τη χρήση του κατασκευαστή διεπαφής."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:55
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. Open "
"<file>src/main.cc</file> from the <gui>Project</gui> or <gui>File</gui> "
"tabs. You should see some code which starts with the lines:"
msgstr ""
"Πατήστε <gui>εφαρμογή</gui> και το έργο θα δημιουργηθεί για σας. Ανοίξτε "
"<file>src/main.cc</file> από τις καρτέλες <gui>έργο</gui> ή <gui>αρχείο</"
"gui>. Θα πρέπει να δείτε κάποιο κώδικα που ξεκινά με τις γραμμές:"

#. (itstool) path: item/code
#: C/image-viewer.cpp.page:56
#, no-wrap
msgid ""
"\n"
"#include &lt;gtkmm.h&gt;\n"
"#include &lt;iostream&gt;\n"
"\n"
"#include \"config.h\"&gt;"
msgstr ""
"\n"
"#περιλαμβάνει &lt;gtkmm.h&gt;\n"
"#περιλαμβάνει &lt;iostream&gt;\n"
"\n"
"#περιλαμβάνει \"config.h\"&gt;"

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:70
msgid ""
"The three <code>#include</code> lines at the top include the <code>config</"
"code> (useful autoconf build defines), <code>gtkmm</code> (user interface) "
"and <code>iostream</code> (C++-STL) libraries. Functions from these "
"libraries are used in the rest of the code."
msgstr ""
"Οι τρεις γραμμές <code>#include</code> στην κορυφή περιλαμβάνουν τον "
"<code>config</code> (ορίζει χρήσιμη κατασκευή του autoconf), <code>gtkmm</"
"code> (διεπαφή χρήστη) και βιβλιοθήκες <code>iostream</code> (C++-STL). "
"Συναρτήσεις από αυτές τις βιβλιοθήκες χρησιμοποιούνται στον υπόλοιπο κώδικα."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:73
msgid ""
"The <code>main</code> function creates a new (empty) window and sets the "
"window title."
msgstr ""
"Η συνάρτηση <code>main</code> δημιουργεί ένα νέο (άδειο) παράθυρο και ορίζει "
"τον τίτλο του παραθύρου."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:76
msgid ""
"The <code>kit::run()</code> call starts the GTKmm main loop, which runs the "
"user interface and starts listening for events (like clicks and key "
"presses). As we give the window as an argument to that function, the "
"application will automatically exit when that window is closed."
msgstr ""
"Η κλήση <code>kit::run()</code> αρχίζει τον κύριο βρόχο GTKmm, που εκτελεί "
"τη διεπαφή χρήστη και αρχίζει την απάντηση για συμβάντα (όπως κλικ και "
"πατήματα πλήκτρου). Καθώς δίνουμε το παράθυρο ως όρισμα σε αυτήν τη "
"συνάρτηση, η εφαρμογή θα εγκαταλείψει αυτόματα όταν το παράθυρο κλείσει."

#. (itstool) path: section/p
#: C/image-viewer.cpp.page:88
msgid ""
"Now we will bring life into the empty window. GTKmm organizes the user "
"interface with <code>Gtk::Container</code>s that can contain other widgets "
"and even other containers. Here we will use the simplest available "
"container, a <code>Gtk::Box</code>:"
msgstr ""
"Τώρα δίνουμε ζωή στο άδειο παράθυρο. Το GTKmm οργανώνει τη διεπαφή χρήστη με "
"το <code>Gtk::Container</code> που μπορεί να περιέχει άλλα γραφικά στοιχεία "
"και ακόμα άλλους περιέκτες. Εδώ θα χρησιμοποιήσουμε τον απλούστερο διαθέσιμο "
"περιέκτη, έναν <code>Gtk::Box</code>:"

#. (itstool) path: section/code
#: C/image-viewer.cpp.page:91
#, no-wrap
msgid ""
"\n"
"int\n"
"main (int argc, char *argv[])\n"
"{\n"
"\tGtk::Main kit(argc, argv);\n"
"\n"
"\tGtk::Window main_win;\n"
"\tmain_win.set_title (\"image-viewer-cpp\");\n"
"\n"
"\tGtk::Box* box = Gtk::manage(new Gtk::Box());\n"
"\tbox-&gt;set_orientation (Gtk::ORIENTATION_VERTICAL);\n"
"\tbox-&gt;set_spacing(6);\n"
"\tmain_win.add(*box);\n"
"\n"
"\timage = Gtk::manage(new Gtk::Image());\n"
"\tbox-&gt;pack_start (*image, true, true);\n"
"\n"
"\tGtk::Button* button = Gtk::manage(new Gtk::Button(\"Open Image…\"));\n"
"\tbutton-&gt;signal_clicked().connect (\n"
"\t\tsigc::ptr_fun(&amp;on_open_image));\n"
"\tbox-&gt;pack_start (*button, false, false);\n"
"\n"
"\tmain_win.show_all_children();\n"
"\tkit.run(main_win);\n"
"\n"
"\treturn 0;\n"
"}\n"
msgstr ""
"\n"
"int\n"
"main (int argc, char *argv[])\n"
"{\n"
"\tGtk::Main kit(argc, argv);\n"
"\n"
"\tGtk::Window main_win;\n"
"\tmain_win.set_title (\"image-viewer-cpp\");\n"
"\n"
"\tGtk::Box* box = Gtk::manage(new Gtk::Box());\n"
"\tbox-&gt;set_orientation (Gtk::ORIENTATION_VERTICAL);\n"
"\tbox-&gt;set_spacing(6);\n"
"\tmain_win.add(*box);\n"
"\n"
"\timage = Gtk::manage(new Gtk::Image());\n"
"\tbox-&gt;pack_start (*image, true, true);\n"
"\n"
"\tGtk::Button* button = Gtk::manage(new Gtk::Button(\"Open Image…\"));\n"
"\tbutton-&gt;signal_clicked().connect (\n"
"\t\tsigc::ptr_fun(&amp;on_open_image));\n"
"\tbox-&gt;pack_start (*button, false, false);\n"
"\n"
"\tmain_win.show_all_children();\n"
"\tkit.run(main_win);\n"
"\n"
"\treturn 0;\n"
"}\n"

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:121
msgid ""
"The first lines create the widgets we want to use: a button for opening up "
"an image, the image view widget itself and the box we will use as a "
"container."
msgstr ""
"Οι πρώτες γραμμές δημιουργούν τα επιθυμητά γραφικά στοιχεία για χρήση. ένα "
"κουμπί για άνοιγμα μιας εικόνας, το ίδιο το γραφικό στοιχείο προβολής της "
"εικόνας και το πλαίσιο που θα χρησιμοποιήσουμε ως περιέκτη."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:124
msgid ""
"The calls to <code>pack_start</code> add the two widgets to the box and "
"define their behaviour. The image will expand into any available space while "
"the button will just be as big as needed. You will notice that we don't set "
"explicit sizes on the widgets. In GTKmm this is usually not needed as it "
"makes it much easier to have a layout that looks good in different window "
"sizes. Next, the box is added to the window."
msgstr ""
"Οι κλήσεις στο <code>pack_start</code> προσθέτουν τα δύο γραφικά στοιχεία "
"στο πλαίσιο και ορίζουν τη συμπεριφορά τους. Η εικόνα θα επεκταθεί σε κάθε "
"διαθέσιμο χώρο, ενώ το κουμπί θα είναι απλά τόσο μεγάλο όσο χρειάζεται. Θα "
"παρατηρήσετε ότι δεν ορίζουμε ρητά μεγέθη στα γραφικά στοιχεία. Στο GTKmm "
"αυτό συνήθως δεν χρειάζεται επειδή είναι πιο απλό να έχετε μια διάταξη που "
"φαίνεται καλή με διαφορετικά μεγέθη παραθύρων. Στη συνέχεια, το πλαίσιο "
"προστίθεται στο παράθυρο."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:130
msgid ""
"We need to define what happens when the user clicks on the button. GTKmm "
"uses the concept of <em>signals</em>. When the button is clicked, it fires "
"the <em>clicked</em> signal, which we can connect to some action. This is "
"done using the <code>signal_clicked().connect</code> method which tells "
"GTKmm to call the <code>on_open_image</code> function when the button is "
"clicked. We will define the <em>callback</em> in the next section."
msgstr ""
"Χρειαζόμαστε να ορίσουμε τι συμβαίνει όταν ο χρήστης πατά σε ένα πλήκτρο. Το "
"GTKmm χρησιμοποιεί την έννοια των <em>σημάτων</em>. Όταν το κουμπί πατιέται, "
"ξεκινά το σήμα <em>πατημένο</em>, που μπορούμε να συνδέσουμε με κάποια "
"ενέργεια. Αυτό γίνεται χρησιμοποιώντας τη μέθοδο <code>signal_clicked()."
"connect</code> που λέει στο GTKmm να καλέσει τη συνάρτηση "
"<code>on_open_image</code> όταν το κουμπί πατιέται. Θα ορίσουμε την "
"<em>επανάκληση</em> στην επόμενη ενότητα."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:134
msgid ""
"The last step is to show all widgets in the window using "
"<code>show_all_children()</code>. This is equivalent to using the "
"<code>show()</code> method on all our child widgets."
msgstr ""
"Το τελευταίο βήμα είναι η εμφάνιση όλων των γραφικών στοιχείων στο παράθυρο "
"χρησιμοποιώντας <code>show_all_children()</code>. Αυτό είναι ισοδύναμο μς τη "
"χρήση της μεθόδου <code>show()</code> σε όλα τα θυγατρικά γραφικά στοιχεία."

#. (itstool) path: section/p
#: C/image-viewer.cpp.page:143
msgid ""
"We will now define the signal handler for the <em>clicked</em> signal or the "
"button we mentioned before. Add this code before the <code>main</code> "
"method."
msgstr ""
"Θα ορίσουμε τώρα τον χειριστή σήματος για το σήμα <em>πατημένο</em> ή για το "
"κουμπί που αναφέραμε πριν. Προσθέστε αυτόν τον κώδικα πριν τη μέθοδο "
"<code>main</code>."

#. (itstool) path: section/code
#: C/image-viewer.cpp.page:146
#, no-wrap
msgid ""
"\n"
"Gtk::Image* image = 0;\n"
"\n"
"static void\n"
"on_open_image ()\n"
"{\n"
"\tGtk::FileChooserDialog dialog(\"Open image\",\n"
"\t                              Gtk::FILE_CHOOSER_ACTION_OPEN);\n"
"\tdialog.add_button (Gtk::Stock::OPEN,\n"
"\t                   Gtk::RESPONSE_ACCEPT);\n"
"\tdialog.add_button (Gtk::Stock::CANCEL,\n"
"\t                   Gtk::RESPONSE_CANCEL);\n"
"\n"
"\tGlib::RefPtr&lt;Gtk::FileFilter&gt; filter =\n"
"\t\tGtk::FileFilter::create();\n"
"\tfilter-&gt;add_pixbuf_formats();\n"
"\tfilter-&gt;set_name(\"Images\");\n"
"\tdialog.add_filter (filter);\n"
"\n"
"\tconst int response = dialog.run();\n"
"\tdialog.hide();\n"
"\n"
"\tswitch (response)\n"
"\t{\n"
"\t\tcase Gtk::RESPONSE_ACCEPT:\n"
"\t\t\timage-&gt;set(dialog.get_filename());\n"
"\t\t\tbreak;\n"
"\t\tdefault:\n"
"\t\t\tbreak;\n"
"\t}\n"
"}\n"
msgstr ""
"\n"
"Gtk::Image* image = 0;\n"
"\n"
"static void\n"
"on_open_image ()\n"
"{\n"
"\tGtk::FileChooserDialog dialog(\"Open image\",\n"
"\t                              Gtk::FILE_CHOOSER_ACTION_OPEN);\n"
"\tdialog.add_button (Gtk::Stock::OPEN,\n"
"\t                   Gtk::RESPONSE_ACCEPT);\n"
"\tdialog.add_button (Gtk::Stock::CANCEL,\n"
"\t                   Gtk::RESPONSE_CANCEL);\n"
"\n"
"\tGlib::RefPtr&lt;Gtk::FileFilter&gt; filter =\n"
"\t\tGtk::FileFilter::create();\n"
"\tfilter-&gt;add_pixbuf_formats();\n"
"\tfilter-&gt;set_name(\"Images\");\n"
"\tdialog.add_filter (filter);\n"
"\n"
"\tconst int response = dialog.run();\n"
"\tdialog.hide();\n"
"\n"
"\tswitch (response)\n"
"\t{\n"
"\t\tcase Gtk::RESPONSE_ACCEPT:\n"
"\t\t\timage-&gt;set(dialog.get_filename());\n"
"\t\t\tbreak;\n"
"\t\tdefault:\n"
"\t\t\tbreak;\n"
"\t}\n"
"}\n"

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:181
msgid ""
"The dialog for choosing the file is created using the <code>Gtk::"
"FileChooserDialog</code> constructor. This takes the title and type of the "
"dialog. In our case, it is an <em>Open</em> dialog."
msgstr ""
"Ο διάλογος επιλογής του αρχείου δημιουργήθηκε χρησιμοποιώντας τον "
"κατασκευαστή <code>Gtk::FileChooserDialog</code>. Αυτό παίρνει τον τίτλο και "
"τύπο του διαλόγου. Στην περίπτωσή μας, είναι ένας διάλογος <em>ανοίγματος</"
"em>."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:185
msgid ""
"The next two lines add an <em>Open</em> and a <em>Close</em> button to the "
"dialog."
msgstr ""
"Οι επόμενες δυο γραμμές προσθέτουν ένα κουμπί <em>ανοίγματος</em> και ένα "
"<em>κλεισίματος</em> στο διάλογο."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:187
msgid ""
"The second argument to the <code>add_button()</code> method is a value to "
"identify the clicked button. We use predefined values provided by GTKmm "
"here, too."
msgstr ""
"Το δεύτερο όρισμα στη μέθοδο <code>add_button()</code> είναι μια τιμή "
"καθορισμού του πατημένου κουμπιού. Χρησιμοποιούμε προκαθορισμένες τιμές που "
"παρέχονται από το GTKmm εδώ, επίσης."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:192
msgid ""
"The next two lines restrict the <gui>Open</gui> dialog to only display files "
"which can be opened by <code>Gtk::Image</code>. A filter object is created "
"first; we then add all kinds of files supported by <code>Gdk::Pixbuf</code> "
"(which includes most image formats like PNG and JPEG) to the filter. "
"Finally, we set this filter to be the <gui>Open</gui> dialog's filter."
msgstr ""
"Οι επόμενες δύο γραμμές περιορίζουν το διάλογο <gui>άνοιγμα</gui> να "
"εμφανίζει μόνο αρχεία που μπορούν να ανοιχθούν από το <code>Gtk::Image</"
"code>. Ένα αντικείμενο φίλτρου δημιουργείται πρώτα· έπειτα προσθέτουμε όλα "
"τα είδη των αρχείων που υποστηρίζονται από στο φίλτρο όλων των ειδών αρχεία "
"που υποστηρίζονται από το <code>Gdk::Pixbuf</code> (που περιλαμβάνει τις "
"περισσότερες μορφές εικόνων όπως PNG και JPEG) στο φίλτρο. Τέλος, ορίζουμε "
"αυτό το φίλτρο να είναι το φίλτρο του διαλόγου <gui>άνοιγμα</gui>."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:193
msgid ""
"<code>Glib::RefPtr</code> is a smart pointer used here, that makes sure that "
"the filter is destroyed when there is no reference to it anymore."
msgstr ""
"Ο <code>Glib::RefPtr</code> είναι ένας έξυπνος δείκτης που χρησιμοποιείται "
"εδώ, αυτό επιβεβαιώνει ότι το φίλτρο καταστρέφεται όταν δεν υπάρχει αναφορά "
"για αυτό πια."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:197
msgid ""
"<code>dialog.run</code> displays the <gui>Open</gui> dialog. The dialog will "
"wait for the user to choose an image; when they do, <code>dialog.run</code> "
"will return the value <code>Gtk::RESPONSE_ACCEPT</code> (it would return "
"<code>Gtk::RESPONSE_CANCEL</code> if the user clicked <gui>Cancel</gui>). "
"The <code>switch</code> statement tests for this."
msgstr ""
"Ο <code>dialog.run</code> εμφανίζει το διάλογο <gui>άνοιγμα</gui>. Ο "
"διάλογος θα περιμένει τον χρήστη να διαλέξει μια εικόνα· όταν διαλέξει, ο "
"<code>dialog.run</code> θα επιστρέψει την τιμή <code>Gtk::RESPONSE_ACCEPT</"
"code> (θα επιστρέψει <code>Gtk::RESPONSE_CANCEL</code> αν ο χρήστης πατήσει "
"<gui>ακύρωση</gui>). Η πρόταση <code>switch</code> ελέγχει για αυτό."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:200
msgid ""
"We hide the <gui>Open</gui> dialog because we don't need it any more. The "
"dialog would be hidden later anyway, as it is only a local variable and is "
"destroyed (and therefore hidden) when the scope ends."
msgstr ""
"Κρύβουμε το διάλογο <gui>άνοιγμα</gui> επειδή δεν τον χρειαζόμαστε πια. Ο "
"διάλογος θα κρυφτεί αργότερα σε κάθε περίπτωση, καθώς είναι μια τοπική "
"μεταβλητή μόνο και καταστρέφεται (και συνεπώς κρύβεται) όταν η εμβέλεια "
"τελειώνει."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:203
msgid ""
"Assuming that the user did click <gui>Open</gui>, the next line loads the "
"file into the <code>Gtk::Image</code> so that it is displayed."
msgstr ""
"Αν υποθέσουμε ότι ο χρήστης πάτησε το <gui>άνοιγμα</gui>, η επόμενη γραμμή "
"φορτώνει το αρχείο στο <code>Gtk::Image</code>, έτσι ώστε να εμφανίζεται."

#. (itstool) path: section/p
#: C/image-viewer.cpp.page:217
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"image-viewer/image-viewer.cc\">reference code</link>."
msgstr ""
"Αν αντιμετωπίσετε πρόβλημα με το μάθημα, συγκρίνετε τον κώδικά σας με αυτόν "
"τον <link href=\"image-viewer/image-viewer.cc\">κώδικα αναφοράς</link>."

#. (itstool) path: info/title
#: C/image-viewer.js.page:8
msgctxt "text"
msgid "Image viewer (JavaScript)"
msgstr "Προβολέας εικόνων (JavaScript)"

#. (itstool) path: info/desc
#: C/image-viewer.js.page:11
msgid ""
"A little bit more than a simple \"Hello world\" application - write an image "
"viewer in GTK+. Includes an introduction to the JavaScript language."
msgstr ""
"Μια λίγο περισσότερο από απλή εφαρμογή σαν το \"Hello world\"- συγγραφή ενός "
"προβολέα εικόνων σε GTK+. Περιλαμβάνει μια εισαγωγή στη γλώσσα JavaScript."

#. (itstool) path: credit/name
#: C/image-viewer.js.page:15 C/image-viewer.py.page:15
msgid "Jonh Wendell"
msgstr "Jonh Wendell"

#. (itstool) path: synopsis/p
#: C/image-viewer.js.page:32 C/image-viewer.py.page:32
msgid ""
"In this tutorial, we're going to write a very simple GTK application that "
"loads and displays an image file. You will learn how to:"
msgstr ""
"Σε αυτόν το μάθημα θα γράψουμε μια πολύ απλή εφαρμογή σε GTK που φορτώνει "
"και εμφανίζει ένα αρχείο εικόνας. Θα μάθετε πώς να:"

#. (itstool) path: item/p
#: C/image-viewer.js.page:34
msgid "Write a basic GTK user interface in JavaScript"
msgstr "Γράψε μια βασικά διεπαφή χρήστη GTK σε JavaScript"

#. (itstool) path: item/p
#: C/image-viewer.js.page:35 C/image-viewer.py.page:35
msgid "Deal with events by connecting signals to signal handlers"
msgstr "Να αντιμετωπίζετε συμβάντα συνδέοντας σήματα με τους χειριστές σημάτων"

#. (itstool) path: item/p
#: C/image-viewer.js.page:36 C/image-viewer.py.page:36
msgid "Lay out GTK user interfaces using containers"
msgstr "Σχεδιάζετε διεπαφές χρήστη GTK χρησιμοποιώντας περιέκτες"

#. (itstool) path: item/p
#: C/image-viewer.js.page:37 C/image-viewer.py.page:37
msgid "Load and display image files"
msgstr "Φορτώνετε και να εμφανίζετε αρχεία εικόνων"

#. (itstool) path: item/p
#: C/image-viewer.js.page:42
msgid "An installed copy of the <em>gjs</em> interpreter"
msgstr "Ένα εγκατεστημένο αντίγραφο του διερμηνευτή <em>gjs</em>"

#. (itstool) path: item/p
#: C/image-viewer.js.page:43
msgid "Basic knowledge of any object-orientated programming language"
msgstr "Βασική γνώση οποιασδήποτε αντικειμενοστραφούς γλώσσας προγραμματισμού"

#. (itstool) path: item/p
#: C/image-viewer.js.page:57
msgid ""
"Choose <gui>Generic Javascript</gui> from the <gui>JS</gui> tab, click "
"<gui>Forward</gui>, and fill out your details on the next few pages. Use "
"<file>image-viewer</file> as project name and directory."
msgstr ""
"Επιλέξτε <gui>Γενική Javascript</gui> από την καρτέλα <gui>JS</gui>, πατήστε "
"<gui>Μπροστά</gui>, και συμπληρώστε τις λεπτομέρειές σας στις επόμενες λίγες "
"σελίδες. Χρησιμοποιήστε το <file>image-viewer</file> ως όνομα έργου και "
"καταλόγου."

#. (itstool) path: item/p
#: C/image-viewer.js.page:60
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. Open "
"<file>src/main.js</file> from the <gui>Project</gui> or <gui>File</gui> "
"tabs. It contains very basic example code."
msgstr ""
"Πατήστε <gui>Εφαρμογή</gui> και το έργο θα δημιουργηθεί για εσάς. Ανοίξτε το "
"<file>src/main.js</file> από τις καρτέλες <gui>έργο</gui> ή <gui>αρχείο</"
"gui>. Περιλαμβάνει πολύ βασικό παράδειγμα κώδικα."

#. (itstool) path: section/title
#: C/image-viewer.js.page:67
msgid "JavaScript basics: Hello World"
msgstr "Βασικά JavaScript: Hello World"

#. (itstool) path: section/p
#: C/image-viewer.js.page:68
msgid ""
"Before we start writing the image viewer, let's find out more about the way "
"JavaScript is used in GNOME. Of course, your very first contact with any "
"programming language should be the Hello World program which can already be "
"found in <file>main.js</file>:"
msgstr ""
"Πριν να ξεκινήσουμε την σύνταξη του προβολέα εικόνας, ας εξετάσουμε "
"περισσότερα για τον τρόπο χρήσης του JavaScript στο GNOME. Φυσικά, η πρώτη "
"σας με οποιαδήποτε γλώσσα προγραμματισμού πρέπει να είναι το πρόγραμμα Hello "
"World που μπορεί να βρεθεί ήδη στο <file>main.js</file>:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:69
#, no-wrap
msgid "print (\"Hello world!\");"
msgstr "εκτύπωση (\"Hello world!\")·"

#. (itstool) path: section/p
#: C/image-viewer.js.page:70
msgid ""
"This should look quite natural if you're familiar with almost any other "
"programming language. The function <code>print</code> is called with the "
"argument <code>\"Hello world!\"</code>, which will be printed on the screen. "
"Note that each line of code ends with a semicolon."
msgstr ""
"Αυτό θα φαίνεται ολότελα φυσικό, εάν είστε εξοικειωμένος με σχεδόν "
"οποιαδήποτε άλλη γλώσσα προγραμματισμού. Η συνάρτηση <code>print</code> "
"καλείται με το όρισμα <code>\"Hello world!\"</code>, που θα εκτυπωθεί στην "
"οθόνη. Σημειώστε ότι κάθε γραμμή κώδικα τελειώνει με ;."

#. (itstool) path: section/title
#: C/image-viewer.js.page:74
msgid "Classes in JavaScript"
msgstr "Κλάσεις στη JavaScript"

#. (itstool) path: section/p
#: C/image-viewer.js.page:75
msgid "This is the standard way to define a class in JavaScript:"
msgstr "Αυτός είναι ο τυπικός τρόπος ορισμού μιας κλάσης στη JavaScript:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:76
#, no-wrap
msgid ""
"\n"
"function MyClass () {\n"
"  this._init ();\n"
"}\n"
"\n"
"MyClass.prototype = {\n"
"\n"
"  _init: function () {\n"
"    this.propertyA = \"This is an object's field\";\n"
"    this.propertyB = 10;\n"
"  },\n"
"\n"
"  aMethod: function (arg1, arg2) {\n"
"    print (\"inside aMethod: \" + arg1 + \" \" + arg2);\n"
"  },\n"
"\n"
"  dumpProperties: function () {\n"
"    print (this.propertyA);\n"
"    print (this.propertyB);\n"
"  }\n"
"\n"
"}"
msgstr ""
"\n"
"function MyClass () {\n"
"  this._init ();\n"
"}\n"
"\n"
"MyClass.prototype = {\n"
"\n"
"  _init: function () {\n"
"    this.propertyA = \"This is an object's field\";\n"
"    this.propertyB = 10;\n"
"  },\n"
"\n"
"  aMethod: function (arg1, arg2) {\n"
"    print (\"inside aMethod: \" + arg1 + \" \" + arg2);\n"
"  },\n"
"\n"
"  dumpProperties: function () {\n"
"    print (this.propertyA);\n"
"    print (this.propertyB);\n"
"  }\n"
"\n"
"}"

#. (itstool) path: section/p
#: C/image-viewer.js.page:98
msgid ""
"This defines a class called <code>MyClass</code>. Let's go through each part "
"of the class definition:"
msgstr ""
"Αυτό ορίζει μια κλάση που λέγεται <code>MyClass</code>. Ας δούμε κάθε τμήμα "
"του ορισμού της κλάσης:"

#. (itstool) path: item/p
#: C/image-viewer.js.page:101
msgid ""
"<code>function MyClass</code> is the constructor of the class — its name "
"must match the class's name. You can access any member of the class by using "
"the <code>this</code> object; here, the constructor calls the class's "
"<code>_init</code> method."
msgstr ""
"<code>function MyClass</code> είναι ο κατασκευαστής της κλάσης — το όνομά "
"του πρέπει να ταιριάζει με το όνομα της κλάσης. Μπορείτε να προσπελάσετε "
"οποιοδήποτε μέλος της κλάσης χρησιμοποιώντας το αντικείμενο <code>this</"
"code>· εδώ, ο κατασκευαστής καλεί τη μέθοδο της κλάσης <code>_init</code>."

#. (itstool) path: item/p
#: C/image-viewer.js.page:104
msgid ""
"The <code>MyClass.prototype</code> block is where you define the "
"<em>structure</em> of the class. Each class is made up of methods "
"(functions) and fields (variables); there are three methods and two fields "
"in this example."
msgstr ""
"Η ομάδα <code>MyClass.prototype</code> είναι εκεί που ορίζετε τη <em>δομή</"
"em> της κλάσης. Κάθε κλάση αποτελείται από μεθόδους (συναρτήσεις) και πεδία "
"(μεταβλητές)· υπάρχουν τρεις μέθοδοι και δύο πεδία σε αυτό το παράδειγμα."

#. (itstool) path: item/p
#: C/image-viewer.js.page:107
msgid ""
"The first method defined here is called <code>_init</code>, and we specify "
"that it is a function with no arguments:"
msgstr ""
"Η πρώτη μέθοδος που καθορίστηκε εδώ λέγεται <code>_init</code> και "
"καθορίζουμε ότι είναι μια συνάρτηση χωρίς ορίσματα:"

#. (itstool) path: item/code
#: C/image-viewer.js.page:108
#, no-wrap
msgid "_init: function ()"
msgstr "_init: function ()"

#. (itstool) path: item/p
#: C/image-viewer.js.page:109
msgid ""
"We write the function inside some curly braces. Two fields are defined here, "
"<code>propertyA</code> and <code>propertyB</code>. The first is set to a "
"string and the second is set to an integer (10). The function doesn't return "
"any value."
msgstr ""
"Γράφουμε τη συνάρτηση μέσα σε μερικές αγκύλες. Δύο πεδία ορίζονται εδώ, "
"<code>propertyA</code> και <code>propertyB</code>. Το πρώτο ορίζεται σε μια "
"συμβολοσειρά και το δεύτερο ορίζεται σε έναν ακέραιο (10). Η συνάρτηση δεν "
"επιστρέφει καμία τιμή."

#. (itstool) path: item/p
#: C/image-viewer.js.page:112
msgid ""
"The next method is called <code>aMethod</code> and has two arguments, which "
"it prints out when you call it. The final method is <code>dumpProperties</"
"code>, and prints the fields <code>propertyA</code> and <code>propertyB</"
"code>."
msgstr ""
"Η επόμενη μέθοδος λέγεται <code>aMethod</code> και έχει δύο ορίσματα, που "
"εκτυπώνεται όταν την καλείτε. Η τελική μέθοδος είναι <code>dumpProperties</"
"code> και τυπώνει τα πεδία <code>propertyA</code> και <code>propertyB</code>."

#. (itstool) path: item/p
#: C/image-viewer.js.page:115
msgid ""
"Note how the class definition (prototype) is arranged; each function "
"definition is separated by a comma."
msgstr ""
"Σημειώστε πώς τακτοποιείται ο ορισμός κλάσης (πρωτότυπο)· κάθε ορισμός "
"συνάρτησης ξεχωρίζεται με κόμμα."

#. (itstool) path: section/p
#: C/image-viewer.js.page:119
msgid "Now that MyClass has been defined, we can play with it:"
msgstr "Τώρα που η MyClass ορίστηκε, μπορούμε να παίξουμε μαζί της:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:120
#, no-wrap
msgid ""
"\n"
"var o = new MyClass ();\n"
"o.aMethod (\"Hello\", \"world\");\n"
"o.propertyA = \"Just changed its value!\";\n"
"o.dumpProperties ();"
msgstr ""
"\n"
"var o = new MyClass ();\n"
"o.aMethod (\"Hello\", \"world\");\n"
"o.propertyA = \"Just changed its value!\";\n"
"o.dumpProperties ();"

#. (itstool) path: section/p
#: C/image-viewer.js.page:125
msgid ""
"This code creates a new instance of the class called <code>o</code>, runs "
"<code>aMethod</code>, changes <code>propertyA</code> to a different string, "
"and then calls <code>dumpProperties</code> (which outputs the fields)."
msgstr ""
"Αυτός ο κώδικας δημιουργεί ένα νέο στιγμιότυπο της κλάσης που λέγεται "
"<code>o</code>, τρέχει τη <code>aMethod</code>, αλλάζει την <code>propertyA</"
"code> σε διαφορετική συμβολοσειρά και έπειτα καλεί <code>dumpProperties</"
"code> (που εξάγει τα πεδία)."

#. (itstool) path: section/p
#: C/image-viewer.js.page:126
msgid ""
"Save the code in the <file>main.js</file> and then run it by using "
"<guiseq><gui>Run</gui><gui>Execute</gui></guiseq> from the menu or using the "
"toolbar."
msgstr ""
"Αποθηκεύστε τον κώδικα στο <file>main.js</file> και έπειτα τρέξτε τον "
"χρησιμοποιώντας <guiseq><gui>τρέξιμο</gui><gui>εκτέλεση</gui></guiseq> από "
"το μενού ή χρησιμοποιώντας την εργαλειοθήκη."

#. (itstool) path: section/title
#: C/image-viewer.js.page:131 C/image-viewer.py.page:70
msgid "A first Gtk application"
msgstr "Μια πρώτη εφαρμογή σε Gtk"

#. (itstool) path: section/p
#: C/image-viewer.js.page:132
msgid "Let's see what a very basic Gtk application looks like in JavaScript:"
msgstr "Για να δούμε πώς μια πολύ βασική εφαρμογή Gtk φαίνεται σε JavaScript:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:133
#, no-wrap
msgid ""
"\n"
"const Gtk = imports.gi.Gtk;\n"
"\n"
"Gtk.init (null, null);\n"
"\n"
"var w = new Gtk.Window ({title: \"Image Viewer Demo\"});\n"
"w.show ();\n"
"\n"
"Gtk.main ();"
msgstr ""
"\n"
"const Gtk = imports.gi.Gtk;\n"
"\n"
"Gtk.init (null, null);\n"
"\n"
"var w = new Gtk.Window ({title: \"Image Viewer Demo\"});\n"
"w.show ();\n"
"\n"
"Gtk.main ();"

#. (itstool) path: section/p
#: C/image-viewer.js.page:142 C/image-viewer.py.page:95
msgid "Let's take a look at what's happening:"
msgstr "Ας ρίξουμε μια ματιά στο τι γίνεται:"

#. (itstool) path: item/p
#: C/image-viewer.js.page:145 C/image-viewer.py.page:98
msgid ""
"The first line imports the Gtk namespace (that is, it includes the Gtk "
"library). The libraries are provided by GObject Introspection (gi), which "
"provides language bindings for many GNOME libraries."
msgstr ""
"Η πρώτη γραμμή εισάγει το όνομα χώρου Gtk (αυτό είναι που περιέχει την "
"βιβλιοθήκη του Gtk). Οι βιβλιοθήκες παρέχονται από το GObject Introspection "
"(gi), που παρέχει γλωσσικές συσχετίσεις για πολλές βιβλιοθήκες του GNOME."

#. (itstool) path: item/p
#: C/image-viewer.js.page:148
msgid ""
"<code>Gtk.init</code> initializes the Gtk library; this statement is "
"mandatory for all Gtk programs."
msgstr ""
"Το <code>Gtk.init</code> αρχικοποιεί τη βιβλιοθήκη Gtk· αυτή η πρόταση είναι "
"υποχρεωτική για όλα τα προγράμματα Gtk."

#. (itstool) path: item/p
#: C/image-viewer.js.page:151
msgid ""
"The next line creates the main window by creating a new <code>Gtk.Window</"
"code> object. You can pass several properties to the window's constructor by "
"using the syntax <code>{property: value, property: value, ...}</code>. In "
"this case we are setting the title of the window."
msgstr ""
"Η επόμενη γραμμή δημιουργεί το κύριο παράθυρο δημιουργώντας ένα νέο "
"αντικείμενο <code>Gtk.Window</code>. Μπορείτε να περάσετε αρκετές ιδιότητες "
"στον κατασκευαστή παραθύρου χρησιμοποιώντας τη σύνταξη <code>{property: "
"value, property: value, ...}</code>. Σε αυτήν την περίπτωση ορίζουμε τον "
"τίτλο του παραθύρου."

#. (itstool) path: item/p
#: C/image-viewer.js.page:152
msgid ""
"The next line explicitly shows the window. In Gtk, every widget is hidden by "
"default."
msgstr ""
"Η επόμενη γραμμή ρητά εμφανίζει το παράθυρο. Στο Gtk, κάθε γραφικό στοιχείο "
"κρύβεται από προεπιλογή."

#. (itstool) path: item/p
#: C/image-viewer.js.page:153
msgid ""
"Finally, <code>Gtk.main</code> runs the main loop — in other words, it "
"executes the program. The main loop listens for events (signals) from the "
"user interface and then calls a signal handler which will do something "
"useful. We'll learn more about signals shortly."
msgstr ""
"Τελικά, το <code>Gtk.main</code> τρέχει τον κύριο βρόχο — με άλλα λόγια, "
"εκτελεί το πρόγραμμα. Ο κύριος βρόχος απαντά σε συμβάντα (σήματα) από τη "
"διεπαφή χρήστη και έπειτα καλεί έναν χειριστή σήματος που θα κάνει κάτι "
"χρήσιμο. Θα μάθουμε περισσότερα για τα σήματα σύντομα."

#. (itstool) path: section/p
#: C/image-viewer.js.page:156
msgid ""
"Save the code in <file>main.js</file> and run it. You will notice that the "
"application does not quit when you close the window. This is because we "
"haven't set up a signal handler to deal with the window's <code>destroy</"
"code> (close) signal yet. We'll do this shortly, but for now you can just "
"hit <keyseq><key>Ctrl</key><key>C</key></keyseq> in the terminal window to "
"quit the program."
msgstr ""
"Αποθήκευση του κώδικα στο <file>main.js</file> και εκτέλεσή του. Θα "
"σημειώσετε ότι η εφαρμογή δεν εγκαταλείπει όταν κλείνετε το παράθυρο. Αυτό "
"συμβαίνει επειδή δεν εγκαταστήσαμε έναν χειριστή σήματος για ασχοληθεί με το "
"σήμα του παραθύρου <code>destroy</code> (κλείσιμο) ακόμα. Θα το κάνουμε "
"σύντομα, αλλά για τώρα μπορείτε απλά να πατήσετε <keyseq><key>Ctrl</"
"key><key>C</key></keyseq> στο παράθυρο τερματικού για να αφήσετε το "
"πρόγραμμα."

#. (itstool) path: section/title
#: C/image-viewer.js.page:161
msgid "Adding classes"
msgstr "Προσθήκη κλάσεων"

#. (itstool) path: section/p
#: C/image-viewer.js.page:162
msgid ""
"The proper way of doing Gtk programming is by using classes. Let's rewrite "
"the simple code you just wrote using classes:"
msgstr ""
"Ο κατάλληλος τρόπος για να γίνει προγραμματισμός Gtk είναι χρησιμοποιώντας "
"κλάσεις. Ας ξαναγράψουμε τον απλό κώδικα που μόλις γράψατε χρησιμοποιώντας "
"κλάσεις:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:163
#, no-wrap
msgid ""
"\n"
"const Gtk = imports.gi.Gtk;\n"
"\n"
"function ImageViewer () {\n"
"  this._init ();\n"
"}\n"
"\n"
"ImageViewer.prototype = {\n"
"  _init: function () {\n"
"    this.window = new Gtk.Window ({title: \"Image Viewer Demo\"});\n"
"    this.window.show ();\n"
"  }\n"
"}\n"
"\n"
"Gtk.init (null, null);\n"
"var iv = new ImageViewer ();\n"
"Gtk.main ();"
msgstr ""
"\n"
"const Gtk = imports.gi.Gtk;\n"
"\n"
"function ImageViewer () {\n"
"  this._init ();\n"
"}\n"
"\n"
"ImageViewer.prototype = {\n"
"  _init: function () {\n"
"    this.window = new Gtk.Window ({title: \"Image Viewer Demo\"});\n"
"    this.window.show ();\n"
"  }\n"
"}\n"
"\n"
"Gtk.init (null, null);\n"
"var iv = new ImageViewer ();\n"
"Gtk.main ();"

#. (itstool) path: section/p
#: C/image-viewer.js.page:181
msgid ""
"Notice that the program is the same; we just moved the window creation code "
"to our own <code>ImageViewer</code> class. The class's constructor calls the "
"<code>_init</code> method, which creates and shows the window. We then "
"create an instance of the class before running the main loop (<code>Gtk."
"main</code>)."
msgstr ""
"σημειώστε ότι το πρόγραμμα είναι το ίδιο· μόλις μετακινήσαμε τον κώδικα "
"δημιουργίας παραθύρου στη δική μας κλάση <code>ImageViewer</code>. Ο "
"κατασκευαστής κλάσης καλεί τη μέθοδο <code>_init</code>, που δημιουργεί και "
"εμφανίζει το παράθυρο. Έπειτα δημιουργούμε ένα στιγμιότυπο της κλάσης πριν "
"το τρέξιμο του κύριου βρόχου (<code>Gtk.main</code>)."

#. (itstool) path: section/p
#: C/image-viewer.js.page:182
msgid ""
"This code is modular and can be split into multiple files easily. This makes "
"it cleaner and easier to read."
msgstr ""
"Αυτός ο κώδικας είναι αρθρωτός και μπορεί να σπάσει σε πολλαπλά αρχεία "
"εύκολα. Αυτό τον κάνει καθαρότερο και πιο εύκολα αναγνώσιμο."

#. (itstool) path: section/title
#: C/image-viewer.js.page:186 C/image-viewer.py.page:119
msgid "Signals"
msgstr "Σήματα"

#. (itstool) path: section/p
#: C/image-viewer.js.page:187 C/image-viewer.py.page:120
msgid ""
"Signals are one of the key concepts in Gtk programming. Whenever something "
"happens to an object, it emits a signal; for example, when a button is "
"clicked it gives off the <code>clicked</code> signal. If you want your "
"program to do something when that event occurs, you must connect a function "
"(a \"signal handler\") to that signal. Here's an example:"
msgstr ""
"Τα σήματα είναι μια από τις έννοιες κλειδιά για τον προγραμματισμό Gtk. "
"Όποτε κάτι συμβαίνει σε ένα αντικείμενο, εκπέμπει ένα σήμα· για παράδειγμα, "
"όταν πατιέται ένα κουμπί εκπέμπει το σήμα <code>clicked</code>. Άμα θέλετε "
"το πρόγραμμά σας να κάνει κάτι όταν αυτό συμβαίνει, πρέπει να συνδέσετε μια "
"συνάρτηση (έναν \"χειριστή σημάτων\") σε αυτό το σήμα. Ορίστε ένα παράδειγμα:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:188
#, no-wrap
msgid ""
"\n"
"function button_clicked () {\n"
"  print (\"you clicked me!\");\n"
"}\n"
"var b = new Gtk.Button ({label:\"Click me\"});\n"
"b.connect (\"clicked\", button_clicked);"
msgstr ""
"\n"
"function button_clicked () {\n"
"  print (\"you clicked me!\");\n"
"}\n"
"var b = new Gtk.Button ({label:\"Click me\"});\n"
"b.connect (\"clicked\", button_clicked);"

#. (itstool) path: section/p
#: C/image-viewer.js.page:194 C/image-viewer.py.page:127
msgid ""
"The last two lines create a <code>Gtk.Button</code> called <code>b</code> "
"and connect its <code>clicked</code> signal to the <code>button_clicked</"
"code> function, which is defined above. Every time the button is clicked, "
"the code in the <code>button_clicked</code> function will be executed. It "
"just prints a message here."
msgstr ""
"Οι τελευταίες δύο γραμμές δημιουργούν ένα <code>Gtk.Button</code> που "
"ονομάζεται <code>b</code> και συνδέει το σήμα το <code>clicked</code> στην "
"συνάρτηση <code>button_clicked</code>, η οποία ορίζεται πιο πάνω. Κάθε φορά "
"που πατιέται ένα κουμπί, ο κώδικας στη συνάρτηση <code>button_clicked</code> "
"θα εκτελείται. Εδώ απλά τυπώνει ένα μήνυμα."

#. (itstool) path: section/p
#: C/image-viewer.js.page:195
msgid "The syntax for connecting any signal to a function is:"
msgstr "Η σύνταξη για σύνδεση οποιουδήποτε σήματος σε μια συνάρτηση είναι:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:196
#, no-wrap
msgid ""
"\n"
"object.connect (&lt;signal_name&gt;, &lt;function_to_be_called&gt;);"
msgstr ""
"\n"
"object.connect (&lt;signal_name&gt;, &lt;function_to_be_called&gt;);"

#. (itstool) path: section/p
#: C/image-viewer.js.page:198
msgid ""
"You can find signal definitions for any object in the <link href=\"https://"
"developer.gnome.org/gtk3/stable/gtkobjects.html\">GTK class reference</link>."
msgstr ""
"Μπορείτε να βρείτε ορισμούς σήματος για κάθε αντικείμενο στο <link href="
"\"https://developer.gnome.org/gtk3/stable/gtkobjects.html\">αναφορά κλάσης "
"GTK</link>."

#. (itstool) path: note/p
#: C/image-viewer.js.page:201
msgid ""
"You can simplify the code by making use of an inline function definition:"
msgstr ""
"Μπορείτε να απλοποιήσετε τον κώδικα χρησιμοποιώντας έναν ενσωματωμένο ορισμό "
"συνάρτησης:"

#. (itstool) path: note/code
#: C/image-viewer.js.page:202
#, no-wrap
msgid ""
"\n"
"b.connect (\"clicked\", function () { print (\"you clicked me!\"); });"
msgstr ""
"\n"
"b.connect (\"clicked\", function () { print (\"you clicked me!\"); });"

#. (itstool) path: section/title
#: C/image-viewer.js.page:209
msgid "Closing the window"
msgstr "Κλείσιμο του παραθύρου"

#. (itstool) path: section/p
#: C/image-viewer.js.page:210
msgid ""
"When you close a Gtk window it's not really closed, it's hidden. This allows "
"you to keep the window around (which is useful if you want to ask the user "
"if they really want to close the window, for example)."
msgstr ""
"Όταν κλείνεται ένα παράθυρο Gtk δεν κλείνει πραγματικά, κρύβεται. Αυτό "
"επιτρέπει τη διατήρηση του παραθύρου τριγύρω (που είναι χρήσιμο εάν θέλετε "
"να ζητήσετε από τον χρήστη εάν θέλει πραγματικά να κλείσει το παράθυρο, για "
"παράδειγμα)."

#. (itstool) path: section/p
#: C/image-viewer.js.page:211
msgid ""
"In our case, we really do just want to close the window. The simplest way of "
"doing this is by connecting the <code>hide</code> signal of the GtkWindow "
"object to a function that closes the application. Go back to the <file>image-"
"viewer.js</file> file and add the following code to the <code>_init</code> "
"method, on the line above <code>this.window.show</code>:"
msgstr ""
"Στην περίπτωσή μας, θέλουμε πραγματικά να κλείσουμε το παράθυρο. Ο "
"απλούστερος τρόπος είναι συνδέοντας το σήμα <code>hide</code> του "
"αντικειμένου GtkWindow με μια συνάρτηση που κλείνει την εφαρμογή. Επιστρέψτε "
"στο αρχείο <file>image-viewer.js</file> και προσθέστε τον παρακάτω κώδικα "
"στη μέθοδο <code>_init</code>, στην παραπάνω γραμμή <code>this.window.show</"
"code>:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:212
#, no-wrap
msgid "this.window.connect (\"hide\", Gtk.main_quit);"
msgstr "this.window.connect (\"hide\", Gtk.main_quit)·"

#. (itstool) path: section/p
#: C/image-viewer.js.page:213
msgid ""
"This connects the <code>hide</code> signal of the window to Gtk's "
"<code>main_quit</code> function, which ends the execution of the Gtk main "
"loop. Once the main loop finishes, the function <code>Gtk.main</code> "
"returns. Our program would continue to run any code written after the "
"<code>Gtk.main ();</code> line, but since we don't have any code after that "
"point, the program just ends."
msgstr ""
"Αυτό συνδέει το σήμα <code>hide</code> του παραθύρου στη συνάρτηση του Gtk "
"<code>main_quit</code>, που τελειώνει την εκτέλεση του κύριου βρόχου Gtk. "
"Μόλις ο κύριος βρόχος τελειώσει, η συνάρτηση <code>Gtk.main</code> "
"επιστρέφει. Το πρόγραμμά μας συνεχίζει να τρέχει οποιοδήποτε κώδικα γραμμένο "
"μετά τη γραμμή <code>Gtk.main ();</code>, αλλά αφού δεν έχουμε οποιοδήποτε "
"κώδικα μετά από αυτό το σημείο, το πρόγραμμα απλά τελειώνει."

#. (itstool) path: section/title
#: C/image-viewer.js.page:217 C/image-viewer.py.page:131
msgid "Containers: Laying-out the user interface"
msgstr "Περιέκτες: Σχεδίαση διεπαφής χρήστη"

#. (itstool) path: section/p
#: C/image-viewer.js.page:218 C/image-viewer.py.page:132
msgid ""
"Widgets (controls, such as buttons and labels) can be arranged in the window "
"by making use of <em>containers</em>. You can organize the layout by mixing "
"different types of containers, like boxes and grids."
msgstr ""
"Γραφικά στοιχεία (έλεγχοι, όπως τα κουμπιά και οι ετικέτες) μπορούν να "
"τοποθετηθούν στο παράθυρο κάνοντας χρήση των <em>περιεκτών</em>. Μπορείτε να "
"οργανώσετε την διάταξη συνδυάζοντας διαφορετικών ειδών περιέκτες, όπως "
"πλαίσια και πλέγματα."

#. (itstool) path: section/p
#: C/image-viewer.js.page:219 C/image-viewer.py.page:133
msgid ""
"A <code>Gtk.Window</code> is itself a type of container, but you can only "
"put one widget directly into it. We would like to have two widgets, an image "
"and a button, so we must put a \"higher-capacity\" container inside the "
"window to hold the other widgets. A number of <link href=\"http://library."
"gnome.org/devel/gtk/stable/GtkContainer.html\">container types</link> are "
"available, but we will use a <code>Gtk.Box</code> here. A <code>Gtk.Box</"
"code> can hold several widgets, organized horizontally or vertically. You "
"can do more complicated layouts by putting several boxes inside another box "
"and so on."
msgstr ""
"Ένα <code>Gtk.Window</code> είναι από μόνο του ένα είδος περιέκτη, αλλά "
"μπορείτε να τοποθετήσετε μόνο ένα γραφικό στοιχείο άμεσα πάνω του. Θα "
"θέλαμε να είχαμε δύο γραφικά στοιχεία, μια εικόνα και ένα κουμπί, άρα θα "
"πρέπει να τοποθετήσουμε έναν υποδοχέα \"υψηλότερης χωρητικότητας\" μέσα στο "
"παράθυρο για να κρατάει τα άλλα γραφικά στοιχεία. Ένας αριθμός από <link "
"href=\"http://library.gnome.org/devel/gtk/stable/GtkContainer.html\">τύπους "
"περιεκτών</link> είναι διαθέσιμοι, αλλά θα χρησιμοποιήσουμε εδώ ένα "
"<code>Gtk.Box</code>. Ένα <code>Gtk.Box</code> μπορεί να κρατήσει πολλά "
"γραφικά στοιχεία, οργανωμένα οριζόντια ή κάθετα. Μπορείτε να κάνετε και πιο "
"περίπλοκες διατάξεις βάζοντας πολλά πλαίσια το ένα μέσα στο άλλο κ.ο.κ."

#. (itstool) path: note/p
#: C/image-viewer.js.page:221 C/image-viewer.py.page:135
msgid ""
"There is a graphical user interface designer called <app>Glade</app> "
"integrated in <app>Anjuta</app> which makes UI design really easy. For this "
"simple example, however, we will code everything manually."
msgstr ""
"Υπάρχει ένας γραφικός σχεδιαστής διεπαφής χρήστη με όνομα <app>Glade</app> "
"ενσωματωμένος στο <app>Anjuta</app> που κάνει τη σχεδίαση γραφικού "
"περιβάλλοντος πολύ εύκολη. Για αυτό το απλό παράδειγμα, όμως, θα "
"κωδικοποιήσουμε τα πάντα χειροκίνητα."

#. (itstool) path: section/p
#: C/image-viewer.js.page:223
msgid ""
"Let's add the box and widgets to the window. Insert the following code into "
"the <code>_init</code> method, immediately above the <code>this.window.show</"
"code> line:"
msgstr ""
"Ας προσθέσουμε ένα πλαίσιο και γραφικά στοιχεία στο παράθυρο. Προσθέστε τον "
"παρακάτω κώδικα στη μέθοδο <code>_init</code>, αμέσως πάνω από τη γραμμή "
"<code>this.window.show</code> line:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:224
#, no-wrap
msgid ""
"\n"
"var main_box = new Gtk.Box ({orientation: Gtk.Orientation.VERTICAL, spacing: 0});\n"
"this.window.add (main_box);"
msgstr ""
"\n"
"var main_box = new Gtk.Box ({orientation: Gtk.Orientation.VERTICAL, spacing: 0});\n"
"this.window.add (main_box);"

#. (itstool) path: section/p
#: C/image-viewer.js.page:227
msgid ""
"The first line creates a <code>Gtk.Box</code> called <code>main_box</code> "
"and sets two of its properties: the <code>orientation</code> is set to "
"vertical (so widgets are arranged in a column), and the <code>spacing</code> "
"between the widgets is set to 0 pixels. The next line then adds the newly-"
"created <code>Gtk.Box</code> to the window."
msgstr ""
"Η πρώτη γραμμή δημιουργεί ένα <code>Gtk.Box</code> που ονομάζεται "
"<code>main_box</code> και ορίζει δύο από τις ιδιότητες του: την "
"<code>orientation</code> που ρυθμίζεται στο κάθετο (οπότε τα γραφικά "
"στοιχεία τακτοποιούνται σε στήλη), και το <code>spacing</code> ανάμεσα στα "
"γραφικά στοιχεία που έχει ρυθμιστεί στα 0 εικονοστοιχεία. Η επόμενη γραμμή "
"έπειτα προσθέτει στο παράθυρο το νεοδημιουργημένο <code>Gtk.Box</code>."

#. (itstool) path: section/p
#: C/image-viewer.js.page:228 C/image-viewer.py.page:146
msgid ""
"So far the window only contains an empty <code>Gtk.Box</code>, and if you "
"run the program now you will see no changes at all (the <code>Gtk.Box</code> "
"is a transparent container, so you can't see that it's there)."
msgstr ""
"Μέχρι στιγμής το παράθυρο περιέχει μόνο ένα άδειο <code>Gtk.Box</code> και "
"άμα εκτελέσετε τώρα το πρόγραμμα δε θα δείτε καμία απολύτως αλλαγή (το "
"<code>Gtk.Box</code> είναι ένας διαφανής περιέκτης, οπότε δεν μπορείτε να "
"δείτε ότι είναι εκεί)."

#. (itstool) path: section/title
#: C/image-viewer.js.page:232 C/image-viewer.py.page:150
msgid "Packing: Adding widgets to the container"
msgstr "Συσκευασία: Πρόσθεση γραφικών στοιχείων στον περιέκτη"

#. (itstool) path: section/p
#: C/image-viewer.js.page:233
msgid ""
"To add some widgets to the <code>Gtk.Box</code>, insert the following code "
"directly below the <code>this.window.add (main_box)</code> line:"
msgstr ""
"Για να προσθέσετε κάποια γραφικά στοιχεία στο <code>Gtk.Box</code>, "
"εισάγετε τον ακόλουθο κώδικα ακριβώς κάτω από την γραμμή <code>this.window."
"add (main_box)</code>:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:234
#, no-wrap
msgid ""
"\n"
"this.image = new Gtk.Image ();\n"
"main_box.pack_start (this.image, true, true, 0);"
msgstr ""
"\n"
"this.image = new Gtk.Image ();\n"
"main_box.pack_start (this.image, true, true, 0);"

#. (itstool) path: section/p
#: C/image-viewer.js.page:237
msgid ""
"The first line creates a new <code>Gtk.Image</code> called <code>image</"
"code>, which will be used to display an image file. Then, the image widget "
"is added (<em>packed</em>) into the <code>main_box</code> container using "
"<code>Gtk.Box</code>'s <link href=\"http://library.gnome.org/devel/gtk/"
"stable/GtkBox.html#gtk-box-pack-start\"><code>pack_start</code></link> "
"method."
msgstr ""
"Η πρώτη γραμμή δημιουργεί ένα καινούργιο <code>Gtk.Image</code> που "
"ονομάζεται <code>image</code>, το οποίο θα εμφανίζει ένα αρχείο εικόνας. "
"Έπειτα, το γραφικό στοιχείο εικόνας προστίθεται (<em>πακεταρισμένο</em>) "
"στον περιέκτη <code>main_box</code> χρησιμοποιώντας τη μέθοδο του <code>Gtk."
"Box</code> <link href=\"http://library.gnome.org/devel/gtk/stable/GtkBox."
"html#gtk-box-pack-start\"><code>pack_start</code></link>."

#. (itstool) path: section/p
#: C/image-viewer.js.page:238
msgid ""
"<code>pack_start</code> takes 4 arguments: the widget that is to be added to "
"the <code>Gtk.Box</code> (<code>child</code>); whether the <code>Gtk.Box</"
"code> should grow larger when the new widget is added (<code>expand</code>); "
"whether the new widget should take up all of the extra space created if the "
"<code>Gtk.Box</code> gets bigger (<code>fill</code>); and how much space "
"there should be, in pixels, between the widget and its neighbors inside the "
"<code>Gtk.Box</code> (<code>padding</code>)."
msgstr ""
"Το <code>pack_start</code> παίρνει 4 ορίσματα: το γραφικό στοιχείο που "
"προστίθεται στο <code>Gtk.Box</code> (<code>child</code>)· αν το <code>Gtk."
"Box</code> πρέπει να μεγαλώσει όταν προστεθεί νέο γραφικό στοιχείο "
"(<code>expand</code>)· αν το νέο γραφικό στοιχείο θα έπρεπε να καλύψει όλο "
"τον διαθέσιμο χώρο αν μεγαλώσει το <code>Gtk.Box</code> (<code>fill</code>)· "
"και πόσος χώρος πρέπει να υπάρχει, σε εικονοστοιχεία, ανάμεσα στο γραφικό "
"στοιχείο και στους γείτονές του μέσα στο <code>Gtk.Box</code>, "
"(<code>padding</code>)."

#. (itstool) path: section/p
#: C/image-viewer.js.page:239 C/image-viewer.py.page:158
msgid ""
"Gtk containers (and widgets) dynamically expand to fill the available space, "
"if you let them. You don't position widgets by giving them a precise x,y-"
"coordinate location in the window; rather, they are positioned relative to "
"one another. This makes handling window resizing much easier, and widgets "
"should automatically take a sensible size in most situations."
msgstr ""
"Οι περιέκτες (και τα γραφικά στοιχεία) του Gtk επεκτείνονται δυναμικά για "
"να καλύψουν τον διαθέσιμο χώρο, αν τα αφήσετε. Δεν τοποθετείτε τα γραφικά "
"στοιχεία δίνοντας τους ακριβείς θέσεις x, y-συντεταγμένων στο παράθυρο· "
"αλλά, τοποθετούνται σχετικά μεταξύ τους. Αυτό κάνει το χειρισμό της αλλαγής "
"του μεγέθους του παραθύρου πιο εύκολη και τα γραφικά στοιχεία πρέπει να "
"πάρουν αυτόματα ένα λογικό μέγεθος στις περισσότερες περιπτώσεις."

#. (itstool) path: section/p
#: C/image-viewer.js.page:240 C/image-viewer.py.page:159
msgid ""
"Also note how the widgets are organized in a hierarchy. Once packed in the "
"<code>Gtk.Box</code>, the <code>Gtk.Image</code> is considered a <em>child</"
"em> of the <code>Gtk.Box</code>. This allows you to treat all of the "
"children of a widget as a group; for example, you could hide the <code>Gtk."
"Box</code>, which would also hide all of its children at the same time."
msgstr ""
"Επίσης σημειώστε πώς τα γραφικά στοιχεία οργανώνονται σε μια ιεραρχία. "
"Μόλις πακεταριστούν μέσα στο <code>Gtk.Box</code>, το <code>Gtk.Image</code> "
"θεωρείται <em>θυγατρικό</em> του <code>Gtk.Box</code>. Αυτό επιτρέπει να "
"συμπεριφερθούμε σε όλα τα θυγατρικά ενός γραφικού στοιχείου ως μια ομάδα· "
"για παράδειγμα, μπορείτε να κρύψετε το <code>Gtk.Box</code>, που θα κρύψει "
"επίσης όλα τα θυγατρικά του ταυτόχρονα."

#. (itstool) path: section/p
#: C/image-viewer.js.page:241 C/image-viewer.py.page:160
msgid "Now insert these two lines, below the two you just added:"
msgstr ""
"Τώρα προσθέστε αυτές τις δύο γραμμές, κάτω από αυτές που μόλις προσθέσατε:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:242
#, no-wrap
msgid ""
"\n"
"var open_button = new Gtk.Button ({label: \"Open a picture...\"});\n"
"main_box.pack_start (open_button, false, false, 0);"
msgstr ""
"\n"
"var open_button = new Gtk.Button ({label: \"Open a picture...\"});\n"
"main_box.pack_start (open_button, false, false, 0);"

#. (itstool) path: section/p
#: C/image-viewer.js.page:245
msgid ""
"These lines are similar to the first two, but this time they create a "
"<code>Gtk.Button</code> and add it to <code>main_box</code>. Notice that we "
"are setting the <code>expand</code> argument (the second one) to "
"<code>false</code> here, whereas it was set to <code>true</code> for the "
"<code>Gtk.Image</code>. This will cause the image to take up all available "
"space and the button to take only the space it needs. When you maximize the "
"window, the button size will remain the same, but the image size will "
"increase, taking up all of the rest of the window."
msgstr ""
"Αυτές οι γραμμές είναι παρόμοιες με τις δυο πρώτες, αλλά αυτή τη φορά "
"δημιουργούν ένα <code>Gtk.Button</code> και το προσθέτουν στο "
"<code>main_box</code>. Σημειώστε ότι ορίζουμε το όρισμα <code>expand</code> "
"(το δεύτερο) στο <code>false</code> εδώ, ενώ είχε οριστεί σε <code>true</"
"code> για το <code>Gtk.Image</code>. Αυτό θα προκαλέσει στην εικόνα να "
"καλύψει όλο το διαθέσιμο χώρο και το κουμπί να πάρει μόνο όσο χρειάζεται. "
"Όταν μεγιστοποιήσετε το παράθυρο, το μέγεθος των κουμπιών θα παραμείνει το "
"ίδιο, ενώ το μέγεθος της εικόνας θα αυξηθεί, καταλαμβάνοντας όλο το υπόλοιπο "
"παράθυρο."

#. (itstool) path: section/p
#: C/image-viewer.js.page:246
msgid ""
"Finally, we must change the <code>this.window.show ();</code> line to read:"
msgstr ""
"Τελικά, πρέπει να αλλάξουμε τη γραμμή <code>this.window.show ();</code> για "
"να διαβάσει:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:247
#, no-wrap
msgid "this.window.show_all ();"
msgstr "this.window.show_all ()·"

#. (itstool) path: section/p
#: C/image-viewer.js.page:248
msgid ""
"This will show the child of the Gtk window, and all of its children, and its "
"children's children, and so on. (Remember that Gtk widgets are all hidden by "
"default.)"
msgstr ""
"Αυτό θα εμφανίσει το θυγατρικό του παραθύρου Gtk και όλα τα θυγατρικά του "
"και τα θυγατρικά των θυγατρικών του κ.ο.κ. (Να θυμάστε ότι τα γραφικά "
"στοιχεία Gtk κρύβονται όλα από προεπιλογή)"

#. (itstool) path: section/title
#: C/image-viewer.js.page:252 C/image-viewer.py.page:169
msgid ""
"Loading the image: Connecting to the button's <code>clicked</code> signal"
msgstr ""
"Φόρτωση της εικόνας: Σύνδεση στο σήμα του κουμπιού <code>clicked</code>"

#. (itstool) path: section/p
#: C/image-viewer.js.page:253
msgid ""
"When the user clicks on the <gui>Open</gui> button, a dialog should appear "
"so that the user can choose a picture. Once chosen, the picture should be "
"loaded and shown in the image widget."
msgstr ""
"Όταν ο χρήστης πατήσει στο κουμπί <gui>άνοιγμα</gui>, ένας διάλογος θα "
"εμφανιστεί έτσι ώστε ο χρήστης να διαλέξει μια εικόνα. Μόλις διαλέξει, η "
"εικόνα θα φορτωθεί και θα εμφανιστεί στο γραφικό στοιχείο της εικόνας."

#. (itstool) path: section/p
#: C/image-viewer.js.page:254
msgid ""
"The first step is to connect the <code>clicked</code> signal of the button "
"to a signal handler function, which we call <code>_openClicked</code>. Put "
"this code immediately after the <code>var open_button = new Gtk.Button</"
"code> line where the button was created:"
msgstr ""
"Το πρώτο βήμα είναι να συνδέσουμε το σήμα <code>clicked</code> του κουμπιού "
"με μια συνάρτηση χειριστή σημάτων, την οποία καλούμε με <code>_openClicked</"
"code>. Βάλτε αυτόν τον κώδικα αμέσως μετά την γραμμή <code>var open_button = "
"new Gtk.Button</code> όπου το κουμπί δημιουργήθηκε:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:255
#, no-wrap
msgid ""
"\n"
"open_button.connect (\"clicked\", Lang.bind (this, this._openClicked));"
msgstr ""
"\n"
"open_button.connect (\"clicked\", Lang.bind (this, this._openClicked));"

#. (itstool) path: section/p
#: C/image-viewer.js.page:257
msgid ""
"We are using the <em>Lang</em> JavaScript helper here. It allows us to "
"connect a <em>class method</em> to the signal, rather than a plain function "
"(without a class) which we had used before for the window's <code>hide</"
"code> signal. Don't worry about this for now, it's just a technical detail. "
"For it to work, you also need to put the following line at the top of the "
"file:"
msgstr ""
"Χρησιμοποιούμε τον βοηθό <em>Lang</em> JavaScript εδώ. Επιτρέπει τη σύνδεση "
"μιας <em>μεθόδου κλάσης</em> με το σήμα, αντί για απλή συνάρτηση (χωρίς "
"κλάση) που χρησιμοποιήσαμε πριν για το σήμα του παραθύρου <code>hide</code>. "
"Μην ανησυχείτε για αυτό για τώρα, είναι απλά μια τεχνική λεπτομέρεια. Για να "
"δουλέψει χρειαζόσαστε επίσης να βάλετε την παρακάτω γραμμή στην κορυφή του "
"αρχείου:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:258
#, no-wrap
msgid "const Lang = imports.lang;"
msgstr "const Lang = imports.lang·"

#. (itstool) path: section/title
#: C/image-viewer.js.page:262 C/image-viewer.py.page:180
msgid "Loading the image: Writing the signal's callback"
msgstr "Φόρτωση της εικόνας: Γράφοντας την επανάκληση του σήματος"

#. (itstool) path: section/p
#: C/image-viewer.js.page:263
msgid ""
"Now we can create the <code>_openClicked()</code> method. Insert the "
"following into the <code>ImageViewer.prototype</code> code block, after the "
"<code>_init</code> method (and not forgetting the comma):"
msgstr ""
"Τώρα μπορούμε να δημιουργήσουμε τη μέθοδο <code>_openClicked()</code>. "
"Εισάγετε τα ακόλουθα στην ομάδα κώδικα <code>ImageViewer.prototype</code>, "
"μετά τη μέθοδο <code>_init</code> (και μη ξεχάσετε το κόμμα):"

#. (itstool) path: section/code
#: C/image-viewer.js.page:264
#, no-wrap
msgid ""
"\n"
"  _openClicked: function () {\n"
"    var chooser = new Gtk.FileChooserDialog ({title: \"Select an image\",\n"
"                                              action: Gtk.FileChooserAction.OPEN,\n"
"                                              transient_for: this.window,\n"
"                                              modal: true});\n"
"    chooser.add_button (Gtk.STOCK_CANCEL, 0);\n"
"    chooser.add_button (Gtk.STOCK_OPEN, 1);\n"
"    chooser.set_default_response (1);\n"
"\n"
"    var filter = new Gtk.FileFilter ();\n"
"    filter.add_pixbuf_formats ();\n"
"    chooser.filter = filter;\n"
"\n"
"    if (chooser.run () == 1)\n"
"      this.image.file = chooser.get_filename ();\n"
"\n"
"    chooser.destroy ();\n"
"  }"
msgstr ""
"\n"
"  _openClicked: function () {\n"
"    var chooser = new Gtk.FileChooserDialog ({title: \"Select an image\",\n"
"                                              action: Gtk.FileChooserAction.OPEN,\n"
"                                              transient_for: this.window,\n"
"                                              modal: true});\n"
"    chooser.add_button (Gtk.STOCK_CANCEL, 0);\n"
"    chooser.add_button (Gtk.STOCK_OPEN, 1);\n"
"    chooser.set_default_response (1);\n"
"\n"
"    var filter = new Gtk.FileFilter ();\n"
"    filter.add_pixbuf_formats ();\n"
"    chooser.filter = filter;\n"
"\n"
"    if (chooser.run () == 1)\n"
"      this.image.file = chooser.get_filename ();\n"
"\n"
"    chooser.destroy ();\n"
"  }"

#. (itstool) path: item/p
#: C/image-viewer.js.page:286
msgid ""
"The line beginning with <code>var chooser</code> creates an <gui>Open</gui> "
"dialog, which the user can use to choose files. We set four properties: the "
"title of the dialog; the action (type) of the dialog (it's an \"open\" "
"dialog, but we could have used <code>SAVE</code> if the intention was to "
"save a file; <code>transient_for</code>, which sets the parent window of the "
"dialog; and <code>modal</code> which, if set to <code>true</code>, prevents "
"the user from clicking on another area of the application until the dialog "
"is closed."
msgstr ""
"Η γραμμή που ξεκινάει με <code>var chooser</code> δημιουργεί έναν διάλογο "
"<gui>ανοίγματος</gui>, τον οποίο ο χρήστης μπορεί να χρησιμοποιήσει για "
"επιλογή αρχείων. Ορίζουμε τέσσερις ιδιότητες: τον τίτλο του διαλόγου· την "
"ενέργεια (τύπο) του διαλόγου (είναι διάλογος \"open\", αλλά θα μπορούσαμε να "
"χρησιμοποιήσουμε <code>SAVE</code> αν η πρόθεση ήταν να αποθηκεύσουμε ένα "
"αρχείο· <code>transient_for</code>, που ορίζει το ανιόν παράθυρο του "
"διαλόγου· και <code>modal</code> που, εάν οριστεί <code>true</code>, "
"αποτρέπει το χρήστη από κλικ σε μια άλλη περιοχή της εφαρμογής μέχρι το "
"κλείσιμο του διαλόγου."

#. (itstool) path: item/p
#: C/image-viewer.js.page:289 C/image-viewer.py.page:203
msgid ""
"The next two lines add <gui>Cancel</gui> and <gui>Open</gui> buttons to the "
"dialog. The second argument of the <code>add_button</code> method is the "
"(integer) value that is returned when the button is pressed: 0 for "
"<gui>Cancel</gui> and 1 for <gui>Open</gui>."
msgstr ""
"Οι επόμενες δύο γραμμές προσθέτουν τα κουμπιά <gui>Cancel</gui> και "
"<gui>Open</gui> στο διάλογο. Το δεύτερο όρισμα της μεθόδου του "
"<code>add_button</code> είναι η (ακέραιη) τιμή που επιστρέφει όταν πατιέται "
"το κουμπί: 0 για το <gui>Ακύρωση</gui> και 1 για το <gui>Άνοιγμα</gui>."

#. (itstool) path: item/p
#: C/image-viewer.js.page:293 C/image-viewer.py.page:207
msgid ""
"<code>set_default_response</code> determines the button that will be "
"activated if the user double-clicks a file or presses <key>Enter</key>. In "
"our case, we are using the <gui>Open</gui> button as default (which has the "
"value 1)."
msgstr ""
"To <code>set_default_response</code> καθορίζει ποιο κουμπί θα ενεργοποιηθεί "
"όταν ο χρήστης επιλέξει ένα αρχείο με διπλό κλικ ή πατήσει <key>Enter</key>. "
"Στην περίπτωση μας, χρησιμοποιούμε το κουμπί <gui>Άνοιγμα</gui> σαν "
"προεπιλεγμένο (το οποίο έχει τιμή 1)."

#. (itstool) path: item/p
#: C/image-viewer.js.page:296 C/image-viewer.py.page:210
msgid ""
"The next three lines restrict the <gui>Open</gui> dialog to only display "
"files which can be opened by <code>Gtk.Image</code>. A filter object is "
"created first; we then add all kinds of files supported by <code>Gdk.Pixbuf</"
"code> (which includes most image formats like PNG and JPEG) to the filter. "
"Finally, we set this filter to be the <gui>Open</gui> dialog's filter."
msgstr ""
"Οι επόμενες τρεις γραμμές περιορίζουν το διάλογο <gui>Άνοιγμα</gui> να "
"εμφανίζει μόνο αρχεία που μπορούν να ανοιχθούν από το <code>Gtk.Image</"
"code>. Δημιουργούμε πρώτα ένα αντικείμενο φίλτρου· προσθέτουμε στο φίλτρο "
"όλων των ειδών αρχεία που υποστηρίζονται από το <code>Gdk.Pixbuf</code> (το "
"οποίο περιέχει τα περισσότερα είδη εικόνων όπως PNG και JPEG). Τέλος, "
"καθορίζουμε το φίλτρο να είναι το φίλτρο του διαλόγου <gui>Άνοιγμα</gui>."

#. (itstool) path: item/p
#: C/image-viewer.js.page:299
msgid ""
"<code>chooser.run</code> displays the <gui>Open</gui> dialog. The dialog "
"will wait for the user to choose an image; when they do, <code>chooser.run</"
"code> will return the value <output>1</output> (it would return <output>0</"
"output> if the user clicked <gui>Cancel</gui>). The <code>if</code> "
"statement tests for this."
msgstr ""
"Το <code>dialog.run</code> εμφανίζει το διάλογο <gui>άνοιγμα</gui>. Ο "
"διάλογος θα περιμένει τον χρήστη να διαλέξει μια εικόνα· όταν διαλέξει, το "
"<code>chooser.run</code> θα επιστρέψει την τιμή <output>1</output> (θα "
"επιστρέψει <output>0</output> αν ο χρήστης πατήσει <gui>ακύρωση</gui>). Η "
"πρόταση <code>if</code> το ελέγχει."

#. (itstool) path: item/p
#: C/image-viewer.js.page:301 C/image-viewer.py.page:215
msgid ""
"Assuming that the user did click <gui>Open</gui>, the next line sets the "
"<code>file</code> property of the <code>Gtk.Image</code> to the filename of "
"the image selected by the user. The <code>Gtk.Image</code> will then load "
"and display the chosen image."
msgstr ""
"Αν υποθέσουμε ότι ο χρήστης πάτησε το <gui>Άνοιγμα</gui>, η επόμενη γραμμή "
"ορίζει την ιδιότητα <code>file</code> του <code>Gtk.Image</code> στο όνομα "
"του αρχείου εικόνας που επέλεξε ο χρήστης. Το <code>Gtk.Image</code> θα "
"φορτώσει και θα εμφανίσει την επιλεγμένη εικόνα."

#. (itstool) path: item/p
#: C/image-viewer.js.page:304 C/image-viewer.py.page:218
#: C/image-viewer.vala.page:273
msgid ""
"In the final line of this method, we destroy the <gui>Open</gui> dialog "
"because we don't need it any more."
msgstr ""
"Στην τελευταία γραμμή αυτής της μεθόδου, καταστρέφουμε τον διάλογο "
"<gui>άνοιγμα</gui> γιατί δεν τον χρειαζόμαστε πια."

#. (itstool) path: section/p
#: C/image-viewer.js.page:312
msgid ""
"All of the code you need should now be in place, so try running the code. "
"That should be it; a fully-functioning image viewer (and a whistlestop tour "
"of JavaScript and Gtk) in not much time at all!"
msgstr ""
"Όλος ο κώδικας που χρειάζεστε πρέπει να είναι τώρα στη θέση του, οπότε "
"δοκιμάστε την εκτέλεση του κώδικα. Αυτό ήτανε· ένας πλήρως λειτουργικός "
"προβολέας εικόνων (και μια περιήγηση του JavaScript και Gtk) σε ελάχιστο "
"χρόνο!"

#. (itstool) path: section/p
#: C/image-viewer.js.page:317
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"image-viewer/image-viewer.js\">reference code</link>."
msgstr ""
"Αν αντιμετωπίσετε πρόβλημα με το μάθημα, συγκρίνετε τον κώδικά σας με αυτόν "
"τον <link href=\"image-viewer/image-viewer.js\">κώδικα αναφοράς</link>."

#. (itstool) path: info/title
#: C/image-viewer.py.page:8
msgctxt "text"
msgid "Image viewer (Python)"
msgstr "Προβολέας εικόνων (Python)"

#. (itstool) path: info/desc
#: C/image-viewer.py.page:11
msgid ""
"A little bit more than a simple \"Hello world\" application - write an image "
"viewer in GTK."
msgstr ""
"Μια λίγο περισσότερο από απλή εφαρμογή σαν το \"Γεια σου κόσμε\" - γράψτε "
"έναν προβολέα εικόνων σε GTK."

#. (itstool) path: item/p
#: C/image-viewer.py.page:34
msgid "Write a basic GTK user interface in Python"
msgstr "Γράψετε μια βασική διεπαφή χρήστη GTK σε Python"

#. (itstool) path: item/p
#: C/image-viewer.py.page:42
msgid "Basic knowledge of the python programming language"
msgstr "Βασική γνώση της γλώσσας προγραμματισμού Python"

#. (itstool) path: item/p
#: C/image-viewer.py.page:56
msgid ""
"Choose <gui>PyGTK (automake)</gui> from the <gui>Python</gui> tab, click "
"<gui>Continue</gui>, and fill out your details on the next few pages. Use "
"<file>image-viewer</file> as project name and directory."
msgstr ""
"Επιλέξτε <gui>PyGTK (automake)</gui> από την καρτέλα <gui>Python</gui>, "
"πατήστε <gui>συνέχεια</gui>, και συμπληρώστε τις λεπτομέρειες σας στις "
"επόμενες λίγες σελίδες. Χρησιμοποιήστε το <file>image-viewer</file> ως όνομα "
"του έργου και του καταλόγου."

#. (itstool) path: item/p
#: C/image-viewer.py.page:59
msgid ""
"Be sure to disable <gui>Use GtkBuilder for user interface</gui> as we will "
"build the user interface manually in this example. For an example of using "
"the interface designer, check the <link xref=\"guitar-tuner.py\">Guitar-"
"Tuner demo</link>."
msgstr ""
"Βεβαιωθείτε ότι απενεργοποιήσατε το <gui>χρήση του GtkBuilder για διεπαφή "
"χρήση</gui> επειδή θα φτιάξουμε τη διεπαφή χρήστη χειροκίνητα σε αυτό το "
"παράδειγμα. Για ένα παράδειγμα χρήσης του σχεδιαστή διεπαφής, δείτε το <link "
"xref=\"guitar-tuner.py\">επίδειξη ρυθμιστή κιθάρας</link>."

#. (itstool) path: item/p
#: C/image-viewer.py.page:64
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. Open "
"<file>src/image_viewer.py</file> from the <gui>Project</gui> or <gui>File</"
"gui> tabs. It contains very basic example code."
msgstr ""
"Πατήστε <gui>εφαρμογή</gui> και το έργο θα δημιουργηθεί για εσάς. Ανοίξτε το "
"<file>src/image_viewer.py</file> από τις καρτέλες <gui>έργο</gui> ή "
"<gui>αρχείο</gui>. Περιλαμβάνει πολύ βασικό παράδειγμα κώδικα."

#. (itstool) path: section/p
#: C/image-viewer.py.page:71
msgid "Let's see what a very basic Gtk application looks like in Python:"
msgstr "Για να δούμε πως φαίνεται μια πολύ βασική εφαρμογή Gtk σε Python:"

#. (itstool) path: section/code
#: C/image-viewer.py.page:72
#, no-wrap
msgid ""
"\n"
"from gi.repository import Gtk, GdkPixbuf, Gdk\n"
"import os, sys\n"
"\n"
"class GUI:\n"
"\tdef __init__(self):\n"
"\t\twindow = Gtk.Window()\n"
"\t\twindow.set_title (\"Hello World\")\n"
"\t\twindow.connect_after('destroy', self.destroy)\n"
"\n"
"\t\twindow.show_all()\n"
"\n"
"\tdef destroy(window, self):\n"
"\t\tGtk.main_quit()\n"
"\n"
"def main():\n"
"\tapp = GUI()\n"
"\tGtk.main()\n"
"\n"
"if __name__ == \"__main__\":\n"
"    sys.exit(main())\n"
"\n"
"  "
msgstr ""
"\n"
"from gi.repository import Gtk, GdkPixbuf, Gdk\n"
"import os, sys\n"
"\n"
"class GUI:\n"
"\tdef __init__(self):\n"
"\t\twindow = Gtk.Window()\n"
"\t\twindow.set_title (\"Hello World\")\n"
"\t\twindow.connect_after('destroy', self.destroy)\n"
"\n"
"\t\twindow.show_all()\n"
"\n"
"\tdef destroy(window, self):\n"
"\t\tGtk.main_quit()\n"
"\n"
"def main():\n"
"\tapp = GUI()\n"
"\tGtk.main()\n"
"\n"
"if __name__ == \"__main__\":\n"
"    sys.exit(main())\n"
"\n"
"  "

#. (itstool) path: item/p
#: C/image-viewer.py.page:101
msgid ""
"In the <code>__init__</code> method of the <code>GUI</code> class creates an "
"(empty) <code>Gtk.Window</code>, sets its title and then connects a signal "
"to quit the application once the window is closed. That's pretty simple "
"overall, more on signals later."
msgstr ""
"Η μέθοδος <code>__init__</code> της κλάσης <code>GUI</code> δημιουργεί ένα "
"(άδειο) <code>Gtk.Window</code>, ορίζει τον τίτλο του και μετά συνδέει ένα "
"σήμα να τερματίζει την εφαρμογή όταν το παράθυρο κλείσει. Είναι πολύ απλό, "
"περισσότερα για τα σήματα αργότερα."

#. (itstool) path: item/p
#: C/image-viewer.py.page:106
msgid ""
"Next, <code>destroy</code> is defined which just quits the application. It "
"is called by the <code>destroy</code> signal connected above."
msgstr ""
"Μετά, ορίζουμε το <code>destroy</code> το οποίο απλά θα τερματίσει την "
"εφαρμογή. Καλείται από το σήμα <code>destroy</code> που συνδέσατε παραπάνω."

#. (itstool) path: item/p
#: C/image-viewer.py.page:110
msgid "The rest of the file does initialisation for Gtk and displays the GUI."
msgstr ""
"Το υπόλοιπο του αρχείου κάνει αρχικοποίηση για το Gtk και εμφανίζει το GUI."

#. (itstool) path: section/p
#: C/image-viewer.py.page:114
msgid ""
"This code is ready to run, so try it using <guiseq><gui>Run</"
"gui><gui>Execute</gui></guiseq>. It should show you an empty window."
msgstr ""
"Ο κώδικας είναι έτοιμος να εκτελεστεί, οπότε δοκιμάστε το πατώντας "
"<guiseq><gui>τρέξιμο</gui><gui>Εκτέλεση</gui></guiseq>. Θα πρέπει να "
"εμφανίσει ένα άδειο παράθυρο."

#. (itstool) path: section/code
#: C/image-viewer.py.page:121
#, no-wrap
msgid ""
"\n"
"def button_clicked () :\n"
"  print \"you clicked me!\"\n"
"\n"
"b = new Gtk.Button (\"Click me\")\n"
"b.connect_after ('clicked', button_clicked)"
msgstr ""
"\n"
"def button_clicked () :\n"
"  print \"you clicked me!\"\n"
"\n"
"b = new Gtk.Button (\"Click me\")\n"
"b.connect_after ('clicked', button_clicked)"

#. (itstool) path: section/p
#: C/image-viewer.py.page:137
msgid ""
"Let's add the box and widgets to the window. Insert the following code into "
"the <code>__init__</code> method, immediately after the <code>window."
"connect_after</code> line:"
msgstr ""
"Ας προσθέσουμε ένα πλαίσιο και γραφικά στοιχεία στο παράθυρο. Προσθέστε τον "
"παρακάτω κώδικα στη μέθοδο <code>__init__</code>, αμέσως μετά τη γραμμή "
"<code>window.connect_after</code>:"

#. (itstool) path: section/code
#: C/image-viewer.py.page:138
#, no-wrap
msgid ""
"\n"
"box = Gtk.Box()\n"
"box.set_spacing (5)\n"
"box.set_orientation (Gtk.Orientation.VERTICAL)\n"
"window.add (box)\n"
"\n"
msgstr ""
"\n"
"box = Gtk.Box()\n"
"box.set_spacing (5)\n"
"box.set_orientation (Gtk.Orientation.VERTICAL)\n"
"window.add (box)\n"
"\n"

#. (itstool) path: section/p
#: C/image-viewer.py.page:145
msgid ""
"The first line creates a <code>Gtk.Box</code> called <code>box</code> and "
"the following lines set two of its properties: the <code>orientation</code> "
"is set to vertical (so the widgets are arranged in a column), and the "
"<code>spacing</code> between the widgets is set to 5 pixels. The next line "
"then adds the newly-created <code>Gtk.Box</code> to the window."
msgstr ""
"Η πρώτη γραμμή δημιουργεί ένα <code>Gtk.Box</code> που ονομάζεται <code>box</"
"code> και οι επόμενες γραμμές ρυθμίζουν δύο από τις ιδιότητες του: το "
"<code>orientation</code> ρυθμίζεται σε κάθετο (οπότε τα γραφικά στοιχεία "
"τοποθετούνται σε στήλη) και το <code>spacing</code> ανάμεσα στα γραφικά "
"στοιχεία έχει ρυθμιστεί στα 5 εικονοστοιχεία. Η επόμενη γραμμή έπειτα "
"προσθέτει στο παράθυρο το νεοδημιουργημένο <code>Gtk.Box</code>."

#. (itstool) path: section/p
#: C/image-viewer.py.page:151
msgid ""
"To add some widgets to the <code>Gtk.Box</code>, insert the following code "
"directly below the <code>window.add (box)</code> line:"
msgstr ""
"Για να προσθέσετε κάποια γραφικά στοιχεία στο <code>Gtk.Box</code>, "
"εισάγετε τον ακόλουθο κώδικα ακριβώς κάτω από την γραμμή <code>window.add "
"(box)</code>:"

#. (itstool) path: section/code
#: C/image-viewer.py.page:152
#, no-wrap
msgid ""
"\n"
"self.image = Gtk.Image()\n"
"box.pack_start (self.image, False, False, 0)"
msgstr ""
"\n"
"self.image = Gtk.Image()\n"
"box.pack_start (self.image, False, False, 0)"

#. (itstool) path: section/p
#: C/image-viewer.py.page:155
msgid ""
"The first line creates a new <code>Gtk.Image</code> called <code>image</"
"code>, which will be used to display an image file. As we need that later on "
"in the signal handler, we will define it as a class-wide variable. You need "
"to add <code>image = 0</code> to the beginning of the <code>GUI</code> "
"class. Then, the image widget is added (<em>packed</em>) into the <code>box</"
"code> container using GtkBox's <link href=\"http://library.gnome.org/devel/"
"gtk/stable/GtkBox.html#gtk-box-pack-start\"><code>pack_start</code></link> "
"method."
msgstr ""
"Η πρώτη γραμμή δημιουργεί ένα καινούργιο <code>Gtk.Image</code> που "
"ονομάζεται <code>image</code>, που θα εμφανίζει ένα αρχείο εικόνας. Καθώς το "
"χρειαζόμαστε αργότερα στο χειριστή σημάτων, θα το ορίσουμε ως μεταβλητή "
"ευρείας κλάσης. Πρέπει να προσθέσετε το <code>image = 0</code> στην αρχή της "
"κλάσης <code>GUI</code>. Έπειτα, το γραφικό στοιχείο της εικόνας "
"προστίθεται (<em>πακετάρεται</em>) στον περιέκτη <code>box</code> "
"χρησιμοποιώντας τη μέθοδο <link href=\"http://library.gnome.org/devel/gtk/"
"stable/GtkBox.html#gtk-box-pack-start\"><code>pack_start</code></link> του "
"GtkBox."

#. (itstool) path: section/p
#: C/image-viewer.py.page:157
msgid ""
"<code>pack_start</code> takes 4 arguments: the widget that is to be added to "
"the GtkBox (<code>child</code>); whether the <code>Gtk.Box</code> should "
"grow larger when the new widget is added (<code>expand</code>); whether the "
"new widget should take up all of the extra space created if the <code>Gtk."
"Box</code> gets bigger (<code>fill</code>); and how much space there should "
"be, in pixels, between the widget and its neighbors inside the <code>Gtk."
"Box</code> (<code>padding</code>)."
msgstr ""
"Το <code>pack_start</code> παίρνει 4 παραμέτρους: το γραφικό στοιχείο που "
"θα προστεθεί στο GtkBox (<code>child</code>)· αν το <code>Gtk.Box</code> "
"πρέπει να μεγαλώσει όταν προστεθεί νέο γραφικό στοιχείο (<code>expand</"
"code>)· αν το νέο γραφικό στοιχείο θα έπρεπε να καλύψει όλο τον "
"δημιουργημένο επιπλέον χώρο αν μεγαλώσει το <code>Gtk.Box</code> "
"(<code>fill</code>)· και πόσος χώρος πρέπει να υπάρχει, σε εικονοστοιχεία, "
"ανάμεσα στο γραφικό στοιχείο και στους γείτονές του μέσα στο <code>Gtk.Box</"
"code>, (<code>padding</code>)."

#. (itstool) path: section/code
#: C/image-viewer.py.page:161
#, no-wrap
msgid ""
"\n"
"button = Gtk.Button (\"Open a picture...\")\n"
"box.pack_start (button, False, False, 0)\n"
msgstr ""
"\n"
"button = Gtk.Button (\"Open a picture...\")\n"
"box.pack_start (button, False, False, 0)\n"

#. (itstool) path: section/p
#: C/image-viewer.py.page:165
msgid ""
"These lines are similar to the first two, but this time they create a "
"<code>Gtk.Button</code> and add it to <code>box</code>. Notice that we are "
"setting the <code>expand</code> argument (the second one) to <code>False</"
"code> here, whereas it was set to <code>True</code> for the <code>Gtk.Image</"
"code>. This will cause the image to take up all available space and the "
"button to take only the space it needs. When you maximize the window, the "
"button size will remain the same, but the image size will increase, taking "
"up all of the rest of the window."
msgstr ""
"Αυτές οι γραμμές είναι παρόμοιες με τις δυο πρώτες, αλλά αυτή τη φορά "
"δημιουργούν ένα <code>Gtk.Button</code> και το προσθέτουν στο <code>box</"
"code>. Σημειώστε ότι ορίζουμε την (δεύτερη) παράμετρο, την <code>expand</"
"code> σε <code>False</code>, ενώ είχε οριστεί <code>True</code> για το "
"<code>Gtk.Image</code>. Έτσι η εικόνα θα πάρει όλο το διαθέσιμο χώρο και τα "
"κουμπιά μόνο όσο χρειάζονται. Όταν μεγιστοποιήσεις το παράθυρο, το μέγεθος "
"των κουμπιών θα παραμείνει το ίδιο, ενώ της εικόνας θα αυξηθεί, "
"χρησιμοποιώντας όλο το υπόλοιπο παράθυρο."

#. (itstool) path: section/p
#: C/image-viewer.py.page:170
msgid ""
"When the user clicks on the <gui>Open Image...</gui> button, a dialog should "
"appear so that the user can choose a picture. Once chosen, the picture "
"should be loaded and shown in the image widget."
msgstr ""
"Όταν ο χρήστης πατήσει πάνω στο κουμπί <gui>Άνοιγμα εικόνας…</gui>, ένας "
"διάλογος θα εμφανιστεί ώστε ο χρήστης να διαλέξει μια εικόνα. Μόλις "
"διαλέξει, η εικόνα θα φορτωθεί και θα εμφανιστεί στο αντίστοιχο γραφικό "
"στοιχείο."

#. (itstool) path: section/p
#: C/image-viewer.py.page:171
msgid ""
"The first step is to connect the <code>clicked</code> signal of the button "
"to a signal handler function, which we call <code>on_open_clicked</code>. "
"Put this code immediately after the <code>button = Gtk.Button()</code> line "
"where the button was created:"
msgstr ""
"Το πρώτο βήμα είναι να συνδέσουμε το σήμα <code>clicked</code> του κουμπιού "
"με μια συνάρτηση χειριστή σημάτων, την οποία ονομάζουμε "
"<code>on_open_clicked</code>. Βάλτε αυτόν τον κώδικα αμέσως μετά την γραμμή "
"που το κουμπί δημιουργείται <code>button = Gtk.Button()</code>:"

#. (itstool) path: section/code
#: C/image-viewer.py.page:172
#, no-wrap
msgid ""
"\n"
"button.connect_after('clicked', self.on_open_clicked)\n"
msgstr ""
"\n"
"button.connect_after('clicked', self.on_open_clicked)\n"

#. (itstool) path: section/p
#: C/image-viewer.py.page:175
msgid ""
"This will connect the <code>clicked</code> signal to <code>on_open_clicked</"
"code> method that we will define below."
msgstr ""
"Αυτό θα συνδέσει το σήμα <code>clicked</code> στη μέθοδο "
"<code>on_open_clicked</code> η οποία θα οριστεί παρακάτω."

#. (itstool) path: section/p
#: C/image-viewer.py.page:181
msgid ""
"Now we can create the <code>on_open_clicked</code> method. Insert the "
"following into the <code>GUI</code> class code block, after the "
"<code>__init__</code> method:"
msgstr ""
"Τώρα μπορούμε να δημιουργήσουμε τη μέθοδο <code>on_open_clicked</code>. "
"Εισάγετε τα ακόλουθα στη κλάση <code>GUI</code>, μετά τη μέθοδο "
"<code>__init__</code>:"

#. (itstool) path: section/code
#: C/image-viewer.py.page:182
#, no-wrap
msgid ""
"\n"
"def on_open_clicked (self, button):\n"
"\tdialog = Gtk.FileChooserDialog (\"Open Image\", button.get_toplevel(), Gtk.FileChooserAction.OPEN);\n"
"\tdialog.add_button (Gtk.STOCK_CANCEL, 0)\n"
"\tdialog.add_button (Gtk.STOCK_OK, 1)\n"
"\tdialog.set_default_response(1)\n"
"\n"
"\tfilefilter = Gtk.FileFilter ()\n"
"\tfilefilter.add_pixbuf_formats ()\n"
"\tdialog.set_filter(filefilter)\n"
"\n"
"\tif dialog.run() == 1:\n"
"\t\tself.image.set_from_file(dialog.get_filename())\n"
"\n"
"\tdialog.destroy()"
msgstr ""
"\n"
"def on_open_clicked (self, button):\n"
"\tdialog = Gtk.FileChooserDialog (\"Open Image\", button.get_toplevel(), Gtk.FileChooserAction.OPEN);\n"
"\tdialog.add_button (Gtk.STOCK_CANCEL, 0)\n"
"\tdialog.add_button (Gtk.STOCK_OK, 1)\n"
"\tdialog.set_default_response(1)\n"
"\n"
"\tfilefilter = Gtk.FileFilter ()\n"
"\tfilefilter.add_pixbuf_formats ()\n"
"\tdialog.set_filter(filefilter)\n"
"\n"
"\tif dialog.run() == 1:\n"
"\t\tself.image.set_from_file(dialog.get_filename())\n"
"\n"
"\tdialog.destroy()"

#. (itstool) path: item/p
#: C/image-viewer.py.page:200
msgid ""
"The line beginning with <code>dialog</code> creates an <gui>Open</gui> "
"dialog, which the user can use to choose files. We set three properties: the "
"title of the dialog; the action (type) of the dialog (it's an \"open\" "
"dialog, but we could have used <code>SAVE</code> if the intention was to "
"save a file; and <code>transient_for</code>, which sets the parent window of "
"the dialog."
msgstr ""
"Η γραμμή που ξεκινάει με <code>dialog</code> δημιουργεί έναν διάλογο "
"<gui>Open</gui>, τον οποίο ο χρήστης χρησιμοποιεί για να διαλέξει αρχεία. "
"Ορίζουμε τρεις ιδιότητες: τον τίτλο του διαλόγου, την ενέργεια (type) του "
"διαλόγου (είναι διάλογος \"open\", αλλά θα μπορούσαμε να χρησιμοποιήσουμε "
"<code>SAVE</code> αν θέλαμε να αποθηκεύσουμε ένα αρχείο)· και "
"<code>transient_for</code>, όπου ορίζει το γονικό παράθυρο του διαλόγου."

#. (itstool) path: item/p
#: C/image-viewer.py.page:213
msgid ""
"<code>dialog.run</code> displays the <gui>Open</gui> dialog. The dialog will "
"wait for the user to choose an image; when they do, <code>dialog.run</code> "
"will return the value <output>1</output> (it would return <output>0</output> "
"if the user clicked <gui>Cancel</gui>). The <code>if</code> statement tests "
"for this."
msgstr ""
"Το <code>dialog.run</code> εμφανίζει το διάλογο <gui>Άνοιγμα</gui>. Ο "
"διάλογος θα περιμένει τον χρήστη να διαλέξει μια εικόνα· όταν διαλέξει, το "
"<code>dialog.run</code> θα επιστρέψει την τιμή <output>1</output> (θα "
"επιστρέψει <output>0</output> αν ο χρήστης πατήσει <gui>Ακύρωση</gui>). Ο "
"έλεγχος ροής <code>if</code> ελέγχει για αυτό."

#. (itstool) path: section/p
#: C/image-viewer.py.page:226
msgid ""
"All of the code you need should now be in place, so try running the code. "
"That should be it; a fully-functioning image viewer (and a whistlestop tour "
"of Python and Gtk) in not much time at all!"
msgstr ""
"Θα πρέπει να έχετε όλον τον κώδικα που χρειάζεστε, οπότε δοκιμάστε να τον "
"εκτελέσετε. Εδώ είναι το τέλος· ένα πλήρες και λειτουργικό πρόγραμμα "
"προβολής εικόνων (και ένας μικρός οδηγός σε Python και Gtk) σε ελάχιστο "
"χρόνο!"

#. (itstool) path: section/p
#: C/image-viewer.py.page:231
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"image-viewer/image-viewer.py\">reference code</link>."
msgstr ""
"Αν αντιμετωπίσετε πρόβλημα με τον οδηγό, συγκρίνετε τον κώδικά σας με αυτόν "
"τον <link href=\"image-viewer/image-viewer.py\">κώδικα αναφοράς</link>."

#. (itstool) path: info/title
#: C/image-viewer.vala.page:8
msgctxt "text"
msgid "Image viewer (Vala)"
msgstr "Προβολέας εικόνων (Vala)"

#. (itstool) path: info/desc
#: C/image-viewer.vala.page:11
msgid "A little bit more than a simple \"Hello world\" GTK+ application."
msgstr "Μια λίγο περισσότερο από απλή εφαρμογή GTK+ \"Hello world\"."

#. (itstool) path: credit/name
#: C/image-viewer.vala.page:23
msgid "Philip Chimento"
msgstr "Philip Chimento"

#. (itstool) path: synopsis/p
#: C/image-viewer.vala.page:39
msgid ""
"In this tutorial you will create an application which opens and displays an "
"image file. You will learn:"
msgstr ""
"Σε αυτόν το μάθημα θα φτιάξετε μια εφαρμογή που ανοίγει και εμφανίζει ένα "
"αρχείο εικόνας. Θα μάθετε:"

#. (itstool) path: item/p
#: C/image-viewer.vala.page:41
msgid ""
"How to set up a basic project using the <link xref=\"getting-ready\">Anjuta "
"IDE</link>."
msgstr ""
"Πώς θα εγκαταστήσετε ένα βασικό έργο χρησιμοποιώντας το <link xref=\"getting-"
"ready\">Anjuta IDE</link>."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:42
msgid ""
"How to write a <link href=\"http://developer.gnome.org/platform-overview/"
"stable/gtk\">Gtk application</link> in Vala"
msgstr ""
"Πώς θα γράψετε μια <link href=\"http://developer.gnome.org/platform-overview/"
"stable/gtk\">εφαρμογή Gtk</link> στο Vala"

#. (itstool) path: item/p
#: C/image-viewer.vala.page:43
msgid ""
"Some basic concepts of <link href=\"http://developer.gnome.org/gobject/"
"stable/\">GObject</link> programming"
msgstr ""
"Μερικές βασικές έννοιες του προγραμματισμού <link href=\"http://developer."
"gnome.org/gobject/stable/\">GObject</link>"

#. (itstool) path: item/p
#: C/image-viewer.vala.page:50
msgid ""
"You may find the <link href=\"http://valadoc.org/gtk+-3.0/\">gtk+-3.0</link> "
"API Reference useful, although it is not necessary to follow the tutorial."
msgstr ""
"Ίσως βρείτε την αναφορά API <link href=\"http://valadoc.org/gtk+-3.0/\">gtk"
"+-3.0</link> χρήσιμη, αν και δεν είναι απαραίτητη η παρακολούθηση του "
"μαθήματος."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:66
msgid ""
"From the <gui>Vala</gui> tab choose <gui>GTK+ (Simple)</gui>, click "
"<gui>Continue</gui>, and fill out your details on the next page. Use "
"<file>image-viewer</file> as project name and directory."
msgstr ""
"Από την καρτέλα <gui>Vala</gui> επιλέξτε <gui>GTK+ (απλό)</gui>, πατήστε "
"<gui>συνέχεια</gui> και συμπληρώστε τις λεπτομέρειές σας στην επόμενη "
"σελίδα. Χρησιμοποιήστε το <file>image-viewer</file> ως όνομα του έργου και "
"του καταλόγου."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:70
msgid ""
"Make sure that <gui>Use GtkBuilder for user interface</gui> is unchecked as "
"we will create the UI manually in this tutorial."
msgstr ""
"Βεβαιωθείτε ότι το <gui>χρήση του GtkBuilder για διεπαφή χρήστη</gui> είναι "
"ασημείωτο επειδή θα δημιουργήσουμε την UI χειροκίνητα σε αυτό το μάθημα."

#. (itstool) path: note/p
#: C/image-viewer.vala.page:71
msgid ""
"You will learn how to use the interface builder in the <link xref=\"guitar-"
"tuner.vala\">Guitar-Tuner</link> tutorial."
msgstr ""
"Θα μάθετε πώς να χρησιμοποιήσετε τον κατασκευαστή διεπαφής στο μάθημα <link "
"xref=\"guitar-tuner.vala\">ρυθμιστής κιθάρας</link>."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:75
msgid ""
"Click <gui>Continue</gui> then <gui>Apply</gui> and the project will be "
"created for you. Open <file>src/image_viewer.vala</file> from the "
"<gui>Project</gui> or <gui>File</gui> tabs. You will see this code:"
msgstr ""
"Πατήστε <gui>συνέχεια</gui>, έπειτα <gui>εφαρμογή</gui> και το έργο θα "
"δημιουργηθεί για εσάς. Ανοίξτε το <file>src/image_viewer.vala</file> από τις "
"καρτέλες <gui>έργο</gui> ή <gui>αρχείο</gui>. Θα δείτε αυτόν τον κώδικα:"

#. (itstool) path: item/code
#: C/image-viewer.vala.page:78
#, no-wrap
msgid ""
"\n"
"using GLib;\n"
"using Gtk;\n"
"\n"
"public class Main : Object\n"
"{\n"
"\n"
"\tpublic Main ()\n"
"\t{\n"
"\t\tWindow window = new Window();\n"
"\t\twindow.set_title (\"Hello World\");\n"
"\t\twindow.show_all();\n"
"\t\twindow.destroy.connect(on_destroy);\n"
"\t}\n"
"\n"
"\tpublic void on_destroy (Widget window)\n"
"\t{\n"
"\t\tGtk.main_quit();\n"
"\t}\n"
"\n"
"\tstatic int main (string[] args)\n"
"\t{\n"
"\t\tGtk.init (ref args);\n"
"\t\tvar app = new Main ();\n"
"\n"
"\t\tGtk.main ();\n"
"\n"
"\t\treturn 0;\n"
"\t}\n"
"}"
msgstr ""
"\n"
"using GLib;\n"
"using Gtk;\n"
"\n"
"public class Main : Object\n"
"{\n"
"\n"
"\tpublic Main ()\n"
"\t{\n"
"\t\tWindow window = new Window();\n"
"\t\twindow.set_title (\"Hello World\");\n"
"\t\twindow.show_all();\n"
"\t\twindow.destroy.connect(on_destroy);\n"
"\t}\n"
"\n"
"\tpublic void on_destroy (Widget window)\n"
"\t{\n"
"\t\tGtk.main_quit();\n"
"\t}\n"
"\n"
"\tstatic int main (string[] args)\n"
"\t{\n"
"\t\tGtk.init (ref args);\n"
"\t\tvar app = new Main ();\n"
"\n"
"\t\tGtk.main ();\n"
"\n"
"\t\treturn 0;\n"
"\t}\n"
"}"

#. (itstool) path: section/p
#: C/image-viewer.vala.page:114
msgid ""
"The code loads an (empty) window from the user interface description file "
"and shows it. More details are given below; skip this list if you understand "
"the basics:"
msgstr ""
"Ο κώδικας φορτώνει ένα (κενό) παράθυρο από το αρχείο περιγραφής διεπαφής "
"χρήστη και το εμφανίζει. Περισσότερες πληροφορίες υπάρχουν πιο κάτω· "
"προσπεράστε αυτή τη λίστα αν καταλαβαίνετε τα βασικά:"

#. (itstool) path: item/p
#: C/image-viewer.vala.page:119
msgid ""
"The two <code>using</code> lines at the top import namespaces so we don't "
"have to name them explicitly."
msgstr ""
"Οι δύο γραμμές <code>using</code> στην κορυφή εισάγουν τους χώρους ονομάτων, "
"έτσι ώστε να μην έχουμε να ονομαστούν ρητά."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:122
msgid ""
"The constructor of the <code>Main</code> class creates a new (empty) window "
"and connects a <link href=\"https://live.gnome.org/Vala/SignalsAndCallbacks"
"\">signal</link> to exit the application when that window is closed."
msgstr ""
"Ο κατασκευαστής της κλάσης <code>Main</code> δημιουργεί ένα νέο (κενό) "
"παράθυρο και συνδέει ένα <link href=\"https://live.gnome.org/Vala/"
"SignalsAndCallbacks\">σήμα</link> για έξοδο από την εφαρμογή, όταν το "
"παράθυρο κλείσει."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:127
msgid ""
"The <code>static main</code> function is run by default when you start a "
"Vala application. It calls a few functions which create the <code>Main</"
"code> class, set up and then run the application. The <link href=\"http://"
"valadoc.org/gtk+-3.0/Gtk.main.html\"><code>Gtk.main</code></link> function "
"starts the GTK <link href=\"http://en.wikipedia.org/wiki/Event_loop\">main "
"loop</link>, which runs the user interface and starts listening for events "
"(like clicks and key presses)."
msgstr ""
"Η συνάρτηση <code>static main</code> τρέχει από προεπιλογή όταν ξεκινάτε μια "
"εφαρμογή Vala. Καλεί λίγες συναρτήσεις που δημιουργούν την κλάση <code>Main</"
"code>, ρυθμίζουν και μετά τρέχουν την εφαρμογή. Η συνάρτηση <link href="
"\"http://valadoc.org/gtk+-3.0/Gtk.main.html\"><code>Gtk.main</code></link> "
"ξεκινά την GTK <link href=\"http://en.wikipedia.org/wiki/Event_loop\">κύριος "
"βρόχος</link>, που τρέχει τη διεπαφή χρήστη και ξεκινά ακρόαση των συμβάντων "
"(όπως κλικ και πατήματα πλήκτρου)."

#. (itstool) path: section/p
#: C/image-viewer.vala.page:134 C/magic-mirror.vala.page:94
msgid ""
"Change the <gui>Configuration</gui> to <gui>Default</gui> and then press "
"<gui>Execute</gui> to configure the build directory. You only need to do "
"this once, for the first build."
msgstr ""
"Αλλαγή της <gui>ρύθμισης</gui> σε <gui>προεπιλογή</gui> και τότε πάτημα "
"<gui>εκτέλεση</gui> για ρύθμιση του καταλόγου κατασκευής. Χρειάζεται να το "
"κάνετε μόνο μια φορά, για την πρώτη κατασκευή."

#. (itstool) path: section/p
#: C/image-viewer.vala.page:140
msgid ""
"Now we will bring life into the empty window. GTK organizes the user "
"interface with <link href=\"http://www.valadoc.org/gtk+-2.0/Gtk.Container."
"html\"><code>Gtk.Container</code></link>s that can contain other widgets and "
"even other containers. Here we will use the simplest available container, a "
"<link href=\"http://unstable.valadoc.org/gtk+-2.0/Gtk.Box.html\"><code>Gtk."
"Box</code></link>."
msgstr ""
"Τώρα θα δώσουμε ζωή σε ένα άδειο παράθυρο. Το GTK οργανώνει τη διεπαφή "
"χρήστη με το <link href=\"http://www.valadoc.org/gtk+-2.0/Gtk.Container.html"
"\"><code>Gtk.Container</code></link> που μπορούν να περιέχουν άλλα γραφικά "
"στοιχεία και ακόμα άλλους περιέκτες. Εδώ θα χρησιμοποιήσουμε τον απλούστερο "
"διαθέσιμο περιέκτη, ένα <link href=\"http://unstable.valadoc.org/gtk+-2.0/"
"Gtk.Box.html\"><code>Gtk.Box</code></link>."

#. (itstool) path: section/p
#: C/image-viewer.vala.page:144
msgid "Add the following lines to the top of the <code>Main</code> class:"
msgstr ""
"Προσθέστε τις επόμενες γραμμές στην κορυφή της κλάσης <code>Main</code>:"

#. (itstool) path: section/code
#: C/image-viewer.vala.page:145
#, no-wrap
msgid ""
"\n"
"private Window window;\n"
"private Image image;\n"
msgstr ""
"\n"
"private Window window;\n"
"private Image image;\n"

#. (itstool) path: section/p
#: C/image-viewer.vala.page:150
msgid "Now replace the current constructor with the one below:"
msgstr "Τώρα αντικαταστήστε τον τρέχοντα κατασκευαστή με τον παρακάτω:"

#. (itstool) path: section/code
#: C/image-viewer.vala.page:151
#, no-wrap
msgid ""
"\n"
"\n"
"public Main () {\n"
"\n"
"\twindow = new Window ();\n"
"\twindow.set_title (\"Image Viewer in Vala\");\n"
"\n"
"\t// Set up the UI\n"
"\tvar box = new Box (Orientation.VERTICAL, 5);\n"
"\tvar button = new Button.with_label (\"Open image\");\n"
"\timage = new Image ();\n"
"\n"
"\tbox.pack_start (image, true, true, 0);\n"
"\tbox.pack_start (button, false, false, 0);\n"
"\twindow.add (box);\n"
"\n"
"\t// Show open dialog when opening a file\n"
"\tbutton.clicked.connect (on_open_image);\n"
"\n"
"\twindow.show_all ();\n"
"\twindow.destroy.connect (main_quit);\n"
"}\n"
msgstr ""
"\n"
"\n"
"public Main () {\n"
"\n"
"\twindow = new Window ();\n"
"\twindow.set_title (\"Image Viewer in Vala\");\n"
"\n"
"\t//Ρύθμιση της διεπαφής χρήστη\n"
"\tvar box = new Box (Orientation.VERTICAL, 5);\n"
"\tvar button = new Button.with_label (\"Open image\");\n"
"\timage = new Image ();\n"
"\n"
"\tbox.pack_start (image, true, true, 0);\n"
"\tbox.pack_start (button, false, false, 0);\n"
"\twindow.add (box);\n"
"\n"
"\t// Εμφάνιση ανοικτού διαλόγου κατά το άνοιγμα αρχείου\n"
"\tbutton.clicked.connect (on_open_image);\n"
"\n"
"\twindow.show_all ();\n"
"\twindow.destroy.connect (main_quit);\n"
"}\n"

#. (itstool) path: item/p
#: C/image-viewer.vala.page:176
msgid ""
"The first two lines are the parts of the GUI that we will need to access "
"from more than one method. We declare them up here so that they are "
"accessible throughout the class instead of only in the method where they are "
"created."
msgstr ""
"Οι πρώτες δύο γραμμές είναι μέρη του GUI που θα χρειαστούν πρόσβαση από "
"περισσότερες από μία μεθόδους. Τις δηλώνουμε εδώ έτσι ώστε να είναι "
"προσβάσιμες μέσα από την κλάση αντί μόνο από τη μέθοδο όπου δημιουργούνται."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:180
msgid ""
"The first lines of the constructor create the empty window. The next lines "
"create the widgets we want to use: a button for opening up an image, the "
"image view widget itself and the box we will use as a container."
msgstr ""
"Οι πρώτες γραμμές του κατασκευαστή δημιουργούν το άδειο παράθυρο. Οι "
"επόμενες γραμμές δημιουργούν τα γραφικά στοιχεία που θέλουμε να "
"χρησιμοποιήσουμε: ένα κουμπί για άνοιγμα μιας εικόνας, το ίδιο το γραφικό "
"στοιχείο προβολής της εικόνας και το πλαίσιο που θα χρησιμοποιήσουμε ως "
"περιέκτη."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:184
msgid ""
"The calls to <link href=\"http://unstable.valadoc.org/gtk+-2.0/Gtk.Box."
"pack_start.html\"><code>pack_start</code></link> add the two widgets to the "
"box and define their behaviour. The image will expand into any available "
"space whereas the button will just be as big as needed. You will notice that "
"we don't set explicit sizes on the widgets. In GTK this is usually not "
"needed as it makes it much easier to have a layout that looks good in "
"different window sizes. Next, the box is added to the window."
msgstr ""
"Οι κλήσεις στο <link href=\"http://unstable.valadoc.org/gtk+-2.0/Gtk.Box."
"pack_start.html\"><code>pack_start</code></link> προσθέτουν τα δύο γραφικά "
"στοιχεία στο πλαίσιο και ορίζουν τη συμπεριφορά τους. Η εικόνα θα επεκταθεί "
"σε κάθε διαθέσιμο χώρο ενώ το κουμπί θα είναι απλά τόσο μεγάλο όσο "
"χρειάζεται. Θα παρατηρήσετε ότι δεν ορίζουμε ρητά μεγέθη στα γραφικά "
"στοιχεία. Στο GTK αυτό συνήθως δεν χρειάζεται επειδή είναι πιο απλό να "
"έχετε μια διάταξη που φαίνεται καλή με διαφορετικά μεγέθη παραθύρων. Στη "
"συνέχεια, το πλαίσιο προστίθεται στο παράθυρο."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:191
msgid ""
"We need to define what happens when the user clicks on the button. GTK uses "
"the concept of <em>signals</em>."
msgstr ""
"Χρειάζεται να ορίσουμε τι συμβαίνει όταν ο χρήστης πατά το κουμπί. Το GTK "
"χρησιμοποιεί την έννοια των <em>σημάτων</em>."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:192
msgid ""
"When the <link href=\"http://valadoc.org/gtk+-3.0/Gtk.Button.html\">button</"
"link> is clicked, it fires the <link href=\"http://valadoc.org/gtk+-3.0/Gtk."
"Button.clicked.html\"><code>clicked</code></link> signal, which we can "
"connect to some action (defined in a <link href=\"https://live.gnome.org/"
"Vala/SignalsAndCallbacks\">callback</link> method)."
msgstr ""
"Όταν το <link href=\"http://valadoc.org/gtk+-3.0/Gtk.Button.html\">κουμπί</"
"link> πατιέται προκαλεί το σήμα <link href=\"http://valadoc.org/gtk+-3.0/Gtk."
"Button.clicked.html\"><code>clicked</code></link>, που μπορούμε να "
"συνδέσουμε με κάποια ενέργεια (ορισμένη σε μια μέθοδο <link href=\"https://"
"live.gnome.org/Vala/SignalsAndCallbacks\">επανάκλησης</link>)."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:195
msgid ""
"This is done using the <code>connect</code> method of the button's "
"<code>clicked</code> signal, which in this case tells GTK to call the (yet "
"undefined) <code>on_image_open</code> callback method when the button is "
"clicked. We will define the <em>callback</em> in the next section."
msgstr ""
"Αυτό γίνεται χρησιμοποιώντας τη μέθοδο <code>connect</code> του σήματος του "
"κουμπιού <code>clicked</code>, που σε αυτήν την περίπτωση λέει στο GTK να "
"καλέσει την μέθοδο επανάκλησης (αόριστη ακόμα) <code>on_image_open</code> "
"όταν το κουμπί πατιέται. Θα ορίσουμε την <em>επανάκληση</em> στην επόμενη "
"ενότητα."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:199
msgid ""
"In the callback, we need to access the <code>window</code> and <code>image</"
"code> widgets, which is why we defined them as private members at the top of "
"our class."
msgstr ""
"Στην επανάκληση, χρειαζόμαστε να προσπελάσουμε τα γραφικά στοιχεία "
"<code>window</code> και <code>image</code>, γι' αυτό τα ορίζουμε ως ιδιωτικά "
"μέλη στην κορυφή των κλάσεων μας."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:203
msgid ""
"The last <code>connect</code> call makes sure that the application exits "
"when the window is closed. The code generated by Anjuta called an "
"<code>on_destroy</code> callback method which called <link href=\"http://www."
"valadoc.org/gtk+-2.0/Gtk.main_quit.html\"><code>Gtk.main_quit</code></link>, "
"but just connecting our signal to <code>main_quit</code> directly is easier. "
"You can delete the <code>on_destroy</code> method."
msgstr ""
"Η τελευταία κλήση <code>connect</code> βεβαιώνεται ότι η εφαρμογή εξέρχεται "
"όταν το παράθυρο κλείνει. Ο δημιουργούμενος κώδικας από το Anjuta κάλεσε μια "
"μέθοδο επανάκλησης <code>on_destroy</code> που κάλεσε <link href=\"http://"
"www.valadoc.org/gtk+-2.0/Gtk.main_quit.html\"><code>Gtk.main_quit</code></"
"link>, αλλά η σύνδεση του σήματος μας στο <code>main_quit</code> άμεσα είναι "
"ευκολότερη. Μπορείτε να διαγράψετε τη μέθοδο <code>on_destroy</code>."

#. (itstool) path: section/p
#: C/image-viewer.vala.page:211
msgid ""
"We will now define the signal handler for the <code>clicked</code> signal "
"for the button we mentioned before. Add this code after the constructor:"
msgstr ""
"Θα ορίσουμε τώρα τον χειριστή σήματος για το σήμα <code>clicked</code> για "
"το κουμπί που αναφέραμε πριν. Προσθέστε αυτόν τον κώδικα μετά τον "
"κατασκευαστή:"

#. (itstool) path: section/code
#: C/image-viewer.vala.page:214
#, no-wrap
msgid ""
"\n"
"public void on_open_image (Button self) {\n"
"\tvar filter = new FileFilter ();\n"
"\tvar dialog = new FileChooserDialog (\"Open image\",\n"
"\t                                    window,\n"
"\t                                    FileChooserAction.OPEN,\n"
"\t                                    Stock.OK,     ResponseType.ACCEPT,\n"
"\t                                    Stock.CANCEL, ResponseType.CANCEL);\n"
"\tfilter.add_pixbuf_formats ();\n"
"\tdialog.add_filter (filter);\n"
"\n"
"\tswitch (dialog.run ())\n"
"\t{\n"
"\t\tcase ResponseType.ACCEPT:\n"
"\t\t\tvar filename = dialog.get_filename ();\n"
"\t\t\timage.set_from_file (filename);\n"
"\t\t\tbreak;\n"
"\t\tdefault:\n"
"\t\t\tbreak;\n"
"\t}\n"
"\tdialog.destroy ();\n"
"}\n"
msgstr ""
"\n"
"public void on_open_image (Button self) {\n"
"\tvar filter = new FileFilter ();\n"
"\tvar dialog = new FileChooserDialog (\"Open image\",\n"
"\t                                    window,\n"
"\t                                    FileChooserAction.OPEN,\n"
"\t                                    Stock.OK,     ResponseType.ACCEPT,\n"
"\t                                    Stock.CANCEL, ResponseType.CANCEL);\n"
"\tfilter.add_pixbuf_formats ();\n"
"\tdialog.add_filter (filter);\n"
"\n"
"\tswitch (dialog.run ())\n"
"\t{\n"
"\t\tcase ResponseType.ACCEPT:\n"
"\t\t\tvar filename = dialog.get_filename ();\n"
"\t\t\timage.set_from_file (filename);\n"
"\t\t\tbreak;\n"
"\t\tdefault:\n"
"\t\t\tbreak;\n"
"\t}\n"
"\tdialog.destroy ();\n"
"}\n"

#. (itstool) path: section/p
#: C/image-viewer.vala.page:237
msgid "This is a bit complicated, so let's break it down:"
msgstr "Αυτό είναι λίγο πιο περίπλοκο, γιαυτό ας το χωρίσουμε:"

#. (itstool) path: note/p
#: C/image-viewer.vala.page:238
msgid ""
"A signal handler is a type of callback method that is called when a signal "
"is emitted. Here the terms are used interchangeably."
msgstr ""
"Ένας χειριστής σήματος είναι ένας τύπος της μεθόδου επανάκλησης που καλείται "
"όταν ένα σήμα εκπέμπεται. Εδώ οι όροι χρησιμοποιούνται εναλλακτικά."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:241
msgid ""
"The first argument of the callback method is always the widget that sent the "
"signal. Sometimes other arguments related to the signal come after that, but "
"<em>clicked</em> doesn't have any."
msgstr ""
"Το πρώτο όρισμα της μεθόδου επανάκλησης είναι πάντοτε το γραφικό στοιχείο "
"που έστειλε το σήμα. Μερικές φορές άλλα ορίσματα που συνδέονται με το σήμα "
"έρχονται μετά από αυτό, αλλά <em>πατημένο</em> δεν έχει κανένα."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:243
msgid ""
"In this case the <code>button</code> sent the <code>clicked</code> signal, "
"which is connected to the <code>on_open_image</code> callback method:"
msgstr ""
"Σε αυτήν την περίπτωση το <code>button</code> έστειλε το σήμα <code>clicked</"
"code>, που συνδέεται με τη μέθοδο επανάκλησης <code>on_open_image</code>:"

#. (itstool) path: item/code
#: C/image-viewer.vala.page:244
#, no-wrap
msgid ""
"\n"
"        button.clicked.connect (on_open_image);\n"
msgstr ""
"\n"
"        button.clicked.connect (on_open_image);\n"

#. (itstool) path: item/p
#: C/image-viewer.vala.page:248
msgid ""
"The <code>on_open_image</code> method takes the button that emitted the "
"signal as an argument:"
msgstr ""
"Η μέθοδος <code>on_open_image</code> παίρνει το κουμπί που εξέπεμψε το σήμα "
"ως όρισμα:"

#. (itstool) path: item/code
#: C/image-viewer.vala.page:249
#, no-wrap
msgid ""
"\n"
"        public void on_open_image (Button self)\n"
msgstr ""
"\n"
"        public void on_open_image (Button self)\n"

#. (itstool) path: item/p
#: C/image-viewer.vala.page:254
msgid ""
"The next interesting line is where the dialog for choosing the file is "
"created. <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.FileChooserDialog."
"html\"><code>FileChooserDialog</code></link>'s constructor takes the title "
"of the dialog, the parent window of the dialog and several options like the "
"number of buttons and their corresponding values."
msgstr ""
"Η επόμενη ενδιαφέρουσα γραμμή είναι όταν ο διάλογος επιλογής του αρχείου "
"δημιουργείται. Το <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk."
"FileChooserDialog.html\"><code>FileChooserDialog</code></link> του "
"κατασκευαστή παίρνει τον τίτλο του διαλόγου, το ανιόν παράθυρο του διαλόγου "
"και πολλές επιλογές όπως ο αριθμός των κουμπιών και οι αντίστοιχες τιμές "
"τους."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:256
msgid ""
"Notice that we are using <link href=\"http://unstable.valadoc.org/gtk+-3.0/"
"Gtk.Stock.html\"><em>stock</em></link> button names from Gtk, instead of "
"manually typing \"Cancel\" or \"Open\". The advantage of using stock names "
"is that the button labels will already be translated into the user's "
"language."
msgstr ""
"Σημειώστε όταν χρησιμοποιούμε τα ονόματα κουμπιών <link href=\"http://"
"unstable.valadoc.org/gtk+-3.0/Gtk.Stock.html\"><em>αποθέματος</em></link> "
"από το Gtk, αντί να γράψουμε χειροκίνητα \"ακύρωση\" ή \"άνοιγμα\". Το "
"πλεονέκτημα της χρήσης των ονομάτων αποθέματος είναι ότι οι ετικέτες των "
"κουμπιών θα έχουν ήδη μεταφραστεί στη γλώσσα του χρήστη."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:260
msgid ""
"The next two lines restrict the <gui>Open</gui> dialog to only display files "
"which can be opened by <em>GtkImage</em>. GtkImage is a widget which "
"displays an image. A filter object is created first; we then add all kinds "
"of files supported by <link href=\"http://www.valadoc.org/gdk-pixbuf-2.0/Gdk."
"Pixbuf.html\"><code>Gdk.Pixbuf</code></link> (which includes most image "
"formats like PNG and JPEG) to the filter. Finally, we set this filter to be "
"the <gui>Open</gui> dialog's filter."
msgstr ""
"Οι επόμενες δύο γραμμές περιορίζουν το διάλογο <gui>άνοιγμα</gui> να "
"εμφανίζει μόνο αρχεία που μπορούν να ανοιχθούν από το <em>GtkImage</em>. Το "
"GtkImage είναι ένα γραφικό στοιχείο που εμφανίζει μια εικόνα. Ένα "
"αντικείμενο φίλτρου δημιουργείται πρώτα· έπειτα προσθέτουμε όλα τα είδη των "
"αρχείων που υποστηρίζονται από <link href=\"http://www.valadoc.org/gdk-"
"pixbuf-2.0/Gdk.Pixbuf.html\"><code>Gdk.Pixbuf</code></link>(το οποίο "
"περιλαμβάνει τις περισσότερες μορφές εικόνων όπως PNG και JPEG) στο φίλτρο. "
"Τέλος, ορίζουμε αυτό το φίλτρο να είναι το φίλτρο του διαλόγου <gui>άνοιγμα</"
"gui>."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:265
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Dialog.run.html"
"\"><code>dialog.run</code></link> displays the <gui>Open</gui> dialog. The "
"dialog will wait for the user to choose an image; when they do, <code>dialog."
"run</code> will return the <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk."
"ResponseType.html\">ResponseType</link> value <code>ResponseType.ACCEPT</"
"code> (it would return <code>ResponseType.CANCEL</code> if the user clicked "
"<gui>Cancel</gui>). The <code>switch</code> statement tests for this."
msgstr ""
"Το <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Dialog.run.html"
"\"><code>dialog.run</code></link> εμφανίζει το διάλογο <gui>άνοιγμα</gui>. Ο "
"διάλογος θα περιμένει να επιλέξει ο χρήστης μια εικόνα· όταν γίνει το "
"<code>dialog.run</code> θα επιστρέψει την τιμή <link href=\"http://www."
"valadoc.org/gtk+-3.0/Gtk.ResponseType.html\">ResponseType</link> "
"<code>ResponseType.ACCEPT</code> (θα μπορούσε να επιστρέψει το "
"<code>ResponseType.CANCEL</code> εάν ο χρήστης πατούσε <gui>ακύρωση</gui>). "
"Η πρόταση <code>switch</code> το ελέγχει."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:270
msgid ""
"Assuming that the user did click <gui>Open</gui>, the next lines get the "
"filename of the image selected by the user, and tell the <code>GtkImage</"
"code> widget to load and display the selected image."
msgstr ""
"Αν υποθέσουμε ότι ο χρήστης πάτησε το <gui>άνοιγμα</gui>, οι επόμενες "
"γραμμές παίρνουν το όνομα του αρχείου της επιλεγμένης εικόνας από τον χρήστη "
"και λέει στο γραφικό στοιχείο <code>GtkImage</code> να φορτώσει και να "
"εμφανίσει την επιλεγμένη εικόνα."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:274
msgid "Destroying automatically hides the dialog."
msgstr "Η αυτόματη καταστροφή κρύβει το διάλογο."

#. (itstool) path: section/p
#: C/image-viewer.vala.page:283
msgid ""
"If you haven't already done so, choose the <file>src/image-viewer</file> "
"application in the dialog that appears. Finally, hit <gui>Run</gui> and "
"enjoy!"
msgstr ""
"Εάν δεν το έχετε ήδη κάνει, επιλέξτε την εφαρμογή <file>src/image-viewer</"
"file> στον διάλογο που εμφανίζεται. Τελικά, πατήστε <gui>τρέξιμο</gui> και "
"απολαύστε το!"

#. (itstool) path: section/p
#: C/image-viewer.vala.page:289
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"image-viewer/image-viewer.vala\">reference code</link>."
msgstr ""
"Αν αντιμετωπίσετε πρόβλημα με το μάθημα, συγκρίνετε τον κώδικά σας με αυτόν "
"τον <link href=\"image-viewer/image-viewer.vala\">κώδικα αναφοράς</link>."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:296
msgid ""
"Set it up so that when the window opens it is of a specific size to start "
"off with. For example, 200 X 200 pixels."
msgstr ""
"Εγκαταστήστε την έτσι ώστε όταν το παράθυρο ανοίγει να είναι συγκεκριμένου "
"μεγέθους για εκκίνηση. Για παράδειγμα, 200 Χ 200 εικονοστοιχεία."

#. (itstool) path: credit/name
#: C/index.page:8
msgid "GNOME Documentation Team"
msgstr "Ομάδα τεκμηρίωσης GNOME"

#. (itstool) path: credit/years
#: C/index.page:10
msgid "2010, 2011"
msgstr "2010, 2011"

#. (itstool) path: credit/name
#: C/index.page:13 C/message-board.c.page:15
msgid "Shaun McCance"
msgstr "Shaun McCance"

#. (itstool) path: credit/years
#: C/index.page:15 C/message-board.c.page:17
msgid "2010"
msgstr "2010"

#. (itstool) path: page/title
#: C/index.page:28
msgid "GNOME Developer Platform Demos"
msgstr "Παραδείγματα ανάπτυξης πλατφόρμας GNOME"

#. (itstool) path: page/p
#: C/index.page:30
msgid ""
"This guide includes a variety of coding examples, such writing an image "
"viewer or weather application. Each demo comes with code that you can try, "
"and explains how each example works. They are a great way to get started "
"with the GNOME developer platform."
msgstr ""
"Αυτός ο οδηγός περιλαμβάνει μια ποικιλία από παραδείγματα κώδικα, όπως η "
"εγγραφή ενός προβολέα εικόνων ή μια εφαρμογή για τον καιρό. Κάθε παράδειγμα "
"διαθέτει κώδικα όπου μπορείτε να τον δοκιμάσετε, και σας επεξηγεί πως "
"λειτουργεί το κάθε παράδειγμα. Αυτά τα παραδείγματα είναι ένας εξαιρετικός "
"τρόπος για να ξεκινήσετε με την πλατφόρμα ανάπτυξης του GNOME."

#. (itstool) path: section/title
#: C/index.page:36
msgid "Pick a Language"
msgstr "Επιλέξτε μια γλώσσα"

#. (itstool) path: section/p
#: C/index.page:37
msgid ""
"These developer demos are available in a range of programming languages. "
"Pick one to get started:"
msgstr ""
"Αυτά τα παραδείγμα είναι διαθέσιμα για μια σειρά από γλώσσες "
"προγραμματισμού. Επιλέξτε μία για να ξεκινήσετε:"

#. (itstool) path: info/title
#: C/js.page:8
msgctxt "link"
msgid "JavaScript"
msgstr "JavaScript"

#. (itstool) path: credit/name
#: C/js.page:21
msgid "Ekaterina Gerasimova"
msgstr "Ekaterina Gerasimova"

#. (itstool) path: page/title
#: C/js.page:26
msgid "Tutorials, code samples and platform demos in JavaScript"
msgstr "Μαθήματα, δείγματα κώδικα και παραδείγματα πλατφόρμας σε JavaScript"

#. (itstool) path: section/title
#: C/js.page:31
msgid "Code samples and tutorials"
msgstr "Δείγματα κώδικα και μαθήματα"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/label.c.page:26 C/label.js.page:22 C/label.py.page:31
#: C/label.vala.page:22
msgctxt "_"
msgid "external ref='media/label.png' md5='734975c18653d88379f983e4501c3fc0'"
msgstr "external ref='media/label.png' md5='734975c18653d88379f983e4501c3fc0'"

#. (itstool) path: info/title
#: C/label.c.page:8
msgctxt "text"
msgid "Label (C)"
msgstr "Ετικέτα (C)"

#. (itstool) path: info/desc
#: C/label.c.page:19 C/label.vala.page:18
msgid "A widget which displays text"
msgstr "Ένα γραφικό στοιχείο που εμφανίζει κείμενο"

#. (itstool) path: page/title
#. (itstool) path: td/p
#: C/label.c.page:22 C/label.js.page:21 C/label.py.page:30
#: C/label.vala.page:21 C/toolbar_builder.py.page:98
#: C/toolbar_builder.vala.page:81
msgid "Label"
msgstr "Ετικέτα"

#. (itstool) path: td/p
#. (itstool) path: page/p
#: C/label.c.page:27 C/label.py.page:32 C/label.vala.page:23
msgid "A simple label"
msgstr "Μια απλή ετικέτα"

#. (itstool) path: page/code
#: C/label.c.page:32
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"\n"
"  /*Create a window with a title and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_application (GTK_WINDOW (window), GTK_APPLICATION (app));\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Welcome to GNOME\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200,100);\n"
"   \n"
"  /*Create a label and set its alignment. Setting the line wrap to TRUE makes \n"
"  the label break lines if the text exceeds the widget's size. When set to \n"
"  FALSE the text gets cut off by the edge of the widget*/\n"
"  label = gtk_label_new (\"Hello GNOME!\");\n"
"  gtk_label_set_justify (GTK_LABEL (label), GTK_JUSTIFY_CENTER);\n"
"  gtk_label_set_line_wrap (GTK_LABEL (label), TRUE);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (label));\n"
"\n"
"  gtk_widget_show_all (GTK_WIDGET (window));\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\",G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""
"#περιλαμβάνει &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"\n"
"  /*Δημιουργία παραθύρου με τίτλο και προεπιλεγμένο μέγεθος*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_application (GTK_WINDOW (window), GTK_APPLICATION (app));\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Welcome to GNOME\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200,100);\n"
"   \n"
"  /*Δημιουργία ετικέτας και ορισμός στοίχισης της. Ορίζοντας την αναδίπλωση της γραμμής  σε TRUE  \n"
"  αλλάζει τις γραμμές της ετικέταςαν το κείμενο ξεπερνά το μέγεθος του γραφικού στοιχείου.  Αν οριστεί σε \n"
"  FALSE το κείμενο αποκόπτεται από το άκρο του γραφικού στοιχείου*/\n"
"  label = gtk_label_new (\"Hello GNOME!\");\n"
"  gtk_label_set_justify (GTK_LABEL (label), GTK_JUSTIFY_CENTER);\n"
"  gtk_label_set_line_wrap (GTK_LABEL (label), TRUE);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (label));\n"
"\n"
"  gtk_widget_show_all (GTK_WIDGET (window));\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\",G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/label.c.page:39
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/3.4/GtkLabel.html\">GtkLabel</"
"link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/3.4/GtkLabel.html\">GtkLabel</"
"link>"

#. (itstool) path: info/title
#: C/label.js.page:8
msgctxt "text"
msgid "Label (JavaScript)"
msgstr "Ετικέτα (JavaScript)"

#. (itstool) path: info/desc
#: C/label.js.page:18
msgid "A label which can contain text"
msgstr "Μια ετικέτα που μπορεί να περιέχει κείμενο"

#. (itstool) path: page/p
#: C/label.js.page:23
msgid "A label displaying a friendly message."
msgstr "Μια ετικέτα που εμφανίζει ένα φιλικό μήνυμα."

#. (itstool) path: page/code
#: C/label.js.page:25
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const LabelExample = new Lang.Class ({\n"
"    Name: 'Label Example',\n"
"\n"
"    /* Create the application itself\n"
"       This boilerplate code is needed to build any GTK+ application. */\n"
"        _init: function () {\n"
"            this.application = new Gtk.Application ({\n"
"                application_id: 'org.example.jslabel',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                              window_position: Gtk.WindowPosition.CENTER,\n"
"                                                              title: \"Welcome to GNOME\",\n"
"                                                              default_height: 100,\n"
"                                                              default_width: 200 });\n"
"\n"
"        // Create the label\n"
"        this.label = new Gtk.Label ({label: \"Hello GNOME!\"});\n"
"        this._window.add (this.label);\n"
"\n"
"                // Show the window and all child widgets\n"
"                this._window.show_all();\n"
"    }\n"
"\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new LabelExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const LabelExample = new Lang.Class ({\n"
"    Name: 'Label Example',\n"
"\n"
"    /* Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"       Αυτός ο κώδικας απαιτείται για τη δόμηση οποιασδήποτε εφαρμογής  GTK+. */\n"
"        _init: function () {\n"
"            this.application = new Gtk.Application ({\n"
"                application_id: 'org.example.jslabel',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Σύνδεση συμάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα'activate' παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    //Η συνάρτηση επανάκλησης για το σήμα 'startup' αρχικοποιεί τα μενού και δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function () {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"            this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                              window_position: Gtk.WindowPosition.CENTER,\n"
"                                                              title: \"Welcome to GNOME\",\n"
"                                                              default_height: 100,\n"
"                                                              default_width: 200 });\n"
"\n"
"        // Δημιουργία της ετικέτας\n"
"        this.label = new Gtk.Label ({label: \"Hello GNOME!\"});\n"
"        this._window.add (this.label);\n"
"\n"
"                // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"                this._window.show_all();\n"
"    }\n"
"\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new LabelExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/label.js.page:32
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Label.html"
"\">Gtk.Label</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Label.html"
"\">Gtk.Label</link>"

#. (itstool) path: info/title
#: C/label.py.page:9
msgctxt "text"
msgid "Label (Python)"
msgstr "Ετικέτα (Python)"

#. (itstool) path: info/desc
#: C/label.py.page:27
msgid "A widget that displays a small to medium amount of text"
msgstr ""
"Ένα γραφικό στοιχείο που εμφανίζει μια μικρή έως μεσαία ποσότητα κειμένου"

#. (itstool) path: section/p
#: C/label.py.page:41
msgid ""
"Another way to obtain what we have in the example is to create the label as "
"an instance of another class and add it to the instance of <code>MyWindow</"
"code> in the <code>do_activate(self)</code> method:"
msgstr ""
"Ένας άλλος τρόπος για να πάρετε ότι έχουμε στο παράδειγμα είναι η δημιουργία "
"της ετικέτας ως ένα στιγμιότυπο μιας άλλης κλάσης και προσθήκη του στο "
"στιγμιότυπο του <code>MyWindow</code> στη μέθοδο <code>do_activate(self)</"
"code>:"

#. (itstool) path: note/p
#: C/label.py.page:43
msgid ""
"The highlighted lines indicate code that is different from the previous "
"snippet."
msgstr ""
"Οι γραμμές που έχουν επισημανθεί υποδεικνύουν των κώδικα που είναι "
"διαφορετικός από το προηγούμενο απόσπασμα κώδικα"

#. (itstool) path: section/code
#: C/label.py.page:45
#, no-wrap
msgid ""
"\n"
"# a class to define a window\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(200, 100)\n"
"\n"
"# a class to define a label\n"
"<hi>\n"
"class MyLabel(Gtk.Label):\n"
"    def __init__(self):\n"
"        Gtk.Label.__init__(self)\n"
"        self.set_text(\"Hello GNOME!\")\n"
"</hi>\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        # create an instance of MyWindow\n"
"        win = MyWindow(self)\n"
"\n"
"        # create an instance of MyLabel\n"
"<hi>\n"
"        label = MyLabel()\n"
"</hi>\n"
"        # and add it to the window\n"
"<hi>\n"
"        win.add(label)\n"
"</hi>\n"
"        # show the window and everything on it\n"
"        win.show_all()"
msgstr ""
"\n"
"# a class to define a window\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(200, 100)\n"
"\n"
"# a class to define a label\n"
"<hi>\n"
"class MyLabel(Gtk.Label):\n"
"    def __init__(self):\n"
"        Gtk.Label.__init__(self)\n"
"        self.set_text(\"Hello GNOME!\")\n"
"</hi>\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        # create an instance of MyWindow\n"
"        win = MyWindow(self)\n"
"\n"
"        # create an instance of MyLabel\n"
"<hi>\n"
"        label = MyLabel()\n"
"</hi>\n"
"        # and add it to the window\n"
"<hi>\n"
"        win.add(label)\n"
"</hi>\n"
"        # show the window and everything on it\n"
"        win.show_all()"

#. (itstool) path: section/title
#: C/label.py.page:82
msgid "Useful methods for a Label widget"
msgstr "Χρήσιμες μέθοδοι για γραφικά στοιχεία ετικέτας"

#. (itstool) path: note/p
#: C/label.py.page:85
msgid ""
"An explanation of how to work with strings in GTK+ can be found in <link "
"xref=\"strings.py\"/>."
msgstr ""
"Μια εξήγηση πώς να δουλέψετε με τις συμβολοσειρές σε GTK+ μπορεί να βρεθεί "
"στο <link xref=\"strings.py\"/>."

#. (itstool) path: item/p
#: C/label.py.page:89
msgid ""
"<code>set_line_wrap(True)</code> breaks lines if the text of the label "
"exceeds the size of the widget."
msgstr ""
"Το <code>set_line_wrap(True)</code> σπάει τις γραμμές εάν το κείμενο της "
"ετικέτας υπερβαίνει το μέγεθος του γραφικού στοιχείου."

#. (itstool) path: item/p
#: C/label.py.page:90
msgid ""
"<code>set_justify(Gtk.Justification.LEFT)</code> (or <code>Gtk.Justification."
"RIGHT, Gtk.Justification.CENTER, Gtk.Justification.FILL</code>) sets the "
"alignment of the lines in the text of the label relative to each other. The "
"method has no effect on a single-line label."
msgstr ""
"Το <code>set_justify(Gtk.Justification.LEFT)</code> (ή <code>Gtk."
"Justification.RIGHT, Gtk.Justification.CENTER, Gtk.Justification.FILL</"
"code>) ορίζει τη στοίχιση των γραμμών στο κείμενο της ετικέτας συγκρινόμενες "
"μεταξύ τους. Η μέθοδος δεν έχει αποτέλεσμα σε ετικέτα μοναδικής γραμμής."

#. (itstool) path: item/p
#: C/label.py.page:91
msgid ""
"For decorated text we can use <code>set_markup(\"text\")</code>, where <code>"
"\"text\"</code> is a text in the <link href=\"http://developer.gnome.org/"
"pango/stable/PangoMarkupFormat.html\">Pango Markup Language</link>. An "
"example:"
msgstr ""
"Για διακοσμημένο κείμενο μπορούμε να χρησιμοποιήσουμε το "
"<code>set_markup(\"text\")</code>, where <code>\"text\"</code> που είναι "
"κείμενο στη <link href=\"http://developer.gnome.org/pango/stable/"
"PangoMarkupFormat.html\">γλώσσα σήμανσης Pango</link>. Ένα παράδειγμα:"

#. (itstool) path: item/code
#: C/label.py.page:92
#, no-wrap
msgid ""
"\n"
"label.set_markup(\"Text can be &lt;small&gt;small&lt;/small&gt;, &lt;big&gt;big&lt;/big&gt;, \"\n"
"                 \"&lt;b&gt;bold&lt;/b&gt;, &lt;i&gt;italic&lt;/i&gt; and even point to somewhere \"\n"
"                 \"in the &lt;a href=\\\"http://www.gtk.org\\\" \"\n"
"                 \"title=\\\"Click to find out more\\\"&gt;internets&lt;/a&gt;.\")"
msgstr ""
"\n"
"label.set_markup(\"Text can be &lt;small&gt;small&lt;/small&gt;, &lt;big&gt;big&lt;/big&gt;, \"\n"
"                 \"&lt;b&gt;bold&lt;/b&gt;, &lt;i&gt;italic&lt;/i&gt; and even point to somewhere \"\n"
"                 \"in the &lt;a href=\\\"http://www.gtk.org\\\" \"\n"
"                 \"title=\\\"Click to find out more\\\"&gt;internets&lt;/a&gt;.\")"

#. (itstool) path: info/title
#: C/label.vala.page:8
msgctxt "text"
msgid "Label (Vala)"
msgstr "Ετικέτα (Vala)"

#. (itstool) path: page/code
#: C/label.vala.page:25
#, no-wrap
msgid ""
"\n"
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Welcome to GNOME\");\n"
"\n"
"\t\tvar label = new Gtk.Label (\"Hello GNOME!\");\n"
"\n"
"\t\tthis.add (label);\n"
"\t\tthis.set_default_size (200, 100);\n"
"\t\tthis.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"\n"
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Welcome to GNOME\");\n"
"\n"
"\t\tvar label = new Gtk.Label (\"Hello GNOME!\");\n"
"\n"
"\t\tthis.add (label);\n"
"\t\tthis.set_default_size (200, 100);\n"
"\t\tthis.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: info/desc
#: C/license.page:8
msgid "Legal information."
msgstr "Νομικές πληροφορίες."

#. (itstool) path: page/title
#: C/license.page:11
msgid "License"
msgstr "Άδεια"

#. (itstool) path: page/p
#: C/license.page:12
msgid ""
"This work is distributed under a CreativeCommons Attribution-Share Alike 3.0 "
"Unported license."
msgstr ""
"Το έργο αυτό διανέμεται υπό την άδεια CreativeCommons Attribution-Share "
"Alike 3.0 Unported."

#. (itstool) path: page/p
#: C/license.page:20
msgid "You are free:"
msgstr "Είσαστε ελεύθεροι:"

#. (itstool) path: item/title
#: C/license.page:25
msgid "<em>To share</em>"
msgstr "<em>Να μοιραστείτε</em>"

#. (itstool) path: item/p
#: C/license.page:26
msgid "To copy, distribute and transmit the work."
msgstr "Να αντιγράψετε, να διανείμετε και να μεταφέρετε την εργασία."

#. (itstool) path: item/title
#: C/license.page:29
msgid "<em>To remix</em>"
msgstr "<em>Να τροποποιήσετε</em>"

#. (itstool) path: item/p
#: C/license.page:30
msgid "To adapt the work."
msgstr "Να προσαρμόσετε την εργασία."

#. (itstool) path: page/p
#: C/license.page:33
msgid "Under the following conditions:"
msgstr "Κάτω από τους ακόλουθους όρους:"

#. (itstool) path: item/title
#: C/license.page:38
msgid "<em>Attribution</em>"
msgstr "<em>Απόδοση</em>"

#. (itstool) path: item/p
#: C/license.page:39
msgid ""
"You must attribute the work in the manner specified by the author or "
"licensor (but not in any way that suggests that they endorse you or your use "
"of the work)."
msgstr ""
"Πρέπει να αποδώσετε την εργασία κατά τον καθορισμένο τρόπο από τον συγγραφέα "
"ή αδειοδότη (αλλά όχι με οποιοδήποτε τρόπο που προτείνει ότι υποστηρίζουν "
"εσάς ή τη χρήση της εργασίας)."

#. (itstool) path: item/title
#: C/license.page:46
msgid "<em>Share Alike</em>"
msgstr "<em>Παρόμοια διανομή</em>"

#. (itstool) path: item/p
#: C/license.page:47
msgid ""
"If you alter, transform, or build upon this work, you may distribute the "
"resulting work only under the same, similar or a compatible license."
msgstr ""
"Εάν αλλάξετε, μετασχηματίσετε ή δημιουργήσετε με βάση αυτήν την εργασία, "
"μπορείτε να διανείμετε την τελική εργασία κάτω από την ίδια, παρόμοια ή "
"συμβατή άδεια."

#. (itstool) path: page/p
#: C/license.page:53
msgid ""
"For the full text of the license, see the <link href=\"http://"
"creativecommons.org/licenses/by-sa/3.0/legalcode\">CreativeCommons website</"
"link>, or read the full <link href=\"http://creativecommons.org/licenses/by-"
"sa/3.0/\">Commons Deed</link>."
msgstr ""
"Για το πλήρες κείμενο της άδειας, δείτε τον <link href=\"http://"
"creativecommons.org/licenses/by-sa/3.0/legalcode\">ιστότοπο CreativeCommons</"
"link>, ή διαβάστε όλη την <link href=\"http://creativecommons.org/licenses/"
"by-sa/3.0/\">Πράξη Commons</link>."

#. (itstool) path: note/p
#: C/license.page:60
msgid ""
"As a special exception, the copyright holders give you permission to copy, "
"modify, and distribute the example code contained in this documentation "
"under the terms of your choosing, without restriction."
msgstr ""
"Ως ειδική εξαίρεση, οι πνευματικοί ιδιοκτήτες σας επιτρέπουν να αντιγράψετε, "
"να τροποποιήσετε και να διανείμετε τα παραδείγματα κώδικα που "
"περιλαμβάνονται σ' αυτήν την τεκμηρίωση υπό τους όρους της επιλογής σας, "
"χωρίς περιορισμό."

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/linkbutton.c.page:23 C/linkbutton.js.page:22 C/linkbutton.py.page:24
#: C/linkbutton.vala.page:22
msgctxt "_"
msgid ""
"external ref='media/linkbutton.png' md5='3712eae8953e87c65a6aa74503b8e32b'"
msgstr ""
"external ref='media/linkbutton.png' md5='3712eae8953e87c65a6aa74503b8e32b'"

#. (itstool) path: info/title
#: C/linkbutton.c.page:8
msgctxt "text"
msgid "LinkButton (C)"
msgstr "LinkButton (C)"

#. (itstool) path: info/desc
#: C/linkbutton.c.page:18 C/linkbutton.vala.page:18
msgid "Create buttons bound to a URL"
msgstr "Δημιουργία κουμπιών δεσμευμένων σε μια URL"

#. (itstool) path: page/title
#: C/linkbutton.c.page:21 C/linkbutton.js.page:21 C/linkbutton.py.page:22
#: C/linkbutton.vala.page:21
msgid "LinkButton"
msgstr "LinkButton"

#. (itstool) path: page/p
#: C/linkbutton.c.page:24
msgid "This button links to the GNOME live webpage."
msgstr "Αυτό το κουμπί συνδέει με την ιστοσελίδα του GNOME."

#. (itstool) path: page/code
#: C/linkbutton.c.page:26
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *linkbutton;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"GNOME LinkButton\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 250, 50);\n"
"\n"
"  linkbutton = gtk_link_button_new (\"Link to GNOME live!\");\n"
"  gtk_link_button_set_uri (GTK_LINK_BUTTON(linkbutton), \"http://live.gnome.org\");\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (linkbutton));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *linkbutton;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"GNOME LinkButton\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 250, 50);\n"
"\n"
"  linkbutton = gtk_link_button_new (\"Link to GNOME live!\");\n"
"  gtk_link_button_set_uri (GTK_LINK_BUTTON(linkbutton), \"http://live.gnome.org\");\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (linkbutton));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/linkbutton.c.page:34
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkLinkButton.html"
"\">GtkLinkButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkLinkButton.html"
"\">GtkLinkButton</link>"

#. (itstool) path: info/title
#: C/linkbutton.js.page:8
msgctxt "text"
msgid "LinkButton (JavaScript)"
msgstr "LinkButton (JavaScript)"

#. (itstool) path: info/desc
#: C/linkbutton.js.page:18
msgid "A button that links to a web page"
msgstr "Ένα κουμπί που συνδέει σε ιστοσελίδα"

#. (itstool) path: page/p
#: C/linkbutton.js.page:23
msgid "A button that links to live.gnome.org."
msgstr "Ένα κουμπί που συνδέει με το live.gnome.org."

#. (itstool) path: page/code
#: C/linkbutton.js.page:25
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const LinkButtonExample = new Lang.Class ({\n"
"    Name: 'LinkButton Example',\n"
"\n"
"    // Create the application itself\n"
"        _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"              application_id: 'org.example.jslinkbutton',\n"
"              flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"         });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"    this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                 window_position: Gtk.WindowPosition.CENTER,\n"
"                                                 title: \"GNOME LinkButton\",\n"
"                                                 default_height: 50,\n"
"                                                 default_width: 250 });\n"
"\n"
"        // Create the LinkButton and have it link to live.gnome.org\n"
"        this.LinkButton = new Gtk.LinkButton ({label: \"Link to GNOME live!\",\n"
"                               uri: \"http://live.gnome.org\"});\n"
"        this._window.add (this.LinkButton);\n"
"\n"
"    // Show the window and all child widgets\n"
"    this._window.show_all();\n"
"    },\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new LinkButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const LinkButtonExample = new Lang.Class ({\n"
"    Name: 'LinkButton Example',\n"
"\n"
"    // Δημιουργία αυτής καθεαυτής της εφαρμογής\n"
"        _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"              application_id: 'org.example.jslinkbutton',\n"
"              flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"         });\n"
"\n"
"    // Σύνδεση σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' αρχικοποιεί μενού και δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function () {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"    this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                 window_position: Gtk.WindowPosition.CENTER,\n"
"                                                 title: \"GNOME LinkButton\",\n"
"                                                 default_height: 50,\n"
"                                                 default_width: 250 });\n"
"\n"
"        // Δημιουργία του κουμπιού συνδέσμου και σύνδεσή του με το live.gnome.org\n"
"        this.LinkButton = new Gtk.LinkButton ({label: \"Link to GNOME live!\",\n"
"                               uri: \"http://live.gnome.org\"});\n"
"        this._window.add (this.LinkButton);\n"
"\n"
"    // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"    this._window.show_all();\n"
"    },\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new LinkButtonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/linkbutton.js.page:32
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.LinkButton."
"html\">Gtk.LinkButton</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.LinkButton."
"html\">Gtk.LinkButton</link>"

#. (itstool) path: info/title
#: C/linkbutton.py.page:8
msgctxt "text"
msgid "LinkButton (Python)"
msgstr "LinkButton (Python)"

#. (itstool) path: info/desc
#: C/linkbutton.py.page:19
msgid "A button bound to an URL"
msgstr "Ένα κουμπί δεσμευμένο σε μια διεύθυνση (URL)"

#. (itstool) path: page/p
#: C/linkbutton.py.page:25
msgid "A button that links to a web page."
msgstr "Ένα κουμπί που συνδέει σε ιστοσελίδα."

#. (itstool) path: section/code
#: C/linkbutton.py.page:32
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GNOME LinkButton\", application=app)\n"
"        self.set_default_size(250, 50)\n"
"\n"
"        # a linkbutton pointing to the given URI\n"
"        button = Gtk.LinkButton(uri=\"http://live.gnome.org\")\n"
"        # with given text\n"
"        button.set_label(\"Link to GNOME live!\")\n"
"\n"
"        # add the button to the window\n"
"        self.add(button)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GNOME LinkButton\", application=app)\n"
"        self.set_default_size(250, 50)\n"
"\n"
"        # a linkbutton pointing to the given URI\n"
"        button = Gtk.LinkButton(uri=\"http://live.gnome.org\")\n"
"        # with given text\n"
"        button.set_label(\"Link to GNOME live!\")\n"
"\n"
"        # add the button to the window\n"
"        self.add(button)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/linkbutton.py.page:36
msgid "Useful methods for a LinkButton widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο LinkButton"

#. (itstool) path: item/p
#: C/linkbutton.py.page:38
msgid ""
"<code>get_visited()</code> returns the 'visited' state (<code>True</code> or "
"<code>False</code>) of the URI where the LinkButton points. The button "
"becomes visited when it is clicked."
msgstr ""
"<code>get_visited()</code> επιστρέφει την κατάσταση 'visited' (<code>True</"
"code> ή <code>False</code>) του URI όπου τα σημεία LinkButton. Το κουμπί "
"γίνεται αναγνωσμένο όταν πατιέται."

#. (itstool) path: item/p
#: C/linkbutton.py.page:39
msgid ""
"<code>set_visited(True)</code> sets the 'visited' state of the URI where the "
"LinkButton points as <code>True</code> (analogously for <code>False</code>)."
msgstr ""
"<code>set_visited(True)</code> ορίζει την κατάσταση 'visited' του URI όπου "
"τα σημεία LinkButton ως <code>True</code> (ανάλογα για <code>False</code>)."

#. (itstool) path: item/p
#: C/linkbutton.py.page:40
msgid ""
"Each time the button is clicked, the signal <code>\"activate-link\"</code> "
"is emitted. For an explanation of signals and callback functions, see <link "
"xref=\"signals-callbacks.py\"/>."
msgstr ""
"Κάθε φορά που το κουμπί πατιέται, το σήμα <code>\"activate-link\"</code> "
"εκπέμπεται. Για μια εξήγηση των σημάτων και των συναρτήσεων επανάκλησης, "
"δείτε <link xref=\"signals-callbacks.py\"/>."

#. (itstool) path: item/p
#: C/linkbutton.py.page:48
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkLinkButton.html"
"\">GtkLinkButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkLinkButton.html"
"\">GtkLinkButton</link>"

#. (itstool) path: info/title
#: C/linkbutton.vala.page:8
msgctxt "text"
msgid "LinkButton (Vala)"
msgstr "LinkButton (Vala)"

#. (itstool) path: page/p
#: C/linkbutton.vala.page:23
msgid "This button links to GNOME live."
msgstr "Αυτό το κουμπί συνδέει με το ζωντανό GNOME."

#. (itstool) path: page/code
#: C/linkbutton.vala.page:25
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create the window of this application and child widget and show all the things. */\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.set_default_size (250, 50);\n"
"\t\twindow.title = \"GNOME LinkButton\";\n"
"\n"
"\t\tvar linkbutton = new Gtk.LinkButton.with_label (\"http://live.gnome.org\", \"Link to GNOME live!\");\n"
"\n"
"\t\twindow.add (linkbutton);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* Αυτή είναι η εφαρμογή. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Αντικατάσταση τιυ σήματος 'activate' της GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Δημιουργία του παραθύρου αυτής της εφαρμογής  και των θυγατρικών γραφικών στοιχείων και εμφάνιση όλων. */\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.set_default_size (250, 50);\n"
"\t\twindow.title = \"GNOME LinkButton\";\n"
"\n"
"\t\tvar linkbutton = new Gtk.LinkButton.with_label (\"http://live.gnome.org\", \"Link to GNOME live!\");\n"
"\n"
"\t\twindow.add (linkbutton);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* Η κύρια δημιουργεί και εκτελεί την εφαρμογή . */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/linkbutton.vala.page:30
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.LinkButton.html\">Gtk."
"LinkButton</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.LinkButton.html\">Gtk."
"LinkButton</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/magic-mirror.vala.page:47
msgctxt "_"
msgid ""
"external ref='media/magic-mirror.png' md5='8171faea6ed3b6ddac0da084c29e4e22'"
msgstr ""
"external ref='media/magic-mirror.png' md5='8171faea6ed3b6ddac0da084c29e4e22'"

#. (itstool) path: info/title
#: C/magic-mirror.vala.page:8
msgctxt "text"
msgid "Magic mirror (Vala)"
msgstr "Μαγικός καθρέπτης (Vala)"

#. (itstool) path: info/desc
#: C/magic-mirror.vala.page:11
msgid "Use your webcam as a mirror using the GStreamer framework and GTK+"
msgstr ""
"Χρήση της κάμερας σας ως καθρέφτη χρησιμοποιώντας τον σκελετό GStreamer και "
"GTK+"

#. (itstool) path: credit/name
#: C/magic-mirror.vala.page:15
msgid "Daniel G. Siegel"
msgstr "Daniel G. Siegel"

#. (itstool) path: page/title
#: C/magic-mirror.vala.page:29
msgid "Magic mirror"
msgstr "Μαγικός καθρέπτης"

#. (itstool) path: synopsis/p
#: C/magic-mirror.vala.page:32
msgid ""
"<em>Your mirror just fell off the wall and broke into a thousand pieces — "
"but you need a mirror to shave your beard off or add some makeup! You only "
"have 15 minutes left before catching the bus to work. So what can you do?</"
"em>"
msgstr ""
"<em>Ο καθρέφτης σας μόλις έπεσε από τον τοίχο και έσπασε σε χίλια κομμάτια - "
"αλλά χρειάζεται ένας καθρέπτης να ξυρίσετε τη γενειάδα σας και να προσθέσετε "
"κάποια καλλυντικά! Σας απομένουν 15 λεπτά πριν να προλάβετε το λεωφορείο για "
"τη δουλειά. Τι μπορείτε να κάνετε;</em>"

#. (itstool) path: synopsis/p
#: C/magic-mirror.vala.page:33
msgid ""
"In this tutorial, we're going to make a program which lets you use your "
"webcam as a mirror. You will learn how to:"
msgstr ""
"Σε αυτόν τον οδηγό, θα φτιάξουμε ένα πρόγραμμα που επιτρέπει τη χρήση της "
"ιστοκάμεράς σας ως καθρέπτη. Θα μάθετε πώς να:"

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:35
msgid "Create a GTK+ application"
msgstr "Δημιουργήσετε μια εφαρμογή σε GTK+"

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:36
msgid "Access your webcam using GStreamer and embed the result into a window"
msgstr ""
"Έχετε πρόσβαση στην ιστοκάμερά σας χρησιμοποιώντας GStreamer και πως να "
"ενσωματώνετε το αποτέλεσμα σε ένα παράθυρο"

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:37
msgid "Grab photos off your webcam"
msgstr "Πάρετε φωτογραφίες με την ιστοκάμεράς σας"

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:42
msgid "Installed copies of GTK, GStreamer, and a Vala compiler"
msgstr "Εγκατεστημένα αντίγραφα του GTK, GStreamer και ένα μεταγλωττιστή Vala"

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:43
msgid "Basic knowledge of an object-oriented programming language"
msgstr "Βασική γνώση μιας αντικειμενοστραφούς γλώσσας προγραμματισμού"

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:57
msgid ""
"Choose <gui>GTK+ (simple)</gui> from the <gui>Vala</gui> tab, click "
"<gui>Forward</gui>, and fill out your details on the next few pages. Use "
"<file>guitar-tuner</file> as project name and directory."
msgstr ""
"Επιλέξτε <gui>GTK+ (απλό)</gui> από την καρτέλα <gui>Vala</gui>, πατήστε "
"<gui>μπροστά</gui> και συμπληρώστε τις λεπτομέρειές σας στις επόμενες λίγες "
"σελίδες. Χρησιμοποιήστε ως όνομα του έργου και του καταλόγου το <file>guitar-"
"tuner</file>."

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:60
msgid ""
"Disable <gui>Use GtkBuilder for user interface</gui> as we will create the "
"UI manually in this tutorial. Check the <link xref=\"guitar-tuner.vala"
"\">Guitar-Tuner</link> tutorial using the interface builder."
msgstr ""
"Απενεργοποιήστε το <gui>Χρήση του GtkBuilder για διεπαφή χρήση</gui> επειδή "
"θα φτιάξουμε τη διεπαφή χρήστη χειροκίνητα σε αυτό το παράδειγμα. Σημειώστε "
"το μάθημα <link xref=\"guitar-tuner.vala\">ρυθμιστής κιθάρας</link> "
"χρησιμοποιώντας τον κατασκευαστή διεπαφής."

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:65
msgid ""
"Make sure that <gui>Configure external packages</gui> is selected. On the "
"next page, select <em>gstreamer-0.10</em> from the list to include the "
"<app>GStreamer</app> library into your project."
msgstr ""
"Βεβαιωθείτε ότι το <gui>ρύθμιση εξωτερικών πακέτων</gui> επιλέχτηκε. Στην "
"επόμενη σελίδα, επιλέξτε <em>gstreamer-0.10</em> από τη λίστα για "
"συμπερίληψη της βιβλιοθήκης <app>GStreamer</app> στο έργο σας."

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:69
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. Open "
"<file>src/magic_mirror.vala</file> from the <gui>Project</gui> or <gui>File</"
"gui> tabs. You should see some code which starts with the lines:"
msgstr ""
"Πατήστε <gui>εφαρμογή</gui> και το έργο θα δημιουργηθεί. Ανοίξτε <file>src/"
"magic_mirror.vala</file> από τις καρτέλες <gui>έργο</gui> ή <gui>αρχείο</"
"gui>. Θα πρέπει να δείτε κάποιο κώδικα που ξεκινά με τις γραμμές:"

#. (itstool) path: section/p
#: C/magic-mirror.vala.page:79
msgid ""
"The code loads an (empty) window and shows it. More details are given below; "
"skip this list if you understand the basics:"
msgstr ""
"Ο κώδικας φορτώνει ένα (κενό) παράθυρο και το εμφανίζει. Περισσότερες "
"πληροφορίες υπάρχουν πιο κάτω· προσπεράστε αυτή τη λίστα αν καταλαβαίνετε τα "
"βασικά:"

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:85
msgid ""
"The constructor of the <code>Main</code> class creates a new window and sets "
"its title. Afterwards the window is shown and a signal is connected which "
"quits the application if the window is closed. More on signals later on."
msgstr ""
"Ο κατασκευαστής της κλάσης <code>Main</code> δημιουργεί ένα νέο παράθυρο και "
"ορίζει τον τίτλο του. Κατόπιν εμφανίζεται το παράθυρο και ένα σήμα συνδέεται "
"που εγκαταλείπει την εφαρμογή, εάν το παράθυρο κλείσει. Περισσότερα για τα "
"σήματα αργότερα."

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:89
msgid ""
"The static <code>main</code> function is run by default when you start a "
"Vala application. It calls a few functions which create the Main class, set "
"up and then run the application. The <code>Gtk.Main</code> function starts "
"the GTK main loop, which runs the user interface and starts listening for "
"events (like clicks and key presses)."
msgstr ""
"Η στατική συνάρτηση <code>main</code> τρέχει από προεπιλογή όταν ξεκινάτε "
"μια εφαρμογή Vala. Καλεί λίγες συναρτήσεις που δημιουργούν την κύρια κλάση, "
"ρυθμίζουν και έπειτα εκτελούν την εφαρμογή. Η συνάρτηση <code>Gtk.Main</"
"code> ξεκινά τον κύριο βρόχο του GTK, που εκτελεί τη διεπαφή χρήστη και "
"ξεκινά την ακρόαση για συμβάντα (όπως κλικ και πατήματα πλήκτρου)."

#. (itstool) path: section/title
#: C/magic-mirror.vala.page:98
msgid "Access the webcam video stream with GStreamer"
msgstr "Πρόσβαση στη ροή βίντεο της κάμερας web με το GStreamer"

#. (itstool) path: section/p
#: C/magic-mirror.vala.page:99
msgid ""
"The GStreamer multimedia framework is able to handle video from webcams. "
"Let's add GStreamer to our application and so we can access the video stream."
msgstr ""
"Ο σκελετός πολυμέσων GStreamer είναι ικανός στο χειρισμό βίντεο από "
"ιστοκάμερες. Ας προσθέσουμε το GStreamer στην εφαρμογή μας και έτσι μπορούμε "
"να προσπελάσουμε το ρεύμα βίντεο."

#. (itstool) path: section/code
#: C/magic-mirror.vala.page:101
#, no-wrap
msgid ""
"\n"
"using GLib;\n"
"using Gtk;\n"
"\n"
"public class Main : Object\n"
"{\n"
"\tprivate Gst.Element camerabin;\n"
"\n"
"\tpublic Main () {\n"
"\t\tthis.camerabin = Gst.ElementFactory.make (\"camerabin\", \"camera\");\n"
"\t\tthis.camerabin.set_state (Gst.State.PLAYING);\n"
"\t}\n"
"\n"
"\tstatic int main (string[] args) {\n"
"\t\tGtk.init (ref args);\n"
"\t\tGst.init (ref args);\n"
"\t\tvar app = new Main ();\n"
"\n"
"\t\tGtk.main ();\n"
"\n"
"\t\treturn 0;\n"
"\t}\n"
"}\n"
msgstr ""
"\n"
"using GLib;\n"
"using Gtk;\n"
"\n"
"public class Main : Object\n"
"{\n"
"\tprivate Gst.Element camerabin;\n"
"\n"
"\tpublic Main () {\n"
"\t\tthis.camerabin = Gst.ElementFactory.make (\"camerabin\", \"camera\");\n"
"\t\tthis.camerabin.set_state (Gst.State.PLAYING);\n"
"\t}\n"
"\n"
"\tstatic int main (string[] args) {\n"
"\t\tGtk.init (ref args);\n"
"\t\tGst.init (ref args);\n"
"\t\tvar app = new Main ();\n"
"\n"
"\t\tGtk.main ();\n"
"\n"
"\t\treturn 0;\n"
"\t}\n"
"}\n"

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:126
msgid ""
"First we remove the window we created before because GStreamer will take "
"care of showing the picture on screen."
msgstr ""
"Πρώτα ας αφαιρέσουμε το παράθυρο που δημιουργήσαμε πριν επειδή το GStreamer "
"θα φροντίσει την εμφάνιση της εικόνας στην οθόνη."

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:130
msgid ""
"Now we are creating a GStreamer element which accesses our webcam. We are "
"using the Camerabin element, which is an all-in-one camera element and is "
"capable of taking photos, videos, applying effects and much more. Perfect "
"for our use case! With <code>this.camerabin.set_state (Gst.State.PLAYING)</"
"code> we tell the GStreamer pipeline we just created to start playing. Easy, "
"no?"
msgstr ""
"Τώρα δημιουργούμε ένα στοιχείο GStreamer που προσπελάζει την ιστοκάμερά μας. "
"Χρησιμοποιούμε το στοιχείο Camerabin, που είναι ένα στοιχείο κάμερας όλα σε "
"ένα και μπορεί να παίρνει φωτογραφίες, βίντεο να εφαρμόζει εφέ και πολύ "
"περισσότερα. Τέλειο για την περίπτωση χρήσης μας! Με τον <code>this."
"camerabin.set_state (Gst.State.PLAYING)</code> λέμε στη διοχέτευση GStreamer "
"που μόλις δημιουργήσαμε να ξεκινήσει το παίξιμο. Δεν είναι εύκολο;"

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:137
msgid ""
"Of course it is also possible to integrate the video more tighly into other "
"windows but that is an advanced topic that includes some details of the X "
"Window System we will omit here."
msgstr ""
"Φυσικά είναι επίσης δυνατό να ενσωματώσουμε το βίντεο πιο σφικτά στα άλλα "
"παράθυρα, αλλά αυτό είναι προχωρημένο θέμα που περιλαμβάνει μερικές "
"λεπτομέρειες του συστήματος παραθύρου Χ που θα παραλείψουμε εδώ."

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:141
msgid ""
"Compile and run it again. You will end up with two windows. In the next step "
"we will integrate the video into the GTK+ window."
msgstr ""
"Μεταγλώττιση και τρέξιμο του πάλι. Θα καταλήξετε με δύο παράθυρα. Στο "
"επόμενο βήμα θα ενσωματώσουμε το βίντεο στο παράθυρο GTK+."

#. (itstool) path: section/p
#: C/magic-mirror.vala.page:151
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"magic-mirror/magic-mirror.vala\">reference code</link>. There "
"is also a more <link href=\"magic-mirror/magic-mirror-advanced.vala"
"\">extensive implementation</link> that embeds the window into a regular Gtk."
"Window which involves some advanced techniques, and adds buttons to start/"
"stop the picture."
msgstr ""
"Εάν έχετε προβλήματα με το μάθημα, συγκρίνετε τον κώδικά σας με αυτόν τον "
"<link href=\"magic-mirror/magic-mirror.vala\">κώδικα αναφοράς</link>. "
"Υπάρχει επίσης μια πιο <link href=\"magic-mirror/magic-mirror-advanced.vala"
"\">εκτεταμένη υλοποίηση</link> που ενσωματώνει το παράθυρο σε ένα κανονικό "
"Gtk.Window που εμπεριέχει μερικές προχωρημένες τεχνικές και προσθέτει "
"κουμπιά για έναρξη/σταμάτημα της εικόνας."

#. (itstool) path: section/p
#: C/magic-mirror.vala.page:158
msgid ""
"To find out more about the Vala programming language you might want to check "
"out the <link href=\"http://live.gnome.org/Vala/Tutorial\">Vala Tutorial</"
"link>."
msgstr ""
"Για να βρείτε περισσότερα για τη γλώσσα προγραμματισμού Vala ίσως θέλετε να "
"ελέγξετε το <link href=\"http://live.gnome.org/Vala/Tutorial\">μάθημα Vala</"
"link>."

#. (itstool) path: section/title
#: C/magic-mirror.vala.page:163
msgid "Conclusion"
msgstr "Συμπέρασμα"

#. (itstool) path: section/p
#: C/magic-mirror.vala.page:164
msgid ""
"That's it, you have managed to create a full-featured webcam photo "
"application in 15 minutes. Now you can shave your beard off or add some "
"makeup to your beautiful face, right before having a beautiful day at your "
"workplace, where you can impress your friends and colleagues with an awesome "
"application you just made in 15 minutes."
msgstr ""
"Αυτό είναι, κατορθώσατε να δημιουργήσετε μια πλήρη εφαρμογή φωτογραφίας "
"ιστοκάμερας σε 15 λεπτά. Τώρα μπορείτε να ξυριστείτε ή να προσθέσετε "
"καλλυντικά στο όμορφό σας πρόσωπο, ακριβώς πριν να έχετε μια όμορφη ημέρα "
"στη δουλειά σας, όπου μπορείτε να εντυπωσιάσετε τους φίλους σας και "
"συναδέλφους σας με μια φοβερή εφαρμογή που μόλις κάνατε σε 15 λεπτά."

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/menubar.c.page:25 C/menubar.py.page:29 C/menubar.vala.page:24
msgctxt "_"
msgid "external ref='media/menubar.png' md5='7b642aaa1628d5e43ab85ac230ac1c78'"
msgstr ""
"external ref='media/menubar.png' md5='7b642aaa1628d5e43ab85ac230ac1c78'"

#. (itstool) path: info/title
#: C/menubar.c.page:8
msgctxt "text"
msgid "MenuBar (C)"
msgstr "Γραμμή μενού (C)"

#. (itstool) path: info/desc
#: C/menubar.c.page:20 C/menubar.py.page:25 C/menubar.vala.page:20
msgid "A widget which holds GtkMenuItem widgets"
msgstr "Ένα γραφικό στοιχείο που κρατά γραφικά στοιχεία GtkMenuItem"

#. (itstool) path: page/title
#: C/menubar.c.page:23 C/menubar.vala.page:23
msgid "MenuBar"
msgstr "MenuBar"

#. (itstool) path: page/p
#: C/menubar.c.page:26 C/menubar.py.page:30 C/menubar.vala.page:25
msgid "A MenuBar created using XML and GtkBuilder."
msgstr "Μια γραμμή εργαλείων δημιουργήθηκε χρησιμοποιώντας XML και GtkBuilder."

#. (itstool) path: note/p
#: C/menubar.c.page:27
msgid ""
"For a more in-depth look at this sample, please do not hesitate to check out "
"the <link xref=\"menubar.vala\">Vala MenuBar</link> and/or <link xref="
"\"menubar.py\">Python MenuBar</link> tutorials."
msgstr ""
"Για μια πιο βαθιά ματιά σε αυτό το δείγμα, παρακαλώ μην διστάσετε να "
"κοιτάξετε το <link xref=\"menubar.vala\">γραμμή μενού Vala</link> και/ή τα "
"μαθήματα <link xref=\"menubar.py\">γραμμή μενού Python</link>."

#. (itstool) path: page/code
#: C/menubar.c.page:31
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"copy\" action */\n"
"static void\n"
"copy_callback (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   g_print (\"\\\"Copy\\\" activated\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"paste\" action */\n"
"static void\n"
"paste_callback (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   g_print (\"\\\"Paste\\\" activated\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"shape\" action */\n"
"static void\n"
"shape_callback (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   /* We first gather the value of the GVariant instance with a string type.\n"
"    * The overall goal here is to see if shape is set to line, triangle, etc,\n"
"    * and put that value within the variable \"answer\".\n"
"    */\n"
"   const gchar *answer = g_variant_get_string (parameter, NULL);\n"
"   g_printf (\"Shape is set to %s.\\n\", answer);\n"
"   /* Note that we set the state of the action */\n"
"   g_simple_action_set_state (simple, parameter);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function in which closes the about_dialog created below */\n"
"static void\n"
"on_close (GtkDialog *dialog,\n"
"          gint       response_id,\n"
"          gpointer   user_data)\n"
"{\n"
"  gtk_widget_destroy (GTK_WIDGET (dialog));\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the about action (see aboutdialog.c example) */\n"
"static void\n"
"about_callback (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   GtkWidget *about_dialog;\n"
"\n"
"   about_dialog = gtk_about_dialog_new ();\n"
"\n"
"   const gchar *authors[] = {\"GNOME Documentation Team\", NULL};\n"
"   const gchar *documenters[] = {\"GNOME Documentation Team\", NULL};\n"
"\n"
"   /* Fill in the about_dialog with the desired information */\n"
"   gtk_about_dialog_set_program_name (GTK_ABOUT_DIALOG (about_dialog), \"AboutDialog Example\");\n"
"   gtk_about_dialog_set_copyright (GTK_ABOUT_DIALOG (about_dialog), \"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\");\n"
"   gtk_about_dialog_set_authors (GTK_ABOUT_DIALOG (about_dialog), authors);\n"
"   gtk_about_dialog_set_documenters (GTK_ABOUT_DIALOG (about_dialog), documenters);\n"
"   gtk_about_dialog_set_website_label (GTK_ABOUT_DIALOG (about_dialog), \"GNOME Developer Website\");\n"
"   gtk_about_dialog_set_website (GTK_ABOUT_DIALOG (about_dialog), \"http://developer.gnome.org\");\n"
"\n"
"   /* The \"response\" signal is emitted when the dialog receives a delete event,\n"
"    * therefore we connect that signal to the on_close callback function\n"
"    * created above.\n"
"    */\n"
"   g_signal_connect (GTK_DIALOG (about_dialog), \"response\",\n"
"                    G_CALLBACK (on_close), NULL);\n"
"\n"
"   /* Show the about dialog */\n"
"   gtk_widget_show (about_dialog);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  GSimpleAction *copy_action;\n"
"  GSimpleAction *paste_action;\n"
"  GSimpleAction *shape_action;\n"
"  GSimpleAction *about_action;\n"
"\n"
"  /* Create a window with a title and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"MenuBar Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);\n"
"\n"
"  /* Begin creating the \"copy\" action.\n"
"   * Note that it is an action without a state.\n"
"   */\n"
"  copy_action = g_simple_action_new (\"copy\", NULL);\n"
"  /* Connected to a callback function */\n"
"  g_signal_connect (copy_action, \"activate\", G_CALLBACK (copy_callback),\n"
"                    GTK_WINDOW (window));\n"
"  /* Added to the window */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (copy_action));\n"
"\n"
"  /* Begin creating the \"paste\" action.\n"
"   * Note that it is an action without a state.\n"
"   */\n"
"  paste_action = g_simple_action_new (\"paste\", NULL);\n"
"  /* Connect the action to a callback function */\n"
"  g_signal_connect (paste_action, \"activate\", G_CALLBACK (paste_callback),\n"
"                    GTK_WINDOW (window));\n"
"  /* Add it to the window */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (paste_action));\n"
"\n"
"  /* Begin creating the \"shape\" action.\n"
"   * Note that it is an action with a state.\n"
"   * First we state that the parameter type of the simple action is a string.\n"
"   * When using g_variant_type_new, it is appropriate to free the return value\n"
"   * once you're done with it.\n"
"   */\n"
"  GVariantType *type_string = g_variant_type_new (\"s\");\n"
"  /* parameters for the g_simple_action_new_stateful are: (name, parameter type,\n"
"   * initial state).\n"
"   */\n"
"  shape_action = g_simple_action_new_stateful (\"shape\", type_string,\n"
"                                               g_variant_new_string (\"line\"));\n"
"  /* Connect the action to a callback function */\n"
"  g_signal_connect (shape_action, \"activate\", G_CALLBACK (shape_callback),\n"
"                    GTK_WINDOW (window));\n"
"  /* Add it to the window */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (shape_action));\n"
"  g_variant_type_free (type_string);\n"
"\n"
"  /* Begin creating the \"about\" action.\n"
"   * Note that it is an action without a state.\n"
"   */\n"
"  about_action = g_simple_action_new (\"about\", NULL);\n"
"  /* Connect the action to a callback function */\n"
"  g_signal_connect (about_action, \"activate\", G_CALLBACK (about_callback),\n"
"                    GTK_WINDOW (window));\n"
"  /* Add it to the window */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (about_action));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"new\" action */\n"
"static void\n"
"new_callback (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"New\\\"\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"quit\" action */\n"
"static void\n"
"quit_callback (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_print (\"You clicked \\\"Quit\\\"\\n\");\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"state\" action */\n"
"static void\n"
"state_callback (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"   /* The two possibilies in this case for the \"answer\" variable are either\n"
"    * \"on\" or \"off\".\n"
"    */\n"
"   const gchar *answer = g_variant_get_string (parameter, NULL);\n"
"   /* We print the information to the user */\n"
"   g_printf (\"State is set to %s.\\n\", answer);\n"
"   /* Note that we set the state of the action */\n"
"   g_simple_action_set_state (simple, parameter);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"awesome\" action */\n"
"static void\n"
"awesome_callback (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  GVariant *action_state = g_action_get_state (G_ACTION (simple));\n"
"  gboolean active = g_variant_get_boolean (action_state);\n"
"  GVariant *new_state = g_variant_new_boolean (!active);\n"
"  /* Set the new state for the action.\n"
"   * (Keeps track of whether it was last checked or unchecked).\n"
"   */\n"
"  g_simple_action_set_state (simple, new_state);\n"
"\n"
"  if (active)\n"
"     g_print (\"You unchecked \\\"Awesome\\\"\\n\");\n"
"  else\n"
"     g_print (\"You checked \\\"Awesome\\\"\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the menu we are creating in this sample */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  /* Initialize variables */\n"
"  GSimpleAction *new_action;\n"
"  GSimpleAction *quit_action;\n"
"  GSimpleAction *state_action;\n"
"  GSimpleAction *awesome_action;\n"
"\n"
"  GtkBuilder *builder;\n"
"\n"
"  GError *error = NULL;\n"
"\n"
"  /* Begin creating the \"new\" action.\n"
"   * Note that it is an action without a state.\n"
"   */\n"
"  new_action = g_simple_action_new (\"new\", NULL);\n"
"  g_signal_connect (new_action, \"activate\", G_CALLBACK (new_callback), app);\n"
"  /* It is added to the overall application */\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (new_action));\n"
"\n"
"  /* Begin creating the \"quit\" action.\n"
"   * Note that it is an action without a state.\n"
"   */\n"
"  quit_action = g_simple_action_new (\"quit\", NULL);\n"
"  g_signal_connect (quit_action, \"activate\", G_CALLBACK (quit_callback), app);\n"
"  /* It is added to the overall application */\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (quit_action));\n"
"\n"
"  /* Begin creating the \"state\" action.\n"
"   * Note that it is an action with a state.\n"
"   */\n"
"  GVariantType *type_string2 = g_variant_type_new (\"s\");\n"
"  state_action = g_simple_action_new_stateful (\"state\", type_string2,\n"
"                                               g_variant_new_string (\"off\"));\n"
"  g_signal_connect (state_action, \"activate\", G_CALLBACK (state_callback), app);\n"
"  /* It is added to the overall application */\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (state_action));\n"
"  g_variant_type_free (type_string2);\n"
"\n"
"  /* Begin creating the \"awesome\" action.\n"
"   * Note that it is an action with a state.\n"
"   */\n"
"  awesome_action = g_simple_action_new_stateful (\"awesome\", NULL, g_variant_new_boolean (FALSE));\n"
"  g_signal_connect (awesome_action, \"activate\", G_CALLBACK (awesome_callback), app);\n"
"  /* It is added to the overall application */\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (awesome_action));\n"
"\n"
"  /* A builder to add the User Interface designed with GLADE to the grid: */\n"
"  builder = gtk_builder_new ();\n"
"  /* Get the file (if it is there):\n"
"   * Note: you must make sure that the file is in the current directory for\n"
"   * this to work. The function used here returns a non-null value within\n"
"   * our variable \"error\" if an error is indeed found.\n"
"   */\n"
"  gtk_builder_add_from_file (builder, \"menubar.ui\", &amp;error);\n"
"  if (error != NULL) {\n"
"     g_print (\"%s\\n\", error-&gt;message);\n"
"     g_error_free (error);\n"
"  }\n"
"\n"
"  /* Extract the menubar */\n"
"  GObject *menubar = gtk_builder_get_object (builder, \"menubar\");\n"
"  gtk_application_set_menubar (GTK_APPLICATION (app), G_MENU_MODEL (menubar));\n"
"\n"
"  /* Extract the appmenu */\n"
"  GObject *appmenu = gtk_builder_get_object (builder, \"appmenu\");\n"
"  gtk_application_set_app_menu (GTK_APPLICATION (app), G_MENU_MODEL (appmenu));\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the application */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* Η συνάρτηση επανάκλησης για την ενέργεια \"copy\" */\n"
"static void\n"
"copy_callback (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   g_print (\"\\\"Copy\\\" activated\\n\")·\n"
"}\n"
"\n"
"\n"
"\n"
"/* Η συνάρτηση επανάκλησης για την ενέργεια \"paste\" */\n"
"static void\n"
"paste_callback (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   g_print (\"\\\"Paste\\\" activated\\n\")·\n"
"}\n"
"\n"
"\n"
"\n"
"/* Η συνάρτηση επανάκλησης για την ενέργεια \"shape\" */\n"
"static void\n"
"shape_callback (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   /* Συλλέγουμε πρώτα την τιμή του στιγμιότυπου GVariant με έναν τύπο συμβολοσειράς..\n"
"    * Ο συνολικός σκοπός εδώ είναι να δει αν το σχήμα ορίζεται σε γραμμή, τρίγωνο, κλπ,\n"
"    * και να βάλει αυτήν την τιμή μέσα στην μεταβλητή \"answer\".\n"
"    */\n"
"   const gchar *answer = g_variant_get_string (parameter, NULL)·\n"
"   g_printf (\"Shape is set to %s.\\n\", answer)·\n"
"   /* Σημειώστε ότι ορίζουμε την κατάσταση της ενέργειας */\n"
"   g_simple_action_set_state (simple, parameter)·\n"
"}\n"
"\n"
"\n"
"\n"
"/* Η συνάρτηση επανάκλησης στην οποία κλείνει ο  about_dialog που δημιουργήθηκε παρακάτω */\n"
"static void\n"
"on_close (GtkDialog *dialog,\n"
"          gint       response_id,\n"
"          gpointer   user_data)\n"
"{\n"
"  gtk_widget_destroy (GTK_WIDGET (dialog))·\n"
"}\n"
"\n"
"\n"
"\n"
"/* Η συνάρτηση επανάκλησης για την ενέργεια about  (δείτε το aboutdialog.c example) */\n"
"static void\n"
"about_callback (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   GtkWidget *about_dialog·\n"
"\n"
"   about_dialog = gtk_about_dialog_new ()·\n"
"\n"
"   const gchar *authors[] = {\"GNOME Documentation Team\", NULL}·\n"
"   const gchar *documenters[] = {\"GNOME Documentation Team\", NULL}·\n"
"\n"
"   /* Συμπληρώστε τον about_dialog με την επιθυμητή πληροφορία */\n"
"   gtk_about_dialog_set_program_name (GTK_ABOUT_DIALOG (about_dialog), \"AboutDialog Example\")·\n"
"   gtk_about_dialog_set_copyright (GTK_ABOUT_DIALOG (about_dialog), \"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\")·\n"
"   gtk_about_dialog_set_authors (GTK_ABOUT_DIALOG (about_dialog), authors)·\n"
"   gtk_about_dialog_set_documenters (GTK_ABOUT_DIALOG (about_dialog), documenters)·\n"
"   gtk_about_dialog_set_website_label (GTK_ABOUT_DIALOG (about_dialog), \"GNOME Developer Website\")·\n"
"   gtk_about_dialog_set_website (GTK_ABOUT_DIALOG (about_dialog), \"http://developer.gnome.org\")·\n"
"\n"
"   /* Το σήμα \"response\" εκπέμπεται όταν ο διάλογος δέχεται ένα συμβάν διαγραφής,\n"
"    * συνεπώς συνδέουμε αυτό το σήμα με την συνάρτηση επανάκλησης on_close \n"
"    * που δημιουργήθηκε παραπάνω.\n"
"    */\n"
"   g_signal_connect (GTK_DIALOG (about_dialog), \"response\",\n"
"                    G_CALLBACK (on_close), NULL)·\n"
"\n"
"   /* Εμφάνιση του διαλόγου περί */\n"
"   gtk_widget_show (about_dialog)·\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window·\n"
"\n"
"  GSimpleAction *copy_action·\n"
"  GSimpleAction *paste_action·\n"
"  GSimpleAction *shape_action·\n"
"  GSimpleAction *about_action·\n"
"\n"
"  /* Δημιουργία παραθύρου με τίτλο και προεπιλεγμένο μέγεθος */\n"
"  window = gtk_application_window_new (app)·\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"MenuBar Example\")·\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200)·\n"
"\n"
"  /* Έναρξη δημιουργίας της ενέργειας \"copy\".\n"
"   * Σημειώστε ότι είναι μια ενέργεια χωρίς κατάσταση.\n"
"   */\n"
"  copy_action = g_simple_action_new (\"copy\", NULL)·\n"
"  /* Συνδέθηκε με μια συνάρτηση επανάκλησης */\n"
"  g_signal_connect (copy_action, \"activate\", G_CALLBACK (copy_callback),\n"
"                    GTK_WINDOW (window))·\n"
"  /* Προστέθηκε στο παράθυρο */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (copy_action))·\n"
"\n"
"  /* Έναρξη δημιουργίας της κατάστασης \"paste\".\n"
"   * Σημειώστε ότι είναι μια ενέργεια χωρίς κατάσταση.\n"
"   */\n"
"  paste_action = g_simple_action_new (\"paste\", NULL)·\n"
"  /* Σύνδεση της ενέργειας με μια συνάρτηση επανάκλησης */\n"
"  g_signal_connect (paste_action, \"activate\", G_CALLBACK (paste_callback),\n"
"                    GTK_WINDOW (window))·\n"
"  /* Προσθήκη της στο παράθυρο */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (paste_action))·\n"
"\n"
"  /* Έναρξη δημιουργίας της ενέργειας \"shape\".\n"
"   * Σημειώστε ότι είναι μια ενέργεια χωρίς κατάσταση.\n"
"   * Πρώτα δηλώνουμε ότι ο τύπος της παραμέτρου της απλής ενέργειας είναι μια συμβολοσειρά.\n"
"   * Όταν χρησιμοποιούμε g_variant_type_new, είναι κατάλληλη η απελευθέρωση της μνήμης επιστροφής\n"
"   * μόλις έχετε τελειώσει μαζί της.\n"
"   */\n"
"  GVariantType *type_string = g_variant_type_new (\"s\")·\n"
"  /* παράμετροι για το g_simple_action_new_stateful είναι: (όνομα, τύπος παραμέτρου,\n"
"   * αρχική κατάσταση).\n"
"   */\n"
"  shape_action = g_simple_action_new_stateful (\"shape\", type_string,\n"
"                                               g_variant_new_string (\"line\"))·\n"
"  /* Σύνδεση της ενέργειας με μια συνάρτηση επανάκλησης */\n"
"  g_signal_connect (shape_action, \"activate\", G_CALLBACK (shape_callback),\n"
"                    GTK_WINDOW (window))·\n"
"  /* Προσθήκη της στο παράθυρο */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (shape_action))·\n"
"  g_variant_type_free (type_string)·\n"
"\n"
"  /* Έναρξη δημιουργίας της ενέργειας \"about\".\n"
"   * Σημειώστε ότι είναι μια ενέργεια χωρίς κατάσταση.\n"
"   */\n"
"  about_action = g_simple_action_new (\"about\", NULL)·\n"
"  /* Σύνδεση της ενέργειας με τη συνάρτηση επανάκλησης */\n"
"  g_signal_connect (about_action, \"activate\", G_CALLBACK (about_callback),\n"
"                    GTK_WINDOW (window))·\n"
"  /* Προσθήκη της στο παράθυρο */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (about_action))·\n"
"\n"
"  gtk_widget_show_all (window)·\n"
"}\n"
"\n"
"\n"
"\n"
"/* Συνάρτηση επανάκλησης για την ενέργεια \"new\" */\n"
"static void\n"
"new_callback (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"New\\\"\\n\")·\n"
"}\n"
"\n"
"\n"
"\n"
"/* Συνάρτηση επανάκλησης για την ενέργεια \"quit\" */\n"
"static void\n"
"quit_callback (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data·\n"
"\n"
"  g_print (\"You clicked \\\"Quit\\\"\\n\")·\n"
"  g_application_quit (application)·\n"
"}\n"
"\n"
"\n"
"\n"
"/* Συνάρτηση επανάκλησης για την ενέργεια \"state\" */\n"
"static void\n"
"state_callback (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"   /* Οι δύο πιθανότητες σε αυτήν την περίπτωση για την μεταβλητή \"answer\" είναι είτε\n"
"    * \"on\" είτε \"off\".\n"
"    */\n"
"   const gchar *answer = g_variant_get_string (parameter, NULL)·\n"
"   /* Εμφανίζουμε την πληροφορία στον χρήστη */\n"
"   g_printf (\"State is set to %s.\\n\", answer)·\n"
"   /* Σημειώστε ότι ορίζουμε την κατάσταση της ενέργειας */\n"
"   g_simple_action_set_state (simple, parameter)·\n"
"}\n"
"\n"
"\n"
"\n"
"/* Συνάρτηση επανάκλησης για την ενέργεια \"awesome\" */\n"
"static void\n"
"awesome_callback (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  GVariant *action_state = g_action_get_state (G_ACTION (simple))·\n"
"  gboolean active = g_variant_get_boolean (action_state)·\n"
"  GVariant *new_state = g_variant_new_boolean (!active)·\n"
"  /* Ορισμός της νέας κατάστασης για την ενέργεια.\n"
"   * (Παρακολούθηση αν ήταν τελευταία σημειωμένη ή όχι).\n"
"   */\n"
"  g_simple_action_set_state (simple, new_state)·\n"
"\n"
"  if (active)\n"
"     g_print (\"You unchecked \\\"Awesome\\\"\\n\")·\n"
"  else\n"
"     g_print (\"You checked \\\"Awesome\\\"\\n\")·\n"
"}\n"
"\n"
"\n"
"\n"
"/* Έναρξη συνάρτησης για το μενού που δημιουργούμε σε αυτό το δείγμα */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  /* Initialize variables */\n"
"  GSimpleAction *new_action·\n"
"  GSimpleAction *quit_action·\n"
"  GSimpleAction *state_action·\n"
"  GSimpleAction *awesome_action·\n"
"\n"
"  GtkBuilder *builder·\n"
"\n"
"  GError **error·\n"
"\n"
"  /* Έναρξη δημιουργίας της ενέργειας \"new\".\n"
"   * Σημειώστε ότι είναι μια ενέργεια χωρίς κατάσταση.\n"
"   */\n"
"  new_action = g_simple_action_new (\"new\", NULL)·\n"
"  g_signal_connect (new_action, \"activate\", G_CALLBACK (new_callback), app)·\n"
"  /* Προστίθεται στην συνολική εφαρμογή */\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (new_action))·\n"
"\n"
"  /* Έναρξη δημιουργίας της ενέργειας \"quit\".\n"
"   * Σημειώστε ότι είναι μια ενέργεια χωρίς κατάσταση.\n"
"   */\n"
"  quit_action = g_simple_action_new (\"quit\", NULL)·\n"
"  g_signal_connect (quit_action, \"activate\", G_CALLBACK (quit_callback), app)·\n"
"  /* Προστίθεται στην συνολική εφαρμογή */\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (quit_action))·\n"
"\n"
"  /*Έναρξη δημιουργίας της ενέργειας \"state\".\n"
"   * Σημειώστε ότι είναι μια ενέργεια χωρίς κατάσταση.\n"
"   */\n"
"  GVariantType *type_string2 = g_variant_type_new (\"s\")·\n"
"  state_action = g_simple_action_new_stateful (\"state\", type_string2,\n"
"                                               g_variant_new_string (\"off\"))·\n"
"  g_signal_connect (state_action, \"activate\", G_CALLBACK (state_callback), app)·\n"
"  /* Προστίθεται στην συνολική εφαρμογή */\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (state_action))·\n"
"  g_variant_type_free (type_string2)·\n"
"\n"
"  /* Έναρξη δημιουργίας της ενέργειας \"awesome\".\n"
"   * Σημειώστε ότι είναι μια ενέργεια χωρίς κατάσταση.\n"
"   */\n"
"  awesome_action = g_simple_action_new_stateful (\"awesome\", NULL, g_variant_new_boolean (FALSE))·\n"
"  g_signal_connect (awesome_action, \"activate\", G_CALLBACK (awesome_callback), app)·\n"
"  /* Προστίθεται στην συνολική εφαρμογή */\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (awesome_action))·\n"
"\n"
"  /* Ένας δομητής για να προσθέσει τη διεπαφή χρήστη που σχεδιάστηκε με GLADE στο πλέγμα: */\n"
"  builder = gtk_builder_new ()·\n"
"  /* Λήψη του αρχείου (αν είναι εκεί):\n"
"   * Σημείωση: πρέπει να βεβαιωθείτε ότι το αρχείο είναι στον τρέχοντα κατάλογο για\n"
"   * αυτήν την εργασία. Η χρησιμοποιούμενη συνάρτηση εδώ επιστρέφει μια τιμή μέσα στη μεταβλητή μας\n"
"   * \"error\" και είναι ίση με μηδέν αν βρεθεί όντως ένα σφάλμα.\n"
"   */\n"
"  gtk_builder_add_from_file (builder, \"menubar.ui\", error)·\n"
"  if (error == 0) {\n"
"     g_print (\"File not found.\\n\")·\n"
"  }\n"
"\n"
"  /* Εξαγωγή της γραμμής μενού */\n"
"  GObject *menubar = gtk_builder_get_object (builder, \"menubar\")·\n"
"  gtk_application_set_menubar (GTK_APPLICATION (app), G_MENU_MODEL (menubar))·\n"
"\n"
"  /* Εξαγωγή του μενού εφαρμογών */\n"
"  GObject *appmenu = gtk_builder_get_object (builder, \"appmenu\")·\n"
"  gtk_application_set_app_menu (GTK_APPLICATION (app), G_MENU_MODEL (appmenu))·\n"
"}\n"
"\n"
"\n"
"\n"
"/* Έναρξη συνάρτησης για την εφαρμογή */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app·\n"
"  int status·\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE)·\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL)·\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL)·\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv)·\n"
"  g_object_unref (app)·\n"
"\n"
"  return status·\n"
"}\n"

#. (itstool) path: item/p
#: C/menubar.c.page:37 C/scrolledwindow.c.page:34
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkApplication.html"
"\">GtkApplication</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkApplication.html"
"\">GtkApplication</link>"

#. (itstool) path: item/p
#: C/menubar.c.page:40
msgid ""
"<link href=\"http://developer.gnome.org/gtk/stable/GtkAboutDialog.html"
"\">GtkAboutDialog</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk/stable/GtkAboutDialog.html"
"\">GtkAboutDialog</link>"

#. (itstool) path: item/p
#: C/menubar.c.page:41
msgid ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-GVariantType.html"
"\">GtkVariantType</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-GVariantType.html"
"\">GVariantType</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/menubar.py.page:132 C/menubar.vala.page:134
msgctxt "_"
msgid ""
"external ref='media/menubar_choices.png' "
"md5='47cdfa12caf85ba20dd3e835bd7f893f'"
msgstr ""
"external ref='media/menubar_choices.png' "
"md5='47cdfa12caf85ba20dd3e835bd7f893f'"

#. (itstool) path: info/title
#: C/menubar.py.page:8
msgctxt "text"
msgid "MenuBar (Python)"
msgstr "MenuBar (Python)"

#. (itstool) path: page/title
#: C/menubar.py.page:28
msgid "MenuBar created using XML and GtkBuilder"
msgstr "Μια γραμμή μενού δημιουργήθηκε χρησιμοποιώντας XML και GtkBuilder"

#. (itstool) path: section/title
#: C/menubar.py.page:34 C/menubar.vala.page:29
msgid "Create a MenuBar using XML"
msgstr "Δημιουργήστε μια γραμμή μενού χρησιμοποιώντας XML"

#. (itstool) path: section/p
#: C/menubar.py.page:35 C/menubar.vala.page:30
msgid "To create the menubar using XML:"
msgstr "Για να δημιουργήσετε μια γραμμή μενού χρησιμοποιώντας XML:"

#. (itstool) path: item/p
#: C/menubar.py.page:37 C/menubar.vala.page:32
msgid "Create <file>menubar.ui</file> using your favorite text editor."
msgstr ""
"Δημιουργήστε <file>menubar.ui</file> χρησιμοποιώντας τον αγαπημένο σας "
"επεξεργαστή κειμένου."

#. (itstool) path: item/p
#: C/menubar.py.page:38 C/menubar.vala.page:33
msgid "Enter the following line at the top of the file:"
msgstr "Εισάγετε την επόμενη γραμμή στην κορυφή του αρχείου:"

#. (itstool) path: item/code
#: C/menubar.py.page:39 C/menubar.vala.page:34
#, no-wrap
msgid ""
"\n"
"&lt;?xml version=\"1.0\"? encoding=\"UTF-8\"?&gt;"
msgstr ""
"\n"
"&lt;?xml version=\"1.0\"? encoding=\"UTF-8\"?&gt;"

#. (itstool) path: item/p
#: C/menubar.py.page:42 C/menubar.vala.page:37
msgid ""
"We want to create the interface which will contain our menubar and its "
"submenus. Our menubar will contain <gui>File</gui>, <gui>Edit</gui>, "
"<gui>Choices</gui> and <gui>Help</gui> submenus. We add the following XML "
"code to the file:"
msgstr ""
"Θέλουμε να δημιουργήσουμε τη διεπαφή που θα περιέχει τη γραμμή μενού μας και "
"τα υπομενού της. Η γραμμή μενού μας θα περιέχει τα υπομενού <gui>Αρχείο</"
"gui>, <gui>Επεξεργασία</gui>, <gui>Επιλογές</gui> και <gui>Βοήθεια</gui>. "
"Προσθέτουμε τον ακόλουθο κώδικα XML στο αρχείο:"

#. (itstool) path: item/code
#: C/menubar.py.page:43 C/menubar.vala.page:38
#, no-wrap
msgid ""
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"menubar\"&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;File&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Edit&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Choices&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Help&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;\n"
msgstr ""
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"menubar\"&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;File&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Edit&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Choices&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Help&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;\n"

#. (itstool) path: item/p
#: C/menubar.py.page:45
msgid ""
"Now we will create the .py file and use GtkBuilder to import the "
"<file>menubar.ui</file> we just created."
msgstr ""
"Τώρα θα δημιουργήσουμε το αρχείο .py και θα χρησιμοποιήσουμε GtkBuilder για "
"εισαγωγή του <file>menubar.ui</file> που μόλις δημιουργήσαμε."

#. (itstool) path: section/title
#: C/menubar.py.page:49 C/menubar.vala.page:43
msgid "Add the MenuBar to the window using GtkBuilder"
msgstr "Προσθέστε τη MenuBar στο παράθυρο χρησιμοποιώντας GtkBuilder"

#. (itstool) path: section/code
#: C/menubar.py.page:50
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"MenuBar Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # a builder to add the UI designed with Glade to the grid:\n"
"        builder = Gtk.Builder()\n"
"        # get the file (if it is there)\n"
"        try:\n"
"            builder.add_from_file(\"menubar_basis.ui\")\n"
"        except:\n"
"            print \"file not found\"\n"
"            sys.exit()\n"
"\n"
"        # we use the method Gtk.Application.set_menubar(menubar) to add the menubar\n"
"        # to the application (Note: NOT the window!)\n"
"        self.set_menubar(builder.get_object(\"menubar\"))\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"MenuBar Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # a builder to add the UI designed with Glade to the grid:\n"
"        builder = Gtk.Builder()\n"
"        # get the file (if it is there)\n"
"        try:\n"
"            builder.add_from_file(\"menubar_basis.ui\")\n"
"        except:\n"
"            print \"file not found\"\n"
"            sys.exit()\n"
"\n"
"        # we use the method Gtk.Application.set_menubar(menubar) to add the menubar\n"
"        # to the application (Note: NOT the window!)\n"
"        self.set_menubar(builder.get_object(\"menubar\"))\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/p
#: C/menubar.py.page:51
msgid ""
"Now run the python application. It should look like the picture at the top "
"of this page."
msgstr ""
"Τώρα εκτελέστε την εφαρμογή python. Θα πρέπει να μοιάζει με την εικόνα στην "
"κορυφή αυτής της σελίδας."

#. (itstool) path: section/title
#: C/menubar.py.page:55 C/menubar.vala.page:51
msgid "Add items to the menus"
msgstr "Προσθήκη στοιχείων στα μενού"

#. (itstool) path: section/p
#: C/menubar.py.page:56 C/menubar.vala.page:52
msgid ""
"We start off by adding 2 menuitems to the <gui>File</gui> menu: <gui>New</"
"gui> and <gui>Quit</gui>. We do this by adding a <code>section</code> to the "
"the <code>File</code> submenu with these items. The <file>menubar.ui</file> "
"should look like this (lines 6 to 13 inclusive comprise the newly added "
"section):"
msgstr ""
"Ξεκινάμε προσθέτοντας 2 στοιχεία μενού στο μενού <gui>αρχείο</gui>: "
"<gui>νέο</gui> και <gui>κλείσιμο</gui>. Τι κάνουμε αυτό προσθέτοντας μια "
"<code>section</code> στο υπομενού <code>File</code> με αυτά τα στοιχεία. Το "
"<file>menubar.ui</file> πρέπει να φαίνεται σαν αυτό (γραμμές 6 έως 13 "
"συμπεριλαμβανόμενης αποτελούν τη νέα ενότητα που προστέθηκε):"

#. (itstool) path: listing/title
#: C/menubar.py.page:59
msgid "menubar.ui"
msgstr "menubar.ui"

#. (itstool) path: listing/code
#. (itstool) path: section/code
#: C/menubar.py.page:60 C/menubar.vala.page:53
#, no-wrap
msgid ""
"\n"
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"menubar\"&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;File&lt;/attribute&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name =\"label\"&gt;Quit&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Edit&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Choices&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Help&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;"
msgstr ""
"\n"
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"menubar\"&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;File&lt;/attribute&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name =\"label\"&gt;Quit&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Edit&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Choices&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Help&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;"

#. (itstool) path: section/p
#: C/menubar.py.page:88
msgid ""
"Following this pattern, you can now add a <code>Copy</code> and a "
"<code>Paste</code> item to the <code>Edit</code> submenu, and an "
"<code>About</code> item to the <code>Help</code> submenu."
msgstr ""
"Ακολουθώντας αυτό το μοτίβο, μπορείτε τώρα να προσθέσετε ένα στοιχείο "
"<code>Copy</code> και ένα <code>Paste</code> στο υπομενού <code>Edit</code> "
"και ένα στοιχείο <code>About</code> στο υπομενού <code>Help</code>."

#. (itstool) path: section/title
#: C/menubar.py.page:93 C/menubar.vala.page:87
msgid "Setup actions"
msgstr "Εγκατάσταση ενεργειών"

#. (itstool) path: section/p
#: C/menubar.py.page:95
msgid ""
"We now create the actions for \"New\" and \"Quit\" connected to a callback "
"function in the Python file; for instance we create \"new\" as:"
msgstr ""
"Τώρα δημιουργούμε τις ενέργειες για \"New\" και \"Quit\" συνδεμένες σε μια "
"συνάρτηση επανάκλησης στο αρχείο Python· για παράδειγμα δημιουργούμε το \"new"
"\" ως:"

#. (itstool) path: section/code
#: C/menubar.py.page:96
#, no-wrap
msgid ""
"\n"
"new_action = Gio.SimpleAction.new(\"new\", None)\n"
"new_action.connect(\"activate\", self.new_callback)"
msgstr ""
"\n"
"new_action = Gio.SimpleAction.new(\"new\", None)\n"
"new_action.connect(\"activate\", self.new_callback)"

#. (itstool) path: section/p
#: C/menubar.py.page:100
msgid "And we create the callback function of \"new\" as"
msgstr "Και δημιουργούμε τη συνάρτηση επανάκλησης του \"new\" ως"

#. (itstool) path: section/code
#: C/menubar.py.page:101
#, no-wrap
msgid ""
"\n"
"def new_callback(self, action, parameter):\n"
"    print \"You clicked \\\"New\\\"\""
msgstr ""
"\n"
"def new_callback(self, action, parameter):\n"
"    print \"You clicked \\\"New\\\"\""

#. (itstool) path: section/p
#: C/menubar.py.page:105
msgid ""
"Now, in the XML file, we connect the menu items to the actions in the XML "
"file by adding the \"action\" attribute:"
msgstr ""
"Τώρα, στο αρχείο XML, συνδέουμε τα στοιχεία του μενού στις ενέργειες του "
"αρχείου XML προσθέτοντας το γνώρισμα \"action\":"

#. (itstool) path: section/code
#: C/menubar.py.page:106
#, no-wrap
msgid ""
"\n"
"&lt;item&gt;\n"
"  &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"  &lt;attribute name=\"action\"&gt;app.new&lt;/attribute&gt;\n"
"&lt;/item&gt;"
msgstr ""
"\n"
"&lt;item&gt;\n"
"  &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"  &lt;attribute name=\"action\"&gt;app.new&lt;/attribute&gt;\n"
"&lt;/item&gt;"

#. (itstool) path: section/p
#: C/menubar.py.page:112
msgid ""
"Note that for an action that is relative to the application, we use the "
"prefix <code>app.</code>; for actions that are relative to the window we use "
"the prefix <code>win.</code>."
msgstr ""
"Σημειώστε ότι για μια ενέργεια που είναι σχετική με την εφαρμογή, "
"χρησιμοποιούμε το πρόθεμα <code>app.</code>· για ενέργειες που είναι "
"σχετικές με το παράθυρο χρησιμοποιούμε το πρόθεμα <code>win.</code>."

#. (itstool) path: section/p
#: C/menubar.py.page:114
msgid ""
"Finally, in the Python file, we add the action to the application or to the "
"window - so for instance <code>app.new</code> will be added to the "
"application in the method <code>do_startup(self)</code> as"
msgstr ""
"Τελικά, στο αρχείο Python, προσθέτουμε την ενέργεια στην εφαρμογή ή στο "
"παράθυρο - έτσι για παράδειγμα <code>app.new</code> θα προστεθεί στην "
"εφαρμογή στη μέθοδο <code>do_startup(self)</code> ως"

#. (itstool) path: section/code
#: C/menubar.py.page:115
#, no-wrap
msgid ""
"\n"
"self.add_action(new_action)"
msgstr ""
"\n"
"self.add_action(new_action)"

#. (itstool) path: section/p
#: C/menubar.py.page:118
msgid ""
"See <link xref=\"signals-callbacks.py\"/> for a more detailed explanation of "
"signals and callbacks."
msgstr ""
"Δείτε <link xref=\"signals-callbacks.py\"/> για μια πιο λεπτομερή εξήγηση "
"των σημάτων και επανακλήσεων."

#. (itstool) path: section/title
#: C/menubar.py.page:122 C/menubar.vala.page:139
msgid "Actions: Application or Window?"
msgstr "Ενέργειες: εφαρμογή ή παράθυρο;"

#. (itstool) path: section/p
#: C/menubar.py.page:123 C/menubar.vala.page:140
msgid ""
"Above, we created the \"new\" and \"open\" actions as part of the "
"MyApplication class. Actions which control the application itself, such as "
"\"quit\" should be created similarly."
msgstr ""
"Πιο πάνω, δημιουργήσαμε τις ενέργειες \"new\" και \"open\" ως μέρος της "
"κλάσης MyApplication. Οι ενέργειες που ελέγχουν την ίδια την εφαρμογή, όπως "
"\"quit\" πρέπει να δημιουργηθούν παρόμοια."

#. (itstool) path: section/p
#: C/menubar.py.page:125 C/menubar.vala.page:143
msgid ""
"Some actions, such as \"copy\" and \"paste\" deal with the window, not the "
"application. Window actions should be created as part of the window class."
msgstr ""
"Μερικές ενέργειες, όπως \"copy\" και \"paste\" αντιμετωπίζουν το παράθυρο, "
"όχι την εφαρμογή. Οι ενέργειες παραθύρου πρέπει να δημιουργηθούν ως μέρος "
"της κλάσης παραθύρου."

#. (itstool) path: section/p
#: C/menubar.py.page:127
msgid ""
"The complete example files contain both application actions and window "
"actions. The window actions are the ones usually included in the <link xref="
"\"gmenu.py\">application menu</link> also. It is not good practice to "
"include window actions in the applcation menu. For demonstration purposes, "
"the complete example files which follow include XML in the UI file which "
"creates the application menu which includes a \"New\" and \"Open\" item, and "
"these are hooked up to the same actions as the menubar items of the same "
"name."
msgstr ""
"Τα πλήρη αρχεία του παραδείγματος περιέχουν και τις ενέργειες εφαρμογής και "
"τις ενέργειες παραθύρου. Οι ενέργειες παραθύρου είναι αυτές που συνήθως "
"συμπεριλαμβάνονται στο <link xref=\"gmenu.py\">μενού εφαρμογής</link> "
"επίσης. Δεν είναι καλή πρακτική να συμπεριλαμβάνετε ενέργειες παραθύρου στο "
"μενού της εφαρμογής. Για σκοπούς επίδειξης, τα πλήρη αρχεία του "
"παραδείγματος που ακολουθεί περιέχουν XML στο αρχείο UI που δημιουργεί το "
"μενού εφαρμογής που περιλαμβάνει τα στοιχεία \"New\" και \"Open\" και αυτά "
"συνδέονται με τις ίδιες ενέργειες όπως τα στοιχεία της γραμμής μενού του "
"ίδιου ονόματος."

#. (itstool) path: section/title
#: C/menubar.py.page:131 C/menubar.vala.page:133
msgid "Choices submenu and items with state"
msgstr "Επιλογές υπομενού και στοιχείων με κατάσταση"

#. (itstool) path: section/p
#: C/menubar.py.page:133
msgid ""
"Lines 30 to 80 inclusive of the <link xref=\"menubar.py#xml-code\"/> "
"demonstrate the XML code used to create the UI for <gui>Choices</gui> menu."
msgstr ""
"Οι γραμμές 30 έως 80 συμπεριλαμβανόμενης της εμφάνισης <link xref=\"menubar."
"py#xml-code\"/> του χρησιμοποιούμενου κώδικα XML για δημιουργία της UI για "
"το μενού <gui>επιλογές</gui>."

#. (itstool) path: section/p
#: C/menubar.py.page:135
msgid ""
"The actions created so far are <em>stateless</em>, that is they do not "
"retain or depend on a state given by the action itself. The actions we need "
"to create for the Choices submenu, on the other hand, are <em>stateful</em>. "
"An example of creation of a stateful action is:"
msgstr ""
"Οι δημιουργημένες ενέργειες μέχρι εδώ είναι <em>χωρίς κατάσταση</em>, δηλαδή "
"δεν κρατούν ή εξαρτώνται από μια δεδομένη κατάσταση από την ίδια την "
"ενέργεια. Οι ενέργειες που χρειαζόμαστε να δημιουργήσουμε για το υπομενού "
"επιλογών, από την άλλη μεριά, είναι <em>με κατάσταση</em>. Ένα παράδειγμα "
"δημιουργίας μιας ενέργειας με κατάσταση είναι:"

#. (itstool) path: section/code
#: C/menubar.py.page:136
#, no-wrap
msgid ""
"\n"
"shape_action = Gio.SimpleAction.new_stateful(\"shape\", GLib.VariantType.new('s'), GLib.Variant.new_string('line'))"
msgstr ""
"\n"
"shape_action = Gio.SimpleAction.new_stateful(\"shape\", GLib.VariantType.new('s'), GLib.Variant.new_string('line'))"

#. (itstool) path: section/p
#: C/menubar.py.page:139
msgid ""
"where the variables of the method are: name, parameter type (in this case, a "
"string - see <link href=\"http://developer.gnome.org/glib/unstable/glib-"
"GVariantType.html\">here</link> for a complete list of character meanings), "
"initial state (in this case, 'line' - in case of a <code>True</code> boolean "
"value it should be <code>Glib.Variant.new_boolean(True)</code>, and so on, "
"see <link href=\"http://developer.gnome.org/glib/unstable/glib-GVariant.html"
"\">here</link> for a complete list)"
msgstr ""
"όπου οι μεταβλητές της μεθόδου είναι: όνομα, τύπος παραμέτρου (σε αυτήν την "
"περίπτωση, μια συμβολοσειρά - δείτε <link href=\"http://developer.gnome.org/"
"glib/unstable/glib-GVariantType.html\">εδώ</link> για μια πλήρη λίστα "
"σημασιών χαρακτήρα), αρχικής κατάστασης (σε αυτήν την περίπτωση, 'line' - σε "
"περίπτωση μιας <code>True</code> τιμής Μπουλ θα πρέπει να είναι <code>Glib."
"Variant.new_boolean(True)</code>, κ.ο.κ, δείτε <link href=\"http://developer."
"gnome.org/glib/unstable/glib-GVariant.html\">εδώ</link> για μια πλήρη λίστα)"

#. (itstool) path: section/p
#: C/menubar.py.page:141
msgid ""
"After creating the stateful SimpleAction we connect it to the callback "
"function and we add it to the window (or the application, if it is the "
"case), as before:"
msgstr ""
"Μετά τη δημιουργία της SimpleAction με κατάσταση τη συνδέουμε στη συνάρτηση "
"επανάκλησης και την προσθέτουμε στο παράθυρο (ή την εφαρμογή, εάν είναι η "
"περίπτωση), όπως πριν:"

#. (itstool) path: section/code
#: C/menubar.py.page:143
#, no-wrap
msgid ""
"\n"
"shape_action.connect(\"activate\", self.shape_callback)\n"
"self.add_action(shape_action)"
msgstr ""
"\n"
"shape_action.connect(\"activate\", self.shape_callback)\n"
"self.add_action(shape_action)"

#. (itstool) path: section/title
#: C/menubar.py.page:150 C/menubar.vala.page:154
msgid "Complete XML UI file for this example"
msgstr "Πλήρες αρχείο UI XML για αυτό το παράδειγμα"

#. (itstool) path: section/code
#: C/menubar.py.page:151 C/menubar.vala.page:155
#, no-wrap
msgid ""
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"menubar\"&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;File&lt;/attribute&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.new&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Quit&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Edit&lt;/attribute&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Copy&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;win.copy&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Paste&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;win.paste&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Choices&lt;/attribute&gt;\n"
"      &lt;submenu&gt;\n"
"        &lt;attribute name=\"label\"&gt;Shapes&lt;/attribute&gt;\n"
"          &lt;section&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Line&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;line&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Triangle&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;triangle&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Square&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;square&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Polygon&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;polygon&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Circle&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;circle&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"          &lt;/section&gt;\n"
"      &lt;/submenu&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;On&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.state&lt;/attribute&gt;\n"
"          &lt;attribute name=\"target\"&gt;on&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Off&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.state&lt;/attribute&gt;\n"
"          &lt;attribute name=\"target\"&gt;off&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Awesome&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.awesome&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Help&lt;/attribute&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;About&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;win.about&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"  &lt;/menu&gt;\n"
"  &lt;menu id=\"appmenu\"&gt;\n"
"    &lt;section&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;app.new&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Quit&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"    &lt;/section&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;\n"
msgstr ""
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"menubar\"&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;File&lt;/attribute&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.new&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Quit&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Edit&lt;/attribute&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Copy&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;win.copy&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Paste&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;win.paste&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Choices&lt;/attribute&gt;\n"
"      &lt;submenu&gt;\n"
"        &lt;attribute name=\"label\"&gt;Shapes&lt;/attribute&gt;\n"
"          &lt;section&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Line&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;line&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Triangle&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;triangle&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Square&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;square&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Polygon&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;polygon&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Circle&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;circle&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"          &lt;/section&gt;\n"
"      &lt;/submenu&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;On&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.state&lt;/attribute&gt;\n"
"          &lt;attribute name=\"target\"&gt;on&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Off&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.state&lt;/attribute&gt;\n"
"          &lt;attribute name=\"target\"&gt;off&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Awesome&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.awesome&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Help&lt;/attribute&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;About&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;win.about&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"  &lt;/menu&gt;\n"
"  &lt;menu id=\"appmenu\"&gt;\n"
"    &lt;section&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;app.new&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Quit&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"    &lt;/section&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;\n"

#. (itstool) path: section/title
#: C/menubar.py.page:155
msgid "Complete Python file for this example"
msgstr "Το πλήρες αρχείο Python για αυτό το παράδειγμα"

#. (itstool) path: section/code
#: C/menubar.py.page:156
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import GLib\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"MenuBar Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"\n"
"        # action without a state created (name, parameter type)\n"
"        copy_action = Gio.SimpleAction.new(\"copy\", None)\n"
"        # connected with the callback function\n"
"        copy_action.connect(\"activate\", self.copy_callback)\n"
"        # added to the window\n"
"        self.add_action(copy_action)\n"
"\n"
"        # action without a state created (name, parameter type)\n"
"        paste_action = Gio.SimpleAction.new(\"paste\", None)\n"
"        # connected with the callback function\n"
"        paste_action.connect(\"activate\", self.paste_callback)\n"
"        # added to the window\n"
"        self.add_action(paste_action)\n"
"\n"
"        # action with a state created (name, parameter type, initial state)\n"
"        shape_action = Gio.SimpleAction.new_stateful(\n"
"            \"shape\", GLib.VariantType.new('s'), GLib.Variant.new_string('line'))\n"
"        # connected to the callback function\n"
"        shape_action.connect(\"activate\", self.shape_callback)\n"
"        # added to the window\n"
"        self.add_action(shape_action)\n"
"\n"
"        # action with a state created\n"
"        about_action = Gio.SimpleAction.new(\"about\", None)\n"
"        # action connected to the callback function\n"
"        about_action.connect(\"activate\", self.about_callback)\n"
"        # action added to the application\n"
"        self.add_action(about_action)\n"
"\n"
"    # callback function for copy_action\n"
"    def copy_callback(self, action, parameter):\n"
"        print \"\\\"Copy\\\" activated\"\n"
"\n"
"    # callback function for paste_action\n"
"    def paste_callback(self, action, parameter):\n"
"        print \"\\\"Paste\\\" activated\"\n"
"\n"
"    # callback function for shape_action\n"
"    def shape_callback(self, action, parameter):\n"
"        print \"Shape is set to\", parameter.get_string()\n"
"        # Note that we set the state of the action!\n"
"        action.set_state(parameter)\n"
"\n"
"    # callback function for about (see the AboutDialog example)\n"
"    def about_callback(self, action, parameter):\n"
"        # a  Gtk.AboutDialog\n"
"        aboutdialog = Gtk.AboutDialog()\n"
"\n"
"        # lists of authors and documenters (will be used later)\n"
"        authors = [\"GNOME Documentation Team\"]\n"
"        documenters = [\"GNOME Documentation Team\"]\n"
"\n"
"        # we fill in the aboutdialog\n"
"        aboutdialog.set_program_name(\"MenuBar Example\")\n"
"        aboutdialog.set_copyright(\n"
"            \"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\")\n"
"        aboutdialog.set_authors(authors)\n"
"        aboutdialog.set_documenters(documenters)\n"
"        aboutdialog.set_website(\"http://developer.gnome.org\")\n"
"        aboutdialog.set_website_label(\"GNOME Developer Website\")\n"
"\n"
"        # to close the aboutdialog when \"close\" is clicked we connect the\n"
"        # \"response\" signal to on_close\n"
"        aboutdialog.connect(\"response\", self.on_close)\n"
"        # show the aboutdialog\n"
"        aboutdialog.show()\n"
"\n"
"    # a callback function to destroy the aboutdialog\n"
"    def on_close(self, action, parameter):\n"
"        action.destroy()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        # FIRST THING TO DO: do_startup()\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # action without a state created\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        # action connected to the callback function\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        # action added to the application\n"
"        self.add_action(new_action)\n"
"\n"
"        # action without a state created\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        # action connected to the callback function\n"
"        quit_action.connect(\"activate\", self.quit_callback)\n"
"        # action added to the application\n"
"        self.add_action(quit_action)\n"
"\n"
"        # action with a state created\n"
"        state_action = Gio.SimpleAction.new_stateful(\n"
"            \"state\",  GLib.VariantType.new('s'), GLib.Variant.new_string('off'))\n"
"        # action connected to the callback function\n"
"        state_action.connect(\"activate\", self.state_callback)\n"
"        # action added to the application\n"
"        self.add_action(state_action)\n"
"\n"
"        # action with a state created\n"
"        awesome_action = Gio.SimpleAction.new_stateful(\n"
"            \"awesome\", None, GLib.Variant.new_boolean(False))\n"
"        # action connected to the callback function\n"
"        awesome_action.connect(\"activate\", self.awesome_callback)\n"
"        # action added to the application\n"
"        self.add_action(awesome_action)\n"
"\n"
"        # a builder to add the UI designed with Glade to the grid:\n"
"        builder = Gtk.Builder()\n"
"        # get the file (if it is there)\n"
"        try:\n"
"            builder.add_from_file(\"menubar.ui\")\n"
"        except:\n"
"            print \"file not found\"\n"
"            sys.exit()\n"
"\n"
"        # we use the method Gtk.Application.set_menubar(menubar) to add the menubar\n"
"        # and the menu to the application (Note: NOT the window!)\n"
"        self.set_menubar(builder.get_object(\"menubar\"))\n"
"        self.set_app_menu(builder.get_object(\"appmenu\"))\n"
"\n"
"    # callback function for new\n"
"    def new_callback(self, action, parameter):\n"
"        print \"You clicked \\\"New\\\"\"\n"
"\n"
"    # callback function for quit\n"
"    def quit_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Quit\\\"\"\n"
"        sys.exit()\n"
"\n"
"    # callback function for state\n"
"    def state_callback(self, action, parameter):\n"
"        print \"State is set to\", parameter.get_string()\n"
"        action.set_state(parameter)\n"
"\n"
"    # callback function for awesome\n"
"    def awesome_callback(self, action, parameter):\n"
"        action.set_state(GLib.Variant.new_boolean(not action.get_state()))\n"
"        if action.get_state().get_boolean() is True:\n"
"            print \"You checked \\\"Awesome\\\"\"\n"
"        else:\n"
"            print \"You unchecked \\\"Awesome\\\"\"\n"
"\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import GLib\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"MenuBar Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"\n"
"        # action without a state created (name, parameter type)\n"
"        copy_action = Gio.SimpleAction.new(\"copy\", None)\n"
"        # connected with the callback function\n"
"        copy_action.connect(\"activate\", self.copy_callback)\n"
"        # added to the window\n"
"        self.add_action(copy_action)\n"
"\n"
"        # action without a state created (name, parameter type)\n"
"        paste_action = Gio.SimpleAction.new(\"paste\", None)\n"
"        # connected with the callback function\n"
"        paste_action.connect(\"activate\", self.paste_callback)\n"
"        # added to the window\n"
"        self.add_action(paste_action)\n"
"\n"
"        # action with a state created (name, parameter type, initial state)\n"
"        shape_action = Gio.SimpleAction.new_stateful(\n"
"            \"shape\", GLib.VariantType.new('s'), GLib.Variant.new_string('line'))\n"
"        # connected to the callback function\n"
"        shape_action.connect(\"activate\", self.shape_callback)\n"
"        # added to the window\n"
"        self.add_action(shape_action)\n"
"\n"
"        # action with a state created\n"
"        about_action = Gio.SimpleAction.new(\"about\", None)\n"
"        # action connected to the callback function\n"
"        about_action.connect(\"activate\", self.about_callback)\n"
"        # action added to the application\n"
"        self.add_action(about_action)\n"
"\n"
"    # callback function for copy_action\n"
"    def copy_callback(self, action, parameter):\n"
"        print \"\\\"Copy\\\" activated\"\n"
"\n"
"    # callback function for paste_action\n"
"    def paste_callback(self, action, parameter):\n"
"        print \"\\\"Paste\\\" activated\"\n"
"\n"
"    # callback function for shape_action\n"
"    def shape_callback(self, action, parameter):\n"
"        print \"Shape is set to\", parameter.get_string()\n"
"        # Note that we set the state of the action!\n"
"        action.set_state(parameter)\n"
"\n"
"    # callback function for about (see the AboutDialog example)\n"
"    def about_callback(self, action, parameter):\n"
"        # a  Gtk.AboutDialog\n"
"        aboutdialog = Gtk.AboutDialog()\n"
"\n"
"        # lists of authors and documenters (will be used later)\n"
"        authors = [\"GNOME Documentation Team\"]\n"
"        documenters = [\"GNOME Documentation Team\"]\n"
"\n"
"        # we fill in the aboutdialog\n"
"        aboutdialog.set_program_name(\"MenuBar Example\")\n"
"        aboutdialog.set_copyright(\n"
"            \"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\")\n"
"        aboutdialog.set_authors(authors)\n"
"        aboutdialog.set_documenters(documenters)\n"
"        aboutdialog.set_website(\"http://developer.gnome.org\")\n"
"        aboutdialog.set_website_label(\"GNOME Developer Website\")\n"
"\n"
"        # to close the aboutdialog when \"close\" is clicked we connect the\n"
"        # \"response\" signal to on_close\n"
"        aboutdialog.connect(\"response\", self.on_close)\n"
"        # show the aboutdialog\n"
"        aboutdialog.show()\n"
"\n"
"    # a callback function to destroy the aboutdialog\n"
"    def on_close(self, action, parameter):\n"
"        action.destroy()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        # FIRST THING TO DO: do_startup()\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # action without a state created\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        # action connected to the callback function\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        # action added to the application\n"
"        self.add_action(new_action)\n"
"\n"
"        # action without a state created\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        # action connected to the callback function\n"
"        quit_action.connect(\"activate\", self.quit_callback)\n"
"        # action added to the application\n"
"        self.add_action(quit_action)\n"
"\n"
"        # action with a state created\n"
"        state_action = Gio.SimpleAction.new_stateful(\n"
"            \"state\",  GLib.VariantType.new('s'), GLib.Variant.new_string('off'))\n"
"        # action connected to the callback function\n"
"        state_action.connect(\"activate\", self.state_callback)\n"
"        # action added to the application\n"
"        self.add_action(state_action)\n"
"\n"
"        # action with a state created\n"
"        awesome_action = Gio.SimpleAction.new_stateful(\n"
"            \"awesome\", None, GLib.Variant.new_boolean(False))\n"
"        # action connected to the callback function\n"
"        awesome_action.connect(\"activate\", self.awesome_callback)\n"
"        # action added to the application\n"
"        self.add_action(awesome_action)\n"
"\n"
"        # a builder to add the UI designed with Glade to the grid:\n"
"        builder = Gtk.Builder()\n"
"        # get the file (if it is there)\n"
"        try:\n"
"            builder.add_from_file(\"menubar.ui\")\n"
"        except:\n"
"            print \"file not found\"\n"
"            sys.exit()\n"
"\n"
"        # we use the method Gtk.Application.set_menubar(menubar) to add the menubar\n"
"        # and the menu to the application (Note: NOT the window!)\n"
"        self.set_menubar(builder.get_object(\"menubar\"))\n"
"        self.set_app_menu(builder.get_object(\"appmenu\"))\n"
"\n"
"    # callback function for new\n"
"    def new_callback(self, action, parameter):\n"
"        print \"You clicked \\\"New\\\"\"\n"
"\n"
"    # callback function for quit\n"
"    def quit_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Quit\\\"\"\n"
"        sys.exit()\n"
"\n"
"    # callback function for state\n"
"    def state_callback(self, action, parameter):\n"
"        print \"State is set to\", parameter.get_string()\n"
"        action.set_state(parameter)\n"
"\n"
"    # callback function for awesome\n"
"    def awesome_callback(self, action, parameter):\n"
"        action.set_state(GLib.Variant.new_boolean(not action.get_state()))\n"
"        if action.get_state().get_boolean() is True:\n"
"            print \"You checked \\\"Awesome\\\"\"\n"
"        else:\n"
"            print \"You unchecked \\\"Awesome\\\"\"\n"
"\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/menubar.py.page:159
msgid "Mnemonics and Accelerators"
msgstr "Μνημονικές και επιταχυντές"

#. (itstool) path: section/p
#: C/menubar.py.page:160 C/menubar.vala.page:162
msgid ""
"Labels may contain mnemonics. Mnemonics are underlined characters in the "
"label, used for keyboard navigation. Mnemonics are created by placing an "
"underscore before the mnemonic character. For example \"_File\" instead of "
"just \"File\" in the menubar.ui label attribute."
msgstr ""
"Οι ετικέτες μπορεί να περιέχουν μνημονικούς κανόνες. Οι μνημονικοί είναι "
"υπογραμμισμένοι χαρακτήρες στην ετικέτα, χρησιμοποιούμενοι για περιήγηση "
"πληκτρολογίου. Οι μνημονικοί δημιουργούνται τοποθετώντας μια υπογράμμιση "
"πριν τον μνημονικό χαρακτήρα. Για παράδειγμα \"_File\" αντί για απλά \"File"
"\" στο γνώρισμα ετικέτας menubar.ui."

#. (itstool) path: section/p
#: C/menubar.py.page:161 C/menubar.vala.page:163
msgid ""
"The mnemonics are visible when you press the <key>Alt</key> key. Pressing "
"<keyseq><key>Alt</key><key>F</key></keyseq> will open the <gui>File</gui> "
"menu."
msgstr ""
"Οι μνημονικοί είναι ορατοί όταν πατάτε το πλήκτρο <key>Alt</key>. Πατώντας "
"<keyseq><key>Alt</key><key>F</key></keyseq> θα ανοίξει το μενού <gui>αρχείο</"
"gui>."

#. (itstool) path: section/p
#: C/menubar.py.page:163 C/menubar.vala.page:168
msgid ""
"Accelerators can be explicitly added in the UI definitions. For example, it "
"is common to be able to quit an application by pressing <keyseq><key>Ctrl</"
"key><key>Q</key></keyseq> or to save a file by pressing <keyseq><key>Ctrl</"
"key><key>S</key></keyseq>. To add an accelerator to the UI definition, you "
"simply need add an \"accel\" attribute to the item."
msgstr ""
"Οι επιταχυντές μπορούν να προστεθούν ρητά στους ορισμούς UI. Για παράδειγμα, "
"είναι κοινό να μπορείτε να κλείσετε μια εφαρμογή πατώντας <keyseq><key>Ctrl</"
"key><key>Q</key></keyseq> ή να αποθηκεύσετε ένα αρχείο πατώντας "
"<keyseq><key>Ctrl</key><key>S</key></keyseq>. Για την προσθήκη ενός "
"επιταχυντή στον ορισμό της UI, χρειάζεστε απλά να προσθέσετε ένα γνώρισμα "
"\"accel\" στο στοιχείο."

#. (itstool) path: section/p
#: C/menubar.py.page:164 C/menubar.vala.page:169
msgid ""
"<code mime=\"application/xml\">&lt;attribute name=\"accel\"&gt;&amp;lt;"
"Primary&amp;gt;q&lt;/attribute&gt;</code> will create the <keyseq><key>Ctrl</"
"key><key>Q</key></keyseq> sequence when added to the <code>Quit</code> label "
"item. Here, \"Primary\" refers to the <key>Ctrl</key> key on a PC or the "
"<key>⌘</key> key on a Mac."
msgstr ""
"Το <code mime=\"application/xml\">&lt;attribute name=\"accel\"&gt;&amp;lt;"
"Primary&amp;gt;q&lt;/attribute&gt;</code> θα δημιουργήσει την αλληλουχία "
"<keyseq><key>Ctrl</key><key>Q</key></keyseq> όταν προστίθεται στο στοιχείο "
"ετικέτας <code>'Εξοδος</code>. Εδώ, το \"Primary\" αναφέρεται στο πλήκτρο "
"<key>Ctrl</key> σε ένα προσωπικό υπολογιστή ή στο πλήκτρο <key>⌘</key> σε "
"ένα Mac."

#. (itstool) path: section/code
#: C/menubar.py.page:166 C/menubar.vala.page:171
#, no-wrap
msgid ""
"\n"
"&lt;item&gt;\n"
"  &lt;attribute name=\"label\"&gt;_Quit&lt;/attribute&gt;\n"
"  &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"  &lt;attribute name=\"accel\"&gt;&amp;lt;Primary&amp;gt;q&lt;/attribute&gt;\n"
"&lt;/item&gt;"
msgstr ""
"\n"
"&lt;item&gt;\n"
"  &lt;attribute name=\"label\"&gt;_Quit&lt;/attribute&gt;\n"
"  &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"  &lt;attribute name=\"accel\"&gt;&amp;lt;Primary&amp;gt;q&lt;/attribute&gt;\n"
"&lt;/item&gt;"

#. (itstool) path: section/title
#: C/menubar.py.page:174 C/menubar.vala.page:179
msgid "Translatable strings"
msgstr "Μεταφράσιμες συμβολοσειρές"

#. (itstool) path: section/p
#: C/menubar.py.page:175 C/menubar.vala.page:180
msgid ""
"Since GNOME applications are being translated into <link href=\"http://l10n."
"gnome.org/languages/\">many languages</link>, it is important that the "
"strings in your application are translable. To make a label translatable, "
"simple set <code>translatable=\"yes\"</code>:"
msgstr ""
"Επειδή οι εφαρμογές GNOME μεταφράζονται σε <link href=\"http://l10n.gnome."
"org/languages/\">πολλές γλώσσες</link>, είναι σημαντικό ότι οι συμβολοσειρές "
"στην εφαρμογή σας είναι μεταφράσιμες. Για να κάνετε μια ετικέτα μεταφράσιμη, "
"απλά βάλτε <code>translatable=\"yes\"</code>:"

#. (itstool) path: section/code
#: C/menubar.py.page:179
#, no-wrap
msgid "&lt;attribute name=\"label\" translatable=\"yes\"&gt;Quit&lt;/attribute&gt;"
msgstr "&lt;attribute name=\"label\" translatable=\"yes\"&gt;Quit&lt;/attribute&gt;"

#. (itstool) path: item/p
#: C/menubar.py.page:186
msgid ""
"<link href=\"http://developer.gnome.org/gio/unstable/GSimpleAction.html"
"\">GSimpleAction</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gio/unstable/GSimpleAction.html"
"\">GSimpleAction</link>"

#. (itstool) path: item/p
#: C/menubar.py.page:187 C/toolbar_builder.py.page:197
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkBuilder.html"
"\">GtkBuilder</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkBuilder.html"
"\">GtkBuilder</link>"

#. (itstool) path: info/title
#: C/menubar.vala.page:8
msgctxt "text"
msgid "MenuBar (Vala)"
msgstr "MenuBar (Vala)"

#. (itstool) path: item/p
#: C/menubar.vala.page:40
msgid ""
"Now we will create the .vala file and use GtkBuilder to import the "
"<file>menubar.ui</file> we just created."
msgstr ""
"Τώρα θα δημιουργήσουμε το αρχείο .vala και θα χρησιμοποιήσουμε GtkBuilder "
"για εισαγωγή του <file>menubar.ui</file> που μόλις δημιουργήσαμε."

#. (itstool) path: section/code
#: C/menubar.vala.page:44
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"MenuBar Example\");\n"
"\t\tthis.set_default_size (200, 200);\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication: Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Setup menubar. */\n"
"\t\t/* Get the UI file. */\n"
"\t\tvar builder = new Gtk.Builder ();\n"
"\t\ttry {\n"
"\t\t\tbuilder.add_from_file (\"menubar_basis.ui\");\n"
"\t\t/* Handle the exception. */\n"
"\t\t} catch (Error e) {\n"
"\t\t\terror (\"Unable to load file: %s\", e.message);\n"
"\t\t}\n"
"\n"
"\t\t/* Get the menubar from the builder. */\n"
"\t\tthis.menubar = builder.get_object (\"menubar\") as MenuModel;\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"MenuBar Example\");\n"
"\t\tthis.set_default_size (200, 200);\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication: Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Setup menubar. */\n"
"\t\t/* Get the UI file. */\n"
"\t\tvar builder = new Gtk.Builder ();\n"
"\t\ttry {\n"
"\t\t\tbuilder.add_from_file (\"menubar_basis.ui\");\n"
"\t\t/* Handle the exception. */\n"
"\t\t} catch (Error e) {\n"
"\t\t\terror (\"Unable to load file: %s\", e.message);\n"
"\t\t}\n"
"\n"
"\t\t/* Get the menubar from the builder. */\n"
"\t\tthis.menubar = builder.get_object (\"menubar\") as MenuModel;\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: section/p
#: C/menubar.vala.page:45
msgid ""
"Now, compile the vala file, and run it. The application should look like the "
"picture at the top of this page."
msgstr ""
"Τώρα, μεταγλωττίστε το αρχείο vala και εκτελέστε το. Η εφαρμογή θα πρέπει να "
"φαίνεται σαν την εικόνα στην κορυφή αυτής της σελίδας."

#. (itstool) path: section/p
#: C/menubar.vala.page:80
msgid ""
"Following this pattern, you can now add a <code>Copy</code> and a "
"<code>Paste</code> item to the <code>Edit</code> submenu, and an "
"<code>About</code> item to the <code>Help</code> submenu. We will hold off "
"on adding items to the <link xref=\"menubar.vala#choices\">Choices submenu</"
"link> until further in the tutorial."
msgstr ""
"Ακολουθώντας αυτό το μοτίβο, μπορείτε τώρα να προσθέσετε ένα στοιχείο "
"<code>Copy</code> and μια <code>Paste</code> στο υπομενού <code>Edit</code> "
"και ένα στοιχείο <code>About</code> στο υπομενού <code>Help</code>. Θα "
"καθυστερήσουμε την προσθήκη στοιχείων στο <link xref=\"menubar.vala#choices"
"\">υπομενού επιλογές</link> μέχρι παραπέρα στο μάθημα."

#. (itstool) path: note/p
#: C/menubar.vala.page:82
msgid ""
"You do not need to recompile the vala program if you only made changes to "
"the UI file. Just run your previously compiled application, and the UI "
"changes will be reflected."
msgstr ""
"Δεν χρειάζεστε ξαναμεταγλώττιση του προγράμματος vala εάν κάνετε αλλαγές "
"μόνο στο αρχείο UI. Απλά εκτελέστε την προηγουμένως μεταγλωττισμένη εφαρμογή "
"και οι αλλαγές UI θα ανακλαστούν."

#. (itstool) path: section/p
#: C/menubar.vala.page:88
msgid "This is a three step process."
msgstr "Αυτή είναι μια διεργασία τριών βημάτων."

#. (itstool) path: item/p
#: C/menubar.vala.page:90
msgid ""
"First we create the ActionEntry array in the MyApplication class. An "
"ActionEntry consists of:"
msgstr ""
"Πρώτα δημιουργούμε τον πίνακα ActionEntry στην κλάση MyApplication. Μια "
"ActionEntry αποτελείται από:"

#. (itstool) path: item/p
#: C/menubar.vala.page:93
msgid "the \"action name\" (mandatory)"
msgstr "το \"action name\" (υποχρεωτικό)"

#. (itstool) path: item/p
#: C/menubar.vala.page:94
msgid ""
"the callback function to connect to the \"activate\" signal of the action "
"(if applicable)"
msgstr ""
"τη συνάρτηση επανάκλησης για να συνδέσετε το σήμα \"activate\" της ενέργειας "
"(εάν γίνεται)"

#. (itstool) path: item/p
#: C/menubar.vala.page:95
msgid ""
"the type of the parameter that must be passed to the activate function for "
"the action (if applicable)"
msgstr ""
"τον τύπο της παραμέτρου που πρέπει να περαστεί στην ενεργοποιημένη συνάρτηση "
"για την ενέργεια (εάν γίνεται)"

#. (itstool) path: item/p
#: C/menubar.vala.page:96
msgid "the initial state for this action (if applicable)"
msgstr "την αρχική κατάσταση για αυτήν την ενέργεια (εάν γίνεται)"

#. (itstool) path: item/p
#: C/menubar.vala.page:97
msgid "the callback to connect to \"change-state\" signal (if applicable)"
msgstr "την επανάκληση σύνδεσης με το σήμα \"change-state\" (εάν γίνεται)"

#. (itstool) path: item/code
#: C/menubar.vala.page:99
#, no-wrap
msgid ""
"\n"
"const ActionEntry[] actions = {\n"
"    { \"new\", new_cb }, // {\"action name\", callback_function}\n"
"    { \"quit\", quit_cb }\n"
"};"
msgstr ""
"\n"
"const ActionEntry[] actions = {\n"
"    { \"new\", new_cb }, // {\"action name\", callback_function}\n"
"    { \"quit\", quit_cb }\n"
"}·"

#. (itstool) path: item/p
#: C/menubar.vala.page:106
msgid "Second, we create the callback functions the actions are connected to."
msgstr ""
"Δεύτερο, δημιουργούμε στις συναρτήσεις επανάκλησης τις ενέργειες που "
"σχετίζονται."

#. (itstool) path: item/code
#: C/menubar.vala.page:107
#, no-wrap
msgid ""
"\n"
"void new_cb (SimpleAction action, Variant? parameter) {\n"
"    print (\"You clicked \\\"New\\\"\\n\");\n"
"    //new MyWindow (this).show ();\n"
"}\n"
"\n"
"void quit_cb (SimpleAction action, Variant? parameter) {\n"
"    print (\"You clicked \\\"Quit\\\"\\n\");\n"
"    this.quit ();\n"
"}"
msgstr ""
"\n"
"void new_cb (SimpleAction action, Variant? parameter) {\n"
"    print (\"You clicked \\\"New\\\"\\n\");\n"
"    //new MyWindow (this).show ();\n"
"}\n"
"\n"
"void quit_cb (SimpleAction action, Variant? parameter) {\n"
"    print (\"You clicked \\\"Quit\\\"\\n\");\n"
"    this.quit ();\n"
"}"

#. (itstool) path: item/p
#: C/menubar.vala.page:118
msgid ""
"And lastly, we connect the menu items to the actions in the XML file by "
"adding the \"action\" attribute:"
msgstr ""
"Και τελευταία, συνδέουμε τα στοιχεία μενού στις ενέργειες στο αρχείο XML "
"προσθέτοντας το γνώρισμα \"action\":"

#. (itstool) path: item/code
#: C/menubar.vala.page:119
#, no-wrap
msgid ""
"\n"
"&lt;item&gt;\n"
"  &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"  &lt;attribute name=\"action\"&gt;app.new&lt;/attribute&gt;\n"
"&lt;/item&gt;\n"
"&lt;item&gt;\n"
"  &lt;attribute name=\"label\"&gt;Quit&lt;/attribute&gt;\n"
"  &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"&lt;/item&gt;"
msgstr ""
"\n"
"&lt;item&gt;\n"
"  &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"  &lt;attribute name=\"action\"&gt;app.new&lt;/attribute&gt;\n"
"&lt;/item&gt;\n"
"&lt;item&gt;\n"
"  &lt;attribute name=\"label\"&gt;Quit&lt;/attribute&gt;\n"
"  &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"&lt;/item&gt;"

#. (itstool) path: section/p
#: C/menubar.vala.page:135
msgid ""
"Lines 30 to 80 inclusive of the <link xref=\"menubar.vala#xml-code\"/> "
"demonstrate the XML code used to create the UI for <gui>Choices</gui> menu."
msgstr ""
"Γραμμές 30 έως 80 συμπεριλαμβανόμενης της εμφάνισης <link xref=\"menubar."
"vala#xml-code\"/> του χρησιμοποιούμενου κώδικα XML για δημιουργία της UI για "
"το μενού <gui>επιλογές</gui>."

#. (itstool) path: section/p
#: C/menubar.vala.page:146
msgid ""
"The complete example files contain both application actions and window "
"applications. The window actions are the ones usually included in the <link "
"xref=\"gmenu.vala\">application menu</link> also. It is not good practice to "
"include window actions in the applcation menu. For demonstration purposes, "
"the complete example files which follow include XML in the UI file which "
"creates the application menu which includes a \"New\" and \"Open\" item, and "
"these are hooked up to the same actions as the menubar items of the same "
"name."
msgstr ""
"Τα πλήρη αρχεία παραδείγματος περιέχουν αμφότερες τις ενέργειες εφαρμογής "
"και εφαρμογές παραθύρου. Οι ενέργειες παραθύρου είναι αυτές που συνήθως "
"συμπεριλαμβάνονται στο <link xref=\"gmenu.vala\">μενού εφαρμογής</link> "
"επίσης. Δεν είναι καλή πρακτική να συμπεριλαμβάνετε ενέργειες παραθύρου στο "
"μενού της εφαρμογής. Για σκοπούς επίδειξης, τα πλήρη αρχεία του "
"παραδείγματος που ακολουθεί περιέχουν XML στο αρχείο UI που δημιουργεί το "
"μενού εφαρμογής που περιλαμβάνει τα στοιχεία \"New\" και \"Open\" και αυτά "
"συνδέονται με τις ίδιες ενέργειες όπως τα στοιχεία της γραμμής μενού του "
"ίδιου ονόματος."

#. (itstool) path: section/title
#: C/menubar.vala.page:157
msgid "Complete Vala file for this example"
msgstr "Πλήρες αρχείο Vala για αυτό το παράδειγμα"

#. (itstool) path: section/code
#: C/menubar.vala.page:158
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Callback functions for the window actions. */\n"
"\tvoid copy_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"\\\"Copy\\\" activated\\n\");\n"
"\t}\n"
"\n"
"\tvoid paste_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"\\\"Paste\\\" activated\\n\");\n"
"\t}\n"
"\n"
"\tvoid shape_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"shape is set to %s\\n\", parameter.get_string(null));\n"
"\t\taction.set_state (parameter);\n"
"\t}\n"
"\n"
"\t/* Create the window actions. */\n"
"\tconst ActionEntry[] actions = {\n"
"\t\t/*{ \"action name\", cb to connect to \"activate\" signal, parameter type,\n"
"\t\t     initial state, cb to connect to \"change-state\" signal } */\n"
"\t\t{ \"copy\", copy_cb },\n"
"\t\t{ \"paste\", paste_cb },\n"
"\t\t{ \"shape\", shape_cb, \"s\", \"'line'\"}\n"
"\t};\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"MenuBar Example\");\n"
"\t\tthis.set_default_size (200, 200);\n"
"\n"
"\t\t/* Setup window actions. */\n"
"\t\tthis.add_action_entries (actions, this);\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication: Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\t/* Callback functions for the application actions. */\n"
"\tvoid new_cb (SimpleAction action, Variant? parameter) {\n"
"\t\t//new MyWindow (this).show ();\n"
"\t\tprint (\"You clicked \\\"New\\\"\\n\");\n"
"\t}\n"
"\n"
"\tvoid quit_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"Quit\\\"\\n\");\n"
"\t\tthis.quit ();\n"
"\t}\n"
"\n"
"\tvoid awesome_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tvar active = action.get_state ().get_boolean ();\n"
"\t\taction.set_state (new Variant.boolean (!active));\n"
"\t\tif (active)\n"
"\t\t\tprint (\"You unchecked \\\"Awesome\\\"\\n\");\n"
"\t\telse\n"
"\t\t\tprint (\"You checked \\\"Awesome\\\"\\n\");\n"
"\t}\n"
"\n"
"\tvoid state_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"state is set to %s\\n\", parameter.get_string(null));\n"
"\t\taction.set_state (parameter);\n"
"\t}\n"
"\n"
"\t/* Create the application actions. */\n"
"\tconst ActionEntry[] actions = {\n"
"\t\t{ \"new\", new_cb },\n"
"\t\t{ \"quit\", quit_cb },\n"
"\t\t{ \"awesome\", awesome_cb, null, \"false\" },\n"
"\t\t{ \"state\", state_cb, \"s\", \"'off'\" }\n"
"\t};\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Setup application actions. */\n"
"\t\tthis.add_action_entries (actions, this);\n"
"\n"
"\t\t/* Setup menubar and app_menu. */\n"
"\t\t/* Get the UI file. */\n"
"\t\tvar builder = new Gtk.Builder ();\n"
"\t\ttry {\n"
"\t\t\tbuilder.add_from_file (\"menubar.ui\");\n"
"\t\t} catch (Error e) {\n"
"\t\t\terror (\"Unable to load file: %s\", e.message);\n"
"\t\t}\n"
"\n"
"\t\t/* Get the menubar from the builder. */\n"
"\t\tthis.menubar = builder.get_object (\"menubar\") as MenuModel;\n"
"\n"
"\t\t/* Get the app_menu from the builder. */\n"
"\t\tthis.app_menu = builder.get_object (\"appmenu\") as MenuModel;\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Callback functions for the window actions. */\n"
"\tvoid copy_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"\\\"Copy\\\" activated\\n\");\n"
"\t}\n"
"\n"
"\tvoid paste_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"\\\"Paste\\\" activated\\n\");\n"
"\t}\n"
"\n"
"\tvoid shape_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"shape is set to %s\\n\", parameter.get_string(null));\n"
"\t\taction.set_state (parameter);\n"
"\t}\n"
"\n"
"\t/* Create the window actions. */\n"
"\tconst ActionEntry[] actions = {\n"
"\t\t/*{ \"action name\", cb to connect to \"activate\" signal, parameter type,\n"
"\t\t     initial state, cb to connect to \"change-state\" signal } */\n"
"\t\t{ \"copy\", copy_cb },\n"
"\t\t{ \"paste\", paste_cb },\n"
"\t\t{ \"shape\", shape_cb, \"s\", \"'line'\"}\n"
"\t};\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"MenuBar Example\");\n"
"\t\tthis.set_default_size (200, 200);\n"
"\n"
"\t\t/* Setup window actions. */\n"
"\t\tthis.add_action_entries (actions, this);\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication: Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\t/* Callback functions for the application actions. */\n"
"\tvoid new_cb (SimpleAction action, Variant? parameter) {\n"
"\t\t//new MyWindow (this).show ();\n"
"\t\tprint (\"You clicked \\\"New\\\"\\n\");\n"
"\t}\n"
"\n"
"\tvoid quit_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"Quit\\\"\\n\");\n"
"\t\tthis.quit ();\n"
"\t}\n"
"\n"
"\tvoid awesome_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tvar active = action.get_state ().get_boolean ();\n"
"\t\taction.set_state (new Variant.boolean (!active));\n"
"\t\tif (active)\n"
"\t\t\tprint (\"You unchecked \\\"Awesome\\\"\\n\");\n"
"\t\telse\n"
"\t\t\tprint (\"You checked \\\"Awesome\\\"\\n\");\n"
"\t}\n"
"\n"
"\tvoid state_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"state is set to %s\\n\", parameter.get_string(null));\n"
"\t\taction.set_state (parameter);\n"
"\t}\n"
"\n"
"\t/* Create the application actions. */\n"
"\tconst ActionEntry[] actions = {\n"
"\t\t{ \"new\", new_cb },\n"
"\t\t{ \"quit\", quit_cb },\n"
"\t\t{ \"awesome\", awesome_cb, null, \"false\" },\n"
"\t\t{ \"state\", state_cb, \"s\", \"'off'\" }\n"
"\t};\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Setup application actions. */\n"
"\t\tthis.add_action_entries (actions, this);\n"
"\n"
"\t\t/* Setup menubar and app_menu. */\n"
"\t\t/* Get the UI file. */\n"
"\t\tvar builder = new Gtk.Builder ();\n"
"\t\ttry {\n"
"\t\t\tbuilder.add_from_file (\"menubar.ui\");\n"
"\t\t} catch (Error e) {\n"
"\t\t\terror (\"Unable to load file: %s\", e.message);\n"
"\t\t}\n"
"\n"
"\t\t/* Get the menubar from the builder. */\n"
"\t\tthis.menubar = builder.get_object (\"menubar\") as MenuModel;\n"
"\n"
"\t\t/* Get the app_menu from the builder. */\n"
"\t\tthis.app_menu = builder.get_object (\"appmenu\") as MenuModel;\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: section/title
#: C/menubar.vala.page:161
msgid "Mnemonics"
msgstr "Μνημονικά"

#. (itstool) path: section/title
#: C/menubar.vala.page:167
msgid "Accelerators"
msgstr "Επιταχυντές"

#. (itstool) path: section/p
#: C/menubar.vala.page:183
msgid ""
"<code mime=\"application/xml\">&lt;attribute name=\"label\" translatable="
"\"yes\"&gt;Quit&lt;/attribute&gt;</code>"
msgstr ""
"<code mime=\"application/xml\">&lt;attribute name=\"label\" translatable="
"\"yes\"&gt;Quit&lt;/attribute&gt;</code>"

#. (itstool) path: item/p
#: C/menubar.vala.page:192
msgid ""
"<link href=\"http://valadoc.org/gio-2.0/GLib.ActionEntry.html\">Glib."
"ActionEntry</link>"
msgstr ""
"<link href=\"http://valadoc.org/gio-2.0/GLib.ActionEntry.html\">Glib."
"ActionEntry</link>"

#. (itstool) path: item/p
#: C/menubar.vala.page:193
msgid ""
"<link href=\"http://valadoc.org/gio-2.0/Gtk.Builder.html\">Gtk.Builder</link>"
msgstr ""
"<link href=\"http://valadoc.org/gio-2.0/Gtk.Builder.html\">Gtk.Builder</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/menubutton.c.page:22 C/menubutton.js.page:22 C/menubutton.py.page:29
#: C/menubutton.vala.page:22
msgctxt "_"
msgid ""
"external ref='media/menubutton.png' md5='99eedc5ef2d6c56d32ca9ae7f3f3320f'"
msgstr ""
"external ref='media/menubutton.png' md5='99eedc5ef2d6c56d32ca9ae7f3f3320f'"

#. (itstool) path: info/title
#: C/menubutton.c.page:8 C/menubutton.py.page:8
msgctxt "text"
msgid "MenuButton"
msgstr "MenuButton"

#. (itstool) path: info/desc
#: C/menubutton.c.page:18 C/menubutton.js.page:18 C/menubutton.py.page:25
#: C/menubutton.vala.page:18
msgid "A widget that shows a menu when clicked on"
msgstr "Ένα γραφικό στοιχείο που εμφανίζει ένα μενού όταν πατηθεί"

#. (itstool) path: page/title
#: C/menubutton.c.page:21 C/menubutton.js.page:21 C/menubutton.py.page:28
#: C/menubutton.vala.page:21
msgid "MenuButton"
msgstr "MenuButton"

#. (itstool) path: page/p
#: C/menubutton.c.page:23 C/menubutton.js.page:23 C/menubutton.py.page:30
#: C/menubutton.vala.page:23
msgid ""
"The GtkMenuButton widget is used to display a menu when clicked on. This "
"menu can be provided either as a GtkMenu, or an abstract GMenuModel. The "
"GtkMenuButton widget can hold any valid child widget. That is, it can hold "
"almost any other standard GtkWidget. The most commonly used child is the "
"provided GtkArrow."
msgstr ""
"Το γραφικό στοιχείο GtkMenuButton χρησιμοποιείται για την εμφάνιση ενός "
"μενού όταν πατιέται. Αυτό το μενού μπορεί να δοθεί είτε ως GtkMenu, ή ως ένα "
"αποσπασμένο GMenuModel. Το γραφικό στοιχείο GtkMenuButton μπορεί να "
"κρατήσει οποιοδήποτε θυγατρικό γραφικό στοιχείο. Δηλαδή, μπορεί να κρατήσει "
"σχεδόν κάθε άλλο τυπικό GtkWidget. Το πιο συχνά χρησιμοποιούμενο θυγατρικό "
"είναι το παρεχόμενο GtkArrow."

#. (itstool) path: note/p
#: C/menubutton.c.page:25 C/menubutton.js.page:27
msgid "You need to be running GNOME 3.6 or later for the MenuButton to work."
msgstr ""
"Χρειάζεται να τρέξετε το GNOME 3.6 ή μεταγενέστερο για να δουλέψει το "
"MenuButton."

#. (itstool) path: section/code
#: C/menubutton.c.page:31
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"/* Callback function for the undo action */\n"
"static void\n"
"about_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"About\\\"\\n\");\n"
"}\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GMenu *submenu;\n"
"  GtkWidget *grid;\n"
"  GMenu *menumodel;\n"
"  GtkWidget *window;\n"
"  GtkWidget *menubutton;\n"
"  GSimpleAction *about_action;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  grid = gtk_grid_new ();\n"
"\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"MenuButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 600, 400);\n"
"\n"
"  menubutton = gtk_menu_button_new ();\n"
"  gtk_widget_set_size_request (menubutton, 80, 35);\n"
"\n"
"  gtk_grid_attach (GTK_GRID (grid), menubutton, 0, 0, 1, 1);\n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  menumodel = g_menu_new ();\n"
"  g_menu_append (menumodel, \"New\", \"app.new\");\n"
"  g_menu_append (menumodel, \"About\", \"win.about\");\n"
"\n"
"  submenu = g_menu_new ();\n"
"  g_menu_append_submenu (menumodel, \"Other\", G_MENU_MODEL (submenu));\n"
"  g_menu_append (submenu, \"Quit\", \"app.quit\");\n"
"  gtk_menu_button_set_menu_model (GTK_MENU_BUTTON (menubutton), G_MENU_MODEL (menumodel));\n"
"\n"
"  about_action = g_simple_action_new (\"about\", NULL);\n"
"  g_signal_connect (about_action, \"activate\", G_CALLBACK (about_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (about_action));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"static void\n"
"new_callback (GSimpleAction *simple,\n"
"              GVariant      *parameter,\n"
"              gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"New\\\"\\n\");\n"
"}\n"
"\n"
"static void\n"
"quit_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GSimpleAction *new_action;\n"
"  GSimpleAction *quit_action;\n"
"\n"
"  new_action = g_simple_action_new (\"new\", NULL);\n"
"  g_signal_connect (new_action, \"activate\", G_CALLBACK (new_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (new_action));\n"
"\n"
"  quit_action = g_simple_action_new (\"quit\", NULL);\n"
"  g_signal_connect (quit_action, \"activate\", G_CALLBACK (quit_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (quit_action));\n"
"}\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""
"#περιλαμβάνουν &lt;gtk/gtk.h&gt;\n"
"\n"
"/* η συνάρτηση επανάκλησης για την ενέργεια αναίρεσης */\n"
"static void\n"
"about_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"About\\\"\\n\");\n"
"}\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GMenu *submenu;\n"
"  GtkWidget *grid;\n"
"  GMenu *menumodel;\n"
"  GtkWidget *window;\n"
"  GtkWidget *menubutton;\n"
"  GSimpleAction *about_action;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  grid = gtk_grid_new ();\n"
"\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"MenuButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 600, 400);\n"
"\n"
"  menubutton = gtk_menu_button_new ();\n"
"  gtk_widget_set_size_request (menubutton, 80, 35);\n"
"\n"
"  gtk_grid_attach (GTK_GRID (grid), menubutton, 0, 0, 1, 1);\n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  menumodel = g_menu_new ();\n"
"  g_menu_append (menumodel, \"New\", \"app.new\");\n"
"  g_menu_append (menumodel, \"About\", \"win.about\");\n"
"\n"
"  submenu = g_menu_new ();\n"
"  g_menu_append_submenu (menumodel, \"Other\", G_MENU_MODEL (submenu));\n"
"  g_menu_append (submenu, \"Quit\", \"app.quit\");\n"
"  gtk_menu_button_set_menu_model (GTK_MENU_BUTTON (menubutton), G_MENU_MODEL (menumodel));\n"
"\n"
"  about_action = g_simple_action_new (\"about\", NULL);\n"
"  g_signal_connect (about_action, \"activate\", G_CALLBACK (about_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (about_action));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"static void\n"
"new_callback (GSimpleAction *simple,\n"
"              GVariant      *parameter,\n"
"              gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"New\\\"\\n\");\n"
"}\n"
"\n"
"static void\n"
"quit_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GSimpleAction *new_action;\n"
"  GSimpleAction *quit_action;\n"
"\n"
"  new_action = g_simple_action_new (\"new\", NULL);\n"
"  g_signal_connect (new_action, \"activate\", G_CALLBACK (new_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (new_action));\n"
"\n"
"  quit_action = g_simple_action_new (\"quit\", NULL);\n"
"  g_signal_connect (quit_action, \"activate\", G_CALLBACK (quit_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (quit_action));\n"
"}\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/menubutton.c.page:38
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkMenuButton.html"
"\">GtkMenuButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkMenuButton.html"
"\">GtkMenuButton</link>"

#. (itstool) path: item/p
#: C/menubutton.c.page:39
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkMenu.html"
"\">GtkMenu</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkMenu.html"
"\">GtkMenu</link>"

#. (itstool) path: item/p
#: C/menubutton.c.page:40
msgid ""
"<link href=\"https://developer.gnome.org/gio/unstable/GMenuModel.html"
"\">GMenuModel</link>"
msgstr ""
"<link href=\"https://developer.gnome.org/gio/unstable/GMenuModel.html"
"\">GMenuModel</link>"

#. (itstool) path: item/p
#: C/menubutton.c.page:41
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkArrow.html"
"\">GtkArrow</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkArrow.html"
"\">GtkArrow</link>"

#. (itstool) path: info/title
#: C/menubutton.js.page:8
msgctxt "text"
msgid "MenuButton (JavaScript)"
msgstr "MenuButton (JavaScript)"

#. (itstool) path: credit/name
#: C/menubutton.js.page:13
msgid "Anna Zacchi"
msgstr "Anna Zacchi"

#. (itstool) path: page/code
#: C/menubutton.js.page:28
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class ({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application ({ application_id: 'org.example.myapp',\n"
"                                                  flags: Gio.ApplicationFlags.FLAGS_NONE });\n"
"\n"
"       //connect to 'activate' and 'startup' signals to the callback functions\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI (in this case it's just the ApplicationWindow)\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"MenuButton Example\" });\n"
"        this._window.set_default_size(600, 400);\n"
"        this.grid = new Gtk.Grid();\n"
"        this._window.add(this.grid);\n"
"\n"
"\n"
"        this._menuButton = new Gtk.MenuButton();\n"
"        this.grid.attach(this._menuButton, 0, 0, 1, 1 );\n"
"        this.menu = new Gtk.Menu.new_from_model(this.menuModel);\n"
"\n"
"        this.menu.show();\n"
"        this._menuButton.set_menu_model (this.menuModel);\n"
"        this._menuButton.set_size_request(80, 35);\n"
"        this._menuButton.show();\n"
"\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    _showNew: function() {\n"
"    print(\"You clicked \\\"New\\\"\");\n"
"    },\n"
"\n"
"    _showAbout: function() {\n"
"        print(\"You clicked \\\"About\\\"\");\n"
"    },\n"
"\n"
"    //create the menu items and connect the signals to the callback functions.\n"
"    _initMenus: function() {\n"
"        let newAction = new Gio.SimpleAction({ name: 'new' });\n"
"        newAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showNew();\n"
"            }));\n"
"        this.application.add_action(newAction);\n"
"\n"
"        let aboutAction = new Gio.SimpleAction({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        let quitAction = new Gio.SimpleAction({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"         this.application.add_action(quitAction);\n"
"\n"
"        this.menuModel = new Gio.Menu();\n"
"\n"
"        this.menuItemNew = Gio.MenuItem.new(\"New\", 'app.new');\n"
"        this.menuItemAbout = Gio.MenuItem.new(\"About\", 'app.about');\n"
"        this.fileMenuItem = Gio.MenuItem.new(\"Other\", null);\n"
"\n"
"        this.menuModel.append_item(this.menuItemNew);\n"
"        this.menuModel.append_item(this.menuItemAbout);\n"
"\n"
"        //submenu\n"
"        this.subMenu = new Gio.Menu();\n"
"        this.fileMenuItem.set_submenu(this.subMenu);\n"
"        this.menuItemQuit = Gio.MenuItem.new(\"Quit\", 'app.quit');\n"
"        this.subMenu.append_item(this.menuItemQuit);\n"
"        this.menuModel.append_item(this.fileMenuItem);\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    //callback function for 'startup' signal\n"
"    _onStartup: function() {\n"
"        //You must call _initMenus() before calling _buildUI().\n"
"        this._initMenus();\n"
"        this._buildUI();\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application();\n"
"app.application.run(ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class ({\n"
"    Name: 'Application',\n"
"\n"
"    //δημιουργία της εφαρμογής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application ({ application_id: 'org.example.myapp',\n"
"                                                  flags: Gio.ApplicationFlags.FLAGS_NONE });\n"
"\n"
"       //σύνδεση στα σήματα 'activate' και 'startup' για επανάκληση συναρτήσεων\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //δημιουργία της γραφικής διεπαφής (σε αυτήν την περίπτωση είναι απλά το ApplicationWindow)\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"MenuButton Example\" });\n"
"        this._window.set_default_size(600, 400);\n"
"        this.grid = new Gtk.Grid();\n"
"        this._window.add(this.grid);\n"
"\n"
"\n"
"        this._menuButton = new Gtk.MenuButton();\n"
"        this.grid.attach(this._menuButton, 0, 0, 1, 1 );\n"
"        this.menu = new Gtk.Menu.new_from_model(this.menuModel);\n"
"\n"
"        this.menu.show();\n"
"        this._menuButton.set_menu_model (this.menuModel);\n"
"        this._menuButton.set_size_request(80, 35);\n"
"        this._menuButton.show();\n"
"\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    _showNew: function() {\n"
"    print(\"You clicked \\\"New\\\"\");\n"
"    },\n"
"\n"
"    _showAbout: function() {\n"
"        print(\"You clicked \\\"About\\\"\");\n"
"    },\n"
"\n"
"    //δημιουργία των στοιχείων μενού και σύνδεση των σημάτων με τις συναρτήσεις επανάκλησης.\n"
"    _initMenus: function() {\n"
"        let newAction = new Gio.SimpleAction({ name: 'new' });\n"
"        newAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showNew();\n"
"            }));\n"
"        this.application.add_action(newAction);\n"
"\n"
"        let aboutAction = new Gio.SimpleAction({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        let quitAction = new Gio.SimpleAction({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"         this.application.add_action(quitAction);\n"
"\n"
"        this.menuModel = new Gio.Menu();\n"
"\n"
"        this.menuItemNew = Gio.MenuItem.new(\"New\", 'app.new');\n"
"        this.menuItemAbout = Gio.MenuItem.new(\"About\", 'app.about');\n"
"        this.fileMenuItem = Gio.MenuItem.new(\"Other\", null);\n"
"\n"
"        this.menuModel.append_item(this.menuItemNew);\n"
"        this.menuModel.append_item(this.menuItemAbout);\n"
"\n"
"        //submenu\n"
"        this.subMenu = new Gio.Menu();\n"
"        this.fileMenuItem.set_submenu(this.subMenu);\n"
"        this.menuItemQuit = Gio.MenuItem.new(\"Quit\", 'app.quit');\n"
"        this.subMenu.append_item(this.menuItemQuit);\n"
"        this.menuModel.append_item(this.fileMenuItem);\n"
"    },\n"
"\n"
"    //συνάρτηση επανάκλησης για το σήμα 'activate'\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    //συνάρτηση επανάκλησης για το σήμα 'startup'\n"
"    _onStartup: function() {\n"
"        //You must call _initMenus() before calling _buildUI().\n"
"        this._initMenus();\n"
"        this._buildUI();\n"
"    }\n"
"});\n"
"\n"
"//εκτέλεση της εφαρμογής\n"
"let app = new Application();\n"
"app.application.run(ARGV);\n"

#. (itstool) path: item/p
#: C/menubutton.js.page:33 C/menubutton.vala.page:33
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/3.5/gtk3-GtkMenuButton.html"
"\">MenuButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/3.5/gtk3-GtkMenuButton.html"
"\">MenuButton</link>"

#. (itstool) path: note/p
#: C/menubutton.py.page:32 C/menubutton.vala.page:27
msgid "You need to be running GNOME 3.6 for the MenuButton to work."
msgstr "Χρειάζεται να τρέξετε το GNOME 3.6 για να δουλέψει το MenuButton."

#. (itstool) path: section/code
#: C/menubutton.py.page:38
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Menubutton Example\", application=app)\n"
"        self.set_default_size(600, 400)\n"
"\n"
"        grid = Gtk.Grid()\n"
"\n"
"        # a menubutton\n"
"        menubutton = Gtk.MenuButton()\n"
"        menubutton.set_size_request(80, 35)\n"
"\n"
"        grid.attach(menubutton, 0, 0, 1, 1)\n"
"\n"
"        # a menu with two actions\n"
"        menumodel = Gio.Menu()\n"
"        menumodel.append(\"New\", \"app.new\")\n"
"        menumodel.append(\"About\", \"win.about\")\n"
"\n"
"        # a submenu with one action for the menu\n"
"        submenu = Gio.Menu()\n"
"        submenu.append(\"Quit\", \"app.quit\")\n"
"        menumodel.append_submenu(\"Other\", submenu)\n"
"\n"
"        # the menu is set as the menu of the menubutton\n"
"        menubutton.set_menu_model(menumodel)\n"
"\n"
"        # the action related to the window (about)\n"
"        about_action = Gio.SimpleAction.new(\"about\", None)\n"
"        about_action.connect(\"activate\", self.about_callback)\n"
"        self.add_action(about_action)\n"
"\n"
"        self.add(grid)\n"
"\n"
"    # callback for \"about\"\n"
"    def about_callback(self, action, parameter):\n"
"        print \"You clicked \\\"About\\\"\"\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        #  the actions related to the application\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        self.add_action(new_action)\n"
"\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_callback)\n"
"        self.add_action(quit_action)\n"
"\n"
"    # callback functions for the actions related to the application\n"
"    def new_callback(self, action, parameter):\n"
"        print \"You clicked \\\"New\\\"\"\n"
"\n"
"    def quit_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Quit\\\"\"\n"
"        self.quit()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Menubutton Example\", application=app)\n"
"        self.set_default_size(600, 400)\n"
"\n"
"        grid = Gtk.Grid()\n"
"\n"
"        # a menubutton\n"
"        menubutton = Gtk.MenuButton()\n"
"        menubutton.set_size_request(80, 35)\n"
"\n"
"        grid.attach(menubutton, 0, 0, 1, 1)\n"
"\n"
"        # a menu with two actions\n"
"        menumodel = Gio.Menu()\n"
"        menumodel.append(\"New\", \"app.new\")\n"
"        menumodel.append(\"About\", \"win.about\")\n"
"\n"
"        # a submenu with one action for the menu\n"
"        submenu = Gio.Menu()\n"
"        submenu.append(\"Quit\", \"app.quit\")\n"
"        menumodel.append_submenu(\"Other\", submenu)\n"
"\n"
"        # the menu is set as the menu of the menubutton\n"
"        menubutton.set_menu_model(menumodel)\n"
"\n"
"        # the action related to the window (about)\n"
"        about_action = Gio.SimpleAction.new(\"about\", None)\n"
"        about_action.connect(\"activate\", self.about_callback)\n"
"        self.add_action(about_action)\n"
"\n"
"        self.add(grid)\n"
"\n"
"    # callback for \"about\"\n"
"    def about_callback(self, action, parameter):\n"
"        print \"You clicked \\\"About\\\"\"\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        #  the actions related to the application\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        self.add_action(new_action)\n"
"\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_callback)\n"
"        self.add_action(quit_action)\n"
"\n"
"    # callback functions for the actions related to the application\n"
"    def new_callback(self, action, parameter):\n"
"        print \"You clicked \\\"New\\\"\"\n"
"\n"
"    def quit_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Quit\\\"\"\n"
"        self.quit()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/menubutton.py.page:42
msgid "Useful methods for a MenuButton widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο MenuButton"

#. (itstool) path: section/p
#: C/menubutton.py.page:43
msgid ""
"In line 33 the signal <code>\"activate\"</code> from the action "
"<code>about_action</code> is connected to the callback function "
"<code>about_callback()</code> using <code><var>action</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"Στη γραμμή 33 το σήμα <code>\"activate\"</code> από την ενέργεια "
"<code>about_action</code> συνδέεται με τη συνάρτηση επανάκλησης "
"<code>about_callback()</code> χρησιμοποιώντας <code><var>action</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. Δείτε <link "
"xref=\"signals-callbacks.py\"/> για μια πιο λεπτομερή εξήγηση."

#. (itstool) path: section/p
#: C/menubutton.py.page:45
msgid ""
"The positioning of the menu is determined by the \"direction\" property of "
"the menu button and the \"halign\" or \"valign\" properties of the menu. For "
"example, when the direction is <code>Gtk.ArrowType.DOWN</code> (other "
"option: <code>UP</code>) and the horizontal alignment is <code>Gtk.Align."
"START</code> (other options: <code>CENTER</code> and <code>END</code>), the "
"menu will be positioned below the button, with the starting edge (depending "
"on the text direction) of the menu aligned with the starting edge of the "
"button. If there is not enough space below the button, the menu is popped up "
"above the button instead. If the alignment would move part of the menu "
"offscreen, it is 'pushed in'."
msgstr ""
"Η τοποθέτηση ενός μενού καθορίζεται από την ιδιότητα \"direction\" του "
"κουμπιού μενού και τις ιδιότητες του μενού \"halign\" ή \"valign\". Για "
"παράδειγμα, όταν η κατεύθυνση είναι <code>Gtk.ArrowType.DOWN</code> (άλλη "
"επιλογή: <code>UP</code>) και η οριζόντια στοίχιση είναι <code>Gtk.Align."
"START</code> (άλλες επιλογές: <code>CENTER</code> και <code>END</code>), το "
"μενού θα τοποθετηθεί κάτω από το κουμπί, με το αρχικό άκρο (ανάλογα με την "
"κατεύθυνση του κειμένου) του μενού στοιχισμένο με το αρχικό άκρο του "
"κουμπιού. Εάν δεν υπάρχει αρκετός χώρος κάτω από το κουμπί, το μενού "
"αναδύεται πάνω από το κουμπί. Εάν η στοίχιση μπορεί να μετακινήσει μέρος του "
"μενού εκτός οθόνης, είναι 'pushed in'."

#. (itstool) path: section/p
#: C/menubutton.py.page:47
msgid ""
"In the case of vertical alignment, the possible ArrowType directions are "
"<code>LEFT</code> and <code>RIGHT</code> and the vertical alignment is again "
"<code>START</code>, <code>CENTER</code> or <code>END</code>."
msgstr ""
"Στην περίπτωση μιας κάθετης στοίχισης, οι δυνατές κατευθύνσεις είναι "
"<code>LEFT</code> και <code>RIGHT</code> και η κάθετη στοίχιση είναι ξανά "
"<code>START</code>, <code>CENTER</code> ή <code>END</code>."

#. (itstool) path: section/p
#: C/menubutton.py.page:49
msgid ""
"<code>set_align_widget(alignment)</code> and <code>set_direction(direction)</"
"code> can be used to set these properties."
msgstr ""
"Οι <code>set_align_widget(alignment)</code> and "
"<code>set_direction(direction)</code> μπορούν να χρησιμοποιηθούν για να "
"οριστούν αυτές οι ιδιότητες."

#. (itstool) path: item/p
#: C/menubutton.py.page:56
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkMenuButton.html"
"\">MenuButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkMenuButton.html"
"\">MenuButton</link>"

#. (itstool) path: info/title
#: C/menubutton.vala.page:8
msgctxt "text"
msgid "MenuButton (Vala)"
msgstr "MenuButton (Vala)"

#. (itstool) path: page/code
#: C/menubutton.vala.page:28
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"MenuButton Example\");\n"
"\t\tthis.set_default_size (600, 400);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\n"
"\t\tvar menubutton = new Gtk.MenuButton();\n"
"\t\tmenubutton.set_size_request (80, 35);\n"
"\n"
"\t\tvar menumodel = new Menu ();\n"
"\t\tmenumodel.append (\"New\", \"app.new\");\n"
"\t\tmenumodel.append (\"About\", \"win.about\");\n"
"\n"
"\t\t/* We create the last item as a MenuItem, so that\n"
"\t\t * a submenu can be appended to this menu item.\n"
"\t\t */\n"
"\t\tvar submenu = new Menu ();\n"
"\t\tmenumodel.append_submenu (\"Other\", submenu);\n"
"\t\tsubmenu.append (\"Quit\", \"app.quit\");\n"
"\t\tmenubutton.set_menu_model (menumodel);\n"
"\n"
"\t\tvar about_action = new SimpleAction (\"about\", null);\n"
"\t\tabout_action.activate.connect (this.about_cb);\n"
"\t\tthis.add_action (about_action);\n"
"\n"
"\t\tthis.add(grid);\n"
"\t\tgrid.attach(menubutton, 0, 0, 1, 1);\n"
"\t}\n"
"\n"
"\tvoid about_cb (SimpleAction simple, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"About\\\"\\n\");\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the 'startup' signal of GLib.Application. */\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\tvar new_action = new SimpleAction (\"new\", null);\n"
"\t\tnew_action.activate.connect (this.new_cb);\n"
"\t\tthis.add_action (new_action);\n"
"\n"
"\t\tvar quit_action = new SimpleAction (\"quit\", null);\n"
"\t\tquit_action.activate.connect (this.quit);\n"
"\t\tthis.add_action (quit_action);\n"
"\t}\n"
"\n"
"\tvoid new_cb (SimpleAction simple, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"New\\\"\\n\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"MenuButton Example\");\n"
"\t\tthis.set_default_size (600, 400);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\n"
"\t\tvar menubutton = new Gtk.MenuButton();\n"
"\t\tmenubutton.set_size_request (80, 35);\n"
"\n"
"\t\tvar menumodel = new Menu ();\n"
"\t\tmenumodel.append (\"New\", \"app.new\");\n"
"\t\tmenumodel.append (\"About\", \"win.about\");\n"
"\n"
"\t\t/* We create the last item as a MenuItem, so that\n"
"\t\t * a submenu can be appended to this menu item.\n"
"\t\t */\n"
"\t\tvar submenu = new Menu ();\n"
"\t\tmenumodel.append_submenu (\"Other\", submenu);\n"
"\t\tsubmenu.append (\"Quit\", \"app.quit\");\n"
"\t\tmenubutton.set_menu_model (menumodel);\n"
"\n"
"\t\tvar about_action = new SimpleAction (\"about\", null);\n"
"\t\tabout_action.activate.connect (this.about_cb);\n"
"\t\tthis.add_action (about_action);\n"
"\n"
"\t\tthis.add(grid);\n"
"\t\tgrid.attach(menubutton, 0, 0, 1, 1);\n"
"\t}\n"
"\n"
"\tvoid about_cb (SimpleAction simple, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"About\\\"\\n\");\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the 'startup' signal of GLib.Application. */\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\tvar new_action = new SimpleAction (\"new\", null);\n"
"\t\tnew_action.activate.connect (this.new_cb);\n"
"\t\tthis.add_action (new_action);\n"
"\n"
"\t\tvar quit_action = new SimpleAction (\"quit\", null);\n"
"\t\tquit_action.activate.connect (this.quit);\n"
"\t\tthis.add_action (quit_action);\n"
"\t}\n"
"\n"
"\tvoid new_cb (SimpleAction simple, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"New\\\"\\n\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/message-board.c.page:41
msgctxt "_"
msgid ""
"external ref='media/message-board.ogv' md5='beb80c4538776dc2cdd26c95abea5027'"
msgstr ""
"external ref='media/message-board.ogv' md5='beb80c4538776dc2cdd26c95abea5027'"

#. (itstool) path: info/title
#: C/message-board.c.page:8
msgctxt "text"
msgid "Message board (C)"
msgstr "Πίνακας μηνύματος (C)"

#. (itstool) path: info/desc
#: C/message-board.c.page:11
msgid "A simple program using WebKitGTK+ and the DOM."
msgstr "Ένα απλό πρόγραμμα που χρησιμοποιεί WebKitGTK+ και DOM."

#. (itstool) path: page/title
#: C/message-board.c.page:26
msgid "Message board"
msgstr "Πίνακας μηνύματος"

#. (itstool) path: item/p
#: C/message-board.c.page:31
msgid "How to display a web page with WebKit."
msgstr "Πώς να εμφανίσετε μια ιστοσελίδα με WebKit."

#. (itstool) path: item/p
#: C/message-board.c.page:32
msgid ""
"How to manipulate the contents of a web page using WebKit's DOM functions."
msgstr ""
"Πώς να χειριστείτε τα περιεχόμενα μιας ιστοσελίδας χρησιμοποιώντας τις "
"συναρτήσεις DOM του WebKit."

#. (itstool) path: synopsis/p
#: C/message-board.c.page:35
msgid ""
"This tutorial assumes you are familiar with the C programming language and "
"have a basic understanding of GTK+, including how to create and place "
"widgets and how to connect callback functions to signals. See <link xref="
"\"image-viewer.c\"/> to learn the basics of GTK+."
msgstr ""
"Αυτό το μάθημα υποθέτει εξοικείωση με τη γλώσσα προγραμματισμού C και βασική "
"κατανόηση της GTK+, συμπεριλαμβανόμενης της δημιουργίας και τοποθέτησης "
"γραφικών στοιχείων και της σύνδεσης συναρτήσεων επανάκλησης σε σήματα. "
"Δείτε <link xref=\"image-viewer.c\"/> για να μάθετε τα βασικά του GTK+."

#. (itstool) path: section/p
#: C/message-board.c.page:48
msgid ""
"The GNOME platform includes WebKitGTK+, built on top of the powerful WebKit "
"HTML framework. WebKit is used throughout GNOME, not just to view web pages "
"on the Internet, but also to create rich user interfaces that can be easily "
"styled with CSS."
msgstr ""
"Το GNOME περιέχει το WebKitGTK+, κατασκευασμένο πάνω στον ισχυρό σκελετό του "
"WebKit HTML. Το WebKit χρησιμοποιείται μέσα από το GNOME, όχι μόνο για "
"προβολή ιστοσελίδων στο διαδίκτυο, αλλά επίσης για δημιουργία πλούσιων "
"διεπαφών χρήστη που μπορούν εύκολα να μορφοποιηθούν με CSS."

#. (itstool) path: section/p
#: C/message-board.c.page:53
msgid ""
"In this tutorial, you will create a simple message board using WebKit. The "
"message board will allow you to enter some text and have it added to a list "
"of messages in HTML. Before you begin, you need to set up a project in "
"Anjuta."
msgstr ""
"Σε αυτό το μάθημα, θα δημιουργήσετε ένα απλό πίνακα μηνύματος "
"χρησιμοποιώντας WebKit. Ο πίνακας μηνύματος θα επιτρέψει την εισαγωγή "
"κάποιου κειμένου και την προσθήκη του σε μια λίστα μηνυμάτων σε HTML. Πριν "
"την εκκίνηση, χρειαζόσαστε να ρυθμίσετε ένα έργο στο Anjuta."

#. (itstool) path: item/p
#: C/message-board.c.page:59
msgid ""
"In Anjuta, click <guiseq><gui>File</gui><gui>New</gui> <gui>Project</gui></"
"guiseq> to open the new project assistant."
msgstr ""
"Στο Anjuta, κάντε κλικ στο <guiseq><gui>Αρχείο</gui><gui>Νέο</gui> "
"<gui>Έργο</gui></guiseq> για να ανοίξετε τον νέο βοηθό έργου."

#. (itstool) path: item/p
#: C/message-board.c.page:61
msgid ""
"Select <gui>GTK+ (simple)</gui> on the <gui>C</gui> tab, and click "
"<gui>Continue</gui>."
msgstr ""
"Επιλέξτε <gui>GTK+ (απλό)</gui> στην καρτέλα <gui>C</gui> και κλικ "
"<gui>συνέχεια</gui>."

#. (itstool) path: item/p
#: C/message-board.c.page:63
msgid ""
"Fill out your details on the <gui>Basic information</gui> page. Use "
"<input>message-board</input> for the project name. Click <gui>Continue</gui>."
msgstr ""
"Συμπληρώστε τις λεπτομέρειές σας στη σελίδα <gui>βασικές πληροφορίες</gui>. "
"Χρησιμοποιήστε <input>πίνακα μηνύματος</input> για το όνομα του έργου. Κλικ "
"<gui>συνέχεια</gui>."

#. (itstool) path: item/p
#: C/message-board.c.page:66
msgid ""
"Disable the <gui>Use GtkBuilder for user interface</gui> option as this "
"tutorial builds the user-interface manually."
msgstr ""
"Απενεργοποιήστε την επιλογή <gui>χρήση GtkBuilder για διεπαφή χρήστη</gui> "
"καθώς αυτό το μάθημα κατασκευάζει τη διεπαφή χρήστη χειροκίνητα."

#. (itstool) path: item/p
#: C/message-board.c.page:69
msgid ""
"You need to tell Anjuta you're using WebKitGTK+ on this project. On the "
"<gui>Project options</gui> page, select <gui>Configure external packages</"
"gui>. Click <gui>Continue</gui>. On the <gui>Configure external packages</"
"gui> page, check <gui>webkitgtk-3.0</gui>."
msgstr ""
"Πρέπει να πείτε στο Anjuta ότι χρησιμοποιείτε WebKitGTK+ για αυτό το έργο. "
"Στη σελίδα <gui>επιλογές έργου</gui>, επιλέξτε <gui>ρύθμιση εξωτερικών "
"πακέτων</gui>. Κλικ <gui>συνέχεια</gui>. Στη σελίδα <gui>ρύθμιση εξωτερικών "
"πακέτων</gui>, σημειώστε <gui>webkitgtk-3.0</gui>."

#. (itstool) path: section/p
#: C/message-board.c.page:75
msgid ""
"After you finish the new project assistant, open the file <file>src/main.c</"
"file> from either the <gui>Project</gui> or the <gui>File</gui> tab. Anjuta "
"will have filled this in with some basic GTK+ code from its templates. Since "
"you are creating a WebKit project, you first need to include the WebKit "
"headers. After the line that includes <code>gtk/gtk.h</code>, add the "
"following line:"
msgstr ""
"Αφού τελειώσετε με τον βοηθό του νέου έργου, ανοίξτε το αρχείο <file>src/"
"main.c</file> είτε από το <gui>έργο</gui> ή από την καρτέλα <gui>αρχείο</"
"gui>. Το Anjuta θα το γεμίσει με κάποιο βασικό κώδικα GTK+ από τα πρότυπά "
"του. Αφού δημιουργείτε ένα έργο WebKit, χρειάζεστε πρώτα να συμπεριλάβετε "
"τις κεφαλίδες WebKit. Μετά τη γραμμή που περιέχει <code>gtk/gtk.h</code>, "
"προσθέστε την παρακάτω γραμμή:"

#. (itstool) path: section/code
#: C/message-board.c.page:82
#, no-wrap
msgid "#include &lt;webkit/webkit.h&gt;"
msgstr "#περιλαμβάνει &lt;webkit/webkit.h&gt;"

#. (itstool) path: section/p
#: C/message-board.c.page:84
msgid ""
"Verify that everything works by building what you have so far. Click "
"<guiseq><gui>Build</gui><gui>Build Project</gui></guiseq> or just press "
"<keyseq><key>Shift</key><key>F7</key></keyseq>. The first time you build, "
"you will be asked for some configure options. Just accept the defaults and "
"click <gui>Execute</gui>."
msgstr ""
"Επιβεβαιώστε ότι όλα δουλεύουν με την κατασκευή που έχετε κάνει μέχρι τώρα. "
"Κλικ <guiseq><gui>κατασκευή</gui><gui>έργο κατασκευής</gui></guiseq> ή απλά "
"πατήστε <keyseq><key>Shift</key><key>F7</key></keyseq>. Την πρώτη φορά που "
"κατασκευάζετε, θα σας ζητηθεί για κάποιες επιλογές ρύθμισης. Απλά "
"αποδεχτείτε τις προεπιλογές και κλικ <gui>εκτέλεση</gui>."

#. (itstool) path: section/p
#: C/message-board.c.page:90
msgid ""
"You should now be able to run the program. Click <guiseq> <gui>Run</"
"gui><gui>Execute</gui></guiseq> or just press <key>F3</key>. You should see "
"an empty window appear."
msgstr ""
"Τώρα θα μπορείτε να τρέξετε το πρόγραμμα. Κάντε κλικ στο <guiseq> "
"<gui>Τρέξιμο</gui><gui>Εκτέλεση</gui></guiseq> ή απλά πατήστε <key>F3</key>. "
"Θα πρέπει να δείτε ένα άδειο παράθυρο."

#. (itstool) path: section/title
#: C/message-board.c.page:96
msgid "Lay out your window and web view"
msgstr "Διευθέτηση του παραθύρου σας και προβολή ιστού"

#. (itstool) path: section/p
#: C/message-board.c.page:98
msgid ""
"Now that you can show a window, it's time to start working with WebKit. For "
"this tutorial, you'll create a text entry and a web view and pack them both "
"into a window. Find the function <code>create_window</code> and replace it "
"with the following:"
msgstr ""
"Τώρα που μπορείτε να δείτε ένα παράθυρο, είναι καιρός να ξεκινήσετε δουλειά "
"με το WebKit. Για αυτό το μάθημα, θα δημιουργηθεί μια καταχώριση κειμένου "
"και μια προβολή ιστού και πακετάρισμα τους σε ένα παράθυρο. Βρείτε τη "
"συνάρτηση <code>create_window</code> και αντικαταστήστε την με την παρακάτω:"

#. (itstool) path: section/code
#: C/message-board.c.page:103
#, no-wrap
msgid ""
"\n"
"static GtkWidget*\n"
"create_window (void)\n"
"{\n"
"    GtkWidget *window, *box, *scroll, *view, *entry;\n"
"\n"
"    window = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n"
"    gtk_window_set_default_size (GTK_WINDOW (window), 400, 400);\n"
"    gtk_window_set_title (GTK_WINDOW (window), \"Message Board\");\n"
"    g_signal_connect (window, \"delete-event\", G_CALLBACK (gtk_main_quit), NULL);\n"
"\n"
"    box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 6);\n"
"    gtk_container_set_border_width (GTK_CONTAINER (box), 6);\n"
"    gtk_container_add (GTK_CONTAINER (window), box);\n"
"\n"
"    entry = gtk_entry_new ();\n"
"    gtk_box_pack_start (GTK_BOX (box), entry, FALSE, FALSE, 0);\n"
"\n"
"    scroll = gtk_scrolled_window_new (NULL, NULL);\n"
"    g_object_set (scroll, \"shadow-type\", GTK_SHADOW_IN, NULL);\n"
"    gtk_box_pack_start (GTK_BOX (box), scroll, TRUE, TRUE, 0);\n"
"\n"
"    view = webkit_web_view_new ();\n"
"    gtk_container_add (GTK_CONTAINER (scroll), view);\n"
"    webkit_web_view_load_string (WEBKIT_WEB_VIEW (view),\n"
"                                 \"&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\",\n"
"                                 \"text/html\",\n"
"                                 \"UTF-8\",\n"
"                                 NULL);\n"
"\n"
"    gtk_widget_show_all (GTK_WIDGET (box));\n"
"    return window;\n"
"}\n"
msgstr ""
"\n"
"static GtkWidget*\n"
"create_window (void)\n"
"{\n"
"    GtkWidget *window, *box, *scroll, *view, *entry;\n"
"\n"
"    window = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n"
"    gtk_window_set_default_size (GTK_WINDOW (window), 400, 400);\n"
"    gtk_window_set_title (GTK_WINDOW (window), \"Message Board\");\n"
"    g_signal_connect (window, \"delete-event\", G_CALLBACK (gtk_main_quit), NULL);\n"
"\n"
"    box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 6);\n"
"    gtk_container_set_border_width (GTK_CONTAINER (box), 6);\n"
"    gtk_container_add (GTK_CONTAINER (window), box);\n"
"\n"
"    entry = gtk_entry_new ();\n"
"    gtk_box_pack_start (GTK_BOX (box), entry, FALSE, FALSE, 0);\n"
"\n"
"    scroll = gtk_scrolled_window_new (NULL, NULL);\n"
"    g_object_set (scroll, \"shadow-type\", GTK_SHADOW_IN, NULL);\n"
"    gtk_box_pack_start (GTK_BOX (box), scroll, TRUE, TRUE, 0);\n"
"\n"
"    view = webkit_web_view_new ();\n"
"    gtk_container_add (GTK_CONTAINER (scroll), view);\n"
"    webkit_web_view_load_string (WEBKIT_WEB_VIEW (view),\n"
"                                 \"&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\",\n"
"                                 \"text/html\",\n"
"                                 \"UTF-8\",\n"
"                                 NULL);\n"
"\n"
"    gtk_widget_show_all (GTK_WIDGET (box));\n"
"    return window;\n"
"}\n"

#. (itstool) path: section/p
#: C/message-board.c.page:138
msgid ""
"You first create a <code>GtkWindow</code> object and set its title and "
"default size. You also connect the <code>gtk_main_quit</code> function to "
"the <code>delete-event</code> signal. The <code>delete-event</code> signal "
"is emitted when the window is closed. The <code>gtk_main_quit</code> "
"function is part of GTK, and it quits the application."
msgstr ""
"Δημιουργήστε πρώτα ένα αντικείμενο <code>GtkWindow</code> και ορίστε τον "
"τίτλο το προεπιλεγμένο μέγεθος του. Συνδέστε επίσης τη συνάρτηση "
"<code>gtk_main_quit</code> με το σήμα <code>delete-event</code>. Το σήμα "
"<code>delete-event</code> εκπέμπεται όταν το παράθυρο κλείνει. Η συνάρτηση "
"<code>gtk_main_quit</code> είναι τμήμα του GTK και εγκαταλείπει την εφαρμογή."

#. (itstool) path: section/p
#: C/message-board.c.page:144
msgid ""
"You then create a vertical box and add it to the window. A window can only "
"hold a single child widget, so you need to use a box to add multiple "
"widgets. The second argument to <code>gtk_box_new</code> sets the amount of "
"padding (in pixels) between each child, and the next line puts a six-pixel "
"border around the entire thing."
msgstr ""
"Έπειτα δημιουργήστε ένα κάθετο πλαίσιο και προσθέστε το στο παράθυρο. Ένα "
"παράθυρο μπορεί να κρατά μόνο ένα μοναδικό θυγατρικό γραφικό στοιχείο, έτσι "
"χρειαζόσαστε τη χρήση ενός πλαισίου για προσθήκη πολλαπλών γραφικών "
"στοιχείων. Το δεύτερο όρισμα στο <code>gtk_box_new</code> ορίζει την "
"ποσότητα συμπλήρωσης (σε εικονοστοιχεία) μεταξύ κάθε θυγατρικού και η "
"επόμενη γραμμή βάζει ένα περίγραμμα έξη εικονοστοιχείων γύρω από όλο το "
"αντικείμενο."

#. (itstool) path: section/p
#: C/message-board.c.page:150
msgid ""
"You next create a <code>GtkEntry</code> object and pack it into the box. The "
"third and fourth arguments to <code>gtk_box_pack_start</code> specify that "
"the entry shouldn't take up any extra space the box has available. The "
"fourth argument is the amount of padding you want around the entry. In this "
"case, you set the padding to zero, because you're allowing the box to handle "
"all the padding."
msgstr ""
"Έπειτα δημιουργείστε ένα αντικείμενο <code>GtkEntry</code> και πακετάρετε το "
"στο πλαίσιο. Το τρίτο και τέταρτο όρισμα στο <code>gtk_box_pack_start</code> "
"καθορίζει ότι η καταχώριση δεν θα πρέπει να πάρει επιπλέον χώρο που το "
"πλαίσιο έχει διαθέσιμο. Το τέταρτο όρισμα είναι η ποσότητα συμπλήρωσης που "
"θέλετε γύρω από την καταχώριση. Σε αυτή την περίπτωση, ορίζετε τη συμπλήρωση "
"σε μηδέν, επειδή επιτρέπετε στο πλαίσιο να χειριστεί όλη τη συμπλήρωση."

#. (itstool) path: section/p
#: C/message-board.c.page:157
msgid ""
"Before you add a web view, you have to create a scrolled window to put it "
"inside of. The scrolled window will place scrollbars on the right and bottom "
"when necessary, and prevent your web view from filling your entire screen. "
"This time, you pass <code>TRUE</code> and <code>TRUE</code> to "
"<code>gtk_box_pack_start</code> to allow the scrolled window (and thus, the "
"web view) to use any extra space available in the box."
msgstr ""
"Πριν την προσθήκη μιας προβολής ιστού, πρέπει να δημιουργήσετε ένα κυλιόμενο "
"παράθυρο για να μπει μέσα του. Το κυλιόμενο παράθυρο θα τοποθετήσει γραμμές "
"κύλισης στα δεξιά και κάτω όταν χρειάζεται και θα αποτρέψει την προβολή σας "
"ιστού από το γέμισμα όλης της οθόνης. Αυτή τη φορά, περνάτε <code>TRUE</"
"code> και <code>TRUE</code> στο <code>gtk_box_pack_start</code> για να "
"επιτρέψετε στο κυλιόμενο παράθυρο (και συνεπώς στην προβολή ιστού) να "
"χρησιμοποιήσει οποιοδήποτε διαθέσιμο χώρο στο πλαίσιο."

#. (itstool) path: section/p
#: C/message-board.c.page:164
msgid ""
"Finally, you create a <code>WebKitWebView</code> and add it to the scrolled "
"window. Then load a very basic HTML page into the web view by calling "
"<code>webkit_web_view_load_string</code> with the following arguments:"
msgstr ""
"Τελικά, δημιουργείτε ένα <code>WebKitWebView</code> και το προσθέτετε στο "
"κυλιόμενο παράθυρο. Έπειτα φορτώνετε μια πολύ βασική σελίδα HTML στην "
"προβολή ιστού καλώντας <code>webkit_web_view_load_string</code> με τα "
"παρακάτω ορίσματα:"

#. (itstool) path: item/title
#: C/message-board.c.page:170
msgid "<code>WEBKIT_WEB_VIEW (view)</code>"
msgstr "<code>WEBKIT_WEB_VIEW (view)</code>"

#. (itstool) path: item/p
#: C/message-board.c.page:171
msgid ""
"The view itself. Because <code>view</code> is typed as a <code>GtkWidget*</"
"code>, you have to use <code>WEBKIT_WEB_VIEW</code> to safely cast the "
"object."
msgstr ""
"Η ίδια η προβολή. Επειδή η <code>view</code> πληκτρολογείτε ως "
"<code>GtkWidget</code>, πρέπει να χρησιμοποιήσετε <code>WEBKIT_WEB_VIEW</"
"code> για ασφαλή αλλαγή του αντικειμένου."

#. (itstool) path: item/title
#: C/message-board.c.page:176
msgid "<code>\"&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\"</code>"
msgstr "<code>\"&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\"</code>"

#. (itstool) path: item/p
#: C/message-board.c.page:177
msgid "The simplest HTML file you could possibly write."
msgstr "Το απλούστερο αρχείο HTML που θα μπορούσατε να γράψετε."

#. (itstool) path: item/title
#: C/message-board.c.page:180
msgid "<code>\"text/html\"</code>"
msgstr "<code>\"text/html\"</code>"

#. (itstool) path: item/p
#: C/message-board.c.page:181
msgid ""
"The MIME type of the content you provided. In this case, you're using plain "
"HTML."
msgstr ""
"Ο τύπος MIME του περιεχομένου που δίνετε. Σε αυτήν την περίπτωση, "
"χρησιμοποιείτε απλό HTML."

#. (itstool) path: item/title
#: C/message-board.c.page:185
msgid "<code>\"UTF-8\"</code>"
msgstr "<code>\"UTF-8\"</code>"

#. (itstool) path: item/p
#: C/message-board.c.page:186
msgid ""
"The character encoding of the content you provided. Although you only used "
"ASCII characters, it's a good idea to specify UTF-8. UTF-8 is used as the "
"default encoding throughout the GNOME platform."
msgstr ""
"Η κωδικοποίηση χαρακτήρα του παρεχόμενου περιεχομένου. Αν και χρησιμοποιείτε "
"μόνο ASCII χαρακτήρες, είναι καλή ο καθορισμός UTF-8. Το UTF-8 "
"χρησιμοποιείται ως η προεπιλεγμένη κωδικοποίηση ολοκληρωτικά στο GNOME."

#. (itstool) path: item/title
#: C/message-board.c.page:191
msgid "<code>NULL</code>"
msgstr "<code>NULL</code>"

#. (itstool) path: item/p
#: C/message-board.c.page:192
msgid ""
"The base URI. You don't need it in this simple example, but you might want "
"to provide a <sys>file:</sys> URI if you add images or other features where "
"you want to use relative URI references."
msgstr ""
"Η βάση URI. Δεν την χρειαζόσαστε σε αυτό το απλό παράδειγμα, αλλά ίσως "
"θελήσετε να δώσετε ένα <sys>file:</sys> URI εάν προσθέσετε εικόνες ή άλλα "
"χαρακτηριστικά που θέλετε να χρησιμοποιήσετε σχετικές αναφορές URI."

#. (itstool) path: note/p
#: C/message-board.c.page:199
msgid ""
"Every time you add a widget, you have to call <code>gtk_widget_show</code> "
"on it for it to be visible. If you call <code>gtk_widget_show_all</code> on "
"a container widget like a <code>GtkBox</code>, GTK+ will automatically show "
"all the widgets inside the container, to any depth. Sometimes you don't want "
"to call <code>gtk_widget_show_all</code>, such as when you want to "
"dynamically hide and show some widgets in response to events."
msgstr ""
"Κάθε φορά που προσθέτετε ένα γραφικό στοιχείο, πρέπει να καλέσετε "
"<code>gtk_widget_show</code> για να γίνει ορατό. Εάν καλέσετε "
"<code>gtk_widget_show_all</code> σε ένα περιέκτη γραφικού στοιχείου όπως "
"<code>GtkBox</code>, το GTK+ θα εμφανίσει αυτόματα όλα τα γραφικά στοιχεία "
"μέσα στον περιέκτη, σε οποιοδήποτε βάθος. Μερικές φορές δεν θέλετε να "
"καλέσετε <code>gtk_widget_show_all</code>, όπως όταν θέλετε να κρύψετε "
"δυναμικά και να εμφανίσετε μερικά γραφικά στοιχεία σε απάντηση συμβάντων."

#. (itstool) path: section/p
#: C/message-board.c.page:207
msgid ""
"Finally, you have to call <code>gtk_widget_show_all</code> on the box. "
"Otherwise, none of the widgets you created will be visible. (The window is "
"shown in the <code>main</code> function with <code>gtk_widget_show</code>.)"
msgstr ""
"Τελικά, πρέπει να καλέσετε <code>gtk_widget_show_all</code> στο πλαίσιο. "
"Αλλιώς, κανένα από τα γραφικά στοιχεία που δημιουργήσατε δεν θα είναι "
"ορατό. (Το παράθυρο εμφανίζεται στη συνάρτηση <code>main</code> με "
"<code>gtk_widget_show</code>.)"

#. (itstool) path: section/p
#: C/message-board.c.page:211
msgid ""
"Build and run the message board again. You should see a window with a text "
"entry and a web view. It doesn't do anything yet because the text entry and "
"the web view don't know anything about each other."
msgstr ""
"Αναπτύξτε και εκτελέστε ξανά τον πίνακα μηνύματος. Πρέπει να δείτε ένα "
"παράθυρο με μια καταχώριση κειμένου και μια προβολή ιστού. Δεν κάνει τίποτα "
"ακόμα, επειδή η καταχώριση κειμένου και η προβολή ιστού δεν ξέρουν τίποτα "
"μεταξύ τους."

#. (itstool) path: section/title
#: C/message-board.c.page:217
msgid "Hook up signals"
msgstr "Σύνδεση σημάτων"

#. (itstool) path: section/p
#: C/message-board.c.page:219
msgid ""
"Now you want to make the message board actually <em>do</em> something when "
"you enter text into the text entry. To do this, connect a callback function "
"to the <code>activate</code> signal of <code>entry</code>. GTK+ emits the "
"<code>activate</code> signal whenever the user presses <key>Enter</key> in "
"the entry. Add the following into <code>create_window</code>, anywhere after "
"both <code>entry</code> and <code>view</code> have been defined:"
msgstr ""
"Τώρα, θέλετε να κάνετε τον πίνακα μηνύματος στην πραγματικότητα <em>να "
"κάνει</em> κάτι όταν εισάγετε κείμενο στην καταχώριση κειμένου. Για να το "
"κάνετε αυτό, συνδέστε μια συνάρτηση επανάκλησης στο σήμα <code>activate</"
"code> του <code>entry</code>. Το GTK+ εκπέμπει το σήμα <code>activate</code> "
"όταν ο χρήστης πατά <key>Enter</key> στην καταχώριση. Προσθέστε το παρακάτω "
"στο <code>create_window</code>, οπουδήποτε αφού και <code>entry</code> και "
"<code>view</code> οριστούν:"

#. (itstool) path: section/code
#: C/message-board.c.page:226
#, no-wrap
msgid ""
"\n"
"g_signal_connect (entry, \"activate\", G_CALLBACK (entry_activate_cb), view);\n"
msgstr ""
"\n"
"g_signal_connect (entry, \"activate\", G_CALLBACK (entry_activate_cb), view);\n"

#. (itstool) path: section/p
#: C/message-board.c.page:230
msgid ""
"You then have to actually define <code>entry_activate_cb</code>. Define it "
"as follows, anywhere above <code>create_window</code>:"
msgstr ""
"Τότε πρέπει στην πραγματικότητα να ορίσετε το <code>entry_activate_cb</"
"code>. Ορίστε το όπως ακολουθεί, οπουδήποτε πάνω από το <code>create_window</"
"code>:"

#. (itstool) path: section/code
#: C/message-board.c.page:233
#, no-wrap
msgid ""
"\n"
"static void\n"
"entry_activate_cb (GtkEntry *entry, WebKitWebView *view)\n"
"{\n"
"    WebKitDOMDocument *document;\n"
"    WebKitDOMElement *body, *div;\n"
"\n"
"    document = webkit_web_view_get_dom_document (view);\n"
"    body = webkit_dom_document_query_selector (document, \"body\", NULL);\n"
"    div = webkit_dom_document_create_element (document, \"div\", NULL);\n"
"    webkit_dom_node_set_text_content (WEBKIT_DOM_NODE (div),\n"
"                                      gtk_entry_get_text (entry),\n"
"                                      NULL);\n"
"    webkit_dom_node_append_child (WEBKIT_DOM_NODE (body),\n"
"                                  WEBKIT_DOM_NODE (div),\n"
"                                  NULL);\n"
"    gtk_entry_set_text (entry, \"\");\n"
"}\n"
msgstr ""
"\n"
"static void\n"
"entry_activate_cb (GtkEntry *entry, WebKitWebView *view)\n"
"{\n"
"    WebKitDOMDocument *document;\n"
"    WebKitDOMElement *body, *div;\n"
"\n"
"    document = webkit_web_view_get_dom_document (view);\n"
"    body = webkit_dom_document_query_selector (document, \"body\", NULL);\n"
"    div = webkit_dom_document_create_element (document, \"div\", NULL);\n"
"    webkit_dom_node_set_text_content (WEBKIT_DOM_NODE (div),\n"
"                                      gtk_entry_get_text (entry),\n"
"                                      NULL);\n"
"    webkit_dom_node_append_child (WEBKIT_DOM_NODE (body),\n"
"                                  WEBKIT_DOM_NODE (div),\n"
"                                  NULL);\n"
"    gtk_entry_set_text (entry, \"\");\n"
"}\n"

#. (itstool) path: section/p
#: C/message-board.c.page:253
msgid ""
"The first thing you do is get a <code>WebKitDOMDocument</code> object that "
"represents the HTML document displayed in <code>view</code>. The DOM classes "
"and methods in WebKit allow you to inspect and manipulate the HTML document, "
"and work very similarly to the DOM APIs you might already know from "
"JavaScript."
msgstr ""
"Το πρώτο πράγμα είναι να πάρετε ένα αντικείμενο <code>WebKitDOMDocument</"
"code> που αντιπροσωπεύει το εμφανιζόμενο έγγραφο στο <code>view</code>. Οι "
"κλάσεις DOM και οι μέθοδοι στο WebKit επιτρέπουν την επιθεώρηση και χειρισμό "
"του εγγράφου HTML και δουλεύουν πολύ παρόμοια με τα APIs DOM που ήδη μπορεί "
"να ξέρετε από το JavaScript."

#. (itstool) path: section/p
#: C/message-board.c.page:259
msgid ""
"Once you have the document, you want to get the <code>body</code> element so "
"that you can add <code>div</code> elements to it. The "
"<code>webkit_dom_document_query_selector</code> function lets you find an "
"element in the document using CSS selectors. This keeps you from having to "
"write tedious loops to traverse the document."
msgstr ""
"Μόλις έχετε το έγγραφο, παίρνετε το στοιχείο <code>body</code>, έτσι ώστε να "
"μπορείτε να προσθέσετε τα στοιχεία <code>div</code> σε αυτό. Η συνάρτηση "
"<code>webkit_dom_document_query_selector</code> επιτρέπει την εύρεση ενός "
"στοιχείου στο έγγραφο χρησιμοποιώντας επιλογείς CSS. Αυτό σας γλυτώνει από "
"το γράψιμο κουραστικών βρόχων για πέρασμα του εγγράφου."

#. (itstool) path: section/p
#: C/message-board.c.page:270
msgid ""
"Next, you create a new <code>div</code> element to hold the message. Every "
"element you create has to be attached to a document, so the function to "
"create an element takes the <code>WebKitDOMDocument</code> as its first "
"arguments. You then set the text content of the element to the contents of "
"the text entry. Because <code>gtk_entry_get_text</code> returns a "
"<code>const gchar*</code>, you don't have to free the result."
msgstr ""
"Μετά, δημιουργείτε ένα νέο στοιχείο <code>div</code> για κράτημα του "
"μηνύματος. Κάθε στοιχείο που δημιουργείτε πρέπει να προσαρτηθεί σε ένα "
"έγγραφo, έτσι η συνάρτηση στη δημιουργία ενός στοιχείου παίρνει το "
"<code>WebKitDOMDocument</code> ως τα πρώτα της ορίσματα. Έπειτα ορίζετε το "
"περιεχόμενο κειμένου του στοιχείου στα περιεχόμενα της καταχώρισης κειμένου. "
"Επειδή το <code>gtk_entry_get_text</code> επιστρέφει το <code>const gchar*</"
"code>, δεν πρέπει να απελευθερώσετε το αποτέλεσμα."

#. (itstool) path: section/p
#: C/message-board.c.page:283
msgid ""
"Finally, you append the new <code>div</code> element to the body and clear "
"out the text entry so you can type something new. Build and run the program "
"again and test it for yourself."
msgstr ""
"Τελικά, προσαρτάτε το νέο στοιχείο <code>div</code> στο σώμα και καθαρίστε "
"την καταχώριση κειμένου, έτσι ώστε να μπορείτε να τυπώσετε κάτι νέο. "
"Κατασκευή και εκτέλεση του προγράμματος ξανά και έλεγχος του για σας."

#. (itstool) path: section/title
#: C/message-board.c.page:290
msgid "Make it look better with CSS"
msgstr "Κάντε το να φαίνεται καλύτερα με CSS"

#. (itstool) path: section/p
#: C/message-board.c.page:292
msgid ""
"At this point, your program is completely functional, but not very pretty. "
"You can style the message display with CSS, just like you can with any other "
"HTML page. There are many ways you could attach some CSS to the page: You "
"could add it in the initial HTML document. You could inline it in the "
"<code>style</code> attribute of the <code>div</code> elements. You could "
"even programmatically construct it using the DOM APIs."
msgstr ""
"Σε αυτό το σημείο, το πρόγραμμά σας είναι ολότελα λειτουργικό, αλλά όχι πολύ "
"όμορφο. Μπορείτε να μορφοποιήσετε την εμφάνιση μηνύματος με CSS, απλά όπως "
"μπορείτε με κάθε άλλη σελίδα HTML. Υπάρχουν πολλοί τρόποι που θα μπορούσατε "
"να προσαρτήσετε μερικά CSS στη σελίδα: Μπορείτε να τα προσθέσετε στο αρχικό "
"έγγραφο HTML. Θα μπορούσατε να το ενσωματώσετε στο γνώρισμα <code>style</"
"code> των στοιχείων <code>div</code>. Θα μπορούσατε ακόμα να το "
"κατασκευάσετε προγραμματιστικά χρησιμοποιώντας τα APIs DOM."

#. (itstool) path: section/p
#: C/message-board.c.page:299
msgid ""
"In this tutorial, you'll attach the CSS using the <code>user-stylesheet-uri</"
"code> property of the <code>WebKitWebSetting</code> object attached to your "
"web view. In a more complete application, you would want to save and load "
"your HTML file. Keeping the style information outside the actual HTML means "
"that you can change the styling completely within your application, without "
"having to change users' files. You would normally just install a file along "
"with your application, but just to keep everything in one file for this "
"demo, we'll use a trick called a data URI. First, define the CSS as a static "
"string near the top of your file."
msgstr ""
"Σε αυτό το μάθημα, θα επισυνάψετε το CSS χρησιμοποιώντας την ιδιότητα "
"<code>user-stylesheet-uri</code> του προσαρτημένου αντικειμένου "
"<code>WebKitWebSetting</code> στην προβολή σας ιστού. Σε μια πιο πλήρη "
"εφαρμογή, θα θέλατε να αποθηκεύσετε και να φορτώσετε το αρχείο HTML. "
"Διατηρώντας τις πληροφορίες μορφοποίησης έξω από το ενεργό HTML σημαίνει ότι "
"μπορείτε να αλλάξετε ολότελα τη μορφοποίηση μες την εφαρμογή σας, χωρίς να "
"χρειαστεί να αλλάξετε τα αρχεία χρήστη. Κανονικά θα εγκαταστήσετε απλά ένα "
"αρχείο μαζί με την εφαρμογή σας, αλλά για να διατηρήσετε απλά κάθε τι σε ένα "
"αρχείο για αυτή την παρουσίαση, θα χρησιμοποιήσουμε ένα κόλπο που λέγεται "
"δεδομένα URI. Πρώτα, ορίστε το CSS ως στατική συμβολοσειρά κοντά στην κορυφή "
"του αρχείου σας."

#. (itstool) path: section/code
#: C/message-board.c.page:308
#, no-wrap
msgid ""
"\n"
"static const guchar CSS[] =\n"
"\"body { margin: 0; padding: 0; }\\n\"\n"
"\"div { \"\n"
"\" -webkit-border-radius: 2px;\"\n"
"\" background: -webkit-gradient(linear, 0% 100%, 0% 0%,\"\n"
"\" from(#f1f1f1), to(white));\"\n"
"\" border: solid 1px #c6c6c6;\"\n"
"\" -webkit-box-shadow: 0px 0px 2px #c6c6c6;\"\n"
"\" margin: 12px; padding: 6px;\"\n"
"\"}\";\n"
msgstr ""
"\n"
"static const guchar CSS[] =\n"
"\"body { margin: 0; padding: 0; }\\n\"\n"
"\"div { \"\n"
"\" -webkit-border-radius: 2px;\"\n"
"\" background: -webkit-gradient(linear, 0% 100%, 0% 0%,\"\n"
"\" from(#f1f1f1), to(white));\"\n"
"\" border: solid 1px #c6c6c6;\"\n"
"\" -webkit-box-shadow: 0px 0px 2px #c6c6c6;\"\n"
"\" margin: 12px; padding: 6px;\"\n"
"\"}\";\n"

#. (itstool) path: section/p
#: C/message-board.c.page:321
msgid ""
"All you have in this example are <code>div</code> elements inside a "
"<code>body</code> element. If you created more complicated HTML, you could "
"use whatever CSS is necessary. In fact, if you're comfortable with CSS, you "
"should trying changing this to something you like better."
msgstr ""
"Ό,τι έχετε σε αυτό το παράδειγμα είναι στοιχεία <code>div</code> μέσα σε ένα "
"στοιχείο <code>body</code>. Εάν δημιουργήσατε πιο περίπλοκα HTML, θα "
"μπορούσατε να χρησιμοποιήσετε οποιοδήποτε CSS είναι απαραίτητο. Στην "
"πραγματικότητα, εάν είσαστε άνετα με CSS, θα πρέπει να προσπαθήσετε να το "
"αλλάξετε με κάτι που σας αρέσει καλύτερα."

#. (itstool) path: section/p
#: C/message-board.c.page:326
msgid ""
"To apply the CSS, you set the <code>user-stylesheet-uri</code> in the "
"<code>create_window</code> function, anywhere after <code>view</code> has "
"already been defined."
msgstr ""
"Για εφαρμογή του CSS, ορίζετε τον <code>user-stylesheet-uri</code> στην "
"συνάρτηση <code>create_window</code>, οπουδήποτε μετά τον ορισμό του "
"<code>view</code>."

#. (itstool) path: section/code
#: C/message-board.c.page:332
#, no-wrap
msgid ""
"\n"
"tmp = g_base64_encode (CSS, strlen((gchar *) CSS));\n"
"css = g_strconcat (\"data:text/css;charset=utf-8;base64,\",\n"
"                   tmp, NULL);\n"
"g_object_set (webkit_web_view_get_settings (WEBKIT_WEB_VIEW (view)),\n"
"              \"user-stylesheet-uri\", css, NULL);\n"
"g_free (css);\n"
"g_free (tmp);\n"
msgstr ""
"\n"
"tmp = g_base64_encode (CSS, strlen((gchar *) CSS));\n"
"css = g_strconcat (\"data:text/css;charset=utf-8;base64,\",\n"
"                   tmp, NULL);\n"
"g_object_set (webkit_web_view_get_settings (WEBKIT_WEB_VIEW (view)),\n"
"              \"user-stylesheet-uri\", css, NULL);\n"
"g_free (css);\n"
"g_free (tmp);\n"

#. (itstool) path: section/p
#: C/message-board.c.page:342
msgid ""
"Also, make sure to add variable declarations for <code>tmp</code> and "
"<code>css</code> to the top of <code>create_window</code>."
msgstr ""
"Επίσης, βεβαιωθείτε να προσθέσετε δηλώσεις μεταβλητής για <code>tmp</code> "
"και <code>css</code> στην κορυφή του <code>create_window</code>."

#. (itstool) path: section/code
#: C/message-board.c.page:345
#, no-wrap
msgid ""
"\n"
"gchar *tmp, *css;\n"
msgstr ""
"\n"
"gchar *tmp, *css·\n"

#. (itstool) path: section/p
#: C/message-board.c.page:349
msgid ""
"A data URI starts with <sys>data:</sys> and some information about the "
"content type and how the data is encoded. The actual data follows after a "
"comma, in this case encoded in Base64. Unlike other URI schemes like "
"<sys>http:</sys>, <sys>ftp:</sys>, and <sys>file:</sys>, the <sys>data:</"
"sys> URI scheme doesn't specify where to find a file to load. Rather, it "
"gives the entire contents of the file."
msgstr ""
"Δεδομένα URI ξεκινούν με <sys>data:</sys> και μερικές πληροφορίες για τον "
"τύπο περιεχομένου και την κωδικοποίηση δεδομένων. Τα ενεργά δεδομένα "
"ακολουθούν μετά το κόμμα, σε αυτήν την περίπτωση κωδικοποιημένα σε Base64. "
"Αντίθετα με άλλα σχήματα URI όπως <sys>http:</sys>, <sys>ftp:</sys> και "
"<sys>file:</sys>, το σχήμα <sys>data:</sys> URI δεν καθορίζει πού να βρείτε "
"ένα αρχείο για φόρτωση. Μάλλον, δίνει τα συνολικά περιεχόμενα του αρχείου."

#. (itstool) path: section/p
#: C/message-board.c.page:356
msgid ""
"The code above first encodes your CSS definitions in Base64, then combines "
"that with a fixed string to create a data URI. The <code>g_strconcat</code> "
"function can take any number of string arguments and concatenate them all "
"together, so you have to pass <code>NULL</code> as the final argument so it "
"knows when to stop. And don't forget to free those temporary strings after "
"you set the stylesheet property."
msgstr ""
"Ο παραπάνω κώδικας πρώτα κωδικοποιεί τους ορισμούς σας CSS σε Base64, έπειτα "
"συνδυάζει αυτό με σταθερή συμβολοσειρά για δημιουργία δεδομένων URI. Η "
"συνάρτηση <code>g_strconcat</code> μπορεί να πάρει οποιοδήποτε αριθμό "
"ορισμάτων συμβολοσειράς και να τα συνενώσει όλα μαζί, έτσι έχετε να περάσετε "
"το <code>NULL</code> ως τελικό όρισμα για να γνωρίζει πότε να σταματήσει. "
"Μην ξεχάσετε να ελευθερώσετε αυτές τις προσωρινές συμβολοσειρές αφού ορίσετε "
"την ιδιότητα φύλλο μορφοποίησης."

#. (itstool) path: section/p
#: C/message-board.c.page:363
msgid ""
"Build and run the program again. It should now work exactly the same as at "
"the end of the last section, except the messages will be nicely styled with "
"a border and a subtle background gradient."
msgstr ""
"Κατασκευή και εκτέλεση του προγράμματος πάλι. Θα πρέπει τώρα να δουλεύει "
"ακριβώς το ίδιο όπως στο τέλος της τελευταίας ενότητας, εκτός από τα "
"μηνύματα που θα μορφοποιούνται όμορφα με περίγραμμα και λεπτή διαβάθμιση "
"παρασκηνίου."

#. (itstool) path: section/title
#: C/message-board.c.page:369
msgid "Learn more"
msgstr "Μάθετε περισσότερα"

#. (itstool) path: section/p
#: C/message-board.c.page:371
msgid ""
"This tutorial showed you how to create a basic application using GTK+ and "
"WebKit, including showing a document and manipulating its contents. To "
"create a real application, you probably want to do a little bit more. Try "
"adding features on your own. Here are a few ideas:"
msgstr ""
"Αυτό το μάθημα δείχνει τη δημιουργία μιας βασικής εφαρμογής χρησιμοποιώντας "
"GTK+ και WebKit, περιλαμβάνοντας την εμφάνιση ενός εγγράφου και επεξεργασία "
"των δεδομένων του. Για τη δημιουργία μιας πραγματικής εφαρμογής, θα θέλετε "
"προφανώς να κάνετε κάτι περισσότερο. Προσπαθήστε να προσθέσετε δικά σας "
"χαρακτηριστικά. Να μερικές ιδέες:"

#. (itstool) path: item/p
#: C/message-board.c.page:377
msgid ""
"If you're comfortable with CSS, try changing the style of the message "
"display. CSS is easy to get started with, but increasingly more powerful. "
"There is a wealth of CSS tutorials on the Internet, and just about "
"everything you can do on the web, you can do in this application."
msgstr ""
"Εάν είσαστε άνετοι με το CSS, δοκιμάστε να αλλάξετε τη μορφοποίηση της "
"εμφάνισης του μηνύματος. Το CSS είναι εύκολο για να ξεκινήσετε, αλλά διαρκώς "
"περισσότερο ισχυρό. Υπάρχει πλήθος μαθημάτων CSS στο διαδίκτυο και σχεδόν "
"κάθε τι που μπορείτε να κάνετε στον ιστό, μπορείτε να το κάνετε με αυτήν την "
"εφαρμογή."

#. (itstool) path: item/p
#: C/message-board.c.page:383
msgid ""
"Right now, you lose all your messages whenever you close the message board. "
"Try saving the HTML contents after each post, and loading the saved file (if "
"it exists) on startup."
msgstr ""
"Τώρα αμέσως, χάνετε όλα τα μηνύματά σας όταν κλείνετε τον πίνακα μηνυμάτων. "
"Δοκιμάστε να αποθηκεύσετε τα περιεχόμενα HTML μετά από κάθε ταχυδρόμηση και "
"φορτώστε το αποθηκευμένο αρχείο (εάν υπάρχει) στην εκκίνηση."

#. (itstool) path: item/p
#: C/message-board.c.page:391
msgid ""
"If you keep your messages around for a long time, you'll start wondering "
"when you posted them. Add a timestamp to each message when it's posted. "
"You'll probably want to create some additional child <code>div</code> "
"elements with different classes that you can style in the CSS."
msgstr ""
"Αν κρατάτε τα μηνύματά σας για πολύ χρόνο, θα αρχίσετε να διερωτάστε πότε τα "
"ταχυδρομήσατε. Προσθέσετε ένα σημάδι χρόνου σε κάθε μήνυμα όταν "
"ταχυδρομείται. Θα θέλετε προφανώς να δημιουργήσετε μερικά πρόσθετα θυγατρικά "
"στοιχεία <code>div</code> με διαφορετικές κλάσεις που μπορείτε να "
"μορφοποιήσετε σε CSS."

#. (itstool) path: item/p
#: C/message-board.c.page:398
msgid ""
"This program keeps messages around forever. Think about ways you could allow "
"the user to delete messages. Perhaps you want messages to disappear "
"automatically after they're too old, or after there are a certain number of "
"messages before them. Or you could add a link in each message to delete it. "
"You could even override the context menu when you right-click on a message. "
"These features involve exploring WebKit's DOM API more."
msgstr ""
"Αυτό το πρόγραμμα κρατά τα μηνύματα για πάντα. Σκεφτείτε τρόπους που θα "
"μπορούσαν να επιτρέψουν στο χρήστη να διαγράψει μηνύματα. Ίσως θέλετε τα "
"μηνύματα να εξαφανίζονται αυτόματα όταν παλιώνουν, ή όταν υπάρχει ένας "
"συγκεκριμένος αριθμός μηνυμάτων πριν από αυτά. Ή θα μπορούσατε να προσθέσετε "
"έναν σύνδεσμο σε κάθε μήνυμα για διαγραφή του. Θα μπορούσατε ακόμα να "
"αντικαταστήσετε το μενού περιεχομένου όταν κάνετε δεξιό κλικ σε μήνυμα. "
"Αυτές τα χαρακτηριστικά περιέχουν περισσότερη περιήγηση του DOM API του "
"WebKit."

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/messagedialog.c.page:24 C/messagedialog.js.page:25
#: C/messagedialog.py.page:23 C/messagedialog.vala.page:22
msgctxt "_"
msgid ""
"external ref='media/messagedialog.png' md5='1956288274018e2386d9cba96a2101de'"
msgstr ""
"external ref='media/messagedialog.png' md5='1956288274018e2386d9cba96a2101de'"

#. (itstool) path: info/title
#: C/messagedialog.c.page:8
msgctxt "text"
msgid "MessageDialog (C)"
msgstr "MessageDialog (C)"

#. (itstool) path: info/desc
#: C/messagedialog.c.page:19 C/messagedialog.py.page:19
#: C/messagedialog.vala.page:18
msgid "A message window"
msgstr "Ένα παράθυρο μηνύματος"

#. (itstool) path: page/title
#: C/messagedialog.c.page:22 C/messagedialog.js.page:24
#: C/messagedialog.py.page:22 C/messagedialog.vala.page:21
msgid "MessageDialog"
msgstr "MessageDialog"

#. (itstool) path: page/p
#: C/messagedialog.c.page:25 C/messagedialog.vala.page:23
msgid "A modal message dialog which can cause the world to explode."
msgstr ""
"Ένας αποκλειστικός διάλογος μηνύματος που μπορεί να προκαλέσει την έκρηξη "
"του κόσμου."

#. (itstool) path: note/p
#: C/messagedialog.c.page:26
msgid ""
"To test out the application once it has started running, you can click on "
"the \"Message Dialog\" tab that appears in the top menubar of the screen."
msgstr ""
"Για να ελέγξουμε την εφαρμογή μόλις αρχίσει να εκτελείται, μπορείτε να "
"πατήσετε στην καρτέλα \"Message Dialog\" που εμφανίζεται στην κορυφή της "
"γραμμής μενού στην οθόνη."

#. (itstool) path: page/code
#: C/messagedialog.c.page:30
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* Callback function in which reacts to the \"response\" signal from the user in\n"
" * the message dialog window.\n"
" * This function is used to interact with the user in the terminal.\n"
" */\n"
"static void\n"
"on_response (GtkDialog *dialog,\n"
"             gint       response_id,\n"
"             gpointer   user_data)\n"
"{\n"
"  /* If the button clicked gives response OK (response_id being -5) */\n"
"  if (response_id == GTK_RESPONSE_OK) \n"
"     g_print (\"*boom*\\n\");\n"
"\n"
"  /* If the button clicked gives response CANCEL (response_id being -6) */\n"
"  else if (response_id == GTK_RESPONSE_CANCEL)\n"
"     g_print (\"good choice\\n\");\n"
"\n"
"  /* If the message dialog is destroyed (for example by pressing escape) */\n"
"  else if (response_id == GTK_RESPONSE_DELETE_EVENT)\n"
"     g_print (\"dialog closed or cancelled\\n\");\n"
"\n"
"  /* Destroy the dialog after one of the above actions have taken place */\n"
"  gtk_widget_destroy (GTK_WIDGET (dialog));\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the response signal \"activate\" related to the SimpleAction\n"
" * message_action.\n"
" * This function is used to cause the message dialog window to popup.\n"
" */\n"
"static void\n"
"message_cb (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   /* the parent variable in this case represents the window */\n"
"   GtkWidget *message_dialog;\n"
"   GtkWindow *parent = user_data;\n"
"   \n"
"   /* Create a new message dialog, and set the parameters as follows:\n"
"    * Dialog Flags - make the constructed dialog modal \n"
"    * (modal windows prevent interaction with other windows in the application)\n"
"    * Message Type - nonfatal warning message\n"
"    * Buttons Type - use the ok and cancel buttons\n"
"    * message_format - text that you want the user to see in the window \n"
"    */\n"
"   message_dialog = gtk_message_dialog_new (parent, GTK_DIALOG_MODAL, \n"
"                                            GTK_MESSAGE_WARNING, \n"
"                                            GTK_BUTTONS_OK_CANCEL, \n"
"                                            \"This action will cause the universe to stop existing.\");\n"
"\n"
"   gtk_widget_show_all (message_dialog);\n"
"\n"
"   g_signal_connect (GTK_DIALOG (message_dialog), \"response\", \n"
"                    G_CALLBACK (on_response), NULL);\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"\n"
"  GSimpleAction *message_action;\n"
"\n"
"  /* Create a window with a title and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"GMenu Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 400, 200);\n"
"\n"
"  /* Create a label and add it to the window */\n"
"  label = gtk_label_new (\"This application goes boom!\");\n"
"  gtk_container_add (GTK_CONTAINER (window), label);\n"
"\n"
"  /* Create a new simple action, giving it a NULL parameter type. It will \n"
"   * always be NULL for actions invoked from a menu. (e.g clicking on an \"ok\" \n"
"   * or \"cancel\" button)\n"
"   */\n"
"  message_action = g_simple_action_new (\"message\", NULL); \n"
"\n"
"  /* Connect the \"activate\" signal to the appropriate callback function */\n"
"  g_signal_connect (message_action, \"activate\", G_CALLBACK (message_cb), \n"
"                    GTK_WINDOW (window));\n"
"\n"
"  /* Adds the message_action to the overall action map. An Action map is an \n"
"   * interface that contains a number of named GAction instances \n"
"   * (such as message_action) \n"
"   */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (message_action));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the response signal \"activate\" from the \"quit\" action \n"
" * in the function directly below.\n"
" */ \n"
"static void\n"
"quit_cb (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the menu we are creating in this sample */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GMenu *menu;\n"
"  GSimpleAction *quit_action;\n"
"\n"
"  /* Initialize the GMenu, and add a menu item with label \"Message\" and action \n"
"   * \"win.message\". Also add another menu item with label \"Quit\" and action \n"
"   * \"app.quit\" \n"
"   */\n"
"  menu = g_menu_new ();\n"
"  g_menu_append (menu, \"Message\", \"win.message\");\n"
"  g_menu_append (menu, \"Quit\", \"app.quit\");\n"
"\n"
"  /* Create a new simple action for the application. (In this case it is the \n"
"   * \"quit\" action.\n"
"   */\n"
"  quit_action = g_simple_action_new (\"quit\", NULL);\n"
"\n"
"  /* Ensure that the menu we have just created is set for the overall application */\n"
"  gtk_application_set_app_menu (GTK_APPLICATION (app), G_MENU_MODEL (menu));\n"
"\n"
"  g_signal_connect (quit_action, \n"
"                    \"activate\", \n"
"                    G_CALLBACK (quit_cb), \n"
"                    app);\n"
"\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (quit_action));\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the application */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* Η συνάρτηση επανάκλησης στην οποία αντιδρά το σήμα \"response\" από τον χρήστη\n"
" * στο παράθυρο μηνύματος διαλόγου.\n"
" * Αυτή η συνάρτηση χρησιμοποιείται για αλληλεπίδραση με τον χρήστη στο τερματικό.\n"
" */\n"
"static void\n"
"on_response (GtkDialog *dialog,\n"
"             gint       response_id,\n"
"             gpointer   user_data)\n"
"{\n"
"  /* Αν το κουμπί πατηθεί δίνει απάντηση ΕΝΤΑΞΕΙ (response_id being -5) */\n"
"  if (response_id == GTK_RESPONSE_OK) \n"
"     g_print (\"*boom*\\n\");\n"
"\n"
"  /* Αν το κουμπί πατηθεί δίνει απάντηση ΑΚΥΡΩΣΗ (response_id being -6) */\n"
"  else if (response_id == GTK_RESPONSE_CANCEL)\n"
"     g_print (\"good choice\\n\");\n"
"\n"
"  /* Αν ο διάλογος μηνύματος καταστραφεί (για παράδειγμα πατώντας διαφυγή) */\n"
"  else if (response_id == GTK_RESPONSE_DELETE_EVENT)\n"
"     g_print (\"dialog closed or cancelled\\n\");\n"
"\n"
"  /* Καταστροφή του διαλόγου αφού έχει λάβει χώρα μια από τις παραπάνω ενέργειες */\n"
"  gtk_widget_destroy (GTK_WIDGET (dialog));\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"/* Η συνάρτηση επανάκλησης για το σήμα απάντησης \"activate\" που σχετίζεται με την απλή ενέργεια\n"
" * message_action.\n"
" * Αυτή η συνάρτηση χρησιμοποιείται για την πρόκληση ανάδυσης του παραθύρου του διαλόγου μηνύματος.\n"
" */\n"
"static void\n"
"message_cb (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   /* Η γονική μεταβλητή σε αυτήν την περίπτωση αναπαριστά το παράθυρο */\n"
"   GtkWidget *message_dialog;\n"
"   GtkWindow *parent = user_data;\n"
"   \n"
"   /* Δημιουργία ενός νέου διαλόγου μηνύματος και ορισμός των παραμέτρων ως εξής:\n"
"    * Σημαίες διαλόγων - ο κατσκευασμένος διάλογος γίνεται αναγκαστικός \n"
"    * (οι αναγκαστικοί διάλογοι αποτρέπουν την αλληλεπίδραση με άλλα παράθυρα στην εφαρμογή)\n"
"    * Τύπος μηνύματος - όχι μοιραίο μήνυμα προειδοποίησης\n"
"    * Τύπος κουμπιών - χρήση των κουμπιών εντάξει και ακύρωση\n"
"    * message_format - κείμενο που θέλετε να δει ο χρήστης στο παράθυρο \n"
"    */\n"
"   message_dialog = gtk_message_dialog_new (parent, GTK_DIALOG_MODAL, \n"
"                                            GTK_MESSAGE_WARNING, \n"
"                                            GTK_BUTTONS_OK_CANCEL, \n"
"                                            \"Αυτή η ενέργεια θα προκαλέσει το καθολικό να πάψει να υπάρχει.\");\n"
"\n"
"   gtk_widget_show_all (message_dialog);\n"
"\n"
"   g_signal_connect (GTK_DIALOG (message_dialog), \"response\", \n"
"                    G_CALLBACK (on_response), NULL);\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"\n"
"  GSimpleAction *message_action;\n"
"\n"
"  /* Δημιουργία παραθύρου με τίτλο και προεπιλεγμένο μέγεθος  */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"GMenu Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 400, 200);\n"
"\n"
"  /* Δημιουργία ετικέτας και προσθήκη της στο παράθυρο */\n"
"  label = gtk_label_new (\"This application goes boom!\");\n"
"  gtk_container_add (GTK_CONTAINER (window), label);\n"
"\n"
"  /* Δημιουργία μιας νέας απλής ενέργειας, δίνοντας της έναν τύπο παραμέτρου NULL . Θα \n"
"   * είναι πάντα NULL για πράξεις που κλήθηκαν από ένα μενού. (π.χ. πατώντας ένα κουμπί \"ok\" \n"
"   * ή \"cancel\")\n"
"   */\n"
"  message_action = g_simple_action_new (\"message\", NULL); \n"
"\n"
"  /*Σύνδεση του σήματος \"activate\" στην κατάλληλη συνάρτηση επανάκλησης */\n"
"  g_signal_connect (message_action, \"activate\", G_CALLBACK (message_cb), \n"
"                    GTK_WINDOW (window));\n"
"\n"
"  /* Προσθέτει την message_action στην συνολική απεικόνιση της ενέργειας. Μια απεικόνιση ενέργειας  είναι μια \n"
"   * διεπαφή που περιέχει έναν αριθμό από επώνυμα στιγμιότυπα GAction \n"
"   * (όπως message_action) \n"
"   */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (message_action));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Η συνάρτηση επανάκλησης για το σήμα απάντησης \"activate\" από την ενέργεια \"quit\" \n"
" * στην ακριβώς παρακάτω συνάρτηση.\n"
" */ \n"
"static void\n"
"quit_cb (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Η συνάρτηση έναρξης για το μενού που δημιουργήσαμε σε αυτό το παράδειγμα */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GMenu *menu;\n"
"  GSimpleAction *quit_action;\n"
"\n"
"  /* Αρχικοποίηση του GMenu και προσθήκη ενός στοιχείου μενού με ετικέτα \"Message\" και ενέργεια \n"
"   * \"win.message\". Επίσης προσθήκη ενός άλλου στοιχείου μενού με ετικέτα \"Quit\" και ενέργεια \n"
"   * \"app.quit\" \n"
"   */\n"
"  menu = g_menu_new ();\n"
"  g_menu_append (menu, \"Message\", \"win.message\");\n"
"  g_menu_append (menu, \"Quit\", \"app.quit\");\n"
"\n"
"  /* Δημιουργία μιας απλής ενέργειας για την εφαρμογή. (Σε αυτήν την περίπτωση \n"
"   * είναι η ενέργεια \"quit\" .\n"
"   */\n"
"  quit_action = g_simple_action_new (\"quit\", NULL);\n"
"\n"
"  /* Επιβεβαίωση ότι το μενού που μόλις δημιουργήσαμε ορίστηκε για τη συνολική εφαρμογή */\n"
"  gtk_application_set_app_menu (GTK_APPLICATION (app), G_MENU_MODEL (menu));\n"
"\n"
"  g_signal_connect (quit_action, \n"
"                    \"activate\", \n"
"                    G_CALLBACK (quit_cb), \n"
"                    app);\n"
"\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (quit_action));\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"/* Η συνάρτηση έναρξης για την εφαρμογή */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/messagedialog.c.page:37
msgid ""
"<link href=\"http://developer.gnome.org/gio/stable/GApplication.html"
"\">GApplication</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gio/stable/GApplication.html"
"\">GApplication</link>"

#. (itstool) path: item/p
#: C/messagedialog.c.page:39
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkMessageDialog.html"
"\">GtkMessageDialog</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkMessageDialog.html"
"\">GtkMessageDialog</link>"

#. (itstool) path: item/p
#: C/messagedialog.c.page:40
msgid ""
"<link href=\"http://developer.gnome.org/gio/stable/GSimpleAction.html#g-"
"simple-action-new\">GSimpleAction</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gio/stable/GSimpleAction.html#g-"
"simple-action-new\">GSimpleAction</link>"

#. (itstool) path: info/title
#: C/messagedialog.js.page:8
msgctxt "text"
msgid "MessageDialog (JavaScript)"
msgstr "MessageDialog (JavaScript)"

#. (itstool) path: info/desc
#: C/messagedialog.js.page:21
msgid "A popup message attached to a window"
msgstr "Ένα επισυναπτόμενο αναδυόμενο μήνυμα σε ένα παράθυρο"

#. (itstool) path: page/p
#: C/messagedialog.js.page:26
msgid ""
"A MessageDialog is a modal message dialog, which means a popup that you have "
"to respond to before you get back to what you were doing in the window that "
"it's attached to. This one can cause the world to explode (or at least it "
"says that it can). To make the popup appear when you run this sample, click "
"on \"Message\" inside of its application menu -- that's the menu that "
"appears when you click on an application's name in the upper-left screen "
"corner, next to Activities."
msgstr ""
"Ένας MessageDialog είναι ένας αναγκαστικός διάλογος μηνύματος, που σημαίνει "
"έναν αναδυόμενο στον οποίο πρέπει να απαντήσετε πριν να επιστρέψετε σε ότι "
"κάνατε στο παράθυρο στο οποίο είναι προσαρτημένο. Αυτό μπορεί να προκαλέσει "
"την έκρηξη του κόσμου (ή τουλάχιστον λέει ότι μπορεί). Για να κάνετε το "
"αναδυόμενο να εμφανιστεί όταν εκτελείτε αυτό το δείγμα, πατήστε στο \"Message"
"\" μέσα στο μενού της εφαρμογής του -- αυτό είναι το μενού που εμφανίζεται "
"όταν πατάτε στο όνομα μιας εφαρμογής στην πάνω αριστερή γωνία της οθόνης, "
"δίπλα στις ενέργειες."

#. (itstool) path: note/p
#: C/messagedialog.js.page:27
msgid ""
"The difference between a MessageDialog and a <link xref=\"dialog.js"
"\">Dialog</link> is that a Dialog can contain whatever widgets and content "
"you want to put in it, whereas a MessageDialog is just a convenient way to "
"make popups appear with a basic message and buttons."
msgstr ""
"Η διαφορά μεταξύ ενός MessageDialog και ενός <link xref=\"dialog.js"
"\">διαλόγου</link> είναι ότι ο διάλογος μπορεί να περιέχει οποιαδήποτε "
"γραφικά στοιχεία και περιεχόμενο θέλετε να βάλετε μέσα, ενώ ένας "
"MessageDialog είναι απλά ένας βολικός τρόπος να κάνετε τα αναδυόμενα να "
"εμφανιστούν με ένα βασικό μήνυμα και κουμπιά."

#. (itstool) path: section/code
#: C/messagedialog.js.page:44
#, no-wrap
msgid ""
"\n"
"const MessageDialogExample = new Lang.Class ({\n"
"    Name: 'MessageDialog Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jsmessagedialog',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._initMenus();\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const MessageDialogExample = new Lang.Class ({\n"
"    Name: 'MessageDialog Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jsmessagedialog',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE });\n"
"\n"
"        // Σύνδεση σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' αρχικοποιεί τα μενού και δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function () {\n"
"        this._initMenus();\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: note/p
#: C/messagedialog.js.page:71 C/switch.js.page:76
msgid ""
"Before we call _buildUI to create the window and the widgets inside it, we "
"need to call _initMenus, which tells GNOME to create the menu. We can put "
"the actual code for _initMenus after the code for _buildUI, since it doesn't "
"matter what order we put them in so long as _initMenus is called first in "
"_onStartup."
msgstr ""
"Πριν καλέσουμε _buildUI για δημιουργία του παραθύρου και των γραφικών "
"στοιχείων μέσα του, χρειαζόμαστε να καλέσουμε _initMenus, που λέει στο "
"GNOME να δημιουργήσει το μενού. Μπορούμε να βάλουμε τον ενεργό κώδικα για "
"_initMenus μετά τον κώδικα για _buildUI, αφού δεν πειράζει η σειρά που τα "
"βάλαμε όσο το _initMenus καλείται πρώτο στο _onStartup."

#. (itstool) path: section/code
#: C/messagedialog.js.page:72
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Gtk.MessageDialog Example\",\n"
"            default_height: 200,\n"
"            default_width: 400 });\n"
msgstr ""
"\n"
"    // Δημιουργία της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function () {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Gtk.MessageDialog Example\",\n"
"            default_height: 200,\n"
"            default_width: 400 });\n"

#. (itstool) path: section/code
#: C/messagedialog.js.page:86
#, no-wrap
msgid ""
"\n"
"        // Create a silly warning message and add it to the window\n"
"        this.warningLabel = new Gtk.Label ({\n"
"            label: \"This application goes boom! (Not really.)\"});\n"
"        this._window.add (this.warningLabel);\n"
msgstr ""
"\n"
"        // Δημιουργία ενός χαζού μηνύματος προειδοποίησης και προσθήκη του στο παράθυρο\n"
"        this.warningLabel = new Gtk.Label ({\n"
"            label: \"This application goes boom! (Not really.)\"});\n"
"        this._window.add (this.warningLabel);\n"

#. (itstool) path: section/p
#: C/messagedialog.js.page:92
msgid ""
"For this example, all that we have in the window the popup comes out of is a "
"silly warning <link xref=\"label.js\">Label</link>."
msgstr ""
"Για αυτό το παράδειγμα, όλο ότι έχουμε στο παράθυρο που εμφανίζεται το "
"αναδυόμενο είναι μια χαζή προειδοποίηση <link xref=\"label.js\">Label</link>."

#. (itstool) path: section/title
#: C/messagedialog.js.page:96
msgid "Creating the application's menu"
msgstr "Δημιουργία του μενού της εφαρμογής"

#. (itstool) path: section/code
#: C/messagedialog.js.page:97
#, no-wrap
msgid ""
"\n"
"    // Build the application menu, including the button that calls the dialog\n"
"    _initMenus: function() {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"Message\",'app.message');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // This pops up a MessageDialog when \"Message\" is clicked in the menu\n"
"        let messageAction = new Gio.SimpleAction ({ name: 'message' });\n"
"        messageAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showMessageDialog();\n"
"            }));\n"
"        this.application.add_action(messageAction);\n"
"\n"
"        // This closes the window when \"Quit\" is clicked in the menu\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
msgstr ""
"\n"
"    // Δημιουργία του μενού της εφαρμογής, συμπεριλαμβανομένου του κουμπιού που καλεί τον διάλογο\n"
"    _initMenus: function() {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"Message\",'app.message');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // Αυτό αναδύει ένα μήνυμα διαλόγου όταν πατιέται \"Message\" στο μενού\n"
"        let messageAction = new Gio.SimpleAction ({ name: 'message' });\n"
"        messageAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showMessageDialog();\n"
"            }));\n"
"        this.application.add_action(messageAction);\n"
"\n"
"        // Αυτό κλείνει το παράθυρο όταν πατιέται  \"Quit\" στο μενού\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"

#. (itstool) path: section/p
#: C/messagedialog.js.page:122
msgid ""
"Here, we build the <link xref=\"gmenu.js\">GMenu</link> where we'll be "
"putting the \"Message\" button which triggers the popup MessageDialog. The "
"GMenu is the menu that appears when you click the application's name in the "
"upper-left corner of the screen, next to the Activities menu. Our menu only "
"has two options in it: Message, and Quit."
msgstr ""
"Εδώ, κατασκευάζουμε το <link xref=\"gmenu.js\">GMenu</link> όπου θα βάλουμε "
"το κουμπί \"Message\" που προκαλεί το αναδυόμενο MessageDialog. Το GMenu "
"είναι το μενού που εμφανίζεται όταν πατάς το όνομα της εφαρμογής στην πάνω "
"αριστερή γωνία της οθόνης, δίπλα στο μενού ενέργειες. Το μενού μας έχει μόνο "
"δύο επιλογές: μήνυμα και κλείσιμο."

#. (itstool) path: section/title
#: C/messagedialog.js.page:126
msgid "Creating the MessageDialog"
msgstr "Δημιουργία του MessageDialog"

#. (itstool) path: section/code
#: C/messagedialog.js.page:127
#, no-wrap
msgid ""
"\n"
"    _showMessageDialog: function () {\n"
"\n"
"        // Create a modal MessageDialog whose parent is the window\n"
"        this._messageDialog = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            buttons: Gtk.ButtonsType.OK_CANCEL,\n"
"            message_type: Gtk.MessageType.WARNING,\n"
"            text: \"This action will cause the universe to stop existing.\" });\n"
"\n"
"        this._messageDialog.connect ('response', Lang.bind(this, this._response_cb));\n"
"        this._messageDialog.show();\n"
"    },\n"
msgstr ""
"\n"
"    _showMessageDialog: function () {\n"
"\n"
"        // Δημιουργία αναγκαστικού διαλόγου μηνύματος του οποίου το γονικό είναι στο παράθυρο\n"
"        this._messageDialog = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            buttons: Gtk.ButtonsType.OK_CANCEL,\n"
"            message_type: Gtk.MessageType.WARNING,\n"
"            text: \"This action will cause the universe to stop existing.\" });\n"
"\n"
"        this._messageDialog.connect ('response', Lang.bind(this, this._response_cb));\n"
"        this._messageDialog.show();\n"
"    },\n"

#. (itstool) path: section/p
#: C/messagedialog.js.page:142
msgid ""
"To make our MessageDialog a popup attached to the main window, we set its "
"modal property to true and set it to be \"transient_for\" _window. After "
"that, we can set what kind of buttons it has and what kind of message it is "
"(which determines what icon appears next to the message), and write out the "
"text inside it, before connecting its \"response\" signal to the callback "
"function which handles it."
msgstr ""
"Για να κάνετε τον MessageDialog μας ένα προσαρτημένο αναδυόμενο στο κύριο "
"παράθυρο, ορίζουμε την αναγκαστική του ιδιότητα σε αληθή και το ορίζουμε να "
"είναι \"transient_for\" _window. Μετά από αυτό, μπορούμε να ορίσουμε τι "
"είδους κουμπιά έχει και τι είδους μήνυμα είναι (που καθορίζει τι εικονίδιο "
"εμφανίζεται δίπλα στο μήνυμα) και να γραφτεί το κείμενο μέσα του, πριν τη "
"σύνδεση του σήματος του \"response\" στη συνάρτηση επανάκλησης που το "
"χειρίζεται."

#. (itstool) path: note/p
#: C/messagedialog.js.page:143
msgid "Here are some resources for making your own MessageDialogs:"
msgstr "Εδώ υπάρχουν μερικές πηγές για να κάνετε τα δικά σας MessageDialogs:"

#. (itstool) path: item/p
#: C/messagedialog.js.page:145
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkMessageDialog."
"html#GtkButtonsType\">List of button types</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkMessageDialog."
"html#GtkButtonsType\">List of button types</link>"

#. (itstool) path: item/p
#: C/messagedialog.js.page:146
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkMessageDialog."
"html#GtkMessageType\">List of message types</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkMessageDialog."
"html#GtkMessageType\">List of message types</link>"

#. (itstool) path: section/code
#: C/messagedialog.js.page:150
#, no-wrap
msgid ""
"\n"
"    // Callback function (aka signal handler) for the response signal\n"
"    _response_cb: function (messagedialog, response_id) {\n"
"\n"
"        // A simple switch that changes the main window's label\n"
"        switch (response_id) {\n"
"            case Gtk.ResponseType.OK:\n"
"                this.warningLabel.set_label (\"*BOOM*\\n\");\n"
"                break;\n"
"            case Gtk.ResponseType.CANCEL:\n"
"                this.warningLabel.set_label (\"Good choice!\\n\");\n"
"                break;\n"
"            case Gtk.ResponseType.DELETE_EVENT:\n"
"                this.warningLabel.set_label (\"Dialog closed or cancelled.\\n\");\n"
"                break;\n"
"        }\n"
"\n"
"        this._messageDialog.destroy();\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    // Η συνάρτηση επανάκλησης (χειριστής σήματος aka) για το σήμα απάντησης\n"
"    _response_cb: function (messagedialog, response_id) {\n"
"\n"
"        // Ένας απλός διακόπτης που αλλάζει την ετικέτα του κυρίως παραθύρου\n"
"        switch (response_id) {\n"
"            case Gtk.ResponseType.OK:\n"
"                this.warningLabel.set_label (\"*BOOM*\\n\");\n"
"                break;\n"
"            case Gtk.ResponseType.CANCEL:\n"
"                this.warningLabel.set_label (\"Good choice!\\n\");\n"
"                break;\n"
"            case Gtk.ResponseType.DELETE_EVENT:\n"
"                this.warningLabel.set_label (\"Dialog closed or cancelled.\\n\");\n"
"                break;\n"
"        }\n"
"\n"
"        this._messageDialog.destroy();\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/messagedialog.js.page:173
msgid ""
"This function takes two parameters, the MessageDialog and its response_id, "
"both of which are automatically supplied (you don't have to manually pass "
"them to it for it to work). Here we use a simple switch to change the "
"\"warning label\"'s text, depending on which option you select. The "
"DELETE_EVENT occurs if you press Escape to cancel the MessageDialog, instead "
"of clicking OK or Cancel. Whatever you select, the popup is destroyed "
"afterwards."
msgstr ""
"Αυτή η συνάρτηση παίρνει δύο παραμέτρους, τον MessageDialog και την "
"response_id, και οι δυο τους παρέχονται αυτόματα (δεν χρειάζεται να τις "
"περάσετε αυτόματα σε αυτό για να δουλέψει). Εδώ χρησιμοποιούμε ένα απλό "
"διακόπτη για αλλαγή του κειμένου της \"warning label\", ανάλογα με το ποια "
"επιλογή διαλέγετε. Η DELETE_EVENT συμβαίνει εάν πατήσετε διαφυγή για να "
"ακυρώσετε τον MessageDialog, αντί να πατήσετε εντάξει ή ακύρωση. Ό,τι και να "
"επιλέξετε, το αναδυόμενο καταστρέφεται κατόπιν."

#. (itstool) path: section/code
#: C/messagedialog.js.page:175
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new MessageDialogExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new MessageDialogExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/messagedialog.js.page:180
msgid ""
"Finally, we create a new instance of the finished MessageDialogExample "
"class, and set the application running."
msgstr ""
"Τελικά, δημιουργούμε ένα νέο στιγμιότυπο της ολοκληρωμένης κλάσης "
"MessageDialogExample και εκτελούμε την εφαρμογή."

#. (itstool) path: section/code
#: C/messagedialog.js.page:185
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const MessageDialogExample = new Lang.Class ({\n"
"    Name: 'MessageDialog Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jsmessagedialog',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._initMenus();\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Gtk.MessageDialog Example\",\n"
"            default_height: 200,\n"
"            default_width: 400 });\n"
"\n"
"        // Create a silly warning message and add it to the window\n"
"        this.warningLabel = new Gtk.Label ({\n"
"            label: \"This application goes boom! (Not really.)\"});\n"
"        this._window.add (this.warningLabel);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application menu, including the button that calls the dialog\n"
"    _initMenus: function() {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"Message\",'app.message');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // This pops up a MessageDialog when \"Message\" is clicked in the menu\n"
"        let messageAction = new Gio.SimpleAction ({ name: 'message' });\n"
"        messageAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showMessageDialog();\n"
"            }));\n"
"        this.application.add_action(messageAction);\n"
"\n"
"        // This closes the window when \"Quit\" is clicked in the menu\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"\n"
"\n"
"    _showMessageDialog: function () {\n"
"\n"
"        // Create a modal MessageDialog whose parent is the window\n"
"        this._messageDialog = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            buttons: Gtk.ButtonsType.OK_CANCEL,\n"
"            message_type: Gtk.MessageType.WARNING,\n"
"            text: \"This action will cause the universe to stop existing.\" });\n"
"\n"
"        this._messageDialog.connect ('response', Lang.bind(this, this._response_cb));\n"
"        this._messageDialog.show();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Callback function (aka signal handler) for the response signal\n"
"    _response_cb: function (messagedialog, response_id) {\n"
"\n"
"        // A simple switch that changes the main window's label\n"
"        switch (response_id) {\n"
"            case Gtk.ResponseType.OK:\n"
"                this.warningLabel.set_label (\"*BOOM*\\n\");\n"
"                break;\n"
"            case Gtk.ResponseType.CANCEL:\n"
"                this.warningLabel.set_label (\"Good choice!\\n\");\n"
"                break;\n"
"            case Gtk.ResponseType.DELETE_EVENT:\n"
"                this.warningLabel.set_label (\"Dialog closed or cancelled.\\n\");\n"
"                break;\n"
"        }\n"
"\n"
"        this._messageDialog.destroy();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new MessageDialogExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const MessageDialogExample = new Lang.Class ({\n"
"    Name: 'MessageDialog Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jsmessagedialog',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE });\n"
"\n"
"        // Σύνδεση σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' αρχικοποιεί τα μενού και δομεί τη διεπαφή χρήστη \n"
"    _onStartup: function () {\n"
"        this._initMenus();\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function () {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Gtk.MessageDialog Example\",\n"
"            default_height: 200,\n"
"            default_width: 400 });\n"
"\n"
"        // Δημιουργία ενός χαζού μηνύματος προειδοποίησης και προσθήκη του στο παράθυρο\n"
"        this.warningLabel = new Gtk.Label ({\n"
"            label: \"This application goes boom! (Not really.)\"});\n"
"        this._window.add (this.warningLabel);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Δόμηση του μενού της εφαρμογής, συμπεριλαμβανομένου του κουμπιού που καλεί τον διάλογο\n"
"    _initMenus: function() {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"Message\",'app.message');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // Αυτό εμφανίζει έναν διάλογο μηνύματος όταν πατιέται \"Message\" στο μενού\n"
"        let messageAction = new Gio.SimpleAction ({ name: 'message' });\n"
"        messageAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showMessageDialog();\n"
"            }));\n"
"        this.application.add_action(messageAction);\n"
"\n"
"        // Αυτό κλείνει το παράθυρο όταν πατιέται \"Quit\" στο μενού\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"\n"
"\n"
"    _showMessageDialog: function () {\n"
"\n"
"        // Δημιουργία ενός αναγκαστικού μηνύματος διαλόγου του οποίου το γονικό είναι στο παράθυρο\n"
"        this._messageDialog = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            buttons: Gtk.ButtonsType.OK_CANCEL,\n"
"            message_type: Gtk.MessageType.WARNING,\n"
"            text: \"This action will cause the universe to stop existing.\" });\n"
"\n"
"        this._messageDialog.connect ('response', Lang.bind(this, this._response_cb));\n"
"        this._messageDialog.show();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Η συνάρτηση επανάκλησης  (χειριστής σήματος aka) για το σήμα απάντησης\n"
"    _response_cb: function (messagedialog, response_id) {\n"
"\n"
"        // Ένας απλός διακόπτης που αλλάζει την ετικέτα του κυρίως παραθύρου\n"
"        switch (response_id) {\n"
"            case Gtk.ResponseType.OK:\n"
"                this.warningLabel.set_label (\"*BOOM*\\n\");\n"
"                break;\n"
"            case Gtk.ResponseType.CANCEL:\n"
"                this.warningLabel.set_label (\"Good choice!\\n\");\n"
"                break;\n"
"            case Gtk.ResponseType.DELETE_EVENT:\n"
"                this.warningLabel.set_label (\"Dialog closed or cancelled.\\n\");\n"
"                break;\n"
"        }\n"
"\n"
"        this._messageDialog.destroy();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής \n"
"let app = new MessageDialogExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: info/title
#: C/messagedialog.py.page:8
msgctxt "text"
msgid "MessageDialog (Python)"
msgstr "MessageDialog (Python)"

#. (itstool) path: page/p
#: C/messagedialog.py.page:24
msgid ""
"A message dialog which prints messages on the terminal, depending on your "
"choices."
msgstr ""
"Ένας διάλογος μηνύματος που τυπώνει μηνύματα στο τερματικό, ανάλογα με τις "
"επιλογές σας."

#. (itstool) path: section/code
#: C/messagedialog.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    # constructor for a window (the parent window) with a label\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GMenu Example\", application=app)\n"
"        self.set_default_size(400, 200)\n"
"        label = Gtk.Label()\n"
"        label.set_text(\"This application goes boom!\")\n"
"        self.add(label)\n"
"\n"
"        # create the message_action (a Gio.SimpleAction) - for the window\n"
"        message_action = Gio.SimpleAction.new(\"message\", None)\n"
"        # connect the signal from the action to the function message_cb()\n"
"        message_action.connect(\"activate\", self.message_cb)\n"
"        # add the action to the application\n"
"        app.add_action(message_action)\n"
"\n"
"    # callback function for the signal \"activate\" from the message_action\n"
"    # in the menu of the parent window\n"
"    def message_cb(self, action, parameter):\n"
"        # a Gtk.MessageDialog\n"
"        messagedialog = Gtk.MessageDialog(parent=self,\n"
"                                          flags=Gtk.DialogFlags.MODAL,\n"
"                                          type=Gtk.MessageType.WARNING,\n"
"                                          buttons=Gtk.ButtonsType.OK_CANCEL,\n"
"                                          message_format=\"This action will cause the universe to stop existing.\")\n"
"        # connect the response (of the button clicked) to the function\n"
"        # dialog_response()\n"
"        messagedialog.connect(\"response\", self.dialog_response)\n"
"        # show the messagedialog\n"
"        messagedialog.show()\n"
"\n"
"    def dialog_response(self, widget, response_id):\n"
"        # if the button clicked gives response OK (-5)\n"
"        if response_id == Gtk.ResponseType.OK:\n"
"            print \"*boom*\"\n"
"        # if the button clicked gives response CANCEL (-6)\n"
"        elif response_id == Gtk.ResponseType.CANCEL:\n"
"            print \"good choice\"\n"
"        # if the messagedialog is destroyed (by pressing ESC)\n"
"        elif response_id == Gtk.ResponseType.DELETE_EVENT:\n"
"            print \"dialog closed or cancelled\"\n"
"        # finally, destroy the messagedialog\n"
"        widget.destroy()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def quit_cb(self, action, parameter):\n"
"        self.quit()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # create a menu (a Gio.Menu)\n"
"        menu = Gio.Menu()\n"
"        # append a menu item with label \"Message\" and action \"app.message\"\n"
"        menu.append(\"Message\", \"app.message\")\n"
"        # append a menu item with label \"Quit\" and action \"app.quit\"\n"
"        menu.append(\"Quit\", \"app.quit\")\n"
"        # set menu as the menu for the application\n"
"        self.set_app_menu(menu)\n"
"\n"
"        # a new simpleaction - for the application\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_cb)\n"
"        self.add_action(quit_action)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    # constructor for a window (the parent window) with a label\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GMenu Example\", application=app)\n"
"        self.set_default_size(400, 200)\n"
"        label = Gtk.Label()\n"
"        label.set_text(\"This application goes boom!\")\n"
"        self.add(label)\n"
"\n"
"        # create the message_action (a Gio.SimpleAction) - for the window\n"
"        message_action = Gio.SimpleAction.new(\"message\", None)\n"
"        # connect the signal from the action to the function message_cb()\n"
"        message_action.connect(\"activate\", self.message_cb)\n"
"        # add the action to the application\n"
"        app.add_action(message_action)\n"
"\n"
"    # callback function for the signal \"activate\" from the message_action\n"
"    # in the menu of the parent window\n"
"    def message_cb(self, action, parameter):\n"
"        # a Gtk.MessageDialog\n"
"        messagedialog = Gtk.MessageDialog(parent=self,\n"
"                                          flags=Gtk.DialogFlags.MODAL,\n"
"                                          type=Gtk.MessageType.WARNING,\n"
"                                          buttons=Gtk.ButtonsType.OK_CANCEL,\n"
"                                          message_format=\"This action will cause the universe to stop existing.\")\n"
"        # connect the response (of the button clicked) to the function\n"
"        # dialog_response()\n"
"        messagedialog.connect(\"response\", self.dialog_response)\n"
"        # show the messagedialog\n"
"        messagedialog.show()\n"
"\n"
"    def dialog_response(self, widget, response_id):\n"
"        # if the button clicked gives response OK (-5)\n"
"        if response_id == Gtk.ResponseType.OK:\n"
"            print \"*boom*\"\n"
"        # if the button clicked gives response CANCEL (-6)\n"
"        elif response_id == Gtk.ResponseType.CANCEL:\n"
"            print \"good choice\"\n"
"        # if the messagedialog is destroyed (by pressing ESC)\n"
"        elif response_id == Gtk.ResponseType.DELETE_EVENT:\n"
"            print \"dialog closed or cancelled\"\n"
"        # finally, destroy the messagedialog\n"
"        widget.destroy()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def quit_cb(self, action, parameter):\n"
"        self.quit()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # create a menu (a Gio.Menu)\n"
"        menu = Gio.Menu()\n"
"        # append a menu item with label \"Message\" and action \"app.message\"\n"
"        menu.append(\"Message\", \"app.message\")\n"
"        # append a menu item with label \"Quit\" and action \"app.quit\"\n"
"        menu.append(\"Quit\", \"app.quit\")\n"
"        # set menu as the menu for the application\n"
"        self.set_app_menu(menu)\n"
"\n"
"        # a new simpleaction - for the application\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_cb)\n"
"        self.add_action(quit_action)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/messagedialog.py.page:36
msgid "Useful methods for a MessageDialog widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο MessageDialog"

#. (itstool) path: section/p
#: C/messagedialog.py.page:37
msgid ""
"In line 18 the signal <code>\"activate\"</code> is connected to the callback "
"function <code>message_cb()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"Στη γραμμή 18 το σήμα <code>\"activate\"</code> συνδέεται με τη συνάρτηση "
"επανάκλησης <code>message_cb()</code> χρησιμοποιώντας <code><var>widget</"
"var>.connect(<var>signal</var>, <var>callback function</var>)</code>. Δείτε "
"<link xref=\"signals-callbacks.py\"/> για μια πιο λεπτομερή εξήγηση."

#. (itstool) path: item/p
#: C/messagedialog.py.page:39
msgid ""
"In the constructor of MessageDialog we could set flags as <code>Gtk."
"DialogFlags.DESTROY_WITH_PARENT</code> (to destroy the messagedialog window "
"when its parent window is destroyed) or as <code>Gtk.DialogFlags.MODAL</"
"code> (no interaction with other windows of the application)."
msgstr ""
"Στον κατασκευαστή του MessageDialog μπορούμε να ορίσουμε σημαίες ως "
"<code>Gtk.DialogFlags.DESTROY_WITH_PARENT</code> (για καταστροφή του "
"παραθύρου διαλόγου μηνύματος όταν το ανιόν παράθυρο καταστράφηκε) ή ως "
"<code>Gtk.DialogFlags.MODAL</code> (χωρίς αλληλεπίδραση με άλλα παράθυρα της "
"εφαρμογής)."

#. (itstool) path: item/p
#: C/messagedialog.py.page:40
msgid ""
"In the constructor of MessageDialog we could set type as any of <code>Gtk."
"MessageType.INFO, Gtk.MessageType.WARNING, Gtk.MessageType.QUESTION, Gtk."
"MessageType.ERROR, Gtk.MessageType.OTHER</code> depending on what type of "
"message we want."
msgstr ""
"Στον κατασκευαστή του MessageDialog μπορούμε να ορίσουμε ως τύπο οποιοδήποτε "
"από τα <code>Gtk.MessageType.INFO, Gtk.MessageType.WARNING, Gtk.MessageType."
"QUESTION, Gtk.MessageType.ERROR, Gtk.MessageType.OTHER</code> ανάλογα με τι "
"τύπο μηνύματος θέλουμε."

#. (itstool) path: item/p
#: C/messagedialog.py.page:41
msgid ""
"In the constructor of MessageDialog we could set buttons as any of <code>Gtk."
"ButtonsType.NONE, Gtk.ButtonsType.OK, Gtk.ButtonsType.CLOSE, Gtk.ButtonsType."
"CANCEL, Gtk.ButtonsType.YES_NO, Gtk.ButtonsType.OK_CANCEL</code>, or any "
"button using <code>add_button()</code> as in Gtk.Dialog."
msgstr ""
"Στον κατασκευαστή του MessageDialog μπορούμε να ορίσουμε κουμπιά οποιαδήποτε "
"από τα <code>Gtk.ButtonsType.NONE, Gtk.ButtonsType.OK, Gtk.ButtonsType."
"CLOSE, Gtk.ButtonsType.CANCEL, Gtk.ButtonsType.YES_NO, Gtk.ButtonsType."
"OK_CANCEL</code>, ή οποιοδήποτε κουμπί χρησιμοποιώντας το "
"<code>add_button()</code> όπως στον Gtk.Dialog."

#. (itstool) path: item/p
#: C/messagedialog.py.page:42
msgid ""
"We could substitute the default image of the MessageDialog with another "
"image using"
msgstr ""
"Μπορούμε να αντικαταστήσουμε την προεπιλεγμένη εικόνα του MessageDialog με "
"άλλη εικόνα χρησιμοποιώντας"

#. (itstool) path: item/code
#: C/messagedialog.py.page:43
#, no-wrap
msgid ""
"\n"
"image = Gtk.Image()\n"
"image.set_from_stock(Gtk.STOCK_CAPS_LOCK_WARNING, Gtk.IconSize.DIALOG)\n"
"image.show()\n"
"messagedialog.set_image(image)"
msgstr ""
"\n"
"image = Gtk.Image()\n"
"image.set_from_stock(Gtk.STOCK_CAPS_LOCK_WARNING, Gtk.IconSize.DIALOG)\n"
"image.show()\n"
"messagedialog.set_image(image)"

#. (itstool) path: item/p
#: C/messagedialog.py.page:48
msgid ""
"where <code>Gtk.STOCK_CAPS_LOCK_WARNING</code> is any image from <link href="
"\"http://developer.gnome.org/gtk3/unstable/gtk3-Stock-Items.html\">Stock "
"Items</link>. We could also set any image as in the Image widget, as "
"<code>image.set_from_file(\"filename.png\")</code>."
msgstr ""
"όπου <code>Gtk.STOCK_CAPS_LOCK_WARNING</code> είναι οποιαδήποτε εικόνα από "
"<link href=\"http://developer.gnome.org/gtk3/unstable/gtk3-Stock-Items.html"
"\">στοιχεία αποθέματος</link>. Μπορούμε επίσης να ορίσουμε οποιαδήποτε "
"εικόνα όπως στο γραφικό στοιχείο της εικόνας, ως <code>image."
"set_from_file(\"filename.png\")</code>."

#. (itstool) path: item/p
#: C/messagedialog.py.page:49
msgid ""
"<code>format_secondary_text(\"some secondary message\")</code> sets a "
"secondary message. The primary text becomes bold."
msgstr ""
"Το <code>format_secondary_text(\"some secondary message\")</code> ορίζει ένα "
"δευτερεύον μήνυμα. Το πρωτεύον κείμενο γίνεται έντονο."

#. (itstool) path: item/p
#: C/messagedialog.py.page:59
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkMessageDialog.html"
"\">GtkMessageDialog</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkMessageDialog.html"
"\">GtkMessageDialog</link>"

#. (itstool) path: item/p
#: C/messagedialog.py.page:63
msgid ""
"<link href=\"http://developer.gnome.org/gio/unstable/GActionMap.html"
"\">GActionMap</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gio/unstable/GActionMap.html"
"\">GActionMap</link>"

#. (itstool) path: info/title
#: C/messagedialog.vala.page:8
msgctxt "text"
msgid "MessageDialog (Vala)"
msgstr "MessageDialog (Vala)"

#. (itstool) path: page/code
#: C/messagedialog.vala.page:25
#, no-wrap
msgid ""
"\n"
"//A window in the application\n"
"public class Window : Gtk.ApplicationWindow {\n"
"\tpublic Window (Application app) {\n"
"\t\tObject (application: app, title: \"Gtk.MessageDialog Example\");\n"
"\n"
"\t\tvar label = new Gtk.Label (\"This application goes boom!\");\n"
"\t\tthis.add (label);\n"
"\n"
"\t\tvar message_action = new SimpleAction (\"message\", null);\n"
"\t\tmessage_action.activate.connect (message);\n"
"\t\tthis.add_action (message_action);\n"
"\n"
"\t\tthis.set_default_size (400, 200);\n"
"\t\tthis.show_all ();\n"
"\t}\n"
"\n"
"\tvoid dialog_response (Gtk.Dialog dialog, int response_id) {\n"
"\t\tswitch (response_id) {\n"
"\t\t\tcase Gtk.ResponseType.OK:\n"
"\t\t\t\tprint (\"*boom*\\n\");\n"
"\t\t\t\tbreak;\n"
"\t\t\tcase Gtk.ResponseType.CANCEL:\n"
"\t\t\t\tprint (\"good choice\\n\");\n"
"\t\t\t\tbreak;\n"
"\t\t\tcase Gtk.ResponseType.DELETE_EVENT:\n"
"\t\t\t\tprint (\"dialog closed or cancelled\\n\");\n"
"\t\t\t\tbreak;\n"
"\t\t}\n"
"\t\t\tdialog.destroy();\n"
"\t}\n"
"\n"
"\tvoid message (SimpleAction simple, Variant? parameter) {\n"
"\t\tvar messagedialog = new Gtk.MessageDialog (this,\n"
"                            Gtk.DialogFlags.MODAL,\n"
"                            Gtk.MessageType.WARNING,\n"
"                            Gtk.ButtonsType.OK_CANCEL,\n"
"                            \"This action will cause the universe to stop existing.\");\n"
"\n"
"\t\tmessagedialog.response.connect (dialog_response);\n"
"\t\tmessagedialog.show ();\n"
"\t}\n"
"}\n"
"\n"
"//This is the Application\n"
"public class Application : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew Window (this);\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\tvar menu = new Menu ();\n"
"\t\tmenu.append (\"Message\", \"win.message\");\n"
"\t\tmenu.append (\"Quit\", \"app.quit\");\n"
"\t\tthis.app_menu = menu;\n"
"\n"
"\t\tvar quit_action = new SimpleAction (\"quit\", null);\n"
"\t\t//quit_action.activate.connect (this.quit);\n"
"\t\tthis.add_action (quit_action);\n"
"\t}\n"
"\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.application\");\n"
"\t}\n"
"}\n"
"\n"
"//main function creates Application and runs it\n"
"int main (string[] args) {\n"
"\treturn new Application ().run (args);\n"
"}\n"
msgstr ""
"\n"
"//Ένα παράθυρο στην εφαρμογή\n"
"public class Window : Gtk.ApplicationWindow {\n"
"\tpublic Window (Application app) {\n"
"\t\tObject (application: app, title: \"Gtk.MessageDialog Example\");\n"
"\n"
"\t\tvar label = new Gtk.Label (\"This application goes boom!\");\n"
"\t\tthis.add (label);\n"
"\n"
"\t\tvar message_action = new SimpleAction (\"message\", null);\n"
"\t\tmessage_action.activate.connect (message);\n"
"\t\tthis.add_action (message_action);\n"
"\n"
"\t\tthis.set_default_size (400, 200);\n"
"\t\tthis.show_all ();\n"
"\t}\n"
"\n"
"\tvoid dialog_response (Gtk.Dialog dialog, int response_id) {\n"
"\t\tswitch (response_id) {\n"
"\t\t\tcase Gtk.ResponseType.OK:\n"
"\t\t\t\tprint (\"*boom*\\n\");\n"
"\t\t\t\tbreak;\n"
"\t\t\tcase Gtk.ResponseType.CANCEL:\n"
"\t\t\t\tprint (\"good choice\\n\");\n"
"\t\t\t\tbreak;\n"
"\t\t\tcase Gtk.ResponseType.DELETE_EVENT:\n"
"\t\t\t\tprint (\"dialog closed or cancelled\\n\");\n"
"\t\t\t\tbreak;\n"
"\t\t}\n"
"\t\t\tdialog.destroy();\n"
"\t}\n"
"\n"
"\tvoid message (SimpleAction simple, Variant? parameter) {\n"
"\t\tvar messagedialog = new Gtk.MessageDialog (this,\n"
"                            Gtk.DialogFlags.MODAL,\n"
"                            Gtk.MessageType.WARNING,\n"
"                            Gtk.ButtonsType.OK_CANCEL,\n"
"                            \"This action will cause the universe to stop existing.\");\n"
"\n"
"\t\tmessagedialog.response.connect (dialog_response);\n"
"\t\tmessagedialog.show ();\n"
"\t}\n"
"}\n"
"\n"
"//Αυτή είναι η εφαρμογή\n"
"public class Application : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew Window (this);\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\tvar menu = new Menu ();\n"
"\t\tmenu.append (\"Message\", \"win.message\");\n"
"\t\tmenu.append (\"Quit\", \"app.quit\");\n"
"\t\tthis.app_menu = menu;\n"
"\n"
"\t\tvar quit_action = new SimpleAction (\"quit\", null);\n"
"\t\t//quit_action.activate.connect (this.quit);\n"
"\t\tthis.add_action (quit_action);\n"
"\t}\n"
"\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.application\");\n"
"\t}\n"
"}\n"
"\n"
"//Η κύρια συνάρτηση δημιουργεί την εφαρμογή και την εκτελεί\n"
"int main (string[] args) {\n"
"\treturn new Application ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/messagedialog.vala.page:31
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ResponseType.html\">Gtk."
"ResponseType</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ResponseType.html\">Gtk."
"ResponseType</link>"

#. (itstool) path: item/p
#: C/messagedialog.vala.page:32
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.MessageDialog.html\">Gtk."
"MessageDialog</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.MessageDialog.html\">Gtk."
"MessageDialog</link>"

#. (itstool) path: item/p
#: C/messagedialog.vala.page:33
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.DialogFlags.html\">Gtk."
"DialogFlags</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.DialogFlags.html\">Gtk."
"DialogFlags</link>"

#. (itstool) path: item/p
#: C/messagedialog.vala.page:34
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.MessageType.html\">Gtk."
"MessageType</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.MessageType.html\">Gtk."
"MessageType</link>"

#. (itstool) path: item/p
#: C/messagedialog.vala.page:35
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ButtonsType.html\">Gtk."
"ButtonsType</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ButtonsType.html\">Gtk."
"ButtonsType</link>"

#. (itstool) path: info/title
#: C/model-view-controller.py.page:9
msgctxt "text"
msgid "The Model/View/Controller design (Python)"
msgstr "Η σχεδίαση προτύπου/προβολής/ελεγκτή (Python)"

#. (itstool) path: info/desc
#. (itstool) path: page/title
#: C/model-view-controller.py.page:14 C/model-view-controller.py.page:27
msgid "The Model/View/Controller design"
msgstr "Η σχεδίαση προτύπου/προβολής/ελεγκτή"

#. (itstool) path: section/title
#: C/model-view-controller.py.page:32 C/properties.py.page:32
#: C/signals-callbacks.py.page:32
msgid "Overview"
msgstr "Επισκόπηση"

#. (itstool) path: section/p
#: C/model-view-controller.py.page:34
msgid ""
"Both the <link xref=\"treeview_simple_liststore.py\">TreeView</link> and the "
"<link xref=\"combobox.py\">ComboBox</link> widgets are built on the "
"<em>Model/View/Controller</em> design. The <em>Model</em> (an implementation "
"of <code>Gtk.TreeModel</code>, usually <code>Gtk.TreeStore</code> or "
"<code>Gtk.ListStore</code>) stores the data; the <em>View</em> (e.g. "
"<code>Gtk.TreeView</code>, <code>Gtk.ComboBox</code>, or <code>Gtk."
"ComboBoxText</code>) gets change notifications and displays the content of "
"the model. The <em>Controller</em>, finally, changes the state of the model "
"(via some methods in the model's implementation - such as <code>append()</"
"code> or <code>remove()</code>) and notifies the view of these changes (via "
"signals like <code>\"changed\"</code>)."
msgstr ""
"Αμφότερα τα γραφικά στοιχεία <link xref=\"treeview_simple_liststore.py"
"\">TreeView</link> και <link xref=\"combobox.py\">ComboBox</link> "
"κατασκευάζονται στη σχεδίαση <em>πρότυπο/προβολή/ελεγκτής</em>. Το "
"<em>πρότυπο</em> (μια εφαρμογή του <code>Gtk.TreeModel</code>, συνήθως "
"<code>Gtk.TreeStore</code> ή <code>Gtk.ListStore</code>) αποθηκεύει τα "
"δεδομένα· η <em>προβολή</em> (π.χ. <code>Gtk.TreeView</code>, <code>Gtk."
"ComboBox</code>, ή <code>Gtk.ComboBoxText</code>) δέχεται ειδοποιήσεις "
"αλλαγής και εμφανίζει το περιεχόμενο του προτύπου. Ο <em>ελεγκτής</em>, "
"τελικά, αλλάζει την κατάσταση του προτύπου (μέσα από κάποιες μεθόδους στην "
"εφαρμογή του προτύπου - όπως <code>append()</code> ή <code>remove()</code>) "
"και ειδοποιεί την προβολή αυτών των αλλαγών (μέσα από σήματα όπως <code>"
"\"changed\"</code>)."

#. (itstool) path: section/title
#: C/model-view-controller.py.page:39
msgid "The Model"
msgstr "Το πρότυπο"

#. (itstool) path: section/p
#: C/model-view-controller.py.page:41
msgid ""
"The main difference between the two main implementations of <code>Gtk."
"TreeModel</code> is that <code>Gtk.ListStore</code> contains simple rows of "
"data without children, whereas <code>Gtk.TreeStore</code> also contains rows "
"of data, but each row may have child rows (which in turn can have child "
"rows, and so on)."
msgstr ""
"Η κύρια διαφορά μεταξύ των δύο κύριων εφαρμογών του <code>Gtk.TreeModel</"
"code> είναι ότι η <code>Gtk.ListStore</code> περιέχει απλές γραμμές "
"δεδομένων χωρίς θυγατρικά, ενώ η <code>Gtk.TreeStore</code> περιέχει επίσης "
"γραμμές δεδομένων, αλλά κάθε γραμμή μπορεί να έχει θυγατρικές γραμμές (που "
"με τη σειρά τους μπορούν να έχουν θυγατρικές γραμμές κ.ο.κ)."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:43
msgid ""
"The data in the Model can be retrieved or modified using the tree iter and "
"column index, or <code>Gtk.TreeIter</code>, or <code>Gtk.TreePath</code>."
msgstr ""
"Τα δεδομένα στο πρότυπο μπορούν να ανακτηθούν ή να τροποποιηθούν "
"χρησιμοποιώντας την επανάληψη δένδρου και δείκτη στήλης, ή <code>Gtk."
"TreeIter</code>, ή <code>Gtk.TreePath</code>."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:45
msgid ""
"As with Python's built-in list object you can use <code>len()</code> to get "
"the number of rows and use slices to retrieve or set values. Otherwise, the "
"method <code>append()</code> returns a <code>Gtk.TreeIter</code> instance, "
"which points to the location of the newly inserted row. You can also "
"retrieve a <code>Gtk.TreeIter</code> by calling <code>get_iter()</code>."
msgstr ""
"Όπως με την ενσωματωμένη λίστα αντικειμένων του Python μπορείτε να "
"χρησιμοποιήσετε <code>len()</code> για να πάρετε τον αριθμό των γραμμών και "
"χρησιμοποιήστε τμήματα για ανάκτηση ή ορισμό τιμών. Αλλιώς, η μέθοδος "
"<code>append()</code> επιστρέφει ένα στιγμιότυπο <code>Gtk.TreeIter</code>, "
"που δείχνει στη θέση της νεοεισαγμένης γραμμής. Μπορείτε επίσης να "
"ανακτήσετε μια <code>Gtk.TreeIter</code> καλώντας <code>get_iter()</code>."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:47
msgid ""
"As <code>Gtk.ListStore</code> contains only one level, i.e. nodes do not "
"have any child nodes, a path is essentially the index of the row you want to "
"access. In the case of <code>Gtk.TreeStore</code>, a path is a list of "
"indexes or a string. The string form is a list of numbers separated by a "
"colon. Each number refers to the offset at that level. Thus, the path <code>"
"\"0\"</code> refers to the root node and the path <code>\"2:4\"</code> "
"refers to the fifth child of the third node."
msgstr ""
"Καθώς η <code>Gtk.ListStore</code> περιέχει μόνο ένα επίπεδο, δηλαδή κόμβους "
"που δεν έχουν οποιουσδήποτε θυγατρικούς κόμβους, μια διαδρομή είναι βασικά "
"ένας δείκτης της γραμμής που θέλετε να προσπελάσετε. Στην περίπτωση της "
"<code>Gtk.TreeStore</code>, μια διαδρομή είναι μια λίστα δεικτών ή μιας "
"συμβολοσειράς. Η μορφή συμβολοσειράς είναι μια λίστα αριθμών διαχωριζόμενων "
"με μία άνω-κάτω τελεία. Κάθε αριθμός αναφέρεται στην αντιστάθμιση αυτής της "
"στάθμης. Έτσι, η διαδρομή <code>\"0\"</code> αναφέρεται στον ριζικό κόμβο "
"και η διαδρομή <code>\"2:4\"</code> αναφέρεται στον πέμπτο θυγατρικό του "
"τρίτου κόμβου."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:49
msgid "Useful methods for a <code>Gtk.TreeModel</code>:"
msgstr "Χρήσιμες μέθοδοι για ένα <code>Gtk.TreeModel</code>:"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:51
msgid ""
"<code>get_iter(path)</code> returns a <code>Gtk.TreeIter</code> instance "
"pointing to <code>path</code>. This is expected to be a colon-separated list "
"of numbers, or a tuple. For example, the string <code>\"10:4:0\"</code> is "
"equivalent to the tuple <code>(10, 4, 0)</code>, as both would create a path "
"of depth 3 pointing to the 11th child of the root node, the 5th child of "
"that 11th child, and the 1st child of that 5th child."
msgstr ""
"Η <code>get_iter(path)</code> επιστρέφει ένα στιγμιότυπο <code>Gtk.TreeIter</"
"code> που δείχνει στη <code>path</code>. Αυτό αναμένεται να είναι μια λίστα "
"αριθμών διαχωριζόμενων με διπλή τελεία, ή μια πλειάδα. Για παράδειγμα, η "
"συμβολοσειρά <code>\"10:4:0\"</code> είναι ισοδύναμη με την πλειάδα "
"<code>(10, 4, 0)</code>, καθώς και οι δυο μπορούν να δημιουργήσουν μια "
"διαδρομή βάθους 3 που να δείχνει στην 11η θυγατρική του ριζικού κόμβου, την "
"5η θυγατρική της 11ης θυγατρικής και 1η θυγατρική της 5ης θυγατρικής."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:52
msgid ""
"<code>iter_next(treeiter)</code> returns a <code>Gtk.TreeIter</code> "
"instance pointing the node following treeiter at the current level or "
"<code>None</code> if there is no next iter."
msgstr ""
"Η <code>iter_next(treeiter)</code> επιστρέφει ένα στιγμιότυπο <code>Gtk."
"TreeIter</code> που δείχνει τον κόμβο που ακολουθεί την treeiter στο τρέχον "
"επίπεδο ή <code>None</code> εάν δεν υπάρχει επόμενη επανάληψη."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:53
msgid ""
"<code>iter_has_child(treeiter)</code> returns <code>True</code> if "
"<code>treeiter</code> has children, <code>False</code> otherwise."
msgstr ""
"Η <code>iter_has_child(treeiter)</code> επιστρέφει <code>True</code> εάν η "
"<code>treeiter</code> έχει θυγατρικά, αλλιώς <code>False</code>."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:54
msgid ""
"<code>iter_children(treeiter)</code> returns a <code>Gtk.TreeIter</code> "
"instance pointing to the first child of <code>treeiter</code> or <code>None</"
"code> if <code>treeiter</code> has no children."
msgstr ""
"Η <code>iter_children(treeiter)</code> επιστρέφει ένα στιγμιότυπο <code>Gtk."
"TreeIter</code> που δείχνει στην πρώτη θυγατρική της <code>treeiter</code> ή "
"<code>None</code> εάν η <code>treeiter</code> δεν έχει θυγατρικές."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:55
msgid ""
"<code>get_iter_first()</code> returns a <code>Gtk.TreeIter</code> instance "
"pointing to the first iterator in the tree (the one at the path <code>\"0\"</"
"code>) or <code>None</code> if the tree is empty."
msgstr ""
"Η <code>get_iter_first()</code> επιστρέφει ένα στιγμιότυπο <code>Gtk."
"TreeIter</code> που δείχνει στον πρώτο επαναλήπτη στο δένδρο (αε αυτόν στη "
"διαδρομή <code>\"0\"</code>) ή <code>None</code> εάν το δένδρο είναι κενό."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:58
msgid "Useful methods for a <code>Gtk.ListStore</code>:"
msgstr "Χρήσιμες μέθοδοι για μια <code>Gtk.ListStore</code>:"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:60
msgid ""
"<code>append(row)</code> appends a new row to this list store, where "
"<code>row</code> can be a list of values for each column; <code>row</code> "
"can also be omitted or <code>None</code>, and in that case an empty row will "
"be appended. The method returns a <code>Gtk.TreeIter</code> pointing to the "
"appended row."
msgstr ""
"Η <code>append(row)</code> προσαρτά μια νέα γραμμή σε αυτή την αποθήκη "
"λίστας, όπου <code>row</code> μπορεί να είναι μια λίστα τιμών για κάθε "
"στήλη· η <code>row</code> μπορεί επίσης να παραλειφθεί ή <code>None</code> "
"και σε αυτήν την περίπτωση μια κενή γραμμή θα προσαρτηθεί. Η μέθοδος "
"επιστρέφει μια <code>Gtk.TreeIter</code> που δείχνει στην προσαρτημένη "
"γραμμή."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:61 C/model-view-controller.py.page:67
msgid ""
"<code>remove(iter)</code> removes <code>iter</code> from the <code>Gtk."
"ListStore</code>, and returns <code>True</code> if the iter is valid, and "
"<code>False</code> if the iter is not. After being removed, <code>iter</"
"code> is set to be the next valid row."
msgstr ""
"Η <code>remove(iter)</code> αφαιρεί την <code>iter</code> από την <code>Gtk."
"ListStore</code> και επιστρέφει <code>True</code> εάν η επανάληψη είναι "
"έγκυρη και <code>False</code> εάν η επανάληψη δεν είναι. Μετά την αφαίρεση, "
"η <code>iter</code> ορίζεται να είναι η επόμενη έγκυρη γραμμή."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:64
msgid "Useful methods for a <code>Gtk.TreeStore</code>:"
msgstr "Χρήσιμες μέθοδοι για μία <code>Gtk.TreeStore</code>:"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:66
msgid ""
"<code>append(parent, row)</code> appends a new row to this tree store; "
"<code>parent</code> must be a valid Gtk.TreeIter. If parent is not "
"<code>None</code>, then it will append the new row after the last child of "
"parent, otherwise it will append a row to the top level; <code>row</code> "
"can be a list of values for each column, or it can be omitted or <code>None</"
"code>; in this latter case an empty row will be appended. The method returns "
"a <code>Gtk.TreeIter</code> pointing to the appended row."
msgstr ""
"Η <code>append(parent, row)</code> προσαρτά μια νέα γραμμή σε αυτήν την "
"αποθήκη δένδρου· ο <code>parent</code> πρέπει να είναι μια έγκυρη Gtk."
"TreeIter. Εάν ο γονικός δεν είναι <code>None</code>, τότε θα προσαρτήσει τη "
"νέα γραμμή μετά την τελευταία θυγατρική του γονικού, αλλιώς θα προσαρτήσει "
"μια γραμμή στο κορυφαίο επίπεδο· η <code>row</code> μπορεί να είναι μια "
"λίστα τιμών για κάθε στήλη, ή μπορεί να παραληφθεί ή <code>None</code>· στην "
"τελευταία περίπτωση μια κενή γραμμή θα προσαρτηθεί. Η μέθοδος επιστρέφει μια "
"<code>Gtk.TreeIter</code> που δείχνει την προσαρτημένη γραμμή."

#. (itstool) path: section/title
#: C/model-view-controller.py.page:73
msgid "The View: the TreeView case"
msgstr "Η προβολή: η περίπτωση TreeView"

#. (itstool) path: section/p
#: C/model-view-controller.py.page:75
msgid ""
"A Treeview shows the structure of children and parent items as a tree. See "
"for instance <link xref=\"treeview_treestore.py\">this example</link>."
msgstr ""
"Μια Treeview δείχνει τη δομή των θυγατρικών και γονικών στοιχείων ως ένα "
"δένδρο. Δείτε για παράδειγμα <link xref=\"treeview_treestore.py\">αυτό το "
"παράδειγμα</link>."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:77
msgid ""
"The <code>Gtk.TreeViewColumn</code> is used to organize the vertical columns."
msgstr ""
"Η <code>Gtk.TreeViewColumn</code> χρησιμοποιείται για οργάνωση των κάθετων "
"στηλών."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:79
msgid "Useful methods for a <code>Gtk.TreeView</code>:"
msgstr "Χρήσιμες μέθοδοι για μια <code>Gtk.TreeView</code>:"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:81
msgid ""
"<code>set_model(model)</code> sets the model for this tree view. If this "
"tree view already has a model set, it will remove it before setting the new "
"model. If model is <code>None</code>, then it will unset the old model."
msgstr ""
"Ο <code>set_model(model)</code> ορίζει το πρότυπο για αυτήν την προβολή "
"δένδρου. Εάν αυτή η προβολή δένδρου έχει ήδη ένα σύνολο προτύπων, θα το "
"αφαιρέσει πριν τη ρύθμιση του νέου προτύπου. Εάν το πρότυπο είναι "
"<code>None</code>, τότε θα αναιρέσει το παλιό πρότυπο."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:82
msgid ""
"<code>get_model()</code> returns the model this tree view is based on, "
"<code>None</code> if the model is unset."
msgstr ""
"Η <code>get_model()</code> επιστρέφει το πρότυπο αυτής της προβολής δένδρου "
"στο οποίο βασίζεται, <code>None</code> εάν το πρότυπο έχει αναιρεθεί."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:83
msgid ""
"<code>append_column(column)</code> appends <code>column</code> to the list "
"of columns."
msgstr ""
"Η <code>append_column(column)</code> προσαρτά <code>column</code> στη λίστα "
"των στηλών."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:84
msgid ""
"<code>get_selection()</code> gets the <code>Gtk.TreeSelection</code> "
"associated with this tree view."
msgstr ""
"Η <code>get_selection()</code> παίρνει την <code>Gtk.TreeSelection</code> "
"συσχετισμένη με αυτήν την προβολή δένδρου."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:87
msgid "Useful methods for a <code>Gtk.TreeViewColumn</code>:"
msgstr "Χρήσιμες μέθοδοι για μια <code>Gtk.TreeViewColumn</code>:"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:89
msgid ""
"<code>add_attribute(renderer, attribute, value)</code> adds an attribute "
"mapping to this column. <code>attribute</code> is the parameter on "
"<code>renderer</code> to be set from the <code>value</code>"
msgstr ""
"Η <code>add_attribute(renderer, attribute, value)</code> προσθέτει μια "
"απεικόνιση γνωρίσματος σε αυτήν τη στήλη. Το <code>attribute</code> είναι η "
"παράμετρος στον <code>renderer</code> για να οριστεί από την <code>value</"
"code>"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:90
msgid ""
"<code>pack_start(renderer, expand)</code> packs <code>renderer</code> into "
"the beginning of this column. If <code>expand</code> is <code>False</code>, "
"then <code>renderer</code> is allocated no more space than it needs. Any "
"unused space is divided evenly between cells for which expand is <code>True</"
"code>."
msgstr ""
"Η <code>pack_start(renderer, expand)</code> πακετάρει τον <code>renderer</"
"code> στην αρχή αυτής της στήλης. Εάν η <code>expand</code> είναι "
"<code>False</code>, τότε στον <code>renderer</code> δεν κατανέμεται "
"περισσότερος χώρος από όσο χρειάζεται. Οποιοσδήποτε αχρησιμοποίητος χώρος "
"διαιρείται εξίσου μεταξύ των κελιών για τα οποία η επέκταση είναι "
"<code>True</code>."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:91
msgid ""
"<code>pack_end(renderer, expand)</code> adds <code>renderer</code> to end of "
"this column. If <code>expand</code> is <code>False</code>, then "
"<code>renderer</code> is allocated no more space than it needs. Any unused "
"space is divided evenly between cells for which <code>expand</code> is "
"<code>True</code>."
msgstr ""
"Το <code>pack_end(renderer, expand)</code> προσθέτει τον <code>renderer</"
"code> στο τέλος αυτής της στήλης. Εάν η <code>expand</code> είναι "
"<code>False</code>, τότε στον <code>renderer</code> δεν κατανέμεται "
"περισσότερος χώρος από όσο χρειάζεται. Οποιοσδήποτε αχρησιμοποίητος χώρος "
"διαιρείται εξίσου μεταξύ των κελιών για τα οποία η <code>expand</code> είναι "
"<code>True</code>."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:92
msgid ""
"<code>set_sort_column_id(sort_column_id)</code> sets the column of the model "
"by which this column (of the view) should be sorted. This also makes the "
"column header clickable."
msgstr ""
"Η <code>set_sort_column_id(sort_column_id)</code> ορίζει τη στήλη του "
"προτύπου σύμφωνα με το οποίο αυτή η στήλη (της προβολής) πρέπει να "
"ταξινομηθεί. Αυτό επίσης κάνει την κεφαλίδα της στήλης επιλέξιμη."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:93
msgid ""
"<code>set_sort_indicator(setting)</code> sets whether a little arrow is "
"displayed in the column header; <code>setting</code> can either be "
"<code>True</code> (indicator is shown) or <code>False</code>."
msgstr ""
"Η <code>set_sort_indicator(setting)</code> ορίζει εάν ένα μικρό βέλος "
"εμφανίζεται στην κεφαλίδα της στήλης· η <code>setting</code> μπορεί ή να "
"είναι <code>True</code> (ο δείκτης προβάλλεται) ή <code>False</code>."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:94
msgid ""
"<code>set_sort_order(order)</code> changes the order by which the column is "
"sorted; <code>order</code> can either be <code>Gtk.SortType.ASCENDING</code> "
"or <code>Gtk.SortType.DESCENDING</code>."
msgstr ""
"Η <code>set_sort_order(order)</code> αλλάζει τη σειρά με την οποία η στήλη "
"ταξινομείται· η <code>order</code> μπορεί να είναι είτε <code>Gtk.SortType."
"ASCENDING</code> ή <code>Gtk.SortType.DESCENDING</code>."

#. (itstool) path: section/title
#: C/model-view-controller.py.page:100
msgid "The View: the ComboBox case"
msgstr "Η προβολή: η περίπτωση ComboBox"

#. (itstool) path: section/p
#: C/model-view-controller.py.page:102
msgid ""
"A <code>Gtk.ComboBox</code> allows for the selection of an item from a "
"dropdown menu, see for instance <link xref=\"combobox.py\">this example</"
"link>. For a list of textual choices, one can also use the simpler <code>Gtk."
"ComboBoxText</code>. Both <code>Gtk.ComboBox</code> and <code>Gtk."
"ComboBoxText</code> can contain an entry."
msgstr ""
"Ένα <code>Gtk.ComboBox</code> επιτρέπει την επιλογή ενός στοιχείου από ένα "
"πτυσσόμενο μενού, δείτε <link xref=\"combobox.py\">αυτό το παράδειγμα</"
"link>. Για μια λίστα κειμενικών επιλογών, μπορεί κάποιος να χρησιμοποιήσει "
"πιο απλό <code>Gtk.ComboBoxText</code>. Αμφότερα τα <code>Gtk.ComboBox</"
"code> και <code>Gtk.ComboBoxText</code> μπορούν να περιέχουν μια καταχώριση."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:104
msgid "Useful methods for a <code>Gtk.ComboBox</code>:"
msgstr "Χρήσιμες μέθοδοι για ένα <code>Gtk.ComboBox</code>:"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:106
msgid ""
"The static method <code>new_with_entry()</code> creates a new empty "
"<code>Gtk.ComboBox</code> with an entry; the static method "
"<code>new_with_model(model)</code> creates a new one with the model "
"initialized to <code>model</code>; and the static method "
"<code>new_with_model_and_entry(model)</code> is a combination of the two."
msgstr ""
"Η στατική μέθοδος <code>new_with_entry()</code> δημιουργεί ένα νέο κενό "
"<code>Gtk.ComboBox</code> με μια εισαγωγή· η στατική μέθοδος "
"<code>new_with_model(model)</code> δημιουργεί μια νέα με το αρχικοποιημένο "
"πρότυπο στο <code>model</code>· και η στατική μέθοδος "
"<code>new_with_model_and_entry(model)</code> είναι ένας συνδυασμός των δύο."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:107
msgid ""
"<code>get_active_iter()</code> returns a <code>Gtk.TreeIter</code> pointing "
"to the current active item. If no active item exists, <code>None</code> is "
"returned."
msgstr ""
"Η <code>get_active_iter()</code> επιστρέφει μια <code>Gtk.TreeIter</code> "
"που δείχνει στο τρέχον ενεργό στοιχείο. Εάν δεν υπάρχει ενεργό στοιχείο, "
"επιστρέφεται <code>None</code>."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:108
msgid ""
"<code>set_model(model)</code> sets the model used by this combo box to be "
"<code>model</code>, and it will unset a previously set model (if there is "
"any). If <code>model</code> is <code>None</code>, then it will unset the "
"model. Note that this function does not clear the cell renderers."
msgstr ""
"Ο <code>set_model(model)</code> ορίζει το χρησιμοποιούμενο πρότυπο από αυτό "
"το σύνθετο πλαίσιο για να είναι <code>model</code> και θα αναιρέσει ένα "
"προηγούμενο πρότυπο συνόλου (εάν υπάρχει κάποιο). Εάν το <code>model</code> "
"είναι <code>None</code>, τότε θα αναιρέσει το πρότυπο. Σημειώστε ότι αυτή η "
"συνάρτηση δεν καθαρίζει τους απεικονιστές κελιών."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:109
msgid ""
"<code>set_entry_text_column(text_column)</code> sets the model column which "
"this combo box should use to get strings from to be <code>text_column</"
"code>. The column <code>text_column</code> in the model of this combo box "
"must be of type <code>str</code> (this is only relevant if this combo box "
"has been created with the “has-entry” property set to True)."
msgstr ""
"Ο <code>set_entry_text_column(text_column)</code> ορίζει τη στήλη προτύπου "
"την οποία αυτό το σύνθετο πλαίσιο πρέπει να χρησιμοποιήσει για να πάρει "
"συμβολοσειρές από <code>text_column</code>. Η στήλη <code>text_column</code> "
"σε αυτό το πρότυπο αυτού του σύνθετου πλαισίου πρέπει να είναι του τύπου "
"<code>str</code> (αυτό είναι κατάλληλο μόνο εάν αυτό το σύνθετο πλαίσιο "
"δημιουργήθηκε με την ιδιότητα “has-entry” ορισμένη σε αληθή)."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:110
msgid ""
"<code>set_wrap_width(width)</code> sets the wrap width of this combo box to "
"be <code>width</code>. The wrap width is basically the preferred number of "
"columns when you want the popup to be layed out in a grid."
msgstr ""
"Ο <code>set_wrap_width(width)</code> ορίζει το πλάτος αναδίπλωσης αυτού του "
"σύνθετου πλαισίου να είναι <code>width</code>. Το πλάτος αναδίπλωσης είναι "
"βασικά ο προτιμώμενος αριθμός των στηλών όταν θέλετε το αναδυόμενο να "
"εμφανιστεί σε ένα πλέγμα."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:113
msgid "Useful methods for a <code>Gtk.ComboBoxText</code>:"
msgstr "Χρήσιμες μέθοδοι για ένα <code>Gtk.ComboBoxText</code>:"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:115
msgid ""
"The static method <code>new_with_entry()</code> creates a new empty "
"<code>Gtk.ComboBoxText</code> with an entry."
msgstr ""
"Η στατική μέθοδος <code>new_with_entry()</code> δημιουργεί ένα νέο κενό "
"<code>Gtk.ComboBoxText</code> με μια εγγραφή."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:116
msgid ""
"<code>append_text(text)</code> appends <code>text</code> to the list of "
"strings stored in this combo box."
msgstr ""
"Η <code>append_text(text)</code> προσαρτά το <code>text</code> στη λίστα των "
"αποθηκευμένων συμβολοσειρών σε αυτό το σύνθετο πλαίσιο."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:117
msgid ""
"<code>get_active_text()</code> returns the currently active string in this "
"combo box, or <code>None</code> if none is selected. If this combo box "
"contains an entry, this function will return its contents (which will not "
"necessarily be an item from the list)."
msgstr ""
"Η <code>get_active_text()</code> επιστρέφει την τρέχουσα ενεργή συμβολοσειρά "
"σε αυτό το σύνθετο πλαίσιο ή <code>None</code> εάν δεν επιλέγεται τίποτα. "
"Εάν αυτό το σύνθετο πλαίσιο περιέχει μια εγγραφή, αυτή η συνάρτηση θα "
"επιστρέψει τα περιεχόμενα της (που δεν θα είναι αναγκαστικά ένα στοιχείο από "
"τη λίστα)."

#. (itstool) path: section/title
#: C/model-view-controller.py.page:123
msgid "The View: the Cellrenderers"
msgstr "Η προβολή: οι απεικονιστές κελιού"

#. (itstool) path: section/p
#: C/model-view-controller.py.page:125
msgid ""
"The View makes use of <code>Gtk.CellRenderer</code>s of various types to "
"draw the data."
msgstr ""
"Η προβολή κάνει χρήση των <code>Gtk.CellRenderer</code> των ποικίλων τύπων "
"σχεδίασης των δεδομένων."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:127
msgid "Implementations of <code>Gtk.CellRenderer</code> and useful methods:"
msgstr "Εφαρμογές του <code>Gtk.CellRenderer</code> και χρήσιμες μέθοδοι:"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:129
msgid "<code>Gtk.CellRendererText</code> - renders text in a cell"
msgstr "<code>Gtk.CellRendererText</code> - αποδίδει κείμενο σε ένα κελί"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:130
msgid ""
"<code>Gtk.CellRendererToggle</code> - renders a toggle or radio button in a "
"cell. Useful methods:"
msgstr ""
"<code>Gtk.CellRendererToggle</code> - αποδίδει μια εναλλαγή ή ραδιοπλήκτρο "
"σε ένα κελί. Χρήσιμες μέθοδοι:"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:132
msgid ""
"<code>set_active(setting)</code> - activates or deactivates a cell renderer"
msgstr ""
"<code>set_active(setting)</code> - ενεργοποιεί ή απενεργοποιεί έναν "
"απεικονιστή κελιών"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:133
msgid "<code>get_active()</code> - returns whether the cell renderer is active"
msgstr ""
"<code>get_active()</code> - επιστρέφει εάν ο απεικονιστής κελιών είναι "
"ενεργός"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:134
msgid ""
"<code>set_radio(radio)</code> - if radio is <code>True</code>, the cell "
"renderer renders a radio toggle (i.e. a toggle in a group of mutually-"
"exclusive toggles); if <code>False</code>, it renders a check toggle (a "
"standalone boolean option)"
msgstr ""
"<code>set_radio(radio)</code> - εάν το ραδιοπλήκτρο είναι <code>True</code>, "
"ο απεικονιστής κελιών αποδίδει μια εναλλαγή του ραδιοπλήκτρου (δηλαδή μια "
"εναλλαγή σε μια ομάδα αμοιβαία αποκλειόμενων εναλλαγών)· εάν <code>False</"
"code>, αποδίδει μια εναλλαγή ελέγχου (μια αυτόνομη επιλογή τιμής Μπουλ)"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:135
msgid ""
"<code>get_radio()</code> - returns whether we are rendering radio toggles "
"rather than checkboxes."
msgstr ""
"<code>get_radio()</code> - επιστρέφει εάν αποδίδουμε ραδιοεναλλαγές αντί για "
"πλαίσια ελέγχου."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:138
msgid "<code>Gtk.CellRendererPixbuf</code> - renders an image in a cell"
msgstr "<code>Gtk.CellRendererPixbuf</code> - αποδίδει μια εικόνα σε ένα κελί"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:139
msgid ""
"<code>Gtk.CellRendererCombo</code> - renders text in a cell; but while "
"<code>Gtk.CellRendererText</code> offers a simple entry to edit the text, "
"<code>Gtk.CellRendererCombo</code> offers a <code>Gtk.ComboBox</code> widget "
"to edit the text. It can be used with and without an associated Gtk.Entry "
"widget, depending on the value of the “has-entry” property."
msgstr ""
"<code>Gtk.CellRendererCombo</code> - αποδίδει κείμενο σε ένα κελί· αλλά ενώ "
"το <code>Gtk.CellRendererText</code> προσφέρει μια απλή εγγραφή για "
"επεξεργασία του κειμένου, το <code>Gtk.CellRendererCombo</code> προσφέρει "
"ένα γραφικό στοιχείο <code>Gtk.ComboBox</code> για επεξεργασία του "
"κειμένου. Μπορεί να χρησιμοποιηθεί με και χωρίς ένα συσχετισμένο γραφικό "
"στοιχείο Gtk.Entry, ανάλογα με την τιμή της ιδιότητας “has-entry”."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:140
msgid ""
"<code>Gtk.CellRendererProgress</code> - renders a numeric value as a "
"progress bar in a cell; it can display a text on top of the progress bar"
msgstr ""
"<code>Gtk.CellRendererProgress</code> - αποδίδει μια αριθμητική τιμή ως μια "
"γραμμή προόδου σε ένα κελί· μπορεί να εμφανίσει ένα κείμενο στην κορυφή της "
"γραμμής προόδου"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:141
msgid ""
"<code>Gtk.CellRendererSpinner</code> - renders a spinning animation in a cell"
msgstr ""
"<code>Gtk.CellRendererSpinner</code> - αποδίδει μια κίνηση μέτρησης σε ένα "
"κελί"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:142
msgid "<code>Gtk.CellRendererSpin</code> - renders a spin button in a cell"
msgstr ""
"<code>Gtk.CellRendererSpin</code> - αποδίδει ένα κουμπί περιστροφής σε ένα "
"κελί"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:143
msgid ""
"<code>Gtk.CellRendererAccel</code> - renders a keyboard accelerator in a cell"
msgstr ""
"<code>Gtk.CellRendererAccel</code> - αποδίδει έναν επιταχυντή πληκτρολογίου "
"σε ένα κελί"

#. (itstool) path: section/title
#: C/model-view-controller.py.page:149
msgid "The Controller: the Selection"
msgstr "Ο ελεγκτής: η επιλογή"

#. (itstool) path: section/p
#: C/model-view-controller.py.page:151
msgid ""
"Most applications will need to not only deal with displaying data, but also "
"receiving input events from users. To do this, simply get a reference to a "
"selection object and connect to the <code>\"changed\"</code> signal."
msgstr ""
"Οι περισσότερες εφαρμογές θα χρειαστεί να αντιμετωπίσουν μόνο εμφανιζόμενα "
"δεδομένα, αλλά επίσης να δεχθούν συμβάντα εισαγωγής από τους χρήστες. Για να "
"γίνει αυτό, πάρτε απλά μια αναφορά σε ένα αντικείμενο επιλογής και "
"συνδεθείτε στο σήμα <code>\"changed\"</code>."

#. (itstool) path: section/code
#: C/model-view-controller.py.page:153
#, no-wrap
msgid ""
"\n"
"select = tree.get_selection()\n"
"select.connect(\"changed\", on_tree_selection_changed)\n"
msgstr ""
"\n"
"select = tree.get_selection()\n"
"select.connect(\"changed\", on_tree_selection_changed)\n"

#. (itstool) path: section/p
#: C/model-view-controller.py.page:158
msgid "Then to retrieve data for the row selected:"
msgstr "Έπειτα για να ανακτήσετε δεδομένα για την επιλεγμένη γραμμή:"

#. (itstool) path: section/code
#: C/model-view-controller.py.page:160
#, no-wrap
msgid ""
"\n"
"def on_tree_selection_changed(selection):\n"
"    model, treeiter = selection.get_selected()\n"
"    if treeiter != None:\n"
"        print \"You selected\", model[treeiter][0]\n"
msgstr ""
"\n"
"def on_tree_selection_changed(selection):\n"
"    model, treeiter = selection.get_selected()\n"
"    if treeiter != None:\n"
"        print \"You selected\", model[treeiter][0]\n"

#. (itstool) path: section/p
#: C/model-view-controller.py.page:167
msgid "Useful methods for a <code>Gtk.TreeSelection</code>:"
msgstr "Χρήσιμες μέθοδοι για <code>Gtk.TreeSelection</code>:"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:170
msgid ""
"<code>set_mode(type)</code> sets the type of selection, where type is one of"
msgstr ""
"<code>set_mode(type)</code> ορίζει τον τύπο της επιλογής, όπου τύπος είναι "
"ένας από"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:172
msgid "<code>Gtk.SelectionMode.NONE</code> - no selection is possible"
msgstr "<code>Gtk.SelectionMode.NONE</code> - καμιά επιλογή δεν είναι δυνατή"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:173
msgid ""
"<code>Gtk.SelectionMode.SINGLE</code> - zero or one element may be selected"
msgstr ""
"<code>Gtk.SelectionMode.SINGLE</code> - κανένα ή ένα στοιχείο μπορεί να "
"επιλεγεί"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:174
msgid ""
"<code>Gtk.SelectionMode.BROWSE</code> - exactly one element is selected. In "
"some circumstances, such as initially or during a search operation, it’s "
"possible for no element to be selected. What is really enforced is that the "
"user can’t deselect a currently selected element except by selecting another "
"element."
msgstr ""
"<code>Gtk.SelectionMode.BROWSE</code> - ακριβώς ένα στοιχείο επιλέγεται. Σε "
"μερικές περιπτώσεις, όπως αρχικά ή κατά τη διάρκεια μιας λειτουργίας "
"αναζήτησης, είναι δυνατό να μην επιλεγεί κανένα στοιχείο. Αυτό που είναι "
"πραγματικά υποχρεωτικό είναι να μην μπορεί να αποεπιλέξει ο χρήστης ένα "
"τρέχον επιλεγμένο στοιχείο εκτός από την επιλογή ενός άλλου στοιχείου."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:175
msgid ""
"<code>Gtk.SelectionMode.MULTIPLE</code> -any number of elements may be "
"selected. Clicks toggle the state of an item. The Ctrl key may be used to "
"enlarge the selection, and Shift key to select between the focus and the "
"child pointed to. Some widgets may also allow Click-drag to select a range "
"of elements."
msgstr ""
"<code>Gtk.SelectionMode.MULTIPLE</code> - οποιοσδήποτε αριθμός στοιχείων "
"μπορεί να επιλεγεί. Το πάτημα εναλλάσσει την κατάσταση ενός στοιχείου. Το "
"πλήκτρο Ctrl μπορεί να χρησιμοποιηθεί για μεγέθυνση της επιλογής και το "
"πλήκτρο Shift για επιλογή μεταξύ εστίασης και του θυγατρικού στο οποίο "
"δείχνει. Μερικά γραφικά στοιχεία μπορούν επίσης να επιτρέψουν πάτημα-"
"μεταφορά για επιλογή μιας περιοχής στοιχείων."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:178
msgid ""
"<code>get_selected()</code> returns a tuple <code>(model, treeiter)</code>, "
"where <code>model</code> is the current model and <code>treeiter</code> a "
"<code>Gtk.TreeIter</code> pointing to the currently selected row, or None if "
"no rows are selected. The method does not work if the selection mode is set "
"to <code>Gtk.SelectionMode.MULTIPLE</code>; in that case, use "
"<code>get_selected_rows()</code> instead, which Returns a list of <code>Gtk."
"TreePath</code> instances of all selected rows."
msgstr ""
"<code>get_selected()</code> επιστρέφει μια πλειάδα <code>(model, treeiter)</"
"code>, όπου <code>model</code> είναι το τρέχον πρότυπο και <code>treeiter</"
"code> ένα <code>Gtk.TreeIter</code> που δείχνει στην τρέχουσα επιλεγμένη "
"γραμμή, ή τίποτα εάν δεν επιλεγούν γραμμές. Η μέθοδος δεν δουλεύει εάν η "
"κατάσταση επιλογής οριστεί σε <code>Gtk.SelectionMode.MULTIPLE</code>· σε "
"αυτήν την περίπτωση, χρησιμοποιήστε <code>get_selected_rows()</code>, που "
"επιστρέφει μια λίστα στιγμιοτύπων <code>Gtk.TreePath</code> όλων των "
"επιλεγμένων γραμμών."

#. (itstool) path: section/title
#: C/model-view-controller.py.page:184 C/properties.py.page:57
#: C/signals-callbacks.py.page:46 C/strings.py.page:112
msgid "References"
msgstr "Αναφορές"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:187
#: C/treeview_advanced_liststore.py.page:45
#: C/treeview_cellrenderertoggle.py.page:45
#: C/treeview_simple_liststore.py.page:46 C/treeview_treestore.py.page:45
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeModel.html"
"\">GtkTreeModel</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeModel.html"
"\">GtkTreeModel</link>"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:188
#: C/treeview_advanced_liststore.py.page:44
#: C/treeview_cellrenderertoggle.py.page:44
#: C/treeview_simple_liststore.py.page:45 C/treeview_treestore.py.page:44
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeView.html"
"\">GtkTreeView</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeView.html"
"\">GtkTreeView</link>"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:189
#: C/treeview_advanced_liststore.py.page:48
#: C/treeview_cellrenderertoggle.py.page:49
#: C/treeview_simple_liststore.py.page:49 C/treeview_treestore.py.page:48
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeViewColumn.html"
"\">GtkTreeViewColumn</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeViewColumn.html"
"\">GtkTreeViewColumn</link>"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:191
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRenderer.html"
"\">GtkCellRenderer</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRenderer.html"
"\">GtkCellRenderer</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/paned.c.page:22 C/paned.js.page:22 C/paned.py.page:23
#: C/paned.vala.page:22
msgctxt "_"
msgid "external ref='media/paned.png' md5='8c7e1df065395c9aafcd65036a293d8a'"
msgstr "external ref='media/paned.png' md5='8c7e1df065395c9aafcd65036a293d8a'"

#. (itstool) path: info/title
#: C/paned.c.page:8
msgctxt "text"
msgid "Paned (C)"
msgstr "Σε φατνώματα (C)"

#. (itstool) path: info/desc
#: C/paned.c.page:18 C/paned.js.page:18 C/paned.py.page:19
#: C/paned.vala.page:18
msgid "A widget with two adjustable panes"
msgstr "Ένα γραφικό στοιχείο με δύο ρυθμίσιμα φατνώματα"

#. (itstool) path: page/title
#: C/paned.c.page:21 C/paned.js.page:21 C/paned.py.page:22
#: C/paned.vala.page:21
msgid "Paned"
msgstr "Σε φάτνωμα"

#. (itstool) path: page/p
#: C/paned.c.page:23 C/paned.js.page:23 C/paned.py.page:24
#: C/paned.vala.page:23
msgid "Two images in two adjustable panes, horizontally aligned."
msgstr "Δύο εικόνες σε δύο ρυθμίσιμα φατνώματα οριζόντια στοιχισμένες."

#. (itstool) path: section/code
#: C/paned.c.page:29
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *paned;\n"
"  GtkWidget *window;\n"
"  GtkWidget *image1;\n"
"  GtkWidget *image2;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Paned Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 450, 350);\n"
"\n"
"  paned = gtk_paned_new (GTK_ORIENTATION_HORIZONTAL);\n"
"  image1 = gtk_image_new_from_file (\"gnome-image.png\");\n"
"  image2 = gtk_image_new_from_file (\"tux.png\");\n"
"\n"
"  gtk_paned_add1 (GTK_PANED (paned), image1);\n"
"  gtk_paned_add2 (GTK_PANED (paned), image2);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), paned);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""
"#περιλαμβάνει &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *paned;\n"
"  GtkWidget *window;\n"
"  GtkWidget *image1;\n"
"  GtkWidget *image2;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Paned Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 450, 350);\n"
"\n"
"  paned = gtk_paned_new (GTK_ORIENTATION_HORIZONTAL);\n"
"  image1 = gtk_image_new_from_file (\"gnome-image.png\");\n"
"  image2 = gtk_image_new_from_file (\"tux.png\");\n"
"\n"
"  gtk_paned_add1 (GTK_PANED (paned), image1);\n"
"  gtk_paned_add2 (GTK_PANED (paned), image2);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), paned);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/paned.c.page:36 C/paned.py.page:42
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkPaned.html"
"\">GtkPaned</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkPaned.html"
"\">GtkPaned</link>"

#. (itstool) path: item/p
#: C/paned.c.page:37 C/paned.js.page:37 C/paned.py.page:43
#: C/paned.vala.page:37
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/gtk3-Standard-"
"Enumerations.html#GtkOrientation\">Standard Enumerations</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/gtk3-Standard-"
"Enumerations.html#GtkOrientation\">Standard Enumerations</link>"

#. (itstool) path: info/title
#: C/paned.js.page:8
msgctxt "text"
msgid "Paned (JavaScript)"
msgstr "Με φάτνωμα (JavaScript)"

#. (itstool) path: section/code
#: C/paned.js.page:29
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const PanedExample = new Lang.Class ({\n"
"    Name: 'Paned Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application({ application_id: 'org.example.panedexample' });\n"
"\n"
"       // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"        // Create the application window\n"
"        this.window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                    window_position: Gtk.WindowPosition.CENTER,\n"
"                                                    title: \"Paned Window Example\",\n"
"                                                    default_width: 450,\n"
"                                                    default_height: 350,\n"
"                                                    border_width: 10 });\n"
"\n"
"        // a new widget with two adjustable panes,\n"
"        // one on the left and one on the right\n"
"        this.paned = Gtk.Paned.new(Gtk.Orientation.HORIZONTAL);\n"
"\n"
"        // two images\n"
"        this.image1 = new Gtk.Image();\n"
"        this.image1.set_from_file(\"gnome-image.png\");\n"
"        this.image2 = new Gtk.Image();\n"
"        this.image2.set_from_file(\"tux.png\");\n"
"\n"
"        // add the first image to the left pane\n"
"        this.paned.add1(this.image1);\n"
"        // add the second image to the right pane\n"
"        this.paned.add2(this.image2)\n"
"\n"
"        // add the panes to the window\n"
"        this.window.add(this.paned)\n"
"        this.window.show_all();\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new PanedExample();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const PanedExample = new Lang.Class ({\n"
"    Name: 'Paned Example',\n"
"\n"
"    // Δημιουργία της ίδιας της εφαρμογής\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application({ application_id: 'org.example.panedexample' });\n"
"\n"
"       // Σύνδεση σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Συνάρτηση επανάκλησης για το σήμα 'activate' παριστάνει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' κατασκευάζει τη γραφική διεπαφή\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Κατασκευή της γραφικής διεπαφής της εφαρμογής\n"
"    _buildUI: function() {\n"
"        // Create the application window\n"
"        this.window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                    window_position: Gtk.WindowPosition.CENTER,\n"
"                                                    title: \"Paned Window Example\",\n"
"                                                    default_width: 450,\n"
"                                                    default_height: 350,\n"
"                                                    border_width: 10 });\n"
"\n"
"        // ένα νέο γραφικό στοιχείο με δύο ρυθμίσιμα παράθυρα,\n"
"        // ένα στα αριστερά και ένα στα δεξιά\n"
"        this.paned = Gtk.Paned.new(Gtk.Orientation.HORIZONTAL);\n"
"\n"
"        // δύο εικόνες\n"
"        this.image1 = new Gtk.Image();\n"
"        this.image1.set_from_file(\"gnome-image.png\");\n"
"        this.image2 = new Gtk.Image();\n"
"        this.image2.set_from_file(\"tux.png\");\n"
"\n"
"        // προσθήκη της πρώτης εικόνας στο αριστερό παράθυρο\n"
"        this.paned.add1(this.image1);\n"
"        // add the second image to the right pane\n"
"        this.paned.add2(this.image2)\n"
"\n"
"        // προσθήκη των φατνωμάτων στο παράθυρο\n"
"        this.window.add(this.paned)\n"
"        this.window.show_all();\n"
"    }\n"
"});\n"
"\n"
"// εκτέλεση της εφαρμογής\n"
"let app = new PanedExample();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/paned.js.page:36
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Paned.html"
"\">GtkPaned</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Paned.html"
"\">GtkPaned</link>"

#. (itstool) path: item/p
#: C/paned.js.page:38 C/scrolledwindow.js.page:38
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Image.html"
"\">GtkImage</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Image.html"
"\">GtkImage</link>"

#. (itstool) path: info/title
#: C/paned.py.page:8
msgctxt "text"
msgid "Paned (Python)"
msgstr "Με φάτνωμα (Python)"

#. (itstool) path: section/code
#: C/paned.py.page:30
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Paned Example\", application=app)\n"
"        self.set_default_size(450, 350)\n"
"\n"
"        # a new widget with two adjustable panes,\n"
"        # one on the left and one on the right\n"
"        paned = Gtk.Paned.new(Gtk.Orientation.HORIZONTAL)\n"
"\n"
"        # two images\n"
"        image1 = Gtk.Image()\n"
"        image1.set_from_file(\"gnome-image.png\")\n"
"        image2 = Gtk.Image()\n"
"        image2.set_from_file(\"tux.png\")\n"
"\n"
"        # add the first image to the left pane\n"
"        paned.add1(image1)\n"
"        # add the second image to the right pane\n"
"        paned.add2(image2)\n"
"\n"
"        # add the panes to the window\n"
"        self.add(paned)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Paned Example\", application=app)\n"
"        self.set_default_size(450, 350)\n"
"\n"
"        # a new widget with two adjustable panes,\n"
"        # one on the left and one on the right\n"
"        paned = Gtk.Paned.new(Gtk.Orientation.HORIZONTAL)\n"
"\n"
"        # two images\n"
"        image1 = Gtk.Image()\n"
"        image1.set_from_file(\"gnome-image.png\")\n"
"        image2 = Gtk.Image()\n"
"        image2.set_from_file(\"tux.png\")\n"
"\n"
"        # add the first image to the left pane\n"
"        paned.add1(image1)\n"
"        # add the second image to the right pane\n"
"        paned.add2(image2)\n"
"\n"
"        # add the panes to the window\n"
"        self.add(paned)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/paned.py.page:34
msgid "Useful methods for a Paned widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο σε φάτνωμα"

#. (itstool) path: section/p
#: C/paned.py.page:35
msgid ""
"To have two vertically aligned panes, use <code>Gtk.Orientation.VERTICAL</"
"code> instead of <code>Gtk.Orientation.HORIZONTAL</code>. The method "
"<code>add1(widget1)</code> will add the <code>widget1</code> to the top "
"pane, and <code>add2(widget2)</code> will add the <code>widget2</code> to "
"the bottom pane."
msgstr ""
"Για να έχετε δύο κάθετα στοιχισμένα φατνώματα, χρησιμοποιήστε <code>Gtk."
"Orientation.VERTICAL</code> αντί για <code>Gtk.Orientation.HORIZONTAL</"
"code>. Η μέθοδος <code>add1(widget1)</code> θα προσθέσει το <code>widget1</"
"code> στο κορυφαίο φάτνωμα και <code>add2(widget2)</code> θα προσθέσει το "
"<code>widget2</code> στο κάτω φάτνωμα."

#. (itstool) path: info/title
#: C/paned.vala.page:8
msgctxt "text"
msgid "Paned (Vala)"
msgstr "Με φάτνωμα (Vala)"

#. (itstool) path: section/code
#: C/paned.vala.page:29
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"Paned Example\";\n"
"\t\twindow.set_default_size (450,350);\n"
"\n"
"\t\t// a new widget with two adjustable panes,\n"
"\t\t// one on the left and one on the right\n"
"\t\tvar paned = new Gtk.Paned (Gtk.Orientation.HORIZONTAL);\n"
"\n"
"\t\t/* two images */\n"
"\t\tvar image1 = new Gtk.Image ();\n"
"\t\timage1.set_from_file (\"gnome-image.png\");\n"
"\t\tvar image2 = new Gtk.Image ();\n"
"\t\timage2.set_from_file (\"tux.png\");\n"
"\n"
"\t\t/* add the first image to the left pane */\n"
"\t\tpaned.add1 (image1);\n"
"\n"
"\t\t/* add the second image to the right pane */\n"
"\t\tpaned.add2 (image2);\n"
"\n"
"\t\t/* add the panes to the window */\n"
"\t\twindow.add (paned);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* Αυτή είναι μια εφαρμογή. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Αντικατάσταση του σήματος 'activate' του GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"Paned Example\";\n"
"\t\twindow.set_default_size (450,350);\n"
"\n"
"\t\t// ένα νέο γραφικό στοιχείο με δύο ρυθμίσιμα φατνώματα,\n"
"\t\t// ένα στα αριστερά κι ένα στα δεξιά\n"
"\t\tvar paned = new Gtk.Paned (Gtk.Orientation.HORIZONTAL);\n"
"\n"
"\t\t/* δύο εικόνες */\n"
"\t\tvar image1 = new Gtk.Image ();\n"
"\t\timage1.set_from_file (\"gnome-image.png\");\n"
"\t\tvar image2 = new Gtk.Image ();\n"
"\t\timage2.set_from_file (\"tux.png\");\n"
"\n"
"\t\t/* προσθήκη της πρώτης εικόνας στο αριστερό φάτνωμα */\n"
"\t\tpaned.add1 (image1);\n"
"\n"
"\t\t/* προσθήκη της δεύτερης εικόνας στο δεξιό φάτνωμα */\n"
"\t\tpaned.add2 (image2);\n"
"\n"
"\t\t/* προσθήκη των φατνωμάτων στο παράθυρο */\n"
"\t\twindow.add (paned);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* το κύριο δημιουργεί και εκτελεί την εφαρμογή. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/paned.vala.page:36
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Paned.html\">GtkPaned</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Paned.html\">GtkPaned</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/photo-wall.c.page:84
msgctxt "_"
msgid ""
"external ref='media/photo-wall.png' md5='f19590d97e8ec029cda3c44b769c11cd'"
msgstr ""
"external ref='media/photo-wall.png' md5='f19590d97e8ec029cda3c44b769c11cd'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/photo-wall.c.page:87
msgctxt "_"
msgid ""
"external ref='media/photo-wall-focused.png' "
"md5='9f1ceecf3a28c1e468597b093a10cbae'"
msgstr ""
"external ref='media/photo-wall-focused.png' "
"md5='9f1ceecf3a28c1e468597b093a10cbae'"

#. (itstool) path: info/title
#: C/photo-wall.c.page:7
msgctxt "text"
msgid "Photo wall (C)"
msgstr "Φωτογραφικός τοίχος (C)"

#. (itstool) path: info/desc
#: C/photo-wall.c.page:10
msgid "A Clutter image viewer"
msgstr "Ένας προβολέας εικόνων σε Clutter"

#. (itstool) path: credit/name
#: C/photo-wall.c.page:14
msgid "Chris Kühl"
msgstr "Chris Kühl"

#. (itstool) path: page/title
#: C/photo-wall.c.page:28
msgid "Photo wall"
msgstr "Φωτογραφικός τοίχος"

#. (itstool) path: synopsis/p
#: C/photo-wall.c.page:31
msgid ""
"For this example we will build a simple image viewer using Clutter. You will "
"learn:"
msgstr ""
"Για αυτό το παράδειγμα θα κατασκευάσουμε έναν απλό προβολέα εικόνων "
"χρησιμοποιώντας το Clutter. Θα μάθετε:"

#. (itstool) path: item/p
#: C/photo-wall.c.page:33
msgid "How to size and position <code>ClutterActor</code>s"
msgstr "Αυξομείωση και τοποθέτηση του <code>ClutterActor</code>s"

#. (itstool) path: item/p
#: C/photo-wall.c.page:34
msgid "How to place an image in a <code>ClutterActor</code>"
msgstr "Πώς να τοποθετήσετε μια εικόνα σε ένα <code>ClutterActor</code>"

#. (itstool) path: item/p
#: C/photo-wall.c.page:35
msgid "How to do simple transitions using Clutter's animation framework"
msgstr ""
"Πώς να κάνετε απλές μεταβάσεις χρησιμοποιώντας το σκελετό κίνησης του Clutter"

#. (itstool) path: item/p
#: C/photo-wall.c.page:36
msgid "How to make <code>ClutterActor</code>s respond to mouse events"
msgstr ""
"Πώς να κάνετε το <code>ClutterActor</code>s να απαντήσει στα συμβάντα του "
"ποντικιού"

#. (itstool) path: item/p
#: C/photo-wall.c.page:37
msgid "How to get file names from a directory"
msgstr "Πώς να πάρετε ονόματα αρχείου από έναν κατάλογο"

#. (itstool) path: section/title
#: C/photo-wall.c.page:42 C/record-collection.js.page:40
msgid "Introduction"
msgstr "Εισαγωγή"

#. (itstool) path: section/p
#: C/photo-wall.c.page:43
msgid ""
"Clutter is a library for creating dynamic user interfaces using OpenGL for "
"hardware acceleration. This example demonstates a small, but central, part "
"of the Clutter library to create a simple but attractive image viewing "
"program."
msgstr ""
"Clutter είναι μια βιβλιοθήκη για δημιουργία δυναμικών διεπαφών χρήστη "
"χρησιμοποιώντας το OpenGL για επιτάχυνση υλικού. Αυτό το παράδειγμα δείχνει "
"ένα μικρό, αλλά κεντρικό, τμήμα της Clutter για δημιουργία ενός απλού αλλά "
"ελκυστικού προγράμματος προβολής εικόνας."

#. (itstool) path: section/p
#: C/photo-wall.c.page:46
msgid ""
"To help us reach our goal we will be utilising a few other common pieces of "
"GLib as well. Most importantly, we'll use one <code>GPtrArray</code>, a "
"dynamic array of pointers, to hold the file path names. We will also use "
"<code>GDir</code>, a utility for working with directories, to access our "
"image directory and gather file paths."
msgstr ""
"Για να μας βοηθήσετε να φτάσουμε τον στόχο μας θα χρησιμοποιήσουμε λίγα άλλα "
"κοινά κομμάτια του GLib επίσης. Το πιο σημαντικό, θα χρησιμοποιήσουμε ένα "
"<code>GPtrArray</code>, έναν δυναμικό πίνακα δεικτών, για να κρατήσουμε τα "
"ονόματα διαδρομής αρχείου. Θα χρησιμοποιήσουμε επίσης <code>GDir</code>, ένα "
"βοήθημα για εργασία με καταλόγους, για προσπέλαση του καταλόγου της εικόνας "
"μας και να συγκεντρώσουμε τις διαδρομές του αρχείου."

#. (itstool) path: item/p
#: C/photo-wall.c.page:59
msgid ""
"Choose <gui>GTK+ (simple)</gui> from the <gui>C</gui> tab, click "
"<gui>Continue</gui>, and fill out your details on the next few pages. Use "
"<file>photo-wall</file> as project name and directory."
msgstr ""
"Επιλέξτε <gui>GTK+ (απλό)</gui> από την καρτέλα <gui>C</gui>, πατήστε "
"<gui>συνέχεια</gui> και συμπληρώστε τις λεπτομέρειές σας στις επόμενες λίγες "
"σελίδες. Χρησιμοποιήστε το <file>photo-wall</file> ως όνομα του έργου και "
"του καταλόγου."

#. (itstool) path: item/p
#: C/photo-wall.c.page:62
msgid ""
"Make sure that <gui>Use GtkBuilder for user interface</gui> is disabled as "
"we will create the UI manually in this tutorial. Check the <link xref="
"\"guitar-tuner.c\">Guitar-Tuner</link> tutorial using the interface builder."
msgstr ""
"Σιγουρευτείτε ότι η <gui>χρήση του GtkBuilder για διεπαφή χρήστη</gui> είναι "
"ανενεργή επειδή θα φτιάξουμε το UI χειροκίνητα σε αυτό το μάθημα. Σημειώστε "
"το μάθημα <link xref=\"guitar-tuner.c\">ρυθμιστής κιθάρας</link> "
"χρησιμοποιώντας τον κατασκευαστή διεπαφής."

#. (itstool) path: item/p
#: C/photo-wall.c.page:67
msgid ""
"Enable <gui>Configure external packages</gui>. On the next page, select "
"<em>clutter-1.0</em> from the list to include the Clutter library in your "
"project."
msgstr ""
"Ενεργοποιήστε <gui>ρύθμιση εξωτερικών πακέτων</gui>. Στην επόμενη σελίδα, "
"επιλέξτε <em>clutter-1.0</em> από τη λίστα για να συμπεριλάβετε τη "
"βιβλιοθήκη Clutter στο έργο σας."

#. (itstool) path: section/title
#: C/photo-wall.c.page:80
msgid "A look at Photo Wall"
msgstr "Μια ματιά στο φωτογραφικό πίνακα"

#. (itstool) path: section/p
#: C/photo-wall.c.page:81
msgid "Our image viewer presents the user with a wall of images."
msgstr "Ο προβολέας εικόνας μας παρουσιάζει τον χρήστη με έναν τοίχο εικόνων."

#. (itstool) path: section/p
#: C/photo-wall.c.page:85
msgid ""
"When an image is clicked, it is animated to fill the viewing area. When the "
"image having focus is clicked it is returned to its original position using "
"an animation with the same duration of 500 milliseconds."
msgstr ""
"Όταν κάνουμε κλικ σε μια εικόνα, κινείται για να γεμίσει την περιοχή "
"προβολής. Όταν κάνουμε κλικ σε μια εστιασμένη εικόνα επιστρέφεται στην "
"αρχική της θέση χρησιμοποιώντας μια κίνηση με την ίδια διάρκεια των 500 ms."

#. (itstool) path: section/title
#: C/photo-wall.c.page:91
msgid "Initial setup"
msgstr "Αρχική ρύθμιση"

#. (itstool) path: section/p
#: C/photo-wall.c.page:92
msgid ""
"The following code segment contains many of the defines and variables we "
"will be using in the following sections. Use this as a reference for later "
"sections. Copy this code to the beginning of <file>src/main.c</file>:"
msgstr ""
"Το παρακάτω τμήμα κώδικα περιέχει πολλούς ορισμούς και μεταβλητές που θα "
"χρησιμοποιήσουμε στις παρακάτω ενότητες. Χρησιμοποιήστε αυτό ως αναφορά για "
"άλλες ενότητες. Αντιγράψτε αυτόν τον κώδικα στην αρχή του <file>src/main.c</"
"file>:"

#. (itstool) path: section/code
#: C/photo-wall.c.page:95
#, no-wrap
msgid ""
"\n"
"#include &lt;gdk-pixbuf/gdk-pixbuf.h&gt;\n"
"#include &lt;clutter/clutter.h&gt;\n"
"\n"
"#define STAGE_WIDTH  800\n"
"#define STAGE_HEIGHT 600\n"
"\n"
"#define THUMBNAIL_SIZE 200\n"
"#define ROW_COUNT (STAGE_HEIGHT / THUMBNAIL_SIZE)\n"
"#define COL_COUNT (STAGE_WIDTH  / THUMBNAIL_SIZE)\n"
"#define THUMBNAIL_COUNT (ROW_COUNT * COL_COUNT)\n"
"\n"
"#define ANIMATION_DURATION_MS 500\n"
"\n"
"#define IMAGE_DIR_PATH \"./berlin_images/\"\n"
"\n"
"static GPtrArray *img_paths;\n"
"\n"
"static ClutterPoint unfocused_pos;\n"
"\n"
msgstr ""
"\n"
"#include &lt;gdk-pixbuf/gdk-pixbuf.h&gt;\n"
"#include &lt;clutter/clutter.h&gt;\n"
"\n"
"#define STAGE_WIDTH  800\n"
"#define STAGE_HEIGHT 600\n"
"\n"
"#define THUMBNAIL_SIZE 200\n"
"#define ROW_COUNT (STAGE_HEIGHT / THUMBNAIL_SIZE)\n"
"#define COL_COUNT (STAGE_WIDTH  / THUMBNAIL_SIZE)\n"
"#define THUMBNAIL_COUNT (ROW_COUNT * COL_COUNT)\n"
"\n"
"#define ANIMATION_DURATION_MS 500\n"
"\n"
"#define IMAGE_DIR_PATH \"./berlin_images/\"\n"
"\n"
"static GPtrArray *img_paths·\n"
"\n"
"static ClutterPoint unfocused_pos·\n"
"\n"

#. (itstool) path: section/title
#: C/photo-wall.c.page:119
msgid "Jumping into the code"
msgstr "Μετάβαση στον κώδικα"

#. (itstool) path: section/p
#: C/photo-wall.c.page:120
msgid ""
"We will start by taking a look at the <code>main()</code> function as a "
"whole. Then we'll discuss the other code sections in detail. Change the "
"<file>src/main.c</file> to contain this <code>main()</code> function. You "
"can delete the <code>create_window()</code> function as we don't need it in "
"this example."
msgstr ""
"Θα ξεκινήσουμε ρίχνοντας μια ματιά στη συνάρτηση <code>main()</code> ως "
"σύνολο. Έπειτα θα συζητήσουμε τις άλλες ενότητες κώδικα λεπτομερώς. Αλλάξτε "
"το <file>src/main.c</file> για να περιέχει αυτήν την συνάρτηση <code>main()</"
"code>. Μπορείτε να διαγράψετε τη συνάρτηση <code>create_window()</code> "
"καθώς δεν τη χρειαζόμαστε σε αυτό το παράδειγμα."

#. (itstool) path: section/code
#: C/photo-wall.c.page:123
#, no-wrap
msgid ""
"\n"
"int\n"
"main(int argc, char *argv[])\n"
"{\n"
"    ClutterColor stage_color = { 16, 16, 16, 255 };\n"
"    ClutterActor *stage = NULL;\n"
"\n"
"    if (clutter_init (&amp;argc, &amp;argv) != CLUTTER_INIT_SUCCESS)\n"
"        return 1;\n"
"\n"
"    stage = clutter_stage_new();\n"
"    clutter_actor_set_size(stage, STAGE_WIDTH, STAGE_HEIGHT);\n"
"    clutter_actor_set_background_color(stage, &amp;stage_color);\n"
"    clutter_stage_set_title(CLUTTER_STAGE (stage), \"Photo Wall\");\n"
"    g_signal_connect(stage, \"destroy\", G_CALLBACK(clutter_main_quit), NULL);\n"
"\n"
"    load_image_path_names();\n"
"\n"
"    guint row = 0;\n"
"    guint col = 0;\n"
"    for(row=0; row &lt; ROW_COUNT; ++row)\n"
"    {\n"
"        for(col=0; col &lt; COL_COUNT; ++col)\n"
"        {\n"
"            const char *img_path = g_ptr_array_index(img_paths, (row * COL_COUNT) + col);\n"
"            GdkPixbuf *pixbuf = gdk_pixbuf_new_from_file_at_size(img_path, STAGE_HEIGHT, STAGE_HEIGHT, NULL);\n"
"            ClutterContent *image = clutter_image_new ();\n"
"            ClutterActor *actor = clutter_actor_new ();\n"
"\n"
"            if (pixbuf != NULL)\n"
"            {\n"
"                clutter_image_set_data(CLUTTER_IMAGE(image),\n"
"                                       gdk_pixbuf_get_pixels(pixbuf),\n"
"                                       gdk_pixbuf_get_has_alpha(pixbuf)\n"
"                                           ? COGL_PIXEL_FORMAT_RGBA_8888\n"
"                                           : COGL_PIXEL_FORMAT_RGB_888,\n"
"                                       gdk_pixbuf_get_width(pixbuf),\n"
"                                       gdk_pixbuf_get_height(pixbuf),\n"
"                                       gdk_pixbuf_get_rowstride(pixbuf),\n"
"                                       NULL);\n"
"            }\n"
"\n"
"            clutter_actor_set_content(actor, image);\n"
"            g_object_unref(image);\n"
"            g_object_unref(pixbuf);\n"
"\n"
"            initialize_actor(actor, row, col);\n"
"            clutter_actor_add_child(stage, actor);\n"
"        }\n"
"    }\n"
"\n"
"    /* Show the stage. */\n"
"    clutter_actor_show(stage);\n"
"\n"
"    /* Start the clutter main loop. */\n"
"    clutter_main();\n"
"\n"
"    g_ptr_array_unref(img_paths);\n"
"\n"
"    return 0;\n"
"}"
msgstr ""
"\n"
"int\n"
"main(int argc, char *argv[])\n"
"{\n"
"    ClutterColor stage_color = { 16, 16, 16, 255 }·\n"
"    ClutterActor *stage = NULL·\n"
"\n"
"    if (clutter_init (&amp;argc, &amp;argv) != CLUTTER_INIT_SUCCESS)\n"
"        return 1·\n"
"\n"
"    stage = clutter_stage_new()·\n"
"    clutter_actor_set_size(stage, STAGE_WIDTH, STAGE_HEIGHT)·\n"
"    clutter_actor_set_background_color(stage, &amp;stage_color)·\n"
"    clutter_stage_set_title(CLUTTER_STAGE (stage), \"Photo Wall\")·\n"
"    g_signal_connect(stage, \"destroy\", G_CALLBACK(clutter_main_quit), NULL)·\n"
"\n"
"    load_image_path_names()·\n"
"\n"
"    guint row = 0·\n"
"    guint col = 0·\n"
"    for(row=0· row &lt; ROW_COUNT· ++row)\n"
"    {\n"
"        for(col=0· col &lt; COL_COUNT· ++col)\n"
"        {\n"
"            const char *img_path = g_ptr_array_index(img_paths, (row * COL_COUNT) + col)·\n"
"            GdkPixbuf *pixbuf = gdk_pixbuf_new_from_file_at_size(img_path, STAGE_HEIGHT, STAGE_HEIGHT, NULL)·\n"
"            ClutterContent *image = clutter_image_new ()·\n"
"            ClutterActor *actor = clutter_actor_new ()·\n"
"\n"
"            if (pixbuf != NULL)\n"
"            {\n"
"                clutter_image_set_data(CLUTTER_IMAGE(image),\n"
"                                       gdk_pixbuf_get_pixels(pixbuf),\n"
"                                       gdk_pixbuf_get_has_alpha(pixbuf)\n"
"                                           ; COGL_PIXEL_FORMAT_RGBA_8888\n"
"                                           : COGL_PIXEL_FORMAT_RGB_888,\n"
"                                       gdk_pixbuf_get_width(pixbuf),\n"
"                                       gdk_pixbuf_get_height(pixbuf),\n"
"                                       gdk_pixbuf_get_rowstride(pixbuf),\n"
"                                       NULL)·\n"
"            }\n"
"\n"
"            clutter_actor_set_content(actor, image)·\n"
"            g_object_unref(image)·\n"
"            g_object_unref(pixbuf)·\n"
"\n"
"            initialize_actor(actor, row, col)·\n"
"            clutter_actor_add_child(stage, actor)·\n"
"        }\n"
"    }\n"
"\n"
"    /* Show the stage. */\n"
"    clutter_actor_show(stage)·\n"
"\n"
"    /* Start the clutter main loop. */\n"
"    clutter_main()·\n"
"\n"
"    g_ptr_array_unref(img_paths)·\n"
"\n"
"    return 0·\n"
"}"

#. (itstool) path: item/p
#: C/photo-wall.c.page:185
msgid ""
"Line 4: <code>ClutterColor</code> is defined by setting the red, green, blue "
"and transparency (alpha) values. The values range from 0-255. For "
"transparency a value of 255 is opaque."
msgstr ""
"Γραμμή 4: <code>ClutterColor</code> ορίστηκε ορίζοντας τις τιμές κόκκινου, "
"πράσινου, γαλάζιου και διαφάνειας (άλφα). Το εύρος τιμών από 0-255. Για "
"διαφάνεια τιμή 255 είναι αδιαφανής."

#. (itstool) path: item/p
#: C/photo-wall.c.page:186
msgid ""
"Line 7: You must initialize Clutter. If you forget to do this, you will get "
"very strange errors. Be warned."
msgstr ""
"Γραμμή 7: Πρέπει να αρχικοποιήσετε το Clutter. Εάν το ξεχάσετε, θα πάρετε "
"πολύ περίεργα σφάλματα. Προειδοποιηθήκατε."

#. (itstool) path: item/p
#: C/photo-wall.c.page:187
msgid ""
"Lines 10‒14: Here we create a new <code>ClutterStage</code> . We then set "
"the size using the defines from the previous section and the address of the "
"<code>ClutterColor</code> we just defined."
msgstr ""
"Γραμμές 10-14: Εδώ δημιουργούμε ένα νέο <code>ClutterStage</code>. Έπειτα "
"ορίζουμε το μέγεθος χρησιμοποιώντας τους ορισμούς από την προηγούμενη "
"ενότητα και τη διεύθυνση του <code>ClutterColor</code> που μόλις ορίσαμε."

#. (itstool) path: note/p
#: C/photo-wall.c.page:188
msgid ""
"A <code>ClutterStage</code> is the top-level <code>ClutterActor</code> onto "
"which other <code>ClutterActor</code>s are placed."
msgstr ""
"Ένα <code>ClutterStage</code> είναι ανώτατου επιπέδου <code>ClutterActor</"
"code> στο οποίο τοποθετούνται άλλοι <code>ClutterActor</code>."

#. (itstool) path: item/p
#: C/photo-wall.c.page:190
msgid ""
"Line 16: Here we call our function for getting the image file paths. We'll "
"look at this in a bit."
msgstr ""
"Γραμμή 16: Εδώ καλούμε τη συνάρτηση μας για λήψη των διαδρομών αρχείου "
"εικόνας. Θα το δούμε σε λίγο."

#. (itstool) path: item/p
#: C/photo-wall.c.page:191
msgid ""
"Lines 18‒49: This is where we set up the <code>ClutterActor</code>s, load "
"the images and place them into their spot in the image wall. We will look at "
"this in detail in the next section."
msgstr ""
"Γραμμές 18-49: Εδώ ρυθμίζουμε το <code>ClutterActor</code>s, φόρτωση των "
"εικόνων και τοποθέτησή τους στο σημείο τους στον τοίχο εικόνας. Θα το δούμε "
"λεπτομερώς στην επόμενη ενότητα."

#. (itstool) path: item/p
#: C/photo-wall.c.page:192
msgid ""
"Line 52: Show the stage and <em>all its children</em>, meaning our images."
msgstr ""
"Γραμμή 52: εμφάνιση του σταδίου και <em>όλων των θυγατρικών του</em>, που "
"σημαίνει των εικόνων μας."

#. (itstool) path: item/p
#: C/photo-wall.c.page:193
msgid "Line 55: Start the Clutter main loop."
msgstr "Γραμμή 55: Έναρξη του κύριου βρόχου του Clutter."

#. (itstool) path: section/title
#: C/photo-wall.c.page:198
msgid "Setting up our image actors"
msgstr "Εγκατάσταση των δραστών εικόνας"

#. (itstool) path: note/p
#: C/photo-wall.c.page:199
msgid ""
"In Clutter, an actor is the most basic visual element. Basically, everything "
"you see is an actor."
msgstr ""
"Στο Clutter, ένας δράστης είναι το πιο βασικό οπτικό στοιχείο. Βασικά, "
"οτιδήποτε βλέπετε είναι ένας δράστης."

#. (itstool) path: section/p
#: C/photo-wall.c.page:200
msgid ""
"In this section, we are going to take a closer look at the loop used for "
"setting up the <code>ClutterActor</code>s that will display our images."
msgstr ""
"Σε αυτήν την ενότητα, πρόκειται να κοιτάξουμε στενότερα το χρησιμοποιούμενο "
"βρόχο για εγκατάσταση του <code>ClutterActor</code>s που θα εμφανίσει τις "
"εικόνες μας."

#. (itstool) path: section/code
#: C/photo-wall.c.page:203
#, no-wrap
msgid ""
"\n"
"guint row = 0;\n"
"guint col = 0;\n"
"for(row=0; row &lt; ROW_COUNT; ++row)\n"
"{\n"
"    for(col=0; col &lt; COL_COUNT; ++col)\n"
"    {\n"
"        const char *img_path = g_ptr_array_index(img_paths, (row * COL_COUNT) + col);\n"
"        GdkPixbuf *pixbuf = gdk_pixbuf_new_from_file_at_size(img_path, STAGE_HEIGHT, STAGE_HEIGHT, NULL);\n"
"        ClutterContent *image = clutter_image_new ();\n"
"        ClutterActor *actor = clutter_actor_new ();\n"
"\n"
"        if (pixbuf != NULL)\n"
"        {\n"
"            clutter_image_set_data(CLUTTER_IMAGE(image),\n"
"                                   gdk_pixbuf_get_pixels(pixbuf),\n"
"                                   gdk_pixbuf_get_has_alpha(pixbuf)\n"
"                                       ? COGL_PIXEL_FORMAT_RGBA_8888\n"
"                                       : COGL_PIXEL_FORMAT_RGB_888,\n"
"                                   gdk_pixbuf_get_width(pixbuf),\n"
"                                   gdk_pixbuf_get_height(pixbuf),\n"
"                                   gdk_pixbuf_get_rowstride(pixbuf),\n"
"                                   NULL);\n"
"        }\n"
"\n"
"        clutter_actor_set_content(actor, image);\n"
"        g_object_unref(image);\n"
"        g_object_unref(pixbuf);\n"
"\n"
"        initialize_actor(actor, row, col);\n"
"        clutter_actor_add_child(stage, actor);\n"
"    }\n"
"}\n"
"\n"
msgstr ""
"\n"
"guint row = 0·\n"
"guint col = 0·\n"
"for(row=0· row &lt; ROW_COUNT· ++row)\n"
"{\n"
"    for(col=0· col &lt; COL_COUNT· ++col)\n"
"    {\n"
"        const char *img_path = g_ptr_array_index(img_paths, (row * COL_COUNT) + col)·\n"
"        GdkPixbuf *pixbuf = gdk_pixbuf_new_from_file_at_size(img_path, STAGE_HEIGHT, STAGE_HEIGHT, NULL)·\n"
"        ClutterContent *image = clutter_image_new ()·\n"
"        ClutterActor *actor = clutter_actor_new ()·\n"
"\n"
"        if (pixbuf != NULL)\n"
"        {\n"
"            clutter_image_set_data(CLUTTER_IMAGE(image),\n"
"                                   gdk_pixbuf_get_pixels(pixbuf),\n"
"                                   gdk_pixbuf_get_has_alpha(pixbuf)\n"
"                                       ; COGL_PIXEL_FORMAT_RGBA_8888\n"
"                                       : COGL_PIXEL_FORMAT_RGB_888,\n"
"                                   gdk_pixbuf_get_width(pixbuf),\n"
"                                   gdk_pixbuf_get_height(pixbuf),\n"
"                                   gdk_pixbuf_get_rowstride(pixbuf),\n"
"                                   NULL)·\n"
"        }\n"
"\n"
"        clutter_actor_set_content(actor, image)·\n"
"        g_object_unref(image)·\n"
"        g_object_unref(pixbuf)·\n"
"\n"
"        initialize_actor(actor, row, col)·\n"
"        clutter_actor_add_child(stage, actor)·\n"
"    }\n"
"}\n"
"\n"

#. (itstool) path: item/p
#: C/photo-wall.c.page:239
msgid ""
"Line 7: Here we want to get the path at the <var>n</var>th location in the "
"<code>GPtrArray</code> that is holding our image path names. The <var>n</"
"var>th position is calculated based on <code>row</code> and <code>col</code>."
msgstr ""
"Γραμμή 7: Εδώ θέλουμε να πάρουμε τη διαδρομή στη θέση <var>n</var> στο "
"<code>GSList</code> που κρατά τα ονόματα διαδρομής εικόνας. Η <var>n</"
"var>στη θέση υπολογίζεται βασισμένη στη <code>row</code> και <code>col</"
"code>."

#. (itstool) path: item/p
#: C/photo-wall.c.page:241
msgid ""
"Line 8‒23: This is where we actually create the <code>ClutterActor</code> "
"and place the image into the actor. The first argument is the path which we "
"access through our <code>GSList</code> node. The second argument is for "
"error reporting but we are ignoring that to keep things short."
msgstr ""
"Γραμμές 8-23: Εδώ δημιουργείται στην πραγματικότητα ο <code>ClutterActor</"
"code> και τοποθετείται η εικόνα στον δράστη. Το πρώτο όρισμα είναι η "
"διαδρομή προσπέλασης μέσα από τον κόμβο <code>GSList</code>. Το δεύτερο "
"όρισμα είναι για αναφορά σφάλματος, αλλά το αγνοούμε για λόγους συντομίας."

#. (itstool) path: item/p
#: C/photo-wall.c.page:243
msgid ""
"Line 47: This adds the <code>ClutterActor</code> to the stage, which is a "
"container. It also assumes ownership of the <code>ClutterActor</code> which "
"is something you'll want to look into as you get deeper into GNOME "
"development. See the <link href=\"http://library.gnome.org/devel/gobject/"
"stable/gobject-memory.html\"><code>GObject</code> documentation</link> for "
"the gory details."
msgstr ""
"Γραμμή 47: Αυτή προσθέτει τον <code>ClutterActor</code> στη σκηνή, που είναι "
"ένας περιέκτης. Επίσης υποθέτει ιδιοκτησία του <code>ClutterActor</code> που "
"είναι κάτι που θα θελήσετε να κοιτάξετε καθώς πηγαίνετε βαθύτερα στην "
"ανάπτυξη του GNOME. Δείτε την <link href=\"http://library.gnome.org/devel/"
"gobject/stable/gobject-memory.html\"><code>GObject</code>τεκμηρίωση</link> "
"για τις φρικτές λεπτομέρειες."

#. (itstool) path: section/title
#: C/photo-wall.c.page:249
msgid "Loading the images"
msgstr "Φόρτωση των εικόνων"

#. (itstool) path: section/p
#: C/photo-wall.c.page:250
msgid ""
"Let's take a short break from Clutter to see how we can get the file names "
"from our image directory."
msgstr ""
"Ας κάνουμε μια σύντομη διακοπή από το Clutter για να δούμε πώς μπορούμε να "
"πάρουμε τα ονόματα αρχείου από τον κατάλογό μας των εικόνων."

#. (itstool) path: section/code
#: C/photo-wall.c.page:251
#, no-wrap
msgid ""
"\n"
"static void\n"
"load_image_path_names()\n"
"{\n"
"    /* Ensure we can access the directory. */\n"
"    GError *error = NULL;\n"
"    GDir *dir = g_dir_open(IMAGE_DIR_PATH, 0, &amp;error);\n"
"    if(error)\n"
"    {\n"
"        g_warning(\"g_dir_open() failed with error: %s\\n\", error-&gt;message);\n"
"        g_clear_error(&amp;error);\n"
"        return;\n"
"    }\n"
"\n"
"    img_paths = g_ptr_array_new_with_free_func (g_free);\n"
"\n"
"    const gchar *filename = g_dir_read_name(dir);\n"
"    while(filename)\n"
"    {\n"
"        if(g_str_has_suffix(filename, \".jpg\") || g_str_has_suffix(filename, \".png\"))\n"
"        {\n"
"            gchar *path = g_build_filename(IMAGE_DIR_PATH, filename, NULL);\n"
"            g_ptr_array_add (img_paths, path);\n"
"        }\n"
"        filename = g_dir_read_name(dir);\n"
"    }\n"
"}"
msgstr ""
"\n"
"static void\n"
"load_image_path_names()\n"
"{\n"
"    /* Επιβεβαιώνουμε ότι μπορούμε να προσπελάσουμε τον κατάλογο. */\n"
"    GError *error = NULL·\n"
"    GDir *dir = g_dir_open(IMAGE_DIR_PATH, 0, &amp;error)·\n"
"    if(error)\n"
"    {\n"
"        g_warning(\"g_dir_open() failed with error: %s\\n\", error-&gt;message)·\n"
"        g_clear_error(&amp;error)·\n"
"        return·\n"
"    }\n"
"\n"
"    img_paths = g_ptr_array_new_with_free_func (g_free)·\n"
"\n"
"    const gchar *filename = g_dir_read_name(dir)·\n"
"    while(filename)\n"
"    {\n"
"        if(g_str_has_suffix(filename, \".jpg\") || g_str_has_suffix(filename, \".png\"))\n"
"        {\n"
"            gchar *path = g_build_filename(IMAGE_DIR_PATH, filename, NULL)·\n"
"            g_ptr_array_add (img_paths, path)·\n"
"        }\n"
"        filename = g_dir_read_name(dir)·\n"
"    }\n"
"}"

#. (itstool) path: item/p
#: C/photo-wall.c.page:279
msgid ""
"Lines 5 and 12: This opens our directory or, if an error occured, returns "
"after printing an error message."
msgstr ""
"Γραμμές 5 και 12: Αυτό ανοίγει τον κατάλογό μας ή, εάν συμβεί σφάλμα, "
"επιστρέφει μετά την εκτύπωση ένα μήνυμα σφάλματος."

#. (itstool) path: item/p
#: C/photo-wall.c.page:280
msgid ""
"Lines 16‒25: The first line gets another file name from the <code>GDir</"
"code> we opened earlier. If there was an image file (which we check by "
"looking at its extension, \".png\" or \".jpg\") in the directory we proceed "
"to prepend the image directory path to the filename and prepend that to the "
"list we set up earlier. Lastly we attempt to get the next path name and "
"reenter the loop if another file was found."
msgstr ""
"Γραμμές 16-25: Η πρώτη γραμμή παίρνει ένα άλλο όνομα αρχείου από το "
"<code>GDir</code> που ανοίξαμε πιο νωρίς. Εάν υπήρχε ένα αρχείο εικόνας (που "
"ελέγχουμε κοιτώντας την επέκτασή του, \".png\" ή \".jpg\") στον κατάλογο "
"συνεχίζουμε να προτάσσουμε τη διαδρομή καταλόγου εικόνας στο όνομα αρχείου "
"και το προτάσσουμε στη λίστα που εγκαταστήσαμε νωρίτερα. Τελευταία "
"προσπαθούμε να πάρουμε το επόμενο όνομα διαδρομής και ξαναεισάγουμε τον "
"βρόχο εάν βρεθεί κάποιο άλλο αρχείο."

#. (itstool) path: section/title
#: C/photo-wall.c.page:285
msgid "Set up the actors"
msgstr "Εγκατάσταση των δραστών"

#. (itstool) path: section/p
#: C/photo-wall.c.page:286
msgid ""
"We now take a look at the sizing and positioning of <code>ClutterActor</"
"code>s and also readying the <code>ClutterActor</code> for user interaction."
msgstr ""
"Ας ρίξουμε μια ματιά τώρα στο μέγεθος και την τοποθέτηση του "
"<code>ClutterActor</code> και επίσης να ετοιμάσουμε το <code>ClutterActor</"
"code> για αλληλεπίδραση χρήστη."

#. (itstool) path: section/code
#: C/photo-wall.c.page:289
#, no-wrap
msgid ""
"\n"
"/* This function handles setting up and placing the rectangles. */\n"
"static void\n"
"initialize_actor(ClutterActor *actor, guint row, guint col)\n"
"{\n"
"    clutter_actor_set_size(actor, THUMBNAIL_SIZE, THUMBNAIL_SIZE);\n"
"    clutter_actor_set_position(actor, col * THUMBNAIL_SIZE, row * THUMBNAIL_SIZE);\n"
"    clutter_actor_set_reactive(actor, TRUE);\n"
"\n"
"    g_signal_connect(actor,\n"
"                     \"button-press-event\",\n"
"                     G_CALLBACK(actor_clicked_cb),\n"
"                     NULL);\n"
"}"
msgstr ""
"\n"
"/* Αυτή η συνάρτηση χειρίζεται την ρύθμιση και τοποθέτηση των ορθογωνίων. */\n"
"static void\n"
"initialize_actor(ClutterActor *actor, guint row, guint col)\n"
"{\n"
"    clutter_actor_set_size(actor, THUMBNAIL_SIZE, THUMBNAIL_SIZE);\n"
"    clutter_actor_set_position(actor, col * THUMBNAIL_SIZE, row * THUMBNAIL_SIZE);\n"
"    clutter_actor_set_reactive(actor, TRUE);\n"
"\n"
"    g_signal_connect(actor,\n"
"                     \"button-press-event\",\n"
"                     G_CALLBACK(actor_clicked_cb),\n"
"                     NULL);\n"
"}"

#. (itstool) path: item/p
#: C/photo-wall.c.page:305
msgid ""
"Line 7: Setting an actor reactive means that it reacts to events, such as "
"<code>button-press-event</code> in our case. For Photo Wall, all "
"<code>ClutterActor</code>s in the wall should initially be reactive."
msgstr ""
"Γραμμή 7: ρύθμιση αντίδρασης δράστη σημαίνει ότι αντιδρά σε συμβάντα, τέτοια "
"όπως <code>button-press-event</code> στην περίπτωσή μας. Για φωτογραφικό "
"τοίχο, όλοι οι <code>ClutterActor</code> στον τοίχο θα πρέπει αρχικά να "
"είναι αντιδραστικοί."

#. (itstool) path: item/p
#: C/photo-wall.c.page:308
msgid ""
"Line 9‒12: Now we connect the <code>button-press-event</code> to the "
"<code>actor_clicked_cb</code> callback which we will look at next."
msgstr ""
"Γραμμή 9-12: Τώρα συνδέουμε το <code>button-press-event</code> στην "
"επανάκληση <code>actor_clicked_cb</code> που θα δούμε στη συνέχεια."

#. (itstool) path: section/p
#: C/photo-wall.c.page:311
msgid "At this point we've got a wall of images that are ready to be viewed."
msgstr ""
"Σε αυτό το σημείο πήραμε έναν τοίχο εικόνων που είναι έτοιμες να προβληθούν."

#. (itstool) path: section/title
#: C/photo-wall.c.page:315
msgid "Reacting to the clicks"
msgstr "Αντίδραση στα πατήματα"

#. (itstool) path: section/code
#: C/photo-wall.c.page:319
#, no-wrap
msgid ""
"\n"
"static gboolean\n"
"actor_clicked_cb(ClutterActor *actor,\n"
"                 ClutterEvent *event,\n"
"                 gpointer      user_data)\n"
"{\n"
"    /* Flag to keep track of our state. */\n"
"    static gboolean is_focused = FALSE;\n"
"    ClutterActorIter iter;\n"
"    ClutterActor *child;\n"
"\n"
"    /* Reset the focus state on all the images */\n"
"    clutter_actor_iter_init (&amp;iter, clutter_actor_get_parent(actor));\n"
"    while (clutter_actor_iter_next(&amp;iter, &amp;child))\n"
"      clutter_actor_set_reactive(child, is_focused);\n"
"\n"
"    clutter_actor_save_easing_state(actor);\n"
"    clutter_actor_set_easing_duration(actor, ANIMATION_DURATION_MS);\n"
"\n"
"    if(is_focused)\n"
"    {\n"
"        /* Restore the old location and size. */\n"
"        clutter_actor_set_position(actor, unfocused_pos.x, unfocused_pos.y);\n"
"        clutter_actor_set_size(actor, THUMBNAIL_SIZE, THUMBNAIL_SIZE);\n"
"    }\n"
"    else\n"
"    {\n"
"        /* Save the current location before animating. */\n"
"        clutter_actor_get_position(actor, &amp;unfocused_pos.x, &amp;unfocused_pos.y);\n"
"        /* Only the currently focused image should receive events. */\n"
"        clutter_actor_set_reactive(actor, TRUE);\n"
"\n"
"        /* Put the focused image on top. */\n"
"        clutter_actor_set_child_above_sibling(clutter_actor_get_parent(actor), actor, NULL);\n"
"\n"
"        clutter_actor_set_position(actor, (STAGE_WIDTH - STAGE_HEIGHT) / 2.0, 0);\n"
"        clutter_actor_set_size(actor, STAGE_HEIGHT, STAGE_HEIGHT);\n"
"    }\n"
"\n"
"    clutter_actor_restore_easing_state(actor);\n"
"\n"
"    /* Toggle our flag. */\n"
"    is_focused = !is_focused;\n"
"\n"
"    return TRUE;\n"
"}"
msgstr ""
"\n"
"static gboolean\n"
"actor_clicked_cb(ClutterActor *actor,\n"
"                 ClutterEvent *event,\n"
"                 gpointer      user_data)\n"
"{\n"
"    /* Σημαία για να κρατήσουμε ίχνος της κατάστασής μας. */\n"
"    static gboolean is_focused = FALSE·\n"
"    ClutterActorIter iter·\n"
"    ClutterActor *child·\n"
"\n"
"    /* Επαναφορά της κατάστασης εστίασης σε όλες τις εικόνες */\n"
"    clutter_actor_iter_init (&amp;iter, clutter_actor_get_parent(actor))·\n"
"    while (clutter_actor_iter_next(&amp;iter, &amp;child))\n"
"      clutter_actor_set_reactive(child, is_focused)·\n"
"\n"
"    clutter_actor_save_easing_state(actor)·\n"
"    clutter_actor_set_easing_duration(actor, ANIMATION_DURATION_MS)·\n"
"\n"
"    if(is_focused)\n"
"    {\n"
"        /* Επαναφορά της παλιάς τοποθεσίας και μεγέθους. */\n"
"        clutter_actor_set_position(actor, unfocused_pos.x, unfocused_pos.y)·\n"
"        clutter_actor_set_size(actor, THUMBNAIL_SIZE, THUMBNAIL_SIZE)·\n"
"    }\n"
"    else\n"
"    {\n"
"        /* Αποθήκευση της τρέχουσας τοποθεσίας πριν την κίνηση. */\n"
"        clutter_actor_get_position(actor, &amp;unfocused_pos.x, &amp;unfocused_pos.y)·\n"
"        /* Μόνο η τρέχουσα εστιασμένη εικόνα πρέπει να δεχτεί συμβάντα. */\n"
"        clutter_actor_set_reactive(actor, TRUE)·\n"
"\n"
"        /* Βάλτε την εστιασμένη εικόνα στην κορυφή. */\n"
"        clutter_actor_set_child_above_sibling(clutter_actor_get_parent(actor), actor, NULL)·\n"
"\n"
"        clutter_actor_set_position(actor, (STAGE_WIDTH - STAGE_HEIGHT) / 2.0, 0)·\n"
"        clutter_actor_set_size(actor, STAGE_HEIGHT, STAGE_HEIGHT)·\n"
"    }\n"
"\n"
"    clutter_actor_restore_easing_state(actor)·\n"
"\n"
"    /* Εναλλαγή της σημαίας μας. */\n"
"    is_focused = !is_focused·\n"
"\n"
"    return TRUE·\n"
"}"

#. (itstool) path: item/p
#: C/photo-wall.c.page:366
msgid ""
"Lines 1‒4: We have to make sure our callback function matches the signature "
"required for the <code>button_clicked_event</code> signal. For our example, "
"we will only use the first argument, the <code>ClutterActor</code> that is "
"actually clicked."
msgstr ""
"Γραμμές 1-4: Πρέπει να βεβαιωθούμε ότι η συνάρτηση επανάκλησής μας ταιριάζει "
"με την απαιτούμενη υπογραφή για το σήμα <code>button_clicked_event</code>. "
"Για το παράδειγμά μας, θα χρησιμοποιήσουμε μόνο το πρώτο όρισμα, το "
"<code>ClutterActor</code> που στην πραγματικότητα πατήθηκε."

#. (itstool) path: note/p
#: C/photo-wall.c.page:368
msgid ""
"A few words on the arguments we are not using in this example. The "
"<code>ClutterEvent</code> is different depending on what event is being "
"handled. For example, a key event produces a <code>ClutterKeyEvent</code> "
"from which you can get the key being pressed among other information. For "
"mouse click events you get a <code>ClutterButtonEvent</code> from which you "
"can get the <code>x</code> and <code>y</code> values. See the Clutter "
"documentation for other <code>ClutterEvent</code> types."
msgstr ""
"Λίγες λέξεις για τα ορίσματα που δεν χρησιμοποιούμε σε αυτό το παράδειγμα. Ο "
"<code>ClutterEvent</code> είναι διαφορετικός ανάλογα με τι συμβάν "
"επεξεργάζεται. Για παράδειγμα, ένα συμβάν πλήκτρου παράγει ένα "
"<code>ClutterKeyEvent</code> από το οποίο μπορείτε να πάρετε το πλήκτρο που "
"πατήθηκε μεταξύ άλλων πληροφοριών. Για τα συμβάντα κλικ του ποντικιού "
"παίρνετε <code>ClutterButtonEvent</code> από το οποίο μπορείτε να πάρετε τις "
"τιμές <code>x</code> και <code>y</code>. Δείτε την τεκμηρίωση του Clutter "
"για άλλους τύπους <code>ClutterEvent</code>."

#. (itstool) path: note/p
#: C/photo-wall.c.page:369
msgid ""
"The <code>user_data</code> is what one uses to pass data into the function. "
"A pointer to any data type can be passed in. If you need multiple data to be "
"passed into the callback, you can place the data into a struct and pass its "
"address in."
msgstr ""
"Ο <code>user_data</code> είναι τι χρησιμοποιεί κάποιος για να περάσει "
"δεδομένα στη συνάρτηση. Ένας δείκτης σε οποιοδήποτε τύπο δεδομένων μπορεί να "
"περαστεί. Εάν χρειαζόσαστε πολλαπλά δεδομένα να περαστούν στην επανάκληση, "
"μπορείτε να τοποθετήσετε τα δεδομένα σε μια δομή και να περάσετε τη "
"διεύθυνσή του."

#. (itstool) path: item/p
#: C/photo-wall.c.page:373
msgid ""
"Line 7: We set up a static flag to track which state we are in: wall mode or "
"focus mode. We start out in wall mode so no image has focus. Thus, we set "
"the flag to <code>FALSE</code> initially."
msgstr ""
"Γραμμή 7: Προδιατάσσουμε μια στατική σημαία για εντοπισμό της κατάστασης "
"στην οποία είμαστε: κατάσταση τοίχου ή κατάσταση εστίασης. Ξεκινάμε σε "
"κατάσταση τοίχου, έτσι καμιά εικόνα δεν έχει εστίαση. Έτσι, ορίζουμε τη "
"σημαία σε <code>FALSE</code> αρχικά."

#. (itstool) path: item/p
#: C/photo-wall.c.page:374
msgid ""
"Line 12‒14: These set the image actors to receive events if they are focused."
msgstr ""
"Γραμμές 12-14: Αυτές βάζουν τους δράστες εικόνας να δέχονται συμβάντα εάν "
"εστιαστούν."

#. (itstool) path: item/p
#: C/photo-wall.c.page:375
msgid ""
"Line 16‒17: Here we set the animation duration and save the current state."
msgstr ""
"Γραμμές 16-17: Εδώ ορίζουμε τη διάρκεια κίνησης και αποθηκεύουμε την "
"τρέχουσα κατάσταση."

#. (itstool) path: item/p
#: C/photo-wall.c.page:376
msgid ""
"Lines 21‒23: Reaching this code means that one image currently has focus and "
"we want to return to wall mode. Setting a position on a <code>ClutterActor</"
"code> begins an animation with the duration that we set in line 17."
msgstr ""
"Γραμμές 21-23: Φτάνοντας αυτόν τον κώδικα σημαίνει ότι μια εικόνα έχει την "
"τρέχουσα εστίαση και θέλουμε να επιστρέψει σε κατάσταση τοίχου. Ορίζοντας "
"μια θέση σε έναν <code>ClutterActor</code> ξεκινά μια κίνηση με τη διάρκεια "
"που ορίζουμε στη γραμμή 17."

#. (itstool) path: item/p
#: C/photo-wall.c.page:378
msgid ""
"Line 24: Reaching this line of code means we are currently in the wall state "
"and are about to give a <code>ClutterActor</code> focus. Here we save the "
"starting position so that we can return to it later."
msgstr ""
"Γραμμή 24: φτάνοντας αυτή τη γραμμή του κώδικα σημαίνει ότι είμαστε προς το "
"παρόν στην κατάσταση τοίχου και πρόκειται να δώσουμε μια <code>ClutterActor</"
"code> εστίαση. Εδώ αποθηκεύουμε την αρχική θέση, έτσι ώστε να μπορούμε να "
"επιστρέψουμε αργότερα."

#. (itstool) path: item/p
#: C/photo-wall.c.page:379
msgid ""
"Line 25: Setting the <code>ClutterActor</code>'s <code>reactive</code> "
"property to <code>TRUE</code> makes this <code>ClutterActor</code> react to "
"events. In this focused state the only <code>ClutterActor</code> that we "
"want to receive events will be the <code>ClutterActor</code> being viewed. "
"Clicking on the <code>ClutterActor</code> will return it to its starting "
"position."
msgstr ""
"Γραμμή 25: ορίζοντας την ιδιότητα <code>reactive</code> του "
"<code>ClutterActor</code> σε <code>TRUE</code> κάνει το <code>ClutterActor</"
"code> να αντιδράσει σε συμβάντα. Σε αυτή την εστιασμένη κατάσταση ο μόνος "
"<code>ClutterActor</code> που θέλουμε να δεχθεί συμβάντα θα είναι ο "
"προβαλλόμενος <code>ClutterActor</code>. Κλικ στο <code>ClutterActor</code> "
"θα επιστρέψει στην αρχική του θέση."

#. (itstool) path: item/p
#: C/photo-wall.c.page:380
msgid ""
"Lines 27‒36: This is where we save the current position of the image, set it "
"to receive events and then make it appear above the other images and start "
"animating it to fill the stage."
msgstr ""
"Γραμμές 27-36: Εδώ αποθηκεύουμε την τρέχουσα θέση της εικόνας, την ορίζουμε "
"να δέχεται συμβάντα και έπειτα την κάνουμε να εμφανιστεί πάνω από τις άλλες "
"εικόνες και ξεκινάμε την κίνησή της για να γεμίσει τη σκηνή."

#. (itstool) path: item/p
#: C/photo-wall.c.page:381
msgid ""
"Line 39: Here we restore the easing state to what was set before we changed "
"it in line 16."
msgstr ""
"Γραμμή 39: Εδώ επαναφέρουμε την κατάσταση απάλυνσης σε ό,τι ορίστηκε πριν "
"την αλλάξουμε στη γραμμή 16."

#. (itstool) path: item/p
#: C/photo-wall.c.page:382
msgid ""
"Line 42: Here we toggle the <code>is_focused</code> flag to the current "
"state."
msgstr ""
"Γραμμή 42: Εδώ εναλλάσσουμε τη σημαία <code>is_focused</code> στην τρέχουσα "
"κατάσταση."

#. (itstool) path: item/p
#: C/photo-wall.c.page:383
msgid ""
"As mentioned previously, the <code>ClutterActor</code>s with higher "
"<code>depth</code> values receive events but can allow <code>ClutterActor</"
"code>s below them to also receive events. Returning <code>TRUE</code> will "
"stop events from being passed down, while <code>FALSE</code> will pass "
"events down."
msgstr ""
"Όπως αναφέρθηκε προηγουμένως, ο <code>ClutterActor</code> με υψηλότερες "
"τιμές <code>depth</code> δέχεται συμβάντα αλλά μπορούν να επιτρέψουν "
"<code>ClutterActor</code> από κάτω τους να δεχθούν επίσης συμβάντα. "
"Επιστροφή σε <code>TRUE</code> θα σταματήσει τα συμβάντα από το να "
"συνεχίσουν, ενώ <code>FALSE</code> θα συνεχίσει τα συμβάντα."

#. (itstool) path: note/p
#: C/photo-wall.c.page:385
msgid ""
"Remember, however, that to receive events the <code>ClutterActor</code>s "
"must be set <code>reactive</code>."
msgstr ""
"Να θυμόσαστε, όμως, ότι για αποδοχή συμβάντων το <code>ClutterActor</code> "
"πρέπει να οριστεί σε <code>reactive</code>."

#. (itstool) path: section/p
#: C/photo-wall.c.page:393
msgid ""
"All of the code should now be ready to go. All you need now is some pictures "
"to load. By default, the pictures are loaded from a <file>berlin_images</"
"file> directory. If you want, you can change the <code>#define "
"IMAGE_DIR_PATH</code> line near the top to refer to your photo directory, or "
"create a <file>berlin_images</file> directory by clicking "
"<guiseq><gui>Project</gui><gui>New Directory...</gui></guiseq> and creating "
"a <file>berlin_images</file> directory as a subdirectory of the <file>photo-"
"wall</file> directory. Make sure to put at least twelve images in the "
"directory!"
msgstr ""
"Όλος ο κώδικας πρέπει τώρα να είναι έτοιμος. Τώρα χρειαζόσαστε μερικές "
"εικόνες για φόρτωση. Από προεπιλογή, οι εικόνες φορτώνονται από έναν "
"κατάλογο <file>berlin_images</file>. Εάν θέλετε, μπορείτε να αλλάξετε τη "
"γραμμή <code>#define IMAGE_DIR_PATH</code> κοντά στην κορυφή για να "
"αναφερθείτε στον κατάλογο φωτογραφιών, ή να δημιουργήσετε ένα κατάλογο "
"<file>berlin_images</file> με κλικ στο <guiseq><gui>έργο</gui><gui>νέος "
"κατάλογος...</gui></guiseq> και δημιουργία ενός καταλόγου "
"<file>berlin_images</file> ως υποκαταλόγου του καταλόγου <file>photo-wall</"
"file>. Βεβαιωθείτε ότι βάλατε τουλάχιστον δώδεκα εικόνες στον κατάλογο!"

#. (itstool) path: section/p
#: C/photo-wall.c.page:395
msgid ""
"When you have done that, click <guiseq><gui>Build</gui><gui>Build Project</"
"gui></guiseq> to build everything again, then <guiseq><gui>Run</"
"gui><gui>Execute</gui></guiseq> to start the application."
msgstr ""
"Όταν τελειώσετε, κλικ <guiseq><gui>κατασκευή</gui><gui>κατασκευή έργου</"
"gui></guiseq> για να κατασκευάσετε οτιδήποτε ξανά, έπειτα "
"<guiseq><gui>τρέξιμο</gui><gui>εκτέλεση</gui></guiseq> για έναρξη της "
"εφαρμογής."

#. (itstool) path: section/p
#: C/photo-wall.c.page:396
msgid ""
"If you haven't already done so, choose the <file>Debug/src/photo-wall</file> "
"application in the dialog that appears. Finally, hit <gui>Run</gui> and "
"enjoy!"
msgstr ""
"Εάν δεν το έχετε ήδη κάνει, επιλέξτε την εφαρμογή <file>Debug/src/photo-"
"wall</file> στον διάλογο που εμφανίζεται. Τελικά πατήστε <gui>εκτέλεση</gui> "
"και απολαύστε το!"

#. (itstool) path: section/p
#: C/photo-wall.c.page:401
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"photo-wall/photo-wall.c\">reference code</link>."
msgstr ""
"Αν αντιμετωπίσετε πρόβλημα με το μάθημα, συγκρίνετε τον κώδικά σας με αυτόν "
"τον <link href=\"photo-wall/photo-wall.c\">κώδικας αναφοράς</link>."

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/progressbar.c.page:24 C/progressbar.vala.page:22
msgctxt "_"
msgid ""
"external ref='media/progressbar_fill.ogv' "
"md5='287763d1d3f4a328212ea2243910f5e4'"
msgstr ""
"external ref='media/progressbar_fill.ogv' "
"md5='287763d1d3f4a328212ea2243910f5e4'"

#. (itstool) path: info/title
#: C/progressbar.c.page:8
msgctxt "text"
msgid "ProgressBar (C)"
msgstr "Γραμμή προόδου -ProgressBar- (C)"

#. (itstool) path: info/desc
#: C/progressbar.c.page:19 C/progressbar.vala.page:18
msgid "A widget which indicates progress visually"
msgstr "Ένα γραφικό στοιχείο που δείχνει την πρόοδο οπτικά"

#. (itstool) path: page/title
#: C/progressbar.c.page:22 C/progressbar.js.page:20 C/progressbar.py.page:22
#: C/progressbar.vala.page:21
msgid "ProgressBar"
msgstr "Γραμμή προόδου (ProgressBar)"

#. (itstool) path: page/p
#: C/progressbar.c.page:25 C/progressbar.vala.page:23
msgid ""
"This ProgressBar \"fills in\" by a fraction of the bar until it is full."
msgstr ""
"Αυτή η ProgressBar \"γεμίζει\" με ένα κλάσμα της γραμμής μέχρι να γεμίσει."

#. (itstool) path: page/code
#: C/progressbar.c.page:27
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"static gboolean\n"
"fill (gpointer   user_data)\n"
"{\n"
"  GtkWidget *progress_bar = user_data;\n"
"\n"
"  /*Get the current progress*/\n"
"  gdouble fraction;\n"
"  fraction = gtk_progress_bar_get_fraction (GTK_PROGRESS_BAR (progress_bar));\n"
"\n"
"  /*Increase the bar by 10% each time this function is called*/\n"
"  fraction += 0.1;\n"
"\n"
"  /*Fill in the bar with the new fraction*/\n"
"  gtk_progress_bar_set_fraction (GTK_PROGRESS_BAR (progress_bar), fraction);\n"
"\n"
"  /*Ensures that the fraction stays below 1.0*/\n"
"  if (fraction &lt; 1.0) \n"
"    return TRUE;\n"
"  \n"
"  return FALSE;\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *progress_bar;\n"
"\n"
"  gdouble fraction = 0.0;\n"
"\n"
"  /*Create a window with a title, and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"ProgressBar Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 220, 20);\n"
" \n"
"  /*Create a progressbar and add it to the window*/\n"
"  progress_bar = gtk_progress_bar_new ();\n"
"  gtk_container_add (GTK_CONTAINER (window), progress_bar);\n"
"\n"
"  /*Fill in the given fraction of the bar. Has to be between 0.0-1.0 inclusive*/\n"
"  gtk_progress_bar_set_fraction (GTK_PROGRESS_BAR (progress_bar), fraction);\n"
"\n"
"  /*Use the created fill function every 500 milliseconds*/\n"
"  g_timeout_add (500, fill, GTK_PROGRESS_BAR (progress_bar));\n"
" \n"
"  gtk_widget_show_all (window);\n"
"}\n"
" \n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
" \n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
" \n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"static gboolean\n"
"fill (gpointer   user_data)\n"
"{\n"
"  GtkWidget *progress_bar = user_data;\n"
"\n"
"  /*Get the current progress*/\n"
"  gdouble fraction;\n"
"  fraction = gtk_progress_bar_get_fraction (GTK_PROGRESS_BAR (progress_bar));\n"
"\n"
"  /*Increase the bar by 10% each time this function is called*/\n"
"  fraction += 0.1;\n"
"\n"
"  /*Fill in the bar with the new fraction*/\n"
"  gtk_progress_bar_set_fraction (GTK_PROGRESS_BAR (progress_bar), fraction);\n"
"\n"
"  /*Ensures that the fraction stays below 1.0*/\n"
"  if (fraction &lt; 1.0) \n"
"    return TRUE;\n"
"  \n"
"  return FALSE;\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *progress_bar;\n"
"\n"
"  gdouble fraction = 0.0;\n"
"\n"
"  /*Create a window with a title, and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"ProgressBar Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 220, 20);\n"
" \n"
"  /*Create a progressbar and add it to the window*/\n"
"  progress_bar = gtk_progress_bar_new ();\n"
"  gtk_container_add (GTK_CONTAINER (window), progress_bar);\n"
"\n"
"  /*Fill in the given fraction of the bar. Has to be between 0.0-1.0 inclusive*/\n"
"  gtk_progress_bar_set_fraction (GTK_PROGRESS_BAR (progress_bar), fraction);\n"
"\n"
"  /*Use the created fill function every 500 milliseconds*/\n"
"  g_timeout_add (500, fill, GTK_PROGRESS_BAR (progress_bar));\n"
" \n"
"  gtk_widget_show_all (window);\n"
"}\n"
" \n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
" \n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
" \n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/progressbar.c.page:36
msgid ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop."
"html#g-timeout-add\">G_Timeout</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop."
"html#g-timeout-add\">G_Timeout</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/progressbar.js.page:21 C/progressbar.py.page:23
msgctxt "_"
msgid ""
"external ref='media/progressbar.ogv' md5='36deab3dd4b5be968828fa2ef416d612'"
msgstr ""
"external ref='media/progressbar.ogv' md5='36deab3dd4b5be968828fa2ef416d612'"

#. (itstool) path: info/title
#: C/progressbar.js.page:7
msgctxt "text"
msgid "ProgressBar (JavaScript)"
msgstr "Γραμμή προόδου -ProgressBar- (JavaScript)"

#. (itstool) path: info/desc
#: C/progressbar.js.page:17
msgid "A bar which animates to indicate progress"
msgstr "Μια γραμμή που κινείται για να δείξει την πρόοδο"

#. (itstool) path: div/p
#: C/progressbar.js.page:25 C/progressbar.py.page:27
msgid "Pressing any key stops and starts this ProgressBar."
msgstr "Πατώντας οποιοδήποτε πλήκτρο σταματά και αρχίζει αυτή τη ProgressBar."

#. (itstool) path: page/p
#: C/progressbar.js.page:32 C/progressbar.py.page:34
msgid "This ProgressBar is stopped and started by pressing any key."
msgstr "Αυτή η ProgressBar σταματά και ξεκινά πατώντας οποιοδήποτε πλήκτρο."

#. (itstool) path: page/code
#: C/progressbar.js.page:34
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ProgressBarExample = new Lang.Class({\n"
"    Name: 'ProgressBar Example',\n"
"\n"
"    // Create the application itself\n"
"        _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsprogressbar',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                       window_position: Gtk.WindowPosition.CENTER,\n"
"                                                       default_height: 20,\n"
"                                                       default_width: 220,\n"
"                                                       title: \"ProgressBar Example\"});\n"
"\n"
"        // Create the progress bar\n"
"        this.progressBar = new Gtk.ProgressBar ();\n"
"        this._window.add(this.progressBar);\n"
"\n"
"        // Start the function that pulses the bar every 100 milliseconds\n"
"        this.sourceID = GLib.timeout_add(GLib.PRIORITY_DEFAULT, 100, Lang.bind(this, this._barPulse));\n"
"\n"
"        // Connect a keypress event to the function that toggles the bar to start or stop pulsing\n"
"        this._window.connect(\"key-press-event\", Lang.bind(this, this._onKeyPress));\n"
"\n"
"            // Show the window and all child widgets\n"
"            this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Pulse the progressbar (unless it has been disabled by a keypress)\n"
"    _barPulse: function() {\n"
"        this.progressBar.pulse();\n"
"        return true;\n"
"    },\n"
"\n"
"    // Start or stop the progressbar when a key is pressed\n"
"    _onKeyPress: function() {\n"
"        if (this.sourceID == 0)\n"
"            this.sourceID = GLib.timeout_add(GLib.PRIORITY_DEFAULT, 100, Lang.bind(this, this._barPulse));\n"
"        else {\n"
"            GLib.source_remove(this.sourceID);\n"
"            this.sourceID = 0;\n"
"        }\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ProgressBarExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ProgressBarExample = new Lang.Class({\n"
"    Name: 'ProgressBar Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"        _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsprogressbar',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Σύνδεση των σημάτων 'activate' και 'startup' στις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"            this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                       window_position: Gtk.WindowPosition.CENTER,\n"
"                                                       default_height: 20,\n"
"                                                       default_width: 220,\n"
"                                                       title: \"ProgressBar Example\"});\n"
"\n"
"        // Δημιουργία της γραμμής προόδου\n"
"        this.progressBar = new Gtk.ProgressBar ();\n"
"        this._window.add(this.progressBar);\n"
"\n"
"        // Έναρξη της συνάρτησης που δονεί τη γραμμή κάθε 100 ms\n"
"        this.sourceID = GLib.timeout_add(GLib.PRIORITY_DEFAULT, 100, Lang.bind(this, this._barPulse));\n"
"\n"
"        // Σύνδεση ενός συμβάντος πατήματος πλήκτρου με τη συνάρτηση που εναλλάσσει τη γραμμή για αρχή ή διακοπή της δόνησης\n"
"        this._window.connect(\"key-press-event\", Lang.bind(this, this._onKeyPress));\n"
"\n"
"            // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"            this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Δόνηση της γραμμής προόδου (εκτός και έχει απενεργοποιηθεί από ένα πάτημα πλήκτρου)\n"
"    _barPulse: function() {\n"
"        this.progressBar.pulse();\n"
"        return true;\n"
"    },\n"
"\n"
"    // Έναρξη ή διακοπή της γραμμής προόδου όταν πατιέται ένα πλήκτρο\n"
"    _onKeyPress: function() {\n"
"        if (this.sourceID == 0)\n"
"            this.sourceID = GLib.timeout_add(GLib.PRIORITY_DEFAULT, 100, Lang.bind(this, this._barPulse));\n"
"        else {\n"
"            GLib.source_remove(this.sourceID);\n"
"            this.sourceID = 0;\n"
"        }\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new ProgressBarExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/progressbar.js.page:39
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/GLib.html\">GLib</"
"link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/GLib.html\">GLib</"
"link>"

#. (itstool) path: info/title
#: C/progressbar.py.page:8
msgctxt "text"
msgid "ProgressBar (Python)"
msgstr "ProgressBar (Python)"

#. (itstool) path: info/desc
#: C/progressbar.py.page:19
msgid "A widget which indicates progress visually."
msgstr "Ένα γραφικό στοιχείο που δείχνει την πρόοδο οπτικά."

#. (itstool) path: section/code
#: C/progressbar.py.page:41
#, no-wrap
msgid ""
"from gi.repository import GLib\n"
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"ProgressBar Example\", application=app)\n"
"        self.set_default_size(220, 20)\n"
"\n"
"        # a progressbar\n"
"        self.progress_bar = Gtk.ProgressBar()\n"
"        # add the progressbar to the window\n"
"        self.add(self.progress_bar)\n"
"\n"
"        # the method self.pulse is called each 100 milliseconds\n"
"        # and self.source_id is set to be the ID of the event source\n"
"        # (i.e. the bar changes position every 100 milliseconds)\n"
"        self.source_id = GLib.timeout_add(100, self.pulse)\n"
"\n"
"    # event handler\n"
"    # any signal from the keyboard controls if the progressbar stops/starts\n"
"    def do_key_press_event(self, event):\n"
"        # if the progressbar has been stopped (therefore source_id == 0 - see\n"
"        # \"else\" below), turn it back on\n"
"        if (self.source_id == 0):\n"
"            self.source_id = GLib.timeout_add(100, self.pulse)\n"
"        # if the bar is moving, remove the source with the ID of source_id\n"
"        # from the main context (stop the bar) and set the source_id to 0\n"
"        else:\n"
"            GLib.source_remove(self.source_id)\n"
"            self.source_id = 0\n"
"        # stop the signal emission\n"
"        return True\n"
"\n"
"    # source function\n"
"    # the progressbar is in \"activity mode\" when this method is called\n"
"    def pulse(self):\n"
"        self.progress_bar.pulse()\n"
"        # call the function again\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import GLib\n"
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"ProgressBar Example\", application=app)\n"
"        self.set_default_size(220, 20)\n"
"\n"
"        # a progressbar\n"
"        self.progress_bar = Gtk.ProgressBar()\n"
"        # add the progressbar to the window\n"
"        self.add(self.progress_bar)\n"
"\n"
"        # the method self.pulse is called each 100 milliseconds\n"
"        # and self.source_id is set to be the ID of the event source\n"
"        # (i.e. the bar changes position every 100 milliseconds)\n"
"        self.source_id = GLib.timeout_add(100, self.pulse)\n"
"\n"
"    # event handler\n"
"    # any signal from the keyboard controls if the progressbar stops/starts\n"
"    def do_key_press_event(self, event):\n"
"        # if the progressbar has been stopped (therefore source_id == 0 - see\n"
"        # \"else\" below), turn it back on\n"
"        if (self.source_id == 0):\n"
"            self.source_id = GLib.timeout_add(100, self.pulse)\n"
"        # if the bar is moving, remove the source with the ID of source_id\n"
"        # from the main context (stop the bar) and set the source_id to 0\n"
"        else:\n"
"            GLib.source_remove(self.source_id)\n"
"            self.source_id = 0\n"
"        # stop the signal emission\n"
"        return True\n"
"\n"
"    # source function\n"
"    # the progressbar is in \"activity mode\" when this method is called\n"
"    def pulse(self):\n"
"        self.progress_bar.pulse()\n"
"        # call the function again\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/progressbar.py.page:46
msgid "Useful methods for a ProgressBar widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο ProgressBar"

#. (itstool) path: item/p
#: C/progressbar.py.page:48
msgid ""
"Instead of <code>pulse()</code>, that makes the bar go back and forth, if we "
"want the ProgressBar to \"fill in\" a fraction (a <code>float</code> between "
"<code>0.0</code> and <code>1.0</code> included) of the bar that has been "
"completed, use <code>set_fraction(fraction)</code>."
msgstr ""
"Αντί για <code>pulse()</code>, που κάνει τη γραμμή να πηγαίνει μπροστά πίσω, "
"εάν θέλουμε η ProgressBar να \"γεμίζει\" ένα κλάσμα (ένα <code>float</code> "
"μεταξύ <code>0.0</code> και <code>1.0</code> συμπεριλαμβανόμενου) της "
"γραμμής που έχει ολοκληρωθεί, χρησιμοποιήστε <code>set_fraction(fraction)</"
"code>."

#. (itstool) path: item/p
#: C/progressbar.py.page:49
msgid ""
"To set a text and show it (superimposed over the bar) use "
"<code>set_text(<var>\"text\"</var>)</code> and <code>set_show_text(True)</"
"code>. If a text is not set and <code>set_show_text(True)</code> the text "
"will be the percentage of the work that has been completed."
msgstr ""
"Για ρύθμιση κειμένου και εμφάνισή του (υπερτιθέμενου της γραμμής) "
"χρησιμοποιήστε <code>set_text(<var>\"text\"</var>)</code> και "
"<code>set_show_text(True)</code>. Εάν ένα κείμενο δεν ορίζεται και το "
"<code>set_show_text(True)</code>, τότε το κείμενο θα είναι το ποσοστό της "
"εργασίας που έχει ολοκληρωθεί."

#. (itstool) path: item/p
#: C/progressbar.py.page:57
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkProgressBar.html"
"\">GtkProgressBar</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkProgressBar.html"
"\">GtkProgressBar</link>"

#. (itstool) path: item/p
#: C/progressbar.py.page:58
msgid ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop."
"html\">GLib - The Main Event Loop</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop."
"html\">GLib - The Main Event Loop</link>"

#. (itstool) path: item/p
#: C/progressbar.py.page:59
msgid ""
"<link href=\"http://developer.gnome.org/gdk/stable/gdk-Keyboard-Handling"
"\">Gdk - Key Values</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gdk/stable/gdk-Keyboard-Handling"
"\">Gdk - Key Values</link>"

#. (itstool) path: info/title
#: C/progressbar.vala.page:8
msgctxt "text"
msgid "ProgressBar (Vala)"
msgstr "ProgressBar (Vala)"

#. (itstool) path: page/code
#: C/progressbar.vala.page:25
#, no-wrap
msgid ""
"public class MyApplication : Gtk.Application {\n"
"\n"
"\tGtk.ProgressBar progress_bar;\n"
"\n"
"\tprotected override void activate () {\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.set_title (\"ProgressBar Example\");\n"
"\t\twindow.set_default_size (220, 20);\n"
"\n"
"\t\tprogress_bar = new Gtk.ProgressBar ();\n"
"\t\twindow.add (progress_bar);\n"
"\t\twindow.show_all ();\n"
"\n"
"\t\tdouble fraction = 0.0;\n"
"\t\tprogress_bar.set_fraction (fraction);\n"
"\t\tGLib.Timeout.add (500, fill);\n"
"\t}\n"
"\n"
"\tbool fill () {\n"
"\t\tdouble fraction = progress_bar.get_fraction (); //get current progress\n"
"\t\tfraction += 0.1; //increase by 10% each time this function is called\n"
"\n"
"\t\tprogress_bar.set_fraction (fraction);\n"
"\n"
"\t\t/* This function is only called by GLib.Timeout.add while it returns true; */\n"
"\t\tif (fraction &lt; 1.0)\n"
"\t\t\treturn true;\n"
"\t\treturn false;\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\tvar progress_bar_application = new MyApplication ();\n"
"\tint status =  progress_bar_application.run (args);\n"
"\treturn status;\n"
"}\n"
msgstr ""
"public class MyApplication : Gtk.Application {\n"
"\n"
"\tGtk.ProgressBar progress_bar;\n"
"\n"
"\tprotected override void activate () {\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.set_title (\"ProgressBar Example\");\n"
"\t\twindow.set_default_size (220, 20);\n"
"\n"
"\t\tprogress_bar = new Gtk.ProgressBar ();\n"
"\t\twindow.add (progress_bar);\n"
"\t\twindow.show_all ();\n"
"\n"
"\t\tdouble fraction = 0.0;\n"
"\t\tprogress_bar.set_fraction (fraction);\n"
"\t\tGLib.Timeout.add (500, fill);\n"
"\t}\n"
"\n"
"\tbool fill () {\n"
"\t\tdouble fraction = progress_bar.get_fraction (); //get current progress\n"
"\t\tfraction += 0.1; //increase by 10% each time this function is called\n"
"\n"
"\t\tprogress_bar.set_fraction (fraction);\n"
"\n"
"\t\t/* This function is only called by GLib.Timeout.add while it returns true; */\n"
"\t\tif (fraction &lt; 1.0)\n"
"\t\t\treturn true;\n"
"\t\treturn false;\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\tvar progress_bar_application = new MyApplication ();\n"
"\tint status =  progress_bar_application.run (args);\n"
"\treturn status;\n"
"}\n"

#. (itstool) path: item/p
#: C/progressbar.vala.page:30
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ProgressBar.html\">Gtk."
"ProgressBar</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ProgressBar.html\">Gtk."
"ProgressBar</link>"

#. (itstool) path: item/p
#: C/progressbar.vala.page:31
msgid ""
"<link href=\"http://www.valadoc.org/glib-2.0/GLib.Timeout.html\">GLib."
"Timeout</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/glib-2.0/GLib.Timeout.html\">GLib."
"Timeout</link>"

#. (itstool) path: info/title
#: C/properties.py.page:9
msgctxt "text"
msgid "Properties (Python)"
msgstr "Ιδιότητες (Python)"

#. (itstool) path: info/desc
#: C/properties.py.page:14
msgid "An explanation of properties, getters and setters."
msgstr "Μια εξήγηση των ιδιοτήτων, ληπτών και ρυθμιστών."

#. (itstool) path: page/title
#: C/properties.py.page:27
msgid "Properties"
msgstr "Ιδιότητες"

#. (itstool) path: section/p
#: C/properties.py.page:34
msgid ""
"<em>Properties</em> describe the configuration and state of widgets. Each "
"widget has its own particular set of properties. For example, a widget such "
"as a button has the property <code>label</code> which contains the text of "
"the widget. You can specify the name and value of any number of properties "
"as keyword arguments when creating an instance of a widget. For example, to "
"create a label with the text “Hello World”, an angle of 25 degrees, and "
"aligned to the right, you can use:"
msgstr ""
"Οι <em>ιδιότητες</em> περιγράφουν τη διαμόρφωση και κατάσταση των γραφικών "
"στοιχείων και κάθε γραφικό στοιχείο έχει το δικό του ιδιαίτερο σύνολο "
"ιδιοτήτων. Για παράδειγμα, ένα γραφικό στοιχείο όπως ένα κουμπί ή μια "
"ετικέτα έχει την ιδιότητα <code>label</code> που περιέχει το κείμενο του "
"γραφικού στοιχείου. Μπορείτε να ορίσετε το όνομα και την τιμή οποιουδήποτε "
"αριθμού ιδιοτήτων ως ορίσματα λέξης-κλειδιού όταν δημιουργείτε ένα "
"στιγμιότυπο ενός γραφικού στοιχείου: για παράδειγμα, για τη δημιουργία μιας "
"ετικέτας με το κείμενο “Hello World”, με μια γωνία 25 μοιρών και στοίχιση "
"στα δεξιά, μπορείτε να χρησιμοποιήσετε:"

#. (itstool) path: section/code
#: C/properties.py.page:41
#, no-wrap
msgid ""
"\n"
"label = Gtk.Label(label=\"Hello World\", angle=25, halign=Gtk.Align.END)"
msgstr ""
"\n"
"label = Gtk.Label(label=\"Hello World\", angle=25, halign=Gtk.Align.END)"

#. (itstool) path: section/p
#: C/properties.py.page:44
msgid ""
"Alternatively, you can define these properties separately by using the "
"method associated with it."
msgstr ""
"Εναλλακτικά, μπορείτε να ορίσετε αυτές τις ιδιότητες ξεχωριστά "
"χρησιμοποιώντας τη μέθοδο που έχει συσχετιστεί."

#. (itstool) path: section/code
#: C/properties.py.page:45
#, no-wrap
msgid ""
"\n"
"label = Gtk.Label()\n"
"label.set_label(\"Hello World\")\n"
"label.set_angle(25)\n"
"label.set_halign(Gtk.Align.END)"
msgstr ""
"\n"
"label = Gtk.Label()\n"
"label.set_label(\"Hello World\")\n"
"label.set_angle(25)\n"
"label.set_halign(Gtk.Align.END)"

#. (itstool) path: section/p
#: C/properties.py.page:51
msgid ""
"Once you have created such a label, you can get the text of the label with "
"<code>label.get_label()</code>, and analogously for the other properties."
msgstr ""
"Μόλις δημιουργήσετε μια τέτοια ετικέτα, μπορείτε να πάρετε το κείμενο της "
"ετικέτας με <code>label.get_label()</code> και ανάλογα για τις άλλες "
"ιδιότητες."

#. (itstool) path: section/p
#: C/properties.py.page:53
msgid ""
"Instead of using getters and setters you can also get and set the properties "
"with <code>get_property(<var>\"prop-name\"</var>)</code> and "
"<code>set_property(<var>\"prop-name\"</var>, <var>value</var>)</code>, "
"respectively."
msgstr ""
"Αντί να χρησιμοποιήσετε λήπτες και ρυθμιστές μπορείτε επίσης να πάρετε και "
"να ρυθμίσετε τις ιδιότητες με <code>get_property(<var>\"prop-name\"</var>)</"
"code> και <code>set_property(<var>\"prop-name\"</var>, <var>value</var>)</"
"code>, αντίστοιχα."

#. (itstool) path: section/p
#: C/properties.py.page:59
msgid ""
"<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/basics."
"html\">Basics - Properties</link> in Python GTK+ 3 Tutorial"
msgstr ""
"<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/basics."
"html\">Βασικά - Ιδιότητες</link> στο μάθημα Python GTK+ 3"

#. (itstool) path: info/title
#: C/py.page:7
msgctxt "link"
msgid "Python"
msgstr "Python"

#. (itstool) path: page/title
#: C/py.page:21
msgid "Tutorials, code samples and platform demos in Python"
msgstr "Μαθήματα, δείγματα κώδικα και παραδείγματα πλατφόρμας σε Python"

#. (itstool) path: section/title
#. (itstool) path: page/title
#: C/py.page:26 C/tutorial.py.page:31
msgid "Tutorial for beginners"
msgstr "Μάθημα για αρχάριους"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/radiobutton.c.page:25 C/radiobutton.py.page:24 C/radiobutton.vala.page:25
msgctxt "_"
msgid ""
"external ref='media/radiobutton.png' md5='d115460280d8e41493dd98054b5822a5'"
msgstr ""
"external ref='media/radiobutton.png' md5='d115460280d8e41493dd98054b5822a5'"

#. (itstool) path: info/title
#: C/radiobutton.c.page:8
msgctxt "text"
msgid "RadioButton (C)"
msgstr "Ραδιοπλήκτρο (RadioButton) (C)"

#. (itstool) path: info/desc
#: C/radiobutton.c.page:20
msgid "A choice from multiple checkbuttons"
msgstr "Μια επιλογή από πολλαπλά κουμπιά ελέγχου"

#. (itstool) path: page/title
#: C/radiobutton.c.page:23 C/radiobutton.js.page:21 C/radiobutton.py.page:23
#: C/radiobutton.vala.page:24
msgid "RadioButton"
msgstr "Ράδιοπλήκτρο (RadioButton)"

#. (itstool) path: page/p
#: C/radiobutton.c.page:26
msgid "These radiobuttons report their activity in the terminal."
msgstr "Αυτά τα ραδιοπλήκτρα αναφέρουν την δραστηριότητά τους στο τερματικό."

#. (itstool) path: page/code
#: C/radiobutton.c.page:28
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Signal handler for the \"toggled\" signal of the RadioButton*/\n"
"static void\n"
"button_toggled_cb (GtkWidget *button,\n"
"                   gpointer   user_data)\n"
"{\n"
"  char *b_state;\n"
"  const char *button_label;\n"
"\n"
"  if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (button)))\n"
"          b_state = \"on\";\n"
"  else {\n"
"          b_state = \"off\";\n"
"          g_print (\"\\n\");\n"
"  }\n"
"\n"
"  button_label = gtk_button_get_label (GTK_BUTTON (button));\n"
"\n"
"  g_print (\"%s was turned %s\\n\", button_label, b_state);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"\n"
"  GtkWidget *button1;\n"
"  GtkWidget *button2;\n"
"  GtkWidget *button3;\n"
"\n"
"  /*Create a window with a set title and default size.\n"
"  Also, set a border width for the amount of space to leave\n"
"  inside the window*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"RadioButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 250, 100);\n"
"  gtk_container_set_border_width (GTK_CONTAINER(window), 20);\n"
"\n"
"\n"
"  /*Create an initial radio button*/\n"
"  button1 = gtk_radio_button_new_with_label (NULL, \"Button 1\");\n"
"\n"
"  /*Create a second radio button, and add it to the same group as Button 1*/\n"
"  button2 = gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (button1), \n"
"                                                         \"Button 2\");\n"
"\n"
"  /*Create a third button, and add it to the same group as Button 1*/\n"
"  button3 = gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (button1), \n"
"                                                         \"Button 3\");\n"
"\n"
"\n"
"  /*Create a grid, attach the buttons, and position them accordingly*/\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_attach (GTK_GRID (grid), button1, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), button2, 0, 1, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), button3, 0, 2, 1, 1);\n"
"\n"
"  /*Be sure to set the initial state of each button*/\n"
"  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button2), TRUE);\n"
"  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button1), FALSE);\n"
"  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button3), FALSE);\n"
"\n"
"  /*Connect the signal handlers (aka Callback functions) to the buttons*/\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (button1), \"toggled\", \n"
"                    G_CALLBACK (button_toggled_cb), window);\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (button2), \"toggled\", \n"
"                    G_CALLBACK (button_toggled_cb), window);\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (button3), \"toggled\", \n"
"                    G_CALLBACK (button_toggled_cb), window);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Ο χειριστής σήματος για το σήμα \"toggled\" του ραδιοπλήκτρου*/\n"
"static void\n"
"button_toggled_cb (GtkWidget *button,\n"
"                   gpointer   user_data)\n"
"{\n"
"  char *b_state;\n"
"  const char *button_label;\n"
"\n"
"  if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (button)))\n"
"          b_state = \"on\";\n"
"  else {\n"
"          b_state = \"off\";\n"
"          g_print (\"\\n\");\n"
"  }\n"
"\n"
"  button_label = gtk_button_get_label (GTK_BUTTON (button));\n"
"\n"
"  g_print (\"%s was turned %s\\n\", button_label, b_state);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"\n"
"  GtkWidget *button1;\n"
"  GtkWidget *button2;\n"
"  GtkWidget *button3;\n"
"\n"
"  /*Δημιουργία ενός παραθύρου με ορισμένο τίτλο και προεπιλεγμένο μέγεθος.\n"
"  Επίσης, ορισμός πλάτους περιγράμματος για τον χώρο που αφήνει\n"
"  μες το παράθυρο*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"RadioButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 250, 100);\n"
"  gtk_container_set_border_width (GTK_CONTAINER(window), 20);\n"
"\n"
"\n"
"  /*Δημιουργία ενός αρχικού ραδιοπλήκτρου*/\n"
"  button1 = gtk_radio_button_new_with_label (NULL, \"Button 1\");\n"
"\n"
"  /*Δημιουργία ενός δεύτερου ραδιοπλήκτρου και προσθήκη του στην ίδια ομάδα όπως το πλήκτρο 1*/\n"
"  button2 = gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (button1), \n"
"                                                         \"Button 2\");\n"
"\n"
"  /*Δημιουργία ενός τρίτου ραδιοπλήκτρου και προσθήκη του στην ίδια ομάδα όπως το πλήκτρο 1*/\n"
"  button3 = gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (button1), \n"
"                                                         \"Button 3\");\n"
"\n"
"\n"
"  /*Δημιουργία πλέγματος, προσάρτηση των πλήκτρων και κατάλληλη τοποθέτησή τους*/\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_attach (GTK_GRID (grid), button1, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), button2, 0, 1, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), button3, 0, 2, 1, 1);\n"
"\n"
"  /*Βεβαιωθείτε ότι ορίσατε την αρχική κατάσταση κάθε κουμπιού*/\n"
"  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button2), TRUE);\n"
"  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button1), FALSE);\n"
"  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button3), FALSE);\n"
"\n"
"  /*Σύνδεση των χειριστών σήματος (συναρτήσεις επανάκλησης aka) με τα πλήκτρα*/\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (button1), \"toggled\", \n"
"                    G_CALLBACK (button_toggled_cb), window);\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (button2), \"toggled\", \n"
"                    G_CALLBACK (button_toggled_cb), window);\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (button3), \"toggled\", \n"
"                    G_CALLBACK (button_toggled_cb), window);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/radiobutton.c.page:38 C/switch.c.page:36
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkSwitch.html"
"\">GtkSwitch</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkSwitch.html"
"\">GtkSwitch</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/radiobutton.js.page:22
msgctxt "_"
msgid ""
"external ref='media/radiobuttontravel.png' "
"md5='0c5f01ee160bb42716ccf5dccbd080c0'"
msgstr ""
"external ref='media/radiobuttontravel.png' "
"md5='0c5f01ee160bb42716ccf5dccbd080c0'"

#. (itstool) path: info/title
#: C/radiobutton.js.page:8
msgctxt "text"
msgid "RadioButton (JavaScript)"
msgstr "Ραδιοπλήκτρα -RadioButton- (JavaScript)"

#. (itstool) path: info/desc
#: C/radiobutton.js.page:18
msgid "Only one can be selected at a time"
msgstr "Μόνο ένα μπορεί να επιλεγεί τη φορά"

#. (itstool) path: page/p
#: C/radiobutton.js.page:23
msgid ""
"RadioButtons are named after old-style car radios, which had buttons for "
"switching between channel presets. Because the radio could only be tuned to "
"one station at a time, only one button could be pressed in at a time; if you "
"pressed a new one, the one that was already pressed in would pop back out. "
"That's how these buttons work, too."
msgstr ""
"RadioButtons ονομάζονται κατά την παλιά μόδα ραδιοφώνων αυτοκινήτων, που "
"είχαν κουμπιά για αλλαγή μεταξύ προκαθορισμένων καναλιών. Επειδή το "
"ραδιόφωνο μπορούσε να συντονιστεί μόνο σε ένα σταθμό τη φορά, μόνο ένα "
"κουμπί μπορούσε να πατηθεί τη φορά· αν πατούσατε ένα νέο, αυτό που ήταν ήδη "
"πατημένο πεταγόταν πίσω. Έτσι δουλεύουν και αυτά τα κουμπιά."

#. (itstool) path: page/p
#: C/radiobutton.js.page:24
msgid ""
"Each RadioButton needs a text label and a group. Only one button in a group "
"can be selected at a time. You don't name each group; you just set new "
"RadioButtons to be part of the same group as an existing one. If you create "
"a new one outside of a group, it automatically creates a new group for it to "
"be part of."
msgstr ""
"Κάθε RadioButton χρειάζεται μία ετικέτα κειμένου και μια ομάδα. Μόνο ένα "
"κουμπί σε μια ομάδα μπορεί να επιλεγεί τη φορά. Δεν ονομάζετε κάθε ομάδα· "
"μόλις ρυθμίσατε νέα RadioButtons για να είναι τμήμα της ίδιας ομάδας ως μια "
"υπάρχουσα. Εάν δημιουργείτε ένα νέο εκτός μιας ομάδας, δημιουργεί αυτόματα "
"μια νέα ομάδα για να είναι μέρος του."

#. (itstool) path: section/code
#: C/radiobutton.js.page:41
#, no-wrap
msgid ""
"\n"
"const RadioButtonExample = new Lang.Class({\n"
"    Name: 'RadioButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsradiobutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const RadioButtonExample = new Lang.Class({\n"
"    Name: 'RadioButton Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsradiobutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Σύνδεση των σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομέί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/radiobutton.js.page:67 C/togglebutton.js.page:67
msgid ""
"All the code for this sample goes in the RadioButtonExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.Application.html\">Gtk.Application</link> for our widgets and window to "
"go in."
msgstr ""
"Όλος ο κώδικας για αυτό το παράδειγμα πηγαίνει στην κλάση "
"RadioButtonExample. Ο παραπάνω κώδικας δημιουργεί μια <link href=\"http://"
"www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Application.html\">Gtk."
"Application</link> για να μπουν μέσα τα γραφικά στοιχεία μας και τα "
"παράθυρα."

#. (itstool) path: section/code
#: C/radiobutton.js.page:68
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Travel Planning\"});\n"
msgstr ""
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Travel Planning\"});\n"

#. (itstool) path: section/title
#: C/radiobutton.js.page:83
msgid "Creating the radiobuttons"
msgstr "Δημιουργία των ραδιοκουμπιών"

#. (itstool) path: section/code
#: C/radiobutton.js.page:84
#, no-wrap
msgid ""
"\n"
"        // Create a label for the first group of buttons\n"
"        this._placeLabel = new Gtk.Label ({label: \"Where would you like to travel to?\"});\n"
msgstr ""
"\n"
"        // Δημιουργία μιας ετικέτας για την πρώτη ομάδα κουμπιών\n"
"        this._placeLabel = new Gtk.Label ({label: \"Where would you like to travel to?\"});\n"

#. (itstool) path: section/p
#: C/radiobutton.js.page:89
msgid ""
"We use a <link xref=\"label.js\">Gtk.Label</link> to set each group of "
"RadioButtons apart. Nothing will stop you from putting RadioButtons from all "
"different groups wherever you want, so if you want people to know which ones "
"go together you need to organize things accordingly."
msgstr ""
"Χρησιμοποιούμε μια <link xref=\"label.js\">Gtk.Label</link> για να ορίσουμε "
"κάθε ομάδα RadioButtons ανεξάρτητα. Τίποτα δεν σας εμποδίζει να βάλετε τα "
"RadioButtons από όλες τις διαφορετικές ομάδες όπου θέλετε, έτσι εάν θέλετε "
"οι άλλοι να ξέρουν ποιο πηγαίνει μαζί, χρειαζόσαστε να οργανώσετε τα "
"πράγματα ανάλογα."

#. (itstool) path: section/code
#: C/radiobutton.js.page:91
#, no-wrap
msgid ""
"\n"
"        // Create three radio buttons three different ways\n"
"        this._place1 = new Gtk.RadioButton ({label: \"The Beach\"});\n"
"\n"
"        this._place2 = Gtk.RadioButton.new_from_widget (this._place1);\n"
"        this._place2.set_label (\"The Moon\");\n"
"\n"
"        this._place3 = Gtk.RadioButton.new_with_label_from_widget (this._place1, \"Antarctica\");\n"
"        // this._place3.set_active (true);\n"
msgstr ""
"\n"
"        // Δημιουργία τριών ραδιοπλήκτρων τριών διαφορετικών τρόπων\n"
"        this._place1 = new Gtk.RadioButton ({label: \"The Beach\"});\n"
"\n"
"        this._place2 = Gtk.RadioButton.new_from_widget (this._place1);\n"
"        this._place2.set_label (\"The Moon\");\n"
"\n"
"        this._place3 = Gtk.RadioButton.new_with_label_from_widget (this._place1, \"Antarctica\");\n"
"        // this._place3.set_active (true);\n"

#. (itstool) path: section/p
#: C/radiobutton.js.page:102
msgid ""
"Here are three different ways to create RadioButtons. The first is the usual "
"way, where we create a new Gtk.RadioButton and assign its properties at the "
"same time. The second and third use functions which automatically handle "
"some of the properties; new_from_widget takes a single argument, the "
"RadioButton that you want to put this new one in the same group as. "
"Meanwhile, new_with_label_from_widget takes that and the RadioButton's label "
"at the same time."
msgstr ""
"Εδώ υπάρχουν τρεις διαφορετικοί τρόποι να δημιουργήσετε RadioButtons. Ο "
"πρώτος είναι ο συνηθισμένος τρόπος, όπου δημιουργούμε ένα νέο Gtk."
"RadioButton και αποδίδουμε τις ιδιότητές του ταυτόχρονα. Ο δεύτερος και "
"τρίτος χρησιμοποιούν συναρτήσεις που χειρίζονται αυτόματα μερικές από τις "
"ιδιότητες· το new_from_widget παίρνει ένα μοναδικό όρισμα, το RadioButton "
"στο οποίο θέλετε να βάλετε αυτό το νέο στην ίδια ομάδα. Εν τω μεταξύ, το "
"new_with_label_from_widget το παίρνει καθώς και την ετικέτα του RadioButton "
"ταυτόχρονα."

#. (itstool) path: section/p
#: C/radiobutton.js.page:103
msgid ""
"The first RadioButton in a group is the one that's selected by default. Try "
"uncommenting the last line in this sample code to see how you can set a "
"different one to be the default selection."
msgstr ""
"Το πρώτο RadioButton σε μια ομάδα είναι αυτό που επιλέγεται από προεπιλογή. "
"Δοκιμάστε την αποσχολίαση της τελευταίας γραμμής σε αυτό το δείγμα κώδικα "
"για να δείτε πώς μπορείτε να ρυθμίσετε ένα διαφορετικό να είναι η προεπιλογή."

#. (itstool) path: section/code
#: C/radiobutton.js.page:105
#, no-wrap
msgid ""
"\n"
"        // Create a label for the second group of buttons\n"
"        this._thingLabel = new Gtk.Label ({label: \"And what would you like to bring?\" });\n"
"\n"
"        // Create three more radio buttons\n"
"        this._thing1 = new Gtk.RadioButton ({label: \"Penguins\" });\n"
"        this._thing2 = new Gtk.RadioButton ({label: \"Sunscreen\", group: this._thing1 });\n"
"        this._thing3 = new Gtk.RadioButton ({label: \"A spacesuit\", group: this._thing1 });\n"
msgstr ""
"\n"
"        // Δημιουργία μιας ετικέτας για τη δεύτερη ομάδα κουμπιών\n"
"        this._thingLabel = new Gtk.Label ({label: \"And what would you like to bring?\" });\n"
"\n"
"        // Δημιουργία τριών επιπλέον ραδιοπλήκτρων\n"
"        this._thing1 = new Gtk.RadioButton ({label: \"Penguins\" });\n"
"        this._thing2 = new Gtk.RadioButton ({label: \"Sunscreen\", group: this._thing1 });\n"
"        this._thing3 = new Gtk.RadioButton ({label: \"A spacesuit\", group: this._thing1 });\n"

#. (itstool) path: section/p
#: C/radiobutton.js.page:114
msgid ""
"Here we create the label for the second group of buttons, and then create "
"them all the same way."
msgstr ""
"Εδώ δημιουργούμε την ετικέτα για τη δεύτερη ομάδα κουμπιών και έπειτα τα "
"δημιουργούμε όλα με τον ίδιο τρόπο."

#. (itstool) path: section/title
#: C/radiobutton.js.page:118 C/textview.js.page:132
msgid "Creating the rest of the user interface"
msgstr "Δημιουργία της υπόλοιπης διεπαφής χρήστη"

#. (itstool) path: section/code
#: C/radiobutton.js.page:120
#, no-wrap
msgid ""
"\n"
"        // Create a stock OK button\n"
"        this._okButton = new Gtk.Button ({\n"
"            label: 'gtk-ok',\n"
"            use_stock: 'true',\n"
"            halign: Gtk.Align.END });\n"
"\n"
"        // Connect the button to the function which handles clicking it\n"
"        this._okButton.connect ('clicked', Lang.bind (this, this._okClicked));\n"
msgstr ""
"\n"
"        // Δημιουργία ενός πλήκτρου παρακαταθήκης ΕΝΤΑΞΕΙ\n"
"        this._okButton = new Gtk.Button ({\n"
"            label: 'gtk-ok',\n"
"            use_stock: 'true',\n"
"            halign: Gtk.Align.END });\n"
"\n"
"        // Σύνδεση του κουμπιού με τη συνάρτηση που χειρίζεται το πάτημά του\n"
"        this._okButton.connect ('clicked', Lang.bind (this, this._okClicked));\n"

#. (itstool) path: section/p
#: C/radiobutton.js.page:130
msgid ""
"This code creates a <link xref=\"button.js\">Gtk.Button</link> and binds it "
"to a function which will show people a silly message when they click OK, "
"depending on which RadioButtons were selected."
msgstr ""
"Αυτός ο κώδικας δημιουργεί ένα <link xref=\"button.js\">Gtk.Button</link> "
"και το συνδέει με μια συνάρτηση που θα εμφανίσει στους άλλους ένα χαζό "
"μήνυμα όταν πατήσουν εντάξει, ανάλογα με τα επιλεγμένα RadioButtons."

#. (itstool) path: section/p
#: C/radiobutton.js.page:131
msgid ""
"To make sure the button's \"OK\" label shows up properly in every language "
"that GNOME is translated into, remember to use one of Gtk's <link href="
"\"https://developer.gnome.org/gtk3/3.4/gtk3-Stock-Items.html\">stock button "
"types</link>."
msgstr ""
"Για να βεβαιωθείτε ότι η ετικέτα του κουμπιού \"OK\" εμφανίζεται κατάλληλα "
"σε κάθε γλώσσα στην οποία μεταφράζεται το GNOME, να θυμάστε να "
"χρησιμοποιήσετε έναν από τους <link href=\"https://developer.gnome.org/"
"gtk3/3.4/gtk3-Stock-Items.html\">τύπους κουμπιών παρακαταθήκης</link> του "
"Gtk."

#. (itstool) path: section/code
#: C/radiobutton.js.page:133
#, no-wrap
msgid ""
"\n"
"        // Create a grid to put the \"place\" items in\n"
"        this._places = new Gtk.Grid ();\n"
"\n"
"        // Attach the \"place\" items to the grid\n"
"        this._places.attach (this._placeLabel, 0, 0, 1, 1);\n"
"        this._places.attach (this._place1, 0, 1, 1, 1);\n"
"        this._places.attach (this._place2, 0, 2, 1, 1);\n"
"        this._places.attach (this._place3, 0, 3, 1, 1);\n"
"\n"
"        // Create a grid to put the \"thing\" items in\n"
"        this._things = new Gtk.Grid ({ margin_top: 50 });\n"
"\n"
"        // Attach the \"thing\" items to the grid\n"
"        this._things.attach (this._thingLabel, 0, 0, 1, 1);\n"
"        this._things.attach (this._thing1, 0, 1, 1, 1);\n"
"        this._things.attach (this._thing2, 0, 2, 1, 1);\n"
"        this._things.attach (this._thing3, 0, 3, 1, 1);\n"
"\n"
"        // Create a grid to put everything in\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_left: 40,\n"
"            margin_right: 50 });\n"
"\n"
"        // Attach everything to the grid\n"
"        this._grid.attach (this._places, 0, 0, 1, 1);\n"
"        this._grid.attach (this._things, 0, 1, 1, 1);\n"
"        this._grid.attach (this._okButton, 0, 2, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
msgstr ""
"\n"
"        // Δημιουρία ενός πλέγματος για τοποθέτηση των στοιχείων \"place\" μέσα\n"
"        this._places = new Gtk.Grid ();\n"
"\n"
"        // Προσάρτηση των στοιχείων \"place\" στο πλέγμα\n"
"        this._places.attach (this._placeLabel, 0, 0, 1, 1);\n"
"        this._places.attach (this._place1, 0, 1, 1, 1);\n"
"        this._places.attach (this._place2, 0, 2, 1, 1);\n"
"        this._places.attach (this._place3, 0, 3, 1, 1);\n"
"\n"
"        // Δημιουργία ενός πλέγματος για τοποθέτηση των στοιχείων \"thing\" μέσα\n"
"        this._things = new Gtk.Grid ({ margin_top: 50 });\n"
"\n"
"        // Προσάρτηση των στοιχείων \"thing\" στο πλέγμα\n"
"        this._things.attach (this._thingLabel, 0, 0, 1, 1);\n"
"        this._things.attach (this._thing1, 0, 1, 1, 1);\n"
"        this._things.attach (this._thing2, 0, 2, 1, 1);\n"
"        this._things.attach (this._thing3, 0, 3, 1, 1);\n"
"\n"
"        // Δημιουργία ενός πλέγματος για τοποθέτηση όλων μέσα\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_left: 40,\n"
"            margin_right: 50 });\n"
"\n"
"        // Προσάρτηση όλων στο πλέγμα\n"
"        this._grid.attach (this._places, 0, 0, 1, 1);\n"
"        this._grid.attach (this._things, 0, 1, 1, 1);\n"
"        this._grid.attach (this._okButton, 0, 2, 1, 1);\n"
"\n"
"        // Προσάρτηση του πλέγματος στο παράθυρο\n"
"        this._window.add (this._grid);\n"

#. (itstool) path: section/p
#: C/radiobutton.js.page:167
msgid ""
"We use a separate <link xref=\"grid.js\">Gtk.Grid</link> to organize each "
"group of radio buttons. This way we can change the layout with less fuss "
"later on. The second Grid has a margin on top, to visually separate the two "
"sets of choices."
msgstr ""
"Χρησιμοποιούμε ένα ανεξάρτητο <link xref=\"grid.js\">Gtk.Grid</link> για να "
"οργανώσουμε κάθε ομάδα ραδιοπλήκτρων. Με αυτό τον τρόπο μπορούμε να "
"αλλάξουμε τη διάταξη με λιγότερη αναστάτωση αργότερα. Το δεύτερο πλέγμα έχει "
"ένα περιθώριο στην κορυφή, για οπτική διάκριση των δύο συνόλων επιλογών."

#. (itstool) path: section/p
#: C/radiobutton.js.page:168
msgid ""
"After we've organized them, we put them into a third, master Grid, along "
"with the OK button. Then we attach that to the window."
msgstr ""
"Αφού τα οργανώσουμε, τα βάζουμε σε ένα τρίτο, κύριο πλέγμα, μαζί με το "
"κουμπί εντάξει. Έπειτα το προσαρτούμε στο παράθυρο."

#. (itstool) path: section/p
#: C/radiobutton.js.page:176
msgid ""
"Finally, we tell the window and everything inside it to become visible when "
"the application is run."
msgstr ""
"Τελικά, λέμε στο παράθυρο και σε κάθε τι που είναι μέσα του να γίνει ορατό "
"όταν τρέχει η εφαρμογή."

#. (itstool) path: section/code
#: C/radiobutton.js.page:182
#, no-wrap
msgid ""
"\n"
"    _okClicked: function () {\n"
"\n"
"        // Create a popup that shows a silly message\n"
"        this._travel = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            message_type: Gtk.MessageType.OTHER,\n"
"            buttons: Gtk.ButtonsType.OK,\n"
"            text: this._messageText() });\n"
"\n"
"        // Show the popup\n"
"        this._travel.show();\n"
"\n"
"        // Bind the OK button to the function that closes the popup\n"
"        this._travel.connect (\"response\", Lang.bind (this, this._clearTravelPopUp));\n"
"\n"
"    },\n"
msgstr ""
"\n"
"    _okClicked: function () {\n"
"\n"
"        // Δημιουργία ενός αναδυόμενου που εμφανίζει ένα χαζό μήνυμα\n"
"        this._travel = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            message_type: Gtk.MessageType.OTHER,\n"
"            buttons: Gtk.ButtonsType.OK,\n"
"            text: this._messageText() });\n"
"\n"
"        // Εμφάνιση του αναδυόμενου\n"
"        this._travel.show();\n"
"\n"
"        // Σύνδεση του κουμπιού ΕΝΤΑΞΕΙ με τη συνάρτηση που κλείνει το αναδυόμενο\n"
"        this._travel.connect (\"response\", Lang.bind (this, this._clearTravelPopUp));\n"
"\n"
"    },\n"

#. (itstool) path: section/p
#: C/radiobutton.js.page:201
msgid ""
"When you click OK, a <link xref=\"messagedialog.js\">Gtk.MessageDialog</"
"link> appears. This function creates and displays the popup window, then "
"binds its OK button to a function that closes it. What text appears in the "
"popup depends on the _messageText() function, which returns a different "
"value depending on which set of options you chose."
msgstr ""
"Όταν πατάτε εντάξει, ένας <link xref=\"messagedialog.js\">Gtk.MessageDialog</"
"link> εμφανίζεται. Αυτή η συνάρτηση δημιουργεί και εμφανίζει το αναδυόμενο "
"παράθυρο, έπειτα συνδέει το κουμπί της εντάξει με τη συνάρτηση που το "
"κλείνει. Τι κείμενο εμφανίζεται στο αναδυόμενο εξαρτάται από τη συνάρτηση "
"_messageText(), που επιστρέφει μια διαφορετική τιμή ανάλογα με το σύνολο "
"επιλογών που διαλέξατε."

#. (itstool) path: section/code
#: C/radiobutton.js.page:203
#, no-wrap
msgid ""
"\n"
"    _messageText: function() {\n"
"\n"
"        // Create a silly message for the popup depending on what you selected\n"
"        var stringMessage = \"\";\n"
"\n"
"        if (this._place1.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"Penguins love the beach, too!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"Make sure to put on that sunscreen!\";\n"
"\n"
"            else stringMessage = \"Are you going to the beach in space?\";\n"
"\n"
"        }\n"
"\n"
"        else if (this._place2.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"The penguins will take over the moon!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"A lack of sunscreen will be the least of your problems!\";\n"
"\n"
"            else stringMessage = \"You'll probably want a spaceship, too!\";\n"
"        }\n"
"\n"
"        else if (this._place3.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"The penguins will be happy to be back home!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"Antarctic sunbathing may be hazardous to your health!\";\n"
"\n"
"            else stringMessage = \"Try bringing a parka instead!\";\n"
"        }\n"
"\n"
"        return stringMessage;\n"
"\n"
"    },\n"
msgstr ""
"\n"
"    _messageText: function() {\n"
"\n"
"        // Δημιουργία ενός χαζού μηνύματος για το αναδυόμενο ανάλογα με το τι διαλέξατε\n"
"        var stringMessage = \"\";\n"
"\n"
"        if (this._place1.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"Penguins love the beach, too!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"Make sure to put on that sunscreen!\";\n"
"\n"
"            else stringMessage = \"Are you going to the beach in space?\";\n"
"\n"
"        }\n"
"\n"
"        else if (this._place2.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"The penguins will take over the moon!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"A lack of sunscreen will be the least of your problems!\";\n"
"\n"
"            else stringMessage = \"You'll probably want a spaceship, too!\";\n"
"        }\n"
"\n"
"        else if (this._place3.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"The penguins will be happy to be back home!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"Antarctic sunbathing may be hazardous to your health!\";\n"
"\n"
"            else stringMessage = \"Try bringing a parka instead!\";\n"
"        }\n"
"\n"
"        return stringMessage;\n"
"\n"
"    },\n"

#. (itstool) path: section/p
#: C/radiobutton.js.page:247
msgid ""
"The get_active() method is how we can tell which RadioButton's pressed in. "
"This function returns a different silly message depending on which set of "
"buttons was pressed. Its return value is used as the MessageDialog's text "
"property."
msgstr ""
"Η μέθοδος get_active() λέει πώς μπορούμε να πούμε ποιο RadioButton πατιέται. "
"Αυτή η συνάρτηση επιστρέφει ένα διαφορετικό χαζό μήνυμα ανάλογα με ποιο "
"σύνολο κουμπιών πατήθηκε. Η επιστρεφόμενη τιμή χρησιμοποιείται ως ιδιότητα "
"κειμένου του MessageDialog."

#. (itstool) path: section/code
#: C/radiobutton.js.page:249
#, no-wrap
msgid ""
"\n"
"    _clearTravelPopUp: function () {\n"
"\n"
"        this._travel.destroy();\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _clearTravelPopUp: function () {\n"
"\n"
"        this._travel.destroy();\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/radiobutton.js.page:258
msgid ""
"This function is called when the MessageDialog's OK button is pressed. It "
"simply makes the popup go away."
msgstr ""
"Αυτή η συνάρτηση καλείται όταν το κουμπί εντάξει του MessageDialog πατιέται. "
"Κάνει απλά το αναδυόμενο να φύγει."

#. (itstool) path: section/code
#: C/radiobutton.js.page:260
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new RadioButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new RadioButtonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/radiobutton.js.page:265 C/togglebutton.js.page:144
msgid ""
"Finally, we create a new instance of the finished RadioButtonExample class, "
"and set the application running."
msgstr ""
"Τελικά, δημιουργούμε ένα νέο παράδειγμα της τελειωμένης κλάσης "
"RadioButtonExample και εκτελούμε την εφαρμογή."

#. (itstool) path: section/code
#: C/radiobutton.js.page:270
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const RadioButtonExample = new Lang.Class({\n"
"    Name: 'RadioButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsradiobutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Travel Planning\"});\n"
"\n"
"        // Create a label for the first group of buttons\n"
"        this._placeLabel = new Gtk.Label ({label: \"Where would you like to travel to?\"});\n"
"\n"
"        // Create three radio buttons three different ways\n"
"        this._place1 = new Gtk.RadioButton ({label: \"The Beach\"});\n"
"\n"
"        this._place2 = Gtk.RadioButton.new_from_widget (this._place1);\n"
"        this._place2.set_label (\"The Moon\");\n"
"\n"
"        this._place3 = Gtk.RadioButton.new_with_label_from_widget (this._place1, \"Antarctica\");\n"
"        // this._place3.set_active (true);\n"
"\n"
"        // Create a label for the second group of buttons\n"
"        this._thingLabel = new Gtk.Label ({label: \"And what would you like to bring?\" });\n"
"\n"
"        // Create three more radio buttons\n"
"        this._thing1 = new Gtk.RadioButton ({label: \"Penguins\" });\n"
"        this._thing2 = new Gtk.RadioButton ({label: \"Sunscreen\", group: this._thing1 });\n"
"        this._thing3 = new Gtk.RadioButton ({label: \"A spacesuit\", group: this._thing1 });\n"
"\n"
"        // Create a stock OK button\n"
"        this._okButton = new Gtk.Button ({\n"
"            label: 'gtk-ok',\n"
"            use_stock: 'true',\n"
"            halign: Gtk.Align.END });\n"
"\n"
"        // Connect the button to the function which handles clicking it\n"
"        this._okButton.connect ('clicked', Lang.bind (this, this._okClicked));\n"
"\n"
"        // Create a grid to put the \"place\" items in\n"
"        this._places = new Gtk.Grid ();\n"
"\n"
"        // Attach the \"place\" items to the grid\n"
"        this._places.attach (this._placeLabel, 0, 0, 1, 1);\n"
"        this._places.attach (this._place1, 0, 1, 1, 1);\n"
"        this._places.attach (this._place2, 0, 2, 1, 1);\n"
"        this._places.attach (this._place3, 0, 3, 1, 1);\n"
"\n"
"        // Create a grid to put the \"thing\" items in\n"
"        this._things = new Gtk.Grid ({ margin_top: 50 });\n"
"\n"
"        // Attach the \"thing\" items to the grid\n"
"        this._things.attach (this._thingLabel, 0, 0, 1, 1);\n"
"        this._things.attach (this._thing1, 0, 1, 1, 1);\n"
"        this._things.attach (this._thing2, 0, 2, 1, 1);\n"
"        this._things.attach (this._thing3, 0, 3, 1, 1);\n"
"\n"
"        // Create a grid to put everything in\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_left: 40,\n"
"            margin_right: 50 });\n"
"\n"
"        // Attach everything to the grid\n"
"        this._grid.attach (this._places, 0, 0, 1, 1);\n"
"        this._grid.attach (this._things, 0, 1, 1, 1);\n"
"        this._grid.attach (this._okButton, 0, 2, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _okClicked: function () {\n"
"\n"
"        // Create a popup that shows a silly message\n"
"        this._travel = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            message_type: Gtk.MessageType.OTHER,\n"
"            buttons: Gtk.ButtonsType.OK,\n"
"            text: this._messageText() });\n"
"\n"
"        // Show the popup\n"
"        this._travel.show();\n"
"\n"
"        // Bind the OK button to the function that closes the popup\n"
"        this._travel.connect (\"response\", Lang.bind (this, this._clearTravelPopUp));\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _messageText: function() {\n"
"\n"
"        // Create a silly message for the popup depending on what you selected\n"
"        var stringMessage = \"\";\n"
"\n"
"        if (this._place1.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"Penguins love the beach, too!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"Make sure to put on that sunscreen!\";\n"
"\n"
"            else stringMessage = \"Are you going to the beach in space?\";\n"
"\n"
"        }\n"
"\n"
"        else if (this._place2.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"The penguins will take over the moon!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"A lack of sunscreen will be the least of your problems!\";\n"
"\n"
"            else stringMessage = \"You'll probably want a spaceship, too!\";\n"
"        }\n"
"\n"
"        else if (this._place3.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"The penguins will be happy to be back home!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"Antarctic sunbathing may be hazardous to your health!\";\n"
"\n"
"            else stringMessage = \"Try bringing a parka instead!\";\n"
"        }\n"
"\n"
"        return stringMessage;\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"\n"
"    _clearTravelPopUp: function () {\n"
"\n"
"        this._travel.destroy();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new RadioButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const RadioButtonExample = new Lang.Class({\n"
"    Name: 'RadioButton Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsradiobutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Σύνδεση των σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει ένα παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Travel Planning\"});\n"
"\n"
"        // Δημιουργία μιας ετικέτας για την πρώτη ομάδα των κουμπιών\n"
"        this._placeLabel = new Gtk.Label ({label: \"Where would you like to travel to?\"});\n"
"\n"
"        // Δημιουργία τριών ραδιοπλήκτων τριών διαφορετικών δρόμων\n"
"        this._place1 = new Gtk.RadioButton ({label: \"The Beach\"});\n"
"\n"
"        this._place2 = Gtk.RadioButton.new_from_widget (this._place1);\n"
"        this._place2.set_label (\"The Moon\");\n"
"\n"
"        this._place3 = Gtk.RadioButton.new_with_label_from_widget (this._place1, \"Antarctica\");\n"
"        // this._place3.set_active (true);\n"
"\n"
"        // Δημιουργία μιας ετικέτας για τη δεύτερη ομάδα κουμπιών\n"
"        this._thingLabel = new Gtk.Label ({label: \"And what would you like to bring?\" });\n"
"\n"
"        // Δημιουργία τριών πρόσθετων ραδιοπλήκτρων\n"
"        this._thing1 = new Gtk.RadioButton ({label: \"Penguins\" });\n"
"        this._thing2 = new Gtk.RadioButton ({label: \"Sunscreen\", group: this._thing1 });\n"
"        this._thing3 = new Gtk.RadioButton ({label: \"A spacesuit\", group: this._thing1 });\n"
"\n"
"        // Δημιουργία ενός πλήκτρου παρακαταθήκης ΕΝΤΑΞΕΙ\n"
"        this._okButton = new Gtk.Button ({\n"
"            label: 'gtk-ok',\n"
"            use_stock: 'true',\n"
"            halign: Gtk.Align.END });\n"
"\n"
"        // Σύνδεση του πλήκτρου με τη συνάρτηση που χειρίζεται το πάτημά του\n"
"        this._okButton.connect ('clicked', Lang.bind (this, this._okClicked));\n"
"\n"
"        // Δημιουργία ενός πλέγματος για την τοποθέτηση των στοιχείων \"place\" μέσα\n"
"        this._places = new Gtk.Grid ();\n"
"\n"
"        // Προσάρτηση των στοιχείων \"place\" στο πλέγμα\n"
"        this._places.attach (this._placeLabel, 0, 0, 1, 1);\n"
"        this._places.attach (this._place1, 0, 1, 1, 1);\n"
"        this._places.attach (this._place2, 0, 2, 1, 1);\n"
"        this._places.attach (this._place3, 0, 3, 1, 1);\n"
"\n"
"        // Δημιουργία ενός πλέγματος για τοποθέτηση των στοιχείων  \"thing\" μέσα\n"
"        this._things = new Gtk.Grid ({ margin_top: 50 });\n"
"\n"
"        // Προσάρτηση των στοιχείων \"thing\" στο πλέγμα\n"
"        this._things.attach (this._thingLabel, 0, 0, 1, 1);\n"
"        this._things.attach (this._thing1, 0, 1, 1, 1);\n"
"        this._things.attach (this._thing2, 0, 2, 1, 1);\n"
"        this._things.attach (this._thing3, 0, 3, 1, 1);\n"
"\n"
"        // Δημιουργία ενός πλέγματος για να μπουν όλα μέσα\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_left: 40,\n"
"            margin_right: 50 });\n"
"\n"
"        // Προσάρτηση όλων στο πλέγμα\n"
"        this._grid.attach (this._places, 0, 0, 1, 1);\n"
"        this._grid.attach (this._things, 0, 1, 1, 1);\n"
"        this._grid.attach (this._okButton, 0, 2, 1, 1);\n"
"\n"
"        // Προσθήκη του πλέγματος στο παράθυρο\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Εμφάνιση των παραθύρων και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _okClicked: function () {\n"
"\n"
"        // Δημιουργία ενός αναδυόμενου που εμφανίζει ένα χαζό μήνυμα\n"
"        this._travel = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            message_type: Gtk.MessageType.OTHER,\n"
"            buttons: Gtk.ButtonsType.OK,\n"
"            text: this._messageText() });\n"
"\n"
"        // Εμφάνιση του αναδυόμενου\n"
"        this._travel.show();\n"
"\n"
"        // Σύνδεση του πλήκτρου ΕΝΤΑΞΕΙ στη συνάρτηση που κλείνει το αναδυόμενο\n"
"        this._travel.connect (\"response\", Lang.bind (this, this._clearTravelPopUp));\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _messageText: function() {\n"
"\n"
"        // Δημιουργία ενός χαζού μηνύματος για το αναδυόμενο ανάλογα με το τι επιλέξατε\n"
"        var stringMessage = \"\";\n"
"\n"
"        if (this._place1.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"Penguins love the beach, too!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"Make sure to put on that sunscreen!\";\n"
"\n"
"            else stringMessage = \"Are you going to the beach in space?\";\n"
"\n"
"        }\n"
"\n"
"        else if (this._place2.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"The penguins will take over the moon!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"A lack of sunscreen will be the least of your problems!\";\n"
"\n"
"            else stringMessage = \"You'll probably want a spaceship, too!\";\n"
"        }\n"
"\n"
"        else if (this._place3.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"The penguins will be happy to be back home!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"Antarctic sunbathing may be hazardous to your health!\";\n"
"\n"
"            else stringMessage = \"Try bringing a parka instead!\";\n"
"        }\n"
"\n"
"        return stringMessage;\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"\n"
"    _clearTravelPopUp: function () {\n"
"\n"
"        this._travel.destroy();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new RadioButtonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/radiobutton.js.page:278 C/statusbar.js.page:225 C/textview.js.page:252
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Button.html"
"\">Gtk.Button</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Button.html"
"\">Gtk.Button</link>"

#. (itstool) path: item/p
#: C/radiobutton.js.page:279 C/scale.js.page:213 C/spinbutton.js.page:204
#: C/switch.js.page:270 C/textview.js.page:253 C/togglebutton.js.page:157
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Grid.html"
"\">Gtk.Grid</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Grid.html"
"\">Gtk.Grid</link>"

#. (itstool) path: item/p
#: C/radiobutton.js.page:280 C/scale.js.page:214 C/spinbutton.js.page:205
#: C/switch.js.page:272 C/textview.js.page:254
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Label.html"
"\">Gtk.Label</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Label.html"
"\">Gtk.Label</link>"

#. (itstool) path: item/p
#: C/radiobutton.js.page:281 C/textview.js.page:255
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.RadioButton."
"html\">Gtk.RadioButton</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.RadioButton."
"html\">Gtk.RadioButton</link>"

#. (itstool) path: info/title
#: C/radiobutton.py.page:8
msgctxt "text"
msgid "RadioButton (Python)"
msgstr "Ραδιοπλήκτρο (RadioButton) (Python)"

#. (itstool) path: info/desc
#: C/radiobutton.py.page:20
msgid "Mutually exclusive buttons."
msgstr "Αμοιβαία αποκλειόμενα κουμπιά."

#. (itstool) path: page/p
#: C/radiobutton.py.page:25
msgid ""
"Three RadioButtons. You can see in the terminal if they are turned off or on."
msgstr ""
"Τρία RadioButtons. Μπορείτε να δείτε στον τερματικό εάν είναι ανενεργά ή "
"ενεργά."

#. (itstool) path: section/code
#: C/radiobutton.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"RadioButton Example\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(20)\n"
"\n"
"        # a new radiobutton with a label\n"
"        button1 = Gtk.RadioButton(label=\"Button 1\")\n"
"        # connect the signal \"toggled\" emitted by the radiobutton\n"
"        # with the callback function toggled_cb\n"
"        button1.connect(\"toggled\", self.toggled_cb)\n"
"\n"
"        # another radiobutton, in the same group as button1\n"
"        button2 = Gtk.RadioButton.new_from_widget(button1)\n"
"        # with label \"Button 2\"\n"
"        button2.set_label(\"Button 2\")\n"
"        # connect the signal \"toggled\" emitted by the radiobutton\n"
"        # with the callback function toggled_cb\n"
"        button2.connect(\"toggled\", self.toggled_cb)\n"
"        # set button2 not active by default\n"
"        button2.set_active(False)\n"
"\n"
"        # another radiobutton, in the same group as button1,\n"
"        # with label \"Button 3\"\n"
"        button3 = Gtk.RadioButton.new_with_label_from_widget(\n"
"            button1, \"Button 3\")\n"
"        # connect the signal \"toggled\" emitted by the radiobutton\n"
"        # with the callback function toggled_cb\n"
"        button3.connect(\"toggled\", self.toggled_cb)\n"
"        # set button3 not active by default\n"
"        button3.set_active(False)\n"
"\n"
"        # a grid to place the buttons\n"
"        grid = Gtk.Grid.new()\n"
"        grid.attach(button1, 0, 0, 1, 1)\n"
"        grid.attach(button2, 0, 1, 1, 1)\n"
"        grid.attach(button3, 0, 2, 1, 1)\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # callback function\n"
"    def toggled_cb(self, button):\n"
"        # a string to describe the state of the button\n"
"        state = \"unknown\"\n"
"        # whenever the button is turned on, state is on\n"
"        if button.get_active():\n"
"            state = \"on\"\n"
"        # else state is off\n"
"        else:\n"
"            state = \"off\"\n"
"        # whenever the function is called (a button is turned on or off)\n"
"        # print on the terminal which button was turned on/off\n"
"        print button.get_label() + \" was turned \" + state\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"RadioButton Example\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(20)\n"
"\n"
"        # a new radiobutton with a label\n"
"        button1 = Gtk.RadioButton(label=\"Button 1\")\n"
"        # connect the signal \"toggled\" emitted by the radiobutton\n"
"        # with the callback function toggled_cb\n"
"        button1.connect(\"toggled\", self.toggled_cb)\n"
"\n"
"        # another radiobutton, in the same group as button1\n"
"        button2 = Gtk.RadioButton.new_from_widget(button1)\n"
"        # with label \"Button 2\"\n"
"        button2.set_label(\"Button 2\")\n"
"        # connect the signal \"toggled\" emitted by the radiobutton\n"
"        # with the callback function toggled_cb\n"
"        button2.connect(\"toggled\", self.toggled_cb)\n"
"        # set button2 not active by default\n"
"        button2.set_active(False)\n"
"\n"
"        # another radiobutton, in the same group as button1,\n"
"        # with label \"Button 3\"\n"
"        button3 = Gtk.RadioButton.new_with_label_from_widget(\n"
"            button1, \"Button 3\")\n"
"        # connect the signal \"toggled\" emitted by the radiobutton\n"
"        # with the callback function toggled_cb\n"
"        button3.connect(\"toggled\", self.toggled_cb)\n"
"        # set button3 not active by default\n"
"        button3.set_active(False)\n"
"\n"
"        # a grid to place the buttons\n"
"        grid = Gtk.Grid.new()\n"
"        grid.attach(button1, 0, 0, 1, 1)\n"
"        grid.attach(button2, 0, 1, 1, 1)\n"
"        grid.attach(button3, 0, 2, 1, 1)\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # callback function\n"
"    def toggled_cb(self, button):\n"
"        # a string to describe the state of the button\n"
"        state = \"unknown\"\n"
"        # whenever the button is turned on, state is on\n"
"        if button.get_active():\n"
"            state = \"on\"\n"
"        # else state is off\n"
"        else:\n"
"            state = \"off\"\n"
"        # whenever the function is called (a button is turned on or off)\n"
"        # print on the terminal which button was turned on/off\n"
"        print button.get_label() + \" was turned \" + state\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/radiobutton.py.page:35
msgid "Useful methods for a RadioButton widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο RadioButton"

#. (itstool) path: section/p
#: C/radiobutton.py.page:36
msgid ""
"In line 16 the signal <code>\"toggled\"</code> is connected to the callback "
"function <code>toggled_cb()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"Στη γραμμή 16 το σήμα <code>\"toggled\"</code> συνδέεται με τη συνάρτηση "
"επανάκλησης <code>toggled_cb()</code> χρησιμοποιώντας <code><var>widget</"
"var>.connect(<var>signal</var>, <var>callback function</var>)</code>. Δείτε "
"<link xref=\"signals-callbacks.py\"/> για μια πιο λεπτομερή εξήγηση."

#. (itstool) path: section/p
#: C/radiobutton.py.page:38
msgid ""
"As seen in <link xref=\"properties.py\"/>, instead of <code>button1 = Gtk."
"RadioButton(label=\"Button 1\")</code> we could create the button and label "
"it with"
msgstr ""
"Όπως φαίνεται στο <link xref=\"properties.py\"/>, αντί για <code>button1 = "
"Gtk.RadioButton(label=\"Button 1\")</code> μπορούμε να δημιουργήσουμε το "
"κουμπί και την ετικέτα του μαζί"

#. (itstool) path: section/code
#: C/radiobutton.py.page:39
#, no-wrap
msgid ""
"\n"
"button1 = Gtk.RadioButton()\n"
"button1.set_label(\"Button 1\")."
msgstr ""
"\n"
"button1 = Gtk.RadioButton()\n"
"button1.set_label(\"Button 1\")."

#. (itstool) path: section/p
#: C/radiobutton.py.page:42
msgid ""
"Yet another way to create a new RadioButton with a label is <code>button1 = "
"Gtk.RadioButton.new_with_label(None, \"Button 1\")</code> (the first "
"arguement is the group of the radiobuttons, which we can get with "
"<code>get_group()</code>, the second argument is the label)."
msgstr ""
"Ακόμα ένας άλλος τρόπος να δημιουργήσουμε ένα νέο RadioButton με μια ετικέτα "
"είναι <code>button1 = Gtk.RadioButton.new_with_label(None, \"Button 1\")</"
"code> (το πρώτο όρισμα είναι η ομάδα των ραδιοπλήκτρων, που μπορούμε να "
"πάρουμε με <code>get_group()</code>, το δεύτερο όρισμα είναι η ετικέτα)."

#. (itstool) path: item/p
#: C/radiobutton.py.page:51
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkRadioButton.html"
"\">GtkRadioButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkRadioButton.html"
"\">GtkRadioButton</link>"

#. (itstool) path: info/title
#: C/radiobutton.vala.page:8
msgctxt "text"
msgid "RadioButton (Vala)"
msgstr "Ραδιοπλήκτρο (RadioButton) (Vala)"

#. (itstool) path: info/desc
#: C/radiobutton.vala.page:21
msgid "A choice from multiple CheckButtons."
msgstr "Μια επιλογή από πολλαπλά πλήκτρα ελέγχου (CheckButtons)."

#. (itstool) path: page/p
#: C/radiobutton.vala.page:26
msgid "These RadioButtons report their activity in the terminal."
msgstr "Αυτά τα ραδιοπλήκτρα αναφέρουν τη δραστηριότητά τους στο τερματικό."

#. (itstool) path: page/code
#: C/radiobutton.vala.page:28
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"RadioButton Example\");\n"
"\n"
"\t\tthis.border_width = 20;\n"
"\t\tthis.set_default_size (250, 100);\n"
"\n"
"\t\t/* We demonstrate 3 different RadioButton creation methods */\n"
"\n"
"\t\t//Create a Radio Button\n"
"\t\tvar button1 = new Gtk.RadioButton (null);\n"
"\t\tbutton1.set_label (\"Button 1\");\n"
"\n"
"\t\t//Create a RadioButton with a label, and add it to the same group as button1.\n"
"\t\tvar button2 = new Gtk.RadioButton.with_label (button1.get_group(),\"Button 2\");\n"
"\n"
"\t\t//Create a RadioButton with a label, adding it to button1's group.\n"
"\t\tvar button3 = new Gtk.RadioButton.with_label_from_widget (button1, \"Button 3\");\n"
"\n"
"\t\t//Attach the buttons to a grid.\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.attach (button1, 0, 0, 1, 1);\n"
"\t\tgrid.attach (button2, 0, 1, 1, 1);\n"
"\t\tgrid.attach (button3, 0, 2, 1, 1);\n"
"\n"
"\t\t//Add the button to the window.\n"
"\t\tthis.add (grid);\n"
"\n"
"\t\t//Connect the signal handlers (aka. callback functions) to the buttons.\n"
"\t\tbutton1.toggled.connect (button_toggled_cb);\n"
"\t\tbutton2.toggled.connect (button_toggled_cb);\n"
"\t\tbutton3.toggled.connect (button_toggled_cb);\n"
"\t}\n"
"\n"
"\tvoid button_toggled_cb (Gtk.ToggleButton button)\n"
"\t{\n"
"\t\tvar state = \"unknown\";\n"
"\n"
"\t\tif (button.get_active ())\n"
"\t\t\tstate = \"on\";\n"
"\t\telse {\n"
"\t\t\tstate = \"off\";\n"
"\t\t\tprint (\"\\n\");\n"
"\t\t}\n"
"\t\tprint (button.get_label() + \" was turned \" + state + \"\\n\");\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t//Show all of the things.\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"RadioButton Example\");\n"
"\n"
"\t\tthis.border_width = 20;\n"
"\t\tthis.set_default_size (250, 100);\n"
"\n"
"\t\t/* We demonstrate 3 different RadioButton creation methods */\n"
"\n"
"\t\t//Create a Radio Button\n"
"\t\tvar button1 = new Gtk.RadioButton (null);\n"
"\t\tbutton1.set_label (\"Button 1\");\n"
"\n"
"\t\t//Create a RadioButton with a label, and add it to the same group as button1.\n"
"\t\tvar button2 = new Gtk.RadioButton.with_label (button1.get_group(),\"Button 2\");\n"
"\n"
"\t\t//Create a RadioButton with a label, adding it to button1's group.\n"
"\t\tvar button3 = new Gtk.RadioButton.with_label_from_widget (button1, \"Button 3\");\n"
"\n"
"\t\t//Attach the buttons to a grid.\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.attach (button1, 0, 0, 1, 1);\n"
"\t\tgrid.attach (button2, 0, 1, 1, 1);\n"
"\t\tgrid.attach (button3, 0, 2, 1, 1);\n"
"\n"
"\t\t//Add the button to the window.\n"
"\t\tthis.add (grid);\n"
"\n"
"\t\t//Connect the signal handlers (aka. callback functions) to the buttons.\n"
"\t\tbutton1.toggled.connect (button_toggled_cb);\n"
"\t\tbutton2.toggled.connect (button_toggled_cb);\n"
"\t\tbutton3.toggled.connect (button_toggled_cb);\n"
"\t}\n"
"\n"
"\tvoid button_toggled_cb (Gtk.ToggleButton button)\n"
"\t{\n"
"\t\tvar state = \"unknown\";\n"
"\n"
"\t\tif (button.get_active ())\n"
"\t\t\tstate = \"on\";\n"
"\t\telse {\n"
"\t\t\tstate = \"off\";\n"
"\t\t\tprint (\"\\n\");\n"
"\t\t}\n"
"\t\tprint (button.get_label() + \" was turned \" + state + \"\\n\");\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t//Show all of the things.\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/radiobutton.vala.page:33
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.RadioButton.html\">Gtk."
"RadioButton</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.RadioButton.html\">Gtk."
"RadioButton</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/record-collection.js.page:70
msgctxt "_"
msgid ""
"external ref='media/record-collection.png' "
"md5='2d645997687ed5aacd36aafafc16e072'"
msgstr ""
"external ref='media/record-collection.png' "
"md5='2d645997687ed5aacd36aafafc16e072'"

#. (itstool) path: info/title
#: C/record-collection.js.page:8
msgctxt "text"
msgid "Record collection (JavaScript)"
msgstr "Συλλογή εγγραφών (JavaScript)"

#. (itstool) path: info/desc
#: C/record-collection.js.page:11
msgid "Create a small database application for ordering your music collection"
msgstr ""
"Δημιουργία μιας μικρής εφαρμογής βάσης δεδομένων για παραγγελία της μουσικής "
"σας συλλογής"

#. (itstool) path: page/title
#: C/record-collection.js.page:29
msgid "Record collection"
msgstr "Συλλογή εγγραφών"

#. (itstool) path: item/p
#: C/record-collection.js.page:34
msgid "How to connect to a database using libgda"
msgstr "Πώς να συνδεθείτε με μια βάση δεδομένων χρησιμοποιώντας libgda"

#. (itstool) path: item/p
#: C/record-collection.js.page:35
msgid "How to insert and browse records in a database table"
msgstr ""
"Πώς να εισάγετε και να περιηγηθείτε σε εγγραφές στον πίνακα βάσης δεδομένων"

#. (itstool) path: section/p
#: C/record-collection.js.page:41
msgid ""
"This demo uses the Javascript language. We are going to demonstrate how to "
"connect and use a database from a GTK program, by using the GDA (GNOME Data "
"Access) library. Thus you also need this library installed."
msgstr ""
"Αυτή η παρουσίαση χρησιμοποιεί τη γλώσσα Javascript. Πρόκειται να "
"παρουσιάσουμε πώς να συνδεθείτε και να χρησιμοποιήσετε μια βάση δεδομένων "
"από ένα πρόγραμμα GTK χρησιμοποιώντας τη βιβλιοθήκη GDA (πρόσβαση δεδομένων "
"GNOME). Έτσι χρειαζόσαστε επίσης αυτή τη βιβλιοθήκη εγκατεστημένη."

#. (itstool) path: section/p
#: C/record-collection.js.page:44
msgid ""
"GNOME Data Access (GDA) is library whose purpose is to provide universal "
"access to different kinds and types of data sources. This goes from "
"traditional relational database systems, to any imaginable kind of data "
"source such as a mail server, a LDAP directory, etc. For more information, "
"and for a full API and documentation, visit the <link href=\"http://library."
"gnome.org/devel/libgda/stable/\">GDA website</link>."
msgstr ""
"Η πρόσβαση δεδομένων GNOME (GDA) είναι βιβλιοθήκη της οποίας ο σκοπός είναι "
"να δώσει γενική πρόσβαση σε διαφορετικά είδη και τύπους πηγών δεδομένων. "
"Αυτό οδηγεί από παραδοσιακά σχεσιακά συστήματα βάσης δεδομένων, σε "
"οποιοδήποτε είδος πηγής δεδομένων, όπως εξυπηρετητή αλληλογραφίας, έναν "
"κατάλογο LDAP, κλπ. Για περισσότερες πληροφορίες και για πλήρες API και "
"τεκμηρίωση, επισκεφτείτε την <link href=\"http://library.gnome.org/devel/"
"libgda/stable/\">ιστότοπο GDA</link>."

#. (itstool) path: section/p
#: C/record-collection.js.page:47
msgid ""
"Although a big part of the code is related to user interface (GUI), we are "
"going to focus our tutorial on the database parts (we might mention other "
"parts we think are relevant though). To know more about Javascript programs "
"in GNOME, see the <link xref=\"image-viewer.js\">Image Viewer program</link> "
"tutorial."
msgstr ""
"Αν και ένα μεγάλο τμήμα του κώδικα συσχετίζεται με τη διεπαφή χρήστη (GUI), "
"πρόκειται να εστιάσουμε το μάθημά μας στα μέρη της βάσης δεδομένων (αν και "
"θα αναφερθούν άλλα μέρη που θεωρούνται σχετικά). Για να μάθετε περισσότερα "
"για τα προγράμματα JavaScript στο GNOME, δείτε το μάθημα <link xref=\"image-"
"viewer.js\">πρόγραμμα προβολέα εικόνας</link>."

#. (itstool) path: item/p
#: C/record-collection.js.page:60
msgid ""
"Choose <gui>Generic Javascript</gui> from the <gui>JS</gui> tab, click "
"<gui>Forward</gui>, and fill-out your details on the next few pages. Use "
"<file>record-collection</file> as project name and directory."
msgstr ""
"Επιλέξτε <gui>γενικό Javascript</gui> από την καρτέλα <gui>JS</gui>, πατήστε "
"<gui>Μπροστά</gui>, και συμπληρώστε τις λεπτομέρειές σας στις επόμενες λίγες "
"σελίδες. Χρησιμοποιήστε ως όνομα του έργου και του καταλόγου το <file>record-"
"collection</file>."

#. (itstool) path: item/p
#: C/record-collection.js.page:63
msgid ""
"Click <gui>Finished</gui> and the project will be created for you. Open "
"<file>src/main.js</file> from the <gui>Project</gui> or <gui>File</gui> "
"tabs. It contains very basic example code."
msgstr ""
"Πατήστε <gui>τελειωμένο</gui> και το έργο θα δημιουργηθεί για εσάς. Ανοίξτε "
"το <file>src/main.js</file> από τις καρτέλες <gui>έργο</gui> ή <gui>αρχείο</"
"gui>. Περιλαμβάνει πολύ απλό παράδειγμα κώδικα."

#. (itstool) path: section/title
#: C/record-collection.js.page:69
msgid "Program Structure"
msgstr "Δομή προγράμματος"

#. (itstool) path: section/p
#: C/record-collection.js.page:71
msgid ""
"This demo is a simple GTK application (with a single window) capable of "
"inserting records into a database table as well as browsing all records of "
"the table. The table has two fields: <code>id</code>, an integer, and "
"<code>name</code>, a varchar. The first section (on the top) of the "
"application allows you to insert a record into the table. The last section "
"(bottom) allows you to see all the records of that table. Its content is "
"refreshed every time a new record is inserted and on the application startup."
msgstr ""
"Αυτή η παρουσίαση είναι μια απλή εφαρμογή GTK (με μοναδικό παράθυρο) ικανό "
"να εισάγει εγγραφές στον πίνακα βάσης δεδομένων καθώς και περιήγηση όλων των "
"εγγραφών του πίνακα. Ο πίνακας έχει δύο πεδία: <code>id</code>, ένας "
"ακέραιος και <code>name</code>, έναν varchar. Η πρώτη ενότητα (στην κορυφή) "
"της εφαρμογής επιτρέπει την εισαγωγή εγγραφής στον πίνακα. Η τελευταία "
"ενότητα (πυθμένας) επιτρέπει να δείτε όλες τις εγγραφές αυτού του πίνακα. Το "
"περιεχόμενο του ανανεώνεται κάθε φορά που μια νέα εγγραφή εισάγεται και στην "
"εκκίνηση της εφαρμογής."

#. (itstool) path: section/title
#: C/record-collection.js.page:76
msgid "Starting the fun"
msgstr "Έναρξη της διασκέδασης"

#. (itstool) path: section/p
#: C/record-collection.js.page:77
msgid "Let's start by examining the skeleton of the program:"
msgstr "Ας αρχίσουμε εξετάζοντας τον σκελετό του προγράμματος:"

#. (itstool) path: section/code
#: C/record-collection.js.page:78
#, no-wrap
msgid ""
"\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Gda = imports.gi.Gda;\n"
"const Lang = imports.lang;\n"
"\n"
"function Demo () {\n"
"  this._init ();\n"
"}\n"
"\n"
"Demo.prototype = {\n"
"\n"
"  _init: function () {\n"
"    this.setupWindow ();\n"
"    this.setupDatabase ();\n"
"    this.selectData ();\n"
"  }\n"
"}\n"
"\n"
"Gtk.init (null, null);\n"
"\n"
"var demo = new Demo ();\n"
"\n"
"Gtk.main ();"
msgstr ""
"\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Gda = imports.gi.Gda;\n"
"const Lang = imports.lang;\n"
"\n"
"function Demo () {\n"
"  this._init ();\n"
"}\n"
"\n"
"Demo.prototype = {\n"
"\n"
"  _init: function () {\n"
"    this.setupWindow ();\n"
"    this.setupDatabase ();\n"
"    this.selectData ();\n"
"  }\n"
"}\n"
"\n"
"Gtk.init (null, null);\n"
"\n"
"var demo = new Demo ();\n"
"\n"
"Gtk.main ();"

#. (itstool) path: item/p
#: C/record-collection.js.page:103
msgid ""
"Lines 1‒4: Initial imports. Pay special attention to line 3, which tells "
"Javascript to import the GDA library, our focus in this tutorial."
msgstr ""
"Γραμμές 1-4: Αρχικές εισαγωγές. Δώστε ιδιαίτερη προσοχή στη γραμμή 3, που "
"λέει στη Javascript να εισάγει τη βιβλιοθήκη GDA, το επίκεντρο μας σε αυτό "
"το μάθημα."

#. (itstool) path: item/p
#: C/record-collection.js.page:104
msgid ""
"Lines 6‒17: Define our <code>Demo</code> class. Pay special attention to "
"lines 13‒15, where we call 3 methods which will do the whole job. They will "
"be detailed below."
msgstr ""
"Γραμμές 6-17: Ορίστε την κλάση μας <code>Demo</code>. Δώστε ιδιαίτερη "
"προσοχή στις γραμμές 13-15, όπου καλούμε 3 μεθόδους που θα κάνουν όλη τη "
"δουλειά. Αναλυτικά παρακάτω."

#. (itstool) path: item/p
#: C/record-collection.js.page:105
msgid "Lines 19‒23: Start the application."
msgstr "Γραμμές 19-23: έναρξη της εφαρμογής."

#. (itstool) path: section/title
#: C/record-collection.js.page:110
msgid "Designing the application"
msgstr "Σχεδιασμός της εφαρμογής"

#. (itstool) path: section/p
#: C/record-collection.js.page:111
msgid ""
"Let's take a look at the <code>setupWindow</code> method. It is responsible "
"for creating the User Interface (UI). As UI is not our focus, we will "
"explain only the relevant parts."
msgstr ""
"Ας ρίξουμε μια ματιά στη μέθοδο <code>setupWindow</code>. Είναι υπεύθυνη για "
"τη δημιουργία της διεπαφής χρήστη (UI). Καθώς η UI δεν είναι το επίκεντρο "
"μας, θα εξηγήσουμε μόνο τα σχετικά μέρη."

#. (itstool) path: section/code
#: C/record-collection.js.page:112
#, no-wrap
msgid ""
"\n"
"  setupWindow: function () {\n"
"    this.window = new Gtk.Window ({title: \"Data Access Demo\", height_request: 350});\n"
"    this.window.connect (\"delete-event\", function () {\n"
"      Gtk.main_quit();\n"
"      return true;\n"
"      });\n"
"\n"
"    // main box\n"
"    var main_box = new Gtk.Box ({orientation: Gtk.Orientation.VERTICAL, spacing: 5});\n"
"    this.window.add (main_box);\n"
"\n"
"    // first label\n"
"    var info1 = new Gtk.Label ({label: \"&lt;b&gt;Insert a record&lt;/b&gt;\", xalign: 0, use_markup: true});\n"
"    main_box.pack_start (info1, false, false, 5);\n"
"\n"
"    // \"insert a record\" horizontal box\n"
"    var insert_box = new Gtk.Box ({orientation: Gtk.Orientation.HORIZONTAL, spacing: 5});\n"
"    main_box.pack_start (insert_box, false, false, 5);\n"
"\n"
"    // ID field\n"
"    insert_box.pack_start (new Gtk.Label ({label: \"ID:\"}), false, false, 5);\n"
"    this.id_entry = new Gtk.Entry ();\n"
"    insert_box.pack_start (this.id_entry, false, false, 5);\n"
"\n"
"    // Name field\n"
"    insert_box.pack_start (new Gtk.Label ({label: \"Name:\"}), false, false, 5);\n"
"    this.name_entry = new Gtk.Entry ({activates_default: true});\n"
"    insert_box.pack_start (this.name_entry, true, true, 5);\n"
"\n"
"    // Insert button\n"
"    var insert_button = new Gtk.Button ({label: \"Insert\", can_default: true});\n"
"    insert_button.connect (\"clicked\", Lang.bind (this, this._insertClicked));\n"
"    insert_box.pack_start (insert_button, false, false, 5);\n"
"    insert_button.grab_default ();\n"
"\n"
"    // Browse textview\n"
"    var info2 = new Gtk.Label ({label: \"&lt;b&gt;Browse the table&lt;/b&gt;\", xalign: 0, use_markup: true});\n"
"    main_box.pack_start (info2, false, false, 5);\n"
"    this.text = new Gtk.TextView ({editable: false});\n"
"    var sw = new Gtk.ScrolledWindow ({shadow_type:Gtk.ShadowType.IN});\n"
"    sw.add (this.text);\n"
"    main_box.pack_start (sw, true, true, 5);\n"
"\n"
"    this.count_label = new Gtk.Label ({label: \"\", xalign: 0, use_markup: true});\n"
"    main_box.pack_start (this.count_label, false, false, 0);\n"
"\n"
"    this.window.show_all ();\n"
"  },"
msgstr ""
"\n"
"  setupWindow: function () {\n"
"    this.window = new Gtk.Window ({title: \"Data Access Demo\", height_request: 350});\n"
"    this.window.connect (\"delete-event\", function () {\n"
"      Gtk.main_quit();\n"
"      return true;\n"
"      });\n"
"\n"
"    // Κύριο πλαίσιο\n"
"    var main_box = new Gtk.Box ({orientation: Gtk.Orientation.VERTICAL, spacing: 5});\n"
"    this.window.add (main_box);\n"
"\n"
"    // Πρώτη ετικέτα\n"
"    var info1 = new Gtk.Label ({label: \"&lt;b&gt;Insert a record&lt;/b&gt;\", xalign: 0, use_markup: true});\n"
"    main_box.pack_start (info1, false, false, 5);\n"
"\n"
"    // Οριζόντιο πλαίσιο \"insert a record\" \n"
"    var insert_box = new Gtk.Box ({orientation: Gtk.Orientation.HORIZONTAL, spacing: 5});\n"
"    main_box.pack_start (insert_box, false, false, 5);\n"
"\n"
"    // Πεδίο αναγνωριστικού\n"
"    insert_box.pack_start (new Gtk.Label ({label: \"ID:\"}), false, false, 5);\n"
"    this.id_entry = new Gtk.Entry ();\n"
"    insert_box.pack_start (this.id_entry, false, false, 5);\n"
"\n"
"    // Πεδίο ονόματος\n"
"    insert_box.pack_start (new Gtk.Label ({label: \"Name:\"}), false, false, 5);\n"
"    this.name_entry = new Gtk.Entry ({activates_default: true});\n"
"    insert_box.pack_start (this.name_entry, true, true, 5);\n"
"\n"
"    // Πλήκτρο εισαγωγής\n"
"    var insert_button = new Gtk.Button ({label: \"Insert\", can_default: true});\n"
"    insert_button.connect (\"clicked\", Lang.bind (this, this._insertClicked));\n"
"    insert_box.pack_start (insert_button, false, false, 5);\n"
"    insert_button.grab_default ();\n"
"\n"
"    // Προβολή κειμένου περιήγησης\n"
"    var info2 = new Gtk.Label ({label: \"&lt;b&gt;Browse the table&lt;/b&gt;\", xalign: 0, use_markup: true});\n"
"    main_box.pack_start (info2, false, false, 5);\n"
"    this.text = new Gtk.TextView ({editable: false});\n"
"    var sw = new Gtk.ScrolledWindow ({shadow_type:Gtk.ShadowType.IN});\n"
"    sw.add (this.text);\n"
"    main_box.pack_start (sw, true, true, 5);\n"
"\n"
"    this.count_label = new Gtk.Label ({label: \"\", xalign: 0, use_markup: true});\n"
"    main_box.pack_start (this.count_label, false, false, 0);\n"
"\n"
"    this.window.show_all ();\n"
"  },"

#. (itstool) path: item/p
#: C/record-collection.js.page:162
msgid ""
"Lines 22 and 27: Create the 2 entries (for the two fields) in which users "
"will type something to get inserted in the database."
msgstr ""
"Γραμμές 22 και 27: δημιουργία των 2 καταχωρίσεων (για τα δύο πεδία) στα "
"οποία οι χρήστες θα πληκτρολογήσουν κάτι για να εισαχθεί στη βάση δεδομένων."

#. (itstool) path: item/p
#: C/record-collection.js.page:163
msgid ""
"Lines 31‒34: Create the Insert button. We connect its <code>clicked</code> "
"signal to the <code>_insertClicked</code> private method of the class. This "
"method is detailed below."
msgstr ""
"Γραμμές 31-34: δημιουργία του κουμπιού εισαγωγής. Συνδέουμε το σήμα του "
"<code>clicked</code> στην ιδιωτική μέθοδο <code>_insertClicked</code> της "
"κλάσης. Αυτή η μέθοδος αναλύεται παρακάτω."

#. (itstool) path: item/p
#: C/record-collection.js.page:164
msgid ""
"Line 39: Create the widget (<code>TextView</code>) where we will show the "
"contents of the table."
msgstr ""
"Γραμμή 39: δημιουργία του γραφικού στοιχείου (<code>TextView</code>) όπου "
"θα εμφανίσουμε τα περιεχόμενα του πίνακα."

#. (itstool) path: item/p
#: C/record-collection.js.page:165
msgid ""
"Line 44: Create the label where we will show the number of records in the "
"table. Initially it's empty, it will be updated later."
msgstr ""
"Γραμμή 44: δημιουργία της ετικέτας όπου θα εμφανιστεί ο αριθμός των εγγραφών "
"στον πίνακα. Αρχικά είναι άδειος, θα ενημερωθεί αργότερα."

#. (itstool) path: section/title
#: C/record-collection.js.page:170
msgid "Connecting to and initializing the database"
msgstr "Σύνδεση και αρχικοποίηση με τη βάση δεδομένων"

#. (itstool) path: section/p
#: C/record-collection.js.page:171
msgid ""
"The code which makes the connection to the database is in the "
"<code>setupDatabase</code> method below:"
msgstr ""
"Ο κώδικας που κάνει τη σύνδεση στη βάση δεδομένων είναι στην παρακάτω μέθοδο "
"<code>setupDatabase</code>:"

#. (itstool) path: section/code
#: C/record-collection.js.page:174
#, no-wrap
msgid ""
"\n"
"  setupDatabase: function () {\n"
"    this.connection = new Gda.Connection ({provider: Gda.Config.get_provider(\"SQLite\"),\n"
"                                          cnc_string:\"DB_DIR=\" + GLib.get_home_dir () + \";DB_NAME=gnome_demo\"});\n"
"    this.connection.open ();\n"
"\n"
"    try {\n"
"      var dm = Gda.execute_select_command (this.connection, \"select * from demo\");\n"
"    } catch (e) {\n"
"      Gda.execute_non_select_command (this.connection, \"create table demo (id integer, name varchar(100))\");\n"
"    }\n"
"  },"
msgstr ""
"\n"
"  setupDatabase: function () {\n"
"    this.connection = new Gda.Connection ({provider: Gda.Config.get_provider(\"SQLite\"),\n"
"                                          cnc_string:\"DB_DIR=\" + GLib.get_home_dir () + \";DB_NAME=gnome_demo\"});\n"
"    this.connection.open ();\n"
"\n"
"    try {\n"
"      var dm = Gda.execute_select_command (this.connection, \"select * from demo\");\n"
"    } catch (e) {\n"
"      Gda.execute_non_select_command (this.connection, \"create table demo (id integer, name varchar(100))\");\n"
"    }\n"
"  },"

#. (itstool) path: item/p
#: C/record-collection.js.page:188
msgid ""
"Lines 2‒3: Create the GDA's <code>Connection</code> object. We must supply "
"to its constructor some properties:"
msgstr ""
"Γραμμές 2-3: δημιουργία του αντικειμένου της GDA <code>Connection</code>. "
"Πρέπει να δώσουμε στον κατασκευαστή μερικές ιδιότητες:"

#. (itstool) path: item/p
#: C/record-collection.js.page:191
msgid ""
"<code>provider</code>: One of GDA's supported providers. GDA supports "
"SQLite, MySQL, PostgreSQL, Oracle and many others. For demo purposes we will "
"use a SQLite database, as it comes installed by default in most "
"distributions and it is simple to use (it just uses a file as a database)."
msgstr ""
"<code>provider</code>: Ένας από τους υποστηριζόμενους παρόχους. Το GDA "
"υποστηρίζει SQLite, MySQL, PostgreSQL, Oracle και πολλούς άλλους. Για τους "
"σκοπούς της παρουσίασης θα χρησιμοποιήσουμε τη βάση δεδομένων SQLite, επειδή "
"εγκαθίσταται από προεπιλογή στις περισσότερες διανομές και είναι απλή στη "
"χρήση (χρησιμοποιεί απλά ένα αρχείο ως βάση δεδομένων)."

#. (itstool) path: item/p
#: C/record-collection.js.page:194
msgid ""
"<code>cnc_string</code>: The connection string. It may change from provider "
"to provider. The syntax for SQLite is: <code>DB_DIR=<var>PATH</var>;"
"DB_NAME=<var>FILENAME</var></code>. In this demo we are accessing a database "
"called gnome_demo in the user home dir (note the call to GLib's "
"<code>get_home_dir</code> function)."
msgstr ""
"<code>cnc_string</code>: Η συμβολοσειρά σύνδεσης. Μπορεί να αλλάζει από "
"πάροχο σε πάροχο. Η σύνταξη για το SQLite είναι: <code>DB_DIR=<var>PATH</"
"var>;DB_NAME=<var>FILENAME</var></code>. Σε αυτή την παρουσίαση "
"προσπελάζουμε μια βάση δεδομένων που λέγεται gnome_demo στον προσωπικό "
"κατάλογο χρήστη (σημειώστε την κλήση στη συνάρτηση .GLib's "
"<code>get_home_dir</code>)."

#. (itstool) path: note/p
#: C/record-collection.js.page:198
msgid ""
"If the provider is not supported by GDA, or if the connection string is "
"missing some element, line 2 will raise an exception. So, in real life we "
"should handle it with JavaScript's statement <code>try</code>...<code>catch</"
"code>."
msgstr ""
"Εάν ο πάροχος δεν υποστηρίζεται από GDA, ή εάν λείπει στη συμβολοσειρά "
"σύνδεσης κάποιο στοιχείο, η γραμμή 2 θα εγείρει μια εξαίρεση. Έτσι, στην "
"πραγματική ζωή θα το χειριστούμε με μια πρόταση της JavaScript <code>try</"
"code>...<code>catch</code>."

#. (itstool) path: item/p
#: C/record-collection.js.page:202
msgid ""
"Line 4: Open the connection. In the SQLite provider, if the database does "
"not exist, it will be created in this step."
msgstr ""
"Γραμμή 4: άνοιγμα της σύνδεσης. Στον πάροχο SQLite, εάν η βάση δεδομένων δεν "
"υπάρχει, θα δημιουργηθεί σε αυτό το βήμα."

#. (itstool) path: item/p
#: C/record-collection.js.page:204
msgid ""
"Lines 6‒10: Try to do a simple select to check if the table exists (line 7). "
"If it does not exist (because the database was just created), this command "
"will raise an exception, which is handled by the <code>try</code>..."
"<code>catch</code> block. If it is the case, we run the create table "
"statement (line 9)."
msgstr ""
"Γραμμές 6-10: Προσπαθήστε να κάνετε μια απλή επιλογή για έλεγχο ύπαρξης του "
"πίνακα (γραμμή 7). Εάν δεν υπάρχει (επειδή η βάση δεδομένων μόλις "
"δημιουργήθηκε), αυτή η εντολή θα εγείρει μια εξαίρεση, που επεξεργάζεται από "
"την ομάδα <code>try</code>...<code>catch</code>. Εάν συμβαίνει αυτό, "
"τρέχουμε τη δημιουργία πρότασης πίνακα (γραμμή 9)."

#. (itstool) path: item/p
#: C/record-collection.js.page:205
msgid ""
"In order to run the SQL commands above we are using global GDA functions, "
"<code>execute_select_command</code> and <code>execute_non_select_command</"
"code>. They are simple to use, and just require two arguments: The "
"<code>Connection</code> object and the SQL command to be parsed."
msgstr ""
"Για την εκτέλεση των παραπάνω εντολών SQL χρησιμοποιούμε τις γενικές "
"συναρτήσεις GDA, <code>execute_select_command</code> και "
"<code>execute_non_select_command</code>. Είναι απλές στη χρήση και απαιτούν "
"μόνο δύο ορίσματα: Το αντικείμενο <code>Connection</code> και την εντολή SQL "
"να αναλυθεί."

#. (itstool) path: section/p
#: C/record-collection.js.page:209
msgid "At this point we have the database set up, and are ready to use it."
msgstr ""
"Σε αυτό το σημείο έχουμε ρυθμίσει τη βάση δεδομένων και είμαστε έτοιμοι να "
"τη χρησιμοποιήσουμε."

#. (itstool) path: section/title
#: C/record-collection.js.page:213
msgid "Selecting"
msgstr "Επιλογή"

#. (itstool) path: section/p
#: C/record-collection.js.page:214
msgid ""
"After connecting to the database, our demo's constructor calls the "
"<code>selectData</code> method. It is responsible for getting all the "
"records in the table and showing them on the <code>TextView</code> widget. "
"Let's take a look at it:"
msgstr ""
"Μετά την σύνδεση με τη βάση δεδομένων, ο κατασκευαστής της παρουσίασής μας "
"καλεί τη μέθοδο<code>selectData</code>. Είναι υπεύθυνη για τη λήψη όλων των "
"εγγραφών στον πίνακα και την εμφάνισή τους στο γραφικό στοιχείο "
"<code>TextView</code>. Ας ρίξουμε μια ματιά σε αυτό:"

#. (itstool) path: section/code
#: C/record-collection.js.page:217
#, no-wrap
msgid ""
"\n"
"  selectData: function () {\n"
"    var dm = Gda.execute_select_command (this.connection, \"select * from demo order by 1, 2\");\n"
"    var iter = dm.create_iter ();\n"
"\n"
"    var text = \"\";\n"
"\n"
"    while (iter.move_next ()) {\n"
"      var id_field = Gda.value_stringify (iter.get_value_at (0));\n"
"      var name_field = Gda.value_stringify (iter.get_value_at (1));\n"
"\n"
"      text += id_field + \"\\t=&gt;\\t\" + name_field + '\\n';\n"
"    }\n"
"\n"
"    this.text.buffer.text = text;\n"
"    this.count_label.label = \"&lt;i&gt;\" + dm.get_n_rows () + \" record(s)&lt;/i&gt;\";\n"
"  },"
msgstr ""
"\n"
"  selectData: function () {\n"
"    var dm = Gda.execute_select_command (this.connection, \"select * from demo order by 1, 2\");\n"
"    var iter = dm.create_iter ();\n"
"\n"
"    var text = \"\";\n"
"\n"
"    while (iter.move_next ()) {\n"
"      var id_field = Gda.value_stringify (iter.get_value_at (0));\n"
"      var name_field = Gda.value_stringify (iter.get_value_at (1));\n"
"\n"
"      text += id_field + \"\\t=&gt;\\t\" + name_field + '\\n';\n"
"    }\n"
"\n"
"    this.text.buffer.text = text;\n"
"    this.count_label.label = \"&lt;i&gt;\" + dm.get_n_rows () + \" record(s)&lt;/i&gt;\";\n"
"  },"

#. (itstool) path: item/p
#: C/record-collection.js.page:235
msgid ""
"Line 2: The <code>SELECT</code> command. We are using the global GDA's "
"function <code>execute_select_command</code> for that. It returns a "
"<code>DataModel</code> object, which is later used to retrieve the rows."
msgstr ""
"Γραμμή 2: Η εντολή <code>SELECT</code>. Χρησιμοποιούμε τη γενική συνάρτηση "
"του GDA <code>execute_select_command</code> για αυτό. Επιστρέφει ένα "
"αντικείμενο <code>DataModel</code>, που χρησιμοποιείται αργότερα για "
"ανάκτηση των γραμμών."

#. (itstool) path: item/p
#: C/record-collection.js.page:236
msgid ""
"Line 3: Create an <code>Iter</code> object, which is used to iterate over "
"the <code>DataModel</code>'s records."
msgstr ""
"Γραμμή 3: Δημιουργία αντικειμένου <code>Iter</code>, που χρησιμοποιείται για "
"επανάληψη στις εγγραφές του <code>DataModel</code>."

#. (itstool) path: item/p
#: C/record-collection.js.page:237
msgid ""
"Line 7: Loop through all the records, fetching them with the help of the "
"<code>Iter</code> object. At this point, the <code>iter</code> variable "
"contains the actual, retrieved data. Its <code>move_next</code> method "
"returns <code>false</code> when it reaches the last record."
msgstr ""
"Γραμμή 7: Βρόχος μέσα από όλες τις εγγραφές, φέρνοντας τες με τη βοήθεια του "
"αντικειμένου <code>Iter</code>. Σε αυτό το σημείο, η μεταβλητή <code>iter</"
"code> περιέχει τα ενεργά ανακτημένα δεδομένα. Η μέθοδος του <code>move_next</"
"code> επιστρέφει <code>false</code> όταν φτάνει την τελευταία εγγραφή."

#. (itstool) path: item/p
#: C/record-collection.js.page:239
msgid "Lines 8‒9: We do two things in each line:"
msgstr "Γραμμές 8-9: Κάνουμε δυο πράγματα σε κάθε γραμμή:"

#. (itstool) path: item/p
#: C/record-collection.js.page:241
msgid ""
"Use <code>Iter</code>'s method <code>get_value_at</code>, which requires "
"only one argument: the column number to retrieve, starting at 0. As our "
"<code>SELECT</code> command returns only two columns, we are retrieving "
"columns 0 and 1."
msgstr ""
"Χρήση της μεθόδου του <code>Iter</code> <code>get_value_at</code>, που "
"απαιτεί μόνο ένα όρισμα: ο αριθμός της στήλης για ανάκτηση, που ξεκινά από "
"0. Καθώς η εντολή μας <code>SELECT</code> επιστρέφει μόνο δύο στήλες, "
"ανακτούμε τις στήλες 0 και 1."

#. (itstool) path: item/p
#: C/record-collection.js.page:242
msgid ""
"The method <code>get_value_at</code> returns the field in GLib's "
"<code>GValue</code> format. A simple way to convert this format to a string "
"is by using GDA's global function <code>value_stringify</code>. That's what "
"we are doing here, and we store the results in the variables <code>id_field</"
"code> and <code>name_field</code>."
msgstr ""
"Η μέθοδος <code>get_value_at</code> επιστρέφει το πεδίο σε μορφή "
"<code>GValue</code> του GLib. Ένας απλός τρόπος μετατροπής αυτής της μορφής "
"σε συμβολοσειρά είναι χρησιμοποιώντας τη γενική συνάρτηση του GDA "
"<code>value_stringify</code>. Αυτό κάνουμε εδώ και αποθηκεύουμε τα "
"αποτελέσματα στις μεταβλητές <code>id_field</code> και <code>name_field</"
"code>."

#. (itstool) path: item/p
#: C/record-collection.js.page:245
msgid ""
"Line 11: Concatenate the two fields to make one text line, separated by "
"<code>\"=&gt;\"</code>, and store it in the <code>text</code> variable."
msgstr ""
"Γραμμή 11: Συνένωση των δύο πεδίων για τη δημιουργία μιας γραμμής κειμένου, "
"διαχωριζόμενης με <code>\"=&gt;\"</code> και αποθήκευση της στη μεταβλητή "
"<code>text</code>."

#. (itstool) path: item/p
#: C/record-collection.js.page:246
msgid ""
"Line 14: After the loop is finished, we have all the records formatted in "
"the <code>text</code> variable. In this line we just set the contents of the "
"<code>TextView</code> with that variable."
msgstr ""
"Γραμμή 14: Μετά το τέλος του βρόχου, έχουμε όλες τις μορφοποιημένες εγγραφές "
"στη μεταβλητή <code>text</code>. Σε αυτή τη γραμμή ορίζουμε μόνο τα "
"περιεχόμενα του <code>TextView</code> με αυτή τη μεταβλητή."

#. (itstool) path: item/p
#: C/record-collection.js.page:247
msgid ""
"Line 15: Display the number of records in the table, making use of the "
"<code>DataModel</code>'s <code>get_n_rows</code> method."
msgstr ""
"Γραμμή 15: Εμφάνιση του αριθμού των εγγραφών στον πίνακα, χρησιμοποιώντας τη "
"μέθοδο <code>get_n_rows</code> του <code>DataModel</code>."

#. (itstool) path: section/title
#: C/record-collection.js.page:252
msgid "Inserting"
msgstr "Εισαγωγή"

#. (itstool) path: section/p
#: C/record-collection.js.page:253
msgid ""
"OK, we know how to connect to a database and how to select rows from a "
"table. Now it's time to do an <code>INSERT</code> on the table. Do you "
"remember above, in the method <code>setupWindow</code> we connected the "
"<gui>Insert</gui> button's <code>clicked</code> signal to the method "
"<code>_insertClicked</code>? Let's see the implementation of this method."
msgstr ""
"Εντάξει, ξέρουμε πώς να συνδεθούμε με μια βάση δεδομένων και πώς να "
"διαλέξουμε γραμμές από έναν πίνακα. Τώρα είναι ώρα να κάνουμε έναν "
"<code>INSERT</code> στον πίνακα. Θυμόσαστε παραπάνω, στη μέθοδο "
"<code>setupWindow</code> συνδέσαμε το <gui>Insert</gui> του κουμπιού με το "
"σήμα <code>clicked</code> στη μέθοδο <code>_insertClicked</code>; Ας δούμε "
"την υλοποίηση αυτής της μεθόδου."

#. (itstool) path: section/code
#: C/record-collection.js.page:256
#, no-wrap
msgid ""
"\n"
"  _insertClicked: function () {\n"
"    if (!this._validateFields ())\n"
"      return;\n"
"\n"
"    // Gda.execute_non_select_command (this.connection,\n"
"    //   \"insert into demo values ('\" + this.id_entry.text + \"', '\" + this.name_entry.text + \"')\");\n"
"\n"
"    var b = new Gda.SqlBuilder ({stmt_type:Gda.SqlStatementType.INSERT});\n"
"    b.set_table (\"demo\");\n"
"    b.add_field_value_as_gvalue (\"id\", this.id_entry.text);\n"
"    b.add_field_value_as_gvalue (\"name\", this.name_entry.text);\n"
"    var stmt = b.get_statement ();\n"
"    this.connection.statement_execute_non_select (stmt, null);\n"
"\n"
"    this._clearFields ();\n"
"    this.selectData ();\n"
"  },"
msgstr ""
"\n"
"  _insertClicked: function () {\n"
"    if (!this._validateFields ())\n"
"      return;\n"
"\n"
"    // Gda.execute_non_select_command (this.connection,\n"
"    //   \"insert into demo values ('\" + this.id_entry.text + \"', '\" + this.name_entry.text + \"')\");\n"
"\n"
"    var b = new Gda.SqlBuilder ({stmt_type:Gda.SqlStatementType.INSERT});\n"
"    b.set_table (\"demo\");\n"
"    b.add_field_value_as_gvalue (\"id\", this.id_entry.text);\n"
"    b.add_field_value_as_gvalue (\"name\", this.name_entry.text);\n"
"    var stmt = b.get_statement ();\n"
"    this.connection.statement_execute_non_select (stmt, null);\n"
"\n"
"    this._clearFields ();\n"
"    this.selectData ();\n"
"  },"

#. (itstool) path: section/p
#: C/record-collection.js.page:274
msgid ""
"We have learned how to use GDA's convenience functions "
"<code>execute_select_command</code> and <code>execute_non_select_command</"
"code> to quickly execute SQL commands on the database. GDA allows one to "
"build a SQL statement indirectly, by using its <code>SqlBuilder</code> "
"object. What are the benefits of this? GDA will generate the SQL statement "
"dynamically, and it will be valid for the connection provider used (it will "
"use the same SQL dialect the provider uses). Let's study the code:"
msgstr ""
"Μάθαμε τη χρήση των συναρτήσεων ευκολίας του GDA "
"<code>execute_select_command</code> και <code>execute_non_select_command</"
"code> για γρήγορη εκτέλεση εντολών SQL στη βάση δεδομένων. Το GDA επιτρέπει "
"την κατασκευή μιας πρότασης SQL έμμεσα, χρησιμοποιώντας το αντικείμενο του "
"<code>SqlBuilder</code>. Ποια είναι τα οφέλη του; GDA θα παράξει την πρόταση "
"SQL δυναμικά και θα επικυρωθεί για τον χρησιμοποιούμενο πάροχο σύνδεσης (θα "
"χρησιμοποιήσει την ίδια διάλεκτο SQL που χρησιμοποιεί ο πάροχος). Ας "
"μελετήσουμε τον κώδικα:"

#. (itstool) path: item/p
#: C/record-collection.js.page:278
msgid ""
"Lines 2‒3: Check if the user filled all the fields. The code for the private "
"method <code>_validateFields</code> is really simple and you can read it in "
"the full demo source code."
msgstr ""
"Γραμμές 2-3: Ελέγξτε εάν ο χρήστης συμπλήρωσε όλα τα πεδία. Ο κώδικας για "
"την ιδιωτική μέθοδο <code>_validateFields</code> είναι πραγματικά απλός και "
"μπορείτε να τον διαβάσετε στην πλήρη παρουσίαση πηγαίου κώδικα."

#. (itstool) path: item/p
#: C/record-collection.js.page:279
msgid ""
"Line 5: The faster way of doing the <code>INSERT</code>. It's commented out "
"as we want to show how to use the <code>SqlBuilder</code> object to build a "
"SQL statement portable across databases."
msgstr ""
"Γραμμή 5: Ο γρηγορότερος τρόπος για εκτέλεση του <code>INSERT</code>. "
"Σχολιάζεται, καθώς θέλουμε να εμφανίσουμε τη χρήση του αντικειμένου "
"<code>SqlBuilder</code> για κατασκευή μιας πρότασης SQL φορητής μέσα από τις "
"βάσεις δεδομένων."

#. (itstool) path: item/p
#: C/record-collection.js.page:280
msgid ""
"Line 7: Create the <code>SqlBuilder</code> object. We must pass the type of "
"statement we are going to build. It can be <code>SELECT</code>, "
"<code>UPDATE</code>, <code>INSERT</code> or <code>DELETE</code>."
msgstr ""
"Γραμμή 7: Δημιουργία του αντικειμένου <code>SqlBuilder</code>. Πρέπει να "
"περάσουμε τον τύπο της πρότασης που πρόκειται να κατασκευάσουμε. Μπορεί να "
"είναι <code>SELECT</code>, <code>UPDATE</code>, <code>INSERT</code> ή "
"<code>DELETE</code>."

#. (itstool) path: item/p
#: C/record-collection.js.page:281
msgid ""
"Line 8: Set the name of the table on which the built statement will operate "
"(it will generate <code>INSERT INTO demo</code>)"
msgstr ""
"Γραμμή 8: Ορισμός του ονόματος του πίνακα στον οποίο η κατασκευασμένη "
"πρόταση θα λειτουργήσει (θα παράξει <code>INSERT INTO demo</code>)"

#. (itstool) path: item/p
#: C/record-collection.js.page:282
msgid ""
"Lines 9‒10: Set the fields and its values that will be part of the "
"statement. The first argument is the field name (as in the table). The "
"second one is the value for that field."
msgstr ""
"Γραμμές 9-10: Ορισμός των πεδίων και των τιμών τους που θα είναι τμήμα της "
"πρότασης. Το πρώτο όρισμα είναι το όνομα πεδίου (όπως στον πίνακα). Το "
"δεύτερο όρισμα είναι η τιμή για αυτό το πεδίο."

#. (itstool) path: item/p
#: C/record-collection.js.page:283
msgid ""
"Line 11: Get the dynamically generated <code>Statement</code> object, which "
"represents a SQL statement."
msgstr ""
"Γραμμή 11: Λήψη του δυναμικά δημιουργημένου αντικειμένου <code>Statement</"
"code>, που αντιπροσωπεύει μια πρόταση SQL."

#. (itstool) path: item/p
#: C/record-collection.js.page:284
msgid "Line 12: Finally, execute the SQL statement (<code>INSERT</code>)."
msgstr "Γραμμή 12: Τελικά, εκτέλεση της πρότασης SQL (<code>INSERT</code>)."

#. (itstool) path: item/p
#: C/record-collection.js.page:285
msgid ""
"Line 14: Clear the id and name fields on the screen. The code for the "
"private method <code>_clearFields</code> is really simple and you can read "
"it in the full demo source code."
msgstr ""
"Γραμμή 14: Ελέγξτε την ταυτότητα και πεδία ονομάτων στην οθόνη. Ο κώδικας "
"για την ιδιωτική μέθοδο <code>_validateFields</code> είναι πραγματικά απλός "
"και μπορείτε να τον διαβάσετε στην πλήρη παρουσίαση πηγαίου κώδικα."

#. (itstool) path: item/p
#: C/record-collection.js.page:286
msgid ""
"Line 15: Refresh the view on the screen by doing another <code>SELECT</code>."
msgstr ""
"Γραμμή 15: Ανανέωση της προβολής στην οθόνη κάνοντας ένα άλλο <code>SELECT</"
"code>."

#. (itstool) path: note/p
#: C/record-collection.js.page:288
msgid ""
"You can also make use of parameters while building the statement. By using "
"the <code>SqlBuilder</code> objects and parameters you are less subject to "
"attacks like SQL injection. Check the <link href=\"http://library.gnome.org/"
"devel/libgda/stable/\">GDA documentation</link> for more information about "
"parameters."
msgstr ""
"Μπορείτε επίσης να χρησιμοποιήσετε παραμέτρους ενώ κατασκευάζετε την "
"πρόταση. Χρησιμοποιώντας τα αντικείμενα <code>SqlBuilder</code> και "
"παραμέτρους υφίστασθε λιγότερες επιθέσεις όπως ενέσεις SQL. Σημειώστε το "
"<link href=\"http://library.gnome.org/devel/libgda/stable/\">τεκμηρίωση GDA</"
"link> για περισσότερες πληροφορίες σχετικά με τις παραμέτρους."

#. (itstool) path: section/p
#: C/record-collection.js.page:293
msgid ""
"All of the code you need should now be in place, so try running the code. "
"You now have a database for your record collection!"
msgstr ""
"Όλος ο απαιτούμενος κώδικας πρέπει να είναι τώρα στη θέση, έτσι προσπαθήστε "
"να τρέξετε τον κώδικα. Έχετε τώρα μια βάση δεδομένων για τη συλλογής σας των "
"εγγραφών!"

#. (itstool) path: section/p
#: C/record-collection.js.page:298
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"record-collection/record-collection.js\">reference code</link>."
msgstr ""
"Αν αντιμετωπίσετε πρόβλημα με το μάθημα, συγκρίνετε τον κώδικά σας με αυτόν "
"τον <link href=\"record-collection/record-collection.js\">κώδικα αναφοράς</"
"link>."

#. (itstool) path: page/title
#: C/response-type.page:17
msgid "enum ResponseType"
msgstr "απαρίθμηση ResponseType"

#. (itstool) path: item/title
#: C/response-type.page:21
msgid "ResponseType.NONE = -1"
msgstr "ResponseType.NONE = -1"

#. (itstool) path: item/p
#: C/response-type.page:22
msgid ""
"Returned if an action widget has no response id, or if the dialog gets "
"programmatically hidden or destroyed"
msgstr ""
"Επιστρέφεται αν ένα γραφικό στοιχείο ενέργειας δεν έχει αναγνωριστικό "
"απάντησης, ή αν ο διάλογος κρύβεται ή καταστρέφεται προγραμματιστικά"

#. (itstool) path: item/title
#: C/response-type.page:25
msgid "ResponseType.REJECT = -2"
msgstr "ResponseType.REJECT = -2"

#. (itstool) path: item/p
#: C/response-type.page:26 C/response-type.page:30
msgid "Generic response id, not used by GTK+ dialogs"
msgstr ""
"Γενικό αναγνωριστικό απάντησης, που δεν χρησιμοποιείται από διαλόγους GTK+"

#. (itstool) path: item/title
#: C/response-type.page:29
msgid "ResponseType.ACCEPT = -3"
msgstr "ResponseType.ACCEPT = -3"

#. (itstool) path: item/title
#: C/response-type.page:33
msgid "ResponseType.DELETE_EVENT = -4"
msgstr "ResponseType.DELETE_EVENT = -4"

#. (itstool) path: item/p
#: C/response-type.page:34
msgid "Returned if the dialog is deleted"
msgstr "Επιστρέφεται αν ο διάλογος διαγραφεί"

#. (itstool) path: item/title
#: C/response-type.page:37
msgid "ResponseType.OK = -5"
msgstr "ResponseType.OK = -5"

#. (itstool) path: item/p
#: C/response-type.page:38
msgid "Returned by OK buttons in GTK+ dialogs"
msgstr "Επιστρέφεται από πλήκτρα ΕΝΤΑΞΕΙ σε διαλόγους GTK+"

#. (itstool) path: item/title
#: C/response-type.page:41
msgid "ResponseType.CANCEL = -6"
msgstr "ResponseType.CANCEL = -6"

#. (itstool) path: item/p
#: C/response-type.page:42
msgid "Returned by Cancel buttons in GTK+ dialogs"
msgstr "Επιστρέφεται από πλήκτρα ακύρωσης σε διαλόγους GTK+"

#. (itstool) path: item/title
#: C/response-type.page:45
msgid "ResponseType.CLOSE = -7"
msgstr "ResponseType.CLOSE = -7"

#. (itstool) path: item/p
#: C/response-type.page:46
msgid "Returned by Close buttons in GTK+ dialogs"
msgstr "Επιστρέφεται από πλήκτρα Κλεισίματος σε διαλόγους GTK+"

#. (itstool) path: item/title
#: C/response-type.page:49
msgid "ResponseType.YES = -8"
msgstr "ResponseType.YES = -8"

#. (itstool) path: item/p
#: C/response-type.page:50
msgid "Returned by Yes buttons in GTK+ dialogs"
msgstr "Επιστρέφεται από πλήκτρα Ναι σε διαλόγους GTK+"

#. (itstool) path: item/title
#: C/response-type.page:53
msgid "ResponseType.NO = -9"
msgstr "ResponseType.NO = -9"

#. (itstool) path: item/p
#: C/response-type.page:54
msgid "Returned by No buttons in GTK+ dialogs"
msgstr "Επιστρέφεται από πλήκτρα Όχι σε διαλόγους GTK+"

#. (itstool) path: item/title
#: C/response-type.page:57
msgid "ResponseType.APPLY = -10"
msgstr "ResponseType.APPLY = -10"

#. (itstool) path: item/p
#: C/response-type.page:58
msgid "Returned by Apply buttons in GTK+ dialogs"
msgstr "Επιστρέφεται από πλήκτρα εφαρμογής σε διαλόγους GTK+"

#. (itstool) path: item/title
#: C/response-type.page:61
msgid "ResponseType.HELP = -11"
msgstr "ResponseType.HELP = -11"

#. (itstool) path: item/p
#: C/response-type.page:62
msgid "Returned by Help buttons in GTK+ dialogs"
msgstr "Επιστρέφεται από πλήκτρα βοήθειας σε διαλόγους GTK+"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/scale.c.page:25
msgctxt "_"
msgid "external ref='media/scale2.png' md5='ae2ba0a6675f3d9cdcd961cdf32f1a5c'"
msgstr "external ref='media/scale2.png' md5='ae2ba0a6675f3d9cdcd961cdf32f1a5c'"

#. (itstool) path: info/title
#: C/scale.c.page:8
msgctxt "text"
msgid "Scale (C)"
msgstr "Κλίμακα (C)"

#. (itstool) path: info/desc
#: C/scale.c.page:20 C/scale.py.page:20 C/scale.vala.page:20
msgid "A slider widget for selecting a value from a range"
msgstr ""
"Ένας ολισθητής γραφικού στοιχείου για επιλογή μιας τιμής από μια περιοχή"

#. (itstool) path: page/title
#: C/scale.c.page:23 C/scale.js.page:21 C/scale.py.page:23
#: C/scale.vala.page:23
msgid "Scale"
msgstr "Κλίμακα"

#. (itstool) path: page/p
#: C/scale.c.page:26 C/scale.py.page:25 C/scale.vala.page:25
msgid "Slide the scales!"
msgstr "Ολίσθηση των κλιμάκων!"

#. (itstool) path: page/code
#: C/scale.c.page:28
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* This is the callback function. \n"
" * It is a handler function which reacts to the signal. \n"
" * In this case, it will notify the user the value of their scale as a label.\n"
" */\n"
"static void\n"
"hscale_moved (GtkRange *range,\n"
"              gpointer  user_data)\n"
"{\n"
"   GtkWidget *label = user_data;\n"
"\n"
"   /* Get the value of the range, and convert it into a string which will be\n"
"    * used as a new label for the horizontal scale.\n"
"    * %.0f - stands for a double that will have 0 decimal places.\n"
"    */\n"
"   gdouble pos = gtk_range_get_value (range);\n"
"   /* Note: Using g_strdup_printf returns a string that must be freed. \n"
"    * (In which is done below)\n"
"    */\n"
"   gchar *str = g_strdup_printf (\"Horizontal scale is %.0f\", pos);\n"
"   gtk_label_set_text (GTK_LABEL (label), str);\n"
"\n"
"   g_free(str);\n"
"}\n"
"\n"
"\n"
"\n"
"/* This is the second callback function. It is a handler function which \n"
" * reacts to the signal. It does the same thing as the function above, except with\n"
" * the vertical scale.\n"
" */\n"
"vscale_moved (GtkRange *range,\n"
"              gpointer  user_data)\n"
"{\n"
"   GtkWidget *label = user_data;\n"
"   \n"
"   gdouble pos = gtk_range_get_value (range);\n"
"   /* %.1f - stands for a double that will have 1 decimal place */\n"
"   gchar *str = g_strdup_printf (\"Vertical scale is %.1f\", pos);\n"
"   gtk_label_set_text (GTK_LABEL (label), str);\n"
"\n"
"   \n"
"   g_free (str);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Declare variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *h_scale;\n"
"  GtkWidget *v_scale;\n"
"  GtkWidget *hlabel;\n"
"  GtkWidget *vlabel;\n"
"  GtkWidget *grid;\n"
"\n"
"  /* The Adjustment object represents a value \n"
"   * which has an associated lower and upper bound.\n"
"   */\n"
"  GtkAdjustment *hadjustment;\n"
"  GtkAdjustment *vadjustment;\n"
"\n"
"  /* Create a window with a title and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Scale Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 400, 300);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 5);\n"
"\n"
"  /* Two labels to be shown in the window */\n"
"  hlabel = gtk_label_new (\"Move the scale handle...\");\n"
"  vlabel = gtk_label_new (\"Move the scale handle...\");\n"
"\n"
"   \n"
"  /* gtk_adjustment_new takes six parameters, three of which \n"
"   * may be difficult to understand:\n"
"   * step increment- move the handle with the arrow keys on your keyboard to see.\n"
"   * page increment - move the handle by clicking away from it \n"
"   * on the scale to see.\n"
"   * page size - not used here.\n"
"   */\n"
"  hadjustment = gtk_adjustment_new (0, 0, 100, 5, 10, 0);\n"
"  vadjustment = gtk_adjustment_new (50, 0, 100, 5, 10, 0); \n"
"\n"
"  /* Create the Horizontal scale, making sure the \n"
"   * digits used have no decimals.\n"
"   */\n"
"  h_scale = gtk_scale_new (GTK_ORIENTATION_HORIZONTAL, hadjustment);\n"
"  gtk_scale_set_digits (GTK_SCALE (h_scale), 0); \n"
"\n"
"  /* Allow it to expand horizontally (if there's space), and \n"
"   * set the vertical alignment\n"
"   */\n"
"  gtk_widget_set_hexpand (h_scale, TRUE);\n"
"  gtk_widget_set_valign (h_scale, GTK_ALIGN_START);\n"
"  \n"
"  /* Connecting the \"value-changed\" signal for the horizontal scale \n"
"   * to the appropriate callback function. \n"
"   * take note that GtkRange is part of GtkScale's Object Hierarchy.\n"
"   */\n"
"  g_signal_connect (h_scale, \n"
"                    \"value-changed\", \n"
"                    G_CALLBACK (hscale_moved), \n"
"                    hlabel);\n"
"\n"
"\n"
"\n"
"  /* Create the Vertical scale. This time, we will see what happens \n"
"   * when the digits arent initially set.\n"
"   */\n"
"  v_scale = gtk_scale_new (GTK_ORIENTATION_VERTICAL, vadjustment);\n"
"  gtk_widget_set_vexpand (v_scale, TRUE);\n"
"\n"
"  /* Connecting the \"value-changed\" signal for the vertical scale to \n"
"   * the appropriate callback function.\n"
"   */\n"
"  g_signal_connect (v_scale, \n"
"                    \"value-changed\", \n"
"                    G_CALLBACK (vscale_moved), \n"
"                    vlabel);\n"
"\n"
"  /* Create a grid and arrange everything accordingly */\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_set_column_spacing (GTK_GRID (grid), 10);\n"
"  gtk_grid_set_column_homogeneous (GTK_GRID (grid), TRUE);\n"
"  gtk_grid_attach (GTK_GRID (grid), h_scale, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), v_scale, 1, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), hlabel, 0, 1, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), vlabel, 1, 1, 1, 1);\n"
"  \n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#περιλαμβάνει &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Αυτή είναι η συνάρτηση επανάκλησης. \n"
" * Είναι μια συνάρτηση χειριστή που αντιδρά στο σήμα. \n"
" * Σε αυτήν την περίπτωση, θα ειδοποιεί τον χρήστη για την τιμή της κλίμακας τους ως μια ετικέτα.\n"
" */\n"
"static void\n"
"hscale_moved (GtkRange *range,\n"
"              gpointer  user_data)\n"
"{\n"
"   GtkWidget *label = user_data;\n"
"\n"
"   /* Λήψη της τιμής της περιοχής και μετατροπής της σε μια συμβολοσειρά που θα \n"
"    * χρησιμοποιηθεί ως μια νέα ετικέτα για την οριζόντια κλίμακα.\n"
"    * %.0f - αντιστοιχεί σε διπλής ακριβείας που θα έχει 0 δεκαδικά ψηφία.\n"
"    */\n"
"   gdouble pos = gtk_range_get_value (range);\n"
"   /* Σημείωση: Χρησιμοποιώντας Using g_strdup_printf επιστρέφει μια συμβολοσειρά που πρέπει να ελευθερωθεί. \n"
"    * (Που γίνεται παρακάτω)\n"
"    */\n"
"   gchar *str = g_strdup_printf (\"Horizontal scale is %.0f\", pos);\n"
"   gtk_label_set_text (GTK_LABEL (label), str);\n"
"\n"
"   g_free(str);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Αυτή είναι η δεύτερη συνάρτηση επανάκλησης. Είναι μια συνάρτηση χειρισμού που \n"
" * αντιδρά στο σήμα. Κάνει το ίδιο πράγμα όπως η παραπάνω συνάρτηση, \n"
" * εκτός από την κάθετη κλίμακα.\n"
" */\n"
"vscale_moved (GtkRange *range,\n"
"              gpointer  user_data)\n"
"{\n"
"   GtkWidget *label = user_data;\n"
"   \n"
"   gdouble pos = gtk_range_get_value (range);\n"
"   /* %.1f - stands for a double that will have 1 decimal place */\n"
"   gchar *str = g_strdup_printf (\"Vertical scale is %.1f\", pos);\n"
"   gtk_label_set_text (GTK_LABEL (label), str);\n"
"\n"
"   \n"
"   g_free (str);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Declare variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *h_scale;\n"
"  GtkWidget *v_scale;\n"
"  GtkWidget *hlabel;\n"
"  GtkWidget *vlabel;\n"
"  GtkWidget *grid;\n"
"\n"
"  /* Το αντικείμενο προσαρμογής αναπαριστά μια τιμή \n"
"   * που έχει ένα συσχετισμένο κατώτερο και ανώτερο όριο.\n"
"   */\n"
"  GtkAdjustment *hadjustment;\n"
"  GtkAdjustment *vadjustment;\n"
"\n"
"  /* Δημιουργία ενός παραθύρου με τίτλο και προεπιλεγμένο μέγεθος.  */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Scale Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 400, 300);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 5);\n"
"\n"
"  /* Δύο ετικέτες για εμφάνιση στο παράθυρο */\n"
"  hlabel = gtk_label_new (\"Move the scale handle...\");\n"
"  vlabel = gtk_label_new (\"Move the scale handle...\");\n"
"\n"
"   \n"
"  /* gtk_adjustment_new παίρνει έξι παραμέτρους, τρεις από τις οποίες \n"
"   * μπορεί να είναι δυσνόητες:\n"
"   * step increment- μετακινήστε το χειριστήριο με τα πλήκτρα βελών  στο πληκτρολόγιο σας για να δείτε.\n"
"   * page increment - μετακινήστε το χειριστήριο πατώντας μακριά από αυτό \n"
"   * στην κλίμακα για να δείτε.\n"
"   * page size - δεν χρησιμοποιείται εδώ.\n"
"   */\n"
"  hadjustment = gtk_adjustment_new (0, 0, 100, 5, 10, 0);\n"
"  vadjustment = gtk_adjustment_new (50, 0, 100, 5, 10, 0); \n"
"\n"
"  /* Δημιουργία της οριζόντιας κλίμακας, εξασφαλίζοντας ότι τα \n"
"   * χρησιμοποιούμενα ψηφία δεν έχουν δεκαδικά.\n"
"   */\n"
"  h_scale = gtk_scale_new (GTK_ORIENTATION_HORIZONTAL, hadjustment);\n"
"  gtk_scale_set_digits (GTK_SCALE (h_scale), 0); \n"
"\n"
"  /* Να επιτρέπεται η οριζόντια επέκταση (αν υπάρχει χώρος) και \n"
"   * ορισμός της κάθετης στοίχισης\n"
"   */\n"
"  gtk_widget_set_hexpand (h_scale, TRUE);\n"
"  gtk_widget_set_valign (h_scale, GTK_ALIGN_START);\n"
"  \n"
"  /* Σύνδεση του σήματος \"value-changed\" για την οριζόντια κλίμακα \n"
"   * με την κατάλληλη συνάρτηση επανάκλησης. \n"
"   * Σημειώστε ότι η GtkRange είναι μέρος της ιεραρχίας αντικειμένου της  GtkScale.\n"
"   */\n"
"  g_signal_connect (h_scale, \n"
"                    \"value-changed\", \n"
"                    G_CALLBACK (hscale_moved), \n"
"                    hlabel);\n"
"\n"
"\n"
"\n"
"  /* Δημιουργία της κάθετης κλίμακας. Αυτή τη φορά, θα δούμε τι συμβαίνει \n"
"   * όταν οι αριθμοί δεν έχουν οριστεί αρχικά.\n"
"   */\n"
"  v_scale = gtk_scale_new (GTK_ORIENTATION_VERTICAL, vadjustment);\n"
"  gtk_widget_set_vexpand (v_scale, TRUE);\n"
"\n"
"  /* Σύνδεση του σήματος \"value-changed\" για την κάθετη κλίμακα στην \n"
"   * κατάλληλη συνάρτηση επανάκλησης.\n"
"   */\n"
"  g_signal_connect (v_scale, \n"
"                    \"value-changed\", \n"
"                    G_CALLBACK (vscale_moved), \n"
"                    vlabel);\n"
"\n"
"  /* Δημιουργία ενός πλέγματος και τακτοποίηση όλων κατάλληλα */\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_set_column_spacing (GTK_GRID (grid), 10);\n"
"  gtk_grid_set_column_homogeneous (GTK_GRID (grid), TRUE);\n"
"  gtk_grid_attach (GTK_GRID (grid), h_scale, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), v_scale, 1, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), hlabel, 0, 1, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), vlabel, 1, 1, 1, 1);\n"
"  \n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/scale.c.page:36
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkScale.html"
"\">GtkScale</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkScale.html"
"\">GtkScale</link>"

#. (itstool) path: item/p
#: C/scale.c.page:37
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkRange.html"
"\">GtkRange</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkRange.html"
"\">GtkRange</link>"

#. (itstool) path: item/p
#: C/scale.c.page:38 C/spinbutton.c.page:39
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkAdjustment.html"
"\">GtkAdjustment</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkAdjustment.html"
"\">GtkAdjustment</link>"

#. (itstool) path: item/p
#: C/scale.c.page:39
msgid ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-String-Utility-"
"Functions.html#g-strdup-printf\">String Utility Functions</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-String-Utility-"
"Functions.html#g-strdup-printf\">String Utility Functions</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/scale.js.page:22
msgctxt "_"
msgid ""
"external ref='media/scalepenguins.png' md5='2dbe6a833fec86fde71a5ddb421e2cd5'"
msgstr ""
"external ref='media/scalepenguins.png' md5='2dbe6a833fec86fde71a5ddb421e2cd5'"

#. (itstool) path: info/title
#: C/scale.js.page:8
msgctxt "text"
msgid "Scale (JavaScript)"
msgstr "Κλίμακα (JavaScript)"

#. (itstool) path: info/desc
#: C/scale.js.page:18
msgid "A slider which corresponds to a numerical value"
msgstr "Ένας ολισθητής που αντιστοιχεί σε μια αριθμητική τιμή"

#. (itstool) path: page/p
#: C/scale.js.page:23
msgid ""
"A Scale is a horizontal or vertical slider, that represents a value inside a "
"numerical range. When you create a new Scale, you set what its default "
"position is, what the numbers at the top and bottom of the range are, and "
"things like how much it moves up or down when you click on the Scale to "
"either side of the knob. To keep from having to type all that in every time "
"you create a new Scale, you can create an object called an Adjustment which "
"keeps track of all that, then tell each new Scale to use that Adjustment."
msgstr ""
"Μια κλίμακα είναι ένας οριζόντιος ή κάθετος ολισθητής, που αναπαριστά μια "
"τιμή μέσα σε μια αριθμητική περιοχή. Όταν δημιουργείτε μια νέα κλίμακα, "
"ορίζετε ποια είναι η προεπιλεγμένη της θέση, ποιοι είναι οι αριθμοί στην "
"κορυφή και στον πάτο της περιοχής και πράγματα όπως πόσο μετακινείται πάνω ή "
"κάτω όταν πατάτε σε μία κλίμακα σε οποιαδήποτε πλευρά του κουμπιού. Για να "
"συνεχίσετε να έχετε να πληκτρολογήσετε όλο αυτό κάθε φορά δημιουργείτε μια "
"νέα κλίμακα, μπορείτε να δημιουργήσετε ένα αντικείμενο που λέγεται ρύθμιση "
"και ανιχνεύει όλο αυτό, έπειτα πείτε σε κάθε νέα σκάλα να χρησιμοποιήσει "
"αυτήν τη ρύθμιση."

#. (itstool) path: page/p
#: C/scale.js.page:24
msgid ""
"This scale is a simple widget that lets you adjust the size of an iceberg "
"that penguins live on. The number of penguins on the iceberg is the product "
"of the values of the two sliders. Try playing with them and seeing what "
"happens."
msgstr ""
"Αυτή η κλίμακα είναι ένα απλό γραφικό στοιχείο που σας επιτρέπει να "
"ρυθμίσετε το μέγεθος ενός παγόβουνου όπου ζουν οι πιγκουίνοι. Ο αριθμός των "
"πιγκουίνων στο παγόβουνο είναι το γινόμενο των τιμών των δύο ολισθητών. "
"Δοκιμάστε να παίξετε μαζί τους και να δείτε τι συμβαίνει."

#. (itstool) path: section/code
#: C/scale.js.page:41
#, no-wrap
msgid ""
"\n"
"const ScaleExample = new Lang.Class({\n"
"    Name: 'Scale Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsscale'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const ScaleExample = new Lang.Class({\n"
"    Name: 'Scale Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsscale'\n"
"        });\n"
"\n"
"    // Σύνδεση των σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει ένα παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/scale.js.page:66
msgid ""
"All the code for this sample goes in the ScaleExample class. The above code "
"creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"Application.html\">Gtk.Application</link> for our widgets and window to go "
"in."
msgstr ""
"Όλος ο κώδικας για αυτό το παράδειγμα πηγαίνει στην κλάση ScaleExample. Ο "
"παραπάνω κώδικας δημιουργεί μια <link href=\"http://www.roojs.com/seed/"
"gir-1.2-gtk-3.0/gjs/Gtk.Application.html\">Gtk.Application</link> για να "
"μπουν μέσα τα γραφικά στοιχεία μας και τα παράθυρα."

#. (itstool) path: section/code
#: C/scale.js.page:67
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Birds on a Floe\"});\n"
msgstr ""
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Birds on a Floe\"});\n"

#. (itstool) path: section/title
#: C/scale.js.page:82
msgid "Creating the scales"
msgstr "Δημιουργία των κλιμάκων"

#. (itstool) path: section/code
#: C/scale.js.page:83
#, no-wrap
msgid ""
"\n"
"        // Create the horizontal scale\n"
"        this._hScale = Gtk.Scale.new_with_range (Gtk.Orientation.HORIZONTAL, 0.0, 100.0, 5.0);\n"
"        this._hScale.set_valign (Gtk.Align.START);\n"
"        this._hScale.set_value (50);\n"
"        this._hScale.set_digits (0);\n"
"        // this._hScale.set_draw_value (false);\n"
msgstr ""
"\n"
"        // Δημιουργία της οριζόντιας κλίμακας\n"
"        this._hScale = Gtk.Scale.new_with_range (Gtk.Orientation.HORIZONTAL, 0.0, 100.0, 5.0);\n"
"        this._hScale.set_valign (Gtk.Align.START);\n"
"        this._hScale.set_value (50);\n"
"        this._hScale.set_digits (0);\n"
"        // this._hScale.set_draw_value (false);\n"

#. (itstool) path: section/p
#: C/scale.js.page:92
msgid ""
"The new_with_range method is one way to create a new Scale widget. The "
"parameters it takes are a <link href=\"http://www.roojs.org/seed/gir-1.2-"
"gtk-3.0/gjs/Gtk.Orientation.html\">Gtk.Orientation</link>, the minimum "
"value, the maximum value, and the increment for a single step. After that we "
"use the Scale's methods to set its starting value, and how many decimal "
"places it runs to. We also set its vertical alignment in this case, to "
"control where it appears in the window."
msgstr ""
"Η μέθοδος new_with_range είναι ένας τρόπος δημιουργίας ενός νέου γραφικού "
"στοιχείου κλίμακας. Οι παράμετροι που παίρνει είναι μια <link href=\"http://"
"www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Orientation.html\">Gtk."
"Orientation</link>, η ελάχιστη τιμή, η μέγιστη τιμή και η αύξηση για ένα "
"μόνο βήμα. Κατόπιν χρησιμοποιούμε τις μεθόδους κλίμακας για να ορίσουμε την "
"αρχική της τιμή και πόσες δεκαδικές θέσεις διατρέχει. Επίσης ορίζουμε την "
"κάθετη της στοίχιση σε αυτήν την περίπτωση, για τον έλεγχο πού εμφανίζεται "
"στο παράθυρο."

#. (itstool) path: section/p
#: C/scale.js.page:93
msgid ""
"We can use the set_draw_value method to tell it whether or not to show the "
"number next to the sliding scale. It's commented out in this example."
msgstr ""
"Μπορούμε να χρησιμοποιήσουμε τη μέθοδο set_draw_value για να του πούμε εάν "
"θα εμφανίσει ή όχι τον αριθμό δίπλα στην κινητή κλίμακα. Σχολιάζεται σε αυτό "
"το παράδειγμα."

#. (itstool) path: section/code
#: C/scale.js.page:95
#, no-wrap
msgid ""
"\n"
"        // Create a master adjustment to use for the vertical (or any other) scale\n"
"        this._adjustment = new Gtk.Adjustment ({\n"
"            value: 95,\n"
"            lower: 0,\n"
"            upper: 100,\n"
"            step_increment: 5,\n"
"            page_increment: 10 });\n"
msgstr ""
"\n"
"        // Δημιουργία μιας κύριας προσαρμογής για χρήση με την κάθετη (ή οποιαδήποτε άλλη)κλίμακα\n"
"        this._adjustment = new Gtk.Adjustment ({\n"
"            value: 95,\n"
"            lower: 0,\n"
"            upper: 100,\n"
"            step_increment: 5,\n"
"            page_increment: 10 });\n"

#. (itstool) path: section/p
#: C/scale.js.page:105
msgid ""
"An Adjustment is an object we can use to simplify things when creating a new "
"Scale. The Adjustment's \"value\" property is what the Scale's default value "
"is, while \"upper\" and \"lower\" make the high and low ends of the "
"numerical range. Meanwhile, the increment values show how much the slider "
"moves when you do things like click on it."
msgstr ""
"Μια ρύθμιση είναι ένα αντικείμενο που μπορούμε να χρησιμοποιήσουμε για "
"απλοποίηση των πραγμάτων όταν δημιουργείτε μια νέα κλίμακα. Η ιδιότητα της "
"ρύθμισης \"value\" είναι η προεπιλεγμένη τιμή της κλίμακας, ενώ \"upper\" "
"και \"lower\" κάνουν το πάνω και κάτω άκρο της αριθμητικής περιοχής. Στο "
"μεταξύ, οι τιμές αύξησης εμφανίζουν πόσο μετακινείται ο ολισθητής όταν "
"κάνετε πράγματα όπως το πάτημα πάνω του."

#. (itstool) path: section/code
#: C/scale.js.page:107
#, no-wrap
msgid ""
"\n"
"        // Create a vertical scale using the adjustment we just made\n"
"        this._vScale = new Gtk.Scale ({\n"
"            orientation: Gtk.Orientation.VERTICAL,\n"
"            adjustment: this._adjustment,\n"
"            digits: 0,\n"
"            // draw_value: false,\n"
"            margin_left: 10 });\n"
msgstr ""
"\n"
"        // Δημιουργία μιας κάθετης κλίμακας χρησιμοποιώντας την προσαρμογή που μόλις φτιάξαμε\n"
"        this._vScale = new Gtk.Scale ({\n"
"            orientation: Gtk.Orientation.VERTICAL,\n"
"            adjustment: this._adjustment,\n"
"            digits: 0,\n"
"            // draw_value: false,\n"
"            margin_left: 10 });\n"

#. (itstool) path: section/p
#: C/scale.js.page:117
msgid ""
"Here we create a new Scale object using _adjustment as its \"adjustment\" "
"property. This is a great shortcut. We still have to tell it to round off "
"the decimal place, though. Note that the draw_value property is commented "
"out; this is how you tell it not to show the number next to the Scale when "
"you're creating one this way."
msgstr ""
"Εδώ δημιουργούμε ένα νέο αντικείμενο κλίμακας χρησιμοποιώντας _adjustment ως "
"ιδιότητα \"adjustment\". Αυτό είναι μια μεγάλη συντόμευση. Πρέπει ακόμα να "
"του πούμε να στρογγυλέψει τις δεκαδικές θέσεις, όμως. Σημειώστε ότι η "
"ιδιότητα draw_value είναι σχολιασμένη· έτσι του λέτε να μην εμφανίσει τον "
"αριθμό δίπλα στην κλίμακα όταν δημιουργείτε μία κλίμακα με αυτόν τον τρόπο."

#. (itstool) path: section/code
#: C/scale.js.page:119
#, no-wrap
msgid ""
"\n"
"        // Create the label that shows the product of the two values\n"
"        this._product = (this._hScale.get_value() * this._vScale.get_value());\n"
"        this._label = new Gtk.Label ({\n"
"            label: (String(this._product) + \" penguins on the iceberg.\"),\n"
"            height_request: 200,\n"
"            width_request: 200,\n"
"            wrap: true});\n"
"\n"
"        // Connect the two scales to functions which recalculate the label\n"
"        this._hScale.connect (\"value-changed\", Lang.bind (this, this._recalc));\n"
"        this._vScale.connect (\"value-changed\", Lang.bind (this, this._recalc));\n"
msgstr ""
"\n"
"        // Δημιουργία της ετικέτας που εμφανίζει το γινόμενο των δύο τιμών\n"
"        this._product = (this._hScale.get_value() * this._vScale.get_value());\n"
"        this._label = new Gtk.Label ({\n"
"            label: (String(this._product) + \" penguins on the iceberg.\"),\n"
"            height_request: 200,\n"
"            width_request: 200,\n"
"            wrap: true});\n"
"\n"
"        // Σύνδεση των δύο κλιμάκων με συναρτήσεις που επανυπολογίζουν την ετικέτα\n"
"        this._hScale.connect (\"value-changed\", Lang.bind (this, this._recalc));\n"
"        this._vScale.connect (\"value-changed\", Lang.bind (this, this._recalc));\n"

#. (itstool) path: section/p
#: C/scale.js.page:133
msgid ""
"We can use the get_value method to find out the numerical value a Scale is "
"set at. We can then do whatever we want with it, including multiply the two "
"Scales' values together and have a <link xref=\"label.js\">Label</link> show "
"us the product. We set the label's text to wrap around, because we're having "
"it display a silly message too."
msgstr ""
"Μπορούμε να χρησιμοποιήσουμε τη μέθοδο get_value για να βρούμε την "
"αριθμητική τιμή ορισμού μιας κλίμακας. Μπορούμε έπειτα να κάνουμε οτιδήποτε "
"θέλουμε μαζί της, συμπεριλαμβάνοντας πολλαπλασιασμό των τιμών των δύο "
"κλιμάκων μαζί και να έχουμε μια <link xref=\"label.js\">ετικέτα</link> που "
"μας δείχνει το γινόμενο. Ορίζουμε το κείμενο της ετικέτας να αναδιπλώνεται, "
"επειδή έχουμε την εμφάνιση ενός χαζού μηνύματος επίσης."

#. (itstool) path: section/p
#: C/scale.js.page:134
msgid ""
"After we create the Label, we connect the two Scales' \"value-changed\" "
"signals to _recalc, a function that will recalculate the number of penguins "
"on the iceberg and come up with a new message."
msgstr ""
"Αφού δημιουργήσουμε την ετικέτα, συνδέουμε τα σήματα \"value-changed\" των "
"δύο κλιμάκων στο _recalc, μια συνάρτηση που θα ξαναϋπολογίσει τον αριθμό των "
"πιγκουίνων στο παγόβουνο και δίνει ένα νέο μήνυμα."

#. (itstool) path: section/code
#: C/scale.js.page:136
#, no-wrap
msgid ""
"\n"
"        // Create a grid to arrange things in\n"
"        this._UIGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_top: 20,\n"
"            margin_left: 20});\n"
"\n"
"        // Attach everything to the grid\n"
"        this._UIGrid.attach (this._label, 0, 0, 1, 1);\n"
"        this._UIGrid.attach (this._hScale, 0, 1, 1, 1);\n"
"        this._UIGrid.attach (this._vScale, 1, 0, 1, 1);\n"
msgstr ""
"\n"
"        // Δημιουργία ενός πλέγματος για τακτοποίηση των πραγμάτων μέσα του\n"
"        this._UIGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_top: 20,\n"
"            margin_left: 20});\n"
"\n"
"        // Προσάρτηση όλων στο πλέγμα\n"
"        this._UIGrid.attach (this._label, 0, 0, 1, 1);\n"
"        this._UIGrid.attach (this._hScale, 0, 1, 1, 1);\n"
"        this._UIGrid.attach (this._vScale, 1, 0, 1, 1);\n"

#. (itstool) path: section/p
#: C/scale.js.page:149
msgid ""
"Here we create a <link xref=\"grid.js\">Grid</link> to put everything in, "
"then attach all our widgets to it. Note that here and on some of the widgets "
"themselves we're using margins to keep things neatly spaced."
msgstr ""
"Εδώ δημιουργούμε ένα <link xref=\"grid.js\">πλέγμα</link> για να τα βάλουμε "
"όλα μέσα, έπειτα προσκολλάμε όλα τα γραφικά στοιχεία μας. Σημειώστε ότι εδώ "
"και για μερικά από τα ίδια τα γραφικά στοιχεία χρησιμοποιούμε περιθώρια για "
"να κρατήσουμε τα πράγματα τοποθετημένα με τάξη."

#. (itstool) path: section/code
#: C/scale.js.page:150
#, no-wrap
msgid ""
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._UIGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""
"\n"
"        // Προσθήκη του πλέγματος στο παράθυρο\n"
"        this._window.add (this._UIGrid);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"

#. (itstool) path: section/p
#: C/scale.js.page:158
msgid ""
"Finally, we add the Grid to the window, then tell the window to show itself "
"and all the widgets inside of it."
msgstr ""
"Τελικά, προσθέτουμε το πλέγμα στο παράθυρο, έπειτα λέμε στο παράθυρο να "
"εμφανίσει τον εαυτόν του και όλα τα γραφικά στοιχεία μέσα του."

#. (itstool) path: section/title
#: C/scale.js.page:162
msgid "Function which handles the scales' values changing"
msgstr "Η συνάρτηση που χειρίζεται την αλλαγή των τιμών των κλιμάκων"

#. (itstool) path: section/code
#: C/scale.js.page:164
#, no-wrap
msgid ""
"\n"
"    _recalc: function() {\n"
"\n"
"        // Figure out what the product of the two scales' values is\n"
"        var product = (this._hScale.get_value() * this._vScale.get_value());\n"
"\n"
"        // Create a blank comment line in case there isn't a silly comment to make\n"
"        var comment = \"\";\n"
"\n"
"        // Make a silly comment based on the number of penguins\n"
"        if (product &gt; 9000) {\n"
"            comment = \"It's over 9000!\";\n"
"        }\n"
"        else if (product &lt; 1000 &amp;&amp; product &gt; 0) {\n"
"            comment = \"They're getting lonely.\";\n"
"        }\n"
"        else if (product == 0) {\n"
"            comment = \"They're all gone ...\";\n"
"        }\n"
"        else comment = \"\";\n"
"\n"
"        // Set ._label's new text\n"
"        this._label.set_label (String (product) + \" penguins on the iceberg. \" + comment);\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _recalc: function() {\n"
"\n"
"        // Υπολογισμός του γινομένου των δύο τιμών των κλιμάκων\n"
"        var product = (this._hScale.get_value() * this._vScale.get_value());\n"
"\n"
"        // Δημιουργία μιας κενής γραμμής σχολίου σε περίπτωση που δεν υπάρχει ένα χαζό σχόλιο να γίνει\n"
"        var comment = \"\";\n"
"\n"
"        // Δημιουργία ενός χαζού σχολίου με βάση τον αριθμό των πιγκουίνων\n"
"        if (product &gt; 9000) {\n"
"            comment = \"It's over 9000!\";\n"
"        }\n"
"        else if (product &lt; 1000 &amp;&amp; product &gt; 0) {\n"
"            comment = \"They're getting lonely.\";\n"
"        }\n"
"        else if (product == 0) {\n"
"            comment = \"They're all gone ...\";\n"
"        }\n"
"        else comment = \"\";\n"
"\n"
"        // Νέο κείμενο του Set ._label\n"
"        this._label.set_label (String (product) + \" penguins on the iceberg. \" + comment);\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/scale.js.page:192
msgid ""
"Remember, we can get a Scale's value using its get_value method. Here we "
"simply recalculate what the product of the two values is after one of the "
"Scales is moved, add in a silly message depending on how many penguins are "
"left, and change the wording on _label to show the new number and message."
msgstr ""
"Να θυμάστε, μπορούμε να πάρουμε μια τιμή κλίμακας χρησιμοποιώντας τη μέθοδο "
"του get_value. Εδώ απλά ξαναϋπολογίζουμε ποιο είναι το γινόμενο των δύο "
"τιμών μετά τη μετακίνηση μιας από τις κλίμακες, προσθέτουμε ένα χαζό μήνυμα "
"ανάλογα με το πόσοι πιγκουίνοι απέμειναν και αλλάζουμε τη διατύπωση στην "
"_label για να δείξουμε το νέο αριθμό και το μήνυμα."

#. (itstool) path: section/code
#: C/scale.js.page:194
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new ScaleExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new ScaleExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/scale.js.page:199
msgid ""
"Finally, we create a new instance of the finished ScaleExample class, and "
"set the application running."
msgstr ""
"Τελικά, δημιουργούμε ένα νέο στιγμιότυπο της ολοκληρωμένης κλάσης "
"ScaleExample και εκτελούμε την εφαρμογή."

#. (itstool) path: section/code
#: C/scale.js.page:204
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ScaleExample = new Lang.Class({\n"
"    Name: 'Scale Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsscale'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Birds on a Floe\"});\n"
"\n"
"        // Create the horizontal scale\n"
"        this._hScale = Gtk.Scale.new_with_range (Gtk.Orientation.HORIZONTAL, 0.0, 100.0, 5.0);\n"
"        this._hScale.set_valign (Gtk.Align.START);\n"
"        this._hScale.set_value (50);\n"
"        this._hScale.set_digits (0);\n"
"        // this._hScale.set_draw_value (false);\n"
"\n"
"        // Create a master adjustment to use for the vertical (or any other) scale\n"
"        this._adjustment = new Gtk.Adjustment ({\n"
"            value: 95,\n"
"            lower: 0,\n"
"            upper: 100,\n"
"            step_increment: 5,\n"
"            page_increment: 10 });\n"
"\n"
"        // Create a vertical scale using the adjustment we just made\n"
"        this._vScale = new Gtk.Scale ({\n"
"            orientation: Gtk.Orientation.VERTICAL,\n"
"            adjustment: this._adjustment,\n"
"            digits: 0,\n"
"            // draw_value: false,\n"
"            margin_left: 10 });\n"
"\n"
"        // Create the label that shows the product of the two values\n"
"        this._product = (this._hScale.get_value() * this._vScale.get_value());\n"
"        this._label = new Gtk.Label ({\n"
"            label: (String(this._product) + \" penguins on the iceberg.\"),\n"
"            height_request: 200,\n"
"            width_request: 200,\n"
"            wrap: true});\n"
"\n"
"        // Connect the two scales to functions which recalculate the label\n"
"        this._hScale.connect (\"value-changed\", Lang.bind (this, this._recalc));\n"
"        this._vScale.connect (\"value-changed\", Lang.bind (this, this._recalc));\n"
"\n"
"        // Create a grid to arrange things in\n"
"        this._UIGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_top: 20,\n"
"            margin_left: 20});\n"
"\n"
"        // Attach everything to the grid\n"
"        this._UIGrid.attach (this._label, 0, 0, 1, 1);\n"
"        this._UIGrid.attach (this._hScale, 0, 1, 1, 1);\n"
"        this._UIGrid.attach (this._vScale, 1, 0, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._UIGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _recalc: function() {\n"
"\n"
"        // Figure out what the product of the two scales' values is\n"
"        var product = (this._hScale.get_value() * this._vScale.get_value());\n"
"\n"
"        // Create a blank comment line in case there isn't a silly comment to make\n"
"        var comment = \"\";\n"
"\n"
"        // Make a silly comment based on the number of penguins\n"
"        if (product &gt; 9000) {\n"
"            comment = \"It's over 9000!\";\n"
"        }\n"
"        else if (product &lt; 1000 &amp;&amp; product &gt; 0) {\n"
"            comment = \"They're getting lonely.\";\n"
"        }\n"
"        else if (product == 0) {\n"
"            comment = \"They're all gone ...\";\n"
"        }\n"
"        else comment = \"\";\n"
"\n"
"        // Set ._label's new text\n"
"        this._label.set_label (String (product) + \" penguins on the iceberg. \" + comment);\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ScaleExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ScaleExample = new Lang.Class({\n"
"    Name: 'Scale Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsscale'\n"
"        });\n"
"\n"
"    // Σύνδεση των σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει ένα παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης του σήματος 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Birds on a Floe\"});\n"
"\n"
"        // Δημιουργία της οριζόντιας κλίμακας\n"
"        this._hScale = Gtk.Scale.new_with_range (Gtk.Orientation.HORIZONTAL, 0.0, 100.0, 5.0);\n"
"        this._hScale.set_valign (Gtk.Align.START);\n"
"        this._hScale.set_value (50);\n"
"        this._hScale.set_digits (0);\n"
"        // this._hScale.set_draw_value (false);\n"
"\n"
"        // Δημιουργία μιας κύριας ρύθμισης για χρήση με την κάθετη (ή οποιαδήποτε άλλη) κλίμακα\n"
"        this._adjustment = new Gtk.Adjustment ({\n"
"            value: 95,\n"
"            lower: 0,\n"
"            upper: 100,\n"
"            step_increment: 5,\n"
"            page_increment: 10 });\n"
"\n"
"        // Δημιουργία μιας κάθετης κλίμακας χρησιμοποιώντας τη ρύθμιση που μόλις κάναμε\n"
"        this._vScale = new Gtk.Scale ({\n"
"            orientation: Gtk.Orientation.VERTICAL,\n"
"            adjustment: this._adjustment,\n"
"            digits: 0,\n"
"            // draw_value: false,\n"
"            margin_left: 10 });\n"
"\n"
"        // Δημιουργία της ετικέτας που εμφανίζει το γινόμενο των δύο τιμών\n"
"        this._product = (this._hScale.get_value() * this._vScale.get_value());\n"
"        this._label = new Gtk.Label ({\n"
"            label: (String(this._product) + \" penguins on the iceberg.\"),\n"
"            height_request: 200,\n"
"            width_request: 200,\n"
"            wrap: true});\n"
"\n"
"        // Σύνδεση των δύο κλιμάκων με τις συναρτήσεις που επανυπολογίζουν την ετικέτα\n"
"        this._hScale.connect (\"value-changed\", Lang.bind (this, this._recalc));\n"
"        this._vScale.connect (\"value-changed\", Lang.bind (this, this._recalc));\n"
"\n"
"        // Δημιουργία ενός πλέγματος για τακτοποίηση των πραγμάτων μέσα του\n"
"        this._UIGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_top: 20,\n"
"            margin_left: 20});\n"
"\n"
"        // Προσάρτηση όλων στο πλέγμα\n"
"        this._UIGrid.attach (this._label, 0, 0, 1, 1);\n"
"        this._UIGrid.attach (this._hScale, 0, 1, 1, 1);\n"
"        this._UIGrid.attach (this._vScale, 1, 0, 1, 1);\n"
"\n"
"        // Προσθήκη του πλέγματος στο παράθυρο\n"
"        this._window.add (this._UIGrid);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _recalc: function() {\n"
"\n"
"        // Υπολογισμός του γινομένου των δύο τιμών των κλιμάκων\n"
"        var product = (this._hScale.get_value() * this._vScale.get_value());\n"
"\n"
"        // Δημιουργία μιας κενής γραμμής σχολίου στην περίπτωση που δεν υπάρχει ένα χαζό σχόλιο να γίνει\n"
"        var comment = \"\";\n"
"\n"
"        // Δημιουργία ενός χαζού σχολίου με βάση τον αριθμό των πιγκουίνων\n"
"        if (product &gt; 9000) {\n"
"            comment = \"It's over 9000!\";\n"
"        }\n"
"        else if (product &lt; 1000 &amp;&amp; product &gt; 0) {\n"
"            comment = \"They're getting lonely.\";\n"
"        }\n"
"        else if (product == 0) {\n"
"            comment = \"They're all gone ...\";\n"
"        }\n"
"        else comment = \"\";\n"
"\n"
"        // Νέο κείμενο του Set ._label\n"
"        this._label.set_label (String (product) + \" penguins on the iceberg. \" + comment);\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής \n"
"let app = new ScaleExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/scale.js.page:210 C/spinbutton.js.page:201
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Adjustment."
"html\">Gtk.Adjustment</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Adjustment."
"html\">Gtk.Adjustment</link>"

#. (itstool) path: item/p
#: C/scale.js.page:215
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Scale.html"
"\">Gtk.Scale</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Scale.html"
"\">Gtk.Scale</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/scale.py.page:24 C/scale.vala.page:24
msgctxt "_"
msgid "external ref='media/scale.png' md5='462c52a53b773cb9e8c62c646bf88452'"
msgstr "external ref='media/scale.png' md5='462c52a53b773cb9e8c62c646bf88452'"

#. (itstool) path: info/title
#: C/scale.py.page:8
msgctxt "text"
msgid "Scale (Python)"
msgstr "Κλίμακα (Python)"

#. (itstool) path: section/code
#: C/scale.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Scale Example\", application=app)\n"
"        self.set_default_size(400, 300)\n"
"        self.set_border_width(5)\n"
"\n"
"        # two adjustments (initial value, min value, max value,\n"
"        # step increment - press cursor keys to see!,\n"
"        # page increment - click around the handle to see!,\n"
"        # page size - not used here)\n"
"        ad1 = Gtk.Adjustment(0, 0, 100, 5, 10, 0)\n"
"        ad2 = Gtk.Adjustment(50, 0, 100, 5, 10, 0)\n"
"\n"
"        # an horizontal scale\n"
"        self.h_scale = Gtk.Scale(\n"
"            orientation=Gtk.Orientation.HORIZONTAL, adjustment=ad1)\n"
"        # of integers (no digits)\n"
"        self.h_scale.set_digits(0)\n"
"        # that can expand horizontally if there is space in the grid (see\n"
"        # below)\n"
"        self.h_scale.set_hexpand(True)\n"
"        # that is aligned at the top of the space allowed in the grid (see\n"
"        # below)\n"
"        self.h_scale.set_valign(Gtk.Align.START)\n"
"\n"
"        # we connect the signal \"value-changed\" emitted by the scale with the callback\n"
"        # function scale_moved\n"
"        self.h_scale.connect(\"value-changed\", self.scale_moved)\n"
"\n"
"        # a vertical scale\n"
"        self.v_scale = Gtk.Scale(\n"
"            orientation=Gtk.Orientation.VERTICAL, adjustment=ad2)\n"
"        # that can expand vertically if there is space in the grid (see below)\n"
"        self.v_scale.set_vexpand(True)\n"
"\n"
"        # we connect the signal \"value-changed\" emitted by the scale with the callback\n"
"        # function scale_moved\n"
"        self.v_scale.connect(\"value-changed\", self.scale_moved)\n"
"\n"
"        # a label\n"
"        self.label = Gtk.Label()\n"
"        self.label.set_text(\"Move the scale handles...\")\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.set_column_spacing(10)\n"
"        grid.set_column_homogeneous(True)\n"
"        grid.attach(self.h_scale, 0, 0, 1, 1)\n"
"        grid.attach_next_to(\n"
"            self.v_scale, self.h_scale, Gtk.PositionType.RIGHT, 1, 1)\n"
"        grid.attach(self.label, 0, 1, 2, 1)\n"
"\n"
"        self.add(grid)\n"
"\n"
"    # any signal from the scales is signaled to the label the text of which is\n"
"    # changed\n"
"    def scale_moved(self, event):\n"
"        self.label.set_text(\"Horizontal scale is \" + str(int(self.h_scale.get_value())) +\n"
"                            \"; vertical scale is \" + str(self.v_scale.get_value()) + \".\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Scale Example\", application=app)\n"
"        self.set_default_size(400, 300)\n"
"        self.set_border_width(5)\n"
"\n"
"        # two adjustments (initial value, min value, max value,\n"
"        # step increment - press cursor keys to see!,\n"
"        # page increment - click around the handle to see!,\n"
"        # page size - not used here)\n"
"        ad1 = Gtk.Adjustment(0, 0, 100, 5, 10, 0)\n"
"        ad2 = Gtk.Adjustment(50, 0, 100, 5, 10, 0)\n"
"\n"
"        # an horizontal scale\n"
"        self.h_scale = Gtk.Scale(\n"
"            orientation=Gtk.Orientation.HORIZONTAL, adjustment=ad1)\n"
"        # of integers (no digits)\n"
"        self.h_scale.set_digits(0)\n"
"        # that can expand horizontally if there is space in the grid (see\n"
"        # below)\n"
"        self.h_scale.set_hexpand(True)\n"
"        # that is aligned at the top of the space allowed in the grid (see\n"
"        # below)\n"
"        self.h_scale.set_valign(Gtk.Align.START)\n"
"\n"
"        # we connect the signal \"value-changed\" emitted by the scale with the callback\n"
"        # function scale_moved\n"
"        self.h_scale.connect(\"value-changed\", self.scale_moved)\n"
"\n"
"        # a vertical scale\n"
"        self.v_scale = Gtk.Scale(\n"
"            orientation=Gtk.Orientation.VERTICAL, adjustment=ad2)\n"
"        # that can expand vertically if there is space in the grid (see below)\n"
"        self.v_scale.set_vexpand(True)\n"
"\n"
"        # we connect the signal \"value-changed\" emitted by the scale with the callback\n"
"        # function scale_moved\n"
"        self.v_scale.connect(\"value-changed\", self.scale_moved)\n"
"\n"
"        # a label\n"
"        self.label = Gtk.Label()\n"
"        self.label.set_text(\"Move the scale handles...\")\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.set_column_spacing(10)\n"
"        grid.set_column_homogeneous(True)\n"
"        grid.attach(self.h_scale, 0, 0, 1, 1)\n"
"        grid.attach_next_to(\n"
"            self.v_scale, self.h_scale, Gtk.PositionType.RIGHT, 1, 1)\n"
"        grid.attach(self.label, 0, 1, 2, 1)\n"
"\n"
"        self.add(grid)\n"
"\n"
"    # any signal from the scales is signaled to the label the text of which is\n"
"    # changed\n"
"    def scale_moved(self, event):\n"
"        self.label.set_text(\"Horizontal scale is \" + str(int(self.h_scale.get_value())) +\n"
"                            \"; vertical scale is \" + str(self.v_scale.get_value()) + \".\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/scale.py.page:35
msgid "Useful methods for a Scale widget"
msgstr "Χρήσιμες μέθοδοι για γραφικό στοιχείο κλίμακας"

#. (itstool) path: section/p
#: C/scale.py.page:36
msgid ""
"A Gtk.Adjustment is needed to construct the Gtk.Scale. This is the "
"representation of a value with a lower and upper bound, together with step "
"and page increments, and a page size, and it is constructed as <code>Gtk."
"Adjustment(value, lower, upper, step_increment, page_increment, page_size)</"
"code> where the fields are of type <code>float</code>; <code>step_increment</"
"code> is the increment/decrement that is obtained by using the cursor keys, "
"<code>page_increment</code> the one that is obtained clicking on the scale "
"itself. Note that <code>page_size</code> is not used in this case, it should "
"be set to <code>0</code>."
msgstr ""
"Μια Gtk.Adjustment απαιτείται για να δομήσει την Gtk.Scale. Αυτή είναι η "
"αναπαράσταση μιας τιμής με κάτω και άνω όριο, μαζί με αυξήσεις βήματος και "
"σελίδας και ένα μέγεθος σελίδας και δομείται ως <code>Gtk.Adjustment(value, "
"lower, upper, step_increment, page_increment, page_size)</code> όπου τα "
"πεδία είναι του τύπου <code>float</code>· <code>step_increment</code> είναι "
"η αύξηση/μείωση που παίρνεται χρησιμοποιώντας τα πλήκτρα δρομέα, "
"<code>page_increment</code> αυτή που παίρνεται πατώντας στην ίδια την "
"κλίμακα. Σημειώστε ότι το <code>page_size</code> δεν χρησιμοποιείται σε "
"αυτήν την περίπτωση, θα πρέπει να οριστεί σε <code>0</code>."

#. (itstool) path: section/p
#: C/scale.py.page:37
msgid ""
"In line 28 the signal <code>\"value-changed\"</code> is connected to the "
"callback function <code>scale_moved()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"Στη γραμμή 28 το σήμα <code>\"value-changed\"</code> συνδέεται με τη "
"συνάρτηση επανάκλησης <code>scale_moved()</code> χρησιμοποιώντας "
"<code><var>widget</var>.connect(<var>signal</var>, <var>callback function</"
"var>)</code>. Δείτε <link xref=\"signals-callbacks.py\"/> για μια πιο "
"λεπτομερή εξήγηση."

#. (itstool) path: item/p
#: C/scale.py.page:39
msgid ""
"<code>get_value()</code> retrieves the current value of the scale; "
"<code>set_value(value)</code> sets it (if the <code>value</code>, of type "
"<code>float</code>, is outside the minimum or maximum range, it will be "
"clamped to fit inside them). These are methods of the class Gtk.Range."
msgstr ""
"Η <code>get_value()</code> ανακτά την τρέχουσα τιμή της κλίμακας· η "
"<code>set_value(value)</code> την ορίζει (εάν η <code>value</code>, του "
"τύπου <code>float</code>, είναι έξω από την ελάχιστη ή μέγιστη περιοχή, θα "
"δεσμευθεί να προσαρμοστεί μέσα τους). Αυτές είναι οι μέθοδοι της κλάσης Gtk."
"Range."

#. (itstool) path: item/p
#: C/scale.py.page:40
msgid ""
"Use <code>set_draw_value(False)</code> to avoid displaying the current value "
"as a string next to the slider."
msgstr ""
"Χρησιμοποιήστε <code>set_draw_value(False)</code> για αποφυγή εμφάνισης της "
"τρέχουσας τιμής ως συμβολοσειράς δίπλα στον ολισθητή."

#. (itstool) path: item/p
#: C/scale.py.page:41
msgid ""
"To highlight the part of the scale between the origin and the current value:"
msgstr ""
"Για τονισμό μέρους της κλίμακας μεταξύ της αρχικής και της τρέχουσας τιμής:"

#. (itstool) path: item/code
#: C/scale.py.page:42
#, no-wrap
msgid ""
"\n"
"self.h_scale.set_restrict_to_fill_level(False)\n"
"self.h_scale.set_fill_level(self.h_scale.get_value())\n"
"self.h_scale.set_show_fill_level(True)"
msgstr ""
"\n"
"self.h_scale.set_restrict_to_fill_level(False)\n"
"self.h_scale.set_fill_level(self.h_scale.get_value())\n"
"self.h_scale.set_show_fill_level(True)"

#. (itstool) path: item/p
#: C/scale.py.page:46
msgid ""
"in the callback function of the \"value-changed\" signal, so to have the new "
"filling every time the value is changed. These are methods of the class Gtk."
"Range."
msgstr ""
"στην συνάρτηση επανάκλησης του σήματος \"value-changed\", έτσι ώστε να "
"συμπληρώνεται κάθε φορά που αλλάζει η τιμή. Αυτές είναι οι μέθοδοι της "
"κλάσης Gtk.Range."

#. (itstool) path: item/p
#: C/scale.py.page:48
msgid ""
"<code>add_mark(value, position, markup)</code> adds a mark at the "
"<code>value</code> (<code>float</code> or <code>int</code> if that is the "
"precision of the scale), in <code>position</code> (<code>Gtk.PositionType."
"LEFT, Gtk.PositionType.RIGHT, Gtk.PositionType.TOP, Gtk.PositionType.BOTTOM</"
"code>) with text <code>Null</code> or <code>markup</code> in the Pango "
"Markup Language. To clear marks, <code>clear_marks()</code>."
msgstr ""
"<code>add_mark(value, position, markup)</code> προσθέτει ένα σημάδι στην "
"<code>value</code> (<code>float</code> ή <code>int</code> εάν αυτή είναι η "
"ακρίβεια της κλίμακας), σε <code>position</code> (<code>Gtk.PositionType."
"LEFT, Gtk.PositionType.RIGHT, Gtk.PositionType.TOP, Gtk.PositionType.BOTTOM</"
"code>) με κείμενο <code>Null</code> ή <code>markup</code> στη γλώσσα "
"επισήμανσης Pango. Για καθαρισμό σημαδιών, <code>clear_marks()</code>."

#. (itstool) path: item/p
#: C/scale.py.page:49
msgid ""
"<code>set_digits(digits)</code> sets the precision of the scale at "
"<code>digits</code> digits."
msgstr ""
"Ο <code>set_digits(digits)</code> ορίζει την ακρίβεια της κλίμακας σε ψηφία "
"<code>digits</code>."

#. (itstool) path: item/p
#: C/scale.py.page:57
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkScale.html"
"\">GtkScale</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkScale.html"
"\">GtkScale</link>"

#. (itstool) path: item/p
#: C/scale.py.page:58 C/spinbutton.py.page:50
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkAdjustment.html"
"\">GtkAdjustment</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkAdjustment.html"
"\">GtkAdjustment</link>"

#. (itstool) path: item/p
#: C/scale.py.page:59 C/scrolledwindow.js.page:37 C/scrolledwindow.py.page:46
#: C/textview.py.page:100
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/gtk3-Standard-"
"Enumerations.html\">Standard Enumerations</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/gtk3-Standard-"
"Enumerations.html\">Standard Enumerations</link>"

#. (itstool) path: info/title
#: C/scale.vala.page:8
msgctxt "text"
msgid "Scale (Vala)"
msgstr "Κλίμακα (Vala)"

#. (itstool) path: page/code
#: C/scale.vala.page:27
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\tGtk.Scale h_scale;\n"
"\tGtk.Scale v_scale;\n"
"\tGtk.Label label;\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"Scale Example\";\n"
"\t\twindow.set_default_size (400, 300);\n"
"\t\twindow.set_border_width (5);\n"
"\n"
"\t\th_scale = new Gtk.Scale.with_range (Gtk.Orientation.HORIZONTAL, 0.0, 100.0, 5.0);\n"
"\t\th_scale.set_digits (0); //number of decimal places displayed\n"
"\t\th_scale.set_valign (Gtk.Align.START); //horizontal alignment\n"
"\n"
"\t\tvar adjustment = new Gtk.Adjustment (42.0, 0.0, 100.0, 5.0, 10.0, 0.0);\n"
"\t\tv_scale = new Gtk.Scale (Gtk.Orientation.VERTICAL, adjustment);\n"
"\t\tv_scale.set_vexpand(true);\n"
"\n"
"\t\tlabel = new Gtk.Label (\"Move the scale handles...\");\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.set_column_spacing (10); //amount of space between columns\n"
"\t\tgrid.set_column_homogeneous (true); //all columns same width\n"
"\t\tgrid.attach (h_scale, 0, 0, 1, 1);\n"
"\t\tgrid.attach_next_to (v_scale, h_scale, Gtk.PositionType.RIGHT, 1, 1);\n"
"\t\tgrid.attach (label, 0, 1, 2, 1);\n"
"\n"
"\t\th_scale.value_changed.connect (scale_moved);\n"
"\t\tv_scale.value_changed.connect (scale_moved);\n"
"\n"
"\t\twindow.add (grid);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"\n"
"\t/* Callback function for \"value-changed\" signal.\n"
"\t * The paramter refers to the scale which emitted the signal.\n"
"\t * Since we are accessing the values of not one, but two scales,\n"
"\t * we made the ranges instance variables, and ignore the\n"
"\t * parameter.\n"
"\t */\n"
"\tvoid scale_moved (Gtk.Range range) {\n"
"\t\tlabel.set_text (\"Horizontal scale is %.1f; vertical scale is %.1f.\".printf (h_scale.get_value (), v_scale.get_value ()));\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* Αυτή είναι η εφαρμογή. */\n"
"public class MyApplication : Gtk.Application {\n"
"\tGtk.Scale h_scale;\n"
"\tGtk.Scale v_scale;\n"
"\tGtk.Label label;\n"
"\n"
"\t/* Αντικατάσταση του σήματος 'activate' της GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"Scale Example\";\n"
"\t\twindow.set_default_size (400, 300);\n"
"\t\twindow.set_border_width (5);\n"
"\n"
"\t\th_scale = new Gtk.Scale.with_range (Gtk.Orientation.HORIZONTAL, 0.0, 100.0, 5.0);\n"
"\t\th_scale.set_digits (0); //number of decimal places displayed\n"
"\t\th_scale.set_valign (Gtk.Align.START); //horizontal alignment\n"
"\n"
"\t\tvar adjustment = new Gtk.Adjustment (42.0, 0.0, 100.0, 5.0, 10.0, 0.0);\n"
"\t\tv_scale = new Gtk.Scale (Gtk.Orientation.VERTICAL, adjustment);\n"
"\t\tv_scale.set_vexpand(true);\n"
"\n"
"\t\tlabel = new Gtk.Label (\"Move the scale handles...\");\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.set_column_spacing (10); //amount of space between columns\n"
"\t\tgrid.set_column_homogeneous (true); //all columns same width\n"
"\t\tgrid.attach (h_scale, 0, 0, 1, 1);\n"
"\t\tgrid.attach_next_to (v_scale, h_scale, Gtk.PositionType.RIGHT, 1, 1);\n"
"\t\tgrid.attach (label, 0, 1, 2, 1);\n"
"\n"
"\t\th_scale.value_changed.connect (scale_moved);\n"
"\t\tv_scale.value_changed.connect (scale_moved);\n"
"\n"
"\t\twindow.add (grid);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"\n"
"\t/* Callback function for \"value-changed\" signal.\n"
"\t * The paramter refers to the scale which emitted the signal.\n"
"\t * Since we are accessing the values of not one, but two scales,\n"
"\t * we made the ranges instance variables, and ignore the\n"
"\t * parameter.\n"
"\t */\n"
"\tvoid scale_moved (Gtk.Range range) {\n"
"\t\tlabel.set_text (\"Horizontal scale is %.1f; vertical scale is %.1f.\".printf (h_scale.get_value (), v_scale.get_value ()));\n"
"\t}\n"
"}\n"
"\n"
"/* Η κύρια δημιουργεί και εκτελεί την εφαρμογή. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/scale.vala.page:32
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Scale.html\">Gtk.Scale</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Scale.html\">Gtk.Scale</"
"link>"

#. (itstool) path: item/p
#: C/scale.vala.page:33
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Adjustment.html\">Gtk."
"Adjustment</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Adjustment.html\">Gtk."
"Adjustment</link>"

#. (itstool) path: item/p
#: C/scale.vala.page:34
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.PositionType.html\">Gtk."
"PositionType</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.PositionType.html\">Gtk."
"PositionType</link>"

#. (itstool) path: item/p
#: C/scale.vala.page:35
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Orientation.html\">Gtk."
"Orientation</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Orientation.html\">Gtk."
"Orientation</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/scrolledwindow.c.page:25 C/scrolledwindow.js.page:22
#: C/scrolledwindow.py.page:23 C/scrolledwindow.vala.page:23
msgctxt "_"
msgid ""
"external ref='media/scrolledwindow.png' "
"md5='697bb3205d5c4fb0b4ea8db435843157'"
msgstr ""
"external ref='media/scrolledwindow.png' "
"md5='697bb3205d5c4fb0b4ea8db435843157'"

#. (itstool) path: info/title
#: C/scrolledwindow.c.page:8
msgctxt "text"
msgid "ScrolledWindow (C)"
msgstr "ScrolledWindow (C)"

#. (itstool) path: info/desc
#: C/scrolledwindow.c.page:20 C/scrolledwindow.js.page:18
#: C/scrolledwindow.py.page:19 C/scrolledwindow.vala.page:19
msgid "Adds scrollbars to its child widget"
msgstr "Προσθέτει γραμμές κύλισης στο θυγατρικό του γραφικό στοιχείου"

#. (itstool) path: page/title
#: C/scrolledwindow.c.page:23 C/scrolledwindow.js.page:21
#: C/scrolledwindow.py.page:22 C/scrolledwindow.vala.page:22
msgid "ScrolledWindow"
msgstr "Κυλιόμενο παράθυρο (ScrolledWindow)"

#. (itstool) path: page/p
#: C/scrolledwindow.c.page:26 C/scrolledwindow.js.page:23
#: C/scrolledwindow.py.page:24 C/scrolledwindow.vala.page:24
msgid "An image in a scrolled window."
msgstr "Μια εικόνα σε κυλιόμενο παράθυρο."

#. (itstool) path: page/code
#: C/scrolledwindow.c.page:28
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Declare variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *scrolled_window;\n"
"  GtkWidget *image;\n"
"\n"
"  /* Create a window with a title, and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"ScrolledWindow Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 220, 200);\n"
"\n"
"  /* Create the scrolled window. Usually NULL is passed for both parameters so\n"
"   * that it creates the horizontal/vertical adjustments automatically. Setting\n"
"   * the scrollbar policy to automatic allows the scrollbars to only show up\n"
"   * when needed.\n"
"   */\n"
"  scrolled_window = gtk_scrolled_window_new (NULL, NULL);\n"
"  /* Set the border width */\n"
"  gtk_container_set_border_width (GTK_CONTAINER (scrolled_window), 10);\n"
"  /* Extract our desired image from a file that we have */\n"
"  image = gtk_image_new_from_file (\"gnome-image.png\");\n"
"  /* And add it to the scrolled window */\n"
"  gtk_scrolled_window_add_with_viewport (GTK_SCROLLED_WINDOW (scrolled_window), image);\n"
"  /* Set the policy of the horizontal and vertical scrollbars to automatic.\n"
"   * What this means is that the scrollbars are only present if needed.\n"
"   */\n"
"  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window),\n"
"                                  GTK_POLICY_AUTOMATIC,\n"
"                                  GTK_POLICY_AUTOMATIC);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), scrolled_window);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#περιλαμβάνει &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Δήλωση μεταβλητών */\n"
"  GtkWidget *window·\n"
"  GtkWidget *scrolled_window·\n"
"  GtkWidget *image·\n"
"\n"
"  /* Δημιουργία παραθύρου με τίτλο και προεπιλεγμένο μέγεθος */\n"
"  window = gtk_application_window_new (app)·\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"ScrolledWindow Example\")·\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 220, 200)·\n"
"\n"
"  /* Δημιουργία κυλιόμενου παραθύρου. Συνήθως το NULL περνά και για τις δύο παραμέτρους έτσι\n"
"   * δημιουργεί τις οριζόντιες/κάθετες ρυθμίσεις αυτόματα. Ορίζοντας\n"
"   * το είδος της γραμμής κύλισης σε αυτόματη επιτρέπει στις γραμμές κύλισης να εμφανίζονται μόνον\n"
"   * όταν χρειάζονται.\n"
"   */\n"
"  scrolled_window = gtk_scrolled_window_new (NULL, NULL)·\n"
"  /* Ορισμός του πλάτους του περιθωρίου */\n"
"  gtk_container_set_border_width (GTK_CONTAINER (scrolled_window), 10)·\n"
"  /* Εξαγωγή της επιθυμητής μας εικόνας από ένα αρχείο που έχουμε */\n"
"  image = gtk_image_new_from_file (\"gnome-image.png\")·\n"
"  /* Και προσθήκη του στο κυλιόμενο παράθυρο */\n"
"  gtk_scrolled_window_add_with_viewport (GTK_SCROLLED_WINDOW (scrolled_window), image)·\n"
"  /* Ορίζει το είδος των οριζόντιων και κάθετων κυλιόμενων γραμμών σε αυτόματο.\n"
"   * Αυτό σημαίνει ότι οι γραμμές κύλισης εμφανίζονται μόνον όταν χρειάζονται.\n"
"   */\n"
"  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window),\n"
"                                  GTK_POLICY_AUTOMATIC,\n"
"                                  GTK_POLICY_AUTOMATIC)·\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), scrolled_window)·\n"
"\n"
"  gtk_widget_show_all (window)·\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app·\n"
"  int status·\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE)·\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL)·\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv)·\n"
"  g_object_unref (app)·\n"
"\n"
"  return status·\n"
"}\n"

#. (itstool) path: item/p
#: C/scrolledwindow.c.page:37
msgid ""
"<link href=\"http://developer.gnome.org/gtk/stable/gtk3-Standard-"
"Enumerations.html#GtkPolicyType\">GtkPolicyType</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk/stable/gtk3-Standard-"
"Enumerations.html#GtkPolicyType\">GtkPolicyType</link>"

#. (itstool) path: info/title
#: C/scrolledwindow.js.page:8
msgctxt "text"
msgid "ScrolledWindow (JavaScript)"
msgstr "Κυλιόμενο παράθυρο (ScrolledWindow) (JavaScript)"

#. (itstool) path: section/code
#: C/scrolledwindow.js.page:29
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ScrolledWindowExample = new Lang.Class ({\n"
"    Name: 'ScrolledWindow Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application({ application_id: 'org.example.jscrolledwindow' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"        // Create the application window\n"
"        this.window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                    window_position: Gtk.WindowPosition.CENTER,\n"
"                                                    title: \"ScrolledWindow Example\",\n"
"                                                    default_width: 200,\n"
"                                                    default_height: 200,\n"
"                                                    border_width: 10 });\n"
"        // the scrolledwindow\n"
"        this.scrolledWindow = new Gtk.ScrolledWindow();\n"
"        this.scrolledWindow.set_border_width(10);\n"
"        // there is always the scrollbar (otherwise: AUTOMATIC - only if needed - or NEVER)\n"
"        this.scrolledWindow.set_policy(Gtk.PolicyType.ALWAYS, Gtk.PolicyType.ALWAYS);\n"
"        // an image - slightly larger than the window\n"
"        this.image = new Gtk.Image();\n"
"        this.image.set_from_file(\"gnome-image.png\");\n"
"\n"
"        // add the image to the scrolledwindow\n"
"        this.scrolledWindow.add_with_viewport(this.image);\n"
"\n"
"        // add the scrolledwindow to the window\n"
"        this.window.add(this.scrolledWindow);\n"
"        this.window.show_all();\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ScrolledWindowExample();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ScrolledWindowExample = new Lang.Class ({\n"
"    Name: 'ScrolledWindow Example',\n"
"\n"
"    // Δημιουργία αυτής καθεαυτής της εφαρμογής\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application({ application_id: 'org.example.jscrolledwindow' });\n"
"\n"
"        // Σύνδεση σημάτων 'activate' και 'startup' στις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' κατασκευάζει τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Κατασκευή της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this.window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                    window_position: Gtk.WindowPosition.CENTER,\n"
"                                                    title: \"ScrolledWindow Example\",\n"
"                                                    default_width: 200,\n"
"                                                    default_height: 200,\n"
"                                                    border_width: 10 });\n"
"        // το κυλιόμενο παράθυρο\n"
"        this.scrolledWindow = new Gtk.ScrolledWindow();\n"
"        this.scrolledWindow.set_border_width(10);\n"
"        // υπάρχει πάντα η γραμμή κύλισης (αλλιώς: AUTOMATIC - μόνο αν χρειάζεται - ή NEVER)\n"
"        this.scrolledWindow.set_policy(Gtk.PolicyType.ALWAYS, Gtk.PolicyType.ALWAYS);\n"
"        // μια εικόνα - ελαφριά μεγαλύτερη από το παράθυρο\n"
"        this.image = new Gtk.Image();\n"
"        this.image.set_from_file(\"gnome-image.png\");\n"
"\n"
"        // προσθήκη της εικόνας στο κυλιόμενο παράθυρο\n"
"        this.scrolledWindow.add_with_viewport(this.image);\n"
"\n"
"        // προσθήκη του κυλιόμενου παράθυρου στο παράθυρο\n"
"        this.window.add(this.scrolledWindow);\n"
"        this.window.show_all();\n"
"    }\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new ScrolledWindowExample();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/scrolledwindow.js.page:36
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"ScrolledWindow.html\">GtkScrolledWindow</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"ScrolledWindow.html\">GtkScrolledWindow</link>"

#. (itstool) path: info/title
#: C/scrolledwindow.py.page:8
msgctxt "text"
msgid "ScrolledWindow (Python)"
msgstr "Κυλιόμενο παράθυρο (ScrolledWindow) (Python)"

#. (itstool) path: section/code
#: C/scrolledwindow.py.page:30
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(\n"
"            self, title=\"ScrolledWindow Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"\n"
"        # the scrolledwindow\n"
"        scrolled_window = Gtk.ScrolledWindow()\n"
"        scrolled_window.set_border_width(10)\n"
"        # there is always the scrollbar (otherwise: AUTOMATIC - only if needed\n"
"        # - or NEVER)\n"
"        scrolled_window.set_policy(\n"
"            Gtk.PolicyType.ALWAYS, Gtk.PolicyType.ALWAYS)\n"
"\n"
"        # an image - slightly larger than the window...\n"
"        image = Gtk.Image()\n"
"        image.set_from_file(\"gnome-image.png\")\n"
"\n"
"        # add the image to the scrolledwindow\n"
"        scrolled_window.add_with_viewport(image)\n"
"\n"
"        # add the scrolledwindow to the window\n"
"        self.add(scrolled_window)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(\n"
"            self, title=\"ScrolledWindow Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"\n"
"        # the scrolledwindow\n"
"        scrolled_window = Gtk.ScrolledWindow()\n"
"        scrolled_window.set_border_width(10)\n"
"        # there is always the scrollbar (otherwise: AUTOMATIC - only if needed\n"
"        # - or NEVER)\n"
"        scrolled_window.set_policy(\n"
"            Gtk.PolicyType.ALWAYS, Gtk.PolicyType.ALWAYS)\n"
"\n"
"        # an image - slightly larger than the window...\n"
"        image = Gtk.Image()\n"
"        image.set_from_file(\"gnome-image.png\")\n"
"\n"
"        # add the image to the scrolledwindow\n"
"        scrolled_window.add_with_viewport(image)\n"
"\n"
"        # add the scrolledwindow to the window\n"
"        self.add(scrolled_window)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/scrolledwindow.py.page:33
msgid "Useful methods for a ScrolledWindow widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο ScrolledWindow"

#. (itstool) path: item/p
#: C/scrolledwindow.py.page:35
msgid ""
"<code>set_policy(hscrollbar_policy, vscrollbar_policy)</code> where each of "
"the arguments is one of <code>Gtk.Policy.AUTOMATIC, Gtk.Policy.ALWAYS, Gtk."
"Policy.NEVER</code> regulates whether the horizontal and vertical scrollbars "
"should appear: with <code>AUTOMATIC</code> they appear only if needed, "
"<code>ALWAYS</code> and <code>NEVER</code> are self-explanatory."
msgstr ""
"<code>set_policy(hscrollbar_policy, vscrollbar_policy)</code> όπου όλα τα "
"ορίσματα είναι ένα από τα <code>Gtk.Policy.AUTOMATIC, Gtk.Policy.ALWAYS, Gtk."
"Policy.NEVER</code> ρυθμίζει εάν οι οριζόντιες και κάθετες γραμμές κύλισης "
"πρέπει να εμφανίζονται: με <code>AUTOMATIC</code> θα εμφανίζονται μόνο εάν "
"χρειάζεται, <code>ALWAYS</code> και <code>NEVER</code> είναι αυτονόητα."

#. (itstool) path: item/p
#: C/scrolledwindow.py.page:36
msgid ""
"<code>add_with_viewport(widget)</code> is used to add the Gtk.Widget "
"<code>widget</code> without native scrolling capabilities inside the window."
msgstr ""
"<code>add_with_viewport(widget)</code> χρησιμοποιείται για να προσθέσει το "
"Gtk.Widget <code>widget</code> χωρίς εγγενείς δυνατότητες κύλισης μέσα στο "
"παράθυρο."

#. (itstool) path: item/p
#: C/scrolledwindow.py.page:37
msgid ""
"<code>set_placement(window_placement)</code> sets the placement of the "
"contents with respect to the scrollbars for the scrolled window. The options "
"for the argument are <code>Gtk.CornerType.TOP_LEFT</code> (default: the "
"scrollbars are on the bottom and on the right of the window), <code>Gtk."
"CornerType.TOP_RIGHT, Gtk.CornerType.BOTTOM_LEFT, Gtk.CornerType."
"BOTTOM_RIGHT</code>."
msgstr ""
"<code>set_placement(window_placement)</code> ορίζει την τοποθέτηση των "
"περιεχομένων σχετικά με τις γραμμές κύλισης για το κυλιόμενο παράθυρο. Οι "
"επιλογές για το όρισμα είναι <code>Gtk.CornerType.TOP_LEFT</code> "
"(προεπιλογή: οι γραμμές κύλισης είναι στο τέλος και στα δεξιά του "
"παραθύρου), <code>Gtk.CornerType.TOP_RIGHT, Gtk.CornerType.BOTTOM_LEFT, Gtk."
"CornerType.BOTTOM_RIGHT</code>."

#. (itstool) path: item/p
#: C/scrolledwindow.py.page:38
msgid ""
"<code>set_hadjustment(adjustment)</code> and "
"<code>set_vadjustment(adjustment)</code> set the Gtk.Adjustment "
"<code>adjustment</code>. This is the representation of a value with a lower "
"and upper bound, together with step and page increments, and a page size, "
"and it is constructed as <code>Gtk.Adjustment(value, lower, upper, "
"step_increment, page_increment, page_size)</code> where the fields are of "
"type <code>float</code>. (Note that <code>step_increment</code> is not used "
"in this case, it can be set to <code>0</code>.)"
msgstr ""
"<code>set_hadjustment(adjustment)</code> και "
"<code>set_vadjustment(adjustment)</code> ορίζει το Gtk.Adjustment "
"<code>adjustment</code>. Αυτή είναι η αναπαράσταση μιας τιμής με ένα κάτω "
"και ένα πάνω όριο, μαζί με αυξήσεις βήματος και σελίδας και ένα μέγεθος "
"σελίδας και δομείται ως <code>Gtk.Adjustment(value, lower, upper, "
"step_increment, page_increment, page_size)</code> όπου τα πεδία είναι του "
"τύπου <code>float</code>. (Σημειώστε ότι <code>step_increment</code> δεν "
"χρησιμοποιείται σε αυτήν την περίπτωση, μπορεί να οριστεί σε <code>0</code>.)"

#. (itstool) path: item/p
#: C/scrolledwindow.py.page:45 C/textview.py.page:99
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkScrolledWindow.html"
"\">GtkScrolledWindow</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkScrolledWindow.html"
"\">GtkScrolledWindow</link>"

#. (itstool) path: info/title
#: C/scrolledwindow.vala.page:8
msgctxt "text"
msgid "ScrolledWindow (Vala)"
msgstr "Κυλιόμενο παράθυρο (ScrolledWindow) (Vala)"

#. (itstool) path: page/code
#: C/scrolledwindow.vala.page:26
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\t/* Create the window of this application. */\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"ScrolledWindow Example\";\n"
"\t\twindow.set_default_size (200, 200);\n"
"\n"
"\t\tvar scrolled_window = new Gtk.ScrolledWindow (null, null);\n"
"\t\tscrolled_window.set_border_width (10);\n"
"\t\tscrolled_window.add_with_viewport (new Gtk.Image.from_file (\"gnome-image.png\"));\n"
"\t\tscrolled_window.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);\n"
"\n"
"\t\twindow.add (scrolled_window);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* Αυτή είναι η εφαρμογή. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Αντικατάσταση του σήματος 'activate' της GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\t/* Create the window of this application. */\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"ScrolledWindow Example\";\n"
"\t\twindow.set_default_size (200, 200);\n"
"\n"
"\t\tvar scrolled_window = new Gtk.ScrolledWindow (null, null);\n"
"\t\tscrolled_window.set_border_width (10);\n"
"\t\tscrolled_window.add_with_viewport (new Gtk.Image.from_file (\"gnome-image.png\"));\n"
"\t\tscrolled_window.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);\n"
"\n"
"\t\twindow.add (scrolled_window);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* Η κύρια δημιουργεί και εκτελεί την εφαρμογή. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/scrolledwindow.vala.page:31 C/textview.vala.page:37
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ScrolledWindow.html\">Gtk."
"ScrolledWindow</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ScrolledWindow.html\">Gtk."
"ScrolledWindow</link>"

#. (itstool) path: item/p
#: C/scrolledwindow.vala.page:32 C/textview.vala.page:39
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.PolicyType.html\">Gtk."
"PolicyType</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.PolicyType.html\">Gtk."
"PolicyType</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/separator.c.page:24 C/separator.py.page:25 C/separator.vala.page:26
msgctxt "_"
msgid ""
"external ref='media/separator.png' md5='8769b27662ce5c77f99e9ce33751a21a'"
msgstr ""
"external ref='media/separator.png' md5='8769b27662ce5c77f99e9ce33751a21a'"

#. (itstool) path: info/title
#: C/separator.c.page:8
msgctxt "text"
msgid "Separator (C)"
msgstr "Διαχωριστικό (C)"

#. (itstool) path: info/desc
#: C/separator.c.page:19 C/separator.py.page:20 C/separator.vala.page:21
msgid "A separator widget"
msgstr "Ένας διαχωριστής γραφικού στοιχείου"

#. (itstool) path: page/title
#: C/separator.c.page:22 C/separator.py.page:23 C/separator.vala.page:24
msgid "Separator"
msgstr "Διαχωριστής"

#. (itstool) path: page/p
#: C/separator.c.page:25 C/separator.py.page:26 C/separator.vala.page:27
msgid "A horizontal and a vertical separator divide some labels."
msgstr "Οριζόντιος και κάθετος διαχωριστής διαιρούν κάποιες ετικέτες."

#. (itstool) path: section/code
#: C/separator.c.page:31
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"  GtkWidget *label1;\n"
"  GtkWidget *label2;\n"
"  GtkWidget *label3;\n"
"  GtkWidget *hseparator;\n"
"  GtkWidget *vseparator;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Separator Example\");\n"
"\n"
"  label1 = gtk_label_new (\"Below, a horizontal separator.\");\n"
"  label2 = gtk_label_new (\"On the right, a vertical separator.\");\n"
"  label3 = gtk_label_new (\"On the left, a vertical separator.\");\n"
"\n"
"  vseparator = gtk_separator_new (GTK_ORIENTATION_VERTICAL);\n"
"  hseparator = gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);\n"
"\n"
"  grid = gtk_grid_new ();\n"
"\n"
"  gtk_grid_attach (GTK_GRID (grid), label1, 0, 0, 3, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), hseparator, 0, 1, 3, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), label2, 0, 2, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), vseparator, 1, 2, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), label3, 2, 2, 1, 1);\n"
"\n"
"  gtk_grid_set_column_homogeneous (GTK_GRID (grid), TRUE);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"  GtkWidget *label1;\n"
"  GtkWidget *label2;\n"
"  GtkWidget *label3;\n"
"  GtkWidget *hseparator;\n"
"  GtkWidget *vseparator;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Separator Example\");\n"
"\n"
"  label1 = gtk_label_new (\"Below, a horizontal separator.\");\n"
"  label2 = gtk_label_new (\"On the right, a vertical separator.\");\n"
"  label3 = gtk_label_new (\"On the left, a vertical separator.\");\n"
"\n"
"  vseparator = gtk_separator_new (GTK_ORIENTATION_VERTICAL);\n"
"  hseparator = gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);\n"
"\n"
"  grid = gtk_grid_new ();\n"
"\n"
"  gtk_grid_attach (GTK_GRID (grid), label1, 0, 0, 3, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), hseparator, 0, 1, 3, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), label2, 0, 2, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), vseparator, 1, 2, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), label3, 2, 2, 1, 1);\n"
"\n"
"  gtk_grid_set_column_homogeneous (GTK_GRID (grid), TRUE);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"

#. (itstool) path: section/title
#: C/separator.c.page:35 C/separator.py.page:36 C/separator.vala.page:37
msgid "API Reference"
msgstr "Αναφορά API"

#. (itstool) path: item/p
#: C/separator.c.page:39 C/separator.py.page:40
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkSeparator.html"
"\">GtkSeparator</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkSeparator.html"
"\">GtkSeparator</link>"

#. (itstool) path: info/title
#: C/separator.py.page:8
msgctxt "text"
msgid "Seperator (Python)"
msgstr "Διαχωριστής (Python)"

#. (itstool) path: section/code
#: C/separator.py.page:32
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Separator Example\", application=app)\n"
"\n"
"        # three labels\n"
"        label1 = Gtk.Label()\n"
"        label1.set_text(\"Below, a horizontal separator.\")\n"
"\n"
"        label2 = Gtk.Label()\n"
"        label2.set_text(\"On the right, a vertical separator.\")\n"
"\n"
"        label3 = Gtk.Label()\n"
"        label3.set_text(\"On the left, a vertical separator.\")\n"
"\n"
"        # a horizontal separator\n"
"        hseparator = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)\n"
"        # a vertical separator\n"
"        vseparator = Gtk.Separator(orientation=Gtk.Orientation.VERTICAL)\n"
"\n"
"        # a grid to attach labels and separators\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(label1, 0, 0, 3, 1)\n"
"        grid.attach(hseparator, 0, 1, 3, 1)\n"
"        grid.attach(label2, 0, 2, 1, 1)\n"
"        grid.attach(vseparator, 1, 2, 1, 1)\n"
"        grid.attach(label3, 2, 2, 1, 1)\n"
"        grid.set_column_homogeneous(True)\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Separator Example\", application=app)\n"
"\n"
"        # three labels\n"
"        label1 = Gtk.Label()\n"
"        label1.set_text(\"Below, a horizontal separator.\")\n"
"\n"
"        label2 = Gtk.Label()\n"
"        label2.set_text(\"On the right, a vertical separator.\")\n"
"\n"
"        label3 = Gtk.Label()\n"
"        label3.set_text(\"On the left, a vertical separator.\")\n"
"\n"
"        # a horizontal separator\n"
"        hseparator = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)\n"
"        # a vertical separator\n"
"        vseparator = Gtk.Separator(orientation=Gtk.Orientation.VERTICAL)\n"
"\n"
"        # a grid to attach labels and separators\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(label1, 0, 0, 3, 1)\n"
"        grid.attach(hseparator, 0, 1, 3, 1)\n"
"        grid.attach(label2, 0, 2, 1, 1)\n"
"        grid.attach(vseparator, 1, 2, 1, 1)\n"
"        grid.attach(label3, 2, 2, 1, 1)\n"
"        grid.set_column_homogeneous(True)\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: info/title
#: C/separator.vala.page:8
msgctxt "text"
msgid "Separator (Vala)"
msgstr "Διαχωριστικό (Vala)"

#. (itstool) path: section/code
#: C/separator.vala.page:33
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class Application : Gtk.Application {\n"
"\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.window\");\n"
"\t}\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application,\n"
"\t * which is inherited by Gtk.Application. */\n"
"\tpublic override void activate () {\n"
"\n"
"\t\tvar window = new Gtk.Window ();\n"
"\t\twindow.title = \"Separator Example\";\n"
"\n"
"\t\tvar label1 = new Gtk.Label (\"Below, a horizontal separator.\");\n"
"\t\tvar label2 = new Gtk.Label (\"On the right, a vertical separator.\");\n"
"\t\tvar label3 = new Gtk.Label (\"On the left, a vertical separator.\");\n"
"\n"
"\t\tvar hseparator = new Gtk.Separator (Gtk.Orientation.HORIZONTAL);\n"
"\t\tvar vseparator = new Gtk.Separator (Gtk.Orientation.VERTICAL);\n"
"\n"
"\t\tvar grid = new Gtk.Grid();\n"
"\n"
"\t\tgrid.attach (label1, 0, 0, 3, 1);\n"
"\t\tgrid.attach (hseparator, 0, 1, 3, 1);\n"
"\t\tgrid.attach (label2, 0, 2, 1, 1);\n"
"\t\tgrid.attach (vseparator, 1, 2, 1, 1);\n"
"\t\tgrid.attach (label3, 2, 2, 1, 1);\n"
"\n"
"\t\tgrid.set_column_homogeneous(true);\n"
"\n"
"\t\twindow.add (grid);\n"
"\t\tthis.add_window (window);\n"
"\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates the application and runs it.*/\n"
"int main (string[] args) {\n"
"\tvar app = new Application ();\n"
"\treturn app.run (args);\n"
"}\n"
msgstr ""
"/* Αυτή είναι η εφαρμογή. */\n"
"public class Application : Gtk.Application {\n"
"\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.window\");\n"
"\t}\n"
"\n"
"\t/* Αντικατάσταση του σήματος 'activate' της GLib.Application,\n"
"\t * που κληρονομείται από Gtk.Application. */\n"
"\tpublic override void activate () {\n"
"\n"
"\t\tvar window = new Gtk.Window ();\n"
"\t\twindow.title = \"Separator Example\";\n"
"\n"
"\t\tvar label1 = new Gtk.Label (\"Below, a horizontal separator.\");\n"
"\t\tvar label2 = new Gtk.Label (\"On the right, a vertical separator.\");\n"
"\t\tvar label3 = new Gtk.Label (\"On the left, a vertical separator.\");\n"
"\n"
"\t\tvar hseparator = new Gtk.Separator (Gtk.Orientation.HORIZONTAL);\n"
"\t\tvar vseparator = new Gtk.Separator (Gtk.Orientation.VERTICAL);\n"
"\n"
"\t\tvar grid = new Gtk.Grid();\n"
"\n"
"\t\tgrid.attach (label1, 0, 0, 3, 1);\n"
"\t\tgrid.attach (hseparator, 0, 1, 3, 1);\n"
"\t\tgrid.attach (label2, 0, 2, 1, 1);\n"
"\t\tgrid.attach (vseparator, 1, 2, 1, 1);\n"
"\t\tgrid.attach (label3, 2, 2, 1, 1);\n"
"\n"
"\t\tgrid.set_column_homogeneous(true);\n"
"\n"
"\t\twindow.add (grid);\n"
"\t\tthis.add_window (window);\n"
"\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* Η κύρια συνάρτηση δημιουργεί την εφαρμογή και την εκτελεί.*/\n"
"int main (string[] args) {\n"
"\tvar app = new Application ();\n"
"\treturn app.run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/separator.vala.page:41
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window.html\">GtkWindow</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window.html\">Παράθυρο Gtk "
"(GtkWindow)</link>"

#. (itstool) path: item/p
#: C/separator.vala.page:42
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Separator.html"
"\">GtkSeparator</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Separator.html"
"\">Διαχωριστικό Gtk (GtkSeparator)</link>"

#. (itstool) path: item/p
#: C/separator.vala.page:43
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Grid.html\">GtkGrid</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Grid.html\">Πλέγμα Gtk "
"(GtkGrid)</link>"

#. (itstool) path: item/p
#: C/separator.vala.page:44
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Label.html\">GtkLabel</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Label.html\">Ετικέτα Gtk "
"(GtkLabel)</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/set-up-gedit.js.page:25
msgctxt "_"
msgid ""
"external ref='media/geditview.png' md5='f1438295662d95f56fcd1d8200efaaf2'"
msgstr ""
"external ref='media/geditview.png' md5='f1438295662d95f56fcd1d8200efaaf2'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/set-up-gedit.js.page:37
msgctxt "_"
msgid ""
"external ref='media/gediteditor.png' md5='50db1ee8f2c545744879ee9fba5b4b24'"
msgstr ""
"external ref='media/gediteditor.png' md5='50db1ee8f2c545744879ee9fba5b4b24'"

#. (itstool) path: page/title
#: C/set-up-gedit.js.page:19
msgid "Set up gedit for JavaScript development"
msgstr "Εγκατάσταση gedit για ανάπτυξη JavaScript"

#. (itstool) path: page/p
#: C/set-up-gedit.js.page:20
msgid ""
"This tutorial will show you how to set up <link href=\"http://projects.gnome."
"org/gedit/\">gedit</link>, GNOME's basic text editor, so that it has a "
"handful of extra features which are useful for writing JavaScript code."
msgstr ""
"Αυτό το μάθημα δείχνει πώς να εγκαταστήσετε το <link href=\"http://projects."
"gnome.org/gedit/\">gedit</link>, βασικό επεξεργαστή κειμένου του GNOME, έτσι "
"ώστε να έχει κάποια πρόσθετα γνωρίσματα που είναι χρήσιμα για συγγραφή "
"κώδικα JavaScript."

#. (itstool) path: section/title
#: C/set-up-gedit.js.page:23
msgid "Making code clearer"
msgstr "Κάνοντας τον κώδικα σαφέστερο"

#. (itstool) path: section/p
#: C/set-up-gedit.js.page:24
msgid ""
"Click on <gui>Edit</gui> in gedit's menu bar, then click on "
"<gui>Preferences</gui>. You should see something like this:"
msgstr ""
"Πατήστε στην <gui>Επεξεργασία</gui> στη γραμμή μενού του gedit, έπειτα "
"πατήστε <gui>Προτιμήσεις</gui>. Θα πρέπει να δείτε κάτι όπως αυτό:"

#. (itstool) path: section/p
#: C/set-up-gedit.js.page:26
msgid "Here are the options you want to make sure are turned on."
msgstr "Εδώ είναι οι επιλογές που θέλετε να βεβαιωθείτε ότι είναι ενεργές."

#. (itstool) path: item/p
#: C/set-up-gedit.js.page:28
msgid ""
"<gui>Display line numbers</gui> will help you compare the code you type in "
"with the original, and make it easier to see which line is causing an error "
"if there is a bug."
msgstr ""
"<gui>Η εμφάνιση των αριθμών γραμμής</gui> θα σας βοηθήσει να συγκρίνετε τον "
"κώδικα που πληκτρολογήσατε με τον αρχικό και διευκολύνει να δείτε ποια "
"γραμμή προκαλεί λάθος εάν υπάρχει σφάλμα."

#. (itstool) path: item/p
#: C/set-up-gedit.js.page:29
msgid ""
"<gui>Highlight current line</gui> makes it easier to see which line you're "
"on, when you have to go back and forth a lot."
msgstr ""
"<gui>Ο τονισμός της τρέχουσας γραμμής</gui> διευκολύνει να δείτε σε ποια "
"γραμμή είσαστε, όταν πρέπει να πάτε πίσω και μπρος αρκετά."

#. (itstool) path: item/p
#: C/set-up-gedit.js.page:30
msgid ""
"<gui>Highlight matching brackets</gui> helps you make sure you didn't leave "
"out a bracket by accident."
msgstr ""
"<gui>Ο τονισμός παρένθεσης που ταιριάζει</gui> βοηθά να βεβαιωθείτε ότι δεν "
"αφήνετε μια παρένθεση τυχαία."

#. (itstool) path: section/title
#: C/set-up-gedit.js.page:35
msgid "Making editing easier"
msgstr "Διευκολύνοντας την επεξεργασία"

#. (itstool) path: section/p
#: C/set-up-gedit.js.page:36
msgid ""
"In gedit's <gui>Preferences</gui> dialog, click on the <gui>Editor</gui> "
"tab. You should see something like this:"
msgstr ""
"Στον διάλογο του gedit <gui>προτιμήσεις</gui>, πατήστε στην καρτέλα "
"<gui>επεξεργαστής</gui>. Θα πρέπει να δείτε κάτι όπως αυτό:"

#. (itstool) path: section/p
#: C/set-up-gedit.js.page:38
msgid ""
"Here, you want to have <gui>Enable automatic indentation</gui> turned on. "
"This means that when you hit <key>Enter</key> the cursor stays indented as "
"far as the last line was. This is extremely useful when writing JavaScript "
"code, since it uses indentation to make it clearer which parts do what."
msgstr ""
"Εδώ, θέλετε να έχετε ενεργό το <gui>ενεργοποίηση αυτόματης εσοχής</gui>. "
"Αυτί σημαίνει ότι όταν πατάτε <key>εισαγωγή</key> ο δρομέας παραμένει με "
"εσοχή όσο ήταν η τελευταία γραμμή. Αυτό είναι ιδιαίτερα χρήσιμο όταν γράφετε "
"κώδικα JavaScript, αφού χρησιμοποιεί εσοχή για να κάνετε σαφέστερο ποια μέρη "
"κάνουν τι."

#. (itstool) path: note/p
#: C/set-up-gedit.js.page:39
msgid ""
"If you want to share code with other people who write GNOME JavaScript "
"applications, you'll also want to set <gui>Tab width</gui> to 4 and turn on "
"<gui>Insert spaces instead of tabs</gui>."
msgstr ""
"Εάν θέλετε να μοιραστείτε κώδικα με άλλα άτομα που γράφουν εφαρμογές "
"JavaScript για το GNOME, θα θέλετε επίσης να ορίσετε το <gui>πλάτος του "
"στηλοθέτη</gui> στο 4 και να ενεργοποιήσετε την <gui>εισαγωγή κενών αντί για "
"στηλοθέτες</gui>."

#. (itstool) path: info/title
#: C/signals-callbacks.py.page:9
msgctxt "text"
msgid "Signals and callbacks (Python)"
msgstr "Σήματα και επανακλήσεις (Python)"

#. (itstool) path: info/desc
#: C/signals-callbacks.py.page:14
msgid "An explanation of signals and callbacks in GTK+."
msgstr "Μια εξήγηση των σημάτων και των επανακλήσεων στο GTK+."

#. (itstool) path: page/title
#: C/signals-callbacks.py.page:27
msgid "Signals and callbacks"
msgstr "Σήματα και επανακλήσεις"

#. (itstool) path: section/p
#: C/signals-callbacks.py.page:34
msgid ""
"Like most GUI toolkits, GTK+ uses an event-driven programming model. When "
"the user is doing nothing, GTK+ sits in the main loop and waits for input. "
"If the user performs some action - say, a mouse click - then the main loop "
"\"wakes up\" and delivers an event to GTK+."
msgstr ""
"Όπως τα περισσότερα πακέτα εργαλείων GUI, το GTK+ χρησιμοποιεί ένα πρότυπο "
"προγραμματισμού οδηγούμενο από συμβάντα. Όταν ο χρήστης δεν κάνει τίποτα, το "
"GTK+ κάθεται στον κύριο βρόχο και περιμένει για εισαγωγή. Εάν ο χρήστης "
"εκτελέσει κάποια ενέργεια - ας πούμε, πάτημα ποντικιού - τότε ο κύριος "
"βρόχος \"ξυπνά\" και διαβιβάζει ένα συμβάν στο GTK+."

#. (itstool) path: section/p
#: C/signals-callbacks.py.page:36
msgid ""
"When widgets receive an event, they frequently emit one or more signals. "
"Signals notify your program that \"something interesting happened\" by "
"invoking functions you have connected to the signal. Such functions are "
"commonly known as callbacks. When your callbacks are invoked, you would "
"typically take some action. After a callback finishes, GTK+ will return to "
"the main loop and await more user input."
msgstr ""
"Όταν τα γραφικά στοιχεία δέχονται ένα συμβάν, εκπέμπουν συχνά ένα ή "
"περισσότερα σήματα. Τα σήματα ειδοποιούν το πρόγραμμά σας ότι \"κάτι "
"σημαντικό συνέβη\" καλώντας τις συναρτήσεις που έχετε συνδέσει στο σήμα. "
"Τέτοιες συναρτήσεις είναι γενικά γνωστές ως επανακλήσεις. Όταν οι "
"επανακλήσεις σας καλούνται, θα πάρετε τυπικά κάποια ενέργεια. Αφού τελειώσει "
"η επανάκληση, το GTK+ θα επιστρέψει στον κύριο βρόχο και θα περιμένει "
"περισσότερες εισαγωγές του χρήστη."

#. (itstool) path: section/p
#: C/signals-callbacks.py.page:38
msgid ""
"A generic example is: <code>handler_id = widget.connect(\"event\", callback, "
"data)</code>. <code>widget</code> is an instance of a widget we created "
"earlier. Next, the <code>event</code> we are interested in. Each widget has "
"its own particular events which can occur. For instance, if you have a Gtk."
"Button you usually want to connect to the \"clicked\" event: this means that "
"when the button is clicked, the signal is issued. Another example is the "
"<code>notify::property</code> signal: whenever a <link xref=\"properties.py"
"\">property</link> is modified on a GObject, instead of just emitting the "
"<code>notify</code> signal, GObject associates as a detail to this signal "
"emission the name of the property modified. This allows clients who wish to "
"be notified of changes to only one property to filter most events before "
"receiving them. Thirdly, the callback argument is the name of the callback "
"function, which contains the code which runs when signals of the specified "
"type are issued. Finally, the optional data argument includes any data which "
"should be passed when the signal is issued."
msgstr ""
"Ένα γενικό παράδειγμα είναι: <code>handler_id = widget.connect(\"event\", "
"callback, data)</code>. <code>widget</code> είναι ένα στιγμιότυπο του "
"γραφικού στοιχείου που δημιουργήσαμε νωρίτερα. Κατόπιν ενδιαφερόμαστε για "
"το <code>event</code>. Κάθε γραφικό στοιχείο έχει τα δικά του συγκεκριμένα "
"συμβάντα που μπορούν να συμβούν. Για παράδειγμα, εάν έχετε ένα Gtk.Button "
"συνήθως θέλετε να συνδεθείτε με το \"πατημένο\" συμβάν: αυτό σημαίνει ότι "
"όταν το κουμπί πατιέται, το σήμα εκδίδεται. Ένα άλλο παράδειγμα είναι το "
"σήμα <code>notify::property</code>: όποτε μια <link xref=\"properties.py"
"\">ιδιότητα</link> τροποποιείται σε ένα GObject, αντί για απλή εκπομπή του "
"σήματος <code>notify</code>, το GObject συσχετίζει ως μια λεπτομέρεια σε "
"αυτή την εκπομπή σήματος το όνομα της τροποποιημένης ιδιότητας. Αυτό "
"επιτρέπει στους πελάτες που επιθυμούν να ειδοποιηθούν για τις αλλαγές σε "
"μόνο μια ιδιότητα να φιλτράρουν τα περισσότερα συμβάντα πριν τα δεχθούν. "
"Τρίτο, το όρισμα επανάκλησης είναι το όνομα της συνάρτησης επανάκλησης, που "
"περιέχει τον κώδικα που εκτελείται όταν τα σήματα του συγκεκριμένου τύπου "
"εκδίδονται. Τελικά, το προαιρετικό όρισμα δεδομένων περιλαμβάνει οποιαδήποτε "
"δεδομένα που θα έπρεπε μα περαστούν όταν το σήμα εκδίδεται."

#. (itstool) path: section/p
#: C/signals-callbacks.py.page:40
msgid ""
"The function returns a number (the <code>handler_id</code>) that identifies "
"this particular signal-callback pair. This number is required to disconnect "
"from a signal such that the callback function will not be called during any "
"future or currently ongoing emissions of the signal it has been connected "
"to, as in <code>widget.disconnect(handler_id)</code>."
msgstr ""
"Η συνάρτηση επιστρέφει έναν αριθμό (the <code>handler_id</code>) που "
"αναγνωρίζει αυτό το συγκεκριμένο ζευγάρι σήματος-επανάκλησης. Αυτός ο "
"αριθμός απαιτείται για αποσύνδεση από ένα τέτοιο σήμα που η συνάρτηση "
"επανάκλησης δεν θα κληθεί κατά τη διάρκεια οποιωνδήποτε μελλοντικών ή "
"τρεχόντων συνεχιζόμενων εκπομπών του σήματος στο οποίο συνδέθηκε, όπως στο "
"<code>widget.disconnect(handler_id)</code>."

#. (itstool) path: section/p
#: C/signals-callbacks.py.page:47
msgid ""
"<link href=\"http://developer.gnome.org/gobject/stable/signal.html"
"\">Signals</link> in GObject documentation"
msgstr ""
"<link href=\"http://developer.gnome.org/gobject/stable/signal.html\">Σήματα</"
"link> στην τεκμηρίωση GObject"

#. (itstool) path: section/p
#: C/signals-callbacks.py.page:48
msgid ""
"<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/basics."
"html\">Basics - Main loop and Signals</link> in Python GTK+ 3 Tutorial"
msgstr ""
"<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/basics."
"html\">Βασικά - Κύριος βρόχος και σήματα</link> στο μάθημα Python GTK+ 3"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/spinbutton.c.page:26 C/spinbutton.py.page:24 C/spinbutton.vala.page:24
msgctxt "_"
msgid ""
"external ref='media/spinbutton.png' md5='993cbb7d9bd271a329727a926195712a'"
msgstr ""
"external ref='media/spinbutton.png' md5='993cbb7d9bd271a329727a926195712a'"

#. (itstool) path: info/title
#: C/spinbutton.c.page:8
msgctxt "text"
msgid "SpinButton (C)"
msgstr "SpinButton (C)"

#. (itstool) path: info/desc
#: C/spinbutton.c.page:21
msgid "Retrieve an integer or floating point number"
msgstr "Ανάκτηση ακέραιου ή αριθμού κινητής υποδιαστολής"

#. (itstool) path: page/title
#: C/spinbutton.c.page:24 C/spinbutton.js.page:24 C/spinbutton.py.page:23
#: C/spinbutton.vala.page:23
msgid "SpinButton"
msgstr "SpinButton"

#. (itstool) path: page/p
#: C/spinbutton.c.page:27 C/spinbutton.py.page:25 C/spinbutton.vala.page:25
msgid "Choose a number, by entering it or by clicking on the -/+ buttons!"
msgstr "Επιλέξτε έναν αριθμό, πληκτρολογώντας τον ή με κλικ στα κουμπιά -/+!"

#. (itstool) path: page/code
#: C/spinbutton.c.page:29
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* This is the callback function. \n"
" * It is a handler function which reacts to the signal. \n"
" * In this case, it will notify the user the value of their spinbutton \n"
" * as a label.\n"
" */\n"
"static void\n"
"spin_clicked (GtkSpinButton *spinbutton,\n"
"              gpointer       user_data)\n"
"{\n"
"   GtkWidget *label = user_data;\n"
"   gint value = gtk_spin_button_get_value_as_int (spinbutton);\n"
"\n"
"   /* %d - Is used when printing integers.\n"
"    * Note: Using g_strdup_printf returns a string that must be freed. \n"
"    * (In which is done below)\n"
"    */\n"
"   gchar *str = g_strdup_printf (\"The number you selected is %d.\", value);\n"
"   gtk_label_set_text (GTK_LABEL (label), str);\n"
"\n"
"   g_free(str);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Declare variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"  GtkWidget *grid;\n"
"  GtkWidget *spin_button;\n"
"  GtkAdjustment *adjustment;\n"
"\n"
"\n"
"  /* Create a window with a title, a border width, and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"SpinButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 210, 70);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 5);\n"
"\n"
"  /* Create a label to be shown in the window */\n"
"  label = gtk_label_new (\"Choose a number\");\n"
"\n"
"  /* Create an adjustment representing an adjustable bounded value */\n"
"  adjustment = gtk_adjustment_new (0, 0, 100, 1, 0, 0);\n"
"\n"
"\n"
"  /* Create a spin button that is to be as wide as possible */\n"
"  spin_button = gtk_spin_button_new (adjustment, 1, 0);\n"
"  gtk_widget_set_hexpand (spin_button, TRUE);\n"
"  \n"
"  /* Connecting the \"value-changed\" signal for the spinbutton \n"
"   * to the appropriate callback function. \n"
"   */\n"
"  g_signal_connect (spin_button, \n"
"                    \"value-changed\", \n"
"                    G_CALLBACK (spin_clicked), \n"
"                    label);\n"
"\n"
"\n"
"  /* Create a grid and arrange everything accordingly */\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_set_column_spacing (GTK_GRID (grid), 10);\n"
"  gtk_grid_set_column_homogeneous (GTK_GRID (grid), TRUE);\n"
"  gtk_grid_attach (GTK_GRID (grid), spin_button, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), label, 0, 1, 1, 1);\n"
"  \n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* Αυτή είναι η συνάρτηση επανάκλησης. \n"
" * Είναι μια συνάρτηση χειρισμού που αντιδρά στο σήμα. \n"
" * Σε αυτήν την περίπτωση, θα ειδοποιήσει τον χρήστη για την τιμή του αυξομειούμενου πλήκτρου τους \n"
" * ως μια ετικέτα.\n"
" */\n"
"static void\n"
"spin_clicked (GtkSpinButton *spinbutton,\n"
"              gpointer       user_data)\n"
"{\n"
"   GtkWidget *label = user_data;\n"
"   gint value = gtk_spin_button_get_value_as_int (spinbutton);\n"
"\n"
"   /* %d - Is used when printing integers.\n"
"    * Σημείωση: Η χρήση του g_strdup_printf επιστρέφει μια συμβολοσειρά που πρέπει να ελευθερωθεί. \n"
"    * (που γίνεται παρακάτω)\n"
"    */\n"
"   gchar *str = g_strdup_printf (\"The number you selected is %d.\", value);\n"
"   gtk_label_set_text (GTK_LABEL (label), str);\n"
"\n"
"   g_free(str);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Δήλωση μεταβλητών */\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"  GtkWidget *grid;\n"
"  GtkWidget *spin_button;\n"
"  GtkAdjustment *adjustment;\n"
"\n"
"\n"
"  /* Δημιουργία παραθύρου με τίτλο, πλάτος περιγράμματος και προεπιλεγμένο μέγεθος */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"SpinButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 210, 70);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 5);\n"
"\n"
"  /* Δημιουργία μιας ετικέτας για εμφάνιση στο παράθυρο */\n"
"  label = gtk_label_new (\"Choose a number\");\n"
"\n"
"  /* Δημιουργία μιας ρύθμισης που εμφανίζει μια ρυθμίσιμη οριακή τιμή */\n"
"  adjustment = gtk_adjustment_new (0, 0, 100, 1, 0, 0);\n"
"\n"
"\n"
"  /* Δημιουργία ενός κουμπιού περιστροφής που πρόκειται να είναι όσο το δυνατό πιο πλατύ */\n"
"  spin_button = gtk_spin_button_new (adjustment, 1, 0);\n"
"  gtk_widget_set_hexpand (spin_button, TRUE);\n"
"  \n"
"  /* Σύνδεση του σήματος \"value-changed\" για το κουμπί περιστροφής \n"
"   * στην κατάλληλη συνάρτηση επανάκλησης. \n"
"   */\n"
"  g_signal_connect (spin_button, \n"
"                    \"value-changed\", \n"
"                    G_CALLBACK (spin_clicked), \n"
"                    label);\n"
"\n"
"\n"
"  /* Δημιουργία ενός πλέγματος και τακτοποίηση όλων κατάλληλα */\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_set_column_spacing (GTK_GRID (grid), 10);\n"
"  gtk_grid_set_column_homogeneous (GTK_GRID (grid), TRUE);\n"
"  gtk_grid_attach (GTK_GRID (grid), spin_button, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), label, 0, 1, 1, 1);\n"
"  \n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/spinbutton.c.page:37
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkSpinButton.html"
"\">GtkSpinButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkSpinButton.html"
"\">GtkSpinButton</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/spinbutton.js.page:25
msgctxt "_"
msgid ""
"external ref='media/spinbuttonkittens.png' "
"md5='577cce8a902140aacbab73fe8a76a010'"
msgstr ""
"external ref='media/spinbuttonkittens.png' "
"md5='577cce8a902140aacbab73fe8a76a010'"

#. (itstool) path: info/title
#: C/spinbutton.js.page:8
msgctxt "text"
msgid "SpinButton (JavaScript)"
msgstr "Κουμπί αυξομείωσης (SpinButton) (JavaScript)"

#. (itstool) path: info/desc
#: C/spinbutton.js.page:21
msgid "A number entry field that has + and - buttons"
msgstr "Ένα πεδίο καταχώρισης αριθμού που έχει τα κουμπιά + και -"

#. (itstool) path: page/p
#: C/spinbutton.js.page:26
msgid ""
"A SpinButton is not related to a <link xref=\"spinner.js\">Spinner</link>. "
"It's a text entry field which only accepts numbers, and which has plus and "
"minus buttons to let you change the value without having to type anything in."
msgstr ""
"Ένα κουμπί περιστροφής (SpinButton) δεν σχετίζεται με έναν <link xref="
"\"spinner.js\">Μετρητή (Spinner)</link>. Είναι ένα πεδίο εισαγωγής κειμένου "
"που δέχεται μόνο αριθμούς και οι οποίοι έχουν κουμπιά συν και πλην για να "
"σας επιτρέψουν την αλλαγή της τιμής χωρίς να πρέπει να πληκτρολογήσετε κάτι."

#. (itstool) path: page/p
#: C/spinbutton.js.page:27
msgid ""
"It's best used when it's obvious that only a number can be entered into it. "
"In this example, two SpinButtons are used for the number of kittens and "
"number of cans of tuna to give them."
msgstr ""
"Χρησιμοποιείται άριστα όταν είναι φανερό ότι μόνο ένας αριθμός μπορεί να "
"μπει σε αυτό. Σε αυτό το παράδειγμα, δύο SpinButtons χρησιμοποιούνται για "
"τον αριθμό από γατάκια και τον αριθμό των κονσερβών τόννου που τους δίνονται."

#. (itstool) path: section/code
#: C/spinbutton.js.page:44
#, no-wrap
msgid ""
"\n"
"const SpinButtonExample = new Lang.Class({\n"
"    Name: 'SpinButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsspinbutton'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const SpinButtonExample = new Lang.Class({\n"
"    Name: 'SpinButton Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsspinbutton'\n"
"        });\n"
"\n"
"    // Σύνδεση των σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει ένα παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/spinbutton.js.page:69
msgid ""
"All the code for this sample goes in the SpinButtonExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.Application.html\">Gtk.Application</link> for our widgets and window to "
"go in."
msgstr ""
"Όλος ο κώδικας για αυτό το παράδειγμα πηγαίνει στην κλάση SpinButtonExample. "
"Ο παραπάνω κώδικας δημιουργεί μια <link href=\"http://www.roojs.com/seed/"
"gir-1.2-gtk-3.0/gjs/Gtk.Application.html\">Gtk.Application</link> για να "
"μπουν μέσα τα γραφικά στοιχεία μας και τα παράθυρα."

#. (itstool) path: section/code
#: C/spinbutton.js.page:70
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Kitten Feeder\"});\n"
msgstr ""
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Kitten Feeder\"});\n"

#. (itstool) path: section/title
#: C/spinbutton.js.page:85
msgid "Creating the SpinButtons"
msgstr "Δημιουργία των κουμπιών περιστροφής (SpinButtons)"

#. (itstool) path: section/code
#: C/spinbutton.js.page:86
#, no-wrap
msgid ""
"\n"
"        // Create the first spinbutton using a function\n"
"        this._kittens = Gtk.SpinButton.new_with_range (1, 9001, 1);\n"
"        this._kittens.connect (\"value-changed\", Lang.bind (this, this._newValue));\n"
msgstr ""
"\n"
"        // Δημιουργία του πρώτου κουμπιού περιστροφής χρησιμοποιώντας μια συνάρτηση\n"
"        this._kittens = Gtk.SpinButton.new_with_range (1, 9001, 1);\n"
"        this._kittens.connect (\"value-changed\", Lang.bind (this, this._newValue));\n"

#. (itstool) path: section/p
#: C/spinbutton.js.page:92
msgid ""
"We can use the new_with_range function to create a new SpinButton quickly. "
"Its first parameter is the SpinButton's starting value, its second is the "
"maximum value, and its third is how much to increment it when the plus or "
"minus buttons are pressed."
msgstr ""
"Μπορούμε να χρησιμοποιήσουμε τη συνάρτηση new_with_range για τη δημιουργία "
"ενός νέου SpinButton γρήγορα. Η πρώτη του παράμετρος είναι η αρχική τιμή του "
"SpinButton, η δεύτερη του είναι η μέγιστη τιμή και η τρίτη του είναι πόσο θα "
"αυξηθεί όταν πατιούνται τα κουμπιά συν και πλην."

#. (itstool) path: section/p
#: C/spinbutton.js.page:93
msgid ""
"After we create the first SpinButton, we connect its value-changed signal to "
"a function which handles what happens when the number inside either "
"SpinButton changes."
msgstr ""
"Αφού δημιουργήσουμε το πρώτο κουμπί περιστροφής (SpinButton), συνδέουμε το "
"σήμα της αλλαγμένης τιμής σε μια συνάρτηση που χειρίζεται τι συμβαίνει όταν "
"ο αριθμός μέσα στα SpinButton αλλάζει."

#. (itstool) path: section/code
#: C/spinbutton.js.page:95
#, no-wrap
msgid ""
"\n"
"        // Create an adjustment to use for the second spinbutton\n"
"        this._adjustment = new Gtk.Adjustment ({\n"
"            value: 1,\n"
"            lower: 0,\n"
"            upper: 9001,\n"
"            step_increment: 1,\n"
"            page_increment: 10 });\n"
"\n"
"        // Create the second spinbutton\n"
"        this._tuna = new Gtk.SpinButton ({ adjustment: this._adjustment });\n"
"        this._tuna.connect (\"value-changed\", Lang.bind (this, this._newValue));\n"
"\n"
"        // this._tuna.set_digits (1);\n"
"        // this._tuna.set_wrap (true);\n"
msgstr ""
"\n"
"        // Δημιουργία μιας ρύθμισης για χρήση με το δεύτερο κουμπί περιστροφής\n"
"        this._adjustment = new Gtk.Adjustment ({\n"
"            value: 1,\n"
"            lower: 0,\n"
"            upper: 9001,\n"
"            step_increment: 1,\n"
"            page_increment: 10 });\n"
"\n"
"        // Δημιουργία του δεύτερου κουμπιού περιστροφής\n"
"        this._tuna = new Gtk.SpinButton ({ adjustment: this._adjustment });\n"
"        this._tuna.connect (\"value-changed\", Lang.bind (this, this._newValue));\n"
"\n"
"        // this._tuna.set_digits (1);\n"
"        // this._tuna.set_wrap (true);\n"

#. (itstool) path: section/p
#: C/spinbutton.js.page:112
msgid ""
"If you want more fine-grained control over a SpinButton, or want to create a "
"bunch of SpinButtons which all use the same parameters, you can create an "
"object called an <link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.Adjustment.html\">Adjustment</link>. Then you can use that object as a "
"new SpinButton's adjustment property, and it sets all the values at once. "
"Afterwards, you can change all the SpinButtons which use that adjustment by "
"changing the Adjustment object's properties."
msgstr ""
"Εάν θέλετε περισσότερο λεπτομερή έλεγχο σε ένα κουμπί περιστροφής "
"(SpinButton), ή θέλετε να δημιουργήσετε μια ομάδα κουμπιών περιστροφής που "
"όλα χρησιμοποιούν τις ίδιες παραμέτρους, μπορείτε να δημιουργήσετε ένα "
"αντικείμενο που λέγεται <link href=\"http://www.roojs.org/seed/gir-1.2-"
"gtk-3.0/gjs/Gtk.Adjustment.html\">Adjustment</link>. Έπειτα μπορείτε να "
"χρησιμοποιήσετε αυτό το αντικείμενο ως μια νέα ιδιότητα ρύθμισης του "
"κουμπιού περιστροφής και ορίζει όλες τις τιμές μονομιάς. Κατόπιν, μπορείτε "
"να αλλάξετε όλα τα κουμπιά περιστροφής που χρησιμοποιούν αυτήν τη ρύθμιση "
"αλλάζοντας τις ιδιότητες του αντικειμένου ρύθμισης."

#. (itstool) path: section/p
#: C/spinbutton.js.page:113
msgid ""
"The commented-out lines here show things you can do to customize your "
"SpinButton. You can set the number of digits which go after the decimal "
"point, for example, or tell it to wrap the number around if it goes past the "
"upper or lower bounds that you set."
msgstr ""
"Οι σχολιασμένες γραμμές εδώ εμφανίζουν πράγματα που μπορείτε να κάνετε για "
"προσαρμογή του κουμπιού περιστροφής σας σας. Μπορείτε να ορίσετε τον αριθμό "
"των ψηφίων μετά την δεκαδική υποδιαστολή, για παράδειγμα, ή να του πείτε να "
"αναδιπλώσει τον αριθμό εάν ξεπεράσει το άνω ή κάτω όριο που ορίσατε."

#. (itstool) path: note/p
#: C/spinbutton.js.page:114
msgid ""
"For the kitties' sake, please don't use set_digits to allow a decimal number "
"of kittens."
msgstr ""
"Για χάρη των γατιών, παρακαλώ μην χρησιμοποιήσετε set_digits που επιτρέπει "
"δεκαδικό αριθμό γατιών."

#. (itstool) path: section/title
#: C/spinbutton.js.page:118
msgid "Creating the rest of the UI"
msgstr "Δημιουργία της υπόλοιπης διεπαφής χρήστη"

#. (itstool) path: section/code
#: C/spinbutton.js.page:120
#, no-wrap
msgid ""
"\n"
"        // Create the text labels to go with the spinbuttons\n"
"        this._startLabel = new Gtk.Label ({ label: \"There are \" });\n"
"        this._kittenLabel = new Gtk.Label ({ label: \" kitten(s), and \"});\n"
"        this._tunaLabel = new Gtk.Label ({ label: \" can(s) of tuna.\"});\n"
"        this.perKitten = Math.floor((this._tuna.get_value() / this._kittens.get_value()));\n"
"        this._lastLabel = new Gtk.Label ({\n"
"            label: \"That's \" + this.perKitten + \" can(s) of tuna per kitten.\" });\n"
msgstr ""
"\n"
"        // Δημιουργία των ετικετών κειμένου που πάνε με τα κουμπιά περιστροφής\n"
"        this._startLabel = new Gtk.Label ({ label: \"There are \" });\n"
"        this._kittenLabel = new Gtk.Label ({ label: \" kitten(s), and \"});\n"
"        this._tunaLabel = new Gtk.Label ({ label: \" can(s) of tuna.\"});\n"
"        this.perKitten = Math.floor((this._tuna.get_value() / this._kittens.get_value()));\n"
"        this._lastLabel = new Gtk.Label ({\n"
"            label: \"That's \" + this.perKitten + \" can(s) of tuna per kitten.\" });\n"

#. (itstool) path: section/p
#: C/spinbutton.js.page:129
msgid ""
"We create each <link xref=\"label.js\">Label</link> individually, and then "
"string them together along with the SpinButtons. The last label needs to "
"show the number of cans of tuna per kitten, so it has a variable in the "
"middle, which corresponds to an equation that uses the SpinButtons' "
"get_value functions to find out what they're set at. JavaScript's Math "
"function's floor method is used to round the number of cans of tuna per "
"kitten down to the nearest whole number."
msgstr ""
"Δημιουργούμε κάθε <link xref=\"label.js\">ετικέτα</link> ξεχωριστά και "
"έπειτα τις συνδέουμε μαζί με τα κουμπιά περιστροφής. Η τελευταία ετικέτα "
"χρειάζεται να εμφανίσει τον αριθμό των κονσερβών τόννου ανά γατί, έτσι έχει "
"μια μεταβλητή στη μέση, που αντιστοιχεί σε μια εξίσωση που χρησιμοποιεί τις "
"συναρτήσεις get_value των SpinButtons για την εύρεση του ορισμού τους. Η "
"μέθοδος στρογγύλευσης της μαθηματικής συνάρτησης του JavaScript "
"χρησιμοποιείται για στρογγύλευση του αριθμού των κονσερβών ανά γατί στον "
"πλησιέστερο κάτω ακέραιο αριθμό."

#. (itstool) path: section/code
#: C/spinbutton.js.page:131
#, no-wrap
msgid ""
"\n"
"        // Create a grid to put the spinbuttons and their labels in\n"
"        this._spinGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_bottom: 20 });\n"
"\n"
"        // Attach everything to the grid\n"
"        this._spinGrid.attach (this._startLabel, 0, 0, 1, 1);\n"
"        this._spinGrid.attach (this._kittens, 1, 0, 1, 1);\n"
"        this._spinGrid.attach (this._kittenLabel, 2, 0, 1, 1);\n"
"        this._spinGrid.attach (this._tuna, 3, 0, 1, 1);\n"
"        this._spinGrid.attach (this._tunaLabel, 4, 0, 1, 1);\n"
"\n"
"        // Create a main grid to hold it and the last label\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Attach the smaller grid and the last label to the main grid\n"
"        this._mainGrid.attach (this._spinGrid, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._lastLabel, 0, 1, 1, 1);\n"
msgstr ""
"\n"
"        // Δημιουργία ενός πλέγματος για τοποθέτηση μέσα του των κουμπιών περιστροφής και των ετικετών τους\n"
"        this._spinGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_bottom: 20 });\n"
"\n"
"        // Προσάρτηση όλων στο πλέγμα\n"
"        this._spinGrid.attach (this._startLabel, 0, 0, 1, 1);\n"
"        this._spinGrid.attach (this._kittens, 1, 0, 1, 1);\n"
"        this._spinGrid.attach (this._kittenLabel, 2, 0, 1, 1);\n"
"        this._spinGrid.attach (this._tuna, 3, 0, 1, 1);\n"
"        this._spinGrid.attach (this._tunaLabel, 4, 0, 1, 1);\n"
"\n"
"        // Δημιουργία ενός κύριου πλέγματος για να το κρατήσει και της τελευταίας ετικέτας\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Προσάρτηση του μικρότερου πλέγματος και της τελευταίας ετικέτας στο κύριο πλέγμα\n"
"        this._mainGrid.attach (this._spinGrid, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._lastLabel, 0, 1, 1, 1);\n"

#. (itstool) path: section/p
#: C/spinbutton.js.page:155
msgid ""
"Here we use <link xref=\"grid.js\">Grid</link> widgets to keep everything "
"organized. One Grid holds the labels and SpinButtons in order, while the "
"next puts that Grid on top and the final Label on the bottom."
msgstr ""
"Εδώ χρησιμοποιούμε <link xref=\"grid.js\">πλέγμα</link> γραφικών στοιχείων "
"για να κρατάμε το καθετί οργανωμένο. Ένα πλέγμα κρατά τις ετικέτες και τα "
"κουμπιά περιστροφής σε σειρά, ενώ το επόμενο βάζει αυτό το πλέγμα στην "
"κορυφή και την τελική ετικέτα στο τέλος."

#. (itstool) path: section/p
#: C/spinbutton.js.page:156
msgid ""
"There isn't a wrong way to organize things in Grids, so long as you like how "
"it turns out. In this case, the top Grid has a margin on the bottom to keep "
"it evenly spaced from the bottom Label, and the bottom Label is inside a "
"separate Grid so it will be centered relative to the Labels and SpinButtons "
"on the top."
msgstr ""
"Δεν υπάρχει εσφαλμένος τρόπος οργάνωσης των πραγμάτων στα πλέγματα, εφόσον "
"σας αρέσει όπως προκύπτει. Σε αυτήν την περίπτωση, το κορυφαίο πλέγμα έχει "
"ένα περιθώριο στο τέλος για να κρατηθεί σε ομοιόμορφη απόσταση από την "
"ετικέτα τέλους και η ετικέτα τέλους είναι μέσα σε ένα ξεχωριστό πλέγμα έτσι "
"ώστε να κεντραριστεί σχετικά με τις ετικέτες και τα κουμπιά περιστροφής στην "
"κορυφή."

#. (itstool) path: section/code
#: C/spinbutton.js.page:158
#, no-wrap
msgid ""
"\n"
"        // Add the main grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""
"\n"
"        // Προσθήκη του κύριου πλέγματος στο παράθυρο\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"

#. (itstool) path: section/p
#: C/spinbutton.js.page:166 C/switch.js.page:154
msgid ""
"Finally, we add the larger Grid to the window, then tell the window to show "
"itself and all the widgets inside of it."
msgstr ""
"Τελικά, προσθέτουμε το μεγαλύτερο πλέγμα στο παράθυρο, έπειτα λέμε στο "
"παράθυρο να εμφανίσει τον εαυτόν του και όλα τα γραφικά στοιχεία μέσα του."

#. (itstool) path: section/title
#: C/spinbutton.js.page:170
msgid "Function which handles the SpinButtons' numerical values being adjusted"
msgstr ""
"Η συνάρτηση που χειρίζεται τις αριθμητικές τιμές των κουμπιών περιστροφής "
"ρυθμίστηκε"

#. (itstool) path: section/code
#: C/spinbutton.js.page:172
#, no-wrap
msgid ""
"\n"
"    _newValue: function () {\n"
"\n"
"        // Update the label which shows how many cans there are per kitten\n"
"        this.perKitten = Math.floor((this._tuna.get_value() / this._kittens.get_value()))\n"
"        this._lastLabel.set_label (\"That's \" + this.perKitten + \" can(s) of tuna per kitten.\");\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _newValue: function () {\n"
"\n"
"        // Ενημέρωση της ετικέτας που εμφανίζει πόσα κουτιά υπάρχουν ανά γατάκι \n"
"        this.perKitten = Math.floor((this._tuna.get_value() / this._kittens.get_value()))\n"
"        this._lastLabel.set_label (\"That's \" + this.perKitten + \" can(s) of tuna per kitten.\");\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/spinbutton.js.page:183
msgid ""
"Here we update the perKitten variable based on the SpinButtons' new values, "
"and use the set_label property to refresh what _lastLabel shows. Since both "
"SpinButtons have their value-changed signal connected to this function, "
"every time either of the numbers changes this function will update the Label."
msgstr ""
"Εδώ ενημερώνουμε τη μεταβλητή perKitten (ανά γατί) με βάση τις νέες τιμές "
"των κουμπιών περιστροφής και χρησιμοποιούμε την ιδιότητα set_label για "
"ανανέωση της προβολής _lastLabel. Αφού και τα δύο κουμπιά περιστροφής έχουν "
"το σήμα τους αλλαγμένης τιμής συνδεμένο σε αυτή τη συνάρτηση, κάθε φορά "
"οποιοδήποτε από τους αριθμούς αλλάζει αυτή τη συνάρτηση θα ενημερώσει την "
"ετικέτα."

#. (itstool) path: section/code
#: C/spinbutton.js.page:185
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new SpinButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new SpinButtonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/spinbutton.js.page:190
msgid ""
"Finally, we create a new instance of the finished SpinButtonExample class, "
"and set the application running."
msgstr ""
"Τελικά, δημιουργούμε ένα νέο παράδειγμα της ολοκληρωμένης κλάσης παράδειγμα "
"κουμπιού περιστροφής (SpinButtonExample) και εκτελούμε την εφαρμογή."

#. (itstool) path: section/code
#: C/spinbutton.js.page:195
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const SpinButtonExample = new Lang.Class({\n"
"    Name: 'SpinButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsspinbutton'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Kitten Feeder\"});\n"
"\n"
"        // Create the first spinbutton using a function\n"
"        this._kittens = Gtk.SpinButton.new_with_range (1, 9001, 1);\n"
"        this._kittens.connect (\"value-changed\", Lang.bind (this, this._newValue));\n"
"\n"
"        // Create an adjustment to use for the second spinbutton\n"
"        this._adjustment = new Gtk.Adjustment ({\n"
"            value: 1,\n"
"            lower: 0,\n"
"            upper: 9001,\n"
"            step_increment: 1,\n"
"            page_increment: 10 });\n"
"\n"
"        // Create the second spinbutton\n"
"        this._tuna = new Gtk.SpinButton ({ adjustment: this._adjustment });\n"
"        this._tuna.connect (\"value-changed\", Lang.bind (this, this._newValue));\n"
"\n"
"        // this._tuna.set_digits (1);\n"
"        // this._tuna.set_wrap (true);\n"
"\n"
"        // Create the text labels to go with the spinbuttons\n"
"        this._startLabel = new Gtk.Label ({ label: \"There are \" });\n"
"        this._kittenLabel = new Gtk.Label ({ label: \" kitten(s), and \"});\n"
"        this._tunaLabel = new Gtk.Label ({ label: \" can(s) of tuna.\"});\n"
"        this.perKitten = Math.floor((this._tuna.get_value() / this._kittens.get_value()));\n"
"        this._lastLabel = new Gtk.Label ({\n"
"            label: \"That's \" + this.perKitten + \" can(s) of tuna per kitten.\" });\n"
"\n"
"        // Create a grid to put the spinbuttons and their labels in\n"
"        this._spinGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_bottom: 20 });\n"
"\n"
"        // Attach everything to the grid\n"
"        this._spinGrid.attach (this._startLabel, 0, 0, 1, 1);\n"
"        this._spinGrid.attach (this._kittens, 1, 0, 1, 1);\n"
"        this._spinGrid.attach (this._kittenLabel, 2, 0, 1, 1);\n"
"        this._spinGrid.attach (this._tuna, 3, 0, 1, 1);\n"
"        this._spinGrid.attach (this._tunaLabel, 4, 0, 1, 1);\n"
"\n"
"        // Create a main grid to hold it and the last label\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Attach the smaller grid and the last label to the main grid\n"
"        this._mainGrid.attach (this._spinGrid, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._lastLabel, 0, 1, 1, 1);\n"
"\n"
"        // Add the main grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _newValue: function () {\n"
"\n"
"        // Update the label which shows how many cans there are per kitten\n"
"        this.perKitten = Math.floor((this._tuna.get_value() / this._kittens.get_value()))\n"
"        this._lastLabel.set_label (\"That's \" + this.perKitten + \" can(s) of tuna per kitten.\");\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new SpinButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const SpinButtonExample = new Lang.Class({\n"
"    Name: 'SpinButton Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsspinbutton'\n"
"        });\n"
"\n"
"    // Σύνδεση των σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει ένα παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Kitten Feeder\"});\n"
"\n"
"        // Δημιουργία του πρώτου κουμπιού περιστροφής  χρησιμοποιώντας μια συνάρτηση\n"
"        this._kittens = Gtk.SpinButton.new_with_range (1, 9001, 1);\n"
"        this._kittens.connect (\"value-changed\", Lang.bind (this, this._newValue));\n"
"\n"
"        // Δημιουργία μιας ρύθμισης για χρήση με το δεύτερο κουμπί περιστροφής\n"
"        this._adjustment = new Gtk.Adjustment ({\n"
"            value: 1,\n"
"            lower: 0,\n"
"            upper: 9001,\n"
"            step_increment: 1,\n"
"            page_increment: 10 });\n"
"\n"
"        // Δημιουργία του δεύτερου κουμπιού περιστροφής\n"
"        this._tuna = new Gtk.SpinButton ({ adjustment: this._adjustment });\n"
"        this._tuna.connect (\"value-changed\", Lang.bind (this, this._newValue));\n"
"\n"
"        // this._tuna.set_digits (1);\n"
"        // this._tuna.set_wrap (true);\n"
"\n"
"        // Δημιουργία των ετικετών κειμένου που πηγαίνουν με τα κουμπιά περιστροφής\n"
"        this._startLabel = new Gtk.Label ({ label: \"There are \" });\n"
"        this._kittenLabel = new Gtk.Label ({ label: \" kitten(s), and \"});\n"
"        this._tunaLabel = new Gtk.Label ({ label: \" can(s) of tuna.\"});\n"
"        this.perKitten = Math.floor((this._tuna.get_value() / this._kittens.get_value()));\n"
"        this._lastLabel = new Gtk.Label ({\n"
"            label: \"That's \" + this.perKitten + \" can(s) of tuna per kitten.\" });\n"
"\n"
"        // Δημιουργία ενός πλέγματος για τοποθέτηση μέσα του των κουμπιών αυξομείωσης και των ετικετών τους\n"
"        this._spinGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_bottom: 20 });\n"
"\n"
"        // Προσάρτηση όλων στο πλέγμα\n"
"        this._spinGrid.attach (this._startLabel, 0, 0, 1, 1);\n"
"        this._spinGrid.attach (this._kittens, 1, 0, 1, 1);\n"
"        this._spinGrid.attach (this._kittenLabel, 2, 0, 1, 1);\n"
"        this._spinGrid.attach (this._tuna, 3, 0, 1, 1);\n"
"        this._spinGrid.attach (this._tunaLabel, 4, 0, 1, 1);\n"
"\n"
"        // Δημιουργία κύριου πλέγματος για να κρατήσει αυτό και την τελευταία ετικέτα\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Προσάρτηση του μικρότερου πλέγματος και της τελευταίας ετικέτας στο κύριο πλέγμα\n"
"        this._mainGrid.attach (this._spinGrid, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._lastLabel, 0, 1, 1, 1);\n"
"\n"
"        // Προσθήκη του κύριου πλέγματος στο παράθυρο\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _newValue: function () {\n"
"\n"
"        // Ενημέρωση της ετικέτας που εμφανίζει πόσα κουτιά υπάρχουν ανά γατάκι\n"
"        this.perKitten = Math.floor((this._tuna.get_value() / this._kittens.get_value()))\n"
"        this._lastLabel.set_label (\"That's \" + this.perKitten + \" can(s) of tuna per kitten.\");\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new SpinButtonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/spinbutton.js.page:206
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.SpinButton."
"html\">Gtk.SpinButton</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.SpinButton."
"html\">Gtk.SpinButton</link>"

#. (itstool) path: info/title
#: C/spinbutton.py.page:8
msgctxt "text"
msgid "SpinButton (Python)"
msgstr "Κουμπί περιστροφής (SpinButton) (Python)"

#. (itstool) path: info/desc
#: C/spinbutton.py.page:20
msgid "Retrieve an integer or floating-point number from the user."
msgstr "Ανάκτηση ακέραιου ή αριθμού κινητής υποδιαστολής από τον χρήστη."

#. (itstool) path: section/code
#: C/spinbutton.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"SpinButton Example\", application=app)\n"
"        self.set_default_size(210, 70)\n"
"        self.set_border_width(5)\n"
"\n"
"        # an adjustment (initial value, min value, max value,\n"
"        # step increment - press cursor keys or +/- buttons to see!,\n"
"        # page increment - not used here,\n"
"        # page size - not used here)\n"
"        ad = Gtk.Adjustment(0, 0, 100, 1, 0, 0)\n"
"\n"
"        # a spin button for integers (digits=0)\n"
"        self.spin = Gtk.SpinButton(adjustment=ad, climb_rate=1, digits=0)\n"
"        # as wide as possible\n"
"        self.spin.set_hexpand(True)\n"
"\n"
"        # we connect the signal \"value-changed\" emitted by the spinbutton with the callback\n"
"        # function spin_selected\n"
"        self.spin.connect(\"value-changed\", self.spin_selected)\n"
"\n"
"        # a label\n"
"        self.label = Gtk.Label()\n"
"        self.label.set_text(\"Choose a number\")\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(self.spin, 0, 0, 1, 1)\n"
"        grid.attach(self.label, 0, 1, 2, 1)\n"
"\n"
"        self.add(grid)\n"
"\n"
"    # callback function: the signal of the spinbutton is used to change the\n"
"    # text of the label\n"
"    def spin_selected(self, event):\n"
"        self.label.set_text(\n"
"            \"The number you selected is \" + str(self.spin.get_value_as_int()) + \".\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"SpinButton Example\", application=app)\n"
"        self.set_default_size(210, 70)\n"
"        self.set_border_width(5)\n"
"\n"
"        # an adjustment (initial value, min value, max value,\n"
"        # step increment - press cursor keys or +/- buttons to see!,\n"
"        # page increment - not used here,\n"
"        # page size - not used here)\n"
"        ad = Gtk.Adjustment(0, 0, 100, 1, 0, 0)\n"
"\n"
"        # a spin button for integers (digits=0)\n"
"        self.spin = Gtk.SpinButton(adjustment=ad, climb_rate=1, digits=0)\n"
"        # as wide as possible\n"
"        self.spin.set_hexpand(True)\n"
"\n"
"        # we connect the signal \"value-changed\" emitted by the spinbutton with the callback\n"
"        # function spin_selected\n"
"        self.spin.connect(\"value-changed\", self.spin_selected)\n"
"\n"
"        # a label\n"
"        self.label = Gtk.Label()\n"
"        self.label.set_text(\"Choose a number\")\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(self.spin, 0, 0, 1, 1)\n"
"        grid.attach(self.label, 0, 1, 2, 1)\n"
"\n"
"        self.add(grid)\n"
"\n"
"    # callback function: the signal of the spinbutton is used to change the\n"
"    # text of the label\n"
"    def spin_selected(self, event):\n"
"        self.label.set_text(\n"
"            \"The number you selected is \" + str(self.spin.get_value_as_int()) + \".\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/spinbutton.py.page:35
msgid "Useful methods for a SpinButton widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο κουμπιού περιστροφής"

#. (itstool) path: section/p
#: C/spinbutton.py.page:36
msgid ""
"A Gtk.Adjustment is needed to construct the Gtk.SpinButton. This is the "
"representation of a value with a lower and upper bound, together with step "
"and page increments, and a page size, and it is constructed as <code>Gtk."
"Adjustment(value, lower, upper, step_increment, page_increment, page_size)</"
"code> where the fields are of type <code>float</code>; <code>step_increment</"
"code> is the increment/decrement that is obtained by using the cursor keys "
"or the buttons of the spinbutton. Note that <code>page_increment</code> and "
"<code>page_size</code> are not used in this case, and they should be set to "
"<code>0</code>."
msgstr ""
"Μια Gtk.Adjustment απαιτείται για δόμηση του Gtk.SpinButton. Αυτή η "
"αναπαράσταση μιας τιμής με κάτω και άνω όριο, μαζί με βήμα και αυξήσεις "
"σελίδας και μέγεθος σελίδας και δομείται ως <code>Gtk.Adjustment(value, "
"lower, upper, step_increment, page_increment, page_size)</code> όπου τα "
"πεδία είναι τύπου <code>float</code>· <code>step_increment</code> είναι η "
"αύξηση/μείωση που παίρνεται χρησιμοποιώντας τα πλήκτρα δρομέα ή τα κουμπιά "
"του κουμπιού περιστροφής. Σημειώστε ότι <code>page_increment</code> και "
"<code>page_size</code> δεν χρησιμοποιούνται σε αυτήν την περίπτωση και δεν "
"πρέπει να ορίζονται σε <code>0</code>."

#. (itstool) path: section/p
#: C/spinbutton.py.page:37
msgid ""
"In line 23 the signal <code>\"value-changed\"</code> is connected to the "
"callback function <code>spin_selected()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"Στη γραμμή 23 το σήμα <code>\"value-changed\"</code> συνδέεται με τη "
"συνάρτηση επανάκλησης <code>spin_selected()</code> χρησιμοποιώντας "
"<code><var>widget</var>.connect(<var>signal</var>, <var>callback function</"
"var>)</code>. Δείτε <link xref=\"signals-callbacks.py\"/> για μια πιο "
"λεπτομερή εξήγηση."

#. (itstool) path: item/p
#: C/spinbutton.py.page:39
msgid ""
"If you want the value of the spinbutton to wrap around when they exceed the "
"maximum or the minimum, set <code>set_wrap(True)</code>. The <code>\"wrapped"
"\"</code> signal is emitted when this happens."
msgstr ""
"Εάν θέλετε η τιμή του κουμπιούπεριστροφής να αναδιπλώνεται όταν υπερβαίνει "
"το μέγιστο ή το ελάχιστο, ορίστε <code>set_wrap(True)</code>. Το σήμα <code>"
"\"wrapped\"</code> εκπέμπεται όταν συμβαίνει αυτό."

#. (itstool) path: item/p
#: C/spinbutton.py.page:40
msgid ""
"<code>set_digits(digits)</code> sets the precision to be displayed by the "
"spinbutton, up to 20 digits."
msgstr ""
"<code>set_digits(digits)</code> ορίζει την εμφανιζόμενη ακρίβεια από το "
"κουμπί περιστροφής, μέχρι 20 ψηφία."

#. (itstool) path: item/p
#: C/spinbutton.py.page:41
msgid ""
"To get the value of the spinbutton as an integer, use "
"<code>get_value_as_int()</code>."
msgstr ""
"Για τη λήψη της τιμής του κουμπιού περιστροφής ως ακεραίου, χρησιμοποιήστε "
"<code>get_value_as_int()</code>."

#. (itstool) path: item/p
#: C/spinbutton.py.page:49
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkSpinButton.html"
"\">GtkSpinButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkSpinButton.html"
"\">GtkSpinButton</link>"

#. (itstool) path: info/title
#: C/spinbutton.vala.page:8
msgctxt "text"
msgid "SpinButton (Vala)"
msgstr "Κουμπί περιστροφής (SpinButton) (Vala)"

#. (itstool) path: info/desc
#: C/spinbutton.vala.page:20
msgid "Retrieve an integer or floating point number."
msgstr "Ανάκτηση ακέραιου ή αριθμού κινητής υποδιαστολής."

#. (itstool) path: page/code
#: C/spinbutton.vala.page:27
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\tGtk.Label label;\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"SpinButton Example\";\n"
"\t\twindow.set_default_size (210, 70);\n"
"\t\twindow.set_border_width (5);\n"
"\n"
"\t\tvar spinbutton = new Gtk.SpinButton.with_range (0, 100, 1);\n"
"\t\tspinbutton.set_hexpand (true);\n"
"\n"
"\t\tlabel = new Gtk.Label (\"Choose a number\");\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.attach (spinbutton, 0, 0, 1, 1);\n"
"\t\tgrid.attach (label, 0, 1, 1, 1);\n"
"\n"
"\t\tspinbutton.value_changed.connect (this.value_changed_cb);\n"
"\n"
"\t\twindow.add (grid);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"\n"
"\tvoid value_changed_cb (Gtk.SpinButton spin) {\n"
"\t\tlabel.set_text (\"The number you selected is %.0f.\".printf (spin.get_value()));\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* Αυτή είναι η εφαρμογή. */\n"
"public class MyApplication : Gtk.Application {\n"
"\tGtk.Label label;\n"
"\n"
"\t/* Αντικατάσταση του σήματος 'activate' της GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"SpinButton Example\";\n"
"\t\twindow.set_default_size (210, 70);\n"
"\t\twindow.set_border_width (5);\n"
"\n"
"\t\tvar spinbutton = new Gtk.SpinButton.with_range (0, 100, 1);\n"
"\t\tspinbutton.set_hexpand (true);\n"
"\n"
"\t\tlabel = new Gtk.Label (\"Choose a number\");\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.attach (spinbutton, 0, 0, 1, 1);\n"
"\t\tgrid.attach (label, 0, 1, 1, 1);\n"
"\n"
"\t\tspinbutton.value_changed.connect (this.value_changed_cb);\n"
"\n"
"\t\twindow.add (grid);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"\n"
"\tvoid value_changed_cb (Gtk.SpinButton spin) {\n"
"\t\tlabel.set_text (\"The number you selected is %.0f.\".printf (spin.get_value()));\n"
"\t}\n"
"}\n"
"\n"
"/* Η κύρια δημιουργεί και εκτελεί την εφαρμογή. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/spinbutton.vala.page:32
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.SpinButton.html\">Gtk."
"SpinButton</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.SpinButton.html\">Gtk."
"SpinButton</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/spinner.c.page:24 C/spinner.js.page:22 C/spinner.py.page:23
#: C/spinner.vala.page:22
msgctxt "_"
msgid "external ref='media/spinner.png' md5='d04f2d81f1d72c6c2f97e8729947dfed'"
msgstr ""
"external ref='media/spinner.png' md5='d04f2d81f1d72c6c2f97e8729947dfed'"

#. (itstool) path: info/title
#: C/spinner.c.page:8
msgctxt "text"
msgid "Spinner (C)"
msgstr "Μετρητής (Spinner)(C)"

#. (itstool) path: info/desc
#: C/spinner.c.page:19 C/spinner.js.page:18 C/spinner.py.page:19
#: C/spinner.vala.page:18
msgid "A spinner animation"
msgstr "Κίνηση μετρητή"

#. (itstool) path: page/title
#: C/spinner.c.page:22 C/spinner.js.page:21 C/spinner.py.page:22
#: C/spinner.vala.page:21
msgid "Spinner"
msgstr "Μετρητής"

#. (itstool) path: page/p
#: C/spinner.c.page:25 C/spinner.js.page:23 C/spinner.py.page:24
#: C/spinner.vala.page:23
msgid "This Spinner is stopped and started by pressing the spacebar."
msgstr "Αυτός ο μετρητής σταματά και ξεκινά πατώντας το πλήκτρο διαστήματος."

#. (itstool) path: page/code
#: C/spinner.c.page:27
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
" \n"
"\n"
"\n"
" /*Global variable used to indicate active state of the\n"
"spinner. TRUE = active, FALSE = not-active. This is because \n"
"there isn't a current function for C that does this for us*/\n"
"gboolean active;  \n"
" \n"
"\n"
"\n"
"/*This is the callback function. It is a handler function \n"
"which reacts to the signal. In this case, it will cause the \n"
"spinner to start and stop according to how many times the user \n"
"presses the spacebar.*/ \n"
"static gboolean\n"
"key_pressed_event (GtkWidget *widget,\n"
"                   GdkEvent  *event,\n"
"                   gpointer   user_data)\n"
"{\n"
"  GtkWidget *spinner = user_data;\n"
"  guint keyval;\n"
"  \n"
"  /*Extracts the keyval from an event. And stores it in the  variable \n"
"  \"keyval\" (we give the function the address). In this case, the \n"
"  event is GdkEventKey, a key press event*/\n"
"  gdk_event_get_keyval (event, &amp;keyval);  \n"
"\n"
"  /*Grabbing the boolean value from the spinner*/\n"
"  g_object_get (GTK_SPINNER (spinner), \"active\", &amp;active, NULL);\n"
"  \n"
"  if (keyval == GDK_KEY_space) {\n"
"     if (active) {\n"
"         gtk_spinner_stop (GTK_SPINNER (spinner));\n"
"     }\n"
"     else {\n"
"         gtk_spinner_start (GTK_SPINNER (spinner));\n"
"     } \n"
"  }\n"
"  \n"
"return TRUE;\n"
"}\n"
" \n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *spinner;\n"
" \n"
"  /*Create a window with a title, border width and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
" \n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Spinner Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);\n"
"  gtk_container_set_border_width (GTK_CONTAINER(window), 30);\n"
" \n"
"  /*Create a spinner, with extra horizontal and vertical space*/\n"
"  spinner = gtk_spinner_new ();\n"
"  gtk_spinner_start (GTK_SPINNER (spinner));\n"
"  \n"
"  gtk_container_add (GTK_CONTAINER (window), spinner);\n"
" \n"
"  /*Connecting the key-press-event signal to the callback*/\n"
"  g_signal_connect (GTK_WINDOW (window), \"key-press-event\", \n"
"                    G_CALLBACK (key_pressed_event), spinner);\n"
" \n"
"  gtk_widget_show_all (window);\n"
"}\n"
" \n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
" \n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
" \n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
" \n"
"\n"
"\n"
" /*Καθολική μεταβλητή που χρησιμοποιείται για να δείξει την ενεργή κατάσταση του \n"
"μετρητή. TRUE = active, FALSE = not-active. Αυτό συμβαίνει επειδή \n"
"δεν υπάρχει μια τρέχουσα συνάρτηση για την C που το κάνει για μας */\n"
"gboolean active;  \n"
" \n"
"\n"
"\n"
"/*Αυτή είναι η συνάρτηση επανάκλησης . Είναι μια συνάρτηση χειρισμού \n"
"που αντιδρά στο σήμα. Σε αυτήν την περίπτωση, θα προκαλέσει \n"
"την εκκίνηση και παύση του μετρητή ανάλογα με το πόσες φορές ο χρήστης \n"
"πατά το πλήκτρο διαστήματος.*/ \n"
"static gboolean\n"
"key_pressed_event (GtkWidget *widget,\n"
"                   GdkEvent  *event,\n"
"                   gpointer   user_data)\n"
"{\n"
"  GtkWidget *spinner = user_data;\n"
"  guint keyval;\n"
"  \n"
"  /*Εξάγει την keyval από ένα συμβάν και την αποθηκεύει στη μεταβλητή \n"
"  \"keyval\" (δίνουμε στη συνάρτηση τη διεύθυνση). Σε αυτήν την περίπτωση, το \n"
"  συμβά είναι GdkEventKey, ένα συμβάν πατήματος πλήκτρου*/\n"
"  gdk_event_get_keyval (event, &amp;keyval);  \n"
"\n"
"  /*Λήψη της τιμής Μπουλ από τονμετρητή*/\n"
"  g_object_get (GTK_SPINNER (spinner), \"active\", &amp;active, NULL);\n"
"  \n"
"  if (keyval == GDK_KEY_space) {\n"
"     if (active) {\n"
"         gtk_spinner_stop (GTK_SPINNER (spinner));\n"
"     }\n"
"     else {\n"
"         gtk_spinner_start (GTK_SPINNER (spinner));\n"
"     } \n"
"  }\n"
"  \n"
"return TRUE;\n"
"}\n"
" \n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *spinner;\n"
" \n"
"  /*Δημιουργία παραθύρου με τίτλο, πλάτος περιγράμματος και προεπιλεγμένο μέγεθος*/\n"
"  window = gtk_application_window_new (app);\n"
" \n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Spinner Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);\n"
"  gtk_container_set_border_width (GTK_CONTAINER(window), 30);\n"
" \n"
"  /*Δημιουργία ενός μετρητή, με πρόσθετο οριζόντιο και κάθετο χώρο*/\n"
"  spinner = gtk_spinner_new ();\n"
"  gtk_spinner_start (GTK_SPINNER (spinner));\n"
"  \n"
"  gtk_container_add (GTK_CONTAINER (window), spinner);\n"
" \n"
"  /*Σύνδεση του σήματος key-press-event με τη συνάρτηση επανάκλησης*/\n"
"  g_signal_connect (GTK_WINDOW (window), \"key-press-event\", \n"
"                    G_CALLBACK (key_pressed_event), spinner);\n"
" \n"
"  gtk_widget_show_all (window);\n"
"}\n"
" \n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
" \n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
" \n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/spinner.c.page:35
msgid ""
"<link href=\"http://developer.gnome.org/gobject/stable/gobject-The-Base-"
"Object-Type.html#g-object-get\">GObject</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gobject/stable/gobject-The-Base-"
"Object-Type.html#g-object-get\">GObject</link>"

#. (itstool) path: item/p
#: C/spinner.c.page:36 C/togglebutton.c.page:38
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkSpinner.html"
"\">GtkSpinner</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkSpinner.html"
"\">GtkSpinner</link>"

#. (itstool) path: info/title
#: C/spinner.js.page:8
msgctxt "text"
msgid "Spinner (JavaScript)"
msgstr "Μετρητής (Spinner ) (JavaScript)"

#. (itstool) path: page/code
#: C/spinner.js.page:25
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Gdk = imports.gi.Gdk;\n"
"const Lang = imports.lang;\n"
"\n"
"const SpinnerExample = new Lang.Class ({\n"
"    Name: 'Spinner Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jsspinner',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Spinner Example\",\n"
"            default_height: 200,\n"
"            default_width: 200,\n"
"            border_width: 30 });\n"
"\n"
"        // Create a spinner which starts spinning automatically\n"
"        this._spinner = new Gtk.Spinner ({active: true});\n"
"        this._window.add (this._spinner);\n"
"\n"
"        // Connect a keypress event to the function that makes it start or stop spinning\n"
"        this._window.connect(\"key-press-event\", Lang.bind(this, this._onKeyPress));\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onKeyPress: function(widget, event) {\n"
"\n"
"        // Get the value of the key that was pressed\n"
"        let keyval = event.get_keyval()[1];\n"
"\n"
"        // If it was the spacebar, toggle the spinner to start or stop\n"
"        if (keyval == Gdk.KEY_space) {\n"
"            if (this._spinner.active == true)\n"
"                this._spinner.stop();\n"
"            else\n"
"                this._spinner.start();\n"
"        }\n"
"    }\n"
"\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new SpinnerExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Gdk = imports.gi.Gdk;\n"
"const Lang = imports.lang;\n"
"\n"
"const SpinnerExample = new Lang.Class ({\n"
"    Name: 'Spinner Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jsspinner',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"        // Σύνδεση των σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' signal παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function () {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Spinner Example\",\n"
"            default_height: 200,\n"
"            default_width: 200,\n"
"            border_width: 30 });\n"
"\n"
"        // Δημιουργία ενός μετρητή που ξεκινά αυτόματα την αυξομείωση\n"
"        this._spinner = new Gtk.Spinner ({active: true});\n"
"        this._window.add (this._spinner);\n"
"\n"
"        // Σύνδεση ενός συμβάντος πατήματος πλήκτρου με τη συνάρτηση που την κάνει να ξεκινά ή να σταματά την μέτρηση\n"
"        this._window.connect(\"key-press-event\", Lang.bind(this, this._onKeyPress));\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onKeyPress: function(widget, event) {\n"
"\n"
"        // Λήψη της τιμής του πλήκτρου που πατήθηκε\n"
"        let keyval = event.get_keyval()[1];\n"
"\n"
"        // Αν ήταν το πλήκτρο διαστήματος, εναλλαγή στον μετρητή να ξεκινήσει ή να σταματήσει\n"
"        if (keyval == Gdk.KEY_space) {\n"
"            if (this._spinner.active == true)\n"
"                this._spinner.stop();\n"
"            else\n"
"                this._spinner.start();\n"
"        }\n"
"    }\n"
"\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new SpinnerExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/spinner.js.page:30
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gdk.html\">Gdk - "
"Key Values</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gdk.html\">Gdk - "
"Key Values</link>"

#. (itstool) path: item/p
#: C/spinner.js.page:33 C/togglebutton.js.page:158
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Spinner.html"
"\">Gtk.Spinner</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Spinner.html"
"\">Gtk.Spinner</link>"

#. (itstool) path: info/title
#: C/spinner.py.page:8
msgctxt "text"
msgid "Spinner (Python)"
msgstr "Μετρητής (Python)"

#. (itstool) path: section/code
#: C/spinner.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Spinner Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"        self.set_border_width(30)\n"
"\n"
"        # a spinner\n"
"        self.spinner = Gtk.Spinner()\n"
"        # that by default spins\n"
"        self.spinner.start()\n"
"        # add the spinner to the window\n"
"        self.add(self.spinner)\n"
"\n"
"    # event handler\n"
"    # a signal from the keyboard (space) controls if the spinner stops/starts\n"
"    def do_key_press_event(self, event):\n"
"        # keyname is the symbolic name of the key value given by the event\n"
"        keyname = Gdk.keyval_name(event.keyval)\n"
"        # if it is \"space\"\n"
"        if keyname == \"space\":\n"
"            # and the spinner is active\n"
"            if self.spinner.get_property(\"active\"):\n"
"                # stop the spinner\n"
"                self.spinner.stop()\n"
"            # if the spinner is not active\n"
"            else:\n"
"                # start it again\n"
"                self.spinner.start()\n"
"        # stop the signal emission\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Spinner Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"        self.set_border_width(30)\n"
"\n"
"        # a spinner\n"
"        self.spinner = Gtk.Spinner()\n"
"        # that by default spins\n"
"        self.spinner.start()\n"
"        # add the spinner to the window\n"
"        self.add(self.spinner)\n"
"\n"
"    # event handler\n"
"    # a signal from the keyboard (space) controls if the spinner stops/starts\n"
"    def do_key_press_event(self, event):\n"
"        # keyname is the symbolic name of the key value given by the event\n"
"        keyname = Gdk.keyval_name(event.keyval)\n"
"        # if it is \"space\"\n"
"        if keyname == \"space\":\n"
"            # and the spinner is active\n"
"            if self.spinner.get_property(\"active\"):\n"
"                # stop the spinner\n"
"                self.spinner.stop()\n"
"            # if the spinner is not active\n"
"            else:\n"
"                # start it again\n"
"                self.spinner.start()\n"
"        # stop the signal emission\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: note/p
#: C/spinner.py.page:33
msgid ""
"<code>Gdk.keyval_name(event.keyval)</code> converts the key value "
"<code>event.keyval</code> into a symbolic name. The names and corresponding "
"key values can be found <link href=\"http://git.gnome.org/browse/gtk+/tree/"
"gdk/gdkkeysyms.h\">here</link>,but for instance <code>GDK_KEY_BackSpace</"
"code> becomes the string <code>\"BackSpace\"</code>."
msgstr ""
"Το <code>Gdk.keyval_name(event.keyval)</code> μετατρέπει την τιμή κλειδιού "
"<code>event.keyval</code> σε ένα συμβολικό όνομα. Τα ονόματα και οι "
"αντίστοιχες τιμές κλειδιού μπορούν να βρεθούν <link href=\"http://git.gnome."
"org/browse/gtk+/tree/gdk/gdkkeysyms.h\">εδώ</link>, αλλά για παράδειγμα το "
"<code>GDK_KEY_BackSpace</code> γίνεται η συμβολοσειρά <code>\"BackSpace\"</"
"code>."

#. (itstool) path: item/p
#: C/spinner.py.page:42 C/togglebutton.py.page:46
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkSpinner.html"
"\">GtkSpinner</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkSpinner.html"
"\">GtkSpinner</link>"

#. (itstool) path: item/p
#: C/spinner.py.page:43
msgid ""
"<link href=\"http://developer.gnome.org/gdk/stable/gdk-Keyboard-Handling.html"
"\">Key Values</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gdk/stable/gdk-Keyboard-Handling.html"
"\">Key Values</link>"

#. (itstool) path: info/title
#: C/spinner.vala.page:8
msgctxt "text"
msgid "Spinner (Vala)"
msgstr "Μετρητής (Vala)"

#. (itstool) path: page/code
#: C/spinner.vala.page:25
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Widget spinner;\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\n"
"\t\tObject (application: app, title: \"Spinner Example\");\n"
"\n"
"\t\tthis.set_default_size (200, 200);\n"
"\t\tthis.border_width = 30;\n"
"\n"
"\t\tspinner = new Gtk.Spinner ();\n"
"\n"
"\t\tthis.add (spinner);\n"
"\t\t(spinner as Gtk.Spinner).active = true;\n"
"\t\tspinner.show ();\n"
"\t}\n"
"\n"
"\tprotected override bool key_press_event (Gdk.EventKey event) {\n"
"\n"
"\t\t//print (Gdk.keyval_name(event.keyval) +\"\\n\");\n"
"\t\tif (Gdk.keyval_name(event.keyval) == \"space\") {\n"
"\n"
"\t\t\tif ((spinner as Gtk.Spinner).active) {\n"
"\t\t\t\t(spinner as Gtk.Spinner).stop ();\n"
"\t\t\t\t//spinner.visible = false;\n"
"\t\t\t}\n"
"\t\t\telse {\n"
"\t\t\t\t(spinner as Gtk.Spinner).start ();\n"
"\t\t\t\t//spinner.visible = true;\n"
"\t\t\t}\n"
"\t\t}\n"
"\t\treturn true;\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\n"
"\tprotected override void activate () {\n"
"\t\tMyWindow window = new MyWindow (this);\n"
"\t\twindow.show ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.spinner\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Widget spinner;\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\n"
"\t\tObject (application: app, title: \"Spinner Example\");\n"
"\n"
"\t\tthis.set_default_size (200, 200);\n"
"\t\tthis.border_width = 30;\n"
"\n"
"\t\tspinner = new Gtk.Spinner ();\n"
"\n"
"\t\tthis.add (spinner);\n"
"\t\t(spinner as Gtk.Spinner).active = true;\n"
"\t\tspinner.show ();\n"
"\t}\n"
"\n"
"\tprotected override bool key_press_event (Gdk.EventKey event) {\n"
"\n"
"\t\t//print (Gdk.keyval_name(event.keyval) +\"\\n\");\n"
"\t\tif (Gdk.keyval_name(event.keyval) == \"space\") {\n"
"\n"
"\t\t\tif ((spinner as Gtk.Spinner).active) {\n"
"\t\t\t\t(spinner as Gtk.Spinner).stop ();\n"
"\t\t\t\t//spinner.visible = false;\n"
"\t\t\t}\n"
"\t\t\telse {\n"
"\t\t\t\t(spinner as Gtk.Spinner).start ();\n"
"\t\t\t\t//spinner.visible = true;\n"
"\t\t\t}\n"
"\t\t}\n"
"\t\treturn true;\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\n"
"\tprotected override void activate () {\n"
"\t\tMyWindow window = new MyWindow (this);\n"
"\t\twindow.show ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.spinner\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/spinner.vala.page:30
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Widget.html\">Gtk.Widget</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Widget.html\">Gtk.Widget</"
"link>"

#. (itstool) path: item/p
#: C/spinner.vala.page:31
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Spinner.html\">Gtk.Spinner</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Spinner.html\">Gtk.Spinner</"
"link>"

#. (itstool) path: item/p
#: C/spinner.vala.page:32
msgid ""
"<link href=\"http://www.valadoc.org/gdk-3.0/Gdk.keyval_name.html\">Gdk."
"keyval_name</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gdk-3.0/Gdk.keyval_name.html\">Gdk."
"keyval_name</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/statusbar.c.page:27
msgctxt "_"
msgid ""
"external ref='media/statusbar3.png' md5='60c71604fb44656237ee66dfb39a8689'"
msgstr ""
"external ref='media/statusbar3.png' md5='60c71604fb44656237ee66dfb39a8689'"

#. (itstool) path: info/title
#: C/statusbar.c.page:8
msgctxt "text"
msgid "Statusbar (C)"
msgstr "Γραμμή κατάστασης (C)"

#. (itstool) path: info/desc
#: C/statusbar.c.page:22 C/statusbar.py.page:20 C/statusbar.vala.page:21
msgid "Report messages of minor importance to the user"
msgstr "Μηνύματα αναφοράς μικρότερης σημασίας για τον χρήστη"

#. (itstool) path: page/title
#: C/statusbar.c.page:25 C/statusbar.js.page:21 C/statusbar.py.page:23
#: C/statusbar.vala.page:24
msgid "Statusbar"
msgstr "Γραμμή κατάστασης"

#. (itstool) path: page/p
#: C/statusbar.c.page:28
msgid ""
"This statusbar is used to demonstrate how messages are stacked in a last-in-"
"first-out order. The message at the top of the stack is always the one "
"displayed."
msgstr ""
"Αυτή η γραμμή κατάστασης χρησιμοποιείται για να εμφανίσει πόσα μηνύματα "
"στοιβάζονται σε μια σειρά τελευταίο προς πρώτο. Το μήνυμα στην κορυφή της "
"στοίβας είναι πάντα αυτό που εμφανίζεται."

#. (itstool) path: page/code
#: C/statusbar.c.page:30
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Callback function in which pushes an item onto the statusbar*/\n"
"static void \n"
"push_item (GtkWidget *widget,\n"
"           gpointer   data)\n"
"{\n"
"  GtkWidget *status_bar = data;\n"
"\n"
"  /*Create a context id, which is used to uniquely identify \n"
"   *the source of a message*/\n"
"  guint context_id = gtk_statusbar_get_context_id (GTK_STATUSBAR (status_bar), \n"
"                                                   \"Statusbar example\");\n"
"\n"
"  /*Count is used to keep track of the amount of items \n"
"  the user is pushing/popping*/\n"
"  static int count = 1;\n"
"  char hold_output[20];\n"
"  \n"
"  /*This is a safer form of the standard sprintf () function. The output is \n"
"  gauranteed in this case to not exceed 20 characters, and the result is stored \n"
"  into the 'hold_output' variable*/\n"
"  g_snprintf (hold_output, 20, \"Item %d\", count++);\n"
"  gtk_statusbar_push (GTK_STATUSBAR (status_bar), \n"
"                     context_id, \n"
"                     hold_output);\n"
"}\n"
"\n"
"\n"
"\n"
"/*Callback function that is used to pop an item off the statusbar*/\n"
"static void \n"
"pop_item (GtkWidget *widget,\n"
"          gpointer   data )\n"
"{\n"
"  GtkWidget *status_bar = data;\n"
"  guint context_id = gtk_statusbar_get_context_id (GTK_STATUSBAR (status_bar), \n"
"                                                   \"Statusbar example\");\n"
"\n"
"  gtk_statusbar_pop (GTK_STATUSBAR (status_bar), context_id);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"    GtkWidget *grid;\n"
"    GtkWidget *window;\n"
"    GtkWidget *status_bar;\n"
"    GtkWidget *pop_button;\n"
"    GtkWidget *push_button;\n"
"\n"
"    /*Create a window with a title, border width, and a default size**/\n"
"    window = gtk_application_window_new (app);\n"
"    gtk_window_set_default_size (GTK_WINDOW (window), 220, 100);\n"
"    gtk_window_set_title (GTK_WINDOW (window), \"Statusbar Example\");\n"
"    gtk_container_set_border_width (GTK_CONTAINER(window), 10);\n"
"    \n"
"    /*Create the status bar, which is held in the global variable*/\n"
"    status_bar = gtk_statusbar_new ();      \n"
"    \n"
"    /*Create the buttons with labels*/\n"
"    push_button = gtk_button_new_with_label (\"push item\");\n"
"    pop_button = gtk_button_new_with_label (\"pop last item\");\n"
"    \n"
"    /*Create the grid, and attach the buttons/statusbar accordingly*/\n"
"    grid = gtk_grid_new ();\n"
"    gtk_grid_attach (GTK_GRID (grid), push_button, 0,1,1,1);\n"
"    gtk_grid_attach (GTK_GRID (grid), pop_button, 0,2,1,1);\n"
"    gtk_grid_attach (GTK_GRID (grid), status_bar, 0,3,1,1);\n"
"    \n"
"    /*Connecting the clicked signals to the corresponding callback functions*/\n"
"    g_signal_connect (GTK_BUTTON (push_button), \"clicked\", \n"
"                      G_CALLBACK (push_item), status_bar);\n"
"    g_signal_connect (GTK_BUTTON (pop_button), \"clicked\", \n"
"                      G_CALLBACK (pop_item), status_bar);\n"
"    \n"
"    /*Attach the grid holding the child widgets onto the window, and show all*/\n"
"    gtk_container_add (GTK_CONTAINER (window), grid);\n"
"    gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#περιλαμβάνει &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Η συνάρτηση επανάκλησης στην οποία προωθεί ένα στοιχείο στη γραμμή κατάστασης*/\n"
"static void \n"
"push_item (GtkWidget *widget,\n"
"           gpointer   data)\n"
"{\n"
"  GtkWidget *status_bar = data;\n"
"\n"
"  /*Δημιουργία ενός αναγνωριστικού περιεχομένου, που χρησιμοποιείται για μοναδική αναγνώριση \n"
"   *the source of a message*/\n"
"  guint context_id = gtk_statusbar_get_context_id (GTK_STATUSBAR (status_bar), \n"
"                                                   \"Statusbar example\");\n"
"\n"
"  /*Η μέτρηση χρησιμοποιείται για παρακολούθηση του αριθμού των στοιχείων \n"
"  the user is pushing/popping*/\n"
"  static int count = 1;\n"
"  char hold_output[20];\n"
"  \n"
"  /*Αυτή είναι μια ασφαλέστερη μορφή της τυπικής συνάρτησης sprintf (). Η έξοδος \n"
"  εγγυάται στην περίπτωση που δεν ξεπερνά τους 20 χαρακτήρες και το αποτέλεσμα αποθηκεύεται \n"
"  into the 'hold_output' variable*/\n"
"  g_snprintf (hold_output, 20, \"Item %d\", count++);\n"
"  gtk_statusbar_push (GTK_STATUSBAR (status_bar), \n"
"                     context_id, \n"
"                     hold_output);\n"
"}\n"
"\n"
"\n"
"\n"
"/*Η συνάρτηση επανάκλησης που χρησιμοποιείται για ανάδυση ενός στοιχείου από τη γραμμή κατάστασης*/\n"
"static void \n"
"pop_item (GtkWidget *widget,\n"
"          gpointer   data )\n"
"{\n"
"  GtkWidget *status_bar = data;\n"
"  guint context_id = gtk_statusbar_get_context_id (GTK_STATUSBAR (status_bar), \n"
"                                                   \"Statusbar example\");\n"
"\n"
"  gtk_statusbar_pop (GTK_STATUSBAR (status_bar), context_id);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"    GtkWidget *grid;\n"
"    GtkWidget *window;\n"
"    GtkWidget *status_bar;\n"
"    GtkWidget *pop_button;\n"
"    GtkWidget *push_button;\n"
"\n"
"    /*Δημιουργία παραθύρου με τίτλο, πλάτος περιγράμματος και προεπιλεγμένο μέγεθος**/\n"
"    window = gtk_application_window_new (app);\n"
"    gtk_window_set_default_size (GTK_WINDOW (window), 220, 100);\n"
"    gtk_window_set_title (GTK_WINDOW (window), \"Statusbar Example\");\n"
"    gtk_container_set_border_width (GTK_CONTAINER(window), 10);\n"
"    \n"
"    /*Δημιουργία της γραμμής κατάστασης, που κρατιέται στην καθολική μεταβλητή*/\n"
"    status_bar = gtk_statusbar_new ();      \n"
"    \n"
"    /*Δημιουργίαν των πλήκτρων με ετικέτες*/\n"
"    push_button = gtk_button_new_with_label (\"push item\");\n"
"    pop_button = gtk_button_new_with_label (\"pop last item\");\n"
"    \n"
"    /*Δημιουργία του πλέγματος και κατάλληλη προσάρτηση των πλήκτρων/γραμμής κατάστασης */\n"
"    grid = gtk_grid_new ();\n"
"    gtk_grid_attach (GTK_GRID (grid), push_button, 0,1,1,1);\n"
"    gtk_grid_attach (GTK_GRID (grid), pop_button, 0,2,1,1);\n"
"    gtk_grid_attach (GTK_GRID (grid), status_bar, 0,3,1,1);\n"
"    \n"
"    /*Σύνδεση των πατημένων σημάτων με τις αντίστοιχες συναρτήσεις επανάκλησης*/\n"
"    g_signal_connect (GTK_BUTTON (push_button), \"clicked\", \n"
"                      G_CALLBACK (push_item), status_bar);\n"
"    g_signal_connect (GTK_BUTTON (pop_button), \"clicked\", \n"
"                      G_CALLBACK (pop_item), status_bar);\n"
"    \n"
"    /*Προσάρτηση του πλέγματος που κρατά τα θυγατρικά γραφικά στοιχεία στο παράθυρο και εμφάνιση όλων*/\n"
"    gtk_container_add (GTK_CONTAINER (window), grid);\n"
"    gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/statusbar.c.page:38
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkStatusbar.html"
"\">GtkStatusBar</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkStatusbar.html"
"\">Γραμμή κατάστασης Gtk (GtkStatusBar)</link>"

#. (itstool) path: item/p
#: C/statusbar.c.page:39
msgid ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-String-Utility-"
"Functions.html#g-snprintf\">String Utility Functions</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-String-Utility-"
"Functions.html#g-snprintf\">String Utility Functions</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/statusbar.js.page:22
msgctxt "_"
msgid ""
"external ref='media/statusbar2.png' md5='ff6f7e5b270827ca98b2d5f7087aa766'"
msgstr ""
"external ref='media/statusbar2.png' md5='ff6f7e5b270827ca98b2d5f7087aa766'"

#. (itstool) path: info/title
#: C/statusbar.js.page:8
msgctxt "text"
msgid "Statusbar (JavaScript)"
msgstr "Γραμμή κατάστασης (JavaScript)"

#. (itstool) path: info/desc
#: C/statusbar.js.page:18
msgid "Show notifications in a dedicated statusbar"
msgstr "Εμφάνιση ειδοποιήσεων σε μια αφοσιωμένη γραμμή κατάστασης"

#. (itstool) path: page/p
#: C/statusbar.js.page:23
msgid ""
"This statusbar keeps track of how many times you've clicked a button. "
"Applications like <link href=\"http://projects.gnome.org/gedit/\">gedit</"
"link> use statusbars to display information at a glance, and show "
"notifications without interrupting the user."
msgstr ""
"Αυτή η γραμμή κατάστασης κρατά ίχνη του αριθμού των φορών που πατήσατε ένα "
"κουμπί. Εφαρμογές όπως <link href=\"http://projects.gnome.org/gedit/"
"\">gedit</link> χρησιμοποιούν τις γραμμές κατάστασης για εμφάνιση "
"πληροφοριών με μια ματιά, και εμφάνιση ειδοποιήσεων χωρίς διακοπή του χρήστη."

#. (itstool) path: page/p
#: C/statusbar.js.page:24
msgid ""
"Messages pushed to a statusbar go on top of its stack, and can be popped off "
"to show the next-most recent one. You can also clear away every message of a "
"specific type all at once. This sample application demonstrates these "
"functions."
msgstr ""
"Μηνύματα που προωθούνται σε μια γραμμή κατάστασης πηγαίνουν στην κορυφή της "
"στοίβα της και μπορούν να φεύγουν για να εμφανίσουν την επόμενη πιο "
"πρόσφατη. Μπορείτε επίσης να καθαρίσετε κάθε μήνυμα συγκεκριμένου τύπου "
"μονομιάς. Αυτό το παράδειγμα εφαρμογής δείχνει αυτές τις συναρτήσεις."

#. (itstool) path: section/code
#: C/statusbar.js.page:41
#, no-wrap
msgid ""
"\n"
"const StatusbarExample = new Lang.Class({\n"
"    Name: 'Statusbar Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsstatusbar',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const StatusbarExample = new Lang.Class({\n"
"    Name: 'Statusbar Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsstatusbar',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Σύνδεση των σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει ένα παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/statusbar.js.page:67
msgid ""
"All the code for this sample goes in the StatusbarExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.Application.html\">Gtk.Application</link> for our widgets and window to "
"go in."
msgstr ""
"Όλος ο κώδικας για αυτό το παράδειγμα πηγαίνει στην κλάση StatusbarExample. "
"Ο παραπάνω κώδικας δημιουργεί μια <link href=\"http://www.roojs.com/seed/"
"gir-1.2-gtk-3.0/gjs/Gtk.Application.html\">Gtk.Application</link> για να "
"μπουν μέσα τα γραφικά στοιχεία μας και τα παράθυρα."

#. (itstool) path: section/code
#: C/statusbar.js.page:68
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 120,\n"
"            default_width: 300,\n"
"            title: \"Button Clicker\"});\n"
"\n"
"        // Create a paned interface\n"
"        this._panes = new Gtk.Paned ({\n"
"            orientation: Gtk.Orientation.VERTICAL });\n"
msgstr ""
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 120,\n"
"            default_width: 300,\n"
"            title: \"Button Clicker\"})·\n"
"\n"
"        // Δημιουργία μιας φατνωμένης διεπαφής\n"
"        this._panes = new Gtk.Paned ({\n"
"            orientation: Gtk.Orientation.VERTICAL })·\n"

#. (itstool) path: section/p
#: C/statusbar.js.page:84
msgid ""
"The _buildUI function is where we put all the code to create the "
"application's user interface. The first step is creating a new <link href="
"\"GtkApplicationWindow.js.page\">Gtk.ApplicationWindow</link> to put all our "
"widgets into. The next step is to create a vertically-oriented Gtk.Paned "
"interface, to divide the window up into two sections. This way the statusbar "
"looks like those used in other applications, and it stays at the bottom of "
"the window, even if the user resizes it."
msgstr ""
"Η συνάρτηση _buildUI είναι εκεί που βάζουμε όλο τον κώδικα για δημιουργία "
"διεπαφής χρήστη της εφαρμογής. Το πρώτο βήμα είναι η δημιουργία ενός νέου "
"<link href=\"GtkApplicationWindow.js.page\">Παράθυρο εφαρμογής Gtk (Gtk."
"ApplicationWindow)</link> για να μπουν μέσα όλα τα γραφικά στοιχεία. Το "
"επόμενο βήμα είναι η δημιουργία μιας κάθετα προσανατολισμένης διεπαφής Gtk."
"Paned, για διαίρεση του παραθύρου σε δύο ενότητες. Αυτός ο τρόπος της "
"γραμμής κατάστασης φαίνεται όπως αυτών που χρησιμοποιούνται σε άλλες "
"εφαρμογές και παραμένει στη βάση του παραθύρου, ακόμα κι αν ο χρήστης το "
"αυξομειώσει."

#. (itstool) path: section/title
#: C/statusbar.js.page:88
msgid "Creating the buttons"
msgstr "Δημιουργία κουμπιών"

#. (itstool) path: section/code
#: C/statusbar.js.page:89
#, no-wrap
msgid ""
"\n"
"        // Create the main button\n"
"        this._clickMe = new Gtk.Button ({\n"
"            label: \"Click Me!\" });\n"
"        this._clickMe.connect (\"clicked\", Lang.bind (this, this._clicked));\n"
"\n"
"        // Create the back button\n"
"        this._backButton = new Gtk.Button ({\n"
"            label: \"gtk-go-back\",\n"
"            use_stock: true });\n"
"        this._backButton.connect (\"clicked\", Lang.bind (this, this._back));\n"
"\n"
"        // Create the clear button\n"
"        this._clearButton = new Gtk.Button ({\n"
"            label: \"gtk-clear\",\n"
"            use_stock: true });\n"
"        this._clearButton.connect (\"clicked\", Lang.bind (this, this._clear));\n"
msgstr ""
"\n"
"        // Δημιουργία του κύριου πλήκτρου\n"
"        this._clickMe = new Gtk.Button ({\n"
"            label: \"Click Me!\" });\n"
"        this._clickMe.connect (\"clicked\", Lang.bind (this, this._clicked));\n"
"\n"
"        // Δημιουργία του πλήκτρου επιστροφής\n"
"        this._backButton = new Gtk.Button ({\n"
"            label: \"gtk-go-back\",\n"
"            use_stock: true });\n"
"        this._backButton.connect (\"clicked\", Lang.bind (this, this._back));\n"
"\n"
"        // Δημιουργία του πλήκτρου καθαρισμού\n"
"        this._clearButton = new Gtk.Button ({\n"
"            label: \"gtk-clear\",\n"
"            use_stock: true });\n"
"        this._clearButton.connect (\"clicked\", Lang.bind (this, this._clear));\n"

#. (itstool) path: section/p
#: C/statusbar.js.page:107
msgid ""
"This code creates the three <link href=\"button.js.page\">Gtk.Buttons</link> "
"we'll use to push a new message to the statusbar, pop the last one off, and "
"clear all existing messages. The \"back\" and \"clear\" buttons are <link "
"href=\"https://developer.gnome.org/gtk3/3.4/gtk3-Stock-Items.html\">stock "
"buttons</link>, which are automatically translated into any language GNOME "
"supports."
msgstr ""
"Αυτός ο κώδικας δημιουργεί τα τρία <link href=\"button.js.page\">Κουμπιά Gtk "
"(Gtk.Buttons)</link> που θα χρησιμοποιήσουμε για την προώθηση ενός νέου "
"μηνύματος στη γραμμή κατάστασης, κλείνοντας το τελευταίο και καθαρίζοντας "
"όλα τα υπάρχοντα μηνύματα. Τα κουμπιά \"πίσω\" και \"καθαρισμός\" είναι "
"<link href=\"https://developer.gnome.org/gtk3/3.4/gtk3-Stock-Items.html"
"\">κουμπιά παρακαταθήκης</link>, που μεταφράζονται αυτόματα σε οποιαδήποτε "
"γλώσσα υποστηρίζει το GNOME."

#. (itstool) path: section/code
#: C/statusbar.js.page:109
#, no-wrap
msgid ""
"\n"
"        // Put the buttons in a grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"        this._grid.attach (this._backButton, 0, 0, 1, 1);\n"
"        this._grid.attach_next_to (this._clickMe, this._backButton, Gtk.PositionType.RIGHT, 1, 1);\n"
"        this._grid.attach_next_to (this._clearButton, this._clickMe, Gtk.PositionType.RIGHT, 1, 1);\n"
"\n"
"        // Put the grid in a large frame that fills most of the window\n"
"        this._topFrame = new Gtk.Frame ({\n"
"            border_width: 20,\n"
"            height_request: 90,\n"
"            width_request: 300});\n"
"        this._topFrame.add (this._grid);\n"
msgstr ""
"\n"
"        // Τοποθέτηση των κουμπιών σε πλέγμα\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"        this._grid.attach (this._backButton, 0, 0, 1, 1);\n"
"        this._grid.attach_next_to (this._clickMe, this._backButton, Gtk.PositionType.RIGHT, 1, 1);\n"
"        this._grid.attach_next_to (this._clearButton, this._clickMe, Gtk.PositionType.RIGHT, 1, 1);\n"
"\n"
"        // Τοποθέτηση του πλέγματος σε ένα μεγάλο πλαίσιο που γεμίζει το περισσότερο παράθυρο\n"
"        this._topFrame = new Gtk.Frame ({\n"
"            border_width: 20,\n"
"            height_request: 90,\n"
"            width_request: 300});\n"
"        this._topFrame.add (this._grid);\n"

#. (itstool) path: section/p
#: C/statusbar.js.page:125
msgid ""
"This code creates the <link href=\"grid.js.page\">Gtk.Grid</link> that we'll "
"use to organize the buttons, and attaches the buttons to it in order. It "
"then creates a <link href=\"paned.js.page\">Gtk.Frame</link> which will take "
"up most of the window and has a large amount of padding around the buttons, "
"and adds the Grid to the Frame. Note that we still need to put the Frame "
"into the Paned interface, and then add it to the ApplicationWindow."
msgstr ""
"Αυτός ο κώδικας δημιουργεί το <link href=\"grid.js.page\">Gtk.Grid</link> "
"που θα χρησιμοποιήσουμε για οργάνωση των κουμπιών και επισυνάπτει τα κουμπιά "
"σε αυτό σε σειρά. Δημιουργεί έπειτα ένα <link href=\"paned.js.page\">Gtk."
"Frame</link> που θα καταλάβει το περισσότερο παράθυρο και έχει μεγάλη "
"ποσότητα συμπλήρωσης γύρω από τα κουμπιά και προσθέτει το πλέγμα στο "
"πλαίσιο. Σημειώστε ότι θα χρειαστούμε ακόμα να βάλουμε το πλαίσιο στη "
"φάτνωμα διεπαφή και έπειτα θα το προσθέσουμε στο ApplicationWindow."

#. (itstool) path: section/title
#: C/statusbar.js.page:129
msgid "Creating the statusbar"
msgstr "Δημιουργία της γραμμής κατάστασης"

#. (itstool) path: section/code
#: C/statusbar.js.page:130
#, no-wrap
msgid ""
"\n"
"        // Create the statusbar\n"
"        this._statusbar = new Gtk.Statusbar();\n"
"\n"
"        // Keep track of the number of times the button has been clicked\n"
"        this.Clicks = 0;\n"
"        this.ContextID = this._statusbar.get_context_id (\"Number of Clicks\");\n"
"\n"
"        // Give the statusbar an initial message\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"        // Put the statusbar in its own frame at the bottom\n"
"        this._barFrame = new Gtk.Frame ({\n"
"            height_request: 30 });\n"
"        this._barFrame.add (this._statusbar);\n"
msgstr ""
"\n"
"        // Δημιουργία της γραμμής κατάστασης\n"
"        this._statusbar = new Gtk.Statusbar();\n"
"\n"
"        // Παρακολούθηση των αριθμών των φορών που το πλήκτρο πατήθηκε\n"
"        this.Clicks = 0;\n"
"        this.ContextID = this._statusbar.get_context_id (\"Number of Clicks\");\n"
"\n"
"        // Δίνει στη γραμμή κατάστασης ένα αρχικό μήνυμα\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"        // Τοποθέτηση της γραμμής κατάστασης σε δικό της πλαίσιο στο τέλος\n"
"        this._barFrame = new Gtk.Frame ({\n"
"            height_request: 30 });\n"
"        this._barFrame.add (this._statusbar);\n"

#. (itstool) path: section/p
#: C/statusbar.js.page:146
msgid ""
"Here we create the Gtk.Statusbar, and push a message to it to start off "
"with. Then we give it its own narrow frame at the bottom of the window."
msgstr ""
"Εδώ δημιουργούμε τη Gtk.Statusbar, και προωθούμε ένα μήνυμα σε αυτό για "
"ξεκίνημα. Έπειτα του δίνουμε το δικό του στενό πλαίσιο στον πάτο του "
"παραθύρου."

#. (itstool) path: section/p
#: C/statusbar.js.page:147
msgid ""
"Every message needs to have a context id, which is an integer value you can "
"get from the statusbar with the get_context_id() function. Its only "
"parameter is the string value you use to describe that particular context "
"id. Normally, you'll get a new context id for different kinds of messages, "
"so that you can use the remove() function to remove a specific message and "
"not just the most recent one on the stack. This is a simple example with "
"only one kind of message, though, so we're just using one for everything."
msgstr ""
"Κάθε μήνυμα χρειάζεται να έχει μια ταυτότητα συμφραζομένων, που είναι μια "
"ακέραιη τιμή που μπορείτε να πάρετε από τη γραμμή κατάστασης με τη συνάρτηση "
"get_context_id(). Η μόνη παράμετρος του είναι η τιμή συμβολοσειράς που "
"χρησιμοποιείτε για περιγραφή αυτής της συγκεκριμένης ταυτότητας "
"συμφραζομένων. Κανονικά, θα πάρετε μια νέα ταυτότητα συμφραζομένων για "
"διαφορετικά είδη μηνυμάτων, έτσι που να μπορείτε να χρησιμοποιήσετε τη "
"συνάρτηση remove() για να αφαιρέσετε ένα συγκεκριμένο μήνυμα και όχι μόνο το "
"πιο πρόσφατο στη στοίβα. Αυτό είναι ένα απλό παράδειγμα με μόνο ένα είδος "
"μηνύματος, αν και, έτσι χρησιμοποιούμε μόνο ένα για καθένα."

#. (itstool) path: section/p
#: C/statusbar.js.page:148
msgid ""
"We use the push() function to push a new message onto the stack. Its first "
"parameter is the context id, and its second is the message."
msgstr ""
"Χρησιμοποιούμε τη συνάρτηση push() για την προώθηση ενός νέου μηνύματος στη "
"στοίβα. Η πρώτη της παράμετρος είναι η ταυτότητα συμφραζόμενων και η δεύτερή "
"της είναι το μήνυμα."

#. (itstool) path: section/code
#: C/statusbar.js.page:149
#, no-wrap
msgid ""
"\n"
"        // Assemble the frames into the paned interface\n"
"        this._panes.pack1 (this._topFrame, true, false);\n"
"        this._panes.pack2 (this._barFrame, false, false);\n"
"\n"
"        // Put the panes into the window\n"
"        this._window.add (this._panes);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""
"\n"
"        // Συγκέντρωση των πλαισίων στη φατνωμένη διεπαφή\n"
"        this._panes.pack1 (this._topFrame, true, false);\n"
"        this._panes.pack2 (this._barFrame, false, false);\n"
"\n"
"        // Τοποθέτηση των φατνωμάτων στο παράθυρο\n"
"        this._window.add (this._panes);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"

#. (itstool) path: section/p
#: C/statusbar.js.page:161
msgid ""
"This code finishes up creating the window, by packing the frames into the "
"pane, adding it to the window, and telling the window to show all child "
"widgets."
msgstr ""
"Αυτός ο κώδικας τελειώνει δημιουργώντας το παράθυρο, πακετάροντας τα πλαίσια "
"μέσα στο φάτνωμα, το προσθέτει στο παράθυρο και λέει στο παράθυρο να "
"εμφανίσει όλα τα θυγατρικά γραφικά στοιχεία."

#. (itstool) path: section/title
#: C/statusbar.js.page:165
msgid "Functions for interacting with the statusbar"
msgstr "Συναρτήσεις για αλληλεπίδραση με τη γραμμή κατάστασης"

#. (itstool) path: section/code
#: C/statusbar.js.page:166
#, no-wrap
msgid ""
"\n"
"    _clicked: function() {\n"
"\n"
"        // Increment the number of clicks by 1\n"
"        this.Clicks++;\n"
"\n"
"        // Update the statusbar with the new number of clicks\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _back: function () {\n"
"\n"
"        // If there have been any clicks, decrement by 1 and remove last statusbar update\n"
"        if (this.Clicks &gt; 0 ) {\n"
"            this.Clicks--;\n"
"            this._statusbar.pop (this.ContextID);\n"
"        };\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _clear: function () {\n"
"\n"
"        // Reset the number of clicks\n"
"        this.Clicks = 0;\n"
"\n"
"        // Wipe out all the messages pushed to the statusbar\n"
"        this._statusbar.remove_all (this.ContextID);\n"
"\n"
"        // Reset the statusbar's message\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _clicked: function() {\n"
"\n"
"        // Αύξηση του αριθμού των πατημάτων κατά 1\n"
"        this.Clicks++;\n"
"\n"
"        // Ενημέρωση της γραμμής κατάστασης με τον νέο αριθμό πατημάτων\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _back: function () {\n"
"\n"
"        // Αν υπήρξαν πατήματα, μείωση κατά 1 και αφαίρεση της τελευταίας ενημέρωσης της γραμμής κατάστασης\n"
"        if (this.Clicks &gt; 0 ) {\n"
"            this.Clicks--;\n"
"            this._statusbar.pop (this.ContextID);\n"
"        };\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _clear: function () {\n"
"\n"
"        // Επαναφορά του αριθμού των πατημάτων\n"
"        this.Clicks = 0;\n"
"\n"
"        // Εκκαθάριση όλων των μηνυμάτων που προωθήθηκαν στη γραμμή κατάστασης\n"
"        this._statusbar.remove_all (this.ContextID);\n"
"\n"
"        // Επαναφορά του μηνύματος της γραμμής κατάστασης\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/statusbar.js.page:206
msgid ""
"Here we have functions which demonstrate pushing a message onto the stack, "
"popping the top one off of it, and clearing all messages of a particular "
"context id. The pop() function just takes one parameter, which is the "
"context id for the type of message you want to pop off the most recent one "
"of. The remove_all() function works the same way, except it removes all "
"messages of that type from the stack."
msgstr ""
"Εδώ έχουμε συναρτήσεις που δείχνουν προώθηση μηνύματος στη στοίβα, "
"διώχνοντας την κορυφή του από αυτό και καθαρίζοντας όλα τα μηνύματα της "
"συγκεκριμένης ταυτότητας συμφραζομένων. Η συνάρτηση pop() παίρνει μόνο μια "
"παράμετρο, που είναι η ταυτότητα συμφραζομένων για τον τύπο του μηνύματος "
"που θέλετε να διώξετε από το πιο πρόσφατο. Η συνάρτηση remove_all() δουλεύει "
"με τον ίδιο τρόπο, εκτός από την αφαίρεση όλων των μηνυμάτων αυτού του τύπου "
"από τη στοίβα."

#. (itstool) path: section/code
#: C/statusbar.js.page:207
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new StatusbarExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new StatusbarExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/statusbar.js.page:212
msgid ""
"Finally, we create a new instance of the finished StatusbarExample class, "
"and set the application running."
msgstr ""
"Τελικά, δημιουργούμε ένα νέο παράδειγμα της τελειωμένης κλάσης "
"StatusbarExample και εκτελούμε την εφαρμογή."

#. (itstool) path: section/code
#: C/statusbar.js.page:217
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const StatusbarExample = new Lang.Class({\n"
"    Name: 'Statusbar Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsstatusbar',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 120,\n"
"            default_width: 300,\n"
"            title: \"Button Clicker\"});\n"
"\n"
"        // Create a paned interface\n"
"        this._panes = new Gtk.Paned ({\n"
"            orientation: Gtk.Orientation.VERTICAL });\n"
"\n"
"        // Create the main button\n"
"        this._clickMe = new Gtk.Button ({\n"
"            label: \"Click Me!\" });\n"
"        this._clickMe.connect (\"clicked\", Lang.bind (this, this._clicked));\n"
"\n"
"        // Create the back button\n"
"        this._backButton = new Gtk.Button ({\n"
"            label: \"gtk-go-back\",\n"
"            use_stock: true });\n"
"        this._backButton.connect (\"clicked\", Lang.bind (this, this._back));\n"
"\n"
"        // Create the clear button\n"
"        this._clearButton = new Gtk.Button ({\n"
"            label: \"gtk-clear\",\n"
"            use_stock: true });\n"
"        this._clearButton.connect (\"clicked\", Lang.bind (this, this._clear));\n"
"\n"
"        // Put the buttons in a grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"        this._grid.attach (this._backButton, 0, 0, 1, 1);\n"
"        this._grid.attach_next_to (this._clickMe, this._backButton, Gtk.PositionType.RIGHT, 1, 1);\n"
"        this._grid.attach_next_to (this._clearButton, this._clickMe, Gtk.PositionType.RIGHT, 1, 1);\n"
"\n"
"        // Put the grid in a large frame that fills most of the window\n"
"        this._topFrame = new Gtk.Frame ({\n"
"            border_width: 20,\n"
"            height_request: 90,\n"
"            width_request: 300});\n"
"        this._topFrame.add (this._grid);\n"
"\n"
"        // Create the statusbar\n"
"        this._statusbar = new Gtk.Statusbar();\n"
"\n"
"        // Keep track of the number of times the button has been clicked\n"
"        this.Clicks = 0;\n"
"        this.ContextID = this._statusbar.get_context_id (\"Number of Clicks\");\n"
"\n"
"        // Give the statusbar an initial message\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"        // Put the statusbar in its own frame at the bottom\n"
"        this._barFrame = new Gtk.Frame ({\n"
"            height_request: 30 });\n"
"        this._barFrame.add (this._statusbar);\n"
"\n"
"        // Assemble the frames into the paned interface\n"
"        this._panes.pack1 (this._topFrame, true, false);\n"
"        this._panes.pack2 (this._barFrame, false, false);\n"
"\n"
"        // Put the panes into the window\n"
"        this._window.add (this._panes);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _clicked: function() {\n"
"\n"
"        // Increment the number of clicks by 1\n"
"        this.Clicks++;\n"
"\n"
"        // Update the statusbar with the new number of clicks\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _back: function () {\n"
"\n"
"        // If there have been any clicks, decrement by 1 and remove last statusbar update\n"
"        if (this.Clicks &gt; 0 ) {\n"
"            this.Clicks--;\n"
"            this._statusbar.pop (this.ContextID);\n"
"        };\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _clear: function () {\n"
"\n"
"        // Reset the number of clicks\n"
"        this.Clicks = 0;\n"
"\n"
"        // Wipe out all the messages pushed to the statusbar\n"
"        this._statusbar.remove_all (this.ContextID);\n"
"\n"
"        // Reset the statusbar's message\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new StatusbarExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const StatusbarExample = new Lang.Class({\n"
"    Name: 'Statusbar Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsstatusbar',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Σύνδεση των σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει ένα παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 120,\n"
"            default_width: 300,\n"
"            title: \"Button Clicker\"});\n"
"\n"
"        // Δημιουργία μιας φατνωμένης διεπαφής\n"
"        this._panes = new Gtk.Paned ({\n"
"            orientation: Gtk.Orientation.VERTICAL });\n"
"\n"
"        // Δημιουργία του κύριου πλήκτρου\n"
"        this._clickMe = new Gtk.Button ({\n"
"            label: \"Click Me!\" });\n"
"        this._clickMe.connect (\"clicked\", Lang.bind (this, this._clicked));\n"
"\n"
"        // Δημιουργία του πλήκτρου επιστροφής\n"
"        this._backButton = new Gtk.Button ({\n"
"            label: \"gtk-go-back\",\n"
"            use_stock: true });\n"
"        this._backButton.connect (\"clicked\", Lang.bind (this, this._back));\n"
"\n"
"        // Δημιουργία του πλήκτρου καθαρισμού\n"
"        this._clearButton = new Gtk.Button ({\n"
"            label: \"gtk-clear\",\n"
"            use_stock: true });\n"
"        this._clearButton.connect (\"clicked\", Lang.bind (this, this._clear));\n"
"\n"
"        // Τοποθέτηση των πλήκτρων σε ένα πλέγμα\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"        this._grid.attach (this._backButton, 0, 0, 1, 1);\n"
"        this._grid.attach_next_to (this._clickMe, this._backButton, Gtk.PositionType.RIGHT, 1, 1);\n"
"        this._grid.attach_next_to (this._clearButton, this._clickMe, Gtk.PositionType.RIGHT, 1, 1);\n"
"\n"
"        // Τοποθέτηση του πλέγματος σε ένα μεγάλο πλαίσιο που γεμίζει το περισσότερο παράθυρο\n"
"        this._topFrame = new Gtk.Frame ({\n"
"            border_width: 20,\n"
"            height_request: 90,\n"
"            width_request: 300});\n"
"        this._topFrame.add (this._grid);\n"
"\n"
"        // Δημιουργία της γραμμής κατάστασης\n"
"        this._statusbar = new Gtk.Statusbar();\n"
"\n"
"        // Παρακολούθηση του αριθμού των φορών που πατήθηκε το πλήκτρο\n"
"        this.Clicks = 0;\n"
"        this.ContextID = this._statusbar.get_context_id (\"Number of Clicks\");\n"
"\n"
"        // Δίνει στη γραμμή κατάστασης ένα αρχικό μήνυμα\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"        // Τοποθέτηση της γραμμής κατάστασης στο δικό της πλαίσιο στο τέλος\n"
"        this._barFrame = new Gtk.Frame ({\n"
"            height_request: 30 });\n"
"        this._barFrame.add (this._statusbar);\n"
"\n"
"        // Συγκέντρωση των πλαισίων στη φατνωμένη διεπαφή\n"
"        this._panes.pack1 (this._topFrame, true, false);\n"
"        this._panes.pack2 (this._barFrame, false, false);\n"
"\n"
"        // Τοποθέτηση των φατνωμάτων στο παράθυρο\n"
"        this._window.add (this._panes);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _clicked: function() {\n"
"\n"
"        // Αύξηση του αριθμού των πατημάτων κατά 1\n"
"        this.Clicks++;\n"
"\n"
"        // Ενημέρωση της γραμμής κατάστασης με τον νέο αριθμό πατημάτων\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _back: function () {\n"
"\n"
"        // Αν υπήρξαν πατήματα, μείωση κατά 1 και αφαίρεση της τελευταίας ενημέρωσης της γραμμής κατάστασης\n"
"        if (this.Clicks &gt; 0 ) {\n"
"            this.Clicks--;\n"
"            this._statusbar.pop (this.ContextID);\n"
"        };\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _clear: function () {\n"
"\n"
"        // Επαναφορά του αριθμού των πατημάτων\n"
"        this.Clicks = 0;\n"
"\n"
"        // Εκκαθάριση όλων των μηνυμάτων που προωθήθηκαν στη γραμμή κατάστασης\n"
"        this._statusbar.remove_all (this.ContextID);\n"
"\n"
"        // Επαναφορά του μηνύματος της γραμμής κατάστασης\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new StatusbarExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/statusbar.js.page:226
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Frame.html"
"\">Gtk.Frame</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Frame.html"
"\">Gtk.Frame</link>"

#. (itstool) path: item/p
#: C/statusbar.js.page:227
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Paned.html"
"\">Gtk.Paned</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Paned.html"
"\">Gtk.Paned</link>"

#. (itstool) path: item/p
#: C/statusbar.js.page:228
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Statusbar.html"
"\">Gtk.Statusbar</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Statusbar.html"
"\">Gtk.Statusbar</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/statusbar.py.page:24 C/statusbar.vala.page:25
msgctxt "_"
msgid ""
"external ref='media/statusbar.png' md5='eb1aca55315d6cda57b12a5f36058ba8'"
msgstr ""
"external ref='media/statusbar.png' md5='eb1aca55315d6cda57b12a5f36058ba8'"

#. (itstool) path: info/title
#: C/statusbar.py.page:8
msgctxt "text"
msgid "Statusbar (Python)"
msgstr "Γραμμή κατάστασης (Python)"

#. (itstool) path: page/p
#: C/statusbar.py.page:25
msgid ""
"This statusbar tells you if you click the button or if you press any key "
"(and which key)."
msgstr ""
"Αυτή η γραμμή κατάστασης σας λέει εάν πατήσετε το κουμπί ή εάν πατήσετε "
"οποιοδήποτε κλειδί (και ποιο κλειδί)."

#. (itstool) path: section/code
#: C/statusbar.py.page:32
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"StatusBar Example\", application=app)\n"
"        self.set_default_size(200, 100)\n"
"\n"
"        # a label\n"
"        label = Gtk.Label(label=\"Press any key or \")\n"
"\n"
"        # a button\n"
"        button = Gtk.Button(label=\"click me.\")\n"
"        # connected to a callback\n"
"        button.connect(\"clicked\", self.button_clicked_cb)\n"
"\n"
"        # the statusbar\n"
"        self.statusbar = Gtk.Statusbar()\n"
"        # its context_id - not shown in the UI but needed to uniquely identify\n"
"        # the source of a message\n"
"        self.context_id = self.statusbar.get_context_id(\"example\")\n"
"        # we push a message onto the statusbar's stack\n"
"        self.statusbar.push(\n"
"            self.context_id, \"Waiting for you to do something...\")\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.set_column_spacing(5)\n"
"        grid.set_column_homogeneous(True)\n"
"        grid.set_row_homogeneous(True)\n"
"        grid.attach(label, 0, 0, 1, 1)\n"
"        grid.attach_next_to(button, label, Gtk.PositionType.RIGHT, 1, 1)\n"
"        grid.attach(self.statusbar, 0, 1, 2, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # callback function for the button clicked\n"
"    # if the button is clicked the event is signaled to the statusbar\n"
"    # onto which we push a new status\n"
"    def button_clicked_cb(self, button):\n"
"        self.statusbar.push(self.context_id, \"You clicked the button.\")\n"
"\n"
"    # event handler\n"
"    def do_key_press_event(self, event):\n"
"    # any signal from the keyboard is signaled to the statusbar\n"
"    # onto which we push a new status with the symbolic name\n"
"    # of the key pressed\n"
"        self.statusbar.push(self.context_id, Gdk.keyval_name(event.keyval) +\n"
"                            \" key was pressed.\")\n"
"        # stop the signal emission\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"StatusBar Example\", application=app)\n"
"        self.set_default_size(200, 100)\n"
"\n"
"        # a label\n"
"        label = Gtk.Label(label=\"Press any key or \")\n"
"\n"
"        # a button\n"
"        button = Gtk.Button(label=\"click me.\")\n"
"        # connected to a callback\n"
"        button.connect(\"clicked\", self.button_clicked_cb)\n"
"\n"
"        # the statusbar\n"
"        self.statusbar = Gtk.Statusbar()\n"
"        # its context_id - not shown in the UI but needed to uniquely identify\n"
"        # the source of a message\n"
"        self.context_id = self.statusbar.get_context_id(\"example\")\n"
"        # we push a message onto the statusbar's stack\n"
"        self.statusbar.push(\n"
"            self.context_id, \"Waiting for you to do something...\")\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.set_column_spacing(5)\n"
"        grid.set_column_homogeneous(True)\n"
"        grid.set_row_homogeneous(True)\n"
"        grid.attach(label, 0, 0, 1, 1)\n"
"        grid.attach_next_to(button, label, Gtk.PositionType.RIGHT, 1, 1)\n"
"        grid.attach(self.statusbar, 0, 1, 2, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # callback function for the button clicked\n"
"    # if the button is clicked the event is signaled to the statusbar\n"
"    # onto which we push a new status\n"
"    def button_clicked_cb(self, button):\n"
"        self.statusbar.push(self.context_id, \"You clicked the button.\")\n"
"\n"
"    # event handler\n"
"    def do_key_press_event(self, event):\n"
"    # any signal from the keyboard is signaled to the statusbar\n"
"    # onto which we push a new status with the symbolic name\n"
"    # of the key pressed\n"
"        self.statusbar.push(self.context_id, Gdk.keyval_name(event.keyval) +\n"
"                            \" key was pressed.\")\n"
"        # stop the signal emission\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: note/p
#: C/statusbar.py.page:34
msgid ""
"<code>Gdk.keyval_name(event.keyval)</code> converts the key value "
"<code>event.keyval</code> into a symbolic name. The names and corresponding "
"key values can be found <link href=\"http://git.gnome.org/browse/gtk+/tree/"
"gdk/gdkkeysyms.h\">here</link>, but for instance <code>GDK_KEY_BackSpace</"
"code> becomes the string <code>\"BackSpace\"</code>."
msgstr ""
"Το <code>Gdk.keyval_name(event.keyval)</code> μετατρέπει την τιμή κλειδιού "
"σε <code>event.keyval</code> ένα συμβολικό όνομα. Τα ονόματα και οι "
"αντίστοιχες τιμές κλειδιού μπορούν να βρεθούν <link href=\"http://git.gnome."
"org/browse/gtk+/tree/gdk/gdkkeysyms.h\">εδώ</link>, αλλά για παράδειγμα το "
"<code>GDK_KEY_BackSpace</code> γίνεται η συμβολοσειρά <code>\"BackSpace\"</"
"code>."

#. (itstool) path: section/title
#: C/statusbar.py.page:40
msgid "Useful methods for a Statusbar widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο γραμμής κατάστασης"

#. (itstool) path: section/p
#: C/statusbar.py.page:41
msgid ""
"In line 17 the signal <code>\"clicked\"</code> is connected to the callback "
"function <code>button_clicked_cb()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"Στη γραμμή 17 το σήμα <code>\"clicked\"</code> συνδέεται με τη συνάρτηση "
"επανάκλησης <code>button_clicked_cb()</code> χρησιμοποιώντας "
"<code><var>widget</var>.connect(<var>signal</var>, <var>callback function</"
"var>)</code>. Δείτε <link xref=\"signals-callbacks.py\"/> για μια πιο "
"λεπτομερή εξήγηση."

#. (itstool) path: item/p
#: C/statusbar.py.page:43
msgid ""
"<code>pop(context_id)</code> removes the first message in the statusbar "
"stack with the given <code>context_id</code>."
msgstr ""
"Το <code>pop(context_id)</code> αφαιρεί το πρώτο μήνυμα στη στοίβα της "
"γραμμής κατάστασης με το δοσμένο <code>context_id</code>."

#. (itstool) path: item/p
#: C/statusbar.py.page:44
msgid ""
"<code>remove_all(context_id)</code> removes all the messages in the "
"statusbar stack with the given <code>context_id</code>."
msgstr ""
"Το <code>remove_all(context_id)</code> αφαιρεί όλα τα μηνύματα στη στοίβα "
"της γραμμής κατάστασης με το δοσμένο <code>context_id</code>."

#. (itstool) path: item/p
#: C/statusbar.py.page:45
msgid ""
"<code>remove(context_id, message_id)</code> removes the message with the "
"given <code>message_id</code> in the statusbar stack with the given "
"<code>context_id</code>. The <code>message_id</code> is returned by "
"<code>push(context_id, \"the message\")</code> when pushing the message on "
"the statusbar."
msgstr ""
"Το <code>remove(context_id, message_id)</code> αφαιρεί το μήνυμα με το "
"δοσμένο <code>message_id</code> στη στοίβα γραμμής κατάστασης με το δοσμένο "
"<code>context_id</code>. Το <code>message_id</code> επιστρέφεται με "
"<code>push(context_id, \"the message\")</code> όταν προωθείτε το μήνυμα στη "
"γραμμή κατάστασης."

#. (itstool) path: item/p
#: C/statusbar.py.page:53
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkStatusbar.html"
"\">GtkStatusbar</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkStatusbar.html"
"\">GtkStatusbar</link>"

#. (itstool) path: item/p
#: C/statusbar.py.page:54
msgid ""
"<link href=\"http://developer.gnome.org/gdk/stable/gdk-Keyboard-Handling.html"
"\">Gdk - Key Values</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gdk/stable/gdk-Keyboard-Handling.html"
"\">Gdk - Key Values</link>"

#. (itstool) path: info/title
#: C/statusbar.vala.page:8
msgctxt "text"
msgid "Statusbar (Vala)"
msgstr "Γραμμή κατάστασης (Vala)"

#. (itstool) path: page/p
#: C/statusbar.vala.page:26
msgid "This statusbar tells you what's going on."
msgstr "Αυτή η γραμμή κατάστασης σας λέει τι συμβαίνει."

#. (itstool) path: page/code
#: C/statusbar.vala.page:28
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Statusbar statusbar;\n"
"\tuint context_id;\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Statusbar Example\");\n"
"\n"
"\t\tstatusbar = new Gtk.Statusbar ();\n"
"\t\tcontext_id = statusbar.get_context_id (\"example\");\n"
"\t\tstatusbar.push (context_id, \"Waiting for you to do something...\");\n"
"\n"
"\t\t//set the default size of the window\n"
"\t\tthis.set_default_size (200, 100);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tvar label = new Gtk.Label (\"Press any key or \");\n"
"\n"
"\t\tgrid.attach (label, 0, 0, 1, 1);\n"
"\t\tlabel.show ();\n"
"\n"
"\t\tvar button = new Gtk.Button.with_label (\"click me.\");\n"
"\t\tgrid.attach_next_to (button, label, Gtk.PositionType.RIGHT, 1, 1);\n"
"\t\tbutton.show ();\n"
"\n"
"\t\tgrid.attach (statusbar, 0, 1, 2, 1);\n"
"\t\tstatusbar.show ();\n"
"\n"
"\t\tgrid.set_column_spacing (5);\n"
"\t\tgrid.set_column_homogeneous (true);\n"
"\t\tgrid.set_row_homogeneous (true);\n"
"\n"
"\t\tthis.add (grid);\n"
"\t\tgrid.show ();\n"
"\n"
"\t\tbutton.clicked.connect(button_clicked_cb);\n"
"\t}\n"
"\n"
"\t/* Since the key-press-event is a signal received by the window, we don't need to connect\n"
"\tthe window to a callback function.  We can just override key_press_event. */\n"
"\tprotected override bool key_press_event (Gdk.EventKey event) {\n"
"\t\tstatusbar.push (context_id, Gdk.keyval_name(event.keyval) + \" key was pressed.\");\n"
"\t\treturn true;\n"
"\t}\n"
"\n"
"\tvoid button_clicked_cb (Gtk.Button button) {\n"
"\t\tstatusbar.push (context_id, \"You clicked the button.\");\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.status\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Statusbar statusbar;\n"
"\tuint context_id;\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Statusbar Example\");\n"
"\n"
"\t\tstatusbar = new Gtk.Statusbar ();\n"
"\t\tcontext_id = statusbar.get_context_id (\"example\");\n"
"\t\tstatusbar.push (context_id, \"Waiting for you to do something...\");\n"
"\n"
"\t\t//set the default size of the window\n"
"\t\tthis.set_default_size (200, 100);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tvar label = new Gtk.Label (\"Press any key or \");\n"
"\n"
"\t\tgrid.attach (label, 0, 0, 1, 1);\n"
"\t\tlabel.show ();\n"
"\n"
"\t\tvar button = new Gtk.Button.with_label (\"click me.\");\n"
"\t\tgrid.attach_next_to (button, label, Gtk.PositionType.RIGHT, 1, 1);\n"
"\t\tbutton.show ();\n"
"\n"
"\t\tgrid.attach (statusbar, 0, 1, 2, 1);\n"
"\t\tstatusbar.show ();\n"
"\n"
"\t\tgrid.set_column_spacing (5);\n"
"\t\tgrid.set_column_homogeneous (true);\n"
"\t\tgrid.set_row_homogeneous (true);\n"
"\n"
"\t\tthis.add (grid);\n"
"\t\tgrid.show ();\n"
"\n"
"\t\tbutton.clicked.connect(button_clicked_cb);\n"
"\t}\n"
"\n"
"\t/* Since the key-press-event is a signal received by the window, we don't need to connect\n"
"\tthe window to a callback function.  We can just override key_press_event. */\n"
"\tprotected override bool key_press_event (Gdk.EventKey event) {\n"
"\t\tstatusbar.push (context_id, Gdk.keyval_name(event.keyval) + \" key was pressed.\");\n"
"\t\treturn true;\n"
"\t}\n"
"\n"
"\tvoid button_clicked_cb (Gtk.Button button) {\n"
"\t\tstatusbar.push (context_id, \"You clicked the button.\");\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.status\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/statusbar.vala.page:33
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Statusbar.html\">Gtk."
"Statusbar</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Statusbar.html\">Gtk."
"Statusbar</link>"

#. (itstool) path: info/title
#: C/strings.py.page:9
msgctxt "text"
msgid "Strings (Python)"
msgstr "Συμβολοσειρές (Python)"

#. (itstool) path: info/desc
#: C/strings.py.page:14
msgid "An explanation of how to deal with strings in Python and GTK+."
msgstr ""
"Μια εξήγηση πώς να αντιμετωπίσετε τις συμβολοσειρές σε Python και GTK+."

#. (itstool) path: page/title
#: C/strings.py.page:27
msgid "Strings"
msgstr "Συμβολοσειρές"

#. (itstool) path: note/p
#: C/strings.py.page:31
msgid "GNOME strongly encourages the use of Python 3 for writing applications!"
msgstr ""
"Το GNOME ενθαρρύνει έντονα τη χρήση του python 3 για συγγραφή εφαρμογών!"

#. (itstool) path: section/title
#: C/strings.py.page:34
msgid "Strings in Python 2"
msgstr "Συμβολοσειρές σε Python 2"

#. (itstool) path: section/p
#: C/strings.py.page:36
msgid ""
"Python 2 comes with two different kinds of objects that can be used to "
"represent strings, <code>str</code> and <code>unicode</code>. Instances of "
"<code>unicode</code> are used to express Unicode strings, whereas instances "
"of the <code>str</code> type are byte representations (the encoded string). "
"Under the hood, Python represents Unicode strings as either 16- or 32-bit "
"integers, depending on how the Python interpreter was compiled."
msgstr ""
"Ο Python 2 έρχεται με δύο διαφορετικά είδη αντικειμένων που μπορούν να "
"χρησιμοποιηθούν για αναπαράσταση συμβολοσειρών, <code>str</code> και "
"<code>unicode</code>. Περιπτώσεις του <code>unicode</code> χρησιμοποιούνται "
"για να εκφράσουν συμβολοσειρές Unicode, ενώ περιπτώσεις του τύπου <code>str</"
"code> είναι αναπαραστάσεις byte (η κωδικοποιημένη συμβολοσειρά). Στα αφανή, "
"ο Python αντιπροσωπεύει συμβολοσειρές Unicode ως είτε 16- ή 32- δυαδικών "
"ακέραιους, ανάλογα με το πώς ο διερμηνευτής Python μεταγλωττίστηκε."

#. (itstool) path: section/code
#: C/strings.py.page:38
#, no-wrap
msgid ""
"\n"
"&gt;&gt;&gt; unicode_string = u\"Fu\\u00dfb\\u00e4lle\"\n"
"&gt;&gt;&gt; print unicode_string\n"
"Fußbälle\n"
msgstr ""
"\n"
"&gt;&gt;&gt; unicode_string = u\"Fu\\u00dfb\\u00e4lle\"\n"
"&gt;&gt;&gt; print unicode_string\n"
"Fußbälle\n"

#. (itstool) path: section/p
#: C/strings.py.page:44
msgid ""
"Unicode strings can be converted to 8-bit strings with <code>unicode."
"encode()</code>. Python’s 8-bit strings have a <code>str.decode()</code> "
"method that interprets the string using the given encoding (that is, it is "
"the inverse of the <code>unicode.encode()</code>):"
msgstr ""
"Οι συμβολοσειρές Unicode μπορούν να μετατραπούν σε συμβολοσειρές 8 δυαδικών "
"με <code>unicode.encode()</code>. Οι συμβολοσειρές 8 δυαδικών έχουν μια "
"μέθοδο <code>str.decode()</code> που ερμηνεύει τη συμβολοσειρά "
"χρησιμοποιώντας τη δεδομένη κωδικοποίηση (δηλαδή, είναι το αντίστροφο της "
"<code>unicode.encode()</code>):"

#. (itstool) path: section/code
#: C/strings.py.page:46
#, no-wrap
msgid ""
"\n"
"&gt;&gt;&gt; type(unicode_string)\n"
"&lt;type 'unicode'&gt;\n"
"&gt;&gt;&gt; unicode_string.encode(\"utf-8\")\n"
"'Fu\\xc3\\x9fb\\xc3\\xa4lle'\n"
"&gt;&gt;&gt; utf8_string = unicode_string.encode(\"utf-8\")\n"
"&gt;&gt;&gt; type(utf8_string)\n"
"&lt;type 'str'&gt;\n"
"&gt;&gt;&gt; unicode_string == utf8_string.decode(\"utf-8\")\n"
"True"
msgstr ""
"\n"
"&gt;&gt;&gt; type(unicode_string)\n"
"&lt;type 'unicode'&gt;\n"
"&gt;&gt;&gt; unicode_string.encode(\"utf-8\")\n"
"'Fu\\xc3\\x9fb\\xc3\\xa4lle'\n"
"&gt;&gt;&gt; utf8_string = unicode_string.encode(\"utf-8\")\n"
"&gt;&gt;&gt; type(utf8_string)\n"
"&lt;type 'str'&gt;\n"
"&gt;&gt;&gt; unicode_string == utf8_string.decode(\"utf-8\")\n"
"True"

#. (itstool) path: section/p
#: C/strings.py.page:57
msgid ""
"Unfortunately, Python 2.x allows you to mix <code>unicode</code> and "
"<code>str</code> if the 8-bit string happened to contain only 7-bit (ASCII) "
"bytes, but would get <sys>UnicodeDecodeError</sys> if it contained non-ASCII "
"values."
msgstr ""
"Δυστυχώς, ο Python 2.x επιτρέπει την ανάμειξη <code>unicode</code> και "
"<code>str</code> εάν η συμβολοσειρά 8 δυαδικών συμβεί να περιέχει μόνο bytes "
"μόνο 7 δυαδικών (ASCII), αλλά θα μπορούσε να πάρει <sys>UnicodeDecodeError</"
"sys> εάν περιέχει μη ASCII τιμές."

#. (itstool) path: section/title
#: C/strings.py.page:62
msgid "Strings in Python 3"
msgstr "Συμβολοσειρές σε Python 3"

#. (itstool) path: section/p
#: C/strings.py.page:64
msgid ""
"Since Python 3.0, all strings are stored as Unicode in an instance of the "
"<code>str</code> type. Encoded strings on the other hand are represented as "
"binary data in the form of instances of the bytes type. Conceptionally, "
"<code>str</code> refers to text, whereas bytes refers to data. Use "
"<code>encode()</code> to go from <code>str</code> to <code>bytes</code>, and "
"<code>decode()</code> to go from <code>bytes</code> to <code>str</code>."
msgstr ""
"Από τον Python 3.0, όλες οι συμβολοσειρές αποθηκεύονται ως Unicode σε ένα "
"στιγμιότυπο του τύπου <code>str</code>. Κωδικοποιημένες συμβολοσειρές από "
"την άλλη μεριά αναπαριστώνται ως δυαδικά δεδομένα στη φόρμα στιγμιοτύπων του "
"τύπου bytes. Εννοιολογικά, ο <code>str</code> αναφέρεται σε κείμενο, ενώ τα "
"bytes αναφέρονται σε δεδομένα. Χρησιμοποιήστε <code>encode()</code> για "
"μετάβαση από <code>str</code> σε <code>bytes</code> και <code>decode()</"
"code> για μετάβαση από <code>bytes</code> σε <code>str</code>."

#. (itstool) path: section/p
#: C/strings.py.page:66
msgid ""
"In addition, it is no longer possible to mix Unicode strings with encoded "
"strings, because it will result in a <code>TypeError</code>:"
msgstr ""
"Επιπλέον, δεν είναι πια δυνατό να αναμείξετε συμβολοσειρές Unicode με "
"κωδικοποιημένες συμβολοσειρές, επειδή θα καταλήξει σε ένα <code>TypeError</"
"code>:"

#. (itstool) path: section/code
#: C/strings.py.page:68
#, no-wrap
msgid ""
"\n"
"&gt;&gt;&gt; text = \"Fu\\u00dfb\\u00e4lle\"\n"
"&gt;&gt;&gt; data = b\" sind rund\"\n"
"&gt;&gt;&gt; text + data\n"
"Traceback (most recent call last):\n"
"  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n"
"TypeError: Can't convert 'bytes' object to str implicitly\n"
"&gt;&gt;&gt; text + data.decode(\"utf-8\")\n"
"'Fußbälle sind rund'\n"
"&gt;&gt;&gt; text.encode(\"utf-8\") + data\n"
"b'Fu\\xc3\\x9fb\\xc3\\xa4lle sind rund'"
msgstr ""
"\n"
"&gt;&gt;&gt; text = \"Fu\\u00dfb\\u00e4lle\"\n"
"&gt;&gt;&gt; data = b\" sind rund\"\n"
"&gt;&gt;&gt; text + data\n"
"Traceback (most recent call last):\n"
"  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n"
"TypeError: Can't convert 'bytes' object to str implicitly\n"
"&gt;&gt;&gt; text + data.decode(\"utf-8\")\n"
"'Fußbälle sind rund'\n"
"&gt;&gt;&gt; text.encode(\"utf-8\") + data\n"
"b'Fu\\xc3\\x9fb\\xc3\\xa4lle sind rund'"

#. (itstool) path: section/title
#: C/strings.py.page:83
msgid "Unicode in GTK+"
msgstr "Unicode σε GTK+"

#. (itstool) path: section/p
#: C/strings.py.page:85
msgid ""
"GTK+ uses UTF-8 encoded strings for all text. This means that if you call a "
"method that returns a string you will always obtain an instance of the "
"<code>str</code> type. The same applies to methods that expect one or more "
"strings as parameter, they must be UTF-8 encoded. However, for convenience "
"PyGObject will automatically convert any unicode instance to str if supplied "
"as argument:"
msgstr ""
"Το GTK+ χρησιμοποιεί κωδικοποιημένες συμβολοσειρές UTF-8 για όλα τα κείμενα. "
"Αυτό σημαίνει ότι εάν καλέσετε μια μέθοδο που επιστρέφει μια συμβολοσειρά θα "
"παίρνετε πάντα ένα στιγμιότυπο του τύπου <code>str</code>. Το ίδιο "
"εφαρμόζεται στις μεθόδους που περιμένουν μια ή περισσότερες συμβολοσειρές ως "
"παράμετρο, πρέπει να είναι κωδικοποιημένες UTF-8. Όμως, για ευκολία το "
"PyGObject θα μετατρέπει αυτόματα οποιοδήποτε στιγμιότυπο unicode σε str εάν "
"του δοθεί ως όρισμα:"

#. (itstool) path: section/code
#: C/strings.py.page:87
#, no-wrap
msgid ""
"\n"
"&gt;&gt;&gt; from gi.repository import Gtk\n"
"&gt;&gt;&gt; label = Gtk.Label()\n"
"&gt;&gt;&gt; unicode_string = u\"Fu\\u00dfb\\u00e4lle\"\n"
"&gt;&gt;&gt; label.set_text(unicode_string)\n"
"&gt;&gt;&gt; txt = label.get_text()\n"
"&gt;&gt;&gt; type(txt)\n"
"&lt;type 'str'&gt;"
msgstr ""
"\n"
"&gt;&gt;&gt; from gi.repository import Gtk\n"
"&gt;&gt;&gt; label = Gtk.Label()\n"
"&gt;&gt;&gt; unicode_string = u\"Fu\\u00dfb\\u00e4lle\"\n"
"&gt;&gt;&gt; label.set_text(unicode_string)\n"
"&gt;&gt;&gt; txt = label.get_text()\n"
"&gt;&gt;&gt; type(txt)\n"
"&lt;type 'str'&gt;"

#. (itstool) path: section/p
#: C/strings.py.page:96
msgid "Furthermore:"
msgstr "Επιπλέον:"

#. (itstool) path: section/code
#: C/strings.py.page:98
#, no-wrap
msgid ""
"\n"
"&gt;&gt;&gt; txt == unicode_string"
msgstr ""
"\n"
"&gt;&gt;&gt; txt == unicode_string"

#. (itstool) path: section/p
#: C/strings.py.page:101
msgid ""
"would return <code>False</code>, with the warning <code>__main__:1: "
"UnicodeWarning: Unicode equal comparison failed to convert both arguments to "
"Unicode - interpreting them as being unequal</code> (<code>Gtk.Label."
"get_text()</code> will always return a <code>str</code> instance; therefore, "
"<code>txt</code> and <code>unicode_string</code> are not equal)."
msgstr ""
"Θα επέστρεφε <code>False</code>, με την προειδοποίηση <code>__main__:1: "
"UnicodeWarning: η σύγκριση όμοιων Unicode απέτυχε να μετατρέψει και τα δυο "
"ορίσματα σε Unicode - ερμηνεύοντας τα ως ανόμοια</code> (<code>Gtk.Label."
"get_text()</code> θα επιστρέφει πάντα ένα στιγμιότυπο <code>str</code>· "
"συνεπώς, <code>txt</code> and <code>unicode_string</code> δεν είναι όμοια)."

#. (itstool) path: section/p
#: C/strings.py.page:103
msgid ""
"This is especially important if you want to internationalize your program "
"using <link href=\"http://docs.python.org/library/gettext.html"
"\"><code>gettext</code></link>. You have to make sure that <code>gettext</"
"code> will return UTF-8 encoded 8-bit strings for all languages."
msgstr ""
"Αυτό είναι ιδιαίτερα σημαντικό εάν θέλετε να διεθνοποιήσετε το πρόγραμμά σας "
"χρησιμοποιώντας <link href=\"http://docs.python.org/library/gettext.html"
"\"><code>gettext</code></link>. Πρέπει να βεβαιωθείτε ότι η <code>gettext</"
"code> θα επιστρέψει κωδικοποιημένες συμβολοσειρές 8 δυαδικών UTF-8 για όλες "
"τις γλώσσες."

#. (itstool) path: section/p
#: C/strings.py.page:105
msgid ""
"In general it is recommended to not use <code>unicode</code> objects in GTK+ "
"applications at all, and only use UTF-8 encoded <code>str</code> objects "
"since GTK+ does not fully integrate with <code>unicode</code> objects."
msgstr ""
"Γενικά συνιστάται να μην χρησιμοποιείτε αντικείμενα <code>unicode</code> σε "
"εφαρμογές GTK+ καθόλου και να χρησιμοποιείτε κωδικοποιημένα αντικείμενα "
"<code>str</code> UTF-8 αφού το GTK+ δεν ενσωματώνει πλήρως αντικείμενα "
"<code>unicode</code>."

#. (itstool) path: section/p
#: C/strings.py.page:107
#| msgid ""
#| "With Python 3.x things are much more consistent, because PyGObject will "
#| "automatically encode/decode to/from UTF-8 if you pass a string to a "
#| "method or a method returns a string. Strings, or text, will always be "
#| "represented as instances of <code>str</code> only."
msgid ""
"String encoding is more consistent in Python 3.x because PyGObject will "
"automatically encode/decode to/from UTF-8 if you pass a string to a method "
"or a method returns a string. Strings, or text, will always be represented "
"as instances of <code>str</code> only."
msgstr ""
"Με την Python 3.x τα πράγματα είναι πολύ πιο ομοιόμορφα, επειδή το PyGObject "
"θα κωδικοποιήσει/αποκωδικοποιήσει αυτόματα προς/από UTF-8 εάν περάσετε μια "
"συμβολοσειρά σε μια μέθοδο ή εάν μια μέθοδος επιστρέφει μια συμβολοσειρά. "
"Συμβολοσειρές, ή κείμενο, θα αναπαριστώνται πάντα ως στιγμιότυπα <code>str</"
"code>."

#. (itstool) path: section/p
#: C/strings.py.page:114
msgid ""
"<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/unicode."
"html\">How To Deal With Strings - The Python GTK+ 3 Tutorial</link>"
msgstr ""
"<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/unicode."
"html\">How To Deal With Strings - The Python GTK+ 3 Tutorial</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/switch.c.page:23 C/switch.py.page:23 C/switch.vala.page:26
msgctxt "_"
msgid ""
"external ref='media/switch_off.png' md5='211a2962708800697ad5373dcc86ad6d'"
msgstr ""
"external ref='media/switch_off.png' md5='211a2962708800697ad5373dcc86ad6d'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/switch.c.page:24 C/switch.py.page:24 C/switch.vala.page:27
msgctxt "_"
msgid ""
"external ref='media/switch_on.png' md5='95e8769f758c2d95ace0fa8ecf30b29d'"
msgstr ""
"external ref='media/switch_on.png' md5='95e8769f758c2d95ace0fa8ecf30b29d'"

#. (itstool) path: info/title
#: C/switch.c.page:8
msgctxt "text"
msgid "Switch (C)"
msgstr "Διακόπτης (C)"

#. (itstool) path: info/desc
#: C/switch.c.page:18 C/switch.py.page:19 C/switch.vala.page:22
msgid "A \"light switch\" style toggle"
msgstr "Μια εναλλαγή τεχνοτροπίας \"ελαφριού διακόπτη\""

#. (itstool) path: page/title
#: C/switch.c.page:21 C/switch.js.page:21 C/switch.py.page:22
#: C/switch.vala.page:25
msgid "Switch"
msgstr "Διακόπτης"

#. (itstool) path: page/p
#: C/switch.c.page:25
msgid "This switch toggles the title of the window."
msgstr "Αυτός ο διακόπτης εναλλάσσει τον τίτλο του παραθύρου."

#. (itstool) path: page/code
#: C/switch.c.page:27
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Signal handler for the \"active\" signal of the Switch*/\n"
"static void\n"
"activate_cb (GObject    *switcher,\n"
"             GParamSpec *pspec,\n"
"             gpointer    user_data)\n"
"{\n"
"  GtkWindow *window = user_data;\n"
"\n"
"  if (gtk_switch_get_active (GTK_SWITCH (switcher)))\n"
"    gtk_window_set_title (GTK_WINDOW (window), \"Switch Example\");\n"
"  else\n"
"    gtk_window_set_title (GTK_WINDOW (window), \"\");\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"  GtkWidget *switcher;\n"
"\n"
"  /*Create a window with a set title and default size.\n"
"  Also, set a border width for the amount of space to leave\n"
"  inside the window*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Switch Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 100);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 10);\n"
"\n"
"  /*Create a label*/\n"
"  label = gtk_label_new (\"Title\");\n"
"\n"
"  /*Create a switch with a default active state*/\n"
"  switcher = gtk_switch_new ();\n"
"  gtk_switch_set_active (GTK_SWITCH (switcher), TRUE);\n"
"\n"
"  /*Create a grid and set the column spacing, attach the label and\n"
"  switch onto the grid and position them accordingly*/\n"
"  grid = gtk_grid_new();\n"
"  gtk_grid_set_column_spacing (GTK_GRID (grid), 10);\n"
"  gtk_grid_attach (GTK_GRID (grid), label, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), switcher, 1, 0, 1, 1);\n"
"\n"
"  /*Connecting the clicked signal to the callback function*/\n"
"  g_signal_connect (GTK_SWITCH (switcher), \n"
"                    \"notify::active\", \n"
"                    G_CALLBACK (activate_cb), \n"
"                    window);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Χειριστής σήματος για το σήμα \"active\"του διακόπτη*/\n"
"static void\n"
"activate_cb (GObject    *switcher,\n"
"             GParamSpec *pspec,\n"
"             gpointer    user_data)\n"
"{\n"
"  GtkWindow *window = user_data;\n"
"\n"
"  if (gtk_switch_get_active (GTK_SWITCH (switcher)))\n"
"    gtk_window_set_title (GTK_WINDOW (window), \"Switch Example\");\n"
"  else\n"
"    gtk_window_set_title (GTK_WINDOW (window), \"\");\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"  GtkWidget *switcher;\n"
"\n"
"  /*Δημιουργία παραθύρου με ορισμένο τίτλο και προεπιλεγμένο μέγεθος.\n"
"  Επίσης, με ορισμένο πλάτος περιγράμματος  για τον χώρο που θα αφήσει\n"
"  μέσα στο παράθυρο*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Switch Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 100);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 10);\n"
"\n"
"  /*Δημιουργία ετικέτας*/\n"
"  label = gtk_label_new (\"Title\");\n"
"\n"
"  /*Δημιουργία διακόπτη με προεπιλεγμένη ενεργή κατάσταση*/\n"
"  switcher = gtk_switch_new ();\n"
"  gtk_switch_set_active (GTK_SWITCH (switcher), TRUE);\n"
"\n"
"  /*Δημιουργία πλέγματος και ορισμός διάκενου στήλης, προσάρτηση της ετικέτας και\n"
"  του διακόπτη στο πλέγμα και κατάλληλη τοποθέτησή τους*/\n"
"  grid = gtk_grid_new();\n"
"  gtk_grid_set_column_spacing (GTK_GRID (grid), 10);\n"
"  gtk_grid_attach (GTK_GRID (grid), label, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), switcher, 1, 0, 1, 1);\n"
"\n"
"  /*Σύνδεση του πατημένου σήματος με τη συνάρτηση επανάκλησης*/\n"
"  g_signal_connect (GTK_SWITCH (switcher), \n"
"                    \"notify::active\", \n"
"                    G_CALLBACK (activate_cb), \n"
"                    window);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/switch.js.page:22
msgctxt "_"
msgid ""
"external ref='media/switchanimals.png' md5='513ae15dcf68e15eef30b76420b8c714'"
msgstr ""
"external ref='media/switchanimals.png' md5='513ae15dcf68e15eef30b76420b8c714'"

#. (itstool) path: info/title
#: C/switch.js.page:8
msgctxt "text"
msgid "Switch (JavaScript)"
msgstr "Διακόπτης (JavaScript)"

#. (itstool) path: info/desc
#: C/switch.js.page:18
msgid "A sliding switch that can be flipped on and off"
msgstr "Ένας κινητός διακόπτης που μπορεί να αντιστρέφεται σε ναι και όχι"

#. (itstool) path: page/p
#: C/switch.js.page:23
msgid ""
"A Switch has two positions, on and off. This example shows how you can use "
"multiple switches together to control which <link xref=\"image.js\">Image</"
"link> is shown in the window. The pictures used in this example <link href="
"\"https://live.gnome.org/TarynFox?action=AttachFile&amp;do=get&amp;"
"target=Animal+Photos.zip\">can be downloaded here</link>."
msgstr ""
"Ένας διακόπτης έχει δύο θέσεις ενεργή/ανενεργή. Αυτό το παράδειγμα εμφανίζει "
"πώς μπορείτε να χρησιμοποιήσετε πολλαπλούς διακόπτες μαζί για να ελέγξετε "
"ποια <link xref=\"image.js\">εικόνα</link> προβάλλεται στο παράθυρο. Οι "
"εικόνες που χρησιμοποιούνται σε αυτό το παράδειγμα  <link href=\"https://"
"live.gnome.org/TarynFox?action=AttachFile&amp;do=get&amp;target=Animal"
"+Photos.zip\">μπορούν να φορτωθούν εδώ</link>."

#. (itstool) path: note/p
#: C/switch.js.page:24
msgid ""
"The window will contain a \"broken image\" icon instead of a picture if "
"picture files named <file>redfox.png</file>, <file>muteswan.png</file>, "
"<file>fruitbat.png</file>, and <file>gentoopenguin.png</file> aren't in the "
"same directory. You can change the code and the pictures around as you like, "
"but the Creative Commons-licensed photos used in this example were taken "
"from the following sources and cropped to 640x425:"
msgstr ""
"Το παράθυρο θα περιέχει ένα εικονίδιο \"σπασμένης εικόνας\" αντί για μια "
"εικόνα εάν τα αρχεία εικόνας με όνομα <file>redfox.png</file>, "
"<file>muteswan.png</file>, <file>fruitbat.png</file> και <file>gentoopenguin."
"png</file> δεν είναι στον ίδιο κατάλογο. Μπορείτε να αλλάξετε τον κώδικα και "
"τις εικόνες ολόγυρα όπως θέλετε, αλλά οι φωτογραφίες με άδεια Creative "
"Commons που χρησιμοποιούνται σε αυτό το παράδειγμα πάρθηκαν από τις "
"ακόλουθες πηγές και περικόπηκαν σε 640x425:"

#. (itstool) path: item/p
#: C/switch.js.page:26
msgid ""
"<link href=\"http://en.wikipedia.org/wiki/File:Fuzzy_Freddy.jpg\">Red fox "
"photo</link> by Rob Lee, licensed <link href=\"http://creativecommons.org/"
"licenses/by/2.0/deed.en\">CC-By</link>"
msgstr ""
"<link href=\"http://en.wikipedia.org/wiki/File:Fuzzy_Freddy.jpg\">φωτογραφία "
"κόκκινης αλεπούς</link> από τον Rob Lee, με άδεια <link href=\"http://"
"creativecommons.org/licenses/by/2.0/deed.en\">CC-By</link>"

#. (itstool) path: item/p
#: C/switch.js.page:27
msgid ""
"<link href=\"http://en.wikipedia.org/wiki/File:Pygoscelis_papua_-"
"Nagasaki_Penguin_Aquarium_-swimming_underwater-8a.jpg\">Gentoo penguin "
"photo</link> by Ken Funakoshi, licensed <link href=\"http://creativecommons."
"org/licenses/by-sa/2.0/deed.en\">CC-By-SA</link>"
msgstr ""
"<link href=\"http://en.wikipedia.org/wiki/File:Pygoscelis_papua_-"
"Nagasaki_Penguin_Aquarium_-swimming_underwater-8a.jpg\">φωτογραφία "
"πιγκουίνου Gentoo</link> από τον Ken Funakoshi, με άδεια <link href=\"http://"
"creativecommons.org/licenses/by-sa/2.0/deed.en\">CC-By-SA</link>"

#. (itstool) path: item/p
#: C/switch.js.page:28
msgid ""
"<link href=\"http://www.flickr.com/photos/shekgraham/127431519/in/"
"photostream/\">Fruit bat photo</link> by Shek Graham, licensed <link href="
"\"http://creativecommons.org/licenses/by/2.0/deed.en\">CC-By</link>"
msgstr ""
"<link href=\"http://www.flickr.com/photos/shekgraham/127431519/in/"
"photostream/\">φωτογραφία νυχτερίδας φρούτων</link> από τον Shek Graham, "
"licensed <link href=\"http://creativecommons.org/licenses/by/2.0/deed.en"
"\">CC-By</link>"

#. (itstool) path: item/p
#: C/switch.js.page:29
msgid ""
"<link href=\"http://commons.wikimedia.org/wiki/File:Mute_Swan-"
"Mindaugas_Urbonas.jpg\">Mute swan photo</link> by Mindaugas Urbonas, "
"licensed <link href=\"http://creativecommons.org/licenses/by-sa/2.5/deed.en"
"\">CC-By-SA</link>"
msgstr ""
"<link href=\"http://commons.wikimedia.org/wiki/File:Mute_Swan-"
"Mindaugas_Urbonas.jpg\">φωτογραφία σιωπηλού κύκνου</link> από Mindaugas "
"Urbonas, με άδεια <link href=\"http://creativecommons.org/licenses/by-sa/2.5/"
"deed.en\">CC-By-SA</link>"

#. (itstool) path: note/p
#: C/switch.js.page:31
msgid ""
"Photo credits and licensing information are shown in the application's <link "
"xref=\"aboutdialog.js\">AboutDialog</link>. Always remember to credit the "
"original artist when using <link href=\"http://creativecommons.org"
"\">Creative Commons-licensed works!</link>"
msgstr ""
"Μνείες φωτογραφίας και πληροφορίες αδειοδότησης εμφανίζονται στο <link xref="
"\"aboutdialog.js\">AboutDialog</link>. Να θυμάστε πάντα να μνημονεύετε τον "
"αρχικό καλλιτέχνη όταν χρησιμοποιείτε<link href=\"http://creativecommons.org"
"\">εργασίες με άδεια Creative Commons!</link> της εφαρμογής"

#. (itstool) path: section/code
#: C/switch.js.page:48
#, no-wrap
msgid ""
"\n"
"const SwitchExample = new Lang.Class({\n"
"    Name: 'Switch Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsswitch',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal creates the menu and builds the UI\n"
"    _onStartup: function() {\n"
"        this._initMenus();\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const SwitchExample = new Lang.Class({\n"
"    Name: 'Switch Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsswitch',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Σύνδεση των σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει ένα παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup'δημιουργεί το μενού και δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._initMenus();\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/switch.js.page:75
msgid ""
"All the code for this sample goes in the SwitchExample class. The above code "
"creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"Application.html\">Gtk.Application</link> for our widgets and window to go "
"in."
msgstr ""
"Όλος ο κώδικας για αυτό το παράδειγμα πηγαίνει στην κλάση SwitchExample. Ο "
"παραπάνω κώδικας δημιουργεί μια <link href=\"http://www.roojs.com/seed/"
"gir-1.2-gtk-3.0/gjs/Gtk.Application.html\">Gtk.Application</link> για να "
"μπουν μέσα τα γραφικά στοιχεία μας και τα παράθυρα."

#. (itstool) path: section/code
#: C/switch.js.page:77
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Animal Creator\"});\n"
msgstr ""
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Animal Creator\"});\n"

#. (itstool) path: section/title
#: C/switch.js.page:92
msgid "Creating the switches"
msgstr "Δημιουργία των διακοπτών"

#. (itstool) path: section/code
#: C/switch.js.page:93
#, no-wrap
msgid ""
"\n"
"        // Create the image widget and set its default picture\n"
"        this._image = new Gtk.Image ({file: \"redfox.png\"});\n"
msgstr ""
"\n"
"        // Δημιουργία του γραφικού της εικόνας και ορισμός της προεπιλεγμένης της εικόνας\n"
"        this._image = new Gtk.Image ({file: \"redfox.png\"});\n"

#. (itstool) path: section/p
#: C/switch.js.page:98
msgid ""
"We first create the <link xref=\"image.js\">Image</link> that the switches "
"will control. Remember that a file named <file>redfox.png</file> needs to be "
"in the same directory as this application."
msgstr ""
"Δημιουργούμε πρώτα την <link xref=\"image.js\">εικόνα</link> που οι "
"διακόπτες θα ελέγχουν. Να θυμάστε ότι ένα αρχείο με όνομα <file>redfox.png</"
"file> χρειάζεται να είναι στον ίδιο κατάλογο όπως αυτή η εφαρμογή."

#. (itstool) path: section/code
#: C/switch.js.page:100
#, no-wrap
msgid ""
"\n"
"        // Create a label for the first switch\n"
"        this._flyLabel = new Gtk.Label ({\n"
"            label: \"Make it fly\",\n"
"            margin_right: 30});\n"
"\n"
"        // Create the first switch and set its default position\n"
"        this._flySwitch = new Gtk.Switch ({active: false});\n"
"        this._flySwitch.connect ('notify::active', Lang.bind (this, this._switchFlip));\n"
"\n"
"        // Create a label for the second switch\n"
"        this._birdLabel = new Gtk.Label ({\n"
"            label: \"Make it a bird\",\n"
"            margin_right: 30});\n"
"\n"
"        // Create the second switch\n"
"        this._birdSwitch = new Gtk.Switch ({active: false});\n"
"        this._birdSwitch.connect ('notify::active', Lang.bind (this, this._switchFlip));\n"
msgstr ""
"\n"
"        // Δημιουργία μιας ετικέτας για τον πρώτο διακόπτη\n"
"        this._flyLabel = new Gtk.Label ({\n"
"            label: \"Make it fly\",\n"
"            margin_right: 30});\n"
"\n"
"        // Δημιουργία του πρώτου διακόπτη και ορισμός της προεπιλεγμένης του θέσης\n"
"        this._flySwitch = new Gtk.Switch ({active: false});\n"
"        this._flySwitch.connect ('notify::active', Lang.bind (this, this._switchFlip));\n"
"\n"
"        // Δημιουργία μιας ετικέτας για τον δεύτερο διακόπτη\n"
"        this._birdLabel = new Gtk.Label ({\n"
"            label: \"Make it a bird\",\n"
"            margin_right: 30});\n"
"\n"
"        // Δημιουργία του δεύτερου διακόπτη\n"
"        this._birdSwitch = new Gtk.Switch ({active: false});\n"
"        this._birdSwitch.connect ('notify::active', Lang.bind (this, this._switchFlip));\n"

#. (itstool) path: section/p
#: C/switch.js.page:120
msgid ""
"We use a <link xref=\"label.js\">Label</link> to mark each Switch, and give "
"them a bit of a margin on the right so that they aren't crammed right next "
"to the Switches. After that we create the Switches, and set them to be "
"switched off by default."
msgstr ""
"Χρησιμοποιούμε μια <link xref=\"label.js\">ετικέτα</link> για να σημειώσουμε "
"κάθε διακόπτη και να τους δώσουμε λίγο περιθώριο στα δεξιά έτσι ώστε να μην "
"στριμώχνονται ακριβώς δίπλα στους διακόπτες. Μετά δημιουργούμε τους "
"διακόπτες και τους ορίζουμε ανενεργούς από προεπιλογή."

#. (itstool) path: section/p
#: C/switch.js.page:121
msgid ""
"The signal a switch sends out when it's flipped on or off is called notify::"
"active. After we create each switch, we connect its notify::active signal to "
"a function called _switchFlip. If you have multiple switches that each do "
"something different, you might want to connect them to different functions, "
"but here they're both used for the same thing: To control what picture's "
"displayed by _image."
msgstr ""
"Το σήμα που ένας διακόπτης στέλνει όταν αντιστρέφεται ενεργά/ανενεργά "
"λέγεται notify::active. Μετά τη δημιουργία κάθε διακόπτη, συνδέουμε το σήμα "
"του notify::active σε μια συνάρτηση που λέγεται _switchFlip. Εάν έχετε "
"πολλούς διακόπτες που ο καθένας τους κάνει κάτι διαφορετικό, ίσως θελήσετε "
"να τους συνδέσετε σε διαφορετικές συναρτήσεις, αλλά εδώ και οι δυο "
"χρησιμοποιούνται για το ίδιο πράγμα: τον έλεγχο της εμφανιζόμενης εικόνας "
"από το _image."

#. (itstool) path: section/code
#: C/switch.js.page:123
#, no-wrap
msgid ""
"\n"
"        // Create a grid for the labels and switches beneath the picture\n"
"        this._UIGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_top: 20});\n"
"\n"
"        // Attach the labels and switches to that grid\n"
"        this._UIGrid.attach (this._flyLabel, 0, 0, 1, 1);\n"
"        this._UIGrid.attach (this._flySwitch, 1, 0, 1, 1);\n"
"        this._UIGrid.attach (this._birdLabel, 0, 1, 1, 1);\n"
"        this._UIGrid.attach (this._birdSwitch, 1, 1, 1, 1);\n"
"\n"
"        // Create a master grid to put both the UI and the picture into\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Attach the picture and the UI grid to the master grid\n"
"        this._mainGrid.attach (this._image, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._UIGrid, 0, 1, 1, 1);\n"
msgstr ""
"\n"
"        // Δημιουργία πλέγματος για τις ετικέτες και τους διακόπτες κάτω από την εικόνα\n"
"        this._UIGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_top: 20});\n"
"\n"
"        // Προσάρτηση των ετικετών και διακοπτών σε αυτό το πλέγμα\n"
"        this._UIGrid.attach (this._flyLabel, 0, 0, 1, 1);\n"
"        this._UIGrid.attach (this._flySwitch, 1, 0, 1, 1);\n"
"        this._UIGrid.attach (this._birdLabel, 0, 1, 1, 1);\n"
"        this._UIGrid.attach (this._birdSwitch, 1, 1, 1, 1);\n"
"\n"
"        // Δημιουργία ενός κύριου πλέγματος για να τοποθετηθούν μέσα η γραφική διεπαφή και η εικόνα\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Προσάρτηση του πλέγματος εικόνας και διεπαφής χρήστη στο κύριο πλέγμα\n"
"        this._mainGrid.attach (this._image, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._UIGrid, 0, 1, 1, 1);\n"

#. (itstool) path: section/p
#: C/switch.js.page:145
msgid ""
"We create a <link xref=\"grid.js\">Grid</link> for the Labels and Switches "
"first, so that we can organize them in a 2x2 layout with a margin between it "
"and the Image. Then we put that Grid into a larger 2x1 Grid that has the "
"Image on top, and the Grid with the Labels and Switches on the bottom."
msgstr ""
"Δημιουργούμε ένα <link xref=\"grid.js\">πλέγμα</link> για τις ετικέτες και "
"τους διακόπτες πρώτα, έτσι ώστε να μπορούμε να τις οργανώσουμε σε μια "
"διάταξη 2x2 με ένα περιθώριο μεταξύ του και της εικόνας. Έπειτα βάζουμε αυτό "
"το πλέγμα σε ένα μεγαλύτερο πλέγμα 2x1 που έχει την εικόνα στην κορυφή και "
"το πλέγμα με τις ετικέτες και τους διακόπτες στο τέλος."

#. (itstool) path: section/code
#: C/switch.js.page:146
#, no-wrap
msgid ""
"\n"
"        // Add the master grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""
"\n"
"        // Προσθήκη του κύριου πλέγματος στο παράθυρο\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"

#. (itstool) path: section/title
#: C/switch.js.page:158
msgid "Function which handles the switches being flipped"
msgstr "Η συνάρτηση που χειρίζεται τους διακόπτες που αντιστράφηκαν"

#. (itstool) path: section/code
#: C/switch.js.page:160
#, no-wrap
msgid ""
"\n"
"    _switchFlip: function() {\n"
"\n"
"        // Change the picture depending on which switches are flipped\n"
"        if (this._flySwitch.get_active()) {\n"
"\n"
"            if (this._birdSwitch.get_active()) this._image.set_from_file (\"muteswan.png\");\n"
"\n"
"            else this._image.set_from_file (\"fruitbat.png\");\n"
"        }\n"
"\n"
"        else {\n"
"\n"
"            if (this._birdSwitch.get_active()) this._image.set_from_file (\"gentoopenguin.png\");\n"
"\n"
"            else this._image.set_from_file (\"redfox.png\");\n"
"\n"
"        }\n"
"\n"
"    },\n"
msgstr ""
"\n"
"    _switchFlip: function() {\n"
"\n"
"        // Αλλαγή της εικόνας ανάλογα με το ποιοι διακόπτες αντιστρέφονται\n"
"        if (this._flySwitch.get_active()) {\n"
"\n"
"            if (this._birdSwitch.get_active()) this._image.set_from_file (\"muteswan.png\");\n"
"\n"
"            else this._image.set_from_file (\"fruitbat.png\");\n"
"        }\n"
"\n"
"        else {\n"
"\n"
"            if (this._birdSwitch.get_active()) this._image.set_from_file (\"gentoopenguin.png\");\n"
"\n"
"            else this._image.set_from_file (\"redfox.png\");\n"
"\n"
"        }\n"
"\n"
"    },\n"

#. (itstool) path: section/p
#: C/switch.js.page:181
msgid ""
"Each time a Switch is flipped, this function checks to see which of the two "
"Switches are active afterwards, using the Switches' built-in get_active() "
"function. It then changes the Image accordingly. You can change the "
"filenames around as you like, so long as you have pictures to go with them."
msgstr ""
"Κάθε φορά που ένας διακόπτης αναστρέφεται, αυτή η συνάρτηση ελέγχει να δει "
"ποιος από τους δύο διακόπτες είναι ενεργός κατόπιν, χρησιμοποιώντας την "
"ενσωματωμένη συνάρτηση get_active(). Έπειτα αλλάζει την εικόνα ανάλογα. "
"Μπορείτε να αλλάξετε τα ονόματα αρχείων ολόγυρα όπως θέλετε, εφόσον έχετε "
"εικόνες που να πηγαίνουν μαζί τους."

#. (itstool) path: section/title
#: C/switch.js.page:185
msgid "Creating the AboutDialog"
msgstr "Δημιουργία του AboutDialog"

#. (itstool) path: section/code
#: C/switch.js.page:186
#, no-wrap
msgid ""
"\n"
"    _initMenus: function() {\n"
"\n"
"        // Build the application's menu so we can have an \"About\" button\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"About\", 'app.about');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // Bind the \"About\" button to the _showAbout() function\n"
"        let aboutAction = new Gio.SimpleAction ({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        // Bind the \"Quit\" button to the function that closes the window\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
msgstr ""
"\n"
"    _initMenus: function() {\n"
"\n"
"        // Δόμηση του μενού της εφαρμογής, έτσι ώστε να μπορούμε να έχουμε ένα πλήκτρο \"About\"\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"About\", 'app.about');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // ΣΑύνδεση του πλήκτρου \"About\" με τη συνάρτηση _showAbout() \n"
"        let aboutAction = new Gio.SimpleAction ({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        // Σύνδεση του πλήκτρου \"Quit\"με τη συνάρτηση που κλείνει το παράθυρο\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"

#. (itstool) path: section/p
#: C/switch.js.page:212
msgid ""
"The first step is building the <link xref=\"gmenu.js\">GMenu</link> that the "
"\"About\" button goes into. This is the menu that appears when you click the "
"application's name in the upper-left corner of the screen, next to the "
"Activities menu. Our menu only has two options in it: About, and Quit."
msgstr ""
"Το πρώτο βήμα είναι η δόμηση του <link xref=\"gmenu.js\">GMenu</link> στο "
"οποίο το κουμπί \"About\" μπαίνει. Αυτό είναι το μενού που εμφανίζεται όταν "
"πατάς το όνομα της εφαρμογής στην πάνω αριστερή γωνία της οθόνης, δίπλα στο "
"μενού ενέργειες. Το μενού μας έχει μόνο δύο επιλογές: περί και κλείσιμο."

#. (itstool) path: section/code
#: C/switch.js.page:214
#, no-wrap
msgid ""
"\n"
"    _showAbout: function () {\n"
"\n"
"        // String arrays of the names of the people involved in the project\n"
"        var artists = ['Rob Lee http://en.wikipedia.org/wiki/File:Fuzzy_Freddy.jpg', 'Ken Funakoshi http://en.wikipedia.org/wiki/File:Pygoscelis_papua_-Nagasaki_Penguin_Aquarium_-swimming_underwater-8a.jpg', 'Shek Graham http://www.flickr.com/photos/shekgraham/127431519/in/photostream/', 'Mindaugas Urbonas http://commons.wikimedia.org/wiki/File:Mute_Swan-Mindaugas_Urbonas.jpg'];\n"
"        var authors = [\"GNOME Documentation Team\"];\n"
"        var documenters = [\"GNOME Documentation Team\"];\n"
"\n"
"        // Create the About dialog\n"
"        let aboutDialog = new Gtk.AboutDialog({\n"
"            title: \"AboutDialog Example\",\n"
"            program_name: \"Animal Creator\",\n"
"            copyright: \"Copyright \\xa9 2012 GNOME Documentation Team\\n\\nRed fox photo licensed CC-By by Rob Lee\\nGentoo penguin photo licensed CC-By-SA by Ken Funakoshi\\nFruit bat photo licensed CC-By by Shek Graham\\nMute swan photo licensed CC-By-SA by Mindaugas Urbonas\\nLinks to the originals are available under Credits.\\n\\nHave you hugged a penguin today?\",\n"
"            artists: artists,\n"
"            authors: authors,\n"
"            documenters: documenters,\n"
"            website: \"http://developer.gnome.org\",\n"
"            website_label: \"GNOME Developer Website\" });\n"
"\n"
"        // Attach the About dialog to the window\n"
"        aboutDialog.modal = true;\n"
"        aboutDialog.transient_for = this._window;\n"
"\n"
"        // Show the About dialog\n"
"        aboutDialog.show();\n"
"\n"
"        // Connect the Close button to the destroy signal for the dialog\n"
"        aboutDialog.connect('response', function() {\n"
"            aboutDialog.destroy();\n"
"        });\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _showAbout: function () {\n"
"\n"
"        // Πίνακες συμβολοσειρών των ονομάτων των ατόμων που εμπλέκονται στο έργο\n"
"        var artists = ['Rob Lee http://en.wikipedia.org/wiki/File:Fuzzy_Freddy.jpg', 'Ken Funakoshi http://en.wikipedia.org/wiki/File:Pygoscelis_papua_-Nagasaki_Penguin_Aquarium_-swimming_underwater-8a.jpg', 'Shek Graham http://www.flickr.com/photos/shekgraham/127431519/in/photostream/', 'Mindaugas Urbonas http://commons.wikimedia.org/wiki/File:Mute_Swan-Mindaugas_Urbonas.jpg'];\n"
"        var authors = [\"GNOME Documentation Team\"];\n"
"        var documenters = [\"GNOME Documentation Team\"];\n"
"\n"
"        // Δημιουργία του διαλόγου Περί\n"
"        let aboutDialog = new Gtk.AboutDialog({\n"
"            title: \"AboutDialog Example\",\n"
"            program_name: \"Animal Creator\",\n"
"            copyright: \"Copyright \\xa9 2012 GNOME Documentation Team\\n\\nRed fox photo licensed CC-By by Rob Lee\\nGentoo penguin photo licensed CC-By-SA by Ken Funakoshi\\nFruit bat photo licensed CC-By by Shek Graham\\nMute swan photo licensed CC-By-SA by Mindaugas Urbonas\\nLinks to the originals are available under Credits.\\n\\nHave you hugged a penguin today?\",\n"
"            artists: artists,\n"
"            authors: authors,\n"
"            documenters: documenters,\n"
"            website: \"http://developer.gnome.org\",\n"
"            website_label: \"GNOME Developer Website\" });\n"
"\n"
"        // Προσάρτηση του διαλόγου Περί στο παράθυρο\n"
"        aboutDialog.modal = true;\n"
"        aboutDialog.transient_for = this._window;\n"
"\n"
"        // Εμφάνιση του διαλόγου Περί\n"
"        aboutDialog.show();\n"
"\n"
"        // Σύνδεση του πλήκτρου Κλείσιμο με το σήμα καταστροφής του διαλόγου\n"
"        aboutDialog.connect('response', function() {\n"
"            aboutDialog.destroy();\n"
"        });\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/switch.js.page:248
msgid ""
"An <link xref=\"aboutdialog.js\">AboutDialog</link> has a lot of different "
"things you can set, to credit everyone who worked on the application and "
"leave a note to whomever reads it. In this case, the copyright section "
"contains our note and credits the original photographers, while the artists "
"section shows you a list of the photographers with links to the original "
"photos when you click the Credits button. The web URLs put after their names "
"in the array turn their names into clickable links in the Credits section."
msgstr ""
"Ένας <link xref=\"aboutdialog.js\">AboutDialog</link> έχει πολλά διαφορετικά "
"πράγματα που μπορείτε να ορίσετε, για να μνημονεύσετε οποιονδήποτε δούλεψε "
"στην εφαρμογή και να αφήσετε μια σημείωση σε οποιονδήποτε το διαβάζει. Σε "
"αυτήν την περίπτωση, η ενότητα πνευματικών δικαιωμάτων περιέχει τη σημείωση "
"μας και μνείες των αρχικών φωτογράφων, ενώ η ενότητα των καλλιτεχνών σας "
"εμφανίζει μια λίστα των φωτογράφων με συνδέσμους στις αρχικές φωτογραφίες "
"όταν πατάτε το κουμπί με τις μνείες. Τα URLs του ιστού μετά τα ονόματα τους "
"στον πίνακα κάνουν τα ονόματα τους επιλέξιμους συνδέσμους στην ενότητα με "
"τις μνείες."

#. (itstool) path: section/code
#: C/switch.js.page:250
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new SwitchExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new SwitchExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/switch.js.page:255
msgid ""
"Finally, we create a new instance of the finished SwitchExample class, and "
"set the application running."
msgstr ""
"Τελικά, δημιουργούμε ένα νέο παράδειγμα της ολοκληρωμένης κλάσης "
"SwitchExample και εκτελούμε την εφαρμογή."

#. (itstool) path: section/code
#: C/switch.js.page:260
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const SwitchExample = new Lang.Class({\n"
"    Name: 'Switch Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsswitch'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal creates the menu and builds the UI\n"
"    _onStartup: function() {\n"
"        this._initMenus();\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Animal Creator\"});\n"
"\n"
"        // Create the image widget and set its default picture\n"
"        this._image = new Gtk.Image ({file: \"redfox.png\"});\n"
"\n"
"        // Create a label for the first switch\n"
"        this._flyLabel = new Gtk.Label ({\n"
"            label: \"Make it fly\",\n"
"            margin_right: 30});\n"
"\n"
"        // Create the first switch and set its default position\n"
"        this._flySwitch = new Gtk.Switch ({active: false});\n"
"        this._flySwitch.connect ('notify::active', Lang.bind (this, this._switchFlip));\n"
"\n"
"        // Create a label for the second switch\n"
"        this._birdLabel = new Gtk.Label ({\n"
"            label: \"Make it a bird\",\n"
"            margin_right: 30});\n"
"\n"
"        // Create the second switch\n"
"        this._birdSwitch = new Gtk.Switch ({active: false});\n"
"        this._birdSwitch.connect ('notify::active', Lang.bind (this, this._switchFlip));\n"
"\n"
"        // Create a grid for the labels and switches beneath the picture\n"
"        this._UIGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_top: 20});\n"
"\n"
"        // Attach the labels and switches to that grid\n"
"        this._UIGrid.attach (this._flyLabel, 0, 0, 1, 1);\n"
"        this._UIGrid.attach (this._flySwitch, 1, 0, 1, 1);\n"
"        this._UIGrid.attach (this._birdLabel, 0, 1, 1, 1);\n"
"        this._UIGrid.attach (this._birdSwitch, 1, 1, 1, 1);\n"
"\n"
"        // Create a master grid to put both the UI and the picture into\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Attach the picture and the UI grid to the master grid\n"
"        this._mainGrid.attach (this._image, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._UIGrid, 0, 1, 1, 1);\n"
"\n"
"        // Add the master grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _switchFlip: function() {\n"
"\n"
"        // Change the picture depending on which switches are flipped\n"
"        if (this._flySwitch.get_active()) {\n"
"\n"
"            if (this._birdSwitch.get_active()) this._image.set_from_file (\"muteswan.png\");\n"
"\n"
"            else this._image.set_from_file (\"fruitbat.png\");\n"
"        }\n"
"\n"
"        else {\n"
"\n"
"            if (this._birdSwitch.get_active()) this._image.set_from_file (\"gentoopenguin.png\");\n"
"\n"
"            else this._image.set_from_file (\"redfox.png\");\n"
"\n"
"        }\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _initMenus: function() {\n"
"\n"
"        // Build the application's menu so we can have an \"About\" button\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"About\", 'app.about');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // Bind the \"About\" button to the _showAbout() function\n"
"        let aboutAction = new Gio.SimpleAction ({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        // Bind the \"Quit\" button to the function that closes the window\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"\n"
"\n"
"    _showAbout: function () {\n"
"\n"
"        // String arrays of the names of the people involved in the project\n"
"        var artists = ['Rob Lee http://en.wikipedia.org/wiki/File:Fuzzy_Freddy.png', 'Ken Funakoshi http://en.wikipedia.org/wiki/File:Pygoscelis_papua_-Nagasaki_Penguin_Aquarium_-swimming_underwater-8a.png', 'Shek Graham http://www.flickr.com/photos/shekgraham/127431519/in/photostream/', 'Mindaugas Urbonas http://commons.wikimedia.org/wiki/File:Mute_Swan-Mindaugas_Urbonas.png'];\n"
"        var authors = [\"GNOME Documentation Team\"];\n"
"        var documenters = [\"GNOME Documentation Team\"];\n"
"\n"
"        // Create the About dialog\n"
"        let aboutDialog = new Gtk.AboutDialog({\n"
"            title: \"AboutDialog Example\",\n"
"            program_name: \"Animal Creator\",\n"
"            copyright: \"Copyright \\xa9 2012 GNOME Documentation Team\\n\\nRed fox photo licensed CC-By by Rob Lee\\nGentoo penguin photo licensed CC-By-SA by Ken Funakoshi\\nFruit bat photo licensed CC-By by Shek Graham\\nMute swan photo licensed CC-By-SA by Mindaugas Urbonas\\nLinks to the originals are available under Credits.\\n\\nHave you hugged a penguin today?\",\n"
"            artists: artists,\n"
"            authors: authors,\n"
"            documenters: documenters,\n"
"            website: \"http://developer.gnome.org\",\n"
"            website_label: \"GNOME Developer Website\" });\n"
"\n"
"        // Attach the About dialog to the window\n"
"        aboutDialog.modal = true;\n"
"        aboutDialog.transient_for = this._window;\n"
"\n"
"        // Show the About dialog\n"
"        aboutDialog.show();\n"
"\n"
"        // Connect the Close button to the destroy signal for the dialog\n"
"        aboutDialog.connect('response', function() {\n"
"            aboutDialog.destroy();\n"
"        });\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new SwitchExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const SwitchExample = new Lang.Class({\n"
"    Name: 'Switch Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής \n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsswitch'\n"
"        });\n"
"\n"
"    // Σύνδεση των σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα  'activate' παρουσιάζει ένα παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δημιουργεί το μενού και δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._initMenus();\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Animal Creator\"});\n"
"\n"
"        // Δημιουργία του γραφικού στοιχείου της εικόνας και ορισμός της προεπιλεγμένης της εικόνας\n"
"        this._image = new Gtk.Image ({file: \"redfox.png\"});\n"
"\n"
"        // Δημιουργία μιας ετικέτας για τον πρώτο διακόπτη\n"
"        this._flyLabel = new Gtk.Label ({\n"
"            label: \"Make it fly\",\n"
"            margin_right: 30});\n"
"\n"
"        // Δημιουργία του πρώτου διακόπτη και ορισμός της προεπιλεγμένης του θέσης\n"
"        this._flySwitch = new Gtk.Switch ({active: false});\n"
"        this._flySwitch.connect ('notify::active', Lang.bind (this, this._switchFlip));\n"
"\n"
"        // Δημιουργία μιας ετικέτας για τον δεύτερο διακόπτη\n"
"        this._birdLabel = new Gtk.Label ({\n"
"            label: \"Make it a bird\",\n"
"            margin_right: 30});\n"
"\n"
"        // Δημιουργία του δεύτερου διακόπτη\n"
"        this._birdSwitch = new Gtk.Switch ({active: false});\n"
"        this._birdSwitch.connect ('notify::active', Lang.bind (this, this._switchFlip));\n"
"\n"
"        // Δημιουργία ενός πλέγματος για τις ετικέτες και τους διακόπτες κάτω από την εικόνα\n"
"        this._UIGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_top: 20});\n"
"\n"
"        // Προσάρτηση των ετικετών και διακοπτών σε αυτό το πλέγμα\n"
"        this._UIGrid.attach (this._flyLabel, 0, 0, 1, 1);\n"
"        this._UIGrid.attach (this._flySwitch, 1, 0, 1, 1);\n"
"        this._UIGrid.attach (this._birdLabel, 0, 1, 1, 1);\n"
"        this._UIGrid.attach (this._birdSwitch, 1, 1, 1, 1);\n"
"\n"
"        // Δημιουργία ενός κύριου πλέγματος για τοποθέτηση μέσα του της διεπαφής χρήστη και της εικόνας\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Προσάρτηση της εικόνας και του πλέγματος διεπαφής χρήστη στο κύριο πλέγμα\n"
"        this._mainGrid.attach (this._image, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._UIGrid, 0, 1, 1, 1);\n"
"\n"
"        // Προσθήκη του κύριου πλέγματος στο παράθυρο\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _switchFlip: function() {\n"
"\n"
"        // Αλλαγή της εικόνας ανάλογα με το ποιοι διακόπτες αντιστρέφονται\n"
"        if (this._flySwitch.get_active()) {\n"
"\n"
"            if (this._birdSwitch.get_active()) this._image.set_from_file (\"muteswan.png\");\n"
"\n"
"            else this._image.set_from_file (\"fruitbat.png\");\n"
"        }\n"
"\n"
"        else {\n"
"\n"
"            if (this._birdSwitch.get_active()) this._image.set_from_file (\"gentoopenguin.png\");\n"
"\n"
"            else this._image.set_from_file (\"redfox.png\");\n"
"\n"
"        }\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _initMenus: function() {\n"
"\n"
"        // Δόμηση του μενού της εφαρμογής, έτσι ώστε να μπορούμε να έχουμε ένα πλήκτρο\"About\" \n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"About\", 'app.about');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // Σύνδεση του πλήκτρου \"About\" με τη συνάρτηση _showAbout() \n"
"        let aboutAction = new Gio.SimpleAction ({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        // Σύνδεση του πλήκτρου \"Quit\" με τη συνάρτηση που κλείνει το παράθυρο\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"\n"
"\n"
"    _showAbout: function () {\n"
"\n"
"        // Οι πίνακες συμβολοσειρών των ονομάτων των ατόμων που συμμετείχαν στο έργο\n"
"        var artists = ['Rob Lee http://en.wikipedia.org/wiki/File:Fuzzy_Freddy.png', 'Ken Funakoshi http://en.wikipedia.org/wiki/File:Pygoscelis_papua_-Nagasaki_Penguin_Aquarium_-swimming_underwater-8a.png', 'Shek Graham http://www.flickr.com/photos/shekgraham/127431519/in/photostream/', 'Mindaugas Urbonas http://commons.wikimedia.org/wiki/File:Mute_Swan-Mindaugas_Urbonas.png'];\n"
"        var authors = [\"GNOME Documentation Team\"];\n"
"        var documenters = [\"GNOME Documentation Team\"];\n"
"\n"
"        // Δημιουργία του διαλόγου Περί\n"
"        let aboutDialog = new Gtk.AboutDialog({\n"
"            title: \"AboutDialog Example\",\n"
"            program_name: \"Animal Creator\",\n"
"            copyright: \"Copyright \\xa9 2012 GNOME Documentation Team\\n\\nRed fox photo licensed CC-By by Rob Lee\\nGentoo penguin photo licensed CC-By-SA by Ken Funakoshi\\nFruit bat photo licensed CC-By by Shek Graham\\nMute swan photo licensed CC-By-SA by Mindaugas Urbonas\\nLinks to the originals are available under Credits.\\n\\nHave you hugged a penguin today?\",\n"
"            artists: artists,\n"
"            authors: authors,\n"
"            documenters: documenters,\n"
"            website: \"http://developer.gnome.org\",\n"
"            website_label: \"GNOME Developer Website\" });\n"
"\n"
"        // Προσάρτηση του διαλόγου Περίστομ παράθυρο\n"
"        aboutDialog.modal = true;\n"
"        aboutDialog.transient_for = this._window;\n"
"\n"
"        // Εμφάνιση του διαλόγου Περί\n"
"        aboutDialog.show();\n"
"\n"
"        // Σύνδεση του πλήκτρου Κλείσιμο με το σήμα καταστροφής του διαλόγου\n"
"        aboutDialog.connect('response', function() {\n"
"            aboutDialog.destroy();\n"
"        });\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new SwitchExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/switch.js.page:271
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Image.html"
"\">Gtk.Image</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Image.html"
"\">Gtk.Image</link>"

#. (itstool) path: item/p
#: C/switch.js.page:273
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Switch.html"
"\">Gtk.Switch</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Switch.html"
"\">Gtk.Switch</link>"

#. (itstool) path: info/title
#: C/switch.py.page:8
msgctxt "text"
msgid "Switch (Python)"
msgstr "Διακόπτης (Python)"

#. (itstool) path: page/p
#: C/switch.py.page:26
msgid "This Switch makes the title appears and disappear."
msgstr "Αυτός ο διακόπτης κάνει τον τίτλο να εμφανίζεται και να εξαφανίζεται."

#. (itstool) path: section/code
#: C/switch.py.page:33
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Switch Example\", application=app)\n"
"        self.set_default_size(300, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a switch\n"
"        switch = Gtk.Switch()\n"
"        # turned on by default\n"
"        switch.set_active(True)\n"
"        # connect the signal notify::active emitted by the switch\n"
"        # to the callback function activate_cb\n"
"        switch.connect(\"notify::active\", self.activate_cb)\n"
"\n"
"        # a label\n"
"        label = Gtk.Label()\n"
"        label.set_text(\"Title\")\n"
"\n"
"        # a grid to allocate the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.set_column_spacing(10)\n"
"        grid.attach(label, 0, 0, 1, 1)\n"
"        grid.attach(switch, 1, 0, 1, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # Callback function. Since the signal is notify::active\n"
"    # we need the argument 'active'\n"
"    def activate_cb(self, button, active):\n"
"        # if the button (i.e. the switch) is active, set the title\n"
"        # of the window to \"Switch Example\"\n"
"        if button.get_active():\n"
"            self.set_title(\"Switch Example\")\n"
"        # else, set it to \"\" (empty string)\n"
"        else:\n"
"            self.set_title(\"\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Switch Example\", application=app)\n"
"        self.set_default_size(300, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a switch\n"
"        switch = Gtk.Switch()\n"
"        # turned on by default\n"
"        switch.set_active(True)\n"
"        # connect the signal notify::active emitted by the switch\n"
"        # to the callback function activate_cb\n"
"        switch.connect(\"notify::active\", self.activate_cb)\n"
"\n"
"        # a label\n"
"        label = Gtk.Label()\n"
"        label.set_text(\"Title\")\n"
"\n"
"        # a grid to allocate the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.set_column_spacing(10)\n"
"        grid.attach(label, 0, 0, 1, 1)\n"
"        grid.attach(switch, 1, 0, 1, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # Callback function. Since the signal is notify::active\n"
"    # we need the argument 'active'\n"
"    def activate_cb(self, button, active):\n"
"        # if the button (i.e. the switch) is active, set the title\n"
"        # of the window to \"Switch Example\"\n"
"        if button.get_active():\n"
"            self.set_title(\"Switch Example\")\n"
"        # else, set it to \"\" (empty string)\n"
"        else:\n"
"            self.set_title(\"\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/switch.py.page:37
msgid "Useful methods for a Switch widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο διακόπτη"

#. (itstool) path: section/p
#: C/switch.py.page:38
msgid ""
"In line 17 the signal <code>\"notify::active\"</code> is connected to the "
"callback function <code>activate_cb()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"Στη γραμμή 17 το σήμα <code>\"notify::active\"</code> συνδέεται με τη "
"συνάρτηση επανάκλησης <code>activate_cb()</code> χρησιμοποιώντας "
"<code><var>widget</var>.connect(<var>signal</var>, <var>callback function</"
"var>)</code>. Δείτε <link xref=\"signals-callbacks.py\"/> για μια πιο "
"λεπτομερή εξήγηση."

#. (itstool) path: item/p
#: C/switch.py.page:45
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkSwitch.html"
"\">GtkSwitch</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkSwitch.html"
"\">GtkSwitch</link>"

#. (itstool) path: info/title
#: C/switch.vala.page:8
msgctxt "text"
msgid "Switch (Vala)"
msgstr "Διακόπτης (Vala)"

#. (itstool) path: page/p
#: C/switch.vala.page:29
msgid "This Switch toggles the title."
msgstr "Αυτός ο διακόπτης εναλλάσσει τον τίτλο."

#. (itstool) path: page/code
#: C/switch.vala.page:31
#, no-wrap
msgid ""
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Switch Example\");\n"
"\n"
"\t\tthis.set_default_size (300, 100);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tvar label = new Gtk.Label (\"Title\");\n"
"\t\tvar switcher = new Gtk.Switch ();\n"
"\n"
"\t\tswitcher.set_active (true);\n"
"\n"
"\t\tswitcher.notify[\"active\"].connect (switcher_cb);\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.set_column_spacing (10);\n"
"\t\tgrid.attach (label, 0, 0, 1, 1);\n"
"\t\tgrid.attach (switcher, 1, 0, 1, 1);\n"
"\n"
"\t\tthis.add (grid);\n"
"\t}\n"
"\n"
"\tvoid switcher_cb (Object switcher, ParamSpec pspec) {\n"
"\t\tif ((switcher as Gtk.Switch).get_active())\n"
"\t\t\tthis.set_title (\"Switch Example\");\n"
"\t\telse\n"
"\t\t\tthis.set_title (\"\");\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\n"
"\t\tvar window = new MyWindow (this);\n"
"\t\twindow.show_all (); //show all the things\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.checkbutton\");\n"
"\t}\n"
"}\n"
"\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Switch Example\");\n"
"\n"
"\t\tthis.set_default_size (300, 100);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tvar label = new Gtk.Label (\"Title\");\n"
"\t\tvar switcher = new Gtk.Switch ();\n"
"\n"
"\t\tswitcher.set_active (true);\n"
"\n"
"\t\tswitcher.notify[\"active\"].connect (switcher_cb);\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.set_column_spacing (10);\n"
"\t\tgrid.attach (label, 0, 0, 1, 1);\n"
"\t\tgrid.attach (switcher, 1, 0, 1, 1);\n"
"\n"
"\t\tthis.add (grid);\n"
"\t}\n"
"\n"
"\tvoid switcher_cb (Object switcher, ParamSpec pspec) {\n"
"\t\tif ((switcher as Gtk.Switch).get_active())\n"
"\t\t\tthis.set_title (\"Switch Example\");\n"
"\t\telse\n"
"\t\t\tthis.set_title (\"\");\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\n"
"\t\tvar window = new MyWindow (this);\n"
"\t\twindow.show_all (); //show all the things\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.checkbutton\");\n"
"\t}\n"
"}\n"
"\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/switch.vala.page:36
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Switch.html\">Gtk.Switch</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Switch.html\">Gtk.Switch</"
"link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/textview.c.page:27 C/textview.py.page:39 C/textview.vala.page:27
msgctxt "_"
msgid ""
"external ref='media/textview.png' md5='049e859ed1af2d7c93d8cb5cfd9f7792'"
msgstr ""
"external ref='media/textview.png' md5='049e859ed1af2d7c93d8cb5cfd9f7792'"

#. (itstool) path: info/title
#: C/textview.c.page:8
msgctxt "text"
msgid "TextView (C)"
msgstr "TextView (C)"

#. (itstool) path: info/desc
#: C/textview.c.page:18 C/textview.vala.page:18
msgid "Widget which displays a GtkTextBuffer"
msgstr "Γραφικό στοιχείο που εμφανίζει ένα GtkTextBuffer"

#. (itstool) path: page/title
#: C/textview.c.page:21 C/textview.vala.page:21
msgid "TextView widget"
msgstr "Γραφικό στοιχείο TreeView"

#. (itstool) path: note/p
#: C/textview.c.page:22 C/textview.py.page:33 C/textview.vala.page:22
msgid "If we press \"enter\", we have a new line."
msgstr "Εάν πατήσετε \"enter\", έχουμε νέα γραμμή."

#. (itstool) path: note/p
#: C/textview.c.page:23 C/textview.vala.page:23
msgid ""
"If we press \"enter\" more times then there are lines in the default sized "
"window, then a vertical scrollbar appears."
msgstr ""
"Εάν πατήσουμε \"enter\" περισσότερες φορές τότε υπάρχουν γραμμές στο "
"προεπιλεγμένο μέγεθος παραθύρου, μετά εμφανίζεται η κάθετη γραμμή κύλισης."

#. (itstool) path: note/p
#: C/textview.c.page:24 C/textview.vala.page:24
msgid ""
"If we write a long sentence, the text will wrap breaking lines between words."
msgstr ""
"Εάν γράψουμε μια μεγάλη πρόταση, το κείμενο θα αναδιπλωθεί διακόπτοντας τις "
"γραμμές μεταξύ των λέξεων."

#. (itstool) path: note/p
#: C/textview.c.page:25
msgid ""
"If we have a loooooooooooooooooooooooooooooooooooong (that was long) word, "
"a* horizontal scrollbar will appear."
msgstr ""
"Εάν έχουμε μια μεγάαααααααααααααααααααααααααααααααλη λέξη (που είναι "
"μεγάλη), μια* οριζόντια γραμμή κύλισης θα εμφανιστεί."

#. (itstool) path: page/p
#: C/textview.c.page:28 C/textview.vala.page:28
msgid "This is an example of Gtk.TextView"
msgstr "Αυτό είναι ένα παράδειγμα του Gtk.TextView"

#. (itstool) path: page/code
#: C/textview.c.page:30
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Declare variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *text_view;\n"
"  GtkWidget *scrolled_window;\n"
"\n"
"  GtkTextBuffer *buffer;\n"
"\n"
"\n"
"  /* Create a window with a title, and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"TextView Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 220, 200);\n"
"\n"
"\n"
"  /* The text buffer represents the text being edited */\n"
"  buffer = gtk_text_buffer_new (NULL);\n"
"  \n"
"\n"
"  /* Text view is a widget in which can display the text buffer. \n"
"   * The line wrapping is set to break lines in between words.\n"
"   */\n"
"  text_view = gtk_text_view_new_with_buffer (buffer);\n"
"  gtk_text_view_set_wrap_mode (GTK_TEXT_VIEW (text_view), GTK_WRAP_WORD); \n"
"\n"
"\n"
"  /* Create the scrolled window. Usually NULL is passed for both parameters so \n"
"   * that it creates the horizontal/vertical adjustments automatically. Setting \n"
"   * the scrollbar policy to automatic allows the scrollbars to only show up \n"
"   * when needed. \n"
"   */\n"
"  scrolled_window = gtk_scrolled_window_new (NULL, NULL);\n"
"  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window), \n"
"                                  GTK_POLICY_AUTOMATIC, \n"
"                                  GTK_POLICY_AUTOMATIC); \n"
"  /* The function directly below is used to add children to the scrolled window \n"
"   * with scrolling capabilities (e.g text_view), otherwise, \n"
"   * gtk_scrolled_window_add_with_viewport() would have been used\n"
"   */\n"
"  gtk_container_add (GTK_CONTAINER (scrolled_window), \n"
"                                         text_view);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (scrolled_window), 5);\n"
" \n"
"  \n"
"  gtk_container_add (GTK_CONTAINER (window), scrolled_window);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#περιλαμβάνει &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Δήλωση μεταβλητών */\n"
"  GtkWidget *window;\n"
"  GtkWidget *text_view;\n"
"  GtkWidget *scrolled_window;\n"
"\n"
"  GtkTextBuffer *buffer;\n"
"\n"
"\n"
"  /* Δημιουργία παραθύρου με τίτλο και προεπιλεγμένο μέγεθος */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"TextView Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 220, 200);\n"
"\n"
"\n"
"  /* Η ενδιάμεση μνήμη του κειμένου παρουσιάζει το κείμενο που επεξεργάστηκε */\n"
"  buffer = gtk_text_buffer_new (NULL);\n"
"  \n"
"\n"
"  /* Η προβολή κειμένου είναι ένα γραφικό στοιχείο στο οποίο μπορείτε να εμφανίσετε τη ρυθμιστική μνήμη του κειμένου. \n"
"   * Η αναδίπλωση γραμμής ορίζεται στην αλλαγή γραμμών μεταξύ λέξεων.\n"
"   */\n"
"  text_view = gtk_text_view_new_with_buffer (buffer);\n"
"  gtk_text_view_set_wrap_mode (GTK_TEXT_VIEW (text_view), GTK_WRAP_WORD); \n"
"\n"
"\n"
"  /* Δημιουργία του κυλιόμενου παράθυρου. Συνήθως περνιέτει NULL και για τις δυο παραμέτρους, \n"
"   * έτσι ώστε να δημιουργούνται αυτόματα οι οριζόντιες/κάθετες ρυθμίσεις. Ορισμός \n"
"   * της πολιτικής της γραμμής κύλισης σε αυτόματη επιτρέπει στις γραμμές κύλισης να εμφανίζονται μόνο \n"
"   * όταν χρειάζονται. \n"
"   */\n"
"  scrolled_window = gtk_scrolled_window_new (NULL, NULL);\n"
"  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window), \n"
"                                  GTK_POLICY_AUTOMATIC, \n"
"                                  GTK_POLICY_AUTOMATIC); \n"
"  /* Η αμέσως παρακάτω συνάρτηση χρησιμοποιείται για προσθήκη θυγατρικών στο κυλιόμενο παράθυρο \n"
"   * με δυνατότητες κύλισης (π.χ. text_view), αλλιώς, \n"
"   * gtk_scrolled_window_add_with_viewport() θα έπρεπε να χρησιμοποιηθεί\n"
"   */\n"
"  gtk_container_add (GTK_CONTAINER (scrolled_window), \n"
"                                         text_view);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (scrolled_window), 5);\n"
" \n"
"  \n"
"  gtk_container_add (GTK_CONTAINER (window), scrolled_window);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/textview.c.page:41
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkContainer.html"
"\">GtkContainer</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkContainer.html"
"\">GtkContainer</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/textview.js.page:26
msgctxt "_"
msgid ""
"external ref='media/textviewpenguinchat.png' "
"md5='0dd6f6aa44aaeab7901bd90162ed4c9a'"
msgstr ""
"external ref='media/textviewpenguinchat.png' "
"md5='0dd6f6aa44aaeab7901bd90162ed4c9a'"

#. (itstool) path: info/title
#: C/textview.js.page:8
msgctxt "text"
msgid "TextView (JavaScript)"
msgstr "TextView (JavaScript)"

#. (itstool) path: info/desc
#: C/textview.js.page:22
msgid "A multiline text editor"
msgstr "Επεξεργαστής κειμένου πολλαπλών γραμμών"

#. (itstool) path: page/title
#: C/textview.js.page:25 C/textview.py.page:30
msgid "TextView"
msgstr "Προβολή κειμένου (TextView)"

#. (itstool) path: page/p
#: C/textview.js.page:27
msgid ""
"A TextView is really (or at least usually) a nested set of three objects."
msgstr ""
"Μια προβολή κειμένου (TextView) είναι πραγματικά (ή τουλάχιστον συνήθως) ένα "
"ένθετο σύνολο τριών αντικειμένων."

#. (itstool) path: item/p
#: C/textview.js.page:29
msgid ""
"At the bottom there is a <link href=\"http://www.roojs.org/seed/gir-1.2-"
"gtk-3.0/gjs/Gtk.TextBuffer.html\">TextBuffer</link>. This holds the text "
"itself."
msgstr ""
"Στο τέλος είναι ένα <link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/"
"gjs/Gtk.TextBuffer.html\">TextBuffer</link>. Αυτό κρατά το ίδιο το κείμενο."

#. (itstool) path: item/p
#: C/textview.js.page:30
msgid ""
"In the middle there is the <link href=\"http://www.roojs.org/seed/gir-1.2-"
"gtk-3.0/gjs/Gtk.TextView.html\">TextView</link>, which is a widget that lets "
"you see and edit the text in the buffer. It automatically resizes itself "
"depending on how much text there is."
msgstr ""
"Στη μέση είναι η <link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.TextView.html\">TextView</link>, που είναι ένα γραφικό στοιχείο που σας "
"επιτρέπει να δείτε και να επεξεργαστείτε το κείμενο στην ενδιάμεση μνήμη. "
"Αυξομειώνει τον εαυτόν του αυτόματα ανάλογα με το πόσο κείμενο υπάρχει."

#. (itstool) path: item/p
#: C/textview.js.page:31
msgid ""
"Since the automatic resizing can make a TextView unwieldy, you normally "
"place it inside of a ScrolledWindow. Despite the name, it's not an actual "
"window in terms of having a title bar and an X button; it's a widget you put "
"on the application you're making, which acts like a window onto a more "
"manageable chunk of a TextView. If the text in the buffer is too big to fit, "
"scrollbars will appear."
msgstr ""
"Αφού η αυτόματη αυξομείωση μπορεί να κάνει μια προβολή κειμένου (TextView) "
"άβολη, την τοποθετείτε κανονικά μέσα σε ένα κυλιόμενο παράθυρο "
"(ScrolledWindow). Παρά το όνομα, δεν είναι ένα ενεργό παράθυρο έχοντας "
"γραμμή τίτλου και ένα κουμπί Χ· είναι ένα γραφικό στοιχείο που βάζετε στην "
"εφαρμογή που κάνετε, που δρα όπως ένα παράθυρο σε ένα πιο διαχειρίσιμο τμήμα "
"μιας προβολής κειμένου. Εάν το κείμενο στην ενδιάμεση μνήμη είναι υπερβολικά "
"μεγάλο για να ταιριάξει, θα εμφανιστούν γραμμές κύλισης."

#. (itstool) path: page/p
#: C/textview.js.page:33
msgid ""
"If you want to change what text is displayed in the TextView, you act on the "
"TextBuffer, since it's what actually holds the text. The same goes for if "
"you want to see what text someone typed in. This sample application lets you "
"talk to a (make-believe) penguin, and checks the TextBuffer to see if you "
"typed the word \"fish\" anywhere in it."
msgstr ""
"Εάν θέλετε να αλλάξετε το εμφανιζόμενο κείμενο στην προβολή κειμένου "
"(TextView), επιδράτε στην ενδιάμεση μνήμη του κειμένου (TextBuffer), αφού "
"είναι αυτό που στην πραγματικότητα κρατά το κείμενο. Το ίδιο γίνεται εάν "
"θέλετε να δείτε τι κείμενο έχει τυπώσει κάποιος. Αυτό το δείγμα της "
"εφαρμογής σας επιτρέπει να μιλήσετε σε έναν (πιστέψτε το) πιγκουίνο και "
"ελέγχει το TextBuffer για να δείτε εάν πληκτρολογήσατε τη λέξη \"fish\" "
"οπουδήποτε σε αυτό."

#. (itstool) path: note/p
#: C/textview.js.page:34
msgid ""
"Real-life penguin populations are declining fast, because climate change is "
"melting the ice that they live on and killing the fish that they eat. If "
"you'd like to play a (somewhat silly) GNOME game based on this premise, take "
"a look at <link href=\"http://pingus.seul.org/\">Pingus</link>."
msgstr ""
"Οι πληθυσμοί πιγκουίνου στην πραγματική ζωή μειώνονται γρήγορα, επειδή η "
"κλιματική αλλαγή λιώνει τον πάγο που ζουν και σκοτώνει τα ψάρια που τρώνε. "
"Εάν θα θέλατε να παίξετε ένα (κάπως χαζό) παιχνίδι του GNOME με βάση αυτήν "
"την προϋπόθεση, κοιτάξτε το <link href=\"http://pingus.seul.org/\">Pingus</"
"link>."

#. (itstool) path: section/code
#: C/textview.js.page:50
#, no-wrap
msgid ""
"\n"
"const TextViewExample = new Lang.Class ({\n"
"    Name: 'TextView Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jstextview' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const TextViewExample = new Lang.Class ({\n"
"    Name: 'TextView Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jstextview' });\n"
"\n"
"        // Σύνδεση των σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/textview.js.page:74
msgid ""
"All the code for this sample goes in the TextViewExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.Application.html\">Gtk.Application</link> for our widgets and window to "
"go in."
msgstr ""
"Όλος ο κώδικας για αυτό το παράδειγμα πηγαίνει στην κλάση TextViewExample. Ο "
"παραπάνω κώδικας δημιουργεί μια <link href=\"http://www.roojs.com/seed/"
"gir-1.2-gtk-3.0/gjs/Gtk.Application.html\">Gtk.Application</link> για να "
"μπουν μέσα τα γραφικά στοιχεία μας και τα παράθυρα."

#. (itstool) path: section/code
#: C/textview.js.page:75
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Talk to a Penguin\",\n"
"            default_height: 400,\n"
"            default_width: 440,\n"
"            border_width: 20 });\n"
msgstr ""
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function () {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Talk to a Penguin\",\n"
"            default_height: 400,\n"
"            default_width: 440,\n"
"            border_width: 20 });\n"

#. (itstool) path: section/title
#: C/textview.js.page:92
msgid "Creating the TextView"
msgstr "Δημιουργία της TextView"

#. (itstool) path: section/code
#: C/textview.js.page:93
#, no-wrap
msgid ""
"\n"
"        // Create a label for the penguin to talk to you\n"
"        this._penguin = new Gtk.Label ({\n"
"            height_request: 180,\n"
"            width_request: 400,\n"
"            label: \"Squaaaak?\",\n"
"            wrap: true });\n"
msgstr ""
"\n"
"        // Δημιουργία ετικέτας για τον πιγκουίνο που θα σας μιλήσει\n"
"        this._penguin = new Gtk.Label ({\n"
"            height_request: 180,\n"
"            width_request: 400,\n"
"            label: \"Squaaaak?\",\n"
"            wrap: true });\n"

#. (itstool) path: section/p
#: C/textview.js.page:102
msgid ""
"Our first step in this example is to create the <link xref=\"label.js"
"\">Label</link> that the penguin will use to talk to you. We set the text in "
"it to wrap by setting its wrap property to true, but we'll use a different "
"method on the TextView itself that allows for more fine-grained control."
msgstr ""
"Το πρώτο μας βήμα σε αυτό το παράδειγμα είναι η δημιουργία της <link xref="
"\"label.js\">ετικέτας</link> που θα χρησιμοποιήσει ο πιγκουίνος για να σας "
"μιλήσει. Ορίζουμε το κείμενο σε αυτό σε αναδίπλωση ρυθμίζοντας την ιδιότητά "
"του αναδίπλωση σε αληθή, αλλά θα χρησιμοποιήσουμε μια διαφορετική μέθοδο "
"στην ίδια την TextView που επιτρέπει για πιο ακριβή έλεγχο."

#. (itstool) path: section/code
#: C/textview.js.page:104
#, no-wrap
msgid ""
"\n"
"        // Create a textview for you to talk to the penguin\n"
"        this.buffer = new Gtk.TextBuffer();\n"
"        this._textView = new Gtk.TextView ({\n"
"            buffer: this.buffer,\n"
"            editable: true,\n"
"            wrap_mode: Gtk.WrapMode.WORD });\n"
msgstr ""
"\n"
"        // Δημιουργία μιας προβολής κειμένου για να μιλήσετε με τον πιγκουίνο\n"
"        this.buffer = new Gtk.TextBuffer();\n"
"        this._textView = new Gtk.TextView ({\n"
"            buffer: this.buffer,\n"
"            editable: true,\n"
"            wrap_mode: Gtk.WrapMode.WORD });\n"

#. (itstool) path: section/p
#: C/textview.js.page:113
msgid ""
"Our first step is to create a TextBuffer to put the words into. After that "
"we create the TextView, and tell it to use the TextBuffer we created as its "
"buffer. We also set it to be editable, since we want to be able to type new "
"things in."
msgstr ""
"Το πρώτο μας βήμα είναι η δημιουργία ενός TextBuffer για να βάλουμε τις "
"λέξεις μέσα. Αφού δημιουργήσουμε την TextView και του πούμε να "
"χρησιμοποιήσει την TextBuffer που δημιουργήσαμε ως την ενδιάμεση μνήμη του. "
"Το ρυθμίζουμε επίσης να είναι επεξεργάσιμο, αφού θέλουμε να μπορούμε να "
"πληκτρολογήσουμε νέα πράγματα μέσα του."

#. (itstool) path: section/p
#: C/textview.js.page:114
msgid ""
"The wrap_mode property lets you select from four different <link href="
"\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.WrapMode.html"
"\">WrapModes</link>. Gtk.WrapMode.CHAR, for instance, starts wrapping around "
"in the middle of a word if you keep typing when it gets to the edge. Most "
"people are probably used to Gtk.WrapMode.WORD, which will automatically put "
"the word you're typing on the next line if it gets to be too long."
msgstr ""
"Η ιδιότητα wrap_mode σας επιτρέπει να επιλέξετε από τέσσερα διαφορετικά "
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.WrapMode.html"
"\">WrapModes</link>. Το Gtk.WrapMode.CHAR, για παράδειγμα, ξεκινά την "
"αναδίπλωση γύρω από τη μέση μιας λέξης εάν συνεχίζετε την πληκτρολόγηση όταν "
"φτάνει στην άκρη. Οι περισσότεροι άνθρωποι χρησιμοποιούν προφανώς το Gtk."
"WrapMode.WORD, που θα βάλει αυτόματα τη λέξη που πληκτρολογείτε στην επόμενη "
"γραμμή εάν πρόκειται να είναι υπερβολικά μεγάλη."

#. (itstool) path: section/code
#: C/textview.js.page:116
#, no-wrap
msgid ""
"\n"
"        // Create a \"scrolled window\" to put your textview in so it will scroll\n"
"        this._scrolled = new Gtk.ScrolledWindow ({\n"
"            hscrollbar_policy: Gtk.PolicyType.AUTOMATIC,\n"
"            vscrollbar_policy: Gtk.PolicyType.AUTOMATIC,\n"
"            shadow_type: Gtk.ShadowType.ETCHED_IN,\n"
"            height_request: 180,\n"
"            width_request: 400, });\n"
"\n"
"        // Put the textview into the scrolled window\n"
"        this._scrolled.add_with_viewport (this._textView);\n"
msgstr ""
"\n"
"        // Δημιουργία ενός \"scrolled window\" για να βάλετε την προβολή κειμένου μέσα, ώστε να μπορεί να κυλίσει\n"
"        this._scrolled = new Gtk.ScrolledWindow ({\n"
"            hscrollbar_policy: Gtk.PolicyType.AUTOMATIC,\n"
"            vscrollbar_policy: Gtk.PolicyType.AUTOMATIC,\n"
"            shadow_type: Gtk.ShadowType.ETCHED_IN,\n"
"            height_request: 180,\n"
"            width_request: 400, });\n"
"\n"
"        // Τοποθέτηση της προβολής κειμένου στο κυλιόμενο παράθυρο\n"
"        this._scrolled.add_with_viewport (this._textView);\n"

#. (itstool) path: section/p
#: C/textview.js.page:128
msgid ""
"Here we create a ScrolledWindow, and set it to automatically scroll if it "
"gets to be too big horizontally or vertically. We also give it a nice-"
"looking ETCHED_IN border. After that, we put our TextView inside, and tell "
"the ScrolledWindow to give us a viewport onto it."
msgstr ""
"Εδώ δημιουργούμε ένα κυλιόμενο παράθυρο (ScrolledWindow) και το ορίζουμε σε "
"αυτόματη κύλιση αν γίνεται υπερβολικά μεγάλο οριζόντια ή κάθετα. Του δίνουμε "
"επίσης ένα ωραίο περίγραμμα ETCHED_IN. Μετά από αυτό, βάζουμε την προβολή "
"κειμένου (TextView) μας μέσα και λέμε στο ScrolledWindow να μας δώσει μια "
"θύρα προβολής μέσα του."

#. (itstool) path: section/code
#: C/textview.js.page:134
#, no-wrap
msgid ""
"\n"
"        // Create a grid to organize them in\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Put the label and textview in the grid one on top of the other\n"
"        this._grid.attach (this._penguin, 0, 0, 1, 1);\n"
"        this._grid.attach (this._scrolled, 0, 1, 1, 1);\n"
msgstr ""
"\n"
"        // Δημιουργία ενός πλέγματος για να τα οργανώσετε μέσα\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Τοποθέτηση της ετικέτας και της προβολής κειμένου στο πλέγμα της μιας πάνω από την άλλη\n"
"        this._grid.attach (this._penguin, 0, 0, 1, 1);\n"
"        this._grid.attach (this._scrolled, 0, 1, 1, 1);\n"

#. (itstool) path: section/p
#: C/textview.js.page:144
msgid ""
"The first <link xref=\"grid.js\">Grid</link> we create only has the Label "
"and the ScrolledWindow inside it."
msgstr ""
"Το πρώτο <link xref=\"grid.js\">πλέγμα</link> που δημιουργήσαμε έχει μόνο "
"την ετικέτα και το ScrolledWindow μέσα του."

#. (itstool) path: section/code
#: C/textview.js.page:146
#, no-wrap
msgid ""
"\n"
"        // Create a button to send your message to the penguin\n"
"        this._send = new Gtk.Button ({\n"
"            halign: Gtk.Align.END,\n"
"            margin_top: 20,\n"
"            label: \"Send\" });\n"
"        this._send.connect ('clicked', Lang.bind (this, this._chat));\n"
"\n"
"        // Create a grid that will have the other grid on top and the button on bottom\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Add the other grid and the button to the main grid\n"
"        this._mainGrid.attach (this._grid, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._send, 0, 1, 1, 1);\n"
msgstr ""
"\n"
"        // Δημιουργία ενός πλήκτρου για αποστολή του μηνύματός σας στον πιγκουίνο\n"
"        this._send = new Gtk.Button ({\n"
"            halign: Gtk.Align.END,\n"
"            margin_top: 20,\n"
"            label: \"Send\" });\n"
"        this._send.connect ('clicked', Lang.bind (this, this._chat));\n"
"\n"
"        // Δημιουργία ενός πλέγματος που θα έχει το άλλο πλέγμα στην κορυφή και το πλήκτρο στον πυθμένα.\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Προσθήκη του άλλου πλέγματος και του πλήκτρου στο κύριο πλέγμα\n"
"        this._mainGrid.attach (this._grid, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._send, 0, 1, 1, 1);\n"

#. (itstool) path: section/p
#: C/textview.js.page:163
msgid ""
"We create a <link xref=\"button.js\">Button</link> to send your message to "
"the penguin, and a new Grid that has the other one on top and the Button on "
"the bottom. The Button has a margin on top, so that it isn't squished up "
"against the ScrolledWindow."
msgstr ""
"Δημιουργούμε ένα <link xref=\"button.js\">κουμπί</link> για να στείλουμε το "
"μήνυμά σας στον πιγκουίνο και ένα νέο πλέγμα που έχει το άλλο στην κορυφή "
"και το κουμπί στο τέλος. Το κουμπί έχει ένα περιθώριο στην κορυφή, έτσι ώστε "
"δεν παράγεται πάνω στο ScrolledWindow."

#. (itstool) path: section/code
#: C/textview.js.page:165
#, no-wrap
msgid ""
"\n"
"        // Attach the main grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""
"\n"
"        // Προσάρτηση του κύριου πλέγματος στο παράθυρο\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"

#. (itstool) path: section/p
#: C/textview.js.page:174
msgid ""
"Finally, we attach the main Grid to the window, then we tell the window and "
"everything inside it to become visible when the application is run."
msgstr ""
"Τελικά, προσκολλάμε το κύριο πλέγμα στο παράθυρο, έπειτα λέμε στο παράθυρο "
"και σε κάθε τι που είναι μέσα του να γίνει ορατό όταν τρέχει η εφαρμογή."

#. (itstool) path: section/title
#: C/textview.js.page:179
msgid "Function which handles the penguin's response"
msgstr "Η συνάρτηση που χειρίζεται την απόκριση του πιγκουίνου"

#. (itstool) path: section/code
#: C/textview.js.page:180
#, no-wrap
msgid ""
"\n"
"    _chat: function () {\n"
"\n"
"        // Create a random number to determine what the penguin says\n"
"        this.number = Math.floor ((Math.random() * 3) + 1);\n"
"\n"
"        // Did you actually say anything?\n"
"        if (this.buffer.text) {\n"
"\n"
"            // Did you mention fish?\n"
"            if (this.buffer.text.match (/fish/gi)) {\n"
"\n"
"                // Have the penguin squaak about fish\n"
"                if (this.number == 1)\n"
"                    this._penguin.set_label (\"FISH!\");\n"
"\n"
"                else if (this.number == 2)\n"
"                    this._penguin.set_label (\"Fish fish fish fish. Fish!\");\n"
"\n"
"                else\n"
"                    this._penguin.set_label (\"Fish? Fish fish fish. Fish fish. FISH!\");\n"
"\n"
"            }\n"
"\n"
"            // I guess you didn't mention fish\n"
"            else {\n"
"\n"
"                // Have the penguin talk about penguinny stuff\n"
"                if (this.number == 1)\n"
"                    this._penguin.set_label (\"SQUAAK!\");\n"
"\n"
"                else if (this.number == 2)\n"
"                    this._penguin.set_label (\"Ork ork ork ork squaak. Squaak squaak! *waves flippers*\");\n"
"\n"
"                else\n"
"                    this._penguin.set_label (\"Ork ork ork ork ork?\");\n"
"\n"
"            }\n"
"\n"
"        }\n"
"\n"
"        // Clear the buffer\n"
"        this.buffer.text = \"\";\n"
"\n"
"        // Give focus back to the textview so you don't have to click it again\n"
"        this._textView.has_focus = true;\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _chat: function () {\n"
"\n"
"        // Create a random number to determine what the penguin says\n"
"        this.number = Math.floor ((Math.random() * 3) + 1);\n"
"\n"
"        // Did you actually say anything?\n"
"        if (this.buffer.text) {\n"
"\n"
"            // Did you mention fish?\n"
"            if (this.buffer.text.match (/fish/gi)) {\n"
"\n"
"                // Have the penguin squaak about fish\n"
"                if (this.number == 1)\n"
"                    this._penguin.set_label (\"FISH!\");\n"
"\n"
"                else if (this.number == 2)\n"
"                    this._penguin.set_label (\"Fish fish fish fish. Fish!\");\n"
"\n"
"                else\n"
"                    this._penguin.set_label (\"Fish? Fish fish fish. Fish fish. FISH!\");\n"
"\n"
"            }\n"
"\n"
"            // I guess you didn't mention fish\n"
"            else {\n"
"\n"
"                // Have the penguin talk about penguinny stuff\n"
"                if (this.number == 1)\n"
"                    this._penguin.set_label (\"SQUAAK!\");\n"
"\n"
"                else if (this.number == 2)\n"
"                    this._penguin.set_label (\"Ork ork ork ork squaak. Squaak squaak! *waves flippers*\");\n"
"\n"
"                else\n"
"                    this._penguin.set_label (\"Ork ork ork ork ork?\");\n"
"\n"
"            }\n"
"\n"
"        }\n"
"\n"
"        // Clear the buffer\n"
"        this.buffer.text = \"\";\n"
"\n"
"        // Give focus back to the textview so you don't have to click it again\n"
"        this._textView.has_focus = true;\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/textview.js.page:231
msgid ""
"Here we use some basic JavaScript functions to have the penguins say "
"something random. Penguins like fish, though, so if you mention fish we want "
"the penguin to respond to that. To do that, we use the JavaScript String "
"object's match method on <file>this.buffer.text</file>, which returns the "
"contents of our TextBuffer."
msgstr ""
"Εδώ χρησιμοποιούμε μερικές βασικές συναρτήσεις JavaScript για να κάνουμε "
"τους πιγκουίνους να λένε κάτι τυχαία. Οι πιγκουίνοι είναι όπως τα ψάρια, "
"όμως, έτσι εάν αναφέρετε ψάρι θέλουμε ο πιγκουίνος να απαντά σε αυτό. Για να "
"γίνει αυτό, χρησιμοποιούμε την μέθοδο συμφωνίας του αντικειμένου "
"συμβολοσειράς JavaScript στο <file>this.buffer.text</file>, που επιστρέφει "
"τα περιεχόμενα της TextBuffer μας."

#. (itstool) path: section/p
#: C/textview.js.page:232
msgid ""
"Since we want to clear out the TextBuffer after each time you click Send, we "
"set <file>this.buffer.text</file> to contain an empty string afterwards. "
"Then we return focus to our TextView, so that you can keep typing without "
"having to click on it beforehand."
msgstr ""
"Αφού θέλουμε να καθαρίσουμε την TextBuffer κάθε φορά μετά το πάτημα "
"αποστολή, ορίζουμε το <file>this.buffer.text</file> να περιέχει μια κενή "
"συμβολοσειρά κατόπιν. Έπειτα επιστρέφουμε την εστίαση στην TextView μας, "
"έτσι ώστε να μπορείτε να συνεχίσετε την πληκτρολόγηση χωρίς να πρέπει να "
"πατήσετε πάνω της προκαταβολικά."

#. (itstool) path: section/code
#: C/textview.js.page:234
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new TextViewExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new TextViewExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/textview.js.page:239
msgid ""
"Finally, we create a new instance of the finished TextViewExample class, and "
"set the application running."
msgstr ""
"Τελικά, δημιουργούμε ένα νέο παράδειγμα της τελειωμένης κλάσης "
"TextViewExample και εκτελούμε την εφαρμογή."

#. (itstool) path: section/code
#: C/textview.js.page:244
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const TextViewExample = new Lang.Class ({\n"
"    Name: 'TextView Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jstextview' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Talk to a Penguin\",\n"
"            default_height: 400,\n"
"            default_width: 440,\n"
"            border_width: 20 });\n"
"\n"
"        // Create a label for the penguin to talk to you\n"
"        this._penguin = new Gtk.Label ({\n"
"            height_request: 180,\n"
"            width_request: 400,\n"
"            label: \"Squaaaak?\",\n"
"            wrap: true });\n"
"\n"
"        // Create a textview for you to talk to the penguin\n"
"        this.buffer = new Gtk.TextBuffer();\n"
"        this._textView = new Gtk.TextView ({\n"
"            buffer: this.buffer,\n"
"            editable: true,\n"
"            wrap_mode: Gtk.WrapMode.WORD });\n"
"\n"
"        // Create a \"scrolled window\" to put your textview in so it will scroll\n"
"        this._scrolled = new Gtk.ScrolledWindow ({\n"
"            hscrollbar_policy: Gtk.PolicyType.AUTOMATIC,\n"
"            vscrollbar_policy: Gtk.PolicyType.AUTOMATIC,\n"
"            shadow_type: Gtk.ShadowType.ETCHED_IN,\n"
"            height_request: 180,\n"
"            width_request: 400, });\n"
"\n"
"        // Put the textview into the scrolled window\n"
"        this._scrolled.add_with_viewport (this._textView);\n"
"\n"
"        // Create a grid to organize them in\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Put the label and textview in the grid one on top of the other\n"
"        this._grid.attach (this._penguin, 0, 0, 1, 1);\n"
"        this._grid.attach (this._scrolled, 0, 1, 1, 1);\n"
"\n"
"        // Create a button to send your message to the penguin\n"
"        this._send = new Gtk.Button ({\n"
"            halign: Gtk.Align.END,\n"
"            margin_top: 20,\n"
"            label: \"Send\" });\n"
"        this._send.connect ('clicked', Lang.bind (this, this._chat));\n"
"\n"
"        // Create a grid that will have the other grid on top and the button on bottom\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Add the other grid and the button to the main grid\n"
"        this._mainGrid.attach (this._grid, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._send, 0, 1, 1, 1);\n"
"\n"
"        // Attach the main grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _chat: function () {\n"
"\n"
"        // Create a random number to determine what the penguin says\n"
"        this.number = Math.floor ((Math.random() * 3) + 1);\n"
"\n"
"        // Did you actually say anything?\n"
"        if (this.buffer.text) {\n"
"\n"
"            // Did you mention fish?\n"
"            if (this.buffer.text.match (/fish/gi)) {\n"
"\n"
"                // Have the penguin squaak about fish\n"
"                if (this.number == 1)\n"
"                    this._penguin.set_label (\"FISH!\");\n"
"\n"
"                else if (this.number == 2)\n"
"                    this._penguin.set_label (\"Fish fish fish fish. Fish!\");\n"
"\n"
"                else\n"
"                    this._penguin.set_label (\"Fish? Fish fish fish. Fish fish. FISH!\");\n"
"\n"
"            }\n"
"\n"
"            // I guess you didn't mention fish\n"
"            else {\n"
"\n"
"                // Have the penguin talk about penguinny stuff\n"
"                if (this.number == 1)\n"
"                    this._penguin.set_label (\"SQUAAK!\");\n"
"\n"
"                else if (this.number == 2)\n"
"                    this._penguin.set_label (\"Ork ork ork ork squaak. Squaak squaak! *waves flippers*\");\n"
"\n"
"                else\n"
"                    this._penguin.set_label (\"Ork ork ork ork ork?\");\n"
"\n"
"            }\n"
"\n"
"        }\n"
"\n"
"        // Clear the buffer\n"
"        this.buffer.text = \"\";\n"
"\n"
"        // Give focus back to the textview so you don't have to click it again\n"
"        this._textView.has_focus = true;\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new TextViewExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const TextViewExample = new Lang.Class ({\n"
"    Name: 'TextView Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jstextview' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Talk to a Penguin\",\n"
"            default_height: 400,\n"
"            default_width: 440,\n"
"            border_width: 20 });\n"
"\n"
"        // Create a label for the penguin to talk to you\n"
"        this._penguin = new Gtk.Label ({\n"
"            height_request: 180,\n"
"            width_request: 400,\n"
"            label: \"Squaaaak?\",\n"
"            wrap: true });\n"
"\n"
"        // Create a textview for you to talk to the penguin\n"
"        this.buffer = new Gtk.TextBuffer();\n"
"        this._textView = new Gtk.TextView ({\n"
"            buffer: this.buffer,\n"
"            editable: true,\n"
"            wrap_mode: Gtk.WrapMode.WORD });\n"
"\n"
"        // Create a \"scrolled window\" to put your textview in so it will scroll\n"
"        this._scrolled = new Gtk.ScrolledWindow ({\n"
"            hscrollbar_policy: Gtk.PolicyType.AUTOMATIC,\n"
"            vscrollbar_policy: Gtk.PolicyType.AUTOMATIC,\n"
"            shadow_type: Gtk.ShadowType.ETCHED_IN,\n"
"            height_request: 180,\n"
"            width_request: 400, });\n"
"\n"
"        // Put the textview into the scrolled window\n"
"        this._scrolled.add_with_viewport (this._textView);\n"
"\n"
"        // Create a grid to organize them in\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Put the label and textview in the grid one on top of the other\n"
"        this._grid.attach (this._penguin, 0, 0, 1, 1);\n"
"        this._grid.attach (this._scrolled, 0, 1, 1, 1);\n"
"\n"
"        // Create a button to send your message to the penguin\n"
"        this._send = new Gtk.Button ({\n"
"            halign: Gtk.Align.END,\n"
"            margin_top: 20,\n"
"            label: \"Send\" });\n"
"        this._send.connect ('clicked', Lang.bind (this, this._chat));\n"
"\n"
"        // Create a grid that will have the other grid on top and the button on bottom\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Add the other grid and the button to the main grid\n"
"        this._mainGrid.attach (this._grid, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._send, 0, 1, 1, 1);\n"
"\n"
"        // Attach the main grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _chat: function () {\n"
"\n"
"        // Create a random number to determine what the penguin says\n"
"        this.number = Math.floor ((Math.random() * 3) + 1);\n"
"\n"
"        // Did you actually say anything?\n"
"        if (this.buffer.text) {\n"
"\n"
"            // Did you mention fish?\n"
"            if (this.buffer.text.match (/fish/gi)) {\n"
"\n"
"                // Have the penguin squaak about fish\n"
"                if (this.number == 1)\n"
"                    this._penguin.set_label (\"FISH!\");\n"
"\n"
"                else if (this.number == 2)\n"
"                    this._penguin.set_label (\"Fish fish fish fish. Fish!\");\n"
"\n"
"                else\n"
"                    this._penguin.set_label (\"Fish? Fish fish fish. Fish fish. FISH!\");\n"
"\n"
"            }\n"
"\n"
"            // I guess you didn't mention fish\n"
"            else {\n"
"\n"
"                // Have the penguin talk about penguinny stuff\n"
"                if (this.number == 1)\n"
"                    this._penguin.set_label (\"SQUAAK!\");\n"
"\n"
"                else if (this.number == 2)\n"
"                    this._penguin.set_label (\"Ork ork ork ork squaak. Squaak squaak! *waves flippers*\");\n"
"\n"
"                else\n"
"                    this._penguin.set_label (\"Ork ork ork ork ork?\");\n"
"\n"
"            }\n"
"\n"
"        }\n"
"\n"
"        // Clear the buffer\n"
"        this.buffer.text = \"\";\n"
"\n"
"        // Give focus back to the textview so you don't have to click it again\n"
"        this._textView.has_focus = true;\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new TextViewExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/textview.js.page:256
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"ScrolledWindow.html\">Gtk.ScrolledWindow</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"ScrolledWindow.html\">Gtk.ScrolledWindow</link>"

#. (itstool) path: item/p
#: C/textview.js.page:257
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TextBuffer."
"html\">Gtk.TextBuffer</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TextBuffer."
"html\">Gtk.TextBuffer</link>"

#. (itstool) path: item/p
#: C/textview.js.page:258
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TextView.html"
"\">Gtk.TextView</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TextView.html"
"\">Gtk.TextView</link>"

#. (itstool) path: info/title
#: C/textview.py.page:8
msgctxt "text"
msgid "TextView (Python)"
msgstr "Προβολή κειμένου (TextView) (Python)"

#. (itstool) path: info/desc
#: C/textview.py.page:27
msgid "Widget that displays a GtkTextBuffer"
msgstr "Γραφικό στοιχείο που εμφανίζει ένα GtkTextBuffer"

#. (itstool) path: note/p
#: C/textview.py.page:32
msgid "This is an example of Gtk.TextView."
msgstr "Αυτό είναι ένα παράδειγμα του Gtk.TextView."

#. (itstool) path: note/p
#: C/textview.py.page:34
msgid ""
"But we can also have a new line if we write a long sentence (the text will "
"wrap breaking lines between words)."
msgstr ""
"Αλλά μπορούμε επίσης να έχουμε μια νέα γραμμή εάν γράψουμε μια μεγάλη "
"πρόταση (το κείμενο θα αναδιπλωθεί διακόπτοντας τις γραμμές μεταξύ των "
"λέξεων)."

#. (itstool) path: note/p
#: C/textview.py.page:35
msgid "If we have a loooooooooooooooooooooooooooooooooooong"
msgstr "Εάν έχουμε μια μεγάαααααααααααααααααααααααααααααααλη"

#. (itstool) path: note/p
#: C/textview.py.page:36
msgid "(that was long)"
msgstr "(που ήταν μεγάλη)"

#. (itstool) path: note/p
#: C/textview.py.page:37
msgid "word, an horizontal scrollbar will appear."
msgstr "λέξη, μια οριζόντια γραμμή κύλισης θα εμφανιστεί."

#. (itstool) path: section/code
#: C/textview.py.page:46
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"TextView Example\", application=app)\n"
"        self.set_default_size(300, 450)\n"
"\n"
"        # a scrollbar for the child widget (that is going to be the textview)\n"
"        scrolled_window = Gtk.ScrolledWindow()\n"
"        scrolled_window.set_border_width(5)\n"
"        # we scroll only if needed\n"
"        scrolled_window.set_policy(\n"
"            Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)\n"
"\n"
"        # a text buffer (stores text)\n"
"        buffer1 = Gtk.TextBuffer()\n"
"\n"
"        # a textview (displays the buffer)\n"
"        textview = Gtk.TextView(buffer=buffer1)\n"
"        # wrap the text, if needed, breaking lines in between words\n"
"        textview.set_wrap_mode(Gtk.WrapMode.WORD)\n"
"\n"
"        # textview is scrolled\n"
"        scrolled_window.add(textview)\n"
"\n"
"        self.add(scrolled_window)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"TextView Example\", application=app)\n"
"        self.set_default_size(300, 450)\n"
"\n"
"        # a scrollbar for the child widget (that is going to be the textview)\n"
"        scrolled_window = Gtk.ScrolledWindow()\n"
"        scrolled_window.set_border_width(5)\n"
"        # we scroll only if needed\n"
"        scrolled_window.set_policy(\n"
"            Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)\n"
"\n"
"        # a text buffer (stores text)\n"
"        buffer1 = Gtk.TextBuffer()\n"
"\n"
"        # a textview (displays the buffer)\n"
"        textview = Gtk.TextView(buffer=buffer1)\n"
"        # wrap the text, if needed, breaking lines in between words\n"
"        textview.set_wrap_mode(Gtk.WrapMode.WORD)\n"
"\n"
"        # textview is scrolled\n"
"        scrolled_window.add(textview)\n"
"\n"
"        self.add(scrolled_window)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/textview.py.page:50
msgid "Useful methods for a TextView widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο TextView"

#. (itstool) path: section/p
#: C/textview.py.page:51
msgid ""
"A <code>Gtk.TextView</code> displays the text stored in a <code>Gtk."
"TextBuffer</code>. However, most text manipulation is accomplished with "
"iterators, represented by a <code>Gtk.TextIter</code> - a position between "
"two characters in the text buffer. Iterators are not valid indefinitely; "
"whenever the buffer is modified in a way that affects the contents of the "
"buffer, all outstanding iterators become invalid. Because of this, iterators "
"can’t be used to preserve positions across buffer modifications. To preserve "
"a position, we use a <code>Gtk.TextMark</code>, that can be set visible with "
"<code>visible(True)</code>. A text buffer contains two built-in marks; an "
"\"insert\" mark (the position of the cursor) and the \"selection_bound\" "
"mark."
msgstr ""
"Μια <code>Gtk.TextView</code> εμφανίζει το αποθηκευμένο κείμενο σε μια "
"<code>Gtk.TextBuffer</code>. Όμως, η περισσότερη επεξεργασία του κειμένου "
"πραγματοποιείται με επαναλήπτες, αντιπροσωπευόμενοι από ένα <code>Gtk."
"TextIter</code> - μια θέση μεταξύ δύο χαρακτήρων στην ενδιάμεση μνήμη του "
"κειμένου. Οι επαναλήπτες δεν είναι έγκυροι επ' άπειρο· όποτε η ενδιάμεση "
"μνήμη τροποποιείται με τρόπο που επηρεάζει τα περιεχόμενα της ρυθμιστικής "
"μνήμης, όλοι οι εκκρεμείς επαναλήπτες γίνονται άκυροι. Λόγω αυτού, οι "
"επαναλήπτες δεν μπορούν να χρησιμοποιηθούν για να διατηρήσουν τις θέσεις με "
"τις τροποποιήσεις της ενδιάμεσης μνήμης. Για να διατηρήσετε μια θέση, "
"χρησιμοποιούμε ένα <code>Gtk.TextMark</code>, που μπορεί να οριστεί ορατό με "
"<code>visible(True)</code>. Μια ενδιάμεση μνήμη κειμένου περιέχει δύο "
"ενσωματωμένα σημάδια· ένα σημάδι \"εισαγωγής\" (η θέση του δρομέα) και το "
"σημάδι \"δέσμευση_επιλογής\"."

#. (itstool) path: section/p
#: C/textview.py.page:52
msgid "Methods for a TextView widget:"
msgstr "Μέθοδοι για ένα γραφικό στοιχείο προβολής κειμένου (TextView):"

#. (itstool) path: item/p
#: C/textview.py.page:54
msgid ""
"The TextView widget is by default editable. If you prefer otherwise, use "
"<code>set_editable(False)</code>. If the buffer has no editable text, it "
"might be a good idea to use <code>set_cursor_visible(False)</code> as well."
msgstr ""
"Το γραφικό στοιχείο TextView είναι από προεπιλογή επεξεργάσιμο. Εάν "
"προτιμάτε αλλιώς, χρησιμοποιήστε <code>set_editable(False)</code>. Εάν η "
"ενδιάμεση μνήμη δεν έχει επεξεργάσιμο κείμενο, ίσως να είναι μια καλή ιδέα "
"να χρησιμοποιήσετε <code>set_cursor_visible(False)</code> επίσης."

#. (itstool) path: item/p
#: C/textview.py.page:55
msgid ""
"The justification of the text is set with <code>set_justification(Gtk."
"Justification.JUSTIFICATION)</code> where <code>JUSTIFICATION</code> is one "
"of <code>LEFT, RIGHT, CENTER, FILL</code>."
msgstr ""
"Η στοίχιση του κειμένου ορίζεται με <code>set_justification(Gtk."
"Justification.JUSTIFICATION)</code> όπου <code>JUSTIFICATION</code> είναι "
"ένα από τα <code>LEFT, RIGHT, CENTER, FILL</code>."

#. (itstool) path: item/p
#: C/textview.py.page:56
msgid ""
"The line wrapping of the text is set with <code>set_wrap_mode(Gtk.WrapMode."
"WRAP)</code> where <code>WRAP</code> is one of <code>NONE</code> (the text "
"area is made wider), <code>CHAR</code> (break lines anywhere the cursor can "
"appear), <code>WORD</code> (break lines between words), <code>WORD_CHAR</"
"code> (break lines between words, but if that is not enough between "
"characters)."
msgstr ""
"Η αναδίπλωση γραμμής του κειμένου ορίζεται με <code>set_wrap_mode(Gtk."
"WrapMode.WRAP)</code> όπου <code>WRAP</code> είναι ένα από <code>NONE</code> "
"(η περιοχή του κειμένου γίνεται πλατύτερη), <code>CHAR</code> (η αλλαγή "
"γραμμών οπουδήποτε ο δρομέας μπορεί να εμφανιστεί), <code>WORD</code> "
"(αλλαγή γραμμών μεταξύ λέξεων), <code>WORD_CHAR</code> (αλλαγή γραμμών "
"μεταξύ λέξεων, αλλά εάν αυτό δεν είναι αρκετό μεταξύ χαρακτήρων)."

#. (itstool) path: section/p
#: C/textview.py.page:58
msgid "Methods for a TextBuffer widget:"
msgstr "Μέθοδοι για ένα γραφικό στοιχείο TextBuffer:"

#. (itstool) path: item/p
#: C/textview.py.page:60
msgid ""
"<code>get_insert()</code> returns the <code>Gtk.TextMark</code> that "
"represents the cursor, that is the insertion point."
msgstr ""
"Η <code>get_insert()</code> επιστρέφει το <code>Gtk.TextMark</code> που "
"αναπαριστά τον δρομέα, που είναι το σημείο εισαγωγής."

#. (itstool) path: item/p
#: C/textview.py.page:61
msgid ""
"<code>get_selection_bound()</code> returns the <code>Gtk.TextMark</code> "
"that represents the selection bound."
msgstr ""
"Η <code>get_selection_bound()</code> επιστρέφει το <code>Gtk.TextMark</code> "
"που αναπαριστά την δεσμευμένη επιλογή."

#. (itstool) path: item/p
#: C/textview.py.page:62
msgid ""
"<code>set_text(\"some text\", length)</code> where <code>length</code> is a "
"positive integer or <code>-1</code>, sets the content of the buffer as the "
"first <code>length</code> characters of the <code>\"some text\"</code> text. "
"If <code>length</code> is omitted or <code>-1</code>, the text is inserted "
"completely. The content of the buffer, if there is any, is destroyed."
msgstr ""
"Ο <code>set_text(\"some text\", length)</code> όπου <code>length</code> "
"είναι ένας θετικός ακέραιος ή <code>-1</code>, ορίζει το περιεχόμενο της "
"ενδιάμεσης μνήμης ως τους πρώτους χαρακτήρες <code>length</code> του "
"κειμένου <code>\"some text\"</code>. Εάν το <code>length</code> παραλείπεται "
"ή <code>-1</code>, το κείμενο εισάγεται πλήρως. Το περιεχόμενο της "
"ενδιάμεσης μνήμης, εάν υπάρχει κάποια, καταστρέφεται."

#. (itstool) path: item/p
#: C/textview.py.page:63
msgid ""
"<code>insert(iter, \"some text\", length)</code> where <code>iter</code> is "
"a text iterator and <code>length</code> is a positive integer or <code>-1</"
"code>, inserts in the buffer at <code>iter</code> the first <code>length</"
"code> characters of the <code>\"some text\"</code> text. If <code>length</"
"code> is omitted or <code>-1</code>, the text is inserted completely."
msgstr ""
"Η <code>insert(iter, \"some text\", length)</code> όπου <code>iter</code> "
"είναι ένας επαναλήπτης κειμένου και <code>length</code> είναι ένας θετικός "
"ακέραιος ή <code>-1</code>, εισάγει στην ενδιάμεση μνήμη στο <code>iter</"
"code> τους πρώτους χαρακτήρες <code>length</code> του κειμένου <code>\"some "
"text\"</code>. Εάν το <code>length</code> παραληφθεί ή <code>-1</code>, το "
"κείμενο εισάγεται πλήρως."

#. (itstool) path: item/p
#: C/textview.py.page:64
msgid ""
"<code>insert_at_cursor(\"some text\", length)</code> does the same as "
"<code>insert(iter, \"some text\", length)</code>, with the current cursor "
"taken as <code>iter</code>."
msgstr ""
"Η <code>insert_at_cursor(\"some text\", length)</code> κάνει το ίδιο με την "
"<code>insert(iter, \"some text\", length)</code>, με τον τρέχοντα δρομέα να "
"λαμβάνεται ως <code>iter</code>."

#. (itstool) path: item/p
#: C/textview.py.page:65
msgid ""
"<code>create_mark(\"mark_name\", iter, left_gravity)</code> where "
"<code>iter</code> is a <code>Gtk.TextIter</code> and <code>left_gravity</"
"code> is a boolean, creates a <code>Gtk.TextMark</code> at the position of "
"<code>iter</code>. If <code>\"mark_name\"</code> is <code>None</code>, the "
"mark is anonymous; otherwise, the mark can be retrieved by name using "
"<code>get_mark()</code>. If a mark has left gravity, and text is inserted at "
"the mark’s current location, the mark will be moved to the left of the newly-"
"inserted text. If <code>left_gravity</code> is omitted, it defaults to "
"<code>False</code>."
msgstr ""
"Η <code>create_mark(\"mark_name\", iter, left_gravity)</code> όπου "
"<code>iter</code> είναι ένα <code>Gtk.TextIter</code> και "
"<code>left_gravity</code> είναι τιμή Μπουλ, δημιουργεί ένα <code>Gtk."
"TextMark</code> στη θέση του <code>iter</code>. Εάν <code>\"mark_name\"</"
"code> είναι <code>None</code>, το σημάδι είναι ανώνυμο· αλλιώς, το σημάδι "
"μπορεί να ανακτηθεί κατά όνομα χρησιμοποιώντας <code>get_mark()</code>. Εάν "
"ένα σημάδι έχει υπολειπόμενη βαρύτητα και το κείμενο εισάγεται στην τρέχουσα "
"θέση του σημαδιού, το σημάδι θα μετακινηθεί στα αριστερά του νεοεισαγμένου "
"κειμένου. Εάν η <code>left_gravity</code> παραληφθεί, προεπιλέγεται το "
"<code>False</code>."

#. (itstool) path: item/p
#: C/textview.py.page:67
msgid ""
"To specify that some text in the buffer should have specific formatting, you "
"must define a tag to hold that formatting information, and then apply that "
"tag to the region of text using <code>create_tag(\"tag name\", property)</"
"code> and <code>apply_tag(tag, start_iter, end_iter)</code> as in, for "
"instance:"
msgstr ""
"Για να ορίσετε ότι κάποιο κείμενο στην ενδιάμεση μνήμη πρέπει να έχει ειδική "
"μορφοποίηση, πρέπει να ορίσετε μια ετικέτα να κρατήσει αυτήν την πληροφορία "
"μορφοποίησης και έπειτα να εφαρμόσει αυτήν την ετικέτα στην περιοχή του "
"κειμένου χρησιμοποιώντας <code>create_tag(\"tag name\", property)</code> και "
"<code>apply_tag(tag, start_iter, end_iter)</code> όπως στο, για παράδειγμα:"

#. (itstool) path: item/code
#: C/textview.py.page:68
#, no-wrap
msgid ""
"\n"
"tag = textbuffer.create_tag(\"orange_bg\", background=\"orange\")\n"
"textbuffer.apply_tag(tag, start_iter, end_iter)"
msgstr ""
"\n"
"tag = textbuffer.create_tag(\"orange_bg\", background=\"orange\")\n"
"textbuffer.apply_tag(tag, start_iter, end_iter)"

#. (itstool) path: item/p
#: C/textview.py.page:71
msgid "The following are some of the common styles applied to text:"
msgstr ""
"Τα ακόλουθα είναι μερικές από τις κοινές εφαρμοζόμενες τεχνοτροπίες στο "
"κείμενο:"

#. (itstool) path: item/p
#: C/textview.py.page:73
msgid "Background colour (\"background\" property)"
msgstr "Χρώμα παρασκηνίου (ιδιότητα \"background\")"

#. (itstool) path: item/p
#: C/textview.py.page:74
msgid "Foreground colour (\"foreground\" property)"
msgstr "Χρώμα προσκηνίου (ιδιότητα \"foreground\")"

#. (itstool) path: item/p
#: C/textview.py.page:75
msgid "Underline (\"underline\" property)"
msgstr "Υπογράμμιση (ιδιότητα \"underline\")"

#. (itstool) path: item/p
#: C/textview.py.page:76
msgid "Bold (\"weight\" property)"
msgstr "Έντονα (ιδιότητα \"weight\")"

#. (itstool) path: item/p
#: C/textview.py.page:77
msgid "Italics (\"style\" property)"
msgstr "Πλάγια (ιδιότητα \"style\")"

#. (itstool) path: item/p
#: C/textview.py.page:78
msgid "Strikethrough (\"strikethrough\" property)"
msgstr "Διαγράμμιση (ιδιότητα \"strikethrough\")"

#. (itstool) path: item/p
#: C/textview.py.page:79
msgid "Justification (\"justification\" property)"
msgstr "Στοίχιση (ιδιότητα \"justification\")"

#. (itstool) path: item/p
#: C/textview.py.page:80
msgid "Size (\"size\" and \"size-points\" properties)"
msgstr "Μέγεθος (ιδιότητες \"size\" και \"size-points\")"

#. (itstool) path: item/p
#: C/textview.py.page:81
msgid "Text wrapping (\"wrap-mode\" property)"
msgstr "Αναδίπλωση κειμένου (ιδιότητα \"wrap-mode\")"

#. (itstool) path: item/p
#: C/textview.py.page:83
msgid ""
"You can also delete particular tags later using <code>remove_tag()</code> or "
"delete all tags in a given region by calling <code>remove_all_tags()</code>."
msgstr ""
"Μπορείτε επίσης να διαγράψετε συγκεκριμένες ετικέτες αργότερα "
"χρησιμοποιώντας <code>remove_tag()</code> ή να διαγράψετε όλες τις ετικέτες "
"σε μια δεδομένη περιοχή καλώντας <code>remove_all_tags()</code>."

#. (itstool) path: section/p
#: C/textview.py.page:85
msgid "Methods for a TextIter widget"
msgstr "Μέθοδοι για γραφικό στοιχείο TextIter"

#. (itstool) path: item/p
#: C/textview.py.page:87
msgid ""
"<code>forward_search(needle, flags, limit)</code> searches forward for "
"<code>needle</code>. The search will not continue past the <code>Gtk."
"TextIter</code> limit. The <code>flags</code> can be set to one of the "
"following, or any combination of it by concatenating them with the bitwise-"
"OR operator <code>|</code>: <code>0</code> (the match must be exact); "
"<code>Gtk.TextSearchFlags.VISIBLE_ONLY</code> (the match may have invisible "
"text interspersed in needle); <code>Gtk.TextSearchFlags.TEXT_ONLY</code> "
"(the match may have pixbufs or child widgets mixed inside the matched "
"range); <code>Gtk.TextSearchFlags.CASE_INSENSITIVE</code> (the text will be "
"matched regardless of what case it is in). The method returns a tuple "
"containing a <code>Gtk.TextIter</code> pointing to the start and to the "
"first character after the match; if no match is found, <code>None</code> is "
"returned."
msgstr ""
"Η <code>forward_search(needle, flags, limit)</code> αναζητά μπροστά για "
"<code>needle</code>. Η αναζήτηση δεν θα συνεχίσει πέρα από το όριο <code>Gtk."
"TextIter</code>. Οι <code>flags</code> μπορούν να οριστούν σε ένα από τα "
"ακόλουθα, ή οποιονδήποτε συνδυασμό του συνενώνοντας τους με τον τελεστή OR "
"<code>|</code>: <code>0</code> (η συμφωνία πρέπει να είναι ακριβής)· "
"<code>Gtk.TextSearchFlags.VISIBLE_ONLY</code> (η συμφωνία μπορεί να έχει "
"αόρατο κείμενο διανθισμένο σε βελόνα)· <code>Gtk.TextSearchFlags.TEXT_ONLY</"
"code> (η συμφωνία μπορεί να έχει γραφικά στοιχεία pixbufs ή θυγατρικά "
"ανακατεμένα μέσα στην περιοχή συμφωνίας)· το <code>Gtk.TextSearchFlags."
"CASE_INSENSITIVE</code> (το κείμενο θα ταιριάζει ανεξάρτητα από κεφαλαία/"
"μικρά). Η μέθοδος επιστρέφει μια πλειάδα που περιέχει ένα <code>Gtk."
"TextIter</code> που δείχνει στην αρχή και στον πρώτο χαρακτήρα μετά τη "
"συμφωνία· εάν δεν βρεθεί συμφωνία, ο <code>None</code> επιστρέφεται."

#. (itstool) path: item/p
#: C/textview.py.page:88
msgid ""
"<code>backward_search(needle, flags, limit)</code> does the same as "
"<code>forward_search()</code>, but moving backwards."
msgstr ""
"Η <code>backward_search(needle, flags, limit)</code> κάνει το ίδιο όπως η "
"<code>forward_search()</code>, αλλά κινείται προς τα πίσω."

#. (itstool) path: item/p
#: C/textview.py.page:96
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTextView.html"
"\">GtkTextView</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTextView.html"
"\">GtkTextView</link>"

#. (itstool) path: item/p
#: C/textview.py.page:97
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTextBuffer.html"
"\">GtkTextBuffer</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTextBuffer.html"
"\">GtkTextBuffer</link>"

#. (itstool) path: item/p
#: C/textview.py.page:98
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTextTag.html"
"\">GtkTextTag</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTextTag.html"
"\">GtkTextTag</link>"

#. (itstool) path: info/title
#: C/textview.vala.page:8
msgctxt "text"
msgid "TextView (Vala)"
msgstr "TextView (Vala)"

#. (itstool) path: note/p
#: C/textview.vala.page:25
msgid ""
"If we have a loooooooooooooooooooooooooooooooooooong word, a horizontal "
"scrollbar will appear."
msgstr ""
"Εάν έχουμε μια μεγάαααααααααααααααααααααααααααααααλη λέξη, μια οριζόντια "
"γραμμή κύλισης θα εμφανιστεί."

#. (itstool) path: page/code
#: C/textview.vala.page:30
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\t/* Create the window of this applicationt. */\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* This is the window. */\n"
"class MyWindow: Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"TextView Example\");\n"
"\t\tthis.set_default_size (220, 200);\n"
"\n"
"\t\tvar buffer = new Gtk.TextBuffer (null); //stores text to be displayed\n"
"\t\tvar textview = new Gtk.TextView.with_buffer (buffer); //displays TextBuffer\n"
"\t\ttextview.set_wrap_mode (Gtk.WrapMode.WORD); //sets line wrapping\n"
"\n"
"\t\tvar scrolled_window = new Gtk.ScrolledWindow (null, null);\n"
"\t\tscrolled_window.set_policy (Gtk.PolicyType.AUTOMATIC,\n"
"\t\t                            Gtk.PolicyType.AUTOMATIC);\n"
"\n"
"\t\tscrolled_window.add (textview);\n"
"\t\tscrolled_window.set_border_width (5);\n"
"\n"
"\t\tthis.add (scrolled_window);\n"
"\t}\n"
"}\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\t/* Create the window of this applicationt. */\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* This is the window. */\n"
"class MyWindow: Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"TextView Example\");\n"
"\t\tthis.set_default_size (220, 200);\n"
"\n"
"\t\tvar buffer = new Gtk.TextBuffer (null); //stores text to be displayed\n"
"\t\tvar textview = new Gtk.TextView.with_buffer (buffer); //displays TextBuffer\n"
"\t\ttextview.set_wrap_mode (Gtk.WrapMode.WORD); //sets line wrapping\n"
"\n"
"\t\tvar scrolled_window = new Gtk.ScrolledWindow (null, null);\n"
"\t\tscrolled_window.set_policy (Gtk.PolicyType.AUTOMATIC,\n"
"\t\t                            Gtk.PolicyType.AUTOMATIC);\n"
"\n"
"\t\tscrolled_window.add (textview);\n"
"\t\tscrolled_window.set_border_width (5);\n"
"\n"
"\t\tthis.add (scrolled_window);\n"
"\t}\n"
"}\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/textview.vala.page:35
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.TextBuffer.html\">Gtk."
"TextBuffer</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.TextBuffer.html\">Gtk."
"TextBuffer</link>"

#. (itstool) path: item/p
#: C/textview.vala.page:36
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.TextView.html\">Gtk."
"TextView</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.TextView.html\">Gtk."
"TextView</link>"

#. (itstool) path: item/p
#: C/textview.vala.page:38
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.WrapMode.html\">Gtk."
"WrapMode</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.WrapMode.html\">Gtk."
"WrapMode</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/togglebutton.c.page:27 C/togglebutton.js.page:22
#: C/togglebutton.py.page:23 C/togglebutton.vala.page:25
msgctxt "_"
msgid ""
"external ref='media/togglebutton.png' md5='791e062613d4f9bd5936390b0aa18448'"
msgstr ""
"external ref='media/togglebutton.png' md5='791e062613d4f9bd5936390b0aa18448'"

#. (itstool) path: info/title
#: C/togglebutton.c.page:8
msgctxt "text"
msgid "ToggleButton (C)"
msgstr "Κουμπί εναλλαγής (ToggleButton) (C)"

#. (itstool) path: info/desc
#: C/togglebutton.c.page:22 C/togglebutton.py.page:19
#: C/togglebutton.vala.page:21
msgid "A button which retains state"
msgstr "Ένα κουμπί που κρατά κατάσταση"

#. (itstool) path: page/title
#: C/togglebutton.c.page:25 C/togglebutton.js.page:21
#: C/togglebutton.py.page:22 C/togglebutton.vala.page:24
msgid "ToggleButton"
msgstr "Κουμπί εναλλαγής (ToggleButton)"

#. (itstool) path: page/p
#: C/togglebutton.c.page:28 C/togglebutton.py.page:24
#: C/togglebutton.vala.page:26
msgid "When this ToggleButton is in an active state, the spinner spins."
msgstr "Όταν αυτό το ToggleButton είναι ενεργό, ο μετρητής περιστρέφεται."

#. (itstool) path: page/code
#: C/togglebutton.c.page:30
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*This is the callback function. It is a handler function \n"
"which reacts to the signal. In this case, it will cause the \n"
"spinner to start and stop according to how many times the user \n"
"presses the button.*/\n"
"static void\n"
"button_toggled_cb (GtkWidget *button,\n"
"                   gpointer   user_data)\n"
"{\n"
"  GtkWidget *spinner = user_data;\n"
"\n"
"  if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON(button)))\n"
"          gtk_spinner_start (GTK_SPINNER (spinner));\n"
"  else {\n"
"          gtk_spinner_stop (GTK_SPINNER (spinner));\n"
"  }\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *button;\n"
"  GtkWidget *grid;\n"
"  GtkWidget *spinner;\n"
"\n"
"  /*Create a window with a title, border width and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"ToggleButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 300);\n"
"  gtk_container_set_border_width(GTK_CONTAINER(window), 30);\n"
"\n"
"  /*Create a togglebutton with a label*/\n"
"  button = gtk_toggle_button_new_with_label (\"Start/Stop\");\n"
"\n"
"  /*Create a spinner, with extra horizontal and vertical space*/\n"
"  spinner = gtk_spinner_new ();\n"
"  gtk_widget_set_hexpand (spinner, TRUE);\n"
"  gtk_widget_set_vexpand (spinner, TRUE);\n"
"\n"
"  /*Create a grid and set the row spacing, attach the togglebutton \n"
"  and spinner onto the grid and position them accordingly*/\n"
"  grid = gtk_grid_new();\n"
"  gtk_grid_set_row_homogeneous (GTK_GRID (grid), FALSE);\n"
"  gtk_grid_set_row_spacing (GTK_GRID (grid), 15);\n"
"  gtk_grid_attach (GTK_GRID (grid), spinner, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), button, 0, 1, 1, 1);\n"
"  \n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  /*Connecting the toggled signal to the callback*/\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (button), \"toggled\", \n"
"                    G_CALLBACK (button_toggled_cb), spinner);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#περιλαμβάνει &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Αυτή είναι μια συνάρτηση επανάκλησης. Είναι μια συνάρτηση χειριστή \n"
"που αντιδρά στο σήμα. Σε αυτήν την περίπτωση, θα προκαλέσει στον μετρητή \n"
"να αρχίσει και να σταματήσει σύμφωνα με τον αριθμό των φορών \n"
"που ο χρήστης πατά το κουμπί.*/\n"
"static void\n"
"button_toggled_cb (GtkWidget *button,\n"
"                   gpointer   user_data)\n"
"{\n"
"  GtkWidget *spinner = user_data;\n"
"\n"
"  if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON(button)))\n"
"          gtk_spinner_start (GTK_SPINNER (spinner));\n"
"  else {\n"
"          gtk_spinner_stop (GTK_SPINNER (spinner));\n"
"  }\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *button;\n"
"  GtkWidget *grid;\n"
"  GtkWidget *spinner;\n"
"\n"
"  /*Δημιουργία παραθύρου με τίτλο, πλάτος περιγράμματος και προεπιλεγμένο μέγεθος*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"ToggleButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 300);\n"
"  gtk_container_set_border_width(GTK_CONTAINER(window), 30);\n"
"\n"
"  /*Δημιουργία ενός διακόπτη εναλλαγής με ετικέτα*/\n"
"  button = gtk_toggle_button_new_with_label (\"Start/Stop\");\n"
"\n"
"  /*Δημιουργία μετρητή, με πρόσθετο οριζόντιο και κάθετο χώρο*/\n"
"  spinner = gtk_spinner_new ();\n"
"  gtk_widget_set_hexpand (spinner, TRUE);\n"
"  gtk_widget_set_vexpand (spinner, TRUE);\n"
"\n"
"  /*Δημιουργία ενός πλέγματος και ορισμός του διάκενου γραμμής, προσάρτηση του πλήκτρου εναλλαγής \n"
"  και μετρητή στο πλέγμα και κατάλληλη τοποθέτησή τους*/\n"
"  grid = gtk_grid_new();\n"
"  gtk_grid_set_row_homogeneous (GTK_GRID (grid), FALSE);\n"
"  gtk_grid_set_row_spacing (GTK_GRID (grid), 15);\n"
"  gtk_grid_attach (GTK_GRID (grid), spinner, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), button, 0, 1, 1, 1);\n"
"  \n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  /*Σύνδεση του εναλλασσόμενου σήματος με την επανάκληση*/\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (button), \"toggled\", \n"
"                    G_CALLBACK (button_toggled_cb), spinner);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/togglebutton.c.page:39
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkToggleButton.html"
"\">GtkTogglebutton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkToggleButton.html"
"\">GtkTogglebutton</link>"

#. (itstool) path: info/title
#: C/togglebutton.js.page:8
msgctxt "text"
msgid "ToggleButton (JavaScript)"
msgstr "Κουμπί εναλλαγής (ToggleButton) (JavaScript)"

#. (itstool) path: info/desc
#: C/togglebutton.js.page:18
msgid "Stays pressed until you click it again"
msgstr "Παραμένει πατημένο μέχρι να το πατήσετε ξανά"

#. (itstool) path: page/p
#: C/togglebutton.js.page:23
msgid ""
"A ToggleButton is like a normal <link xref=\"button.js\">Button</link>, "
"except that it stays pressed in when you click it. You can use it like an on/"
"off switch, to control things like the <link xref=\"spinner.js\">Spinner</"
"link> in this example."
msgstr ""
"Ένα κουμπί εναλλαγής (ToggleButton) είναι σαν ένα κανονικό <link xref="
"\"button.js\">κουμπί</link>, εκτός από το ότι παραμένει πατημένο όταν το "
"πατάτε. Μπορείτε να το χρησιμοποιήσετε σαν έναν διακόπτη ναι/όχι, για να "
"ελέγξετε πράγματα όπως τον <link xref=\"spinner.js\">μετρητή</link> σε αυτό "
"το παράδειγμα."

#. (itstool) path: page/p
#: C/togglebutton.js.page:24
msgid ""
"A ToggleButton's get_active method returns true if it's pressed in, and "
"false if it's not. Its set_active method is used if you want to change its "
"state without needing to click on it. When it changes state from pressed in "
"to popped out and vice-versa, it sends out the \"toggled\" signal, which you "
"can connect to a function to do something."
msgstr ""
"Μια μέθοδος get_active του ToggleButton επιστρέφει αληθές εάν πατηθεί και "
"ψευδές εάν δεν πατηθεί. Η μέθοδος του set_active χρησιμοποιείται εάν θέλετε "
"να αλλάξετε την κατάσταση του χωρίς να χρειάζεται να το πατήσετε. Όταν "
"αλλάζει η κατάσταση από πατημένο σε αναδυόμενο και αντίστροφα, στέλνει το "
"σήμα \"αλλαγμένο\", που μπορείτε να συνδέσετε με μια συνάρτηση για να κάνει "
"κάτι."

#. (itstool) path: section/code
#: C/togglebutton.js.page:41
#, no-wrap
msgid ""
"\n"
"const ToggleButtonExample = new Lang.Class({\n"
"    Name: 'ToggleButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jstogglebutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const ToggleButtonExample = new Lang.Class({\n"
"    Name: 'ToggleButton Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jstogglebutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Σύνδεση των σημάτων 'activate' και 'startup'με τις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει ένα παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/code
#: C/togglebutton.js.page:68
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 300,\n"
"            default_width: 300,\n"
"            border_width: 30,\n"
"            title: \"ToggleButton Example\"});\n"
msgstr ""
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 300,\n"
"            default_width: 300,\n"
"            border_width: 30,\n"
"            title: \"ToggleButton Example\"});\n"

#. (itstool) path: section/title
#: C/togglebutton.js.page:85
msgid "Creating the ToggleButton and other widgets"
msgstr ""
"Δημιουργία του κουμπιού εναλλαγής (ToggleButton) και άλλων γραφικών "
"στοιχείων"

#. (itstool) path: section/code
#: C/togglebutton.js.page:86
#, no-wrap
msgid ""
"\n"
"        // Create the spinner that the button stops and starts\n"
"        this._spinner = new Gtk.Spinner ({hexpand: true, vexpand: true});\n"
msgstr ""
"\n"
"        // Δημιοργία του μετρητή που το κουμπί σταματά και αρχίζει\n"
"        this._spinner = new Gtk.Spinner ({hexpand: true, vexpand: true});\n"

#. (itstool) path: section/p
#: C/togglebutton.js.page:91
msgid ""
"We want this <link xref=\"spinner.js\">Spinner</link> to expand vertically "
"and horizontally, to take up as much space as possible inside the window."
msgstr ""
"Θέλουμε αυτός ο <link xref=\"spinner.js\">μετρητής</link> να επεκταθεί "
"κάθετα και οριζόντια, για να καταλάβει όσο το δυνατό περισσότερο χώρο μέσα "
"στο παράθυρο."

#. (itstool) path: section/code
#: C/togglebutton.js.page:93
#, no-wrap
msgid ""
"\n"
"        // Create the togglebutton that starts and stops the spinner\n"
"        this._toggleButton = new Gtk.ToggleButton ({label: \"Start/Stop\"});\n"
"        this._toggleButton.connect ('toggled', Lang.bind (this, this._onToggle));\n"
msgstr ""
"\n"
"        // Δημιουργία του κουμπιού εναλλαγής που ξεκινά και σταματά τον μετρητή\n"
"        this._toggleButton = new Gtk.ToggleButton ({label: \"Start/Stop\"});\n"
"        this._toggleButton.connect ('toggled', Lang.bind (this, this._onToggle));\n"

#. (itstool) path: section/p
#: C/togglebutton.js.page:99
msgid ""
"Creating a ToggleButton is a lot like creating a normal <link xref=\"button."
"js\">Button</link>. The biggest difference is that you're handling a "
"\"toggled\" signal instead of a \"clicked\" signal. This code binds the "
"_onToggle function to that signal, so that it's called whenever our "
"ToggleButton is toggled."
msgstr ""
"Η δημιουργία ενός ToggleButton είναι παρεμφερής με τη δημιουργία ενός "
"κανονικού <link xref=\"button.js\">κουμπιού</link>. Η μεγαλύτερη διαφορά "
"είναι ότι χειρίζεστε ένα \"αλλαγμένο\" σήμα αντί για ένα \"πατημένο\" σήμα. "
"Αυτός ο κώδικας συνδέει τη συνάρτηση _onToggle με αυτό το σήμα, έτσι ώστε "
"καλείται όποτε το ToggleButton μας εναλλάσσεται."

#. (itstool) path: section/code
#: C/togglebutton.js.page:101
#, no-wrap
msgid ""
"\n"
"        // Create a grid and put everything in it\n"
"        this._grid = new Gtk.Grid ({\n"
"            row_homogeneous: false,\n"
"            row_spacing: 15});\n"
"        this._grid.attach (this._spinner, 0, 0, 1, 1);\n"
"        this._grid.attach (this._toggleButton, 0, 1, 1, 1);\n"
msgstr ""
"\n"
"        // Δημιουργία ενός πλέγματος και τοποθέτηση όλων μέσα του\n"
"        this._grid = new Gtk.Grid ({\n"
"            row_homogeneous: false,\n"
"            row_spacing: 15});\n"
"        this._grid.attach (this._spinner, 0, 0, 1, 1);\n"
"        this._grid.attach (this._toggleButton, 0, 1, 1, 1);\n"

#. (itstool) path: section/p
#: C/togglebutton.js.page:109
msgid ""
"Here we create a simple <link xref=\"grid.js\">Grid</link> to organize "
"everything in, then attach the Spinner and ToggleButton to it."
msgstr ""
"Εδώ δημιουργούμε ένα απλό <link xref=\"grid.js\">πλέγμα</link> για να "
"οργανώσουμε μέσα του όλα, έπειτα επισυνάπτουμε τον μετρητή και το "
"ToggleButton σε αυτό."

#. (itstool) path: section/code
#: C/togglebutton.js.page:111
#, no-wrap
msgid ""
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""
"\n"
"        // Προσθήκη του πλέγματος στο παράθυρο\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών  γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"

#. (itstool) path: section/p
#: C/togglebutton.js.page:119
msgid ""
"Now we add the Grid to the Window, and tell the Window to show itself and "
"its child widgets when the application is started."
msgstr ""
"Τώρα προσθέτουμε το πλέγμα στο παράθυρο και λέμε στο παράθυρο να εμφανίσει "
"τον εαυτόν του και τα θυγατρικά γραφικά στοιχεία όταν η εφαρμογή ξεκινά."

#. (itstool) path: section/title
#: C/togglebutton.js.page:123
msgid "Making something happen when the ToggleButton is toggled"
msgstr "Κάνοντας να συμβεί κάτι όταν το ToggleButton εναλλάσσεται"

#. (itstool) path: section/code
#: C/togglebutton.js.page:125
#, no-wrap
msgid ""
"\n"
"    _onToggle: function() {\n"
"\n"
"        // Start or stop the spinner\n"
"        if (this._toggleButton.get_active ())\n"
"            this._spinner.start ();\n"
"        else this._spinner.stop ();\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _onToggle: function() {\n"
"\n"
"        // Έναρξη ή παύση του μετρητή\n"
"        if (this._toggleButton.get_active ())\n"
"            this._spinner.start ();\n"
"        else this._spinner.stop ();\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/togglebutton.js.page:137
msgid ""
"Whenever someone toggles the button, this function checks what its state is "
"afterwards using get_active and starts or stops the spinner accordingly. We "
"want it to spin only while the button is pressed in, so if get_active "
"returns true we start the spinner. Otherwise, we tell it to stop."
msgstr ""
"Όποτε κάποιος εναλλάσσει το κουμπί, αυτή η συνάρτηση ελέγχει ποια είναι η "
"κατάστασή του κατόπιν χρησιμοποιώντας get_active και ξεκινά ή σταματά τον "
"μετρητή ανάλογα. Το θέλουμε μόνο να περιστραφεί ενώ το κουμπί είναι "
"πατημένο, έτσι εάν η get_active επιστρέφει αληθές αρχίζουμε τον μετρητή. "
"Αλλιώς, του λέμε να σταματήσει."

#. (itstool) path: section/code
#: C/togglebutton.js.page:139
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new ToggleButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new ToggleButtonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/code
#: C/togglebutton.js.page:149
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ToggleButtonExample = new Lang.Class({\n"
"    Name: 'ToggleButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jstogglebutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 300,\n"
"            default_width: 300,\n"
"            border_width: 30,\n"
"            title: \"ToggleButton Example\"});\n"
"\n"
"        // Create the spinner that the button stops and starts\n"
"        this._spinner = new Gtk.Spinner ({hexpand: true, vexpand: true});\n"
"\n"
"        // Create the togglebutton that starts and stops the spinner\n"
"        this._toggleButton = new Gtk.ToggleButton ({label: \"Start/Stop\"});\n"
"        this._toggleButton.connect ('toggled', Lang.bind (this, this._onToggle));\n"
"\n"
"        // Create a grid and put everything in it\n"
"        this._grid = new Gtk.Grid ({\n"
"            row_homogeneous: false,\n"
"            row_spacing: 15});\n"
"        this._grid.attach (this._spinner, 0, 0, 1, 1);\n"
"        this._grid.attach (this._toggleButton, 0, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onToggle: function() {\n"
"\n"
"        // Start or stop the spinner\n"
"        if (this._toggleButton.get_active ())\n"
"            this._spinner.start ();\n"
"        else this._spinner.stop ();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ToggleButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ToggleButtonExample = new Lang.Class({\n"
"    Name: 'ToggleButton Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jstogglebutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Σύνδεση των σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 300,\n"
"            default_width: 300,\n"
"            border_width: 30,\n"
"            title: \"ToggleButton Example\"});\n"
"\n"
"        // Δημιουργία του μετρητή που το κουμπί σταματά και ξεκινά\n"
"        this._spinner = new Gtk.Spinner ({hexpand: true, vexpand: true});\n"
"\n"
"        // Δημιουργία του κουμπιού εναλλαγής που ξεκινά και σταματά τον μετρητή\n"
"        this._toggleButton = new Gtk.ToggleButton ({label: \"Start/Stop\"});\n"
"        this._toggleButton.connect ('toggled', Lang.bind (this, this._onToggle));\n"
"\n"
"        // Δημιουργία ενός πλέγματος και τοποθέτηση όλων μέσα του\n"
"        this._grid = new Gtk.Grid ({\n"
"            row_homogeneous: false,\n"
"            row_spacing: 15});\n"
"        this._grid.attach (this._spinner, 0, 0, 1, 1);\n"
"        this._grid.attach (this._toggleButton, 0, 1, 1, 1);\n"
"\n"
"        // Προσθήκη του πλέγματος στο παράθυρο\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onToggle: function() {\n"
"\n"
"        // Έναρξη ή παύση του μετρητή\n"
"        if (this._toggleButton.get_active ())\n"
"            this._spinner.start ();\n"
"        else this._spinner.stop ();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new ToggleButtonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/togglebutton.js.page:159
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ToggleButton."
"html\">Gtk.ToggleButton</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ToggleButton."
"html\">Gtk.ToggleButton</link>"

#. (itstool) path: info/title
#: C/togglebutton.py.page:8
msgctxt "text"
msgid "ToggleButton (Python)"
msgstr "Κουμπί εναλλαγής (ToggleButton) (Python)"

#. (itstool) path: section/code
#: C/togglebutton.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(\n"
"            self, title=\"ToggleButton Example\", application=app)\n"
"        self.set_default_size(300, 300)\n"
"        self.set_border_width(30)\n"
"\n"
"        # a spinner animation\n"
"        self.spinner = Gtk.Spinner()\n"
"        # with extra horizontal space\n"
"        self.spinner.set_hexpand(True)\n"
"        # with extra vertical space\n"
"        self.spinner.set_vexpand(True)\n"
"\n"
"        # a togglebutton\n"
"        button = Gtk.ToggleButton.new_with_label(\"Start/Stop\")\n"
"        # connect the signal \"toggled\" emitted by the togglebutton\n"
"        # when its state is changed to the callback function toggled_cb\n"
"        button.connect(\"toggled\", self.toggled_cb)\n"
"\n"
"        # a grid to allocate the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.set_row_homogeneous(False)\n"
"        grid.set_row_spacing(15)\n"
"        grid.attach(self.spinner, 0, 0, 1, 1)\n"
"        grid.attach(button, 0, 1, 1, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # callback function for the signal \"toggled\"\n"
"    def toggled_cb(self, button):\n"
"        # if the togglebutton is active, start the spinner\n"
"        if button.get_active():\n"
"            self.spinner.start()\n"
"        # else, stop it\n"
"        else:\n"
"            self.spinner.stop()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(\n"
"            self, title=\"ToggleButton Example\", application=app)\n"
"        self.set_default_size(300, 300)\n"
"        self.set_border_width(30)\n"
"\n"
"        # a spinner animation\n"
"        self.spinner = Gtk.Spinner()\n"
"        # with extra horizontal space\n"
"        self.spinner.set_hexpand(True)\n"
"        # with extra vertical space\n"
"        self.spinner.set_vexpand(True)\n"
"\n"
"        # a togglebutton\n"
"        button = Gtk.ToggleButton.new_with_label(\"Start/Stop\")\n"
"        # connect the signal \"toggled\" emitted by the togglebutton\n"
"        # when its state is changed to the callback function toggled_cb\n"
"        button.connect(\"toggled\", self.toggled_cb)\n"
"\n"
"        # a grid to allocate the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.set_row_homogeneous(False)\n"
"        grid.set_row_spacing(15)\n"
"        grid.attach(self.spinner, 0, 0, 1, 1)\n"
"        grid.attach(button, 0, 1, 1, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # callback function for the signal \"toggled\"\n"
"    def toggled_cb(self, button):\n"
"        # if the togglebutton is active, start the spinner\n"
"        if button.get_active():\n"
"            self.spinner.start()\n"
"        # else, stop it\n"
"        else:\n"
"            self.spinner.stop()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/togglebutton.py.page:36
msgid "Useful methods for a ToggleButton widget"
msgstr ""
"Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο κουμπιού εναλλαγής (ToggleButton)"

#. (itstool) path: section/p
#: C/togglebutton.py.page:37
msgid ""
"In line 22 the signal <code>\"toggled\"</code> is connected to the callback "
"function <code>toggled_cb()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"Στη γραμμή 22 το σήμα <code>\"toggled\"</code> συνδέεται με τη συνάρτηση "
"επανάκλησης <code>toggled_cb()</code> χρησιμοποιώντας <code><var>widget</"
"var>.connect(<var>signal</var>, <var>callback function</var>)</code>. Δείτε "
"<link xref=\"signals-callbacks.py\"/> για μια πιο λεπτομερή εξήγηση."

#. (itstool) path: item/p
#: C/togglebutton.py.page:45 C/toolbar.py.page:60
#: C/toolbar_builder.py.page:198
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkWidget.html"
"\">GtkWidget</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkWidget.html"
"\">GtkWidget</link>"

#. (itstool) path: info/title
#: C/togglebutton.vala.page:8
msgctxt "text"
msgid "ToggleButton (Vala)"
msgstr "Κουμπί εναλλαγής (ToggleButton) (Vala)"

#. (itstool) path: page/code
#: C/togglebutton.vala.page:28
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Spinner spinner;\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"ToggleButton Example\");\n"
"\n"
"\t\tthis.set_default_size (300, 300);\n"
"\t\tthis.border_width = 30;\n"
"\n"
"\t\t/*Spinner*/\n"
"\t\tspinner = new Gtk.Spinner ();\n"
"\t\tspinner.set_hexpand (true);\n"
"\t\tspinner.set_vexpand (true);\n"
"\n"
"\t\t/*ToggleButton*/\n"
"\t\tvar togglebutton = new Gtk.ToggleButton.with_label (\"Start/Stop\");\n"
"\t\ttogglebutton.toggled.connect (toggled_cb);\n"
"\n"
"\t\t/*Grid*/\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.set_row_homogeneous (false);\n"
"\t\tgrid.set_row_spacing (15);\n"
"\t\tgrid.attach (spinner, 0, 0, 1, 1);\n"
"\t\tgrid.attach (togglebutton, 0, 1, 1, 1);\n"
"\n"
"\t\tthis.add (grid);\n"
"\t}\n"
"\n"
"\tvoid toggled_cb (Gtk.ToggleButton button) {\n"
"\t\tif (button.get_active()) {\n"
"\t\t\tspinner.start ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tspinner.stop ();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t//Show all the things\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.spinner\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Spinner spinner;\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"ToggleButton Example\");\n"
"\n"
"\t\tthis.set_default_size (300, 300);\n"
"\t\tthis.border_width = 30;\n"
"\n"
"\t\t/*Spinner*/\n"
"\t\tspinner = new Gtk.Spinner ();\n"
"\t\tspinner.set_hexpand (true);\n"
"\t\tspinner.set_vexpand (true);\n"
"\n"
"\t\t/*ToggleButton*/\n"
"\t\tvar togglebutton = new Gtk.ToggleButton.with_label (\"Start/Stop\");\n"
"\t\ttogglebutton.toggled.connect (toggled_cb);\n"
"\n"
"\t\t/*Grid*/\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.set_row_homogeneous (false);\n"
"\t\tgrid.set_row_spacing (15);\n"
"\t\tgrid.attach (spinner, 0, 0, 1, 1);\n"
"\t\tgrid.attach (togglebutton, 0, 1, 1, 1);\n"
"\n"
"\t\tthis.add (grid);\n"
"\t}\n"
"\n"
"\tvoid toggled_cb (Gtk.ToggleButton button) {\n"
"\t\tif (button.get_active()) {\n"
"\t\t\tspinner.start ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tspinner.stop ();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t//Show all the things\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.spinner\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/togglebutton.vala.page:33
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ToggleButton.html\">Gtk."
"ToggleButton</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ToggleButton.html\">Gtk."
"ToggleButton</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar.c.page:25 C/toolbar.js.page:22 C/toolbar.py.page:25
#: C/toolbar.vala.page:24 C/toolbar_builder.py.page:38
#: C/toolbar_builder.vala.page:25
msgctxt "_"
msgid "external ref='media/toolbar.png' md5='f0350855eedf6343952b72d6d906f738'"
msgstr ""
"external ref='media/toolbar.png' md5='f0350855eedf6343952b72d6d906f738'"

#. (itstool) path: info/title
#: C/toolbar.c.page:8
msgctxt "text"
msgid "Toolbar (C)"
msgstr "Εργαλειοθήκη (C)"

#. (itstool) path: info/desc
#: C/toolbar.c.page:20 C/toolbar.vala.page:19 C/toolbar_builder.vala.page:20
msgid "A bar of buttons"
msgstr "Γραμμή κουμπιών"

#. (itstool) path: page/title
#: C/toolbar.c.page:23 C/toolbar.js.page:21 C/toolbar.py.page:23
#: C/toolbar.vala.page:22
msgid "Toolbar"
msgstr "Εργαλειοθήκη"

#. (itstool) path: page/p
#: C/toolbar.c.page:26 C/toolbar.js.page:23 C/toolbar.vala.page:25
msgid ""
"Toolbar can contain either text or stock icons. In this sample we use stock "
"icons. This example has fullscreen functionality."
msgstr ""
"Η εργαλειοθήκη μπορεί να περιέχει είτε κείμενο ή εικονίδια παρακαταθήκης. Σε "
"αυτό το παράδειγμα χρησιμοποιούμε εικονίδια παρακαταθήκης. Αυτό το "
"παράδειγμα έχει λειτουργικότητα πλήρους οθόνης."

#. (itstool) path: page/p
#: C/toolbar.c.page:27
msgid ""
"This example uses SimpleActions (window and app). App actions can easily be "
"added to the app menu."
msgstr ""
"Αυτό το παράδειγμα χρησιμοποιεί SimpleActions (παράθυρο και εφαρμογή). Οι "
"ενέργειες της εφαρμογής μπορούν εύκολα να προστεθούν στο μενού της εφαρμογής."

#. (itstool) path: page/code
#: C/toolbar.c.page:29
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"/* Declare these two Toolbuttons, as they will be used in both the fullscreen\n"
" * action callback as well as the activate function.\n"
" */\n"
"GtkToolItem *fullscreen_button;\n"
"GtkToolItem *leavefullscreen_button;\n"
"\n"
"\n"
"\n"
"/* Callback function for the undo action */\n"
"static void\n"
"undo_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"Undo\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the fullscreen action */\n"
"static void\n"
"fullscreen_callback (GSimpleAction *simple,\n"
"                     GVariant      *parameter,\n"
"                     gpointer       user_data)\n"
"{\n"
"  GdkWindow *window = gtk_widget_get_window (GTK_WIDGET (user_data));\n"
"\n"
"  GdkWindowState current_state = gdk_window_get_state (window);\n"
"\n"
"  /* If the window is currently in fullscreen mode */\n"
"  if ( (current_state &amp; GDK_WINDOW_STATE_FULLSCREEN) != 0)\n"
"    {\n"
"      /* Minimize the window and change to the fullscreen button */\n"
"      gdk_window_unfullscreen (window);\n"
"      gtk_widget_hide (GTK_WIDGET(leavefullscreen_button));\n"
"      gtk_widget_show (GTK_WIDGET(fullscreen_button));\n"
"    }\n"
"  else\n"
"    {\n"
"      /* Maximize the window, and change to the unfullscreen button */\n"
"      gdk_window_fullscreen (window);\n"
"      gtk_widget_hide (GTK_WIDGET (fullscreen_button));\n"
"      gtk_widget_show (GTK_WIDGET (leavefullscreen_button));\n"
"    }\n"
"}\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Initialize variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *grid;\n"
"  GtkWidget *toolbar;\n"
"\n"
"  GtkToolItem *new_button;\n"
"  GtkToolItem *open_button;\n"
"  GtkToolItem *undo_button;\n"
"\n"
"  GtkStyleContext *style_context;\n"
"\n"
"  GSimpleAction *undo_action;\n"
"  GSimpleAction *fullscreen_action;\n"
"  GSimpleAction *leavefullscreen_action;\n"
"\n"
"  /* Create a window with a title and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Toolbar Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 400, 200);\n"
"\n"
"  /* Here we begin to create the toolbar */\n"
"  toolbar = gtk_toolbar_new ();\n"
"  /* Set the toolbar to be the primary toolbar of the application */\n"
"  style_context = gtk_widget_get_style_context (toolbar);\n"
"  gtk_style_context_add_class (style_context, GTK_STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"  /* Create a button for the \"new\" action, with a stock image */\n"
"  new_button = gtk_tool_button_new_from_stock (GTK_STOCK_NEW);\n"
"  /* Show the \"new\" button's label */\n"
"  gtk_tool_item_set_is_important (new_button, TRUE);\n"
"  /* Insert the button in the desired position within the toolbar */\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), new_button, 0);\n"
"  /* Show the button */\n"
"  gtk_widget_show (GTK_WIDGET (new_button));\n"
"  /* Set the action name for the \"new\" action. We use \"app.new\" to\n"
"   * indicate that the action controls the application.\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (new_button), \"app.new\");\n"
"\n"
"  /* Repeat the same steps for the \"open\" action */\n"
"  open_button = gtk_tool_button_new_from_stock (GTK_STOCK_OPEN);\n"
"  gtk_tool_item_set_is_important (open_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), open_button, 1);\n"
"  gtk_widget_show (GTK_WIDGET (open_button));\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (open_button), \"app.open\");\n"
"\n"
"  /* Repeat the same steps for the \"undo\" action */\n"
"  undo_button = gtk_tool_button_new_from_stock (GTK_STOCK_UNDO);\n"
"  gtk_tool_item_set_is_important (undo_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), undo_button, 2);\n"
"  gtk_widget_show (GTK_WIDGET (undo_button));\n"
"  /* In this case, we use \"win.undo\" to indicate that\n"
"   * the action controls only the window\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (undo_button), \"win.undo\");\n"
"\n"
"  /* Repeat the same steps for the \"fullscreen\" action */\n"
"  fullscreen_button = gtk_tool_button_new_from_stock (GTK_STOCK_FULLSCREEN);\n"
"  gtk_tool_item_set_is_important (fullscreen_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), fullscreen_button, 3);\n"
"  gtk_widget_show (GTK_WIDGET (fullscreen_button));\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (fullscreen_button),\n"
"                                  \"win.fullscreen\");\n"
"\n"
"  /*Repeat the same steps for the \"leavefullscreen\" action */\n"
"  leavefullscreen_button = gtk_tool_button_new_from_stock (GTK_STOCK_LEAVE_FULLSCREEN);\n"
"  gtk_tool_item_set_is_important (leavefullscreen_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), leavefullscreen_button, 3);\n"
"  /* The only difference here is that we don't show the leavefullscreen button,\n"
"   * as it will later replace the fullscreen button.\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (leavefullscreen_button),\n"
"                                  \"win.leavefullscreen\");\n"
"\n"
"  /* Once we've created the bare-bones of the toolbar, we make\n"
"   * sure it has enough horizontal space.\n"
"   */\n"
"  gtk_widget_set_hexpand (toolbar, TRUE);\n"
"  gtk_widget_show (toolbar);\n"
"\n"
"  /* Attach the toolbar to the grid and add it to the overall window */\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_attach (GTK_GRID (grid), toolbar, 0, 0, 1, 1);\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"  gtk_widget_show (GTK_WIDGET (grid));\n"
"\n"
"  /* Use the action names to create the actions that control the window, and\n"
"   * connect them to the appropriate callbackfunctions.\n"
"   */\n"
"  undo_action = g_simple_action_new (\"undo\", NULL);\n"
"  g_signal_connect (undo_action, \"activate\", G_CALLBACK (undo_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (undo_action));\n"
"\n"
"  fullscreen_action = g_simple_action_new (\"fullscreen\", NULL);\n"
"  g_signal_connect (fullscreen_action, \"activate\", G_CALLBACK (fullscreen_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (fullscreen_action));\n"
"\n"
"  leavefullscreen_action = g_simple_action_new (\"leavefullscreen\", NULL);\n"
"  g_signal_connect (leavefullscreen_action, \"activate\", G_CALLBACK (fullscreen_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (leavefullscreen_action));\n"
"\n"
"  gtk_widget_show (window);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the new action */\n"
"static void\n"
"new_callback (GSimpleAction *simple,\n"
"              GVariant      *parameter,\n"
"              gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"New\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the open action */\n"
"static void\n"
"open_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"Open\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* In this function, we create the actions in which control the window, and\n"
" * connect their signals to the appropriate callback function.\n"
" */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GSimpleAction *new_action;\n"
"  GSimpleAction *open_action;\n"
"\n"
"  new_action = g_simple_action_new (\"new\", NULL);\n"
"  g_signal_connect (new_action, \"activate\", G_CALLBACK (new_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (new_action));\n"
"\n"
"  open_action = g_simple_action_new (\"open\", NULL);\n"
"  g_signal_connect (open_action, \"activate\", G_CALLBACK (open_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (open_action));\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the application */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"/* Δήλωση αυτών των δύο κουμπιών εργαλείων, καθώς θα χρησιμοποιηθούν και στην\n"
" * ενέργεια επανάκλησης πλήρους οθόνης καθώς και στη συνάρτηση ενεργοποίησης.\n"
" */\n"
"GtkToolItem *fullscreen_button;\n"
"GtkToolItem *leavefullscreen_button;\n"
"\n"
"\n"
"\n"
"/* Η συνάρτηση ανάκλησης για την ενέργεια της αναίρεσης */\n"
"static void\n"
"undo_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"Undo\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Η συνάρτηση επανάκλησης για την ενέργεια πλήρους οθόνης */\n"
"static void\n"
"fullscreen_callback (GSimpleAction *simple,\n"
"                     GVariant      *parameter,\n"
"                     gpointer       user_data)\n"
"{\n"
"  GdkWindow *window = gtk_widget_get_window (GTK_WIDGET (user_data));\n"
"\n"
"  GdkWindowState current_state = gdk_window_get_state (window);\n"
"\n"
"  /* Αν το παράθυρο είναι προς το παρόν σε κατάσταση πλήρους οθόνης */\n"
"  if ( (current_state &amp; GDK_WINDOW_STATE_FULLSCREEN) != 0)\n"
"    {\n"
"      /* Ελαχιστοποίηση του παραθύρου και αλλαγή στο κουμπί πλήρους οθόνης */\n"
"      gdk_window_unfullscreen (window);\n"
"      gtk_widget_hide (GTK_WIDGET(leavefullscreen_button));\n"
"      gtk_widget_show (GTK_WIDGET(fullscreen_button));\n"
"    }\n"
"  else\n"
"    {\n"
"      /* Μεγιστοποίηση του παραθύρου, και αλλαγή σε κουμπί μη πλήρους οθόνης */\n"
"      gdk_window_fullscreen (window);\n"
"      gtk_widget_hide (GTK_WIDGET (fullscreen_button));\n"
"      gtk_widget_show (GTK_WIDGET (leavefullscreen_button));\n"
"    }\n"
"}\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Αρχικοποίηση μεταβλητών */\n"
"  GtkWidget *window;\n"
"  GtkWidget *grid;\n"
"  GtkWidget *toolbar;\n"
"\n"
"  GtkToolItem *new_button;\n"
"  GtkToolItem *open_button;\n"
"  GtkToolItem *undo_button;\n"
"\n"
"  GtkStyleContext *style_context;\n"
"\n"
"  GSimpleAction *undo_action;\n"
"  GSimpleAction *fullscreen_action;\n"
"  GSimpleAction *leavefullscreen_action;\n"
"\n"
"  /* Δημιουργία παραθύρου με τίτλο και προεπιλεγμένο μέγεθος */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Toolbar Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 400, 200);\n"
"\n"
"  /* Εδώ αρχίζει η δημιουργία της εργαλειοθήκης */\n"
"  toolbar = gtk_toolbar_new ();\n"
"  /* Ορισμός της εργαλειοθήκης να είναι η πρωτογενής εργαλειοθήκη της εφαρμογής */\n"
"  style_context = gtk_widget_get_style_context (toolbar);\n"
"  gtk_style_context_add_class (style_context, GTK_STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"  /* Δημιουργία κουμπιού για την ενέργεια \"new\", με μια έτοιμη εικόνα */\n"
"  new_button = gtk_tool_button_new_from_stock (GTK_STOCK_NEW);\n"
"  /* Εμφάνιση της ετικέτας του κουμπιού \"new\" */\n"
"  gtk_tool_item_set_is_important (new_button, TRUE);\n"
"  /* Εισαγωγή του κουμπιού στην επιθυμητή θέση μες την εργαλειοθήκη */\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), new_button, 0);\n"
"  /* Εμφάνιση του κουμπιού */\n"
"  gtk_widget_show (GTK_WIDGET (new_button));\n"
"  /* Ορισμός του ονόματος ενέργειας για την ενέργεια \"new\". Χρήση του \"app.new\"\n"
"   * για να δείξει ότι η ενέργεια ελέγχει την εφαρμογή.\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (new_button), \"app.new\");\n"
"\n"
"  /* Επανάληψη των ίδιων βημάτων για την ενέργεια \"open\" */\n"
"  open_button = gtk_tool_button_new_from_stock (GTK_STOCK_OPEN);\n"
"  gtk_tool_item_set_is_important (open_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), open_button, 1);\n"
"  gtk_widget_show (GTK_WIDGET (open_button));\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (open_button), \"app.open\");\n"
"\n"
"  /* Επανάληψη των ίδιων βημάτων για την ενέργεια \"undo\" */\n"
"  undo_button = gtk_tool_button_new_from_stock (GTK_STOCK_UNDO);\n"
"  gtk_tool_item_set_is_important (undo_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), undo_button, 2);\n"
"  gtk_widget_show (GTK_WIDGET (undo_button));\n"
"  /* Σε αυτήν την περίπτωση, χρησιμοποιείται \"win.undo\" για να δείξει ότι\n"
"   * η ενέργεια ελέγχει μόνο το παράθυρο\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (undo_button), \"win.undo\");\n"
"\n"
"  /* Επανάληψη των ίδιων βημάτων για την ενέργεια \"fullscreen\" */\n"
"  fullscreen_button = gtk_tool_button_new_from_stock (GTK_STOCK_FULLSCREEN);\n"
"  gtk_tool_item_set_is_important (fullscreen_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), fullscreen_button, 3);\n"
"  gtk_widget_show (GTK_WIDGET (fullscreen_button));\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (fullscreen_button),\n"
"                                  \"win.fullscreen\");\n"
"\n"
"  /*Επανάληψη των ίδιων βημάτων για την ενέργεια \"leavefullscreen\" */\n"
"  leavefullscreen_button = gtk_tool_button_new_from_stock (GTK_STOCK_LEAVE_FULLSCREEN);\n"
"  gtk_tool_item_set_is_important (leavefullscreen_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), leavefullscreen_button, 3);\n"
"  /* Η μόνη διαφορά εδώ είναι ότι δεν εμφανίζουμε το κουμπί εξόδου από την πλήρη οθόνη,\n"
"   * επειδή θα αντικαταστήσει αργότερα το κουμπί πλήρους οθόνης.\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (leavefullscreen_button),\n"
"                                  \"win.leavefullscreen\");\n"
"\n"
"  /* Μόλις δημιουργήσουμε τον σκελετό της εργαλειοθήκης, εξασφαλίζουμε ότι\n"
"   * έχει αρκετό οριζόντιο χώρο.\n"
"   */\n"
"  gtk_widget_set_hexpand (toolbar, TRUE);\n"
"  gtk_widget_show (toolbar);\n"
"\n"
"  /* Προσάρτηση της εργαλειοθήκης στο πλέγμα και προσθήκη της στο συνολικό παράθυρο */\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_attach (GTK_GRID (grid), toolbar, 0, 0, 1, 1);\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"  gtk_widget_show (GTK_WIDGET (grid));\n"
"\n"
"  /* Χρησιμοποιήστε τα ονόματα ενεργειών για τη δημιουργία των ενεργειών που ελέγουν\n"
"   * το παράθυρο και σύνδεσή τους με τις κατάλληλες συναρτήσεις επανάκλησης.\n"
"   */\n"
"  undo_action = g_simple_action_new (\"undo\", NULL);\n"
"  g_signal_connect (undo_action, \"activate\", G_CALLBACK (undo_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (undo_action));\n"
"\n"
"  fullscreen_action = g_simple_action_new (\"fullscreen\", NULL);\n"
"  g_signal_connect (fullscreen_action, \"activate\", G_CALLBACK (fullscreen_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (fullscreen_action));\n"
"\n"
"  leavefullscreen_action = g_simple_action_new (\"leavefullscreen\", NULL);\n"
"  g_signal_connect (leavefullscreen_action, \"activate\", G_CALLBACK (fullscreen_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (leavefullscreen_action));\n"
"\n"
"  gtk_widget_show (window);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Η συνάρτηση επανάκλησης για την νέα ενέργεια */\n"
"static void\n"
"new_callback (GSimpleAction *simple,\n"
"              GVariant      *parameter,\n"
"              gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"New\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Η συνάρτηση επανάκλησης για την ενέργεια άνοιγμα */\n"
"static void\n"
"open_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"Open\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Σε αυτήν την συνάρτηση, δημιουργούμε τις ενέργειες που ελέγχουν το παράθυρο\n"
" * και συνδέουν τα σήματά τους με την κατάλληλη συνάρτηση επανάκλησης.\n"
" */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GSimpleAction *new_action;\n"
"  GSimpleAction *open_action;\n"
"\n"
"  new_action = g_simple_action_new (\"new\", NULL);\n"
"  g_signal_connect (new_action, \"activate\", G_CALLBACK (new_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (new_action));\n"
"\n"
"  open_action = g_simple_action_new (\"open\", NULL);\n"
"  g_signal_connect (open_action, \"activate\", G_CALLBACK (open_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (open_action));\n"
"}\n"
"\n"
"\n"
"\n"
"/* Η συνάρτηση έναρξης για την εφαρμογή */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/toolbar.c.page:35 C/tooltip.c.page:39 C/tooltip.py.page:60
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkToolbar.html"
"\">GtkToolbar</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkToolbar.html"
"\">GtkToolbar</link>"

#. (itstool) path: item/p
#: C/toolbar.c.page:36
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkToolButton.html"
"\">GtkToolbutton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkToolButton.html"
"\">GtkToolbutton</link>"

#. (itstool) path: info/title
#: C/toolbar.js.page:8
msgctxt "text"
msgid "Toolbar (JavaScript)"
msgstr "Εργαλειοθήκη (JavaScript)"

#. (itstool) path: info/desc
#: C/toolbar.js.page:18
msgid "A bar of tools"
msgstr "Γραμμή εργαλείων"

#. (itstool) path: page/p
#: C/toolbar.js.page:24 C/toolbar.vala.page:26
msgid ""
"This example uses SimpleActions (window and app). App actions can easily be "
"added the the app menu."
msgstr ""
"Αυτό το παράδειγμα χρησιμοποιεί SimpleActions (παράθυρο και εφαρμογή). Οι "
"ενέργειες της εφαρμογής μπορούν εύκολα να προστεθούν στο μενού της εφαρμογής."

#. (itstool) path: page/code
#: C/toolbar.js.page:26
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gdk = imports.gi.Gdk;\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.myapp',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"       //connect to 'activate' and 'startup' signals to the callback functions\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI (in this case it's just the ApplicationWindow\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"Toolbar Example\",\n"
"                                                   default_height: 200,\n"
"                                                   default_width: 400 });\n"
"\n"
"        this._grid = new Gtk.Grid();\n"
"        this._window.add(this._grid);\n"
"        this._grid.show();\n"
"\n"
"        this._createToolbar();\n"
"        this._toolbar.set_hexpand(true);\n"
"        this._grid.attach(this._toolbar, 0, 0, 1, 1);\n"
"\n"
"        //show the  toolbar and window\n"
"        this._toolbar.show();\n"
"        this._window.show();\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    //callback function for 'startup' signal\n"
"    _onStartup: function() {\n"
"        this._initMenus();\n"
"        this._buildUI();\n"
"    },\n"
"\n"
"    //create the toolbar, its toolbuttons and their actions\n"
"    _createToolbar: function() {\n"
"\n"
"        this._toolbar = new Gtk.Toolbar();\n"
"        this._toolbar.get_style_context().add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"        //create the \"New\" ToolButton and its SimpleAction.\n"
"        //Using actions allows you to add them to the app menu\n"
"        //without duplicating code.\n"
"        let newAction = new Gio.SimpleAction({ name: 'new'});\n"
"        newAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._newCB();\n"
"            }));\n"
"        this.application.add_action(newAction);//note: this action is added to the app\n"
"\n"
"        this._newButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_NEW);\n"
"        this._newButton.is_important = true;\n"
"        this._toolbar.add(this._newButton);\n"
"        this._newButton.show();\n"
"        this._newButton.action_name = \"app.new\";\n"
"\n"
"        //create the \"Open\" ToolButton and its SimpleAction\n"
"        let openAction = new Gio.SimpleAction({ name: 'open'});\n"
"        openAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._openCB();\n"
"            }));\n"
"        this.application.add_action(openAction);\n"
"\n"
"        this._openButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_OPEN);\n"
"        this._openButton.is_important = true;\n"
"        this._toolbar.add(this._openButton);\n"
"        this._openButton.show();\n"
"        this._openButton.action_name = \"app.open\";\n"
"\n"
"        //create the \"Undo\" ToolButton and its SimpleAction\n"
"        let undoAction = new Gio.SimpleAction({ name: 'undo'});\n"
"        undoAction.connect('activate', Lang.bind (this,\n"
"            function() {\n"
"                this._undoCB();\n"
"            }));\n"
"        this._window.add_action(undoAction);//note this action is added to the window\n"
"\n"
"        this._undoButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_UNDO);\n"
"        this._undoButton.is_important = true;\n"
"        this._toolbar.add(this._undoButton);\n"
"        this._undoButton.show();\n"
"        this._undoButton.action_name = \"win.undo\";\n"
"\n"
"        //create the \"Fullscreen\" ToolButton and its SimpleAction\n"
"        let fullscreenToggleAction = new Gio.SimpleAction ({ name: 'fullscreenToggle' });\n"
"        fullscreenToggleAction.connect ('activate', Lang.bind (this,\n"
"            function () {\n"
"                this._fullscreenToggleCB();\n"
"            }));\n"
"        this._window.add_action(fullscreenToggleAction);\n"
"\n"
"        this._fullscreenButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_FULLSCREEN);\n"
"        this._fullscreenButton.is_important = true;\n"
"        this._toolbar.add(this._fullscreenButton);\n"
"        this._fullscreenButton.show();\n"
"        this._fullscreenButton.action_name = \"win.fullscreenToggle\";\n"
"\n"
"        //create the \"leaveFullscreen\" ToolButton, and set the action name to \"win.fullscreenToggle\"\n"
"        this._leaveFullscreenButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_LEAVE_FULLSCREEN);\n"
"        this._leaveFullscreenButton.is_important = true;\n"
"        this._toolbar.add(this._leaveFullscreenButton);\n"
"        this._leaveFullscreenButton.action_name = \"win.fullscreenToggle\";\n"
"    },\n"
"\n"
"    _initMenus: function () {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"New\", 'app.new');\n"
"        menu.append(\"Open\", 'app.open');\n"
"        menu.append(\"Quit\", 'app.quit');\n"
"\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        let quitAction = new Gio.SimpleAction({name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"    _newCB: function() {\n"
"        print(\"You clicked 'New'.\");\n"
"    },\n"
"\n"
"    _openCB: function() {\n"
"        print(\"You clicked 'Open'.\");\n"
"    },\n"
"\n"
"    _undoCB:function () {\n"
"        print (\"You clicked 'Undo'.\");\n"
"    },\n"
"\n"
"    _fullscreenToggleCB: function() {\n"
"        if ((this._window.get_window().get_state() &amp; Gdk.WindowState.FULLSCREEN) != 0 ) {\n"
"              this._window.unfullscreen();\n"
"              this._leaveFullscreenButton.hide();\n"
"              this._fullscreenButton.show();\n"
"        }\n"
"        else {\n"
"             this._window.fullscreen();\n"
"             this._fullscreenButton.hide();\n"
"             this._leaveFullscreenButton.show();\n"
"        }\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application();\n"
"app.application.run(ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gdk = imports.gi.Gdk;\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class({\n"
"    Name: 'Application',\n"
"\n"
"    //Δημιουργία της εφαρμογής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.myapp',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"       //Σύνδεση των σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //Δημιουργία της διεπαφής χρήστη (σε αυτήν την περίπτωση είναι απλά το παράθυρο της εφαρμογής)\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"Toolbar Example\",\n"
"                                                   default_height: 200,\n"
"                                                   default_width: 400 });\n"
"\n"
"        this._grid = new Gtk.Grid();\n"
"        this._window.add(this._grid);\n"
"        this._grid.show();\n"
"\n"
"        this._createToolbar();\n"
"        this._toolbar.set_hexpand(true);\n"
"        this._grid.attach(this._toolbar, 0, 0, 1, 1);\n"
"\n"
"        //Εμφάνιση της εργαλειοθήκης και του παραθύρου\n"
"        this._toolbar.show();\n"
"        this._window.show();\n"
"    },\n"
"\n"
"    //Η συνάρτηση επανάκλησης για το σήμα 'activate'\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    //Η συνάρτηση επανάκλησης για το σήμα 'startup'\n"
"    _onStartup: function() {\n"
"        this._initMenus();\n"
"        this._buildUI();\n"
"    },\n"
"\n"
"    //Δημιουργία της εργαλειοθήκης, των κουμπιών εργαλείων της και των ενεργειών τους\n"
"    _createToolbar: function() {\n"
"\n"
"        this._toolbar = new Gtk.Toolbar();\n"
"        this._toolbar.get_style_context().add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"        //Δημιουργία του κουμπιού εργαλείου \"New\" και της απλής του ενέργειας.\n"
"        //Η χρήση ενεργειών επιτρέπει την προσθήκη τους στο μενού εφαρμογών\n"
"        //χωρίς διπλασιασμό του κώδικα.\n"
"        let newAction = new Gio.SimpleAction({ name: 'new'});\n"
"        newAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._newCB();\n"
"            }));\n"
"        this.application.add_action(newAction);//σημείωση: αυτή η ενέργεια προστίθεται στην εφαρμογή\n"
"\n"
"        this._newButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_NEW);\n"
"        this._newButton.is_important = true;\n"
"        this._toolbar.add(this._newButton);\n"
"        this._newButton.show();\n"
"        this._newButton.action_name = \"app.new\";\n"
"\n"
"        //Δημιουργία του κουμπιού εργαλείου \"Open\" και της απλής του ενέργειας\n"
"        let openAction = new Gio.SimpleAction({ name: 'open'});\n"
"        openAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._openCB();\n"
"            }));\n"
"        this.application.add_action(openAction);\n"
"\n"
"        this._openButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_OPEN);\n"
"        this._openButton.is_important = true;\n"
"        this._toolbar.add(this._openButton);\n"
"        this._openButton.show();\n"
"        this._openButton.action_name = \"app.open\";\n"
"\n"
"        //Δημιουργία του κουμπιού εργαλείου \"Undo\" και της απλής του ενέργειας\n"
"        let undoAction = new Gio.SimpleAction({ name: 'undo'});\n"
"        undoAction.connect('activate', Lang.bind (this,\n"
"            function() {\n"
"                this._undoCB();\n"
"            }));\n"
"        this._window.add_action(undoAction);//Σημειώστε ότι αυτή η απλή ενέργεια προστίθεται στο παράθυρο\n"
"\n"
"        this._undoButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_UNDO);\n"
"        this._undoButton.is_important = true;\n"
"        this._toolbar.add(this._undoButton);\n"
"        this._undoButton.show();\n"
"        this._undoButton.action_name = \"win.undo\";\n"
"\n"
"        //Δημιουργία του κουμπιού εργαλείου  \"Fullscreen\" και της απλής του ενέργειας \n"
"        let fullscreenToggleAction = new Gio.SimpleAction ({ name: 'fullscreenToggle' });\n"
"        fullscreenToggleAction.connect ('activate', Lang.bind (this,\n"
"            function () {\n"
"                this._fullscreenToggleCB();\n"
"            }));\n"
"        this._window.add_action(fullscreenToggleAction);\n"
"\n"
"        this._fullscreenButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_FULLSCREEN);\n"
"        this._fullscreenButton.is_important = true;\n"
"        this._toolbar.add(this._fullscreenButton);\n"
"        this._fullscreenButton.show();\n"
"        this._fullscreenButton.action_name = \"win.fullscreenToggle\";\n"
"\n"
"        //Δημιουργία του κουμπιού εργαλείου  \"leaveFullscreen\" και ορισμός του ονόματος ενέργειας σε \"win.fullscreenToggle\"\n"
"        this._leaveFullscreenButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_LEAVE_FULLSCREEN);\n"
"        this._leaveFullscreenButton.is_important = true;\n"
"        this._toolbar.add(this._leaveFullscreenButton);\n"
"        this._leaveFullscreenButton.action_name = \"win.fullscreenToggle\";\n"
"    },\n"
"\n"
"    _initMenus: function () {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"New\", 'app.new');\n"
"        menu.append(\"Open\", 'app.open');\n"
"        menu.append(\"Quit\", 'app.quit');\n"
"\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        let quitAction = new Gio.SimpleAction({name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"    _newCB: function() {\n"
"        print(\"You clicked 'New'.\");\n"
"    },\n"
"\n"
"    _openCB: function() {\n"
"        print(\"You clicked 'Open'.\");\n"
"    },\n"
"\n"
"    _undoCB:function () {\n"
"        print (\"You clicked 'Undo'.\");\n"
"    },\n"
"\n"
"    _fullscreenToggleCB: function() {\n"
"        if ((this._window.get_window().get_state() &amp; Gdk.WindowState.FULLSCREEN) != 0 ) {\n"
"              this._window.unfullscreen();\n"
"              this._leaveFullscreenButton.hide();\n"
"              this._fullscreenButton.show();\n"
"        }\n"
"        else {\n"
"             this._window.fullscreen();\n"
"             this._fullscreenButton.hide();\n"
"             this._leaveFullscreenButton.show();\n"
"        }\n"
"    }\n"
"});\n"
"\n"
"//Εκτέλεση της εφαρμογής\n"
"let app = new Application();\n"
"app.application.run(ARGV);\n"

#. (itstool) path: item/p
#: C/toolbar.js.page:31
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Window.html"
"\">Gtk.Window</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Window.html"
"\">Gtk.Window</link>"

#. (itstool) path: item/p
#: C/toolbar.js.page:32
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Toolbar.html"
"\">Gtk.Toolbar</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Toolbar.html"
"\">Gtk.Toolbar</link>"

#. (itstool) path: item/p
#: C/toolbar.js.page:33
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ToolButton."
"html\">Gtk.ToolButton</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ToolButton."
"html\">Gtk.ToolButton</link>"

#. (itstool) path: item/p
#: C/toolbar.js.page:34
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.html\">Gtk "
"Stock items</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.html\">Gtk "
"Stock items</link>"

#. (itstool) path: item/p
#: C/toolbar.js.page:35
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gdk.WindowState."
"html\">Gdk.WindowState</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gdk.WindowState."
"html\">Gdk.WindowState</link>"

#. (itstool) path: info/title
#: C/toolbar.py.page:8
msgctxt "text"
msgid "Toolbar (Python)"
msgstr "Εργαλειοθήκη (Python)"

#. (itstool) path: info/desc
#: C/toolbar.py.page:20 C/toolbar_builder.py.page:33
msgid "A bar of buttons and other widgets"
msgstr "Μια γραμμή κουμπιών και άλλα γραφικά στοιχεία"

#. (itstool) path: page/p
#: C/toolbar.py.page:26
msgid "An example of toolbar with buttons (from stock icons)."
msgstr "Παράδειγμα εργαλειοθήκης με κουμπιά (από εικονίδια παρακαταθήκης)."

#. (itstool) path: section/code
#: C/toolbar.py.page:33
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Toolbar Example\", application=app)\n"
"        self.set_default_size(400, 200)\n"
"\n"
"        # a grid to attach the toolbar\n"
"        grid = Gtk.Grid()\n"
"\n"
"        # a toolbar created in the method create_toolbar (see below)\n"
"        toolbar = self.create_toolbar()\n"
"        # with extra horizontal space\n"
"        toolbar.set_hexpand(True)\n"
"        # show the toolbar\n"
"        toolbar.show()\n"
"\n"
"        # attach the toolbar to the grid\n"
"        grid.attach(toolbar, 0, 0, 1, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"        # create the actions that control the window and connect their signal to a\n"
"        # callback method (see below):\n"
"\n"
"        # undo\n"
"        undo_action = Gio.SimpleAction.new(\"undo\", None)\n"
"        undo_action.connect(\"activate\", self.undo_callback)\n"
"        self.add_action(undo_action)\n"
"\n"
"        # fullscreen\n"
"        fullscreen_action = Gio.SimpleAction.new(\"fullscreen\", None)\n"
"        fullscreen_action.connect(\"activate\", self.fullscreen_callback)\n"
"        self.add_action(fullscreen_action)\n"
"\n"
"    # a method to create the toolbar\n"
"    def create_toolbar(self):\n"
"        # a toolbar\n"
"        toolbar = Gtk.Toolbar()\n"
"\n"
"        # which is the primary toolbar of the application\n"
"        toolbar.get_style_context().add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR)\n"
"\n"
"        # create a button for the \"new\" action, with a stock image\n"
"        new_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_NEW)\n"
"        # label is shown\n"
"        new_button.set_is_important(True)\n"
"        # insert the button at position in the toolbar\n"
"        toolbar.insert(new_button, 0)\n"
"        # show the button\n"
"        new_button.show()\n"
"        # set the name of the action associated with the button.\n"
"        # The action controls the application (app)\n"
"        new_button.set_action_name(\"app.new\")\n"
"\n"
"        # button for the \"open\" action\n"
"        open_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_OPEN)\n"
"        open_button.set_is_important(True)\n"
"        toolbar.insert(open_button, 1)\n"
"        open_button.show()\n"
"        open_button.set_action_name(\"app.open\")\n"
"\n"
"        # button for the \"undo\" action\n"
"        undo_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_UNDO)\n"
"        undo_button.set_is_important(True)\n"
"        toolbar.insert(undo_button, 2)\n"
"        undo_button.show()\n"
"        undo_button.set_action_name(\"win.undo\")\n"
"\n"
"        # button for the \"fullscreen/leave fullscreen\" action\n"
"        self.fullscreen_button = Gtk.ToolButton.new_from_stock(\n"
"            Gtk.STOCK_FULLSCREEN)\n"
"        self.fullscreen_button.set_is_important(True)\n"
"        toolbar.insert(self.fullscreen_button, 3)\n"
"        self.fullscreen_button.set_action_name(\"win.fullscreen\")\n"
"\n"
"        # return the complete toolbar\n"
"        return toolbar\n"
"\n"
"    # callback method for undo\n"
"    def undo_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Undo\\\".\"\n"
"\n"
"    # callback method for fullscreen / leave fullscreen\n"
"    def fullscreen_callback(self, action, parameter):\n"
"        # check if the state is the same as Gdk.WindowState.FULLSCREEN, which\n"
"        # is a bit flag\n"
"        is_fullscreen = self.get_window().get_state(\n"
"        ) &amp; Gdk.WindowState.FULLSCREEN != 0\n"
"        if not is_fullscreen:\n"
"            self.fullscreen_button.set_stock_id(Gtk.STOCK_LEAVE_FULLSCREEN)\n"
"            self.fullscreen()\n"
"        else:\n"
"            self.fullscreen_button.set_stock_id(Gtk.STOCK_FULLSCREEN)\n"
"            self.unfullscreen()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # create the actions that control the window and connect their signal to a\n"
"        # callback method (see below):\n"
"\n"
"        # new\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        app.add_action(new_action)\n"
"\n"
"        # open\n"
"        open_action = Gio.SimpleAction.new(\"open\", None)\n"
"        open_action.connect(\"activate\", self.open_callback)\n"
"        app.add_action(open_action)\n"
"\n"
"    # callback method for new\n"
"    def new_callback(self, action, parameter):\n"
"        print \"You clicked \\\"New\\\".\"\n"
"\n"
"    # callback method for open\n"
"    def open_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Open\\\".\"\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Toolbar Example\", application=app)\n"
"        self.set_default_size(400, 200)\n"
"\n"
"        # a grid to attach the toolbar\n"
"        grid = Gtk.Grid()\n"
"\n"
"        # a toolbar created in the method create_toolbar (see below)\n"
"        toolbar = self.create_toolbar()\n"
"        # with extra horizontal space\n"
"        toolbar.set_hexpand(True)\n"
"        # show the toolbar\n"
"        toolbar.show()\n"
"\n"
"        # attach the toolbar to the grid\n"
"        grid.attach(toolbar, 0, 0, 1, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"        # create the actions that control the window and connect their signal to a\n"
"        # callback method (see below):\n"
"\n"
"        # undo\n"
"        undo_action = Gio.SimpleAction.new(\"undo\", None)\n"
"        undo_action.connect(\"activate\", self.undo_callback)\n"
"        self.add_action(undo_action)\n"
"\n"
"        # fullscreen\n"
"        fullscreen_action = Gio.SimpleAction.new(\"fullscreen\", None)\n"
"        fullscreen_action.connect(\"activate\", self.fullscreen_callback)\n"
"        self.add_action(fullscreen_action)\n"
"\n"
"    # a method to create the toolbar\n"
"    def create_toolbar(self):\n"
"        # a toolbar\n"
"        toolbar = Gtk.Toolbar()\n"
"\n"
"        # which is the primary toolbar of the application\n"
"        toolbar.get_style_context().add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR)\n"
"\n"
"        # create a button for the \"new\" action, with a stock image\n"
"        new_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_NEW)\n"
"        # label is shown\n"
"        new_button.set_is_important(True)\n"
"        # insert the button at position in the toolbar\n"
"        toolbar.insert(new_button, 0)\n"
"        # show the button\n"
"        new_button.show()\n"
"        # set the name of the action associated with the button.\n"
"        # The action controls the application (app)\n"
"        new_button.set_action_name(\"app.new\")\n"
"\n"
"        # button for the \"open\" action\n"
"        open_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_OPEN)\n"
"        open_button.set_is_important(True)\n"
"        toolbar.insert(open_button, 1)\n"
"        open_button.show()\n"
"        open_button.set_action_name(\"app.open\")\n"
"\n"
"        # button for the \"undo\" action\n"
"        undo_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_UNDO)\n"
"        undo_button.set_is_important(True)\n"
"        toolbar.insert(undo_button, 2)\n"
"        undo_button.show()\n"
"        undo_button.set_action_name(\"win.undo\")\n"
"\n"
"        # button for the \"fullscreen/leave fullscreen\" action\n"
"        self.fullscreen_button = Gtk.ToolButton.new_from_stock(\n"
"            Gtk.STOCK_FULLSCREEN)\n"
"        self.fullscreen_button.set_is_important(True)\n"
"        toolbar.insert(self.fullscreen_button, 3)\n"
"        self.fullscreen_button.set_action_name(\"win.fullscreen\")\n"
"\n"
"        # return the complete toolbar\n"
"        return toolbar\n"
"\n"
"    # callback method for undo\n"
"    def undo_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Undo\\\".\"\n"
"\n"
"    # callback method for fullscreen / leave fullscreen\n"
"    def fullscreen_callback(self, action, parameter):\n"
"        # check if the state is the same as Gdk.WindowState.FULLSCREEN, which\n"
"        # is a bit flag\n"
"        is_fullscreen = self.get_window().get_state(\n"
"        ) &amp; Gdk.WindowState.FULLSCREEN != 0\n"
"        if not is_fullscreen:\n"
"            self.fullscreen_button.set_stock_id(Gtk.STOCK_LEAVE_FULLSCREEN)\n"
"            self.fullscreen()\n"
"        else:\n"
"            self.fullscreen_button.set_stock_id(Gtk.STOCK_FULLSCREEN)\n"
"            self.unfullscreen()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # create the actions that control the window and connect their signal to a\n"
"        # callback method (see below):\n"
"\n"
"        # new\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        app.add_action(new_action)\n"
"\n"
"        # open\n"
"        open_action = Gio.SimpleAction.new(\"open\", None)\n"
"        open_action.connect(\"activate\", self.open_callback)\n"
"        app.add_action(open_action)\n"
"\n"
"    # callback method for new\n"
"    def new_callback(self, action, parameter):\n"
"        print \"You clicked \\\"New\\\".\"\n"
"\n"
"    # callback method for open\n"
"    def open_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Open\\\".\"\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/toolbar.py.page:37
msgid "Useful methods for a Toolbar widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο εργαλειοθήκης"

#. (itstool) path: section/p
#: C/toolbar.py.page:38
msgid ""
"In line 32 the signal <code>\"activate\"</code> from the action "
"<code>undo_action</code> is connected to the callback function "
"<code>undo_callback()</code> using <code><var>action</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"Στη γραμμή 32 το σήμα <code>\"activate\"</code> από την ενέργεια "
"<code>undo_action</code> συνδέεται με τη συνάρτηση επανάκλησης "
"<code>undo_callback()</code> χρησιμοποιώντας <code><var>action</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. Δείτε <link "
"xref=\"signals-callbacks.py\"/> για μια πιο λεπτομερή εξήγηση."

#. (itstool) path: item/p
#: C/toolbar.py.page:41
msgid ""
"Use <code>insert(tool_item, position)</code> to insert the <code>tool_item</"
"code> at <code>position</code>. If <code>position</code> is negative, the "
"item is appended at the end of the toolbar."
msgstr ""
"Χρησιμοποιήστε <code>insert(tool_item, position)</code> για την εισαγωγή του "
"<code>tool_item</code> στη <code>position</code>. Εάν η <code>position</"
"code> είναι αρνητική, το στοιχείο προσαρτάται στο τέλος της εργαλειοθήκης."

#. (itstool) path: item/p
#: C/toolbar.py.page:42
msgid ""
"<code>get_item_index(tool_item)</code> retrieves the position of "
"<code>tool_item</code> on the toolbar."
msgstr ""
"Η <code>get_item_index(tool_item)</code> ανακτά τη θέση του <code>tool_item</"
"code> στην εργαλειοθήκη."

#. (itstool) path: item/p
#: C/toolbar.py.page:43
msgid ""
"<code>get_n_items()</code> returns the number of items on the toolbar; "
"<code>get_nth_item(position)</code> returns the item in position "
"<code>position</code>."
msgstr ""
"Η <code>get_n_items()</code> επιστρέφει τον αριθμό των στοιχείων της "
"εργαλειοθήκης· η <code>get_nth_item(position)</code> επιστρέφει το στοιχείο "
"στη θέση <code>position</code>."

#. (itstool) path: item/p
#: C/toolbar.py.page:44
msgid ""
"If the toolbar does not have room for all the menu items, and "
"<code>set_show_arrow(True)</code>, the items that do not have room are shown "
"through an overflow menu."
msgstr ""
"Εάν η εργαλειοθήκη δεν έχει χώρο για όλα τα στοιχεία μενού και τον "
"<code>set_show_arrow(True)</code>, τα στοιχεία που δεν έχουν χώρο "
"εμφανίζονται μέσα από ένα μενού υπερχείλισης."

#. (itstool) path: item/p
#: C/toolbar.py.page:45
msgid ""
"<code>set_icon_size(icon_size)</code> sets the size of icons in the toolbar; "
"<code>icon_size</code> can be one of <code>Gtk.IconSize.INVALID, Gtk."
"IconSize.MENU, Gtk.IconSize.SMALL_TOOLBAR, Gtk.IconSize.LARGE_TOOLBAR, Gtk."
"IconSize.BUTTON, Gtk.IconSize.DND, Gtk.IconSize.DIALOG</code>. This should "
"be used only for special-purpose toolbars, normal application toolbars "
"should respect user preferences for the size of icons. "
"<code>unset_icon_size()</code> unsets the preferences set with "
"<code>set_icon_size(icon_size)</code>, so that user preferences are used to "
"determine the icon size."
msgstr ""
"Ο <code>set_icon_size(icon_size)</code> ρυθμίζει το μέγεθος των εικονιδίων "
"στην εργαλειοθήκη· το <code>icon_size</code> can be one of <code>Gtk."
"IconSize.INVALID, Gtk.IconSize.MENU, Gtk.IconSize.SMALL_TOOLBAR, Gtk."
"IconSize.LARGE_TOOLBAR, Gtk.IconSize.BUTTON, Gtk.IconSize.DND, Gtk.IconSize."
"DIALOG</code>. Αυτό πρέπει να χρησιμοποιηθεί μόνο για εργαλειοθήκες ειδικού "
"σκοπού, εργαλειοθήκες κανονικής εφαρμογής πρέπει να σέβονται τις προτιμήσεις "
"του χρήστη για το μέγεθος των εικονιδίων. Η <code>unset_icon_size()</code> "
"αναιρεί τις προτιμήσεις που ρυθμίστηκαν με <code>unset_icon_size()</code>, "
"έτσι ώστε οι προτιμήσεις χρήστη να χρησιμοποιηθούν για τον προσδιορισμό του "
"μεγέθους του εικονιδίου."

#. (itstool) path: item/p
#: C/toolbar.py.page:46
msgid ""
"<code>set_style(style)</code>, where <code>style</code> is one of <code>Gtk."
"ToolbarStyle.ICONS, Gtk.ToolbarStyle.TEXT, Gtk.ToolbarStyle.BOTH, Gtk."
"ToolbarStyle.BOTH_HORIZ</code>, sets if the toolbar shows only icons, only "
"text, or both (vertically stacked or alongside each other). To let user "
"preferences determine the toolbar style, and unset a toolbar style so set, "
"use <code>unset_style()</code>."
msgstr ""
"Ο <code>set_style(style)</code>, όπου <code>style</code> είναι ένα από τα "
"<code>Gtk.ToolbarStyle.ICONS, Gtk.ToolbarStyle.TEXT, Gtk.ToolbarStyle.BOTH, "
"Gtk.ToolbarStyle.BOTH_HORIZ</code>, ρυθμίζει εάν η εργαλειοθήκη εμφανίζει "
"μόνο εικονίδια, μόνο κείμενο ή και τα δύο (στοιβαγμένα κάθετα ή δίπλα μεταξύ "
"τους). Για να επιτρέψετε στις προτιμήσεις του χρήστη να καθορίσουν το ύφος "
"της εργαλειοθήκης και να αναιρέσετε ένα ύφος εργαλειοθήκης που ρυθμίστηκε "
"έτσι, χρησιμοποιήστε <code>unset_style()</code>."

#. (itstool) path: item/p
#: C/toolbar.py.page:55
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkToolbar.html"
"\">GtkToolbar</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkToolbar.html"
"\">GtkToolbar</link>"

#. (itstool) path: item/p
#: C/toolbar.py.page:56
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkToolButton.html"
"\">GtkToolButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkToolButton.html"
"\">GtkToolButton</link>"

#. (itstool) path: item/p
#: C/toolbar.py.page:57
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkToolItem.html"
"\">GtkToolItem</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkToolItem.html"
"\">GtkToolItem</link>"

#. (itstool) path: item/p
#: C/toolbar.py.page:59
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkActionable.html"
"\">GtkActionable</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkActionable.html"
"\">GtkActionable</link>"

#. (itstool) path: item/p
#: C/toolbar.py.page:61 C/toolbar_builder.py.page:199
msgid ""
"<link href=\"http://developer.gnome.org/gdk3/unstable/gdk3-Event-Structures."
"html#GdkEventWindowState\">Event Structures</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gdk3/unstable/gdk3-Event-Structures."
"html#GdkEventWindowState\">Δομή γεγονότων</link>"

#. (itstool) path: info/title
#: C/toolbar.vala.page:8
msgctxt "text"
msgid "Toolbar (Vala)"
msgstr "Εργαλειοθήκη (Vala)"

#. (itstool) path: page/code
#: C/toolbar.vala.page:28
#, no-wrap
msgid ""
"/* This is the Window */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Instance variables belonging to the window */\n"
"\tGtk.Toolbar toolbar;\n"
"\tGtk.ToolButton new_button;\n"
"\tGtk.ToolButton open_button;\n"
"\tGtk.ToolButton undo_button;\n"
"\tGtk.ToolButton fullscreen_button;\n"
"\tGtk.ToolButton leave_fullscreen_button;\n"
"\n"
"\t/* Contstructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Toolbar Example\");\n"
"\n"
"\t\tthis.set_default_size (400, 200);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tthis.add (grid);\n"
"\t\tgrid.show ();\n"
"\n"
"\t\tcreate_toolbar ();\n"
"\t\ttoolbar.set_hexpand (true);\n"
"\t\tgrid.attach (toolbar, 0, 0, 1, 1);\n"
"\t\ttoolbar.show ();\n"
"\n"
"\t\t/* create the \"undo\" window action action */\n"
"\t\tvar undo_action = new SimpleAction (\"undo\", null);\n"
"\t\tundo_action.activate.connect (undo_callback);\n"
"\t\tthis.add_action (undo_action);\n"
"\n"
"\t\t/* create the \"fullscreen\" window action */\n"
"\t\tvar fullscreen_action = new SimpleAction (\"fullscreen\", null);\n"
"\t\tfullscreen_action.activate.connect (fullscreen_callback);\n"
"\t\tthis.add_action (fullscreen_action);\n"
"\t}\n"
"\n"
"\t/* This function creates the toolbar, its  ToolButtons,\n"
"\t * and assigns the actions names to the ToolButtons.*/\n"
"\tvoid create_toolbar () {\n"
"\t\ttoolbar = new Gtk.Toolbar ();\n"
"\t\ttoolbar.get_style_context ().add_class (Gtk.STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"\t\tnew_button = new Gtk.ToolButton.from_stock (Gtk.Stock.NEW);\n"
"\t\tnew_button.is_important = true; //decides whether to show the label\n"
"\t\ttoolbar.add (new_button);\n"
"\t\tnew_button.show ();\n"
"\t\tnew_button.action_name = \"app.new\";\n"
"\n"
"\t\topen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.OPEN);\n"
"\t\topen_button.is_important = true;\n"
"\t\ttoolbar.add (open_button);\n"
"\t\topen_button.show ();\n"
"\t\topen_button.action_name = \"app.open\";\n"
"\n"
"\t\tundo_button = new Gtk.ToolButton.from_stock (Gtk.Stock.UNDO);\n"
"\t\tundo_button.is_important = true;\n"
"\t\ttoolbar.add (undo_button);\n"
"\t\tundo_button.show ();\n"
"\t\tundo_button.action_name = \"win.undo\";\n"
"\n"
"\t\tfullscreen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.FULLSCREEN);\n"
"\t\tfullscreen_button.is_important = true;\n"
"\t\ttoolbar.add (fullscreen_button);\n"
"\t\tfullscreen_button.show ();\n"
"\t\tfullscreen_button.action_name = \"win.fullscreen\";\n"
"\n"
"\t\tleave_fullscreen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.LEAVE_FULLSCREEN)\n"
";\n"
"\t\tleave_fullscreen_button.is_important = true;\n"
"\t\ttoolbar.add (leave_fullscreen_button);\n"
"\n"
"\t\tleave_fullscreen_button.action_name = \"win.fullscreen\";\n"
"\t}\n"
"\n"
"\tvoid undo_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Undo\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid fullscreen_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\tif ((this.get_window ().get_state () &amp; Gdk.WindowState.FULLSCREEN) != 0) {\n"
"\t\t\tthis.unfullscreen ();\n"
"\t\t\tleave_fullscreen_button.hide ();\n"
"\t\t\tfullscreen_button.show ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tthis.fullscreen ();\n"
"\t\t\tfullscreen_button.hide ();\n"
"\t\t\tleave_fullscreen_button.show ();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Create the \"new\" action and add it to the app*/\n"
"\t\tvar new_action = new SimpleAction (\"new\", null);\n"
"\t\tnew_action.activate.connect (new_callback);\n"
"\t\tthis.add_action (new_action);\n"
"\n"
"\t\t/* Create the \"open\" action, and add it to the app */\n"
"\t\tvar open_action = new SimpleAction (\"open\", null);\n"
"\t\topen_action.activate.connect (open_callback);\n"
"\t\tthis.add_action (open_action);\n"
"\n"
"\t\t/* You could also add the action to the app menu\n"
"\t\t * if you wanted to.\n"
"\t\t */\n"
"\t\t//var menu = new Menu ();\n"
"\t\t//menu.append (\"New\", \"app.new\");\n"
"\t\t//this.app_menu = menu;\n"
"\t}\n"
"\n"
"\tvoid new_callback (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"New\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid open_callback (SimpleAction action, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Open\\\".\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates the application and runs it. */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* Αυτό είναι το παράθυρο */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Μεταβλητές στιγμιότυπου που ανήκει στο παράθυρο */\n"
"\tGtk.Toolbar toolbar;\n"
"\tGtk.ToolButton new_button;\n"
"\tGtk.ToolButton open_button;\n"
"\tGtk.ToolButton undo_button;\n"
"\tGtk.ToolButton fullscreen_button;\n"
"\tGtk.ToolButton leave_fullscreen_button;\n"
"\n"
"\t/* Κατασκευαστής */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Toolbar Example\");\n"
"\n"
"\t\tthis.set_default_size (400, 200);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tthis.add (grid);\n"
"\t\tgrid.show ();\n"
"\n"
"\t\tcreate_toolbar ();\n"
"\t\ttoolbar.set_hexpand (true);\n"
"\t\tgrid.attach (toolbar, 0, 0, 1, 1);\n"
"\t\ttoolbar.show ();\n"
"\n"
"\t\t/* Δημιουργία της ενέργειας παραθύρου \"undo\" */\n"
"\t\tvar undo_action = new SimpleAction (\"undo\", null);\n"
"\t\tundo_action.activate.connect (undo_callback);\n"
"\t\tthis.add_action (undo_action);\n"
"\n"
"\t\t/* Δημιουργία της ενέργειας παραθύρου \"fullscreen\" */\n"
"\t\tvar fullscreen_action = new SimpleAction (\"fullscreen\", null);\n"
"\t\tfullscreen_action.activate.connect (fullscreen_callback);\n"
"\t\tthis.add_action (fullscreen_action);\n"
"\t}\n"
"\n"
"\t/* Αυτή η συνάρτηση δημιουργεί την εργαλειοθήκη, τα κουμπιά εργαλείων της\n"
"\t * και εκχωρεί τα ονόματα ενεργειών στα κουμπιά εργαλείων.*/\n"
"\tvoid create_toolbar () {\n"
"\t\ttoolbar = new Gtk.Toolbar ();\n"
"\t\ttoolbar.get_style_context ().add_class (Gtk.STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"\t\tnew_button = new Gtk.ToolButton.from_stock (Gtk.Stock.NEW);\n"
"\t\tnew_button.is_important = true; //decides whether to show the label\n"
"\t\ttoolbar.add (new_button);\n"
"\t\tnew_button.show ();\n"
"\t\tnew_button.action_name = \"app.new\";\n"
"\n"
"\t\topen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.OPEN);\n"
"\t\topen_button.is_important = true;\n"
"\t\ttoolbar.add (open_button);\n"
"\t\topen_button.show ();\n"
"\t\topen_button.action_name = \"app.open\";\n"
"\n"
"\t\tundo_button = new Gtk.ToolButton.from_stock (Gtk.Stock.UNDO);\n"
"\t\tundo_button.is_important = true;\n"
"\t\ttoolbar.add (undo_button);\n"
"\t\tundo_button.show ();\n"
"\t\tundo_button.action_name = \"win.undo\";\n"
"\n"
"\t\tfullscreen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.FULLSCREEN);\n"
"\t\tfullscreen_button.is_important = true;\n"
"\t\ttoolbar.add (fullscreen_button);\n"
"\t\tfullscreen_button.show ();\n"
"\t\tfullscreen_button.action_name = \"win.fullscreen\";\n"
"\n"
"\t\tleave_fullscreen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.LEAVE_FULLSCREEN)\n"
";\n"
"\t\tleave_fullscreen_button.is_important = true;\n"
"\t\ttoolbar.add (leave_fullscreen_button);\n"
"\n"
"\t\tleave_fullscreen_button.action_name = \"win.fullscreen\";\n"
"\t}\n"
"\n"
"\tvoid undo_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Undo\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid fullscreen_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\tif ((this.get_window ().get_state () &amp; Gdk.WindowState.FULLSCREEN) != 0) {\n"
"\t\t\tthis.unfullscreen ();\n"
"\t\t\tleave_fullscreen_button.hide ();\n"
"\t\t\tfullscreen_button.show ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tthis.fullscreen ();\n"
"\t\t\tfullscreen_button.hide ();\n"
"\t\t\tleave_fullscreen_button.show ();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* Αυτή είναι η εφαρμογή */\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Δημιουργία της ενέργειας \"new\" και προσθήκη της στην εφαρμογή*/\n"
"\t\tvar new_action = new SimpleAction (\"new\", null);\n"
"\t\tnew_action.activate.connect (new_callback);\n"
"\t\tthis.add_action (new_action);\n"
"\n"
"\t\t/* Δημιουργία της ενέργειας \"open\", και προσθήκη της στην εφαρμογή */\n"
"\t\tvar open_action = new SimpleAction (\"open\", null);\n"
"\t\topen_action.activate.connect (open_callback);\n"
"\t\tthis.add_action (open_action);\n"
"\n"
"\t\t/* Μπορείτε επίσης να προσθέσετε την ενέργεια στο μενού εφαρμογών\n"
"\t\t * αν θέλετε.\n"
"\t\t */\n"
"\t\t//var menu = new Menu ();\n"
"\t\t//menu.append (\"New\", \"app.new\");\n"
"\t\t//this.app_menu = menu;\n"
"\t}\n"
"\n"
"\tvoid new_callback (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"New\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid open_callback (SimpleAction action, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Open\\\".\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* Η κύρια συνάρτηση δημιουργεί την εφαρμογή και την εκτελεί. */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/toolbar.vala.page:34 C/toolbar_builder.vala.page:151
#: C/tooltip.vala.page:40
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Toolbar.html\">Gtk.Toolbar</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Toolbar.html\">Gtk.Toolbar</"
"link>"

#. (itstool) path: item/p
#: C/toolbar.vala.page:35 C/toolbar_builder.vala.page:152
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ToolButton.html\">Gtk."
"Toolbutton</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ToolButton.html\">Gtk."
"Toolbutton</link>"

#. (itstool) path: item/p
#: C/toolbar.vala.page:36 C/toolbar_builder.vala.page:153
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Stock.html\">Gtk.Stock</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Stock.html\">Gtk.Stock</"
"link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:50 C/toolbar_builder.vala.page:33
msgctxt "_"
msgid ""
"external ref='media/glade_ui.png' md5='baea74fe213bc12ea934f64f6977215a'"
msgstr ""
"external ref='media/glade_ui.png' md5='baea74fe213bc12ea934f64f6977215a'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:56 C/toolbar_builder.vala.page:39
msgctxt "_"
msgid ""
"external ref='media/glade_select_toolbar.png' "
"md5='f7b5b224050b2e387eb04362fc99df00'"
msgstr ""
"external ref='media/glade_select_toolbar.png' "
"md5='f7b5b224050b2e387eb04362fc99df00'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:62 C/toolbar_builder.vala.page:45
msgctxt "_"
msgid ""
"external ref='media/glade_toolbar_general.png' "
"md5='e31daba6e8a3e526aca89d5f1622edaa'"
msgstr ""
"external ref='media/glade_toolbar_general.png' "
"md5='e31daba6e8a3e526aca89d5f1622edaa'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:68 C/toolbar_builder.vala.page:51
msgctxt "_"
msgid ""
"external ref='media/glade_toolbar_common.png' "
"md5='d5ec6cc0218ca98e195dbd033feb9ac5'"
msgstr ""
"external ref='media/glade_toolbar_common.png' "
"md5='d5ec6cc0218ca98e195dbd033feb9ac5'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:74 C/toolbar_builder.vala.page:57
msgctxt "_"
msgid ""
"external ref='media/glade_toolbar_edit.png' "
"md5='feb1e2b7040d24a4d030f94cf07c81fd'"
msgstr ""
"external ref='media/glade_toolbar_edit.png' "
"md5='feb1e2b7040d24a4d030f94cf07c81fd'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:133 C/toolbar_builder.vala.page:116
msgctxt "_"
msgid ""
"external ref='media/glade_toolbar_editor.png' "
"md5='8af65241e5ca47d5494a7b36640e6f1c'"
msgstr ""
"external ref='media/glade_toolbar_editor.png' "
"md5='8af65241e5ca47d5494a7b36640e6f1c'"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:142 C/toolbar_builder.vala.page:125
msgctxt "_"
msgid ""
"external ref='media/glade_visible_no.png' "
"md5='dc6c025aa825f4d772fbd283d6330026'"
msgstr ""
"external ref='media/glade_visible_no.png' "
"md5='dc6c025aa825f4d772fbd283d6330026'"

#. (itstool) path: info/title
#: C/toolbar_builder.py.page:8
msgctxt "text"
msgid "Toolbar created using Glade (Python)"
msgstr "Η εργαλειοθήκη δημιουργήθηκε χρησιμοποιώντας Glade (Python)"

#. (itstool) path: page/title
#: C/toolbar_builder.py.page:36 C/toolbar_builder.vala.page:23
msgid "Toolbar created using Glade"
msgstr "Η γραμμή εργαλείων δημιουργήθηκε χρησιμοποιώντας Glade"

#. (itstool) path: page/p
#: C/toolbar_builder.py.page:39
msgid ""
"This example is similar to <link xref=\"toolbar.py\"/>, except we use Glade "
"to create the toolbar in an XML .ui file."
msgstr ""
"Αυτό το παράδειγμα είναι παρόμοιο με <link xref=\"toolbar.py\"/>, εκτός από "
"τη χρήση Glade για δημιουργία της εργαλειοθήκης σε ένα αρχείο XML .ui."

#. (itstool) path: section/title
#: C/toolbar_builder.py.page:44
msgid "Creating the toolbar with Glade"
msgstr "Δημιουργία της εργαλειοθήκης με Glade"

#. (itstool) path: section/p
#. (itstool) path: page/p
#: C/toolbar_builder.py.page:45 C/toolbar_builder.vala.page:28
msgid ""
"To create the toolbar using the <link href=\"http://glade.gnome.org/\">Glade "
"Interface Designer</link>:"
msgstr ""
"Για δημιουργία της γραμμής εργαλείων χρησιμοποιώντας το <link href=\"http://"
"glade.gnome.org/\">σχεδιαστή διεπαφής Glade</link>:"

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:49 C/toolbar_builder.vala.page:32
msgid "Open Glade, and save the file as <file>toolbar_builder.ui</file>"
msgstr ""
"Άνοιγμα του Glade και αποθήκευση του αρχείου ως <file>toolbar_builder.ui</"
"file>"

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:50 C/toolbar_builder.vala.page:33
msgid ""
"<media type=\"image\" src=\"media/glade_ui.png\" width=\"900\"> Screenshot "
"of Glade ui </media>"
msgstr ""
"<media type=\"image\" src=\"media/glade_ui.png\" width=\"900\"> Στιγμιότυπο "
"διεπαφής του Glade </media>"

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:55 C/toolbar_builder.vala.page:38
msgid ""
"Under <gui>Containers</gui> on the left hand side, right click on the "
"toolbar icon and select <gui>Add widget as toplevel</gui>."
msgstr ""
"Στο <gui>περιέκτες</gui> στα αριστερά, δεξί πάτημα στην εργαλειοθήκη και "
"επιλογή <gui>προσθήκη γραφικού στοιχείου ως ανώτατου επιπέδου</gui>."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:56 C/toolbar_builder.vala.page:39
msgid ""
"<media type=\"image\" src=\"media/glade_select_toolbar.png\"> Screenshot of "
"toolbar icon in Glade ui </media>"
msgstr ""
"<media type=\"image\" src=\"media/glade_select_toolbar.png\"> Στιγμιότυπο "
"του εικονιδίου εργαλειοθήκης στο Glade ui </media>"

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:61 C/toolbar_builder.vala.page:44
msgid ""
"Under the <gui>General</gui> tab on the bottom right, change the <gui>Name</"
"gui> to <input>toolbar</input> and <gui>Show Arrow</gui> to <gui>No</gui>."
msgstr ""
"Στην καρτέλα <gui>γενικά</gui> στα κάτω δεξιά, αλλαγή του <gui>ονόματος</"
"gui> σε <input>γραμμή εργαλείων</input> και <gui>εμφάνιση βέλους</gui> σε "
"<gui>όχι</gui>."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:62 C/toolbar_builder.vala.page:45
msgid ""
"<media type=\"image\" src=\"media/glade_toolbar_general.png\"> Screenshot of "
"General tab </media>"
msgstr ""
"<media type=\"image\" src=\"media/glade_toolbar_general.png\"> Στιγμιότυπο "
"της καρτέλας Γενικά</media>"

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:67 C/toolbar_builder.vala.page:50
msgid ""
"Under the <gui>Common</gui> tab, set <gui>Horizontal Expand</gui> to "
"<gui>Yes</gui>."
msgstr ""
"Στην καρτέλα <gui>κοινά</gui>, ορίστε <gui>οριζόντια επέκταση</gui> σε "
"<gui>ναι</gui>."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:68 C/toolbar_builder.vala.page:51
msgid ""
"<media type=\"image\" src=\"media/glade_toolbar_common.png\"> Screenshot of "
"Common tab </media>"
msgstr ""
"<media type=\"image\" src=\"media/glade_toolbar_common.png\"> Στιγμιότυπο "
"της καρτέλας Κοινά </media>"

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:73 C/toolbar_builder.vala.page:56
msgid ""
"Right click on the toolbar in the top right and select <gui>Edit</gui>. The "
"<gui>Tool Bar Editor</gui> window will appear."
msgstr ""
"Δεξί κλικ στη γραμμή εργαλείων στα πάνω δεξιά και επιλέξτε <gui>επεξεργασία</"
"gui>. Το παράθυρο <gui>επεξεργαστής γραμμής εργαλείων</gui> θα εμφανιστεί."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:74 C/toolbar_builder.vala.page:57
msgid ""
"<media type=\"image\" src=\"media/glade_toolbar_edit.png\"> Screenshot of "
"where to right click to edit toolbar. </media>"
msgstr ""
"<media type=\"image\" src=\"media/glade_toolbar_edit.png\"> Στιγμιότυπο πού "
"να δεξιοπατήσετε για να επεξεργαστείτε την εργαλειοθήκη. </media>"

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:79 C/toolbar_builder.vala.page:62
msgid ""
"We want to add 5 ToolButtons: New, Open, Undo, Fullscreen and Leave "
"Fullscreen. First, we will add the New ToolButton."
msgstr ""
"Θέλουμε να προσθέσουμε 5 κουμπιά εργαλείων: νέο, άνοιγμα, αναίρεση, πλήρης "
"οθόνη και εγκατάλειψη πλήρους οθόνης. Πρώτα, θα προσθέσουμε το νέο "
"ToolButton."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:82 C/toolbar_builder.vala.page:65
msgid "Under <gui>Hierarchy</gui> tab, click <gui>Add</gui>."
msgstr "Στην καρτέλα <gui>ιεραρχία</gui>, πατήστε <gui>προσθήκη</gui>."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:83 C/toolbar_builder.vala.page:66
msgid "Change the name of the ToolItem to <input>new_button</input>."
msgstr ""
"Αλλαγή του ονόματος του στοιχείου εργαλείου σε <input>new_button</input>."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:84 C/toolbar_builder.vala.page:67
msgid ""
"Scroll down and set <gui>Is important</gui> to <gui>Yes</gui>. This will "
"cause the label of the ToolButton to be shown, when you view the toolbar."
msgstr ""
"Κύλιση προς τα κάτω και ρύθμιση του <gui>είναι σημαντικό</gui> σε <gui>ναι</"
"gui>. Αυτό θα προκαλέσει την ετικέτα του ToolButton να εμφανιστεί, όταν "
"προβάλετε τη γραμμή εργαλείων."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:85 C/toolbar_builder.vala.page:68
msgid "Enter the <gui>action name</gui>: <input>app.new</input>."
msgstr "Εισάγετε το <gui>όνομα ενέργειας</gui>: <input>app.new</input>."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:86 C/toolbar_builder.vala.page:69
msgid "Change the <gui>Label</gui> to <input>New</input>."
msgstr "Αλλαγή του <gui>ετικέτα</gui> σε <input>New</input>."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:87 C/toolbar_builder.vala.page:70
msgid ""
"Select the <gui>New</gui> Stock Id from the drop down menu, or type "
"<input>gtk-new</input>."
msgstr ""
"Επιλογή του <gui>νέου</gui> αναγνωριστικού παρακαταθήκης από το πτυσσόμενο "
"μενού, ή πληκτρολογήστε <input>gtk-new</input>."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:89 C/toolbar_builder.vala.page:72
msgid ""
"Repeat the above steps for the remaining ToolButtons, with the following "
"properties:"
msgstr ""
"Επανάληψη των παραπάνω βημάτων για τα υπολειπόμενα κουμπιά εργαλείων "
"(ToolButtons), με τις παρακάτω ιδιότητες:"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:96 C/toolbar_builder.vala.page:79
msgid "Is important"
msgstr "Είναι σημαντικό"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:97 C/toolbar_builder.vala.page:80
msgid "Action name"
msgstr "Όνομα ενέργειας"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:99 C/toolbar_builder.vala.page:82
msgid "Stock Id"
msgstr "Αναγνωριστικό παρακαταθήκης"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:104 C/toolbar_builder.vala.page:87
msgid "open_button"
msgstr "open_button"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:105 C/toolbar_builder.py.page:112
#: C/toolbar_builder.py.page:119 C/toolbar_builder.py.page:126
#: C/toolbar_builder.vala.page:88 C/toolbar_builder.vala.page:95
#: C/toolbar_builder.vala.page:102 C/toolbar_builder.vala.page:109
msgid "Yes"
msgstr "Ναι"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:106 C/toolbar_builder.vala.page:89
msgid "app.open"
msgstr "app.open"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:107 C/toolbar_builder.vala.page:90
msgid "Open"
msgstr "Open"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:108 C/toolbar_builder.vala.page:91
msgid "gtk-open"
msgstr "gtk-open"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:111 C/toolbar_builder.vala.page:94
msgid "undo_button"
msgstr "undo_button"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:113 C/toolbar_builder.vala.page:96
msgid "win.undo"
msgstr "win.undo"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:114 C/toolbar_builder.vala.page:97
msgid "Undo"
msgstr "Αναίρεση"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:115 C/toolbar_builder.vala.page:98
msgid "gtk-undo"
msgstr "gtk-undo"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:118 C/toolbar_builder.vala.page:101
msgid "fullscreen_button"
msgstr "fullscreen_button"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:120 C/toolbar_builder.py.page:127
#: C/toolbar_builder.vala.page:103 C/toolbar_builder.vala.page:110
msgid "win.fullscreen"
msgstr "win.fullscreen"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:121 C/toolbar_builder.vala.page:104
msgid "Fullscreen"
msgstr "Πλήρης οθόνη"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:122 C/toolbar_builder.vala.page:105
msgid "gtk-fullscreen"
msgstr "gtk-fullscreen"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:125 C/toolbar_builder.vala.page:108
msgid "leave_fullscreen_button"
msgstr "leave_fullscreen_button"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:128 C/toolbar_builder.vala.page:111
msgid "Leave Fullscreen"
msgstr "Έξοδος από πλήρη οθόνη"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:129 C/toolbar_builder.vala.page:112
msgid "gtk-leave-fullscreen"
msgstr "gtk-leave-fullscreen"

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:138 C/toolbar_builder.vala.page:121
msgid "Close the <gui>Tool Bar Editor</gui>."
msgstr "Κλείσιμο του <gui>επεξεργαστή γραμμής εργαλείων</gui>."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:141
msgid ""
"When our program will first start, we do not want the <gui>Leave Fullscreen</"
"gui> ToolButton to be visible, since the application will not be in "
"fullscreen mode. You can set this in the <gui>Common</gui> tab, by clicking "
"the <gui>Visible</gui> property to <gui>No</gui>. The ToolButton will still "
"appear in the interface designer, but will behave correctly when the file is "
"loaded into your program code. Note that the method <code>show_all()</code> "
"would override this setting - so in the code we have to use <code>show()</"
"code> separately on all the elements."
msgstr ""
"Όταν το πρόγραμμά μας θα ξεκινήσει στην αρχή, δεν θέλουμε το κουμπί "
"εργαλείου (ToolButton) <gui>Έξοδος από πλήρη οθόνη</gui> να είναι ορατό, "
"αφού η εφαρμογή δεν θα είναι σε λειτουργία πλήρους οθόνης. Μπορείτε να το "
"ρυθμίσετε στην καρτέλα <gui>κοινά</gui>, πατώντας στην ιδιότητα <gui>ορατό</"
"gui> σε <gui>όχι</gui>. Το κουμπί εργαλείου θα εξακολουθεί να εμφανίζεται "
"στον σχεδιαστή διεπαφής, αλλά θα συμπεριφέρεται σωστά, όταν το αρχείο "
"φορτώνεται στον κώδικα προγράμματός σας. Σημειώστε ότι η μέθοδος "
"<code>show_all()</code> θα αντικαταστήσει αυτή τη ρύθμιση - έτσι στον κώδικα "
"πρέπει να χρησιμοποιήσουμε <code>show()</code> ξεχωριστά σε όλα τα στοιχεία."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:142 C/toolbar_builder.vala.page:125
msgid ""
"<media type=\"image\" src=\"media/glade_visible_no.png\"> Setting the "
"visible property to No </media>"
msgstr ""
"<media type=\"image\" src=\"media/glade_visible_no.png\"> Ορισμός της "
"ιδιότητας ορατό σε Όχι </media>"

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:147 C/toolbar_builder.vala.page:130
msgid "Save your work, and close Glade."
msgstr "Αποθήκευση της εργασίας σας και κλείσιμο του Glade."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:150 C/toolbar_builder.vala.page:133
msgid ""
"The XML file created by Glade is shown below. This is the description of the "
"toolbar. At the time of this writing, the option to add the class Gtk."
"STYLE_CLASS_PRIMARY_TOOLBAR in the Glade Interface did not exist. We can "
"manually add this to the XML file. To do this, add the following XML code at "
"line 9 of <file>toolbar_builder.ui</file>:"
msgstr ""
"Το δημιουργημένο αρχείο XML από το Glade εμφανίζεται παρακάτω. Αυτή είναι η "
"περιγραφή της εργαλειοθήκης. Τη στιγμή της εγγραφής, η επιλογή προσθήκης "
"στην κλάση Gtk.STYLE_CLASS_PRIMARY_TOOLBAR στην διεπαφή Glade δεν υπάρχει. "
"Μπορούμε χειροκίνητα να το προσθέσουμε στο αρχείο XML. Για να το κάνουμε, "
"προσθέστε τον παρακάτω κώδικα XML στη γραμμή 9 του <file>toolbar_builder.ui</"
"file>:"

#. (itstool) path: item/code
#: C/toolbar_builder.py.page:151 C/toolbar_builder.vala.page:134
#, no-wrap
msgid ""
"\n"
"  &lt;style&gt;\n"
"     &lt;class name=\"primary-toolbar\"/&gt;\n"
"  &lt;/style&gt;\n"
"  "
msgstr ""
"\n"
"  &lt;style&gt;\n"
"     &lt;class name=\"primary-toolbar\"/&gt;\n"
"  &lt;/style&gt;\n"
"  "

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:156 C/toolbar_builder.vala.page:139
msgid ""
"If you do not add this, the program will still work fine. The resulting "
"toolbar will however look slightly different then the screenshot at the top "
"of this page."
msgstr ""
"Εάν δεν το προσθέσετε, το πρόγραμμα θα εξακολουθήσει να δουλεύει υπέροχα. Η "
"τελική εργαλειοθήκη όμως θα φαίνεται ελαφρά διαφορετική τότε από το "
"στιγμιότυπο στην κορυφή αυτής της σελίδας."

#. (itstool) path: section/code
#. (itstool) path: page/code
#: C/toolbar_builder.py.page:159 C/toolbar_builder.vala.page:142
#, no-wrap
msgid ""
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;!-- interface-requires gtk+ 3.0 --&gt;\n"
"  &lt;object class=\"GtkToolbar\" id=\"toolbar\"&gt;\n"
"    &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"    &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"    &lt;property name=\"hexpand\"&gt;True&lt;/property&gt;\n"
"    &lt;property name=\"show_arrow\"&gt;False&lt;/property&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"new_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;app.new&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;New&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-new&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"open_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;app.open&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;Open&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-open&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"undo_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;win.undo&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;Undo&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-undo&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"fullscreen_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;win.fullscreen&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;Fullscreen&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-fullscreen&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"leave_fullscreen_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;win.fullscreen&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;Leave Fullscreen&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-leave-fullscreen&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"  &lt;/object&gt;\n"
"&lt;/interface&gt;\n"
msgstr ""
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;!-- interface-requires gtk+ 3.0 --&gt;\n"
"  &lt;object class=\"GtkToolbar\" id=\"toolbar\"&gt;\n"
"    &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"    &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"    &lt;property name=\"hexpand\"&gt;True&lt;/property&gt;\n"
"    &lt;property name=\"show_arrow\"&gt;False&lt;/property&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"new_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;app.new&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;New&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-new&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"open_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;app.open&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;Open&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-open&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"undo_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;win.undo&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;Undo&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-undo&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"fullscreen_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;win.fullscreen&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;Fullscreen&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-fullscreen&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"leave_fullscreen_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;win.fullscreen&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;Leave Fullscreen&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-leave-fullscreen&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"  &lt;/object&gt;\n"
"&lt;/interface&gt;\n"

#. (itstool) path: section/p
#. (itstool) path: page/p
#: C/toolbar_builder.py.page:166 C/toolbar_builder.vala.page:144
msgid ""
"We now create the code below, which adds the toolbar from the file we just "
"created."
msgstr ""
"Τώρα δημιουργούμε τον παρακάτω κώδικα, που προσθέτει την εργαλειοθήκη από το "
"αρχείο που μόλις δημιουργήσαμε."

#. (itstool) path: section/code
#: C/toolbar_builder.py.page:167
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Toolbar Example\", application=app)\n"
"        self.set_default_size(400, 200)\n"
"\n"
"        # a grid to attach the toolbar (see below)\n"
"        grid = Gtk.Grid()\n"
"        self.add(grid)\n"
"        # we have to show the grid (and therefore the toolbar) with show(),\n"
"        # as show_all() would show also the buttons in the toolbar that we want to\n"
"        # be hidden (such as the leave_fullscreen button)\n"
"        grid.show()\n"
"\n"
"        # a builder to add the UI designed with Glade to the grid:\n"
"        builder = Gtk.Builder()\n"
"        # get the file (if it is there)\n"
"        try:\n"
"            builder.add_from_file(\"toolbar_builder.ui\")\n"
"        except:\n"
"            print \"file not found\"\n"
"            sys.exit()\n"
"        # and attach it to the grid\n"
"        grid.attach(builder.get_object(\"toolbar\"), 0, 0, 1, 1)\n"
"\n"
"        # two buttons that will be used later in a method\n"
"        self.fullscreen_button = builder.get_object(\"fullscreen_button\")\n"
"        self.leave_fullscreen_button = builder.get_object(\n"
"            \"leave_fullscreen_button\")\n"
"\n"
"        # create the actions that control the window, connect their signal to a\n"
"        # callback method (see below), add the action to the window:\n"
"\n"
"        # undo\n"
"        undo_action = Gio.SimpleAction.new(\"undo\", None)\n"
"        undo_action.connect(\"activate\", self.undo_callback)\n"
"        self.add_action(undo_action)\n"
"\n"
"        # and fullscreen\n"
"        fullscreen_action = Gio.SimpleAction.new(\"fullscreen\", None)\n"
"        fullscreen_action.connect(\"activate\", self.fullscreen_callback)\n"
"        self.add_action(fullscreen_action)\n"
"\n"
"    # callback for undo\n"
"    def undo_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Undo\\\".\"\n"
"\n"
"    # callback for fullscreen\n"
"    def fullscreen_callback(self, action, parameter):\n"
"        # check if the state is the same as Gdk.WindowState.FULLSCREEN, which\n"
"        # is a bit flag\n"
"        is_fullscreen = self.get_window().get_state(\n"
"        ) &amp; Gdk.WindowState.FULLSCREEN != 0\n"
"        if is_fullscreen:\n"
"            self.unfullscreen()\n"
"            self.leave_fullscreen_button.hide()\n"
"            self.fullscreen_button.show()\n"
"        else:\n"
"            self.fullscreen()\n"
"            self.fullscreen_button.hide()\n"
"            self.leave_fullscreen_button.show()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        # show the window - with show() not show_all() because that would show also\n"
"        # the leave_fullscreen button\n"
"        win.show()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # actions that control the application: create, connect their signal to a\n"
"        # callback method (see below), add the action to the application\n"
"\n"
"        # new\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        app.add_action(new_action)\n"
"\n"
"        # open\n"
"        open_action = Gio.SimpleAction.new(\"open\", None)\n"
"        open_action.connect(\"activate\", self.open_callback)\n"
"        app.add_action(open_action)\n"
"\n"
"    # callback for new\n"
"    def new_callback(self, action, parameter):\n"
"        print \"You clicked \\\"New\\\".\"\n"
"\n"
"    # callback for open\n"
"    def open_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Open\\\".\"\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Toolbar Example\", application=app)\n"
"        self.set_default_size(400, 200)\n"
"\n"
"        # a grid to attach the toolbar (see below)\n"
"        grid = Gtk.Grid()\n"
"        self.add(grid)\n"
"        # we have to show the grid (and therefore the toolbar) with show(),\n"
"        # as show_all() would show also the buttons in the toolbar that we want to\n"
"        # be hidden (such as the leave_fullscreen button)\n"
"        grid.show()\n"
"\n"
"        # a builder to add the UI designed with Glade to the grid:\n"
"        builder = Gtk.Builder()\n"
"        # get the file (if it is there)\n"
"        try:\n"
"            builder.add_from_file(\"toolbar_builder.ui\")\n"
"        except:\n"
"            print \"file not found\"\n"
"            sys.exit()\n"
"        # and attach it to the grid\n"
"        grid.attach(builder.get_object(\"toolbar\"), 0, 0, 1, 1)\n"
"\n"
"        # two buttons that will be used later in a method\n"
"        self.fullscreen_button = builder.get_object(\"fullscreen_button\")\n"
"        self.leave_fullscreen_button = builder.get_object(\n"
"            \"leave_fullscreen_button\")\n"
"\n"
"        # create the actions that control the window, connect their signal to a\n"
"        # callback method (see below), add the action to the window:\n"
"\n"
"        # undo\n"
"        undo_action = Gio.SimpleAction.new(\"undo\", None)\n"
"        undo_action.connect(\"activate\", self.undo_callback)\n"
"        self.add_action(undo_action)\n"
"\n"
"        # and fullscreen\n"
"        fullscreen_action = Gio.SimpleAction.new(\"fullscreen\", None)\n"
"        fullscreen_action.connect(\"activate\", self.fullscreen_callback)\n"
"        self.add_action(fullscreen_action)\n"
"\n"
"    # callback for undo\n"
"    def undo_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Undo\\\".\"\n"
"\n"
"    # callback for fullscreen\n"
"    def fullscreen_callback(self, action, parameter):\n"
"        # check if the state is the same as Gdk.WindowState.FULLSCREEN, which\n"
"        # is a bit flag\n"
"        is_fullscreen = self.get_window().get_state(\n"
"        ) &amp; Gdk.WindowState.FULLSCREEN != 0\n"
"        if is_fullscreen:\n"
"            self.unfullscreen()\n"
"            self.leave_fullscreen_button.hide()\n"
"            self.fullscreen_button.show()\n"
"        else:\n"
"            self.fullscreen()\n"
"            self.fullscreen_button.hide()\n"
"            self.leave_fullscreen_button.show()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        # show the window - with show() not show_all() because that would show also\n"
"        # the leave_fullscreen button\n"
"        win.show()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # actions that control the application: create, connect their signal to a\n"
"        # callback method (see below), add the action to the application\n"
"\n"
"        # new\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        app.add_action(new_action)\n"
"\n"
"        # open\n"
"        open_action = Gio.SimpleAction.new(\"open\", None)\n"
"        open_action.connect(\"activate\", self.open_callback)\n"
"        app.add_action(open_action)\n"
"\n"
"    # callback for new\n"
"    def new_callback(self, action, parameter):\n"
"        print \"You clicked \\\"New\\\".\"\n"
"\n"
"    # callback for open\n"
"    def open_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Open\\\".\"\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/toolbar_builder.py.page:172
msgid "Useful methods for Gtk.Builder"
msgstr "Χρήσιμες μέθοδοι για Gtk.Builder"

#. (itstool) path: section/p
#: C/toolbar_builder.py.page:173
msgid ""
"For the useful methods for a Toolbar widget, see <link xref=\"toolbar.py\"/>"
msgstr ""
"Για τις χρήσιμες μεθόδους για ένα γραφικό στοιχείο εργαλειοθήκης, δείτε "
"<link xref=\"toolbar.py\"/>"

#. (itstool) path: section/p
#: C/toolbar_builder.py.page:175
msgid "Gtk.Builder builds an interface from an XML UI definition."
msgstr "Το Gtk.Builder κατασκευάζει μια διεπαφή από έναν ορισμό UI XML."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:178
msgid ""
"<code>add_from_file(filename)</code> loads and parses the given file and "
"merges it with the current contents of the Gtk.Builder."
msgstr ""
"Η <code>add_from_file(filename)</code> φορτώνει και αναλύει το δεδομένο "
"αρχείο και το συγχωνεύει με τα τρέχοντα περιεχόμενα του Gtk.Builder."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:179
msgid ""
"<code>add_from_string(string)</code> parses the given string and merges it "
"with the current contents of the Gtk.Builder."
msgstr ""
"Η <code>add_from_file(string)</code> φορτώνει την δεδομένη συμβολοσειρά και "
"το συγχωνεύει με τα τρέχοντα περιεχόμενα του Gtk.Builder."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:180
msgid ""
"<code>add_objects_from_file(filename, object_ids)</code> is the same as "
"<code>add_from_file()</code>, but it loads only the objects with the ids "
"given in the <code>object_id</code>s list."
msgstr ""
"Η <code>add_objects_from_file(filename, object_ids)</code> είναι η ίδια με "
"<code>add_from_file()</code>, αλλά φορτώνει μόνο τα αντικείμενα με τις "
"ταυτότητες που δίνονται στη λίστα <code>object_id</code>."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:181
msgid ""
"<code>add_objects_from_string(filename, object_ids)</code> is the same as "
"<code>add_from_string()</code>, but it loads only the objects with the ids "
"given in the <code>object_id</code>s list."
msgstr ""
"Η <code>add_objects_from_string(filename, object_ids)</code> είναι η ίδια με "
"<code>add_from_string()</code>, αλλά φορτώνει μόνο τα αντικείμενα με τις "
"ταυτότητες που δίνονται στη λίστα <code>object_id</code>."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:182
msgid ""
"<code>get_object(object_id)</code> retrieves the widget with the id "
"<code>object_id</code> from the loaded objects in the builder."
msgstr ""
"Η <code>get_object(object_id)</code> ανακτά το γραφικό στοιχείο με την "
"ταυτότητα <code>object_id</code> από τα φορτωμένα αντικείμενα του δομητή."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:183
msgid "<code>get_objects()</code> returns all loaded objects."
msgstr "Η <code>get_objects()</code> επιστρέφει όλα τα φορτωμένα αντικείμενα."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:184
msgid ""
"<code>connect_signals(handler_object)</code> connects the signals to the "
"methods given in the <code>handler_object</code>. This can be any object "
"which contains keys or attributes that are called like the signal handler "
"names given in the interface description, e.g. a class or a dict. In line 39 "
"the signal <code>\"activate\"</code> from the action <code>undo_action</"
"code> is connected to the callback function <code>undo_callback()</code> "
"using <code><var>action</var>.connect(<var>signal</var>, <var>callback "
"function</var>)</code>. See <link xref=\"signals-callbacks.py\"/> for a more "
"detailed explanation."
msgstr ""
"Το <code>connect_signals(handler_object)</code> συνδέει τα σήματα στις "
"μεθόδους που δίνονται στον <code>handler_object</code>. Αυτό μπορεί να είναι "
"οποιοδήποτε αντικείμενο περιέχει κλειδιά ή γνωρίσματα που καλούνται όπως τα "
"ονόματα χειριστή σήματος που δίνονται στην περιγραφή διεπαφής, π.χ. μια "
"κλάση ή ένα λεξικό. Στη γραμμή 39 το σήμα <code>\"activate\"</code> από την "
"ενέργεια <code>undo_action</code> συνδέεται σε μια συνάρτηση επανάκλησης "
"<code>undo_callback()</code> χρησιμοποιώντας <code><var>action</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. Δείτε <link "
"xref=\"signals-callbacks.py\"/> για μια πιο λεπτομερή εξήγηση."

#. (itstool) path: info/title
#: C/toolbar_builder.vala.page:8
msgctxt "text"
msgid "Toolbar created using Glade (Vala)"
msgstr "Η εργαλειοθήκη δημιουργήθηκε χρησιμοποιώντας Glade (Vala)"

#. (itstool) path: page/p
#: C/toolbar_builder.vala.page:26
msgid ""
"This example is similar to <link xref=\"toolbar.vala\"/>, except we use "
"Glade to create the toolbar in an XML ui file."
msgstr ""
"Αυτό το παράδειγμα είναι παρόμοιο με <link xref=\"toolbar.vala\"/>, εκτός "
"από τη χρήση Glade για δημιουργία της γραμμής εργαλείων σε ένα αρχείο XML ui."

#. (itstool) path: item/p
#: C/toolbar_builder.vala.page:124
msgid ""
"When our program will first start, we don't want the <gui>Leave Fullscreen</"
"gui> ToolButton to be visible, since the application will not be in "
"fullscreen mode. You can set this in the <gui>Common</gui> tab, by clicking "
"the <gui>Visible</gui> property to <gui>No</gui>. The ToolButton will still "
"appear in the interface designer, but will behave correctly when the file is "
"loaded into your program code."
msgstr ""
"Όταν το πρόγραμμά μας θα ξεκινήσει στην αρχή, δεν θέλουμε το ToolButton "
"<gui>έξοδος από πλήρη οθόνη</gui> να είναι ορατό, αφού η εφαρμογή δεν θα "
"είναι σε λειτουργία πλήρους οθόνης. Μπορείτε να το ρυθμίσετε στην καρτέλα "
"<gui>κοινά</gui>, με κλικ στην ιδιότητα <gui>ορατό</gui> σε <gui>όχι</gui>. "
"Το ToolButton θα εξακολουθεί να εμφανίζεται στον σχεδιαστή διεπαφής, αλλά θα "
"συμπεριφέρεται σωστά, όταν το αρχείο φορτώνεται στον κώδικα προγράμματός σας."

#. (itstool) path: page/code
#: C/toolbar_builder.vala.page:145
#, no-wrap
msgid ""
"/* This is the Window */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Declare these two ToolButtons, as we will get them\n"
"\t * from the ui file (see lines 32 and 33), so we can\n"
"\t * hide() and show() them as needed.*/\n"
"\tGtk.ToolButton fullscreen_button;\n"
"\tGtk.ToolButton leave_fullscreen_button;\n"
"\n"
"\t/* Contstructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Toolbar Example\");\n"
"\n"
"\t\tthis.set_default_size (400, 200);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tthis.add (grid);\n"
"\t\tgrid.show ();\n"
"\n"
"\t\t/* add the toolbar from the ui file */\n"
"\t\tvar builder = new Gtk.Builder ();\n"
"\t\ttry {\n"
"\t\t\tbuilder.add_from_file (\"toolbar_builder.ui\");\n"
"\t\t}\n"
"\t\t/* Handle the exception */\n"
"\t\tcatch (Error e) {\n"
"\t\t\terror (\"Unable to load file: %s\", e.message);\n"
"\t\t}\n"
"\n"
"\t\tgrid.attach (builder.get_object (\"toolbar\") as Gtk.Toolbar, 0, 0, 1, 1);\n"
"\n"
"\t\t/* get these objects from the ui file so we can toggle between them */\n"
"\t\tfullscreen_button = builder.get_object (\"fullscreen_button\") as Gtk.ToolButton;\n"
"\t\tleave_fullscreen_button = builder.get_object (\"leave_fullscreen_button\") as Gtk.ToolButton;\n"
"\n"
"\t\t/* create the \"undo\" window action action */\n"
"\t\tvar undo_action = new SimpleAction (\"undo\", null);\n"
"\t\tundo_action.activate.connect (undo_callback);\n"
"\t\tthis.add_action (undo_action);\n"
"\n"
"\t\t/* create the \"fullscreen\" window action */\n"
"\t\tvar fullscreen_action = new SimpleAction (\"fullscreen\", null);\n"
"\t\tfullscreen_action.activate.connect (fullscreen_callback);\n"
"\t\tthis.add_action (fullscreen_action);\n"
"\t}\n"
"\n"
"\tvoid undo_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Undo\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid fullscreen_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\tif ((this.get_window ().get_state () &amp; Gdk.WindowState.FULLSCREEN) != 0) {\n"
"\t\t\tthis.unfullscreen ();\n"
"\t\t\tleave_fullscreen_button.hide ();\n"
"\t\t\tfullscreen_button.show ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tthis.fullscreen ();\n"
"\t\t\tfullscreen_button.hide ();\n"
"\t\t\tleave_fullscreen_button.show ();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Create the \"new\" action and add it to the app*/\n"
"\t\tvar new_action = new SimpleAction (\"new\", null);\n"
"\t\tnew_action.activate.connect (new_callback);\n"
"\t\tthis.add_action (new_action);\n"
"\n"
"\t\t/* Create the \"open\" action, and add it to the app */\n"
"\t\tvar open_action = new SimpleAction (\"open\", null);\n"
"\t\topen_action.activate.connect (open_callback);\n"
"\t\tthis.add_action (open_action);\n"
"\n"
"\t\t/* You could also add the action to the app menu\n"
"\t\t * if you wanted to.\n"
"\t\t */\n"
"\t\t//var menu = new Menu ();\n"
"\t\t//menu.append (\"New\", \"app.new\");\n"
"\t\t//this.app_menu = menu;\n"
"\t}\n"
"\n"
"\tvoid new_callback (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"New\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid open_callback (SimpleAction action, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Open\\\".\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates the application and runs it. */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* Αυτό είναι το παράθυρο */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Δηλώστε αυτά τα δύο ToolButtons, καθώς θα τα πάρετε\n"
"\t * από το αρχείο ui (δείτε γραμμές 32 και 33), έτσι μπορούμε να τα\n"
"\t * hide() και show() όταν χρειάζεται.*/\n"
"\tGtk.ToolButton fullscreen_button;\n"
"\tGtk.ToolButton leave_fullscreen_button;\n"
"\n"
"\t/* Κατασκευαστής */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Toolbar Example\");\n"
"\n"
"\t\tthis.set_default_size (400, 200);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tthis.add (grid);\n"
"\t\tgrid.show ();\n"
"\n"
"\t\t/* προσθήκη της εργαλειοθήκης από το αρχείο ui */\n"
"\t\tvar builder = new Gtk.Builder ();\n"
"\t\ttry {\n"
"\t\t\tbuilder.add_from_file (\"toolbar_builder.ui\");\n"
"\t\t}\n"
"\t\t/* Χειρισμός της εξαίρεσης */\n"
"\t\tcatch (Error e) {\n"
"\t\t\terror (\"Unable to load file: %s\", e.message);\n"
"\t\t}\n"
"\n"
"\t\tgrid.attach (builder.get_object (\"toolbar\") as Gtk.Toolbar, 0, 0, 1, 1);\n"
"\n"
"\t\t/* λήψη αυτών των αντικειμένων από το αρχείο ui έτσι ώστε να μπορούμε να τα εναλλάξουμε */\n"
"\t\tfullscreen_button = builder.get_object (\"fullscreen_button\") as Gtk.ToolButton;\n"
"\t\tleave_fullscreen_button = builder.get_object (\"leave_fullscreen_button\") as Gtk.ToolButton;\n"
"\n"
"\t\t/* δημιουργία της ενέργειας παραθύρου \"undo\"  */\n"
"\t\tvar undo_action = new SimpleAction (\"undo\", null);\n"
"\t\tundo_action.activate.connect (undo_callback);\n"
"\t\tthis.add_action (undo_action);\n"
"\n"
"\t\t/* δημιουργία της ενέργειας παραθύρου \"fullscreen\" */\n"
"\t\tvar fullscreen_action = new SimpleAction (\"fullscreen\", null);\n"
"\t\tfullscreen_action.activate.connect (fullscreen_callback);\n"
"\t\tthis.add_action (fullscreen_action);\n"
"\t}\n"
"\n"
"\tvoid undo_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Undo\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid fullscreen_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\tif ((this.get_window ().get_state () &amp; Gdk.WindowState.FULLSCREEN) != 0) {\n"
"\t\t\tthis.unfullscreen ();\n"
"\t\t\tleave_fullscreen_button.hide ();\n"
"\t\t\tfullscreen_button.show ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tthis.fullscreen ();\n"
"\t\t\tfullscreen_button.hide ();\n"
"\t\t\tleave_fullscreen_button.show ();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* Αυτή είναι η εφαρμογή */\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Δημιουργία της ενέργειας \"new\" και προσθήκη της στις εφαρμογές */\n"
"\t\tvar new_action = new SimpleAction (\"new\", null);\n"
"\t\tnew_action.activate.connect (new_callback);\n"
"\t\tthis.add_action (new_action);\n"
"\n"
"\t\t/* Δημιουργία της ενέργειας \"open\" και προσθήκη της στις εφαρμογές */\n"
"\t\tvar open_action = new SimpleAction (\"open\", null);\n"
"\t\topen_action.activate.connect (open_callback);\n"
"\t\tthis.add_action (open_action);\n"
"\n"
"\t\t/* Μπορείτε επίσης να προσθέσετε την ενέργεια στο μενού εφαρμογών\n"
"\t\t * αν θέλετε.\n"
"\t\t */\n"
"\t\t//var menu = new Menu ();\n"
"\t\t//menu.append (\"New\", \"app.new\");\n"
"\t\t//this.app_menu = menu;\n"
"\t}\n"
"\n"
"\tvoid new_callback (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"New\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid open_callback (SimpleAction action, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Open\\\".\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* Η κύρια συνάρτηση δημιουργεί την εφαρμογή και την εκτελεί. */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/tooltip.c.page:23 C/tooltip.js.page:23 C/tooltip.py.page:24
#: C/tooltip.vala.page:23
msgctxt "_"
msgid "external ref='media/tooltip.png' md5='41e35860a51e39cb48c71e57bb8fb1d0'"
msgstr ""
"external ref='media/tooltip.png' md5='41e35860a51e39cb48c71e57bb8fb1d0'"

#. (itstool) path: info/title
#: C/tooltip.c.page:8
msgctxt "text"
msgid "Tooltip (C)"
msgstr "Συμβουλή οθόνης (C)"

#. (itstool) path: info/desc
#: C/tooltip.c.page:19 C/tooltip.js.page:19 C/tooltip.py.page:20
#: C/tooltip.vala.page:19
msgid "Add tips to your widgets"
msgstr "Προσθέστε συμβουλές στα γραφικά στοιχεία σας"

#. (itstool) path: page/title
#: C/tooltip.c.page:22 C/tooltip.js.page:22 C/tooltip.py.page:23
#: C/tooltip.vala.page:22
msgid "Tooltip"
msgstr "Συμβουλή οθόνης"

#. (itstool) path: page/p
#: C/tooltip.c.page:24 C/tooltip.js.page:24 C/tooltip.py.page:25
#: C/tooltip.vala.page:24
msgid "A toolbar with a tooltip (with an image) for a button."
msgstr ""
"Μια εργαλειοθήκη με μια συμβουλή οθόνης (με μια εικόνα) για ένα κουμπί."

#. (itstool) path: note/p
#: C/tooltip.c.page:26
msgid ""
"This example builds on the <link xref=\"toolbar.c\">Toolbar</link> example."
msgstr ""
"Αυτό το παράδειγμα δομεί στο παράδειγμα <link xref=\"toolbar.c"
"\">εργαλειοθήκη</link>."

#. (itstool) path: section/code
#: C/tooltip.c.page:31
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static gboolean \n"
"undo_tooltip_callback (GtkStatusIcon *status_icon,\n"
"                       gint           x,\n"
"                       gint           y,\n"
"                       gboolean       keyboard_mode,\n"
"                       GtkTooltip    *tooltip,\n"
"                       gpointer       user_data)\n"
"{\n"
"  /* set the text for the tooltip */\n"
"  gtk_tooltip_set_text (tooltip, \"Undo your last action\");\n"
"   \n"
"  /* set an icon fot the tooltip */\n"
"  gtk_tooltip_set_icon_from_stock(tooltip, \"gtk-undo\", GTK_ICON_SIZE_MENU);\n"
"\n"
"  /* show the tooltip */\n"
"  return TRUE;\n"
"}\n"
"\n"
"\n"
"static void\n"
"undo_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"Undo\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"  GtkWidget *toolbar;\n"
"\n"
"  GtkToolItem *new_button;\n"
"  GtkToolItem *open_button;\n"
"  GtkToolItem *undo_button;\n"
"\n"
"  GtkStyleContext *style_context;\n"
"\n"
"  GSimpleAction *undo_action;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Toolbar with Tooltips Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 400, 200);\n"
"\n"
"  /* Here we begin to create the toolbar */\n"
"  toolbar = gtk_toolbar_new ();\n"
"\n"
"  /* Set the toolbar to be the primary toolbar of the application */\n"
"  style_context = gtk_widget_get_style_context (toolbar);\n"
"  gtk_style_context_add_class (style_context, GTK_STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"  /* Create a button for the \"new\" action, with a stock image */\n"
"  new_button = gtk_tool_button_new_from_stock (GTK_STOCK_NEW);\n"
"  gtk_tool_item_set_is_important (new_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), new_button, 0);\n"
"  gtk_widget_show (GTK_WIDGET (new_button));\n"
"\n"
"  /* Set the action name for the \"new\" action. We use \"app.new\" to\n"
"   * indicate that the action controls the application.\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (new_button), \"app.new\");\n"
"\n"
"  /*******************************\n"
"   * Tooltip for the New ToolItem:\n"
"   * a tooltip with text\n"
"   *******************************/\n"
"   gtk_tool_item_set_tooltip_text (new_button, \"Create a new file\");  \n"
"\n"
"  /* \"Open\" */\n"
"  open_button = gtk_tool_button_new_from_stock (GTK_STOCK_OPEN);\n"
"  gtk_tool_item_set_is_important (open_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), open_button, 1);\n"
"  gtk_widget_show (GTK_WIDGET (open_button));\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (open_button), \"app.open\");\n"
"\n"
"  /*******************************\n"
"   * Tooltip for the Open ToolItem:\n"
"   * a tooltip using Pango markup \n"
"   * language\n"
"   *******************************/\n"
"  gtk_tool_item_set_tooltip_text (open_button, \"Open an &lt;i&gt;existing&lt;/i&gt; file\");\n"
"\n"
"  /* \"Undo\" */\n"
"  undo_button = gtk_tool_button_new_from_stock (GTK_STOCK_UNDO);\n"
"  gtk_tool_item_set_is_important (undo_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), undo_button, 2);\n"
"  gtk_widget_show (GTK_WIDGET (undo_button));\n"
"\n"
"  /* In this case, we use \"win.undo\" to indicate that\n"
"   * the action controls only the window\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (undo_button), \"win.undo\");\n"
"\n"
"  /*******************************\n"
"   * Tooltip for the Undo ToolItem:\n"
"   * a tooltip with an image\n"
"   *******************************/\n"
"  gtk_widget_set_has_tooltip (GTK_WIDGET (undo_button), TRUE);\n"
"\n"
"  // Next, we connect the query_tooltip signal\n"
"  g_signal_connect (undo_button, \"query-tooltip\", G_CALLBACK (undo_tooltip_callback), NULL);\n"
"\n"
"  gtk_widget_set_hexpand (toolbar, TRUE);\n"
"  gtk_widget_show (toolbar);\n"
"\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_attach (GTK_GRID (grid), toolbar, 0, 0, 1, 1);\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"  gtk_widget_show (GTK_WIDGET (grid));\n"
"\n"
"  /* Use the action names to create the actions that control the window, and\n"
"   * connect them to the appropriate callbackfunctions.\n"
"   */\n"
"  undo_action = g_simple_action_new (\"undo\", NULL);\n"
"  g_signal_connect (undo_action, \"activate\", G_CALLBACK (undo_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (undo_action));\n"
"\n"
"  gtk_widget_show (window);\n"
"}\n"
"\n"
"\n"
"/* Callback function for the new action */\n"
"static void\n"
"new_callback (GSimpleAction *simple,\n"
"              GVariant      *parameter,\n"
"              gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"New\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"/* Callback function for the open action */\n"
"static void\n"
"open_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"Open\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"/* In this function, we create the actions in which control the window, and\n"
" * connect their signals to the appropriate callback function.\n"
" */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GSimpleAction *new_action;\n"
"  GSimpleAction *open_action;\n"
"\n"
"  new_action = g_simple_action_new (\"new\", NULL);\n"
"  g_signal_connect (new_action, \"activate\", G_CALLBACK (new_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (new_action));\n"
"\n"
"  open_action = g_simple_action_new (\"open\", NULL);\n"
"  g_signal_connect (open_action, \"activate\", G_CALLBACK (open_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (open_action));\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the application */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static gboolean \n"
"undo_tooltip_callback (GtkStatusIcon *status_icon,\n"
"                       gint           x,\n"
"                       gint           y,\n"
"                       gboolean       keyboard_mode,\n"
"                       GtkTooltip    *tooltip,\n"
"                       gpointer       user_data)\n"
"{\n"
"  /* Εισαγωγή του κειμένου για τη συμβουλή οθόνης */\n"
"  gtk_tooltip_set_text (tooltip, \"Undo your last action\");\n"
"   \n"
"  /* Εισαγωγή εικονιδίου για τη συμβουλή οθόνης */\n"
"  gtk_tooltip_set_icon_from_stock(tooltip, \"gtk-undo\", GTK_ICON_SIZE_MENU);\n"
"\n"
"  /* εμφάνιση της συμβουλής οθόνης */\n"
"  return TRUE;\n"
"}\n"
"\n"
"\n"
"static void\n"
"undo_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"Undo\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"  GtkWidget *toolbar;\n"
"\n"
"  GtkToolItem *new_button;\n"
"  GtkToolItem *open_button;\n"
"  GtkToolItem *undo_button;\n"
"\n"
"  GtkStyleContext *style_context;\n"
"\n"
"  GSimpleAction *undo_action;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Toolbar with Tooltips Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 400, 200);\n"
"\n"
"  /* Εδώ ξεκινά η δημιουργία της εργαλειοθήκης */\n"
"  toolbar = gtk_toolbar_new ();\n"
"\n"
"  /* Ορισμός της εργαλειοθήκης να είναι η κύρια εργαλειοθήκη της εφαρμογής */\n"
"  style_context = gtk_widget_get_style_context (toolbar);\n"
"  gtk_style_context_add_class (style_context, GTK_STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"  /* Δημιουργία κουμπιού για την ενέργεια \"new\", με μια έτοιμη εικόνα */\n"
"  new_button = gtk_tool_button_new_from_stock (GTK_STOCK_NEW);\n"
"  gtk_tool_item_set_is_important (new_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), new_button, 0);\n"
"  gtk_widget_show (GTK_WIDGET (new_button));\n"
"\n"
"  /* Ορισμός του ονόματος της ενέργειας για την ενέργεια \"new\". \n"
"   * Χρησιμοποιούμε \"app.new\" για να δείξουμε ότι η ενέργεια ελέγχει την εφαρμογή.\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (new_button), \"app.new\");\n"
"\n"
"  /*******************************\n"
"   * Συμβουλή οθόνης για το νέο στοιχείο εργαλείων:\n"
"   * μια συμβουλή οθόνης με κείμενο\n"
"   *******************************/\n"
"   gtk_tool_item_set_tooltip_text (new_button, \"Create a new file\");  \n"
"\n"
"  /* \"Open\" */\n"
"  open_button = gtk_tool_button_new_from_stock (GTK_STOCK_OPEN);\n"
"  gtk_tool_item_set_is_important (open_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), open_button, 1);\n"
"  gtk_widget_show (GTK_WIDGET (open_button));\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (open_button), \"app.open\");\n"
"\n"
"  /*******************************\n"
"   * Συμβουλή οθόνης για το στοιχείο εργαλείων άνοιγμα:\n"
"   * μια συμβουλή οθόνης χρησιμοποιώντας \n"
"   * τη γλώσσας επισήμανσης Pango \n"
"   *******************************/\n"
"  gtk_tool_item_set_tooltip_text (open_button, \"Open an &lt;i&gt;existing&lt;/i&gt; file\");\n"
"\n"
"  /* \"Undo\" */\n"
"  undo_button = gtk_tool_button_new_from_stock (GTK_STOCK_UNDO);\n"
"  gtk_tool_item_set_is_important (undo_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), undo_button, 2);\n"
"  gtk_widget_show (GTK_WIDGET (undo_button));\n"
"\n"
"  /* Σε αυτήν την περίπτωση, χρησιμοποιούμε \"win.undo\" για να\n"
"   * δείξουμε ότι η ενέργεια ελέγχει μόνο το παράθυρο\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (undo_button), \"win.undo\");\n"
"\n"
"  /*******************************\n"
"   * Συμβουλή οθόνης για το στοιχείο μενού αναίρεση:\n"
"   * μια συμβουλή οθόνης με μια εικόνα\n"
"   *******************************/\n"
"  gtk_widget_set_has_tooltip (GTK_WIDGET (undo_button), TRUE);\n"
"\n"
"  // Κατόπιν, συνδέουμε το σήμα query_tooltip\n"
"  g_signal_connect (undo_button, \"query-tooltip\", G_CALLBACK (undo_tooltip_callback), NULL);\n"
"\n"
"  gtk_widget_set_hexpand (toolbar, TRUE);\n"
"  gtk_widget_show (toolbar);\n"
"\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_attach (GTK_GRID (grid), toolbar, 0, 0, 1, 1);\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"  gtk_widget_show (GTK_WIDGET (grid));\n"
"\n"
"  /* Χρησιμοποιήστε τα ονόματα ενέργειας για τη δημιουργία ενεργειών που ελέγχουν το παράθυρο και συνδέστε τες με τις κατάλληλες\n"
"   *  συναρτήσεις επανάκλησης.\n"
"   */\n"
"  undo_action = g_simple_action_new (\"undo\", NULL);\n"
"  g_signal_connect (undo_action, \"activate\", G_CALLBACK (undo_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (undo_action));\n"
"\n"
"  gtk_widget_show (window);\n"
"}\n"
"\n"
"\n"
"/* Συνάρτηση επανάκλησης για τη νέα ενέργεια */\n"
"static void\n"
"new_callback (GSimpleAction *simple,\n"
"              GVariant      *parameter,\n"
"              gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"New\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"/* Συνάρτηση επανάκλησης για την ενέργεια ανοίγματος */\n"
"static void\n"
"open_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"Open\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"/* Σε αυτήν τη συνάρτηση, δημιουργούμε τις ενέργειες που ελέγχουν το παράθυρο και\n"
" * συνδέουν τα σήματά τους  με την κατάλληλη συνάρτηση επανάκλησης.\n"
" */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GSimpleAction *new_action;\n"
"  GSimpleAction *open_action;\n"
"\n"
"  new_action = g_simple_action_new (\"new\", NULL);\n"
"  g_signal_connect (new_action, \"activate\", G_CALLBACK (new_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (new_action));\n"
"\n"
"  open_action = g_simple_action_new (\"open\", NULL);\n"
"  g_signal_connect (open_action, \"activate\", G_CALLBACK (open_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (open_action));\n"
"}\n"
"\n"
"\n"
"\n"
"/* Συνάρτηση έναρξης για την εφαρμογή */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/tooltip.c.page:38 C/tooltip.py.page:59
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkTooltip.html"
"\">GtkTooltip</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkTooltip.html"
"\">GtkTooltip</link>"

#. (itstool) path: item/p
#: C/tooltip.c.page:40 C/tooltip.py.page:61
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkWidget.html"
"\">GtkWidget</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkWidget.html"
"\">GtkWidget</link>"

#. (itstool) path: item/p
#: C/tooltip.c.page:41 C/tooltip.js.page:40 C/tooltip.py.page:62
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/gtk3-Stock-Items.html"
"\">Stock Items</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/gtk3-Stock-Items.html"
"\">Stock Items</link>"

#. (itstool) path: info/title
#: C/tooltip.js.page:8
msgctxt "text"
msgid "Tooltip (JavaScript)"
msgstr "Συμβουλή οθόνης (JavaScript)"

#. (itstool) path: note/p
#: C/tooltip.js.page:25
msgid ""
"This example builds on the <link xref=\"toolbar.js\">Toolbar</link> example."
msgstr ""
"Αυτό το παράδειγμα δομεί στο παράδειγμα <link xref=\"toolbar.js"
"\">εργαλειοθήκη</link>."

#. (itstool) path: section/code
#: C/tooltip.js.page:30
#, no-wrap
msgid ""
"//!/usr/bin/gjs\n"
"\n"
"const Gdk = imports.gi.Gdk;\n"
"const GLib = imports.gi.GLib;\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk; \n"
"const Lang = imports.lang;\n"
"\n"
"const TooltipExample = new Lang.Class ({\n"
"    Name: 'Tooltip Example',\n"
"\n"
"    // Create the application \n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({ application_id: 'org.example.jstooltip' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this.window = new Gtk.ApplicationWindow ({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"Toolbar with Tooltips Example\",\n"
"                                                   default_width: 400,\n"
"                                                   default_height: 200,\n"
"                                                   border_width: 10 });\n"
"\n"
"        this.grid = new Gtk.Grid();\n"
"\n"
"        this.toolbar = this._createToolbar();\n"
"        this.toolbar.set_hexpand(true);\n"
"        this.toolbar.show();\n"
"\n"
"        this.grid.attach(this.toolbar, 0, 0, 1, 1);\n"
"\n"
"        this.window.add(this.grid);\n"
"\n"
"        this._newAction = new Gio.SimpleAction({ name: \"new\" });\n"
"        this._newAction.connect(\"activate\", Lang.bind(this, this._newCallback));\n"
"        this.window.add_action(this._newAction);\n"
"\n"
"        this._openAction = new Gio.SimpleAction({ name: \"open\" });\n"
"        this._openAction.connect(\"activate\", Lang.bind(this, this._openCallback));\n"
"        this.window.add_action(this._openAction);\n"
"\n"
"        this._undoAction = new Gio.SimpleAction({ name: \"undo\" });\n"
"        this._undoAction.connect(\"activate\", Lang.bind(this, this._undoCallback));\n"
"        this.window.add_action(this._undoAction);\n"
"\n"
"        this._fullScreenAction = new Gio.SimpleAction({ name: \"fullscreenToggle\" });\n"
"        this._fullScreenAction.connect(\"activate\", Lang.bind(this, this._fullScreenCallback));\n"
"        this.window.add_action(this._fullScreenAction);\n"
"\n"
"        this.window.show_all();\n"
"   },\n"
"\n"
"     _createToolbar: function(){\n"
"        this.toolbar = new Gtk.Toolbar();\n"
"        this.toolbar.get_style_context().add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"        // button for the \"new\" action\n"
"        this.newButton = Gtk.ToolButton.new_from_stock(Gtk.STOCK_NEW);\n"
"        // with a tooltip with a given text        \n"
"        this.newButton.set_tooltip_text(\"Create a new file\");\n"
"        this.newButton.set_is_important(true);\n"
"        this.toolbar.insert(this.newButton, 0);\n"
"        this.newButton.show();\n"
"        this.newButton.set_action_name(\"win.new\");\n"
"\n"
"        // button for the \"open\" action\n"
"        this.openButton = Gtk.ToolButton.new_from_stock(Gtk.STOCK_OPEN);\n"
"        // with a tooltip with a given text in the Pango markup language        \n"
"        this.openButton.set_tooltip_markup(\"Open an &lt;i&gt;existing&lt;/i&gt; file\");\n"
"        this.openButton.set_is_important(true);\n"
"        this.toolbar.insert(this.openButton, 1);\n"
"        this.openButton.show();\n"
"        this.openButton.set_action_name(\"win.open\");\n"
"\n"
"        // button for the \"undo\" action\n"
"        this.undoButton = Gtk.ToolButton.new_from_stock(Gtk.STOCK_UNDO);\n"
"        // with a tooltip with an image\n"
"        // set true the property \"has-tooltip\"        \n"
"        this.undoButton.set_property(\"has-tooltip\", true);\n"
"        // connect to the callback function that for the tooltip\n"
"        // with the signal \"query-tooltip\"\n"
"        this.undoButton.connect(\"query-tooltip\", Lang.bind(this, this._undoTooltipCallback));\n"
"        this.undoButton.set_is_important(true);\n"
"        this.toolbar.insert(this.undoButton, 2);\n"
"        this.undoButton.show();\n"
"        this.undoButton.set_action_name(\"win.undo\");\n"
"\n"
"        // button for the \"fullscreen/leave fullscreen\" action\n"
"        this.fullscreenButton = Gtk.ToolButton.new_from_stock(Gtk.STOCK_FULLSCREEN);\n"
"        this.fullscreenButton.set_is_important(true);\n"
"        this.toolbar.insert(this.fullscreenButton, 3);\n"
"        this.fullscreenButton.set_action_name(\"win.fullscreenToggle\");\n"
"\n"
"        return this.toolbar;\n"
"    },\n"
"\n"
"    _newCallback: function(action, parameter) {\n"
"        print(\"You clicked \\\"New\\\".\");\n"
"    },\n"
"\n"
"    _openCallback: function(action, parameter) {\n"
"        print(\"You clicked \\\"Open\\\".\");\n"
"    },\n"
"\n"
"    // the callback function for the tooltip of the \"undo\" button\n"
"    _undoTooltipCallback: function(widget, x, y, keyboard_mode, tooltip) {\n"
"        // set the text for the tooltip\n"
"        tooltip.set_text(\"Undo your last action\");\n"
"        // set an icon fot the tooltip\n"
"        tooltip.set_icon_from_stock(Gtk.STOCK_UNDO, Gtk.IconSize.MENU);\n"
"        // show the tooltip\n"
"        return true;\n"
"    },\n"
"\n"
"    _undoCallback: function(action, parameter) {\n"
"        print(\"You clicked \\\"Undo\\\".\");\n"
"    },\n"
"\n"
"    _fullScreenCallback: function() {\n"
"        if ((this.window.get_window().get_state() &amp; Gdk.WindowState.FULLSCREEN) != 0 ){\n"
"            this.fullscreenButton.set_stock_id(Gtk.STOCK_FULLSCREEN);\n"
"            this.fullscreenButton.set_tooltip_text(\"Make your window fullscreen\");\n"
"            this.window.unfullscreen();\n"
"        } else {\n"
"            this.fullscreenButton.set_stock_id(Gtk.STOCK_LEAVE_FULLSCREEN);\n"
"            this.fullscreenButton.set_tooltip_text(\"Leave fullscreen\");\n"
"            this.window.fullscreen();\n"
"        }\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new TooltipExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"//!/usr/bin/gjs\n"
"\n"
"const Gdk = imports.gi.Gdk;\n"
"const GLib = imports.gi.GLib;\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk; \n"
"const Lang = imports.lang;\n"
"\n"
"const TooltipExample = new Lang.Class ({\n"
"    Name: 'Tooltip Example',\n"
"\n"
"    // Δημιουργία της εφαρμογής\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({ application_id: 'org.example.jstooltip' });\n"
"\n"
"        // Σύνδεση των σημάτων 'activate' και 'startup' για τις συναρτήσεις επανάκλησης\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα'activate' παρουσιάζει παράθυρα όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function () {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this.window = new Gtk.ApplicationWindow ({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"Toolbar with Tooltips Example\",\n"
"                                                   default_width: 400,\n"
"                                                   default_height: 200,\n"
"                                                   border_width: 10 });\n"
"\n"
"        this.grid = new Gtk.Grid();\n"
"\n"
"        this.toolbar = this._createToolbar();\n"
"        this.toolbar.set_hexpand(true);\n"
"        this.toolbar.show();\n"
"\n"
"        this.grid.attach(this.toolbar, 0, 0, 1, 1);\n"
"\n"
"        this.window.add(this.grid);\n"
"\n"
"        this._newAction = new Gio.SimpleAction({ name: \"new\" });\n"
"        this._newAction.connect(\"activate\", Lang.bind(this, this._newCallback));\n"
"        this.window.add_action(this._newAction);\n"
"\n"
"        this._openAction = new Gio.SimpleAction({ name: \"open\" });\n"
"        this._openAction.connect(\"activate\", Lang.bind(this, this._openCallback));\n"
"        this.window.add_action(this._openAction);\n"
"\n"
"        this._undoAction = new Gio.SimpleAction({ name: \"undo\" });\n"
"        this._undoAction.connect(\"activate\", Lang.bind(this, this._undoCallback));\n"
"        this.window.add_action(this._undoAction);\n"
"\n"
"        this._fullScreenAction = new Gio.SimpleAction({ name: \"fullscreenToggle\" });\n"
"        this._fullScreenAction.connect(\"activate\", Lang.bind(this, this._fullScreenCallback));\n"
"        this.window.add_action(this._fullScreenAction);\n"
"\n"
"        this.window.show_all();\n"
"   },\n"
"\n"
"     _createToolbar: function(){\n"
"        this.toolbar = new Gtk.Toolbar();\n"
"        this.toolbar.get_style_context().add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"        // κουμπί για την ενέργεια \"new\"\n"
"        this.newButton = Gtk.ToolButton.new_from_stock(Gtk.STOCK_NEW);\n"
"        // με μια συμβουλή οθόνης με δοσμένο κείμενο        \n"
"        this.newButton.set_tooltip_text(\"Create a new file\");\n"
"        this.newButton.set_is_important(true);\n"
"        this.toolbar.insert(this.newButton, 0);\n"
"        this.newButton.show();\n"
"        this.newButton.set_action_name(\"win.new\");\n"
"\n"
"        // κουμπί για την ενέργεια \"open\"\n"
"        this.openButton = Gtk.ToolButton.new_from_stock(Gtk.STOCK_OPEN);\n"
"        // με μια συμβουλή οθόνης με δοσμένο κείμενο στη γλώσσα σήμανσης Pango        \n"
"        this.openButton.set_tooltip_markup(\"Open an &lt;i&gt;existing&lt;/i&gt; file\");\n"
"        this.openButton.set_is_important(true);\n"
"        this.toolbar.insert(this.openButton, 1);\n"
"        this.openButton.show();\n"
"        this.openButton.set_action_name(\"win.open\");\n"
"\n"
"        // κουμπί για την ενέργεια \"undo\"\n"
"        this.undoButton = Gtk.ToolButton.new_from_stock(Gtk.STOCK_UNDO);\n"
"        // με μια συμβουλή οθόνης με εικόνα\n"
"        // ορισμός σε αληθή της ιδιότητας \"has-tooltip\"        \n"
"        this.undoButton.set_property(\"has-tooltip\", true);\n"
"        // σύνδεση με την συνάρτηση επανάκλησης για τη συμβουλή οθόνης\n"
"        // με το σήμα \"query-tooltip\"\n"
"        this.undoButton.connect(\"query-tooltip\", Lang.bind(this, this._undoTooltipCallback));\n"
"        this.undoButton.set_is_important(true);\n"
"        this.toolbar.insert(this.undoButton, 2);\n"
"        this.undoButton.show();\n"
"        this.undoButton.set_action_name(\"win.undo\");\n"
"\n"
"        // κουμπί για την ενέργεια \"fullscreen/leave fullscreen\"\n"
"        this.fullscreenButton = Gtk.ToolButton.new_from_stock(Gtk.STOCK_FULLSCREEN);\n"
"        this.fullscreenButton.set_is_important(true);\n"
"        this.toolbar.insert(this.fullscreenButton, 3);\n"
"        this.fullscreenButton.set_action_name(\"win.fullscreenToggle\");\n"
"\n"
"        return this.toolbar;\n"
"    },\n"
"\n"
"    _newCallback: function(action, parameter) {\n"
"        print(\"You clicked \\\"New\\\".\");\n"
"    },\n"
"\n"
"    _openCallback: function(action, parameter) {\n"
"        print(\"You clicked \\\"Open\\\".\");\n"
"    },\n"
"\n"
"    // η συνάρτηση επανάκλησης για τη συμβουλή οθόνης του κουμπιού \"undo\"\n"
"    _undoTooltipCallback: function(widget, x, y, keyboard_mode, tooltip) {\n"
"        // εισαγωγή του κειμένου για τη συμβουλή οθόνης\n"
"        tooltip.set_text(\"Undo your last action\");\n"
"        // εισαγωγή εικονιδίου για τη συμβουλή οθόνης\n"
"        tooltip.set_icon_from_stock(Gtk.STOCK_UNDO, Gtk.IconSize.MENU);\n"
"        // εμφάνιση της συμβουλής οθόνης\n"
"        return true;\n"
"    },\n"
"\n"
"    _undoCallback: function(action, parameter) {\n"
"        print(\"You clicked \\\"Undo\\\".\");\n"
"    },\n"
"\n"
"    _fullScreenCallback: function() {\n"
"        if ((this.window.get_window().get_state() &amp; Gdk.WindowState.FULLSCREEN) != 0 ){\n"
"            this.fullscreenButton.set_stock_id(Gtk.STOCK_FULLSCREEN);\n"
"            this.fullscreenButton.set_tooltip_text(\"Make your window fullscreen\");\n"
"            this.window.unfullscreen();\n"
"        } else {\n"
"            this.fullscreenButton.set_stock_id(Gtk.STOCK_LEAVE_FULLSCREEN);\n"
"            this.fullscreenButton.set_tooltip_text(\"Leave fullscreen\");\n"
"            this.window.fullscreen();\n"
"        }\n"
"    }\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new TooltipExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/tooltip.js.page:37
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Tooltip.html"
"\">GtkTooltip</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Tooltip.html"
"\">Συμβουλή οθόνης Gtk (GtkTooltip)</link>"

#. (itstool) path: item/p
#: C/tooltip.js.page:38
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Toolbar.html"
"\">GtkToolbar</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Toolbar.html"
"\">Εργαλειοθήκη Gtk (GtkToolbar)</link>"

#. (itstool) path: item/p
#: C/tooltip.js.page:39
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Widget.html"
"\">GtkWidget</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Widget.html"
"\">Γραφικό στοιχείο Gtk (GtkWidget)</link>"

#. (itstool) path: info/title
#: C/tooltip.py.page:8
msgctxt "text"
msgid "Tooltip (Python)"
msgstr "Συμβουλή οθόνης (Python)"

#. (itstool) path: note/p
#: C/tooltip.py.page:26
msgid ""
"This example builds on the <link xref=\"toolbar.py\">Toolbar</link> example."
msgstr ""
"Αυτό το παράδειγμα δομεί στο παράδειγμα <link xref=\"toolbar.py"
"\">εργαλειοθήκη</link>."

#. (itstool) path: section/code
#: C/tooltip.py.page:32
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(\n"
"            self, title=\"Toolbar with Tooltips Example\", application=app)\n"
"        self.set_default_size(400, 200)\n"
"\n"
"        grid = Gtk.Grid()\n"
"\n"
"        toolbar = self.create_toolbar()\n"
"        toolbar.set_hexpand(True)\n"
"        toolbar.show()\n"
"\n"
"        grid.attach(toolbar, 0, 0, 1, 1)\n"
"\n"
"        self.add(grid)\n"
"\n"
"        undo_action = Gio.SimpleAction.new(\"undo\", None)\n"
"        undo_action.connect(\"activate\", self.undo_callback)\n"
"        self.add_action(undo_action)\n"
"\n"
"        fullscreen_action = Gio.SimpleAction.new(\"fullscreen\", None)\n"
"        fullscreen_action.connect(\"activate\", self.fullscreen_callback)\n"
"        self.add_action(fullscreen_action)\n"
"\n"
"    def create_toolbar(self):\n"
"        toolbar = Gtk.Toolbar()\n"
"        toolbar.get_style_context().add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR)\n"
"\n"
"        # button for the \"new\" action\n"
"        new_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_NEW)\n"
"        # with a tooltip with a given text\n"
"        new_button.set_tooltip_text(\"Create a new file\")\n"
"        new_button.set_is_important(True)\n"
"        toolbar.insert(new_button, 0)\n"
"        new_button.show()\n"
"        new_button.set_action_name(\"app.new\")\n"
"\n"
"        # button for the \"open\" action\n"
"        open_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_OPEN)\n"
"        # with a tooltip with a given text in the Pango markup language\n"
"        open_button.set_tooltip_markup(\"Open an &lt;i&gt;existing&lt;/i&gt; file\")\n"
"        open_button.set_is_important(True)\n"
"        toolbar.insert(open_button, 1)\n"
"        open_button.show()\n"
"        open_button.set_action_name(\"app.open\")\n"
"\n"
"        # button for the \"undo\" action\n"
"        undo_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_UNDO)\n"
"        # with a tooltip with an image\n"
"        # set True the property \"has-tooltip\"\n"
"        undo_button.set_property(\"has-tooltip\", True)\n"
"        # connect to the callback function that for the tooltip\n"
"        # with the signal \"query-tooltip\"\n"
"        undo_button.connect(\"query-tooltip\", self.undo_tooltip_callback)\n"
"        undo_button.set_is_important(True)\n"
"        toolbar.insert(undo_button, 2)\n"
"        undo_button.show()\n"
"        undo_button.set_action_name(\"win.undo\")\n"
"\n"
"        # button for the \"fullscreen/leave fullscreen\" action\n"
"        self.fullscreen_button = Gtk.ToolButton.new_from_stock(\n"
"            Gtk.STOCK_FULLSCREEN)\n"
"        self.fullscreen_button.set_is_important(True)\n"
"        toolbar.insert(self.fullscreen_button, 3)\n"
"        self.fullscreen_button.set_action_name(\"win.fullscreen\")\n"
"\n"
"        return toolbar\n"
"\n"
"    # the callback function for the tooltip of the \"undo\" button\n"
"    def undo_tooltip_callback(self, widget, x, y, keyboard_mode, tooltip):\n"
"        # set the text for the tooltip\n"
"        tooltip.set_text(\"Undo your last action\")\n"
"        # set an icon fot the tooltip\n"
"        tooltip.set_icon_from_stock(\"gtk-undo\", Gtk.IconSize.MENU)\n"
"        # show the tooltip\n"
"        return True\n"
"\n"
"    def undo_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Undo\\\".\"\n"
"\n"
"    def fullscreen_callback(self, action, parameter):\n"
"        is_fullscreen = self.get_window().get_state(\n"
"        ) &amp; Gdk.WindowState.FULLSCREEN != 0\n"
"        if not is_fullscreen:\n"
"            self.fullscreen_button.set_stock_id(Gtk.STOCK_LEAVE_FULLSCREEN)\n"
"            self.fullscreen()\n"
"        else:\n"
"            self.fullscreen_button.set_stock_id(Gtk.STOCK_FULLSCREEN)\n"
"            self.unfullscreen()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        app.add_action(new_action)\n"
"\n"
"        open_action = Gio.SimpleAction.new(\"open\", None)\n"
"        open_action.connect(\"activate\", self.open_callback)\n"
"        app.add_action(open_action)\n"
"\n"
"    def new_callback(self, action, parameter):\n"
"        print \"You clicked \\\"New\\\".\"\n"
"\n"
"    def open_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Open\\\".\"\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(\n"
"            self, title=\"Toolbar with Tooltips Example\", application=app)\n"
"        self.set_default_size(400, 200)\n"
"\n"
"        grid = Gtk.Grid()\n"
"\n"
"        toolbar = self.create_toolbar()\n"
"        toolbar.set_hexpand(True)\n"
"        toolbar.show()\n"
"\n"
"        grid.attach(toolbar, 0, 0, 1, 1)\n"
"\n"
"        self.add(grid)\n"
"\n"
"        undo_action = Gio.SimpleAction.new(\"undo\", None)\n"
"        undo_action.connect(\"activate\", self.undo_callback)\n"
"        self.add_action(undo_action)\n"
"\n"
"        fullscreen_action = Gio.SimpleAction.new(\"fullscreen\", None)\n"
"        fullscreen_action.connect(\"activate\", self.fullscreen_callback)\n"
"        self.add_action(fullscreen_action)\n"
"\n"
"    def create_toolbar(self):\n"
"        toolbar = Gtk.Toolbar()\n"
"        toolbar.get_style_context().add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR)\n"
"\n"
"        # button for the \"new\" action\n"
"        new_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_NEW)\n"
"        # with a tooltip with a given text\n"
"        new_button.set_tooltip_text(\"Create a new file\")\n"
"        new_button.set_is_important(True)\n"
"        toolbar.insert(new_button, 0)\n"
"        new_button.show()\n"
"        new_button.set_action_name(\"app.new\")\n"
"\n"
"        # button for the \"open\" action\n"
"        open_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_OPEN)\n"
"        # with a tooltip with a given text in the Pango markup language\n"
"        open_button.set_tooltip_markup(\"Open an &lt;i&gt;existing&lt;/i&gt; file\")\n"
"        open_button.set_is_important(True)\n"
"        toolbar.insert(open_button, 1)\n"
"        open_button.show()\n"
"        open_button.set_action_name(\"app.open\")\n"
"\n"
"        # button for the \"undo\" action\n"
"        undo_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_UNDO)\n"
"        # with a tooltip with an image\n"
"        # set True the property \"has-tooltip\"\n"
"        undo_button.set_property(\"has-tooltip\", True)\n"
"        # connect to the callback function that for the tooltip\n"
"        # with the signal \"query-tooltip\"\n"
"        undo_button.connect(\"query-tooltip\", self.undo_tooltip_callback)\n"
"        undo_button.set_is_important(True)\n"
"        toolbar.insert(undo_button, 2)\n"
"        undo_button.show()\n"
"        undo_button.set_action_name(\"win.undo\")\n"
"\n"
"        # button for the \"fullscreen/leave fullscreen\" action\n"
"        self.fullscreen_button = Gtk.ToolButton.new_from_stock(\n"
"            Gtk.STOCK_FULLSCREEN)\n"
"        self.fullscreen_button.set_is_important(True)\n"
"        toolbar.insert(self.fullscreen_button, 3)\n"
"        self.fullscreen_button.set_action_name(\"win.fullscreen\")\n"
"\n"
"        return toolbar\n"
"\n"
"    # the callback function for the tooltip of the \"undo\" button\n"
"    def undo_tooltip_callback(self, widget, x, y, keyboard_mode, tooltip):\n"
"        # set the text for the tooltip\n"
"        tooltip.set_text(\"Undo your last action\")\n"
"        # set an icon fot the tooltip\n"
"        tooltip.set_icon_from_stock(\"gtk-undo\", Gtk.IconSize.MENU)\n"
"        # show the tooltip\n"
"        return True\n"
"\n"
"    def undo_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Undo\\\".\"\n"
"\n"
"    def fullscreen_callback(self, action, parameter):\n"
"        is_fullscreen = self.get_window().get_state(\n"
"        ) &amp; Gdk.WindowState.FULLSCREEN != 0\n"
"        if not is_fullscreen:\n"
"            self.fullscreen_button.set_stock_id(Gtk.STOCK_LEAVE_FULLSCREEN)\n"
"            self.fullscreen()\n"
"        else:\n"
"            self.fullscreen_button.set_stock_id(Gtk.STOCK_FULLSCREEN)\n"
"            self.unfullscreen()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        app.add_action(new_action)\n"
"\n"
"        open_action = Gio.SimpleAction.new(\"open\", None)\n"
"        open_action.connect(\"activate\", self.open_callback)\n"
"        app.add_action(open_action)\n"
"\n"
"    def new_callback(self, action, parameter):\n"
"        print \"You clicked \\\"New\\\".\"\n"
"\n"
"    def open_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Open\\\".\"\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/tooltip.py.page:36
msgid "Useful methods for a Tooltip widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο συμβουλής οθόνης"

#. (itstool) path: section/p
#: C/tooltip.py.page:38
msgid ""
"<code>set_tooltip_text(text)</code> and <code>set_tooltip_markup(text)</"
"code> can be used to add a tooltip of plain text (or text in the Pango "
"Markup Language) to a widget."
msgstr ""
"<code>set_tooltip_text(text)</code> και <code>set_tooltip_markup(text)</"
"code> μπορούν να χρησιμοποιηθούν για να προσθέσουν μια συμβουλή οθόνης απλού "
"κειμένου (ή κειμένου στην γλώσσα επισήμανσης Pango) σε ένα γραφικό στοιχείο."

#. (itstool) path: section/p
#: C/tooltip.py.page:39
msgid "For more complex tooltips, for instance for a tooltip with an image:"
msgstr ""
"Για πιο σύνθετες συμβουλές οθόνης, για παράδειγμα για μια συμβουλή οθόνης με "
"μια εικόνα:"

#. (itstool) path: item/p
#: C/tooltip.py.page:41
msgid ""
"Set the <code>\"has-tooltip\"</code> property of the widget to <code>True</"
"code>; this will make GTK+ monitor the widget for motion and related events "
"which are needed to determine when and where to show a tooltip."
msgstr ""
"Ορίστε την ιδιότητα <code>\"has-tooltip\"</code> του γραφικού στοιχείου σε "
"<code>True</code>· αυτό θα κάνει το GTK+ να παρακολουθήσει το γραφικό "
"στοιχείο για κίνηση και σχετικά συμβάντα που απαιτούνται για προσδιορισμό "
"πότε και πού θα εμφανιστεί μια συμβουλή οθόνης."

#. (itstool) path: item/p
#: C/tooltip.py.page:42
msgid ""
"Connect to the <code>\"query-tooltip\"</code> signal. This signal will be "
"emitted when a tooltip is supposed to be shown. One of the arguments passed "
"to the signal handler is a GtkTooltip object. This is the object that we are "
"about to display as a tooltip, and can be manipulated in your callback using "
"functions like <code>set_icon()</code>. There are functions for setting the "
"tooltip's markup (<code>set_markup(text)</code>), setting an image from a "
"stock icon (<code>set_icon_from_stock(stock_id, size)</code>), or even "
"putting in a custom widget (<code>set_custom(widget)</code>)."
msgstr ""
"Συνδεθείτε με το σήμα <code>\"query-tooltip\"</code>. Αυτό το σήμα "
"εκπέμπεται όταν η συμβουλή οθόνης υποτίθεται ότι εμφανίζεται. Ένα από τα "
"ορίσματα που πέρασαν στον χειριστή σήματος είναι ένα αντικείμενο GtkTooltip. "
"Αυτό είναι το αντικείμενο που πρόκειται να εμφανίσουμε ως συμβουλή οθόνης "
"και μπορεί να επεξεργαστεί στην επανάκλησή σας χρησιμοποιώντας συναρτήσεις "
"όπως <code>set_icon()</code>. Υπάρχουν συναρτήσεις για ρύθμιση της "
"επισήμανσης της συμβουλής οθόνης (<code>set_markup(text)</code>), ρύθμιση "
"μιας εικόνας από ένα εικονίδιο παρακαταθήκης "
"(<code>set_icon_from_stock(stock_id, size)</code>), ή ακόμα τοποθέτηση σε "
"ένα προσαρμοσμένο γραφικό στοιχείο (<code>set_custom(widget)</code>)."

#. (itstool) path: item/p
#: C/tooltip.py.page:43
msgid ""
"Return <code>True</code> from your query-tooltip handler. This causes the "
"tooltip to be show. If you return <code>False</code>, it will not be shown."
msgstr ""
"Επιστροφή <code>True</code> από τον χειριστή σας ερωτήματος συμβουλής "
"οθόνης. Αυτό προκαλεί την εμφάνιση της συμβουλής οθόνης. Εάν επιστρέψετε "
"<code>False</code>, δεν θα εμφανιστεί."

#. (itstool) path: section/p
#: C/tooltip.py.page:46
msgid ""
"In the probably rare case where you want to have even more control over the "
"tooltip that is about to be shown, you can set your own GtkWindow which will "
"be used as tooltip window. This works as follows:"
msgstr ""
"Στην προφανώς σπάνια περίπτωση όπου θέλετε να έχετε ακόμα περισσότερο έλεγχο "
"στην συμβουλή οθόνης που πρόκειται να εμφανιστεί, μπορείτε να ορίσετε το "
"δικό σας GtkWindow που θα χρησιμοποιηθεί ως παράθυρο συμβουλής οθόνης. Αυτό "
"δουλεύει ως εξής:"

#. (itstool) path: item/p
#: C/tooltip.py.page:48
msgid ""
"Set <code>\"has-tooltip\"</code> and connect to <code>\"query-tooltip\"</"
"code> as before."
msgstr ""
"Ορίστε <code>\"has-tooltip\"</code> και συνδεθείτε στο <code>\"query-tooltip"
"\"</code> όπως πριν."

#. (itstool) path: item/p
#: C/tooltip.py.page:49
msgid ""
"Use <code>set_tooltip_window()</code> on the widget to set a GtkWindow "
"created by you as tooltip window."
msgstr ""
"Χρησιμοποιήστε <code>set_tooltip_window()</code> στο γραφικό στοιχείο για "
"να ορίσετε ένα GtkWindow που δημιουργήθηκε από εσάς ως παράθυρο συμβουλής "
"οθόνης."

#. (itstool) path: item/p
#: C/tooltip.py.page:50
msgid ""
"In the <code>\"query-tooltip\"</code> callback you can access your window "
"using <code>get_tooltip_window()</code> and manipulate as you wish. The "
"semantics of the return value are exactly as before, return <code>True</"
"code> to show the window, <code>False</code> to not show it."
msgstr ""
"Στην επανάκληση <code>\"query-tooltip\"</code> μπορείτε να προσπελάσετε το "
"παράθυρο σας χρησιμοποιώντας <code>get_tooltip_window()</code> και να το "
"χειριστείτε όπως επιθυμείτε. Η σημασιολογία της τιμής επιστροφής είναι "
"ακριβώς όπως πριν, επιστροφή <code>True</code> για να εμφανίσετε το "
"παράθυρο, <code>False</code> για να μην το εμφανίσετε."

#. (itstool) path: info/title
#: C/tooltip.vala.page:8
msgctxt "text"
msgid "Tooltip (Vala)"
msgstr "Συμβουλή οθόνης (Vala)"

#. (itstool) path: note/p
#: C/tooltip.vala.page:25
msgid ""
"This example builds on the <link xref=\"toolbar.vala\">Toolbar</link> "
"example."
msgstr ""
"Αυτό το παράδειγμα δομεί στο παράδειγμα <link xref=\"toolbar.vala"
"\">εργαλειοθήκη</link>."

#. (itstool) path: section/code
#: C/tooltip.vala.page:31
#, no-wrap
msgid ""
"/* This is the Window */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Instance variables belonging to the window */\n"
"\tGtk.Toolbar toolbar;\n"
"\tGtk.ToolButton new_button;\n"
"\tGtk.ToolButton open_button;\n"
"\tGtk.ToolButton undo_button;\n"
"\tGtk.ToolButton fullscreen_button;\n"
"\tGtk.ToolButton leave_fullscreen_button;\n"
"\n"
"\t/* Contstructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Toolbar with Tooltips Example\");\n"
"\n"
"\t\tthis.set_default_size (400, 200);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tthis.add (grid);\n"
"\t\tgrid.show ();\n"
"\n"
"\t\tcreate_toolbar ();\n"
"\t\ttoolbar.set_hexpand (true);\n"
"\t\tgrid.attach (toolbar, 0, 0, 1, 1);\n"
"\t\ttoolbar.show ();\n"
"\n"
"\t\t/* create the \"undo\" window action action */\n"
"\t\tvar undo_action = new SimpleAction (\"undo\", null);\n"
"\t\tundo_action.activate.connect (undo_callback);\n"
"\t\tthis.add_action (undo_action);\n"
"\n"
"\t\t/* create the \"fullscreen\" window action */\n"
"\t\tvar fullscreen_action = new SimpleAction (\"fullscreen\", null);\n"
"\t\tfullscreen_action.activate.connect (fullscreen_callback);\n"
"\t\tthis.add_action (fullscreen_action);\n"
"\t}\n"
"\n"
"\t/* Callback for query_tooltip signal */\n"
"\tbool undo_tooltip_callback (int x, int y, bool keyboard_tooltip, Gtk.Tooltip tooltip) {\n"
"\n"
"\t\t/* set the text for the tooltip */\n"
"        \ttooltip.set_text (\"Undo your last action\");\n"
"\t\t\n"
"\t\t/* set an icon fot the tooltip */\n"
"\t\ttooltip.set_icon_from_stock(\"gtk-undo\", Gtk.IconSize.MENU);\n"
"\n"
"        \t/* show the tooltip */\n"
"        \treturn true;\n"
"\t}\n"
"\n"
"\t/* This function creates the toolbar, its  ToolButtons,\n"
"\t * and assigns the actions names to the ToolButtons.*/\n"
"\tvoid create_toolbar () {\n"
"\t\ttoolbar = new Gtk.Toolbar ();\n"
"\t\ttoolbar.get_style_context ().add_class (Gtk.STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"\t\tnew_button = new Gtk.ToolButton.from_stock (Gtk.Stock.NEW);\n"
"\n"
"\t\t/* tooltip with text */\n"
"\t\tnew_button.set_tooltip_text (\"Create a new file\");\n"
"\n"
"\t\tnew_button.is_important = true; //decides whether to show the label\n"
"\t\ttoolbar.add (new_button);\n"
"\t\tnew_button.show ();\n"
"\t\tnew_button.action_name = \"app.new\";\n"
"\n"
"\t\topen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.OPEN);\n"
"\n"
"\t\t/* a tooltip using Pango markup language */\n"
"\t\topen_button.set_tooltip_markup (\"Open an &lt;i&gt;existing&lt;/i&gt; file\");\n"
"\n"
"\t\topen_button.is_important = true;\n"
"\t\ttoolbar.add (open_button);\n"
"\t\topen_button.show ();\n"
"\t\topen_button.action_name = \"app.open\";\n"
"\n"
"\t\tundo_button = new Gtk.ToolButton.from_stock (Gtk.Stock.UNDO);\n"
"\t\n"
"\t\t/* For a tooltip to have an image, first we must set_has_tooltip to be 'true' */\t\n"
"\t\t(undo_button as Gtk.Widget).set_has_tooltip (true);\n"
"\n"
"\t\t/* Connect the query_tooltip signal to the callback */\n"
"\t\tundo_button.query_tooltip.connect (undo_tooltip_callback);\n"
"\t\n"
"\t\tundo_button.is_important = true;\n"
"\t\ttoolbar.add (undo_button);\n"
"\t\tundo_button.show ();\n"
"\t\tundo_button.action_name = \"win.undo\";\n"
"\n"
"\t\tfullscreen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.FULLSCREEN);\n"
"\t\tfullscreen_button.is_important = true;\n"
"\t\ttoolbar.add (fullscreen_button);\n"
"\t\tfullscreen_button.show ();\n"
"\t\tfullscreen_button.action_name = \"win.fullscreen\";\n"
"\n"
"\t\tleave_fullscreen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.LEAVE_FULLSCREEN)\n"
";\n"
"\t\tleave_fullscreen_button.is_important = true;\n"
"\t\ttoolbar.add (leave_fullscreen_button);\n"
"\n"
"\t\tleave_fullscreen_button.action_name = \"win.fullscreen\";\n"
"\t}\n"
"\n"
"\tvoid undo_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Undo\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid fullscreen_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\tif ((this.get_window ().get_state () &amp; Gdk.WindowState.FULLSCREEN) != 0) {\n"
"\t\t\tthis.unfullscreen ();\n"
"\t\t\tleave_fullscreen_button.hide ();\n"
"\t\t\tfullscreen_button.show ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tthis.fullscreen ();\n"
"\t\t\tfullscreen_button.hide ();\n"
"\t\t\tleave_fullscreen_button.show ();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Create the \"new\" action and add it to the app*/\n"
"\t\tvar new_action = new SimpleAction (\"new\", null);\n"
"\t\tnew_action.activate.connect (new_callback);\n"
"\t\tthis.add_action (new_action);\n"
"\n"
"\t\t/* Create the \"open\" action, and add it to the app */\n"
"\t\tvar open_action = new SimpleAction (\"open\", null);\n"
"\t\topen_action.activate.connect (open_callback);\n"
"\t\tthis.add_action (open_action);\n"
"\n"
"\t\t/* You could also add the action to the app menu\n"
"\t\t * if you wanted to.\n"
"\t\t */\n"
"\t\t//var menu = new Menu ();\n"
"\t\t//menu.append (\"New\", \"app.new\");\n"
"\t\t//this.app_menu = menu;\n"
"\t}\n"
"\n"
"\tvoid new_callback (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"New\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid open_callback (SimpleAction action, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Open\\\".\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates the application and runs it. */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* Αυτό είναι το παράθυρο */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Μεταβλητές στιγμιοτύπου που ανήκουν στο παράθυρο */\n"
"\tGtk.Toolbar toolbar;\n"
"\tGtk.ToolButton new_button;\n"
"\tGtk.ToolButton open_button;\n"
"\tGtk.ToolButton undo_button;\n"
"\tGtk.ToolButton fullscreen_button;\n"
"\tGtk.ToolButton leave_fullscreen_button;\n"
"\n"
"\t/* Κατασκευαστής */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Toolbar with Tooltips Example\");\n"
"\n"
"\t\tthis.set_default_size (400, 200);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tthis.add (grid);\n"
"\t\tgrid.show ();\n"
"\n"
"\t\tcreate_toolbar ();\n"
"\t\ttoolbar.set_hexpand (true);\n"
"\t\tgrid.attach (toolbar, 0, 0, 1, 1);\n"
"\t\ttoolbar.show ();\n"
"\n"
"\t\t/* δημιουργία της ενέργειας παραθύρου \"undo\" */\n"
"\t\tvar undo_action = new SimpleAction (\"undo\", null);\n"
"\t\tundo_action.activate.connect (undo_callback);\n"
"\t\tthis.add_action (undo_action);\n"
"\n"
"\t\t/* δημιουργία της ενέργειας παραθύρου \"fullscreen\" */\n"
"\t\tvar fullscreen_action = new SimpleAction (\"fullscreen\", null);\n"
"\t\tfullscreen_action.activate.connect (fullscreen_callback);\n"
"\t\tthis.add_action (fullscreen_action);\n"
"\t}\n"
"\n"
"\t/* Η συνάρτηση επανάκλησης για το σήμα query_tooltip */\n"
"\tbool undo_tooltip_callback (int x, int y, bool keyboard_tooltip, Gtk.Tooltip tooltip) {\n"
"\n"
"\t\t/* ορισμός του κειμένου για τη συμβουλή οθόνης */\n"
"        \ttooltip.set_text (\"Undo your last action\");\n"
"\t\t\n"
"\t\t/* ορισμός εικονιδίου για τη συμβουλή οθόνης */\n"
"\t\ttooltip.set_icon_from_stock(\"gtk-undo\", Gtk.IconSize.MENU);\n"
"\n"
"        \t/* εμφάνιση της συμβουλής οθόνης */\n"
"        \treturn true;\n"
"\t}\n"
"\n"
"\t/* Αυτή η συνάρτηση δημιουργεί την εργαλειοθήκη, τα κουμπιά εργαλείων της,\n"
"\t * και εκχωρεί τα ονόματα ενεργειών στα κουμπιά εργαλείων.*/\n"
"\tvoid create_toolbar () {\n"
"\t\ttoolbar = new Gtk.Toolbar ();\n"
"\t\ttoolbar.get_style_context ().add_class (Gtk.STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"\t\tnew_button = new Gtk.ToolButton.from_stock (Gtk.Stock.NEW);\n"
"\n"
"\t\t/* συμβουλή οθόνης με κείμενο */\n"
"\t\tnew_button.set_tooltip_text (\"Create a new file\");\n"
"\n"
"\t\tnew_button.is_important = true; //decides whether to show the label\n"
"\t\ttoolbar.add (new_button);\n"
"\t\tnew_button.show ();\n"
"\t\tnew_button.action_name = \"app.new\";\n"
"\n"
"\t\topen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.OPEN);\n"
"\n"
"\t\t/* μια συμβουλή οθόνης χρησιμοποιώντας τη γλώσσα σήμανσης Pango */\n"
"\t\topen_button.set_tooltip_markup (\"Open an &lt;i&gt;existing&lt;/i&gt; file\");\n"
"\n"
"\t\topen_button.is_important = true;\n"
"\t\ttoolbar.add (open_button);\n"
"\t\topen_button.show ();\n"
"\t\topen_button.action_name = \"app.open\";\n"
"\n"
"\t\tundo_button = new Gtk.ToolButton.from_stock (Gtk.Stock.UNDO);\n"
"\t\n"
"\t\t/* Για να έχει μια συμβουλή οθόνης μια εικόνα, πρέπει πρώτα set_has_tooltip να είναι 'true' */\t\n"
"\t\t(undo_button as Gtk.Widget).set_has_tooltip (true);\n"
"\n"
"\t\t/* Σύνδεση με το σήμα query_tooltip στην επανάκληση */\n"
"\t\tundo_button.query_tooltip.connect (undo_tooltip_callback);\n"
"\t\n"
"\t\tundo_button.is_important = true;\n"
"\t\ttoolbar.add (undo_button);\n"
"\t\tundo_button.show ();\n"
"\t\tundo_button.action_name = \"win.undo\";\n"
"\n"
"\t\tfullscreen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.FULLSCREEN);\n"
"\t\tfullscreen_button.is_important = true;\n"
"\t\ttoolbar.add (fullscreen_button);\n"
"\t\tfullscreen_button.show ();\n"
"\t\tfullscreen_button.action_name = \"win.fullscreen\";\n"
"\n"
"\t\tleave_fullscreen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.LEAVE_FULLSCREEN)\n"
";\n"
"\t\tleave_fullscreen_button.is_important = true;\n"
"\t\ttoolbar.add (leave_fullscreen_button);\n"
"\n"
"\t\tleave_fullscreen_button.action_name = \"win.fullscreen\";\n"
"\t}\n"
"\n"
"\tvoid undo_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Undo\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid fullscreen_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\tif ((this.get_window ().get_state () &amp; Gdk.WindowState.FULLSCREEN) != 0) {\n"
"\t\t\tthis.unfullscreen ();\n"
"\t\t\tleave_fullscreen_button.hide ();\n"
"\t\t\tfullscreen_button.show ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tthis.fullscreen ();\n"
"\t\t\tfullscreen_button.hide ();\n"
"\t\t\tleave_fullscreen_button.show ();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* Αυτή είναι η εφαρμογή */\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Δημιουργία της ενέργειας \"new\" και προσθήκη της στην app*/\n"
"\t\tvar new_action = new SimpleAction (\"new\", null);\n"
"\t\tnew_action.activate.connect (new_callback);\n"
"\t\tthis.add_action (new_action);\n"
"\n"
"\t\t/* Δημιουργία της ενέργειας \"open\" και προσθήκη της στην app */\n"
"\t\tvar open_action = new SimpleAction (\"open\", null);\n"
"\t\topen_action.activate.connect (open_callback);\n"
"\t\tthis.add_action (open_action);\n"
"\n"
"\t\t/* Μπορείτε επίσης να προσθέσετε την ενέργεια στο μενού app\n"
"\t\t * αν θέλετε.\n"
"\t\t */\n"
"\t\t//var menu = new Menu ();\n"
"\t\t//menu.append (\"New\", \"app.new\");\n"
"\t\t//this.app_menu = menu;\n"
"\t}\n"
"\n"
"\tvoid new_callback (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"New\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid open_callback (SimpleAction action, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Open\\\".\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* Η κύρια συνάρτηση δημιουργεί την εφαρμογή και την εκτελεί. */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/tooltip.vala.page:39
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Tooltip.html\">Gtk.Tooltip</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Tooltip.html\">Συμβουλή "
"οθόνης Gtk (Gtk.Tooltip)</link>"

#. (itstool) path: item/p
#: C/tooltip.vala.page:41
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Widget.query_tooltip.html"
"\">Gtk.Widget.query_tooltip</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Widget.query_tooltip.html"
"\">Συμβουλή οθόνης ερωτήματος γραφικού στοιχείου Gtk (Gtk.Widget."
"query_tooltip)</link>"

#. (itstool) path: item/p
#: C/tooltip.vala.page:42
msgid ""
"<link href=\"https://developer.gnome.org/gtk3/3.4/gtk3-Stock-Items.html#GTK-"
"STOCK-UNDO:CAPS\">Stock Items</link>"
msgstr ""
"<link href=\"https://developer.gnome.org/gtk3/3.4/gtk3-Stock-Items.html#GTK-"
"STOCK-UNDO:CAPS\">Έτοιμα στοιχεία (Stock Items)</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/treeview_advanced_liststore.py.page:23
msgctxt "_"
msgid ""
"external ref='media/treeview_advanced_liststore.png' "
"md5='102b512197fb9aa4ed9a16462f6af911'"
msgstr ""
"external ref='media/treeview_advanced_liststore.png' "
"md5='102b512197fb9aa4ed9a16462f6af911'"

#. (itstool) path: info/title
#: C/treeview_advanced_liststore.py.page:8
msgctxt "text"
msgid "Simple Treeview with ListStore (Python)"
msgstr ""
"Απλή προβολή οθόνης (Treeview) με αποθήκευση καταλόγου (ListStore) (Python)"

#. (itstool) path: info/desc
#: C/treeview_advanced_liststore.py.page:19
msgid "A TreeView displaying a ListStore (more complex example)"
msgstr "Μια TreeView που εμφανίζει μια TreeStore (πιο σύνθετο παράδειγμα)"

#. (itstool) path: page/title
#: C/treeview_advanced_liststore.py.page:22
msgid "More Complex Treeview with ListStore"
msgstr "Πιο σύνθετη προβολή δένδρου με ListStore"

#. (itstool) path: page/p
#: C/treeview_advanced_liststore.py.page:24
#: C/treeview_simple_liststore.py.page:25
msgid ""
"This TreeView displays a simple ListStore with the selection \"changed\" "
"signal connected."
msgstr ""
"Αυτή η TreeView εμφανίζει μια απλή ListStore με το συνδεμένο σήμα επιλογής "
"\"αλλαγμένο\"."

#. (itstool) path: section/code
#: C/treeview_advanced_liststore.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Pango\n"
"import sys\n"
"\n"
"list_of_dvd = [[\"The Usual Suspects\"],\n"
"               [\"Gilda\"],\n"
"               [\"The Godfather\"],\n"
"               [\"Pulp Fiction\"],\n"
"               [\"Once Upon a Time in the West\"],\n"
"               [\"Rear Window\"]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"My DVDs\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data are stored in the model\n"
"        # create a liststore with one column\n"
"        self.listmodel = Gtk.ListStore(str)\n"
"        for i in range(len(list_of_dvd)):\n"
"            self.listmodel.append(list_of_dvd[i])\n"
"\n"
"        # a treeview to see the data stored in the model\n"
"        view = Gtk.TreeView(model=self.listmodel)\n"
"\n"
"        # cellrenderer for the first column\n"
"        cell = Gtk.CellRendererText()\n"
"        # the first column is created\n"
"        col = Gtk.TreeViewColumn(\"Title\", cell, text=0)\n"
"        # and it is appended to the treeview\n"
"        view.append_column(col)\n"
"\n"
"        # when a row of the treeview is selected, it emits a signal\n"
"        self.selection = view.get_selection()\n"
"        self.selection.connect(\"changed\", self.on_changed)\n"
"\n"
"        # the label we use to show the selection\n"
"        self.label = Gtk.Label()\n"
"        self.label.set_text(\"\")\n"
"\n"
"        # a button to add new titles, connected to a callback function\n"
"        self.button_add = Gtk.Button(label=\"Add\")\n"
"        self.button_add.connect(\"clicked\", self.add_cb)\n"
"\n"
"        # an entry to enter titles\n"
"        self.entry = Gtk.Entry()\n"
"\n"
"        # a button to remove titles, connected to a callback function\n"
"        self.button_remove = Gtk.Button(label=\"Remove\")\n"
"        self.button_remove.connect(\"clicked\", self.remove_cb)\n"
"\n"
"        # a button to remove all titles, connected to a callback function\n"
"        self.button_remove_all = Gtk.Button(label=\"Remove All\")\n"
"        self.button_remove_all.connect(\"clicked\", self.remove_all_cb)\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(view, 0, 0, 4, 1)\n"
"        grid.attach(self.label, 0, 1, 4, 1)\n"
"        grid.attach(self.button_add, 0, 2, 1, 1)\n"
"        grid.attach_next_to(\n"
"            self.entry, self.button_add, Gtk.PositionType.RIGHT, 1, 1)\n"
"        grid.attach_next_to(\n"
"            self.button_remove, self.entry, Gtk.PositionType.RIGHT, 1, 1)\n"
"        grid.attach_next_to(\n"
"            self.button_remove_all, self.button_remove, Gtk.PositionType.RIGHT, 1, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    def on_changed(self, selection):\n"
"        # get the model and the iterator that points at the data in the model\n"
"        (model, iter) = selection.get_selected()\n"
"        # set the label to a new value depending on the selection, if there is\n"
"        # one\n"
"        if iter is not None:\n"
"            self.label.set_text(\"\\n %s\" % (model[iter][0]))\n"
"        else:\n"
"            self.label.set_text(\"\")\n"
"        return True\n"
"\n"
"    # callback function for the \"Add\" button\n"
"    def add_cb(self, button):\n"
"        # append to the model the title that is in the entry\n"
"        title = self.entry.get_text()\n"
"        self.listmodel.append([title])\n"
"        # and print a message in the terminal\n"
"        print \"%s has been added\" % (title)\n"
"\n"
"    def remove_cb(self, button):\n"
"        # if there is still an entry in the model\n"
"        if len(self.listmodel) != 0:\n"
"            # get the selection\n"
"            (model, iter) = self.selection.get_selected()\n"
"            # if there is a selection, print a message in the terminal\n"
"            # and remove it from the model\n"
"            if iter is not None:\n"
"                print \"%s has been removed\" % (model[iter][0])\n"
"                self.listmodel.remove(iter)\n"
"            # otherwise, ask the user to select something to remove\n"
"            else:\n"
"                print \"Select a title to remove\"\n"
"        # else, if there are no entries in the model, print \"Empty list\"\n"
"        # in the terminal\n"
"        else:\n"
"            print \"Empty list\"\n"
"\n"
"    def remove_all_cb(self, button):\n"
"        # if there is still an entry in the model\n"
"        if len(self.listmodel) != 0:\n"
"            # remove all the entries in the model\n"
"            for i in range(len(self.listmodel)):\n"
"                iter = self.listmodel.get_iter(0)\n"
"                self.listmodel.remove(iter)\n"
"        # print a message in the terminal alerting that the model is empty\n"
"        print \"Empty list\"\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Pango\n"
"import sys\n"
"\n"
"list_of_dvd = [[\"The Usual Suspects\"],\n"
"               [\"Gilda\"],\n"
"               [\"The Godfather\"],\n"
"               [\"Pulp Fiction\"],\n"
"               [\"Once Upon a Time in the West\"],\n"
"               [\"Rear Window\"]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"My DVDs\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data are stored in the model\n"
"        # create a liststore with one column\n"
"        self.listmodel = Gtk.ListStore(str)\n"
"        for i in range(len(list_of_dvd)):\n"
"            self.listmodel.append(list_of_dvd[i])\n"
"\n"
"        # a treeview to see the data stored in the model\n"
"        view = Gtk.TreeView(model=self.listmodel)\n"
"\n"
"        # cellrenderer for the first column\n"
"        cell = Gtk.CellRendererText()\n"
"        # the first column is created\n"
"        col = Gtk.TreeViewColumn(\"Title\", cell, text=0)\n"
"        # and it is appended to the treeview\n"
"        view.append_column(col)\n"
"\n"
"        # when a row of the treeview is selected, it emits a signal\n"
"        self.selection = view.get_selection()\n"
"        self.selection.connect(\"changed\", self.on_changed)\n"
"\n"
"        # the label we use to show the selection\n"
"        self.label = Gtk.Label()\n"
"        self.label.set_text(\"\")\n"
"\n"
"        # a button to add new titles, connected to a callback function\n"
"        self.button_add = Gtk.Button(label=\"Add\")\n"
"        self.button_add.connect(\"clicked\", self.add_cb)\n"
"\n"
"        # an entry to enter titles\n"
"        self.entry = Gtk.Entry()\n"
"\n"
"        # a button to remove titles, connected to a callback function\n"
"        self.button_remove = Gtk.Button(label=\"Remove\")\n"
"        self.button_remove.connect(\"clicked\", self.remove_cb)\n"
"\n"
"        # a button to remove all titles, connected to a callback function\n"
"        self.button_remove_all = Gtk.Button(label=\"Remove All\")\n"
"        self.button_remove_all.connect(\"clicked\", self.remove_all_cb)\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(view, 0, 0, 4, 1)\n"
"        grid.attach(self.label, 0, 1, 4, 1)\n"
"        grid.attach(self.button_add, 0, 2, 1, 1)\n"
"        grid.attach_next_to(\n"
"            self.entry, self.button_add, Gtk.PositionType.RIGHT, 1, 1)\n"
"        grid.attach_next_to(\n"
"            self.button_remove, self.entry, Gtk.PositionType.RIGHT, 1, 1)\n"
"        grid.attach_next_to(\n"
"            self.button_remove_all, self.button_remove, Gtk.PositionType.RIGHT, 1, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    def on_changed(self, selection):\n"
"        # get the model and the iterator that points at the data in the model\n"
"        (model, iter) = selection.get_selected()\n"
"        # set the label to a new value depending on the selection, if there is\n"
"        # one\n"
"        if iter is not None:\n"
"            self.label.set_text(\"\\n %s\" % (model[iter][0]))\n"
"        else:\n"
"            self.label.set_text(\"\")\n"
"        return True\n"
"\n"
"    # callback function for the \"Add\" button\n"
"    def add_cb(self, button):\n"
"        # append to the model the title that is in the entry\n"
"        title = self.entry.get_text()\n"
"        self.listmodel.append([title])\n"
"        # and print a message in the terminal\n"
"        print \"%s has been added\" % (title)\n"
"\n"
"    def remove_cb(self, button):\n"
"        # if there is still an entry in the model\n"
"        if len(self.listmodel) != 0:\n"
"            # get the selection\n"
"            (model, iter) = self.selection.get_selected()\n"
"            # if there is a selection, print a message in the terminal\n"
"            # and remove it from the model\n"
"            if iter is not None:\n"
"                print \"%s has been removed\" % (model[iter][0])\n"
"                self.listmodel.remove(iter)\n"
"            # otherwise, ask the user to select something to remove\n"
"            else:\n"
"                print \"Select a title to remove\"\n"
"        # else, if there are no entries in the model, print \"Empty list\"\n"
"        # in the terminal\n"
"        else:\n"
"            print \"Empty list\"\n"
"\n"
"    def remove_all_cb(self, button):\n"
"        # if there is still an entry in the model\n"
"        if len(self.listmodel) != 0:\n"
"            # remove all the entries in the model\n"
"            for i in range(len(self.listmodel)):\n"
"                iter = self.listmodel.get_iter(0)\n"
"                self.listmodel.remove(iter)\n"
"        # print a message in the terminal alerting that the model is empty\n"
"        print \"Empty list\"\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/treeview_advanced_liststore.py.page:35
#: C/treeview_cellrenderertoggle.py.page:35
#: C/treeview_simple_liststore.py.page:36 C/treeview_treestore.py.page:36
msgid "Useful methods for a TreeView widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο TreeView"

#. (itstool) path: section/p
#: C/treeview_advanced_liststore.py.page:36
#: C/treeview_cellrenderertoggle.py.page:36 C/treeview_treestore.py.page:37
msgid ""
"The TreeView widget is designed around a <em>Model/View/Controller</em> "
"design: the <em>Model</em> stores the data; the <em>View</em> gets change "
"notifications and displays the content of the model; the <em>Controller</"
"em>, finally, changes the state of the model and notifies the view of these "
"changes. For more information and for a list of useful methods for TreeModel "
"see <link xref=\"model-view-controller.py\"/>."
msgstr ""
"Το γραφικό στοιχείο TreeView σχεδιάστηκε γύρω από ένα σχέδιο <em>προτύπου/"
"προβολής/ελεγκτή</em>: το <em>πρότυπο</em> αποθηκεύει τα δεδομένα· η "
"<em>Προβολή</em> παίρνει ειδοποιήσεις αλλαγής και εμφανίζει το περιεχόμενο "
"του προτύπου· ο <em>ελεγκτής</em>, τελικά, αλλάζει την κατάσταση του "
"προτύπου και ειδοποιεί την προβολή για αυτές τις αλλαγές. Για περισσότερες "
"πληροφορίες και για μια λίστα χρήσιμων μεθόδων για λίστα TreeModel, δείτε "
"<link xref=\"model-view-controller.py\"/>."

#. (itstool) path: section/p
#: C/treeview_advanced_liststore.py.page:37
msgid ""
"In line 36 the <code>\"changed\"</code> signal is connected to the callback "
"function <code>on_changed()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"Στη γραμμή 36 το σήμα <code>\"changed\"</code> συνδέεται με τη συνάρτηση "
"επανάκλησης <code>on_changed()</code> χρησιμοποιώντας <code><var>widget</"
"var>.connect(<var>signal</var>, <var>callback function</var>)</code>. Δείτε "
"<link xref=\"signals-callbacks.py\"/> για μια πιο λεπτομερή εξήγηση."

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/treeview_cellrenderertoggle.py.page:23
msgctxt "_"
msgid ""
"external ref='media/treeview_cellrenderertoggle.png' "
"md5='ade9b9437f8f83150acf37610dab834d'"
msgstr ""
"external ref='media/treeview_cellrenderertoggle.png' "
"md5='ade9b9437f8f83150acf37610dab834d'"

#. (itstool) path: info/title
#: C/treeview_cellrenderertoggle.py.page:8 C/treeview_treestore.py.page:8
msgctxt "text"
msgid "TreeView with TreeStore (Python)"
msgstr "Προβολή δένδρου (TreeView) με αποθήκη δένδρου (TreeStore) (Python)"

#. (itstool) path: info/desc
#: C/treeview_cellrenderertoggle.py.page:19
msgid ""
"A TreeView displaying a TreeStore (more complex example, with "
"CellRendererToggle)"
msgstr ""
"Μια προβολή δένδρου (TreeView) εμφανίζει μια αποθήκη δένδρου (TreeStore) "
"(πιο σύνθετο παράδειγμα, με CellRendererToggle)"

#. (itstool) path: page/title
#: C/treeview_cellrenderertoggle.py.page:22
msgid "More Complex TreeView with TreeStore"
msgstr "Πιο σύνθετη προβολή δένδρου με αποθήκη δένδρου"

#. (itstool) path: page/p
#: C/treeview_cellrenderertoggle.py.page:24
msgid ""
"This TreeView displays a TreeStore with two columns, one of which is "
"rendered as a toggle."
msgstr ""
"Αυτή η προβολή δένδρου (TreeView) εμφανίζει μια αποθήκη δένδρου (TreeStore) "
"με δύο στήλες, η μια τους αποδίδεται ως μια εναλλαγή."

#. (itstool) path: section/code
#: C/treeview_cellrenderertoggle.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Pango\n"
"import sys\n"
"\n"
"books = [[\"Tolstoy, Leo\", [\"War and Peace\", True], [\"Anna Karenina\", False]],\n"
"         [\"Shakespeare, William\", [\"Hamlet\", False],\n"
"             [\"Macbeth\", True], [\"Othello\", False]],\n"
"         [\"Tolkien, J.R.R.\", [\"The Lord of the Rings\", False]]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Library\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data are stored in the model\n"
"        # create a treestore with two columns\n"
"        self.store = Gtk.TreeStore(str, bool)\n"
"        # fill in the model\n"
"        for i in range(len(books)):\n"
"            # the iter piter is returned when appending the author in the first column\n"
"            # and False in the second\n"
"            piter = self.store.append(None, [books[i][0], False])\n"
"            # append the books and the associated boolean value as children of\n"
"            # the author\n"
"            j = 1\n"
"            while j &lt; len(books[i]):\n"
"                self.store.append(piter, books[i][j])\n"
"                j += 1\n"
"\n"
"        # the treeview shows the model\n"
"        # create a treeview on the model self.store\n"
"        view = Gtk.TreeView()\n"
"        view.set_model(self.store)\n"
"\n"
"        # the cellrenderer for the first column - text\n"
"        renderer_books = Gtk.CellRendererText()\n"
"        # the first column is created\n"
"        column_books = Gtk.TreeViewColumn(\"Books\", renderer_books, text=0)\n"
"        # and it is appended to the treeview\n"
"        view.append_column(column_books)\n"
"\n"
"        # the cellrenderer for the second column - boolean rendered as a toggle\n"
"        renderer_in_out = Gtk.CellRendererToggle()\n"
"        # the second column is created\n"
"        column_in_out = Gtk.TreeViewColumn(\"Out?\", renderer_in_out, active=1)\n"
"        # and it is appended to the treeview\n"
"        view.append_column(column_in_out)\n"
"        # connect the cellrenderertoggle with a callback function\n"
"        renderer_in_out.connect(\"toggled\", self.on_toggled)\n"
"\n"
"        # add the treeview to the window\n"
"        self.add(view)\n"
"\n"
"    # callback function for the signal emitted by the cellrenderertoggle\n"
"    def on_toggled(self, widget, path):\n"
"        # the boolean value of the selected row\n"
"        current_value = self.store[path][1]\n"
"        # change the boolean value of the selected row in the model\n"
"        self.store[path][1] = not current_value\n"
"        # new current value!\n"
"        current_value = not current_value\n"
"        # if length of the path is 1 (that is, if we are selecting an author)\n"
"        if len(path) == 1:\n"
"            # get the iter associated with the path\n"
"            piter = self.store.get_iter(path)\n"
"            # get the iter associated with its first child\n"
"            citer = self.store.iter_children(piter)\n"
"            # while there are children, change the state of their boolean value\n"
"            # to the value of the author\n"
"            while citer is not None:\n"
"                self.store[citer][1] = current_value\n"
"                citer = self.store.iter_next(citer)\n"
"        # if the length of the path is not 1 (that is, if we are selecting a\n"
"        # book)\n"
"        elif len(path) != 1:\n"
"            # get the first child of the parent of the book (the first book of\n"
"            # the author)\n"
"            citer = self.store.get_iter(path)\n"
"            piter = self.store.iter_parent(citer)\n"
"            citer = self.store.iter_children(piter)\n"
"            # check if all the children are selected\n"
"            all_selected = True\n"
"            while citer is not None:\n"
"                if self.store[citer][1] == False:\n"
"                    all_selected = False\n"
"                    break\n"
"                citer = self.store.iter_next(citer)\n"
"            # if they do, the author as well is selected; otherwise it is not\n"
"            self.store[piter][1] = all_selected\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Pango\n"
"import sys\n"
"\n"
"books = [[\"Tolstoy, Leo\", [\"War and Peace\", True], [\"Anna Karenina\", False]],\n"
"         [\"Shakespeare, William\", [\"Hamlet\", False],\n"
"             [\"Macbeth\", True], [\"Othello\", False]],\n"
"         [\"Tolkien, J.R.R.\", [\"The Lord of the Rings\", False]]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Library\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data are stored in the model\n"
"        # create a treestore with two columns\n"
"        self.store = Gtk.TreeStore(str, bool)\n"
"        # fill in the model\n"
"        for i in range(len(books)):\n"
"            # the iter piter is returned when appending the author in the first column\n"
"            # and False in the second\n"
"            piter = self.store.append(None, [books[i][0], False])\n"
"            # append the books and the associated boolean value as children of\n"
"            # the author\n"
"            j = 1\n"
"            while j &lt; len(books[i]):\n"
"                self.store.append(piter, books[i][j])\n"
"                j += 1\n"
"\n"
"        # the treeview shows the model\n"
"        # create a treeview on the model self.store\n"
"        view = Gtk.TreeView()\n"
"        view.set_model(self.store)\n"
"\n"
"        # the cellrenderer for the first column - text\n"
"        renderer_books = Gtk.CellRendererText()\n"
"        # the first column is created\n"
"        column_books = Gtk.TreeViewColumn(\"Books\", renderer_books, text=0)\n"
"        # and it is appended to the treeview\n"
"        view.append_column(column_books)\n"
"\n"
"        # the cellrenderer for the second column - boolean rendered as a toggle\n"
"        renderer_in_out = Gtk.CellRendererToggle()\n"
"        # the second column is created\n"
"        column_in_out = Gtk.TreeViewColumn(\"Out?\", renderer_in_out, active=1)\n"
"        # and it is appended to the treeview\n"
"        view.append_column(column_in_out)\n"
"        # connect the cellrenderertoggle with a callback function\n"
"        renderer_in_out.connect(\"toggled\", self.on_toggled)\n"
"\n"
"        # add the treeview to the window\n"
"        self.add(view)\n"
"\n"
"    # callback function for the signal emitted by the cellrenderertoggle\n"
"    def on_toggled(self, widget, path):\n"
"        # the boolean value of the selected row\n"
"        current_value = self.store[path][1]\n"
"        # change the boolean value of the selected row in the model\n"
"        self.store[path][1] = not current_value\n"
"        # new current value!\n"
"        current_value = not current_value\n"
"        # if length of the path is 1 (that is, if we are selecting an author)\n"
"        if len(path) == 1:\n"
"            # get the iter associated with the path\n"
"            piter = self.store.get_iter(path)\n"
"            # get the iter associated with its first child\n"
"            citer = self.store.iter_children(piter)\n"
"            # while there are children, change the state of their boolean value\n"
"            # to the value of the author\n"
"            while citer is not None:\n"
"                self.store[citer][1] = current_value\n"
"                citer = self.store.iter_next(citer)\n"
"        # if the length of the path is not 1 (that is, if we are selecting a\n"
"        # book)\n"
"        elif len(path) != 1:\n"
"            # get the first child of the parent of the book (the first book of\n"
"            # the author)\n"
"            citer = self.store.get_iter(path)\n"
"            piter = self.store.iter_parent(citer)\n"
"            citer = self.store.iter_children(piter)\n"
"            # check if all the children are selected\n"
"            all_selected = True\n"
"            while citer is not None:\n"
"                if self.store[citer][1] == False:\n"
"                    all_selected = False\n"
"                    break\n"
"                citer = self.store.iter_next(citer)\n"
"            # if they do, the author as well is selected; otherwise it is not\n"
"            self.store[piter][1] = all_selected\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/p
#: C/treeview_cellrenderertoggle.py.page:37
msgid ""
"In line 48 the <code>\"toggled\"</code> signal is connected to the callback "
"function <code>on_toggled()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"Στη γραμμή 48 το σήμα <code>\"toggled\"</code> συνδέεται με τη συνάρτηση "
"επανάκλησης <code>on_toggled()</code> χρησιμοποιώντας <code><var>widget</"
"var>.connect(<var>signal</var>, <var>callback function</var>)</code>. Δείτε "
"<link xref=\"signals-callbacks.py\"/> για μια πιο λεπτομερή εξήγηση."

#. (itstool) path: item/p
#: C/treeview_cellrenderertoggle.py.page:46 C/treeview_treestore.py.page:46
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeStore.html"
"\">GtkTreeStore</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeStore.html"
"\">GtkTreeStore</link>"

#. (itstool) path: item/p
#: C/treeview_cellrenderertoggle.py.page:48
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRendererToggle."
"html\">GtkCellRendererToggle</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRendererToggle."
"html\">GtkCellRendererToggle</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/treeview_simple_liststore.js.page:25
msgctxt "_"
msgid ""
"external ref='media/treeview_simple_liststore_penguins.png' "
"md5='d750a0b9fddf8e508753cc639839871d'"
msgstr ""
"external ref='media/treeview_simple_liststore_penguins.png' "
"md5='d750a0b9fddf8e508753cc639839871d'"

#. (itstool) path: info/title
#: C/treeview_simple_liststore.js.page:8
msgctxt "text"
msgid "TreeView with ListStore (JavaScript)"
msgstr ""
"Προβολή δένδρου (Treeview) με αποθήκη καταλόγου (ListStore) (JavaScript)"

#. (itstool) path: info/desc
#: C/treeview_simple_liststore.js.page:21
msgid "A widget that shows a separate list of items"
msgstr "Ένα γραφικό στοιχείο που εμφανίζει μια ξεχωριστή λίστα στοιχείων"

#. (itstool) path: page/title
#: C/treeview_simple_liststore.js.page:24
msgid "TreeView with ListStore"
msgstr "Προβολή δένδρου (Treeview) με αποθήκη καταλόγου (ListStore)"

#. (itstool) path: page/p
#: C/treeview_simple_liststore.js.page:26
msgid ""
"A TreeView is like a window onto the contents of either a ListStore or a "
"TreeStore. A ListStore is like a spreadsheet: a \"flat\", two-dimensional "
"list of things broken up into rows and columns. A TreeStore, meanwhile, can "
"branch out in different directions like a tree can. In this example, we "
"create a TreeView that shows the contents of a ListStore with (fictitious) "
"names and phone numbers in it, and set it so that the <link xref=\"label.js"
"\">Label</link> at the bottom of the window shows more information about "
"whichever name you click on."
msgstr ""
"Μια προβολή δένδρου (TreeView) μοιάζει με ένα παράθυρο στα περιεχόμενα είτε "
"μιας αποθήκης καταλόγου (ListStore) είτε μιας προβολής δένδρου. Μια αποθήκη "
"καταλόγου μοιάζει με ένα υπολογιστικό φύλλο: μια \"επίπεδη\", διδιάστατη "
"λίστα πραγμάτων διαιρεμένη σε γραμμές και στήλες. Μια προβολή δένδρου, στο "
"μεταξύ, μπορεί να διακλαδωθεί σε διαφορετικές κατευθύνσεις όπως κάνει ένα "
"δένδρο. Σε αυτό το παράδειγμα, δημιουργήσαμε μια προβολή δένδρου που "
"εμφανίζει τα περιεχόμενα μιας αποθήκης καταλόγου με (εικονικά) ονόματα και "
"αριθμούς τηλεφώνου σε αυτό, και ρυθμίστηκε έτσι ώστε η <link xref=\"label.js"
"\">ετικέτα</link> στο τέλος του παραθύρου να εμφανίζει περισσότερες "
"πληροφορίες σχετικά με οποιοδήποτε όνομα πατάτε."

#. (itstool) path: page/p
#: C/treeview_simple_liststore.js.page:27
msgid ""
"The TreeView is not just a single widget, but contains a number of smaller "
"ones:"
msgstr ""
"Η προβολή δένδρου (TreeView) δεν είναι απλά ένα μονό γραφικό στοιχείο, αλλά "
"περιέχει έναν αριθμό μικρότερων γραφικών στοιχείων:"

#. (itstool) path: item/p
#: C/treeview_simple_liststore.js.page:29
msgid ""
"TreeViewColumn widgets show each (vertical) column of information from the "
"ListStore. Each one has a title which can be shown at the top of the column, "
"like in the screenshot."
msgstr ""
"Τα γραφικά στοιχεία στήλης προβολής δένδρου (TreeViewColumn) εμφανίζουν "
"κάθε (κάθετη) στήλη πληροφορίας από τη αποθήκη καταλόγων (ListStore). Καθένα "
"έχει έναν τίτλο που μπορεί να προβληθεί στην κορυφή της στήλης, όπως στο "
"στιγμιότυπο."

#. (itstool) path: item/p
#: C/treeview_simple_liststore.js.page:30
msgid ""
"CellRenderer widgets are \"packed\" into each TreeViewColumn, and contain "
"the instructions for how to display each individual \"cell\", or item from "
"the ListStore. There are multiple different types, including the "
"CellRendererText used here and the CellRendererPixbuf, which displays a "
"picture (\"pixel buffer\")."
msgstr ""
"Τα γραφικά στοιχεία απεικονιστές κελιού (CellRenderer)  \"συσκευάζονται\" "
"σε κάθε στήλη προβολής δένδρου (TreeViewColumn) και περιέχουν τις οδηγίες "
"πώς να εμφανίσουν κάθε ξεχωριστό \"κελί\" ή στοιχείο από τη ListStore. "
"Υπάρχουν πολλοί διαφορετικοί τύποι, συμπεριλαμβανόμενου του κειμένου "
"απεικονιστή κελιών (CellRendererText) που χρησιμοποιείται εδώ και του "
"CellRendererPixbuf, που εμφανίζει μια εικόνα \"ενδιάμεση μνήμη "
"εικονοστοιχείου\")."

#. (itstool) path: page/p
#: C/treeview_simple_liststore.js.page:32
msgid ""
"Finally, we're going to use an object called a TreeIter, which isn't a "
"widget so much as an invisible cursor which points to a (horizontal) row in "
"the ListStore. Whenever you click on a name in the phonebook, for instance, "
"we create a TreeIter pointing to the row that's selected, and then use that "
"to tell the ListStore which entry we want the Label to show more information "
"about."
msgstr ""
"Τελικά, πρόκειται να χρησιμοποιήσουμε ένα αντικείμενο που λέγεται TreeIter, "
"που δεν είναι γραφικό στοιχείο τόσο πολύ όσο ένας αόρατος δρομέας που "
"δείχνει σε μια (οριζόντια) γραμμή στη ListStore. Οποτεδήποτε πατάτε σε ένα "
"όνομα στον τηλεφωνικό κατάλογο, για παράδειγμα, δημιουργούμε ένα TreeIter "
"που δείχνει τη γραμμή που επιλέχτηκε και έπειτα χρησιμοποιήστε το για να "
"πείτε στη ListStore ποιας εγγραφής θέλουμε η ετικέτα να εμφανίσει "
"περισσότερες πληροφορίες σχετικά."

#. (itstool) path: note/p
#: C/treeview_simple_liststore.js.page:33
msgid ""
"The TreeView is probably the most complicated Gtk widget, because of how "
"many parts it has and how they all have to work together. Give yourself time "
"to learn how it works and experiment with it, or try something easier first "
"if you're having trouble."
msgstr ""
"Η TreeView είναι προφανώς το πιο περίπλοκο γραφικό στοιχείο Gtk, λόγω των "
"πολλών μερών που έχει και του τρόπου συνεργασίας τους. Δώστε στον εαυτό σας "
"τον χρόνο να μάθετε πώς δουλεύει και πειραματιστείτε μαζί του, ή δοκιμάστε "
"πρώτα κάτι ευκολότερο εάν έχετε πρόβλημα."

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:38
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"const Pango = imports.gi.Pango;\n"
msgstr ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"const Pango = imports.gi.Pango;\n"

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:51
#, no-wrap
msgid ""
"\n"
"const TreeViewExample = new Lang.Class({\n"
"    Name: 'TreeView Example with Simple ListStore',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jstreeviewsimpleliststore'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const TreeViewExample = new Lang.Class({\n"
"    Name: 'TreeView Example with Simple ListStore',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jstreeviewsimpleliststore'\n"
"        });\n"
"\n"
"    // Σύνδεση των σημάτων 'activate' και 'startup' με τις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:76
msgid ""
"All the code for this sample goes in the TreeViewExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.Application.html\">Gtk.Application</link> for our widgets and window to "
"go in."
msgstr ""
"Όλος ο κώδικας για αυτό το παράδειγμα πηγαίνει στην κλάση TreeViewExample. Ο "
"παραπάνω κώδικας δημιουργεί μια <link href=\"http://www.roojs.com/seed/"
"gir-1.2-gtk-3.0/gjs/Gtk.Application.html\">Gtk.Application</link> για να "
"μπουν μέσα τα γραφικά στοιχεία μας και τα παράθυρα."

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:77
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 250,\n"
"            default_width: 100,\n"
"            border_width: 20,\n"
"            title: \"My Phone Book\"});\n"
msgstr ""
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 250,\n"
"            default_width: 100,\n"
"            border_width: 20,\n"
"            title: \"My Phone Book\"});\n"

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:95
#, no-wrap
msgid ""
"\n"
"        // Create the underlying liststore for the phonebook\n"
"        this._listStore = new Gtk.ListStore ();\n"
"        this._listStore.set_column_types ([\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING]);\n"
msgstr ""
"\n"
"        // Δημιουργία της υποκείμενης αποθήκης καταλόγου για τον τηλεφωνικό κατάλογο\n"
"        this._listStore = new Gtk.ListStore ();\n"
"        this._listStore.set_column_types ([\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING]);\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:104
msgid ""
"We first create the ListStore like we would any widget. Then we call its "
"set_column_types method, and pass it an array of GObject data types. (We "
"could have put the types all on one line, but here we are breaking them up "
"to make it easier to read.)"
msgstr ""
"Δημιουργούμε πρώτα την αποθήκη καταλόγου (ListStore) όπως θα κάναμε με κάθε "
"γραφικό στοιχείο. Έπειτα καλούμε τη μέθοδο της set_column_types και την "
"περνάμε σε έναν πίνακα τύπου δεδομένων GObject. (Θα μπορούσαμε να βάλουμε "
"όλους τους τύπους σε μια γραμμή, αλλά εδώ τα διαιρούμε για διευκόλυνση της "
"ανάγνωσης.)"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:105
msgid "The GObject data types you can use include:"
msgstr ""
"Οι τύποι δεδομένων GObject που μπορείτε να χρησιμοποιήσετε περιλαμβάνουν:"

#. (itstool) path: item/p
#: C/treeview_simple_liststore.js.page:110
msgid "<file>gtk.gdk.Pixbuf</file> -- A picture"
msgstr "<file>gtk.gdk.Pixbuf</file> -- Μια εικόνα"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:112
msgid ""
"In this case, we're making a ListStore of four columns, each one containing "
"string values."
msgstr ""
"Σε αυτήν την περίπτωση, κάνουμε μια ListStore των τεσσάρων στηλών, καθεμιά "
"περιέχει τιμές συμβολοσειράς."

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:115
#, no-wrap
msgid ""
"\n"
"        // Data to go in the phonebook\n"
"        this.phonebook =\n"
"        let phonebook =\n"
"            [{ name: \"Jurg\", surname: \"Billeter\", phone: \"555-0123\",\n"
"                description: \"A friendly person.\"},\n"
"             { name: \"Johannes\", surname: \"Schmid\", phone: \"555-1234\",\n"
"                description: \"Easy phone number to remember.\"},\n"
"             { name: \"Julita\", surname: \"Inca\", phone: \"555-2345\",\n"
"                description: \"Another friendly person.\"},\n"
"             { name: \"Javier\", surname: \"Jardon\", phone: \"555-3456\",\n"
"                description: \"Bring fish for his penguins.\"},\n"
"             { name: \"Jason\", surname: \"Clinton\", phone: \"555-4567\",\n"
"                description: \"His cake's not a lie.\"},\n"
"             { name: \"Random J.\", surname: \"Hacker\", phone: \"555-5678\",\n"
"                description: \"Very random!\"}];\n"
msgstr ""
"\n"
"        // Δεδομένα για εισαγωγή στον τηλεφωνικό κατάλογο\n"
"        this.phonebook =\n"
"        let phonebook =\n"
"            [{ name: \"Jurg\", surname: \"Billeter\", phone: \"555-0123\",\n"
"                description: \"A friendly person.\"},\n"
"             { name: \"Johannes\", surname: \"Schmid\", phone: \"555-1234\",\n"
"                description: \"Easy phone number to remember.\"},\n"
"             { name: \"Julita\", surname: \"Inca\", phone: \"555-2345\",\n"
"                description: \"Another friendly person.\"},\n"
"             { name: \"Javier\", surname: \"Jardon\", phone: \"555-3456\",\n"
"                description: \"Bring fish for his penguins.\"},\n"
"             { name: \"Jason\", surname: \"Clinton\", phone: \"555-4567\",\n"
"                description: \"His cake's not a lie.\"},\n"
"             { name: \"Random J.\", surname: \"Hacker\", phone: \"555-5678\",\n"
"                description: \"Very random!\"}];\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:132
msgid ""
"Here we have the information to go in the ListStore. It's an array of "
"objects, each one corresponding to a single entry in our phone book."
msgstr ""
"Εδώ έχουμε την πληροφορία μετάβασης στην αποθήκη καταλόγων (ListStore). "
"Είναι ένας πίνακας αντικειμένων, που καθένα αντιστοιχεί σε μια μοναδική "
"εγγραφή στον τηλεφωνικό κατάλογο."

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:133
msgid ""
"Note that the TreeView in the screenshot doesn't actually show the data from "
"the \"description\" properties. Instead, that information's shown in the "
"Label beneath it, for whichever row that you click on. That's because the "
"TreeView and ListStore are two separate things, and a TreeView can show all "
"or part of a ListStore, and display what's in it in different ways. You can "
"even have multiple widgets show things from the same ListStore, like the "
"Label in our example or even a second TreeView."
msgstr ""
"Σημειώστε ότι η προβολή δένδρου (TreeView) στο στιγμιότυπο δεν εμφανίζει "
"πράγματι τα δεδομένα από τις ιδιότητες \"description\". Στη θέση της, αυτή η "
"πληροφορία εμφανίζεται στην ετικέτα από κάτω της, για κάθε γραμμή που "
"πατάτε. Αυτό συμβαίνει επειδή η προβολή δένδρου και η αποθήκη καταλόγου "
"(ListStore) είναι δύο ξεχωριστά πράγματα και μια προβολή δένδρου μπορεί να "
"εμφανίσει όλο ή μέρος της αποθήκης καταλόγου και προβάλλει τι είναι σε αυτή "
"με διαφορετικούς τρόπους. Μπορείτε ακόμα να έχετε πολλαπλά γραφικά στοιχεία "
"που εμφανίζουν πράγματα από την ίδια την αποθήκη καταλόγου, όπως την ετικέτα "
"στο παράδειγμά μας ή ακόμα μια δεύτερη προβολή δένδρου."

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:135
#, no-wrap
msgid ""
"\n"
"        for (i = 0; i &lt; phonebook.length; i++ ) {\n"
"            let contact = phonebook [i];\n"
"            this._listStore.set (this._listStore.append(), [0, 1, 2, 3],\n"
"                [contact.name, contact.surname, contact.phone, contact.description]);\n"
"        }\n"
msgstr ""
"\n"
"        for (i = 0; i &lt; phonebook.length; i++ ) {\n"
"            let contact = phonebook [i];\n"
"            this._listStore.set (this._listStore.append(), [0, 1, 2, 3],\n"
"                [contact.name, contact.surname, contact.phone, contact.description]);\n"
"        }\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:142
msgid ""
"This <file>for</file> loop puts the strings from our phonebook into our "
"ListStore in order. In order, we pass the ListStore's set method the iter "
"that points to the correct row, an array which says which columns we want to "
"set, and an array which contains the data we want to put into those columns."
msgstr ""
"Αυτός ο βρόχος <file>for</file> βάζει τις συμβολοσειρές από τον τηλεφωνικό "
"κατάλογό μας στη ListStore μας σε σειρά. Για να περάσουμε την μέθοδο ορισμού "
"της ListStore στην επανάληψη που δείχνει στη σωστή γραμμή, χρειάζεται ένας "
"πίνακας που λέει ποιες στήλες θέλουμε να ορίσουμε και ένας πίνακας που "
"περιέχει τα δεδομένα που θέλουμε να βάλουμε σε αυτές τις στήλες."

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:143
msgid ""
"A ListStore's <file>append</file> method adds a horizontal row onto it (it "
"starts out with none), and returns a TreeIter pointing to that row like a "
"cursor. So by passing <file>this._listStore.append()</file> to the ListStore "
"as a property, we're creating a new row and telling the <file>set</file> "
"method which row to set data for at the same time."
msgstr ""
"Μια μέθοδος <file>append</file> της ListStore προσθέτει μια οριζόντια γραμμή "
"σε αυτή (ξεκινά χωρίς καμία) και επιστρέφει μια TreeIter που δείχνει σε "
"αυτήν τη γραμμή όπως ένας δρομέας. Έτσι περνώντας το <file>this._listStore."
"append()</file> στη ListStore ως μια ιδιότητα, δημιουργούμε μια νέα γραμμή "
"και λέμε στη μέθοδο <file>set</file> ποια γραμμή να ορίσει τα δεδομένα "
"ταυτόχρονα."

#. (itstool) path: section/title
#: C/treeview_simple_liststore.js.page:148
msgid "Creating the TreeView"
msgstr "Δημιουργία της προβολής δένδρου (TreeView)"

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:149
#, no-wrap
msgid ""
"\n"
"        // Create the treeview\n"
"        this._treeView = new Gtk.TreeView ({\n"
"            expand: true,\n"
"            model: this._listStore });\n"
msgstr ""
"\n"
"        // Δημιουργία της προβολής δένδρου\n"
"        this._treeView = new Gtk.TreeView ({\n"
"            expand: true,\n"
"            model: this._listStore });\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:155
msgid ""
"Here we create a basic TreeView widget, that expands both horizontally and "
"vertically to use as much space as needed. We set it to use the ListStore we "
"created as its \"model\", or the thing it'll show us stuff from."
msgstr ""
"Εδώ δημιουργούμε ένα βασικό γραφικό στοιχείο TreeView, που επεκτείνεται "
"οριζόντια και κάθετα για να χρησιμοποιήσει όσο χώρο χρειάζεται. Το ορίζουμε "
"να χρησιμοποιήσει τη ListStore που δημιουργήσαμε ως το \"model\" του, ή το "
"πράγμα που θα μας δείξει το υλικό."

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:157
#, no-wrap
msgid ""
"\n"
"        // Create the columns for the address book\n"
"        let firstName = new Gtk.TreeViewColumn ({ title: \"First Name\" });\n"
"        let lastName = new Gtk.TreeViewColumn ({ title: \"Last Name\" });\n"
"        let phone = new Gtk.TreeViewColumn ({ title: \"Phone Number\" });\n"
msgstr ""
"\n"
"        // Δημιουργία των στηλών για το βιβλίο διευθύνσεων\n"
"        let firstName = new Gtk.TreeViewColumn ({ title: \"First Name\" });\n"
"        let lastName = new Gtk.TreeViewColumn ({ title: \"Last Name\" });\n"
"        let phone = new Gtk.TreeViewColumn ({ title: \"Phone Number\" });\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:163
msgid ""
"Now we create each of the vertical TreeViewColumns we'll see in the "
"TreeView. The title for each one goes at the top, as you can see in the "
"screenshot."
msgstr ""
"Τώρα δημιουργούμε καθεμιά από τις κάθετες TreeViewColumns που βλέπουμε στην "
"TreeView. Ο τίτλος για καθεμιά πηγαίνει στην κορυφή, όπως μπορείτε να δείτε "
"στο στιγμιότυπο."

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:165
#, no-wrap
msgid ""
"\n"
"        // Create a cell renderer for when bold text is needed\n"
"        let bold = new Gtk.CellRendererText ({\n"
"            weight: Pango.Weight.BOLD });\n"
"\n"
"        // Create a cell renderer for normal text\n"
"        let normal = new Gtk.CellRendererText ();\n"
"\n"
"        // Pack the cell renderers into the columns\n"
"        firstName.pack_start (bold, true);\n"
"        lastName.pack_start (normal, true);\n"
"        phone.pack_start (normal, true);\n"
msgstr ""
"\n"
"        // Δημιουργία μιας απεικόνισης κελιού για όταν χρειάζεται έντονο κείμενο\n"
"        let bold = new Gtk.CellRendererText ({\n"
"            weight: Pango.Weight.BOLD });\n"
"\n"
"        // Δημιουργία μιας απεικόνισης κελιού για κανονικό κείμενο\n"
"        let normal = new Gtk.CellRendererText ();\n"
"\n"
"        // Συσκευασία των απεικονίσεων κελιού στις στήλες\n"
"        firstName.pack_start (bold, true);\n"
"        lastName.pack_start (normal, true);\n"
"        phone.pack_start (normal, true);\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:178
msgid ""
"Here we create the CellRenderers that we'll use to display the text from our "
"ListStore, and pack them into the TreeViewColumns. Each CellRendererText is "
"used for all the entries in that column. Our normal CellRendererText just "
"creates plain text, while our bold one uses heavier-weight text. We put it "
"into the first name column, and tell the other two to use copies of the "
"normal one. The \"true\" used as the second parameter for the "
"<file>pack_start</file> method tells it to expand the cells when possible, "
"instead of keeping them compact."
msgstr ""
"Εδώ δημιουργούμε τους απεικονιστές κελιών (CellRenderers) που θα "
"χρησιμοποιήσουμε για την εμφάνιση του κειμένου από τη ListStore μας και τους "
"πακετάρουμε στις TreeViewColumns. Κάθε CellRendererText χρησιμοποιείται για "
"όλες τις καταχωρίσεις σε αυτήν τη στήλη. Το κανονικό μας CellRendererText "
"απλά δημιουργεί απλό κείμενο, ενώ το έντονο κείμενο χρησιμοποιεί κείμενο "
"βαρύτερου πάχους. Το βάζουμε στη στήλη πρώτου ονόματος και λέμε στα άλλα δύο "
"να χρησιμοποιήσουμε αντίγραφα του κανονικού. Το \"αληθές\" χρησιμοποιείται "
"ως η δεύτερη παράμετρος για τη μέθοδο <file>pack_start</file> που του λέει "
"να επεκτείνει τα κελιά όταν είναι δυνατό, αντί να τα κρατήσει συμπαγή."

#. (itstool) path: note/p
#: C/treeview_simple_liststore.js.page:179
msgid ""
"<link href=\"http://www.pygtk.org/docs/pygtk/pango-constants.html\">Here is "
"a list</link> of other text properties you can use. In order to use these "
"Pango constants, make sure to put the line <file>const Pango = imports.gi."
"Pango;</file> at the beginning of your code like we did."
msgstr ""
"<link href=\"http://www.pygtk.org/docs/pygtk/pango-constants.html\">Εδώ "
"είναι μια λίστα</link> των άλλων ιδιοτήτων του κειμένου που μπορείτε να "
"δείτε. Για να χρησιμοποιήσετε αυτές τις σταθερές Pango, βεβαιωθείτε ότι "
"βάλατε τη γραμμή <file>const Pango = imports.gi.Pango;</file> στην αρχή του "
"κώδικα σας όπως κάναμε."

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:181
#, no-wrap
msgid ""
"\n"
"        firstName.add_attribute (bold, \"text\", 0);\n"
"        lastName.add_attribute (normal, \"text\", 1);\n"
"        phone.add_attribute (normal, \"text\", 2);\n"
"\n"
"        // Insert the columns into the treeview\n"
"        this._treeView.insert_column (firstName, 0);\n"
"        this._treeView.insert_column (lastName, 1);\n"
"        this._treeView.insert_column (phone, 2);\n"
msgstr ""
"\n"
"        firstName.add_attribute (bold, \"text\", 0);\n"
"        lastName.add_attribute (normal, \"text\", 1);\n"
"        phone.add_attribute (normal, \"text\", 2);\n"
"\n"
"        // Εισαγωγή των στηλών στην προβολή δένδρου\n"
"        this._treeView.insert_column (firstName, 0);\n"
"        this._treeView.insert_column (lastName, 1);\n"
"        this._treeView.insert_column (phone, 2);\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:191
msgid ""
"Now that we've put the CellRenderers into the TreeViewColumns, we use the "
"<file>add_attribute</file> method to tell each column to pull in text from "
"the model our TreeView is set to use; in this case, the ListStore with the "
"phonebook."
msgstr ""
"Τώρα που έχουμε βάλει τους απεικονιστές κελιών (CellRenderers) στις στήλες "
"προβολής δένδρου (TreeViewColumns), χρησιμοποιούμε τη μέθοδο "
"<file>add_attribute</file> για να πει σε κάθε στήλη να σύρει το κείμενο από "
"το πρότυπό μας προβολής δένδρου (TreeView) που ορίστηκε για χρήση· σε αυτήν "
"την περίπτωση, την αποθήκη καταλόγου (ListStore) με τον τηλεφωνικό κατάλογο."

#. (itstool) path: item/p
#: C/treeview_simple_liststore.js.page:193
msgid ""
"The first parameter is which CellRenderer we're going to use to render what "
"we're pulling in."
msgstr ""
"Η πρώτη παράμετρος είναι όποια απεικόνιση κελιών (CellRenderer) πρόκειται να "
"χρησιμοποιήσουμε για απόδοση του τι σύρουμε."

#. (itstool) path: item/p
#: C/treeview_simple_liststore.js.page:194
msgid ""
"The second parameter is what kind of information we're going to pull in. In "
"this case, we're letting it know that we're rendering text."
msgstr ""
"Η δεύτερη παράμετρος είναι τι είδος πληροφορίας πρόκειται να σύρουμε. Σε "
"αυτήν την περίπτωση, την αφήνουμε να μάθει ότι αποδίδουμε κείμενο."

#. (itstool) path: item/p
#: C/treeview_simple_liststore.js.page:195
msgid ""
"The third parameter is which of the ListStore's columns we're pulling that "
"information in from."
msgstr ""
"Η τρίτη παράμετρος είναι σε ποια στήλη της ListStore σύρουμε αυτήν την "
"πληροφορία."

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:197
msgid ""
"After we've set that up, we use the TreeView's <file>insert_column</file> "
"method to put our TreeViewColumns inside it in order. Our TreeView is now "
"complete."
msgstr ""
"Αφού το ρυθμίσουμε, χρησιμοποιούμε τη μέθοδο <file>insert_column</file> του "
"TreeView για να βάλουμε τις TreeViewColumns μας μέσα του σε σειρά. Η "
"TreeView μας είναι τώρα πλήρης."

#. (itstool) path: note/p
#: C/treeview_simple_liststore.js.page:198
msgid ""
"Normally, you might want to use a loop to initialize your TreeView, but in "
"this example we're spelling things out step by step for the sake of making "
"it easier to understand."
msgstr ""
"Κανονικά, θα μπορούσατε να θελήσετε να χρησιμοποιήσετε έναν βρόχο για "
"αρχικοποίηση την TreeView σας, αλλά σε αυτό το παράδειγμα εξηγούμε "
"λεπτομερώς τα πράγματα βήμα-βήμα για διευκόλυνση της κατανόησης."

#. (itstool) path: section/title
#: C/treeview_simple_liststore.js.page:202
msgid "Building the rest of the UI"
msgstr "Δημιουργία της υπόλοιπης διεπαφής χρήστη"

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:203
#, no-wrap
msgid ""
"\n"
"        // Create the label that shows details for the name you select\n"
"        this._label = new Gtk.Label ({ label: \"\" });\n"
"\n"
"        // Get which item is selected\n"
"        this.selection = this._treeView.get_selection();\n"
"\n"
"        // When something new is selected, call _on_changed\n"
"        this.selection.connect ('changed', Lang.bind (this, this._onSelectionChanged));\n"
msgstr ""
"\n"
"        // Δημιουργία της ετικέτας που εμφανίζει λεπτομέρειες για το όνομα που διαλέξατε\n"
"        this._label = new Gtk.Label ({ label: \"\" });\n"
"\n"
"        // Λήψη όποιου στοιχείου επιλέγεται\n"
"        this.selection = this._treeView.get_selection();\n"
"\n"
"        // Όταν επιλέγεται κάτι νέο, call _on_changed\n"
"        this.selection.connect ('changed', Lang.bind (this, this._onSelectionChanged));\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:213
msgid ""
"The TreeView's <file>get_selection</file> method returns an object called a "
"TreeSelection. A TreeSelection is like a TreeIter in that it's basically a "
"cursor that points at a particular row, except that the one it points to is "
"the one that's visibly highlighted as selected."
msgstr ""
"Η μέθοδος <file>get_selection</file> της TreeView επιστρέφει ένα αντικείμενο "
"που λέγεται TreeSelection. Μια TreeSelection είναι όπως μια TreeIter στο ότι "
"είναι βασικά ένας δρομέας που δείχνει σε μια συγκεκριμένη γραμμή, εκτός από "
"το ότι αυτό που δείχνει είναι αυτό που είναι ορατά επισημασμένο καθώς "
"επιλέχτηκε."

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:214
msgid ""
"After we get the TreeSelection that goes with our TreeView, we ask it to "
"tell us when it changes which row it's pointing to. We do this by connecting "
"its <file>changed</file> signal to the _onSelectionChanged function we "
"wrote. This function changes the text displayed by the Label we just made."
msgstr ""
"Αφού πάρουμε την TreeSelection που πηγαίνει με την TreeView μας, της ζητάμε "
"να μας πει όταν αλλάζει σε ποια γραμμή δείχνει. Το κάνουμε συνδέοντας τι "
"σήμα της <file>changed</file> στη συνάρτηση _onSelectionChanged που γράψαμε. "
"Αυτή η συνάρτηση αλλάζει το εμφανιζόμενο κείμενο με την ετικέτα που μόλις "
"κάναμε."

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:216
#, no-wrap
msgid ""
"\n"
"        // Create a grid to organize everything in\n"
"        this._grid = new Gtk.Grid;\n"
"\n"
"        // Attach the treeview and label to the grid\n"
"        this._grid.attach (this._treeView, 0, 0, 1, 1);\n"
"        this._grid.attach (this._label, 0, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""
"\n"
"        // Δημιουργία πλέγματος για οργάνωση όλων μέσα του\n"
"        this._grid = new Gtk.Grid;\n"
"\n"
"        // Προσάρτηση της προβολής δένδρου και της ετικέτας στο πλέγμα\n"
"        this._grid.attach (this._treeView, 0, 0, 1, 1);\n"
"        this._grid.attach (this._label, 0, 1, 1, 1);\n"
"\n"
"        // Προσθήκη του πλέγματος στο παράθυρο\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:231
msgid ""
"After we've gotten that out of the way, we create a <link xref=\"grid.js"
"\">Grid</link> to put everything in, then add it to our window and tell the "
"window to show itself and its contents."
msgstr ""
"Αφού το έχουμε βγάλει εκτός, δημιουργούμε ένα <link xref=\"grid.js\">πλέγμα</"
"link> για να τα βάλουμε όλα μέσα, έπειτα το προσθέτουμε στο παράθυρό μας και "
"λέμε στο παράθυρο να εμφανίσει τον εαυτόν του και τα περιεχόμενα του."

#. (itstool) path: section/title
#: C/treeview_simple_liststore.js.page:235
msgid "Function which handles a changed selection"
msgstr "Η συνάρτηση που χειρίζεται μια αλλαγμένη επιλογή"

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:237
#, no-wrap
msgid ""
"\n"
"    _onSelectionChanged: function () {\n"
"\n"
"        // Grab a treeiter pointing to the current selection\n"
"        let [ isSelected, model, iter ] = this.selection.get_selected();\n"
"\n"
"        // Set the label to read off the values stored in the current selection\n"
"        this._label.set_label (\"\\n\" +\n"
"            this._listStore.get_value (iter, 0) + \" \" +\n"
"            this._listStore.get_value (iter, 1) + \" \" +\n"
"            this._listStore.get_value (iter, 2) + \"\\n\" +\n"
"            this._listStore.get_value (iter, 3));\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _onSelectionChanged: function () {\n"
"\n"
"        // Σύλληψη ενός treeiter που δείχνει στην τρέχουσα επιλογή\n"
"        let [ isSelected, model, iter ] = this.selection.get_selected();\n"
"\n"
"        // Ορισμός της ετικέτας  για ανάγνωση των αποθηκευμένων τιμών στην τρέχουσα επιλογή\n"
"        this._label.set_label (\"\\n\" +\n"
"            this._listStore.get_value (iter, 0) + \" \" +\n"
"            this._listStore.get_value (iter, 1) + \" \" +\n"
"            this._listStore.get_value (iter, 2) + \"\\n\" +\n"
"            this._listStore.get_value (iter, 3));\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:254
msgid ""
"The line of code with the let statement is a little convoluted, but it's "
"nonetheless the best way to get a TreeIter pointing to the same row as our "
"TreeSelection. It has to create a couple of other object references, but "
"<file>iter</file> is the only one we need."
msgstr ""
"Η γραμμή του κώδικα με την δήλωση let είναι λίγο μπερδεμένη, αλλά παρόλα "
"αυτά είναι ο άριστος τρόπος να κάνετε την TreeIter να δείχνει στην ίδια "
"γραμμή όπως η TreeSelection μας. Πρέπει να δημιουργήσουμε λίγες άλλες "
"αναφορές αντικειμένου, αλλά η <file>iter</file> είναι το μόνο που "
"χρειαζόμαστε."

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:255
msgid ""
"After we've done that, we call the Label's <file>set_label</file> function, "
"and use the ListStore's <file>get_value</file> function a handful of times "
"to fill in the data we want to put in it. Its parameters are a TreeIter "
"pointing to the row we want to get data from, and the column."
msgstr ""
"Αφού το τελειώσουμε, καλούμε τη συνάρτηση της ετικέτας <file>set_label</"
"file> και χρησιμοποιούμε τη συνάρτηση της ListStore <file>get_value</file> "
"λίγες φορές για να συμπληρώσουμε τα δεδομένα που θέλουμε να τα εισάγουμε. Οι "
"παράμετροι της είναι μια TreeIter που δείχνει στη γραμμή από όπου θέλουμε να "
"πάρουμε δεδομένα και τη στήλη."

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:256
msgid ""
"Here, we want to get data from all four columns, including the \"hidden\" "
"one that's not part of the TreeView. This way, we can use our Label to show "
"strings that are too large to fit in the TreeView, and that we don't need to "
"see at a glance."
msgstr ""
"Εδώ, θέλουμε να πάρουμε δεδομένα και από τις τέσσερις στήλες, "
"συμπεριλαμβάνοντας την \"κρυφή\" που δεν είναι μέρος της TreeView. Έτσι, "
"μπορούμε να χρησιμοποιήσουμε την ετικέτα μας για να εμφανίσουμε "
"συμβολοσειρές που είναι υπερβολικά μεγάλες για προσαρμογή στη TreeView και "
"που δεν χρειαζόμαστε να δούμε με μια ματιά."

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:258
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new TreeViewExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new TreeViewExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:263
msgid ""
"Finally, we create a new instance of the finished TreeViewExample class, and "
"set the application running."
msgstr ""
"Τελικά, δημιουργούμε ένα νέο παράδειγμα της τελειωμένης κλάσης "
"TreeViewExample και εκτελούμε την εφαρμογή."

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:268
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"const Pango = imports.gi.Pango;\n"
"\n"
"const TreeViewExample = new Lang.Class({\n"
"    Name: 'TreeView Example with Simple ListStore',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jstreeviewsimpleliststore'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 250,\n"
"            default_width: 100,\n"
"            border_width: 20,\n"
"            title: \"My Phone Book\"});\n"
"\n"
"        // Create the underlying liststore for the phonebook\n"
"        this._listStore = new Gtk.ListStore ();\n"
"        this._listStore.set_column_types ([\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING]);\n"
"\n"
"        // Data to go in the phonebook\n"
"        let phonebook =\n"
"            [{ name: \"Jurg\", surname: \"Billeter\", phone: \"555-0123\",\n"
"                description: \"A friendly person.\"},\n"
"             { name: \"Johannes\", surname: \"Schmid\", phone: \"555-1234\",\n"
"                description: \"Easy phone number to remember.\"},\n"
"             { name: \"Julita\", surname: \"Inca\", phone: \"555-2345\",\n"
"                description: \"Another friendly person.\"},\n"
"             { name: \"Javier\", surname: \"Jardon\", phone: \"555-3456\",\n"
"                description: \"Bring fish for his penguins.\"},\n"
"             { name: \"Jason\", surname: \"Clinton\", phone: \"555-4567\",\n"
"                description: \"His cake's not a lie.\"},\n"
"             { name: \"Random J.\", surname: \"Hacker\", phone: \"555-5678\",\n"
"                description: \"Very random!\"}];\n"
"\n"
"        // Put the data in the phonebook\n"
"        for (let i = 0; i &lt; phonebook.length; i++ ) {\n"
"            let contact = phonebook [i];\n"
"            this._listStore.set (this._listStore.append(), [0, 1, 2, 3],\n"
"                [contact.name, contact.surname, contact.phone, contact.description]);\n"
"        }\n"
"\n"
"        // Create the treeview\n"
"        this._treeView = new Gtk.TreeView ({\n"
"            expand: true,\n"
"            model: this._listStore });\n"
"\n"
"        // Create the columns for the address book\n"
"        let firstName = new Gtk.TreeViewColumn ({ title: \"First Name\" });\n"
"        let lastName = new Gtk.TreeViewColumn ({ title: \"Last Name\" });\n"
"        let phone = new Gtk.TreeViewColumn ({ title: \"Phone Number\" });\n"
"\n"
"        // Create a cell renderer for when bold text is needed\n"
"        let bold = new Gtk.CellRendererText ({\n"
"            weight: Pango.Weight.BOLD });\n"
"\n"
"        // Create a cell renderer for normal text\n"
"        let normal = new Gtk.CellRendererText ();\n"
"\n"
"        // Pack the cell renderers into the columns\n"
"        firstName.pack_start (bold, true);\n"
"        lastName.pack_start (normal, true);\n"
"        phone.pack_start (normal, true);\n"
"\n"
"        // Set each column to pull text from the TreeView's model\n"
"        firstName.add_attribute (bold, \"text\", 0);\n"
"        lastName.add_attribute (normal, \"text\", 1);\n"
"        phone.add_attribute (normal, \"text\", 2);\n"
"\n"
"        // Insert the columns into the treeview\n"
"        this._treeView.insert_column (firstName, 0);\n"
"        this._treeView.insert_column (lastName, 1);\n"
"        this._treeView.insert_column (phone, 2);\n"
"\n"
"        // Create the label that shows details for the name you select\n"
"        this._label = new Gtk.Label ({ label: \"\" });\n"
"\n"
"        // Get which item is selected\n"
"        this.selection = this._treeView.get_selection();\n"
"\n"
"        // When something new is selected, call _on_changed\n"
"        this.selection.connect ('changed', Lang.bind (this, this._onSelectionChanged));\n"
"\n"
"        // Create a grid to organize everything in\n"
"        this._grid = new Gtk.Grid;\n"
"\n"
"        // Attach the treeview and label to the grid\n"
"        this._grid.attach (this._treeView, 0, 0, 1, 1);\n"
"        this._grid.attach (this._label, 0, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onSelectionChanged: function () {\n"
"\n"
"        // Grab a treeiter pointing to the current selection\n"
"        let [ isSelected, model, iter ] = this.selection.get_selected();\n"
"\n"
"        // Set the label to read off the values stored in the current selection\n"
"        this._label.set_label (\"\\n\" +\n"
"            this._listStore.get_value (iter, 0) + \" \" +\n"
"            this._listStore.get_value (iter, 1) + \" \" +\n"
"            this._listStore.get_value (iter, 2) + \"\\n\" +\n"
"            this._listStore.get_value (iter, 3));\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new TreeViewExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"const Pango = imports.gi.Pango;\n"
"\n"
"const TreeViewExample = new Lang.Class({\n"
"    Name: 'TreeView Example with Simple ListStore',\n"
"\n"
"    // Δημιουργία της εφαρμογής αυτής καθεαυτής\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jstreeviewsimpleliststore'\n"
"        });\n"
"\n"
"    // Σύνδεση των σημάτων Connect 'activate' και 'startup'με τις συναρτήσεις επανάκλησης\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'activate' παρουσιάζει παράθυρο όταν είναι ενεργή\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Η συνάρτηση επανάκλησης για το σήμα 'startup' δομεί τη διεπαφή χρήστη\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Δόμηση της διεπαφής χρήστη της εφαρμογής\n"
"    _buildUI: function() {\n"
"\n"
"        // Δημιουργία του παραθύρου της εφαρμογής\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 250,\n"
"            default_width: 100,\n"
"            border_width: 20,\n"
"            title: \"My Phone Book\"});\n"
"\n"
"        // Δημιουργία της υποκείμενης αποθήκης καταλόγων για τον τηλεφωνικό κατάλογο\n"
"        this._listStore = new Gtk.ListStore ();\n"
"        this._listStore.set_column_types ([\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING]);\n"
"\n"
"        // Δεδομένα που θα πάνε στον τηλεφωνικό κατάλογο\n"
"        let phonebook =\n"
"            [{ name: \"Jurg\", surname: \"Billeter\", phone: \"555-0123\",\n"
"                description: \"A friendly person.\"},\n"
"             { name: \"Johannes\", surname: \"Schmid\", phone: \"555-1234\",\n"
"                description: \"Easy phone number to remember.\"},\n"
"             { name: \"Julita\", surname: \"Inca\", phone: \"555-2345\",\n"
"                description: \"Another friendly person.\"},\n"
"             { name: \"Javier\", surname: \"Jardon\", phone: \"555-3456\",\n"
"                description: \"Bring fish for his penguins.\"},\n"
"             { name: \"Jason\", surname: \"Clinton\", phone: \"555-4567\",\n"
"                description: \"His cake's not a lie.\"},\n"
"             { name: \"Random J.\", surname: \"Hacker\", phone: \"555-5678\",\n"
"                description: \"Very random!\"}];\n"
"\n"
"        // Τοποθέτηση των δεδομένων στον τηλεφωνικό κατάλογο\n"
"        for (let i = 0; i &lt; phonebook.length; i++ ) {\n"
"            let contact = phonebook [i];\n"
"            this._listStore.set (this._listStore.append(), [0, 1, 2, 3],\n"
"                [contact.name, contact.surname, contact.phone, contact.description]);\n"
"        }\n"
"\n"
"        // Δημιουργία της προβολής δένδρου\n"
"        this._treeView = new Gtk.TreeView ({\n"
"            expand: true,\n"
"            model: this._listStore });\n"
"\n"
"        // Δημιουργία των στηλών για το βιβλίο διευθύνσεων\n"
"        let firstName = new Gtk.TreeViewColumn ({ title: \"First Name\" });\n"
"        let lastName = new Gtk.TreeViewColumn ({ title: \"Last Name\" });\n"
"        let phone = new Gtk.TreeViewColumn ({ title: \"Phone Number\" });\n"
"\n"
"        // Δημιουργία απεικονιστή κελιού για όταν χρειαστεί έντονη γραφή\n"
"        let bold = new Gtk.CellRendererText ({\n"
"            weight: Pango.Weight.BOLD });\n"
"\n"
"        // Δημιουργία απεικονιστή κελιού για κανονικό κείμενο\n"
"        let normal = new Gtk.CellRendererText ();\n"
"\n"
"        // Συσκευασία των απεικονιστών κελιών σε στήλες\n"
"        firstName.pack_start (bold, true);\n"
"        lastName.pack_start (normal, true);\n"
"        phone.pack_start (normal, true);\n"
"\n"
"        // Ορισμός κάθε στήλης να μεταφέρει κείμενο από το πρότυπο προβολής δένδρου \n"
"        firstName.add_attribute (bold, \"text\", 0);\n"
"        lastName.add_attribute (normal, \"text\", 1);\n"
"        phone.add_attribute (normal, \"text\", 2);\n"
"\n"
"        // Εισαγωγή στηλών στην προβολή δένδρου\n"
"        this._treeView.insert_column (firstName, 0);\n"
"        this._treeView.insert_column (lastName, 1);\n"
"        this._treeView.insert_column (phone, 2);\n"
"\n"
"        // Δημιουργία της ετικέτας που εμφανίζει λεπτομέρειες για το όνομα που επιλέξατε\n"
"        this._label = new Gtk.Label ({ label: \"\" });\n"
"\n"
"        // Λήψη του επιλεγμένου στοιχείου\n"
"        this.selection = this._treeView.get_selection();\n"
"\n"
"        // Όταν κάτι νέο επιλέγεται, call _on_changed\n"
"        this.selection.connect ('changed', Lang.bind (this, this._onSelectionChanged));\n"
"\n"
"        // Δημιουργία πλέγματος για οργάνωση όλων μέσα του\n"
"        this._grid = new Gtk.Grid;\n"
"\n"
"        // Προσάρτηση της προβολής δένδρου και ετικέτας στο πλέγμα\n"
"        this._grid.attach (this._treeView, 0, 0, 1, 1);\n"
"        this._grid.attach (this._label, 0, 1, 1, 1);\n"
"\n"
"        // Προσθήκη του πλέγματος στο παράθυρο\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onSelectionChanged: function () {\n"
"\n"
"        // Σύλληψη ενός treeiter που δείχνει στη τρέχουσα επιλογή\n"
"        let [ isSelected, model, iter ] = this.selection.get_selected();\n"
"\n"
"        // Ορισμός της ετικέτας για ανάγνωση των αποθηκευμένων τιμών στην τρέχουσα επιλογή\n"
"        this._label.set_label (\"\\n\" +\n"
"            this._listStore.get_value (iter, 0) + \" \" +\n"
"            this._listStore.get_value (iter, 1) + \" \" +\n"
"            this._listStore.get_value (iter, 2) + \"\\n\" +\n"
"            this._listStore.get_value (iter, 3));\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Εκτέλεση της εφαρμογής\n"
"let app = new TreeViewExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/treeview_simple_liststore.js.page:282
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TreeSelection."
"html\">Gtk.TreeSelection</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TreeSelection."
"html\">Gtk.TreeSelection</link>"

#. (itstool) path: item/p
#: C/treeview_simple_liststore.js.page:283
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TreeView.html"
"\">Gtk.TreeView</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TreeView.html"
"\">Gtk.TreeView</link>"

#. (itstool) path: item/p
#: C/treeview_simple_liststore.js.page:284
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"TreeViewColumn.html\">Gtk.TreeViewColumn</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"TreeViewColumn.html\">Gtk.TreeViewColumn</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/treeview_simple_liststore.py.page:24
#: C/treeview_simple_liststore.vala.page:24
msgctxt "_"
msgid ""
"external ref='media/treeview_simple_liststore.png' "
"md5='2dc501a2b95b094da985d37b66aee90c'"
msgstr ""
"external ref='media/treeview_simple_liststore.png' "
"md5='2dc501a2b95b094da985d37b66aee90c'"

#. (itstool) path: info/title
#: C/treeview_simple_liststore.py.page:8
msgctxt "text"
msgid "Simple TreeView with ListStore (Python)"
msgstr ""
"Απλή προβολή δένδρου (Treeview) με αποθήκη καταλόγων (ListStore) (Python)"

#. (itstool) path: info/desc
#: C/treeview_simple_liststore.py.page:20
msgid "A TreeView displaying a ListStore (simpler example)"
msgstr ""
"Μια προβολή δένδρου (TreeView) που εμφανίζει μια  αποθήκη δένδρου "
"(TreeStore) (απλό παράδειγμα)"

#. (itstool) path: page/title
#: C/treeview_simple_liststore.py.page:23
msgid "Simple TreeView with ListStore"
msgstr "Απλή Treeview με ListStore"

#. (itstool) path: section/code
#: C/treeview_simple_liststore.py.page:32
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Pango\n"
"import sys\n"
"\n"
"columns = [\"First Name\",\n"
"           \"Last Name\",\n"
"           \"Phone Number\"]\n"
"\n"
"phonebook = [[\"Jurg\", \"Billeter\", \"555-0123\"],\n"
"             [\"Johannes\", \"Schmid\", \"555-1234\"],\n"
"             [\"Julita\", \"Inca\", \"555-2345\"],\n"
"             [\"Javier\", \"Jardon\", \"555-3456\"],\n"
"             [\"Jason\", \"Clinton\", \"555-4567\"],\n"
"             [\"Random J.\", \"Hacker\", \"555-5678\"]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"My Phone Book\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data in the model (three strings for each row, one for each\n"
"        # column)\n"
"        listmodel = Gtk.ListStore(str, str, str)\n"
"        # append the values in the model\n"
"        for i in range(len(phonebook)):\n"
"            listmodel.append(phonebook[i])\n"
"\n"
"        # a treeview to see the data stored in the model\n"
"        view = Gtk.TreeView(model=listmodel)\n"
"        # for each column\n"
"        for i in range(len(columns)):\n"
"            # cellrenderer to render the text\n"
"            cell = Gtk.CellRendererText()\n"
"            # the text in the first column should be in boldface\n"
"            if i == 0:\n"
"                cell.props.weight_set = True\n"
"                cell.props.weight = Pango.Weight.BOLD\n"
"            # the column is created\n"
"            col = Gtk.TreeViewColumn(columns[i], cell, text=i)\n"
"            # and it is appended to the treeview\n"
"            view.append_column(col)\n"
"\n"
"        # when a row is selected, it emits a signal\n"
"        view.get_selection().connect(\"changed\", self.on_changed)\n"
"\n"
"        # the label we use to show the selection\n"
"        self.label = Gtk.Label()\n"
"        self.label.set_text(\"\")\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(view, 0, 0, 1, 1)\n"
"        grid.attach(self.label, 0, 1, 1, 1)\n"
"\n"
"        # attach the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    def on_changed(self, selection):\n"
"        # get the model and the iterator that points at the data in the model\n"
"        (model, iter) = selection.get_selected()\n"
"        # set the label to a new value depending on the selection\n"
"        self.label.set_text(\"\\n %s %s %s\" %\n"
"                            (model[iter][0],  model[iter][1], model[iter][2]))\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Pango\n"
"import sys\n"
"\n"
"columns = [\"First Name\",\n"
"           \"Last Name\",\n"
"           \"Phone Number\"]\n"
"\n"
"phonebook = [[\"Jurg\", \"Billeter\", \"555-0123\"],\n"
"             [\"Johannes\", \"Schmid\", \"555-1234\"],\n"
"             [\"Julita\", \"Inca\", \"555-2345\"],\n"
"             [\"Javier\", \"Jardon\", \"555-3456\"],\n"
"             [\"Jason\", \"Clinton\", \"555-4567\"],\n"
"             [\"Random J.\", \"Hacker\", \"555-5678\"]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"My Phone Book\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data in the model (three strings for each row, one for each\n"
"        # column)\n"
"        listmodel = Gtk.ListStore(str, str, str)\n"
"        # append the values in the model\n"
"        for i in range(len(phonebook)):\n"
"            listmodel.append(phonebook[i])\n"
"\n"
"        # a treeview to see the data stored in the model\n"
"        view = Gtk.TreeView(model=listmodel)\n"
"        # for each column\n"
"        for i in range(len(columns)):\n"
"            # cellrenderer to render the text\n"
"            cell = Gtk.CellRendererText()\n"
"            # the text in the first column should be in boldface\n"
"            if i == 0:\n"
"                cell.props.weight_set = True\n"
"                cell.props.weight = Pango.Weight.BOLD\n"
"            # the column is created\n"
"            col = Gtk.TreeViewColumn(columns[i], cell, text=i)\n"
"            # and it is appended to the treeview\n"
"            view.append_column(col)\n"
"\n"
"        # when a row is selected, it emits a signal\n"
"        view.get_selection().connect(\"changed\", self.on_changed)\n"
"\n"
"        # the label we use to show the selection\n"
"        self.label = Gtk.Label()\n"
"        self.label.set_text(\"\")\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(view, 0, 0, 1, 1)\n"
"        grid.attach(self.label, 0, 1, 1, 1)\n"
"\n"
"        # attach the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    def on_changed(self, selection):\n"
"        # get the model and the iterator that points at the data in the model\n"
"        (model, iter) = selection.get_selected()\n"
"        # set the label to a new value depending on the selection\n"
"        self.label.set_text(\"\\n %s %s %s\" %\n"
"                            (model[iter][0],  model[iter][1], model[iter][2]))\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.py.page:37
msgid ""
"The TreeView widget is designed around a <em>Model/View/Controller</em> "
"design: the <em>Model</em> stores the data; the <em>View</em> gets change "
"notifications and displays the content of the model; the <em>Controller</"
"em>, finally, changes the state of the model and notifies the view of these "
"changes. For more information, and for a list of useful methods for "
"TreeModel, see <link xref=\"model-view-controller.py\"/>."
msgstr ""
"Το γραφικό στοιχείο προβολή δένδρου (TreeView) σχεδιάστηκε γύρω από ένα "
"σχέδιο <em>προτύπου/προβολής/ελεγκτή</em>: το <em>πρότυπο</em> αποθηκεύει τα "
"δεδομένα· η <em>Προβολή</em> παίρνει ειδοποιήσεις αλλαγής και εμφανίζει το "
"περιεχόμενο του προτύπου· ο <em>ελεγκτής</em>, τελικά, αλλάζει την κατάσταση "
"του προτύπου και ειδοποιεί την προβολή για αυτές τις αλλαγές. Για "
"περισσότερες πληροφορίες και για μια λίστα χρήσιμων μεθόδων για λίστα "
"πρότυπο δένδρου (TreeModel), δείτε <link xref=\"model-view-controller.py\"/>."

#. (itstool) path: section/p
#: C/treeview_simple_liststore.py.page:38
msgid ""
"In line 44 the <code>\"changed\"</code> signal is connected to the callback "
"function <code>on_changed()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"Στη γραμμή 44 το σήμα <code>\"changed\"</code> συνδέεται με τη συνάρτηση "
"επανάκλησης <code>on_changed()</code> χρησιμοποιώντας <code><var>widget</"
"var>.connect(<var>signal</var>, <var>callback function</var>)</code>. Δείτε "
"<link xref=\"signals-callbacks.py\"/> για μια πιο λεπτομερή εξήγηση."

#. (itstool) path: item/p
#: C/treeview_simple_liststore.py.page:51
msgid ""
"<link href=\"http://developer.gnome.org/pango/stable/pango-Fonts.html"
"\">Fonts</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/pango/stable/pango-Fonts.html"
"\">Fonts</link>"

#. (itstool) path: info/title
#: C/treeview_simple_liststore.vala.page:8
msgctxt "text"
msgid "Simple Treeview with ListStore (Vala)"
msgstr ""
"Απλή προβολή δένδρου (Treeview) με αποθήκη καταλόγων (ListStore) (Vala)"

#. (itstool) path: info/desc
#: C/treeview_simple_liststore.vala.page:20
msgid "A widget can display any TreeModel implementation (lists and trees)"
msgstr ""
"Ένα γραφικό στοιχείο μπορεί να εμφανίσει οποιαδήποτε υλοποίηση TreeModel "
"(λίστες και δένδρα)"

#. (itstool) path: page/title
#: C/treeview_simple_liststore.vala.page:23
msgid "Simple Treeview with ListStore"
msgstr "Απλή προβοή δένδρου (Treeview) με αποθήκη καταλόγων (ListStore)"

#. (itstool) path: page/p
#: C/treeview_simple_liststore.vala.page:25
msgid ""
"This TreeView displays a simple ListStore with the Selection \"changed\" "
"signal connected."
msgstr ""
"Αυτή η προβολή δένδρου εμφανίζει μια απλή αποθήκη καταλόγων με το συνδεμένο "
"σήμα επιλογής \"αλλαγμένο\"."

#. (itstool) path: page/code
#: C/treeview_simple_liststore.vala.page:27
#, no-wrap
msgid ""
"public class PhoneBookEntry {\n"
"\tpublic string firstname;\n"
"\tpublic string lastname;\n"
"\tpublic string phone;\n"
"\n"
"\tpublic PhoneBookEntry (string f, string l, string p) {\n"
"\t\tthis.firstname = f;\n"
"\t\tthis.lastname = l;\n"
"\t\tthis.phone = p;\n"
"\t}\n"
"}\n"
"\n"
"class TreeViewSimpleListStore : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Label label;\n"
"\n"
"\tPhoneBookEntry[] phonebook = {\n"
"\t\tnew PhoneBookEntry (\"Jurg\", \"Billeter\", \"555-0123\"),\n"
"\t\tnew PhoneBookEntry (\"Johannes\", \"Schmid\", \"555-1234\"),\n"
"\t\tnew PhoneBookEntry (\"Julita\", \"Inca\", \"555-2345\"),\n"
"\t\tnew PhoneBookEntry (\"Javier\", \"Jardon\", \"555-3456\"),\n"
"\t\tnew PhoneBookEntry (\"Jason\", \"Clinton\", \"555-4567\"),\n"
"\t\tnew PhoneBookEntry (\"Random J.\", \"Hacker\", \"555-5678\")\n"
"\t};\n"
"\n"
"\tenum Column {\n"
"\t\tFIRSTNAME,\n"
"\t\tLASTNAME,\n"
"\t\tPHONE\n"
"\t}\n"
"\n"
"\tinternal TreeViewSimpleListStore (MyApplication app) {\n"
"\t\tObject (application: app, title: \"My Phone Book\");\n"
"\n"
"\t\tthis.set_default_size (250, 100);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tvar view = new Gtk.TreeView ();\n"
"\t\tthis.setup_treeview (view);\n"
"\t\tview.expand = true;\n"
"\n"
"\t\tlabel = new Gtk.Label (\"\");\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\n"
"\t\tgrid.attach (view, 0, 0, 1, 1);\n"
"\t\tgrid.attach (label, 0, 1, 1, 1);\n"
"\t\tthis.add (grid);\n"
"\n"
"\t\tvar selection = view.get_selection ();\n"
"\t\tselection.changed.connect (this.on_changed);\n"
"\t}\n"
"\n"
"\tvoid setup_treeview (Gtk.TreeView view) {\n"
"\t\tvar listmodel = new Gtk.ListStore (3, typeof (string),\n"
"                                              typeof (string),\n"
"                                              typeof (string));\n"
"\t\tview.set_model (listmodel);\n"
"\n"
"\t\tvar cell = new Gtk.CellRendererText ();\n"
"\n"
"\t\t/* 'weight' refers to font boldness.\n"
"\t\t *  400 is normal.\n"
"\t\t *  700 is bold.\n"
"\t\t */\n"
"\t\tcell.set (\"weight_set\", true);\n"
"\t\tcell.set (\"weight\", 700);\n"
"\n"
"\t\t/*columns*/\n"
"\t\tview.insert_column_with_attributes (-1, \"First Name\",\n"
"                                                cell, \"text\",\n"
"                                                Column.FIRSTNAME);\n"
"\n"
"\t\tview.insert_column_with_attributes (-1, \"Last Name\",\n"
"                                                new Gtk.CellRendererText (),\n"
"                                                \"text\", Column.LASTNAME);\n"
"\n"
"\t\tview.insert_column_with_attributes (-1, \"Phone Number\",\n"
"                                                new Gtk.CellRendererText (),\n"
"                                                \"text\", Column.PHONE);\n"
"\n"
"\t\t/* Insert the phonebook into the ListStore */\n"
"\t\tGtk.TreeIter iter;\n"
"\t\tfor (int i = 0; i &lt; phonebook.length; i++) {\n"
"\t\t\tlistmodel.append (out iter);\n"
"\t\t\tlistmodel.set (iter, Column.FIRSTNAME,\n"
"                                 phonebook[i].firstname,\n"
"                                 Column.LASTNAME, phonebook[i].lastname,\n"
"                                 Column.PHONE, phonebook[i].phone);\n"
"\t\t}\n"
"\t}\n"
"\n"
"\tvoid on_changed (Gtk.TreeSelection selection) {\n"
"\t\tGtk.TreeModel model;\n"
"\t\tGtk.TreeIter iter;\n"
"\t\tstring name;\n"
"\t\tstring lastname;\n"
"\t\tstring phone;\n"
"\n"
"\t\tif (selection.get_selected (out model, out iter)) {\n"
"\t\t\tmodel.get (iter,\n"
"                                   Column.FIRSTNAME, out name,\n"
"                                   Column.LASTNAME, out lastname,\n"
"                                   Column.PHONE, out phone);\n"
"\n"
"\t\t\tlabel.set_text (\"\\n\" + name + \" \" + lastname + \" \" + phone);\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create new Window and show all the things. */\n"
"\t\tnew TreeViewSimpleListStore (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"example.liststore.simple.treeview\");\n"
"\t}\n"
"}\n"
"\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class PhoneBookEntry {\n"
"\tpublic string firstname;\n"
"\tpublic string lastname;\n"
"\tpublic string phone;\n"
"\n"
"\tpublic PhoneBookEntry (string f, string l, string p) {\n"
"\t\tthis.firstname = f;\n"
"\t\tthis.lastname = l;\n"
"\t\tthis.phone = p;\n"
"\t}\n"
"}\n"
"\n"
"class TreeViewSimpleListStore : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Label label;\n"
"\n"
"\tPhoneBookEntry[] phonebook = {\n"
"\t\tnew PhoneBookEntry (\"Jurg\", \"Billeter\", \"555-0123\"),\n"
"\t\tnew PhoneBookEntry (\"Johannes\", \"Schmid\", \"555-1234\"),\n"
"\t\tnew PhoneBookEntry (\"Julita\", \"Inca\", \"555-2345\"),\n"
"\t\tnew PhoneBookEntry (\"Javier\", \"Jardon\", \"555-3456\"),\n"
"\t\tnew PhoneBookEntry (\"Jason\", \"Clinton\", \"555-4567\"),\n"
"\t\tnew PhoneBookEntry (\"Random J.\", \"Hacker\", \"555-5678\")\n"
"\t};\n"
"\n"
"\tenum Column {\n"
"\t\tFIRSTNAME,\n"
"\t\tLASTNAME,\n"
"\t\tPHONE\n"
"\t}\n"
"\n"
"\tinternal TreeViewSimpleListStore (MyApplication app) {\n"
"\t\tObject (application: app, title: \"My Phone Book\");\n"
"\n"
"\t\tthis.set_default_size (250, 100);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tvar view = new Gtk.TreeView ();\n"
"\t\tthis.setup_treeview (view);\n"
"\t\tview.expand = true;\n"
"\n"
"\t\tlabel = new Gtk.Label (\"\");\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\n"
"\t\tgrid.attach (view, 0, 0, 1, 1);\n"
"\t\tgrid.attach (label, 0, 1, 1, 1);\n"
"\t\tthis.add (grid);\n"
"\n"
"\t\tvar selection = view.get_selection ();\n"
"\t\tselection.changed.connect (this.on_changed);\n"
"\t}\n"
"\n"
"\tvoid setup_treeview (Gtk.TreeView view) {\n"
"\t\tvar listmodel = new Gtk.ListStore (3, typeof (string),\n"
"                                              typeof (string),\n"
"                                              typeof (string));\n"
"\t\tview.set_model (listmodel);\n"
"\n"
"\t\tvar cell = new Gtk.CellRendererText ();\n"
"\n"
"\t\t/* 'weight' refers to font boldness.\n"
"\t\t *  400 is normal.\n"
"\t\t *  700 is bold.\n"
"\t\t */\n"
"\t\tcell.set (\"weight_set\", true);\n"
"\t\tcell.set (\"weight\", 700);\n"
"\n"
"\t\t/*columns*/\n"
"\t\tview.insert_column_with_attributes (-1, \"First Name\",\n"
"                                                cell, \"text\",\n"
"                                                Column.FIRSTNAME);\n"
"\n"
"\t\tview.insert_column_with_attributes (-1, \"Last Name\",\n"
"                                                new Gtk.CellRendererText (),\n"
"                                                \"text\", Column.LASTNAME);\n"
"\n"
"\t\tview.insert_column_with_attributes (-1, \"Phone Number\",\n"
"                                                new Gtk.CellRendererText (),\n"
"                                                \"text\", Column.PHONE);\n"
"\n"
"\t\t/* Insert the phonebook into the ListStore */\n"
"\t\tGtk.TreeIter iter;\n"
"\t\tfor (int i = 0; i &lt; phonebook.length; i++) {\n"
"\t\t\tlistmodel.append (out iter);\n"
"\t\t\tlistmodel.set (iter, Column.FIRSTNAME,\n"
"                                 phonebook[i].firstname,\n"
"                                 Column.LASTNAME, phonebook[i].lastname,\n"
"                                 Column.PHONE, phonebook[i].phone);\n"
"\t\t}\n"
"\t}\n"
"\n"
"\tvoid on_changed (Gtk.TreeSelection selection) {\n"
"\t\tGtk.TreeModel model;\n"
"\t\tGtk.TreeIter iter;\n"
"\t\tstring name;\n"
"\t\tstring lastname;\n"
"\t\tstring phone;\n"
"\n"
"\t\tif (selection.get_selected (out model, out iter)) {\n"
"\t\t\tmodel.get (iter,\n"
"                                   Column.FIRSTNAME, out name,\n"
"                                   Column.LASTNAME, out lastname,\n"
"                                   Column.PHONE, out phone);\n"
"\n"
"\t\t\tlabel.set_text (\"\\n\" + name + \" \" + lastname + \" \" + phone);\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create new Window and show all the things. */\n"
"\t\tnew TreeViewSimpleListStore (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"example.liststore.simple.treeview\");\n"
"\t}\n"
"}\n"
"\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/treeview_simple_liststore.vala.page:32
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.TreeView.html\">Gtk."
"TreeView</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.TreeView.html\">Gtk."
"TreeView</link>"

#. (itstool) path: item/p
#: C/treeview_simple_liststore.vala.page:34
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.TreeSelection.html\">Gtk."
"TreeSelection</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.TreeSelection.html\">Gtk."
"TreeSelection</link>"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/treeview_treestore.py.page:24
msgctxt "_"
msgid ""
"external ref='media/treeview_treestore.png' "
"md5='5ca87bc4acd55c527b3fb5fd46779d85'"
msgstr ""
"external ref='media/treeview_treestore.png' "
"md5='5ca87bc4acd55c527b3fb5fd46779d85'"

#. (itstool) path: info/desc
#: C/treeview_treestore.py.page:20
msgid "A TreeView displaying a TreeStore (simpler example)"
msgstr ""
"Μια προβολή δένδρου (TreeView) που εμφανίζει μια αποθήκη δένδρου (TreeStore) "
"(απλό παράδειγμα)"

#. (itstool) path: page/title
#: C/treeview_treestore.py.page:23
msgid "Simpler TreeView with TreeStore"
msgstr "Πιο απλή προβολή δένδρου με αποθήκη καταλόγων"

#. (itstool) path: page/p
#: C/treeview_treestore.py.page:25
msgid "This TreeView displays a TreeStore."
msgstr ""
"Αυτή η προβολή δένδρου (TreeView) εμφανίζει μια αποθήκη δένδρου (TreeStore)."

#. (itstool) path: section/code
#: C/treeview_treestore.py.page:32
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Pango\n"
"import sys\n"
"\n"
"books = [[\"Tolstoy, Leo\", \"War and Peace\", \"Anna Karenina\"],\n"
"         [\"Shakespeare, William\", \"Hamlet\", \"Macbeth\", \"Othello\"],\n"
"         [\"Tolkien, J.R.R.\", \"The Lord of the Rings\"]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Library\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data are stored in the model\n"
"        # create a treestore with one column\n"
"        store = Gtk.TreeStore(str)\n"
"        for i in range(len(books)):\n"
"            # the iter piter is returned when appending the author\n"
"            piter = store.append(None, [books[i][0]])\n"
"            # append the books as children of the author\n"
"            j = 1\n"
"            while j &lt; len(books[i]):\n"
"                store.append(piter, [books[i][j]])\n"
"                j += 1\n"
"\n"
"        # the treeview shows the model\n"
"        # create a treeview on the model store\n"
"        view = Gtk.TreeView()\n"
"        view.set_model(store)\n"
"\n"
"        # the cellrenderer for the column - text\n"
"        renderer_books = Gtk.CellRendererText()\n"
"        # the column is created\n"
"        column_books = Gtk.TreeViewColumn(\n"
"            \"Books by Author\", renderer_books, text=0)\n"
"        # and it is appended to the treeview\n"
"        view.append_column(column_books)\n"
"\n"
"        # the books are sortable by author\n"
"        column_books.set_sort_column_id(0)\n"
"\n"
"        # add the treeview to the window\n"
"        self.add(view)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Pango\n"
"import sys\n"
"\n"
"books = [[\"Tolstoy, Leo\", \"War and Peace\", \"Anna Karenina\"],\n"
"         [\"Shakespeare, William\", \"Hamlet\", \"Macbeth\", \"Othello\"],\n"
"         [\"Tolkien, J.R.R.\", \"The Lord of the Rings\"]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Library\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data are stored in the model\n"
"        # create a treestore with one column\n"
"        store = Gtk.TreeStore(str)\n"
"        for i in range(len(books)):\n"
"            # the iter piter is returned when appending the author\n"
"            piter = store.append(None, [books[i][0]])\n"
"            # append the books as children of the author\n"
"            j = 1\n"
"            while j &lt; len(books[i]):\n"
"                store.append(piter, [books[i][j]])\n"
"                j += 1\n"
"\n"
"        # the treeview shows the model\n"
"        # create a treeview on the model store\n"
"        view = Gtk.TreeView()\n"
"        view.set_model(store)\n"
"\n"
"        # the cellrenderer for the column - text\n"
"        renderer_books = Gtk.CellRendererText()\n"
"        # the column is created\n"
"        column_books = Gtk.TreeViewColumn(\n"
"            \"Books by Author\", renderer_books, text=0)\n"
"        # and it is appended to the treeview\n"
"        view.append_column(column_books)\n"
"\n"
"        # the books are sortable by author\n"
"        column_books.set_sort_column_id(0)\n"
"\n"
"        # add the treeview to the window\n"
"        self.add(view)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: info/title
#: C/tutorial.py.page:9
msgctxt "text"
msgid "Tutorial for beginners (Python)"
msgstr "Μάθημα για αρχάριους (Python)"

#. (itstool) path: info/desc
#: C/tutorial.py.page:13
msgid ""
"A tutorial for beginners who want to learn how to program GUIs using GTK+ in "
"Python."
msgstr ""
"Ένα μάθημα για αρχάριους που θέλουν να μάθουν πώς να προγραμματίσουν "
"διεπαφές χρήστη (GUI) χρησιμοποιώντας GTK+ σε Python."

#. (itstool) path: credit/years
#: C/tutorial.py.page:22
msgid "2012 2013"
msgstr "2012, 2013"

#. (itstool) path: credit/name
#: C/tutorial.py.page:25
msgid "Jim Campbell"
msgstr "Jim Campbell"

#. (itstool) path: synopsis/p
#: C/tutorial.py.page:34
msgid ""
"By following these tutorials you will learn the basics of GUI programming "
"using GTK+ in Python."
msgstr ""
"Παρακολουθώντας αυτά τα μαθήματα θα μάθετε τα βασικά του προγραμματισμού GUI "
"χρησιμοποιώντας GTK+ σε Python."

#. (itstool) path: synopsis/p
#: C/tutorial.py.page:36
msgid ""
"If you have never programmed before, or are not familiar with the concepts "
"of object oriented programming, you may need to learn a few basics first. "
"The book <link href=\"http://learnpythonthehardway.org/book/\">Learn Python "
"the Hard Way</link> or <link href=\"http://docs.python.org/tutorial/index."
"html\">The Python Tutorial</link> may be a better place for you to start. "
"You may also be interested in <link href=\"http://python-gtk-3-tutorial."
"readthedocs.org/en/latest/index.html\">The Python GTK+ 3 Tutorial</link>. "
"Once you master the basics, be sure to come back and check out these "
"tutorials."
msgstr ""
"Εάν δεν έχετε προγραμματίσει ποτέ πριν, η δεν είστε εξοικειωμένος με τις "
"έννοιες του αντικειμενοστραφούς προγραμματισμού, ίσως χρειαστείτε να μάθετε "
"λίγα βασικά πρώτα. Το βιβλίο <link href=\"http://learnpythonthehardway.org/"
"book/\">Μάθετε Python με το δύσκολο τρόπο</link> ή το <link href=\"http://"
"docs.python.org/tutorial/index.html\">Μάθημα Python</link> ίσως είναι ένας "
"καλύτερος τρόπος για να ξεκινήσετε. Μπορεί επίσης να ενδιαφερόσαστε για το "
"<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/index."
"html\">Μάθημα Python GTK+ 3</link>. Μόλις κατανοήσετε τα βασικά, μπορείτε να "
"επιστρέψετε και να εξετάσετε αυτά τα μαθήματα."

#. (itstool) path: section/title
#: C/tutorial.py.page:42
msgid "To run the code samples"
msgstr "Εκτέλεση των δειγμάτων κώδικα"

#. (itstool) path: section/p
#: C/tutorial.py.page:44
msgid "To run the code samples in the tutorial:"
msgstr "Για να εκτελέσετε τα δείγματα κώδικα στο μάθημα:"

#. (itstool) path: item/p
#: C/tutorial.py.page:46
msgid ""
"Type or copy and paste the code into a file, and save the file with a name "
"like <var>filename</var>.py"
msgstr ""
"Πληκτρολογήστε ή αντιγράψτε και επικολλήστε τον κώδικα σε ένα αρχείο και "
"αποθηκεύστε το αρχείο με ένα όνομα όπως <var>filename</var>.py"

#. (itstool) path: item/p
#: C/tutorial.py.page:47
msgid "To execute the code, type in the terminal:"
msgstr "Για να εκτελέσετε τον κώδικα, πληκτρολογήστε στον τερματικό:"

#. (itstool) path: item/screen
#: C/tutorial.py.page:48
#, no-wrap
msgid "python <var>filename</var>.py"
msgstr "python <var>filename</var>.py"

#. (itstool) path: section/p
#: C/tutorial.py.page:51
msgid ""
"After executing the code, you will either see the widget on your screen, or "
"(if you have mistyped some of the code) you will see an error message that "
"will help you identify the problem."
msgstr ""
"Μετά την εκτέλεση του κώδικα, θα δείτε είτε το γραφικό στοιχείο στην οθόνη "
"σας, ή (εάν έχετε πληκτρολογήσει λαθεμένα μέρος του κώδικα) θα δείτε ένα "
"μήνυμα σφάλματος που θα σας βοηθήσει να ταυτοποιήσετε το πρόβλημα."

#. (itstool) path: section/title
#: C/tutorial.py.page:55
msgid "A path through the widgets (with some theory)"
msgstr "Μια διαδρομή μέσα από γραφικά στοιχεία (με λίγη θεωρία)"

#. (itstool) path: section/p
#: C/tutorial.py.page:56
msgid ""
"The tutorial will walk you through increasingly complex examples and "
"programming theory, but you can also feel free to just go directly to the "
"tutorial that is most helpful to you."
msgstr ""
"Το μάθημα θα σας οδηγήσει μέσα από αυξανόμενης συνθετότητας παραδείγματα και "
"θεωρία προγραμματισμού, αλλά μπορείτε επίσης να πάτε απλά αμέσως στο μάθημα "
"που είναι πιο χρήσιμο σε εσάς."

#. (itstool) path: steps/title
#: C/tutorial.py.page:58
msgid "Tutorial"
msgstr "Μάθημα"

#. (itstool) path: steps/title
#: C/tutorial.py.page:60
msgid "Basic windows"
msgstr "Βασικά παράθυρα"

#. (itstool) path: steps/title
#: C/tutorial.py.page:65
msgid "Images and labels"
msgstr "Εικόνες και ετικέτες"

#. (itstool) path: steps/title
#: C/tutorial.py.page:71
msgid "Introduction to properties"
msgstr "Εισαγωγή στις ιδιότητες"

#. (itstool) path: steps/title
#: C/tutorial.py.page:75
msgid "Grid, separator and scrolling"
msgstr "Πλέγμα, διαχωριστικό και κύλιση"

#. (itstool) path: steps/title
#: C/tutorial.py.page:82
msgid "Signals, callbacks and buttons"
msgstr "Σήματα, επανακλήσεις και κουμπιά"

#. (itstool) path: steps/title
#: C/tutorial.py.page:96
msgid "Other display widgets"
msgstr "Γραφικά στοιχεία άλλης εμφάνισης"

#. (itstool) path: steps/title
#: C/tutorial.py.page:102
msgid "Entry widgets"
msgstr "Εισαγωγή γραφικών στοιχείων"

#. (itstool) path: steps/title
#: C/tutorial.py.page:108
msgid "A widget to write and display text"
msgstr "Ένα γραφικό στοιχείο που γράφει και εμφανίζει κείμενο"

#. (itstool) path: steps/title
#: C/tutorial.py.page:112
msgid "Dialogs"
msgstr "Διάλογοι"

#. (itstool) path: steps/title
#: C/tutorial.py.page:118
msgid "Menus, Toolbars and Tooltips (also: using Glade and GtkBuilder)"
msgstr ""
"Μενού, εργαλειοθήκες και συμβουλές οθόνης (επίσης: χρησιμοποιώντας Glade και "
"GtkBuilder)"

#. (itstool) path: steps/title
#: C/tutorial.py.page:133
msgid "TreeViews and ComboBoxes (using the M/V/C design)"
msgstr "TreeViews και ComboBoxes (χρησιμοποιώντας τη σχεδίαση M/V/C)"

#. (itstool) path: steps/title
#: C/tutorial.py.page:143
msgid "Custom widget"
msgstr "Προσαρμοσμένο γραφικό στοιχείο"

#. (itstool) path: info/title
#: C/vala.page:7
msgctxt "link"
msgid "Vala"
msgstr "Vala"

#. (itstool) path: page/title
#: C/vala.page:21
msgid "Tutorials, code samples and platform demos in Vala"
msgstr "Μαθήματα, δείγματα κώδικα και παραδείγματα πλατφόρμας σε Vala"

#. (itstool) path: media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/weatherApp.js.page:41
msgctxt "_"
msgid ""
"external ref='media/weatherAppJs.png' md5='1fe859ac4854273d72ea8fc9203639b2'"
msgstr ""
"external ref='media/weatherAppJs.png' md5='1fe859ac4854273d72ea8fc9203639b2'"

#. (itstool) path: info/title
#: C/weatherApp.js.page:7
msgctxt "text"
msgid "Weather application (JavaScript)"
msgstr "Εφαρμογή καιρού (JavaScript)"

#. (itstool) path: info/desc
#: C/weatherApp.js.page:22
msgid ""
"How to plan an application that uses asynchronous calls. Asynchronous calls "
"will be presented through a weather application."
msgstr ""
"Πώς να σχεδιαστεί μια εφαρμογή που χρησιμοποιεί ασύγχρονες κλήσεις. Οι "
"ασύγχρονες κλήσεις θα αναπαριστώνται μέσα από μια εφαρμογή καιρού."

#. (itstool) path: page/title
#: C/weatherApp.js.page:27
msgid "Weather application"
msgstr "Εφαρμογή καιρού"

#. (itstool) path: synopsis/p
#: C/weatherApp.js.page:29
msgid ""
"In this guide well construct a weather application using asynchronous calls. "
"Weather information in this example is fetched from geonames.org and the "
"application is using the <link href=\"http://en.wikipedia.org/wiki/"
"List_of_airports_by_ICAO_code:_E\">ICAO codes </link> to place your weather "
"request. To write and run all the code examples yourself, you need an editor "
"to write code in, Terminal and GNOME 3 or higher installed into your "
"computer. In this guide we we'll go through the following parts:"
msgstr ""
"Σε αυτόν τον οδηγό πρόκειται να κατασκευάσουμε μια εφαρμογή καιρού "
"χρησιμοποιώντας ασύγχρονες κλήσεις. Οι πληροφορίες του καιρού σε αυτό το "
"παράδειγμα παρέχονται από τον geonames.org και η εφαρμογή χρησιμοποιεί το "
"<link href=\"http://en.wikipedia.org/wiki/List_of_airports_by_ICAO_code:_E"
"\">κώδικες ICAO</link> για να τοποθετήσει την αίτηση σας για τον καιρό. Για "
"να γράψετε και να εκτελέσετε οι ίδιοι τα παραδείγματα του κώδικα, χρειάζεστε "
"έναν επεξεργαστή για να γράψετε τον κώδικα, τερματικό και GNOME 3 ή "
"μεταγενέστερο εγκατεστημένο στον υπολογιστή σας. Σε αυτόν τον οδηγό θα "
"εξετάσουμε τα παρακάτω μέρη:"

#. (itstool) path: item/p
#: C/weatherApp.js.page:32
msgid "<link xref=\"#planningUi\">Planning the graphical user interface</link>"
msgstr ""
"<link xref=\"#planningUi\">Σχεδιασμός της γραφικής διεπαφής χρήστη</link>"

#. (itstool) path: item/p
#: C/weatherApp.js.page:33
msgid "<link xref=\"#asynchronous\">Asynchronous calls</link>"
msgstr "<link xref=\"#asynchronous\">Ασύγχρονες κλήσεις</link>"

#. (itstool) path: item/p
#: C/weatherApp.js.page:34
msgid "<link xref=\"#main\">The main program file</link>"
msgstr "<link xref=\"#main\">Το κύριο αρχείο του προγράμματος</link>"

#. (itstool) path: item/p
#: C/weatherApp.js.page:35
msgid "<link xref=\"#main\">Local library GeoNames</link>"
msgstr "<link xref=\"#main\">Τοπική βιβλιοθήκη GeoNames</link>"

#. (itstool) path: item/p
#: C/weatherApp.js.page:36
msgid "<link xref=\"#main\">Autotools and Icons</link>"
msgstr "<link xref=\"#main\">Αυτόματα εργαλεία και εικονίδια</link>"

#. (itstool) path: section/title
#: C/weatherApp.js.page:44
msgid "Planning the graphical user interface"
msgstr "Σχεδιασμός της γραφικής διεπαφής χρήστη"

#. (itstool) path: section/p
#: C/weatherApp.js.page:45
msgid ""
"Structuring an application for GNOME 3 means you will be using <link href="
"\"http://developer.gnome.org/platform-overview/stable/gtk\">GTK+</link>. The "
"most important thing is to remember that the main window will only accept "
"one widget. You must plan your structure accordingly (this example is using "
"Gtk.Grid). A useful method is to draw out the main window and place every "
"widget needed inside that box. By looking at an image of your future "
"application it is easier to tell what are the relations between widgets. For "
"example Gtk.Grid places your widgets in relation to other widgets, so after "
"the first widget is in place, placing widgets can be done in relation to any "
"widget on the grid."
msgstr ""
"Δομώντας μια εφαρμογή για το GNOME 3 σημαίνει τη χρήση του <link href="
"\"http://developer.gnome.org/platform-overview/stable/gtk\">GTK+</link>. Το "
"πιο σημαντικό πράγμα είναι να θυμόσαστε ότι το κύριο παράθυρο θα αποδεχθεί "
"μόνο ένα γραφικό στοιχείο. Πρέπει να σχεδιάσετε τη δομή σας ανάλογα (αυτό "
"το παράδειγμα χρησιμοποιεί Gtk.Grid). Μια χρήσιμη μέθοδος είναι η σχεδίαση "
"του κύριου παραθύρου και η τοποθέτηση κάθε απαιτούμενου γραφικού στοιχείου "
"μέσα σε αυτό το πλαίσιο. Κοιτώντας μια εικόνα της μελλοντικής σας εφαρμογής "
"είναι ευκολότερο να πείτε ποιες είναι οι σχέσεις μεταξύ γραφικών στοιχείων. "
"Για παράδειγμα Gtk.Grid τοποθετεί τα γραφικά στοιχεία σας σε σχέση με τα "
"άλλα γραφικά στοιχεία, έτσι μετά τη τοποθέτηση του πρώτου γραφικού "
"στοιχείου στη θέση του, η τοποθέτηση των γραφικών στοιχείων μπορεί να "
"γίνει σε σχέση με οποιοδήποτε γραφικό στοιχείο στο πλέγμα."

#. (itstool) path: section/title
#: C/weatherApp.js.page:48
msgid "Asynchronous calls"
msgstr "Ασύγχρονες κλήσεις"

#. (itstool) path: section/p
#: C/weatherApp.js.page:49
msgid ""
"With many programming languages, all operations are run synchronously - you "
"tell the program to do something, and it will wait until that action "
"completes before proceeding. This is however bad for graphical user "
"interfaces, as then the whole application will be frozen while the program "
"waits for the operation. Going asynchronous (async) helps here. With async "
"calls, your UI won't be blocked with any requests. Async calls make your "
"application more flexible and better equipped to handle situations when "
"calls take more time than expected or for some reason get jammed. Async "
"calls can be used for example file system I/O and for slower calculations in "
"the background."
msgstr ""
"Με πολλές προγραμματιστικές γλώσσες, όλες οι λειτουργίες εκτελούνται "
"σύγχρονα - λέτε στο πρόγραμμα να κάνει κάτι και θα περιμένετε μέχρι αυτή η "
"πράξη να ολοκληρωθεί πριν να συνεχίσετε. Αυτό όμως είναι κακό για τη γραφική "
"διεπαφή χρήστη, καθώς όλη η εφαρμογή παγώνει, ενώ το πρόγραμμα περιμένει τη "
"λειτουργία. Πηγαίνοντας ασύγχρονα (async) βοηθά εδώ. Με ασύγχρονες κλήσεις, "
"το UI σας δεν θα φραχτεί με αιτήσεις. Οι ασύγχρονες κλήσεις κάνουν την "
"εφαρμογή σας πιο εύχρηστη και καλύτερα εξοπλισμένη για χειρισμό καταστάσεων "
"όταν οι κλήσεις παίρνουν περισσότερο χρόνο από το αναμενόμενο ή για κάποιο "
"λόγο κολλάνε. Οι ασύγχρονες κλήσεις μπορούν να χρησιμοποιηθούν για "
"παράδειγμα με αρχείο συστήματος I/O και για πιο αργούς υπολογισμούς στο "
"παρασκήνιο."

#. (itstool) path: section/p
#: C/weatherApp.js.page:52
msgid ""
"In this example we have to get data from geonames.org. While we do that we "
"want the rest of our program to continue. If we wouldn't get any information "
"from geonames.org for the lack of internet connection and this would be a "
"synchronous application we would never get to the point where our "
"main_quit() is processed correctly and the application would have to killed "
"from Terminal."
msgstr ""
"Σε αυτό το παράδειγμα πρέπει να πάρουμε δεδομένα από το geonames.org. Ενώ "
"κάνουμε αυτό θέλουμε το υπόλοιπο πρόγραμμα να συνεχίσει. Εάν δεν παίρναμε "
"καμιά πληροφορία από το geonames.org λόγω έλλειψης σύνδεσης με το διαδίκτυο "
"και αυτό ήταν μια σύγχρονη εφαρμογή δεν θα μπορούσαμε ποτέ να πάμε στο "
"σημείο όπου το main_quit() συνεχίζει σωστά και η εφαρμογή θα έπρεπε να "
"θανατωθεί από το τερματικό."

#. (itstool) path: section/title
#: C/weatherApp.js.page:55
msgid "The different parts of the program"
msgstr "Τα διαφορετικά μέρη του προγράμματος"

#. (itstool) path: page/title
#: C/weatherAppMain.js.page:19
msgid "The main program file"
msgstr "Το κύριο αρχείο του προγράμματος"

#. (itstool) path: synopsis/p
#: C/weatherAppMain.js.page:21
msgid ""
"In this part of the guide well construct the main program file of the "
"weather application. To write and run all the code examples yourself, you "
"need an editor to write code in, Terminal and GNOME 3 or higher installed "
"into your computer. In this part we we'll go through the following parts:"
msgstr ""
"Σε αυτό το τμήμα του οδηγού θα κατασκευάσουμε το κύριο αρχείο του "
"προγράμματος της εφαρμογής καιρού. Για να γράψετε και να τρέξετε όλα τα "
"παραδείγματα κώδικα οι ίδιοι, χρειαζόσαστε έναν επεξεργαστή για το γράψιμο "
"του κώδικα, τερματικό και GNOME 3 ή μεταγενέστερο εγκατεστημένο στον "
"υπολογιστή σας. Σε αυτό το τμήμα θα εξετάσουμε τα παρακάτω μέρη:"

#. (itstool) path: item/p
#: C/weatherAppMain.js.page:26
msgid ""
"<link xref=\"#widgets\">Adding a grid and all the necessary widgets to it</"
"link>"
msgstr ""
"<link xref=\"#widgets\">Προσθήκη πλέγματος και όλων των απαραίτητων γραφικών "
"στοιχείων σε αυτό</link>"

#. (itstool) path: item/p
#: C/weatherAppMain.js.page:27
msgid ""
"<link xref=\"#asynccall\">Requesting the weather information asynchronously</"
"link>"
msgstr ""
"<link xref=\"#asynccall\">Αίτηση των πληροφοριών καιρού ασύγχρονα</link>"

#. (itstool) path: item/p
#: C/weatherAppMain.js.page:28
msgid ""
"<link xref=\"#connectingbuttons\">Connecting signals to button and entry</"
"link>."
msgstr ""
"<link xref=\"#connectingbuttons\">Σύνδεση σημάτων σε κουμπί και καταχώριση</"
"link>."

#. (itstool) path: item/p
#: C/weatherAppMain.js.page:29
msgid "<link xref=\"#weatherapp.js\">weatherapp.js</link>"
msgstr "<link xref=\"#weatherapp.js\">weatherapp.js</link>"

#. (itstool) path: section/p
#: C/weatherAppMain.js.page:36
msgid ""
"This line tells how to run the script. It needs to be the first line of the "
"code and it needs to be executable. To get the execution rights go to "
"Terminal and run in right folder: chmod +x scriptname. Or you can use the "
"graphical filemanager. Just go to the right folder where your code is, right "
"click you code file, choose properties, click the permissions tab and check "
"the box for allow executing file as a program"
msgstr ""
"Αυτή η γραμμή λέει πώς θα εκτελεστεί το σενάριο. Πρέπει να είναι η πρώτη "
"γραμμή του κώδικα και να είναι εκτελέσιμη. Για λήψη των δικαιωμάτων "
"εκτέλεσης πηγαίνετε στον τερματικό και εκτελέστε στον σωστό φάκελο: chmod +x "
"όνομα σεναρίου. Ή μπορείτε να χρησιμοποιήσετε τον διαχειριστή αρχείου "
"γραφικών. Απλά πηγαίνετε στον σωστό φάκελο όπου είναι ο κώδικας σας δεξί "
"κλικ στο αρχείο του κώδικα σας, επιλέξτε ιδιότητες, κλικ στην καρτέλα "
"δικαιωμάτων και σημειώστε το πλαίσιο για να επιτραπεί η εκτέλεση του αρχείου "
"ως πρόγραμμα"

#. (itstool) path: section/code
#: C/weatherAppMain.js.page:42
#, no-wrap
msgid ""
"\n"
"var Gtk = imports.gi.Gtk;\n"
"const WeatherService = imports.geonames;"
msgstr ""
"\n"
"var Gtk = imports.gi.Gtk;\n"
"const WeatherService = imports.geonames;"

#. (itstool) path: section/p
#: C/weatherAppMain.js.page:45
msgid ""
"In order to have a working program we need to import a GObject Introspection "
"-library to our use. For working UI, we need Gtk. Gtk is imported in the "
"beginning so we have it in our use everywhere. We also import our own local "
"JavaScript library geonames to our use here."
msgstr ""
"Για να έχουμε ένα αποτελεσματικό πρόγραμμα χρειαζόμαστε να εισάγουμε μια "
"βιβλιοθήκη GObject αυτανάλυσης για χρήση. Για χρήση UI, χρειαζόμαστε Gtk. Το "
"Gtk εισάγεται στην αρχή, έτσι το έχουμε για χρήση παντού. Εισάγουμε επίσης "
"τη δικιά μας τοπική βιβλιοθήκη JavaScript geonames για να χρησιμοποιηθεί εδώ."

#. (itstool) path: section/code
#: C/weatherAppMain.js.page:50
#, no-wrap
msgid ""
"\n"
"// Initialize the gtk\n"
"Gtk.init(null, 0);\n"
"//create your window, name it and connect the x to quit function. Remember that window is a taken word\n"
"var weatherwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL});\n"
"weatherwindow.title = \"Todays weather\";\n"
"//Window only accepts one widget and a title. Further structure with Gtk.boxes of similar\n"
"weatherwindow.connect(\"destroy\", function(){Gtk.main_quit()});\n"
"\n"
"weatherwindow.show_all();\n"
"//and run it\n"
"Gtk.main();"
msgstr ""
"\n"
"// Αρχικοποίηση της gtk\n"
"Gtk.init(null, 0);\n"
"//Δημιουργία του παραθύρου σας, ονομασία του και σύνδεσή του x με τη συνάρτηση εξόδου. Να θυνάστε ότι το παράθυρο είναι μια δεδομένη λέξη\n"
"var weatherwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL});\n"
"weatherwindow.title = \"Todays weather\";\n"
"//Το παράθυρο δέχεται μόνο ένα γραφικό στοιχείο και έναν τίτλο. Παραπέρα δομή με παρόμοια Gtk.boxes\n"
"weatherwindow.connect(\"destroy\", function(){Gtk.main_quit()});\n"
"\n"
"weatherwindow.show_all();\n"
"//και εκτέλεσή του\n"
"Gtk.main();"

#. (itstool) path: section/title
#: C/weatherAppMain.js.page:64
msgid "Adding a grid and all the necessary widgets to it"
msgstr ""
"Προσθήκη πλέγματος και όλων των απαραίτητων γραφικών στοιχείων σε αυτό"

#. (itstool) path: section/code
#: C/weatherAppMain.js.page:65
#, no-wrap
msgid ""
"\n"
"var grid = new Gtk.Grid();\n"
"weatherwindow.add(grid);\n"
"\n"
"//We initialize the icon here, but deside the file later in geonames.js.\n"
"var weatherIcon = new Gtk.Image();\n"
"\n"
"//Set some labels to your window\n"
"var label1 = new Gtk.Label({label: \"\"});\n"
"var label2 = new Gtk.Label({label: \"Looking in the sky...\"});\n"
"var label3 = new Gtk.Label({label: \"\"});\n"
"\n"
"var entry = new Gtk.Entry();\n"
"entry.set_width_chars(4);\n"
"entry.set_max_length(4);\n"
"var label4 = new Gtk.Label({label: \"Enter ICAO station for weather: \"});\n"
"var button1 = new Gtk.Button({label: \"search!\"});\n"
"\n"
"grid.attach(label4, 2, 1, 1, 1);\n"
"grid.attach_next_to(label1,label4,3,1,1);\n"
"grid.attach_next_to(label2,label1,3,1,1);\n"
"grid.attach_next_to(label3,label2,3,1,1);\n"
"grid.attach_next_to(entry,label4,1,1,1);\n"
"grid.attach_next_to(button1,entry,1,1,1);\n"
"grid.attach_next_to(weatherIcon,label2,1,1,1)\n"
msgstr ""
"\n"
"var grid = new Gtk.Grid();\n"
"weatherwindow.add(grid);\n"
"\n"
"//Αρχικοποιούμε εδώ το εικονίδιο, αλλά αποφασίζει το αρχείο αργότερα στο geonames.js.\n"
"var weatherIcon = new Gtk.Image();\n"
"\n"
"//Ορισμός μερικών ετικετών στο παράθυρό σας\n"
"var label1 = new Gtk.Label({label: \"\"});\n"
"var label2 = new Gtk.Label({label: \"Looking in the sky...\"});\n"
"var label3 = new Gtk.Label({label: \"\"});\n"
"\n"
"var entry = new Gtk.Entry();\n"
"entry.set_width_chars(4);\n"
"entry.set_max_length(4);\n"
"var label4 = new Gtk.Label({label: \"Enter ICAO station for weather: \"});\n"
"var button1 = new Gtk.Button({label: \"search!\"});\n"
"\n"
"grid.attach(label4, 2, 1, 1, 1);\n"
"grid.attach_next_to(label1,label4,3,1,1);\n"
"grid.attach_next_to(label2,label1,3,1,1);\n"
"grid.attach_next_to(label3,label2,3,1,1);\n"
"grid.attach_next_to(entry,label4,1,1,1);\n"
"grid.attach_next_to(button1,entry,1,1,1);\n"
"grid.attach_next_to(weatherIcon,label2,1,1,1)\n"

#. (itstool) path: section/p
#: C/weatherAppMain.js.page:91
msgid ""
"In this section we create the grid we are going to use for positioning the "
"widgets. All the buttons, labels and entrys are initialized and placed on "
"the grid. As seen from the placing of the different widgets, they don't need "
"to be related only to one widget. At this point some of the labels don't "
"have any content. The content for those widgets is applied later. If you run "
"the application at this stage, you have the UI ready, but the widgets are "
"not connected to anything. For this we need to first build the weather "
"searching local library, and then get the information we need "
"asynchronously. When we have our local library ready we can connect it to "
"the necessary widgets."
msgstr ""
"Σε ενότητα αυτήν την ενότητα δημιουργούμε το πλέγμα που πρόκειται να "
"χρησιμοποιήσουμε για τοποθέτηση των γραφικών στοιχείων. Όλα τα κουμπιά, "
"ετικέτες και καταχωρίσεις αρχικοποιούνται και τοποθετούνται στο πλέγμα. Όπως "
"φαίνεται από την τοποθέτηση των διαφορετικών γραφικών στοιχείων, δεν "
"χρειάζεται να σχετίζονται μόνο με ένα γραφικό στοιχείο. Σε αυτό το σημείο "
"μερικές από τις ετικέτες δεν έχουν περιεχόμενο. Το περιεχόμενο για αυτά τα "
"γραφικά στοιχεία εφαρμόζεται αργότερα. Εάν τρέξετε την εφαρμογή σε αυτό το "
"στάδιο, θα έχετε έτοιμο το UI, αλλά τα γραφικά στοιχεία δεν συνδέονται με "
"τίποτα. Για αυτό χρειαζόμαστε πρώτα να κατασκευάσουμε την τοπική βιβλιοθήκη "
"αναζήτησης καιρού και έπειτα να πάρουμε την πληροφορία που χρειαζόμαστε "
"ασύγχρονα. Όταν έχουμε την τοπική μας βιβλιοθήκη έτοιμη, μπορούμε να το "
"συνδέσουμε με τα απαραίτητα γραφικά στοιχεία."

#. (itstool) path: section/title
#: C/weatherAppMain.js.page:95
msgid "Requesting the weather information asynchronously"
msgstr "Αίτηση των πληροφοριών καιρού ασύγχρονα"

#. (itstool) path: section/code
#: C/weatherAppMain.js.page:96
#, no-wrap
msgid ""
"\n"
"function getWeatherForStation() {\n"
"  var station = entry.get_text();\n"
"\n"
"  var GeoNames = new WeatherService.GeoNames(station); //\"EFHF\";\n"
"\n"
"  GeoNames.getWeather(function(error, weather) {\n"
"    //this here works bit like signals. This code will be run when we have weather.\n"
"    if (error) {\n"
"      label2.set_text(\"Suggested ICAO station does not exist Try EFHF\");\n"
"    return; }\n"
"    weatherIcon.file = GeoNames.getIcon(weather);\n"
"\n"
"    label1.set_text(\"Temperature is \" + weather.weatherObservation.temperature + \" degrees.\");\n"
"    if (weather.weatherObservation.weatherCondition !== \"n/a\"){\n"
"      label2.set_text(\"Looks like there is \" + weather.weatherObservation.weatherCondition + \" in the sky.\");\n"
"      }\n"
"    else {\n"
"      label2.set_text(\"Looks like there is \" + weather.weatherObservation.clouds + \" in the sky.\");\n"
"    }\n"
"    label3.set_text(\"Windspeed is \" + weather.weatherObservation.windSpeed + \" m/s\")\n"
"    // ...\n"
"  });\n"
"}\n"
msgstr ""
"\n"
"function getWeatherForStation() {\n"
"  var station = entry.get_text();\n"
"\n"
"  var GeoNames = new WeatherService.GeoNames(station); //\"EFHF\";\n"
"\n"
"  GeoNames.getWeather(function(error, weather) {\n"
"    //Αυτό εδώ δουλεύει λίγο σαν σήματα. Αυτός ο  κώδικας θα εκτελεστεί όταν έχουμε καιρό.\n"
"    if (error) {\n"
"      label2.set_text(\"Suggested ICAO station does not exist Try EFHF\");\n"
"    return; }\n"
"    weatherIcon.file = GeoNames.getIcon(weather);\n"
"\n"
"    label1.set_text(\"Temperature is \" + weather.weatherObservation.temperature + \" degrees.\");\n"
"    if (weather.weatherObservation.weatherCondition !== \"n/a\"){\n"
"      label2.set_text(\"Looks like there is \" + weather.weatherObservation.weatherCondition + \" in the sky.\");\n"
"      }\n"
"    else {\n"
"      label2.set_text(\"Looks like there is \" + weather.weatherObservation.clouds + \" in the sky.\");\n"
"    }\n"
"    label3.set_text(\"Windspeed is \" + weather.weatherObservation.windSpeed + \" m/s\")\n"
"    // ...\n"
"  });\n"
"}\n"

#. (itstool) path: section/p
#: C/weatherAppMain.js.page:121
msgid ""
"This function is dedicated for calling for the weather information and "
"updating labels and icons accordingly. In the beginning of the function we "
"get the user input for the search. So here for the first time we use our own "
"library and assign it to variable GeoNames. While assigning WeatherService "
"we give it the station. The firs thing we do with GeoNames is to request "
"weather. Everything after GeoNames.getWeather(function(error, weather) "
"happens only if we either get an error message or weather information. If "
"either doesn't come, the rest of the program works as normal, so main_Quit "
"works."
msgstr ""
"Αυτή η λειτουργία αφιερώνεται στην κλήση για τις πληροφορίες καιρού και "
"ενημέρωση ετικετών και εικονιδίων ανάλογα. Στην αρχή της λειτουργίας "
"παίρνουμε την είσοδο χρήστη για αναζήτηση. Έτσι εδώ για την πρώτη φορά "
"χρησιμοποιούμε τη δική μας βιβλιοθήκη και τις αποδίδουμε τη μεταβλητή "
"GeoNames. Ενώ εκχωρούμε την WeatherService της δίνουμε τον σταθμό. Το πρώτο "
"πράγμα που κάνουμε με τα GeoNames είναι η αίτηση καιρού. Οτιδήποτε μετά τα "
"GeoNamesgetWeather.getWeather (συνάρτηση (σφάλμα, καιρός) συμβαίνει μόνο εάν "
"είτε πάρουμε ένα μήνυμα σφάλματος ή πληροφορίες καιρού. Εάν δεν έρθει "
"κανένα, το υπόλοιπο του προγράμματος δουλεύει τόσο κανονικά, όσο το "
"main_Quit δουλεύει."

#. (itstool) path: section/title
#: C/weatherAppMain.js.page:125
msgid "Connecting signals to button and entry."
msgstr "Σύνδεση σημάτων σε κουμπί και καταχώριση."

#. (itstool) path: section/code
#: C/weatherAppMain.js.page:126
#, no-wrap
msgid ""
"\n"
"entry.connect(\"key_press_event\", function(widget, event) {\n"
"  if (entry.get_text().length === 4) {\n"
"    // Enough is enough\n"
"    getWeatherForStation();\n"
"  }\n"
"  return false;\n"
"});\n"
"\n"
"button1.connect(\"clicked\", function(){\n"
"  getWeatherForStation();\n"
"});"
msgstr ""
"\n"
"entry.connect(\"key_press_event\", function(widget, event) {\n"
"  if (entry.get_text().length === 4) {\n"
"    // Enough is enough\n"
"    getWeatherForStation();\n"
"  }\n"
"  return false;\n"
"});\n"
"\n"
"button1.connect(\"clicked\", function(){\n"
"  getWeatherForStation();\n"
"});"

#. (itstool) path: section/p
#: C/weatherAppMain.js.page:138
msgid ""
"And finally we have the connections that make the whole application run as "
"it should. We connect both the entry and the button to do the same thing, "
"getting the weather. So it doesn't matter weather you press enter of click "
"the search button."
msgstr ""
"Και τελικά έχουμε τις συνδέσεις που κάνουν όλη την εφαρμογή να τρέχει όπως "
"θα έπρεπε. Συνδέουμε και την καταχώριση και το κουμπί για να κάνουν το ίδιο "
"πράγμα, παίρνοντας τον καιρό. Έτσι δεν πειράζει, εάν πατήσετε εάν πατήσετε "
"εισαγωγή ή κλικ στο κουμπί αναζήτησης."

#. (itstool) path: section/title
#: C/weatherAppMain.js.page:142
msgid "Weatherapp.js"
msgstr "Weatherapp.js"

#. (itstool) path: section/p
#: C/weatherAppMain.js.page:143
msgid "Weatherapp.js file looks like this:"
msgstr "Το αρχείο Weatherapp.js μοιάζει με αυτό:"

#. (itstool) path: section/code
#: C/weatherAppMain.js.page:144
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"//The previous line is a hash bang tells how to run the script.\n"
"// Note that the script has to be executable (run in terminal in the right folder: chmod +x scriptname)\n"
"\n"
"var Gtk = imports.gi.Gtk;\n"
"\n"
"const WeatherService = imports.geonames;\n"
"//Bring your own library from same folder (as set in GJS_PATH). If using autotools .desktop will take care of this\n"
"\n"
"// Initialize the gtk\n"
"Gtk.init(null, 0);\n"
"//create your window, name it and connect the x to quit function. Remember that window is a taken word\n"
"var weatherwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL});\n"
"weatherwindow.title = \"Todays weather\";\n"
"//Window only accepts one widget and a title. Further structure with Gtk.boxes of similar\n"
"weatherwindow.connect(\"destroy\", function(){Gtk.main_quit()});\n"
"//We initialize the icon here, but deside the file later in geonames.js.\n"
"\n"
"var weatherIcon = new Gtk.Image();\n"
"\n"
"//Set some labels to your window\n"
"var label1 = new Gtk.Label({label: \"\"});\n"
"var label2 = new Gtk.Label({label: \"Looking in the sky...\"});\n"
"var label3 = new Gtk.Label({label: \"\"});\n"
"\n"
"var grid = new Gtk.Grid();\n"
"weatherwindow.add(grid);\n"
"\n"
"var entry = new Gtk.Entry();\n"
"entry.set_width_chars(4);\n"
"entry.set_max_length(4);\n"
"var label4 = new Gtk.Label({label: \"Enter ICAO station for weather: \"});\n"
"var button1 = new Gtk.Button({label: \"search!\"});\n"
"\n"
"//some weather\n"
"\n"
"entry.connect(\"key_press_event\", function(widget, event) {\n"
"  // FIXME: Get weather on enter (key 13)\n"
"  if (entry.get_text().length === 4) {\n"
"    // Enough is enough\n"
"    getWeatherForStation();\n"
"  }\n"
"  return false;\n"
"});\n"
"\n"
"button1.connect(\"clicked\", function(){\n"
"  getWeatherForStation();\n"
"});\n"
"\n"
"function getWeatherForStation() {\n"
"  var station = entry.get_text();\n"
"\n"
"  var GeoNames = new WeatherService.GeoNames(station); //\"EFHF\";\n"
"\n"
"  GeoNames.getWeather(function(error, weather) {\n"
"    //this here works bit like signals. This code will be run when we have weather.\n"
"    if (error) {\n"
"      label2.set_text(\"Suggested ICAO station does not exist Try EFHF\");\n"
"    return; }\n"
"    weatherIcon.file = GeoNames.getIcon(weather);\n"
"\n"
"    label1.set_text(\"Temperature is \" + weather.weatherObservation.temperature + \" degrees.\");\n"
"    if (weather.weatherObservation.weatherCondition !== \"n/a\"){\n"
"      label2.set_text(\"Looks like there is \" + weather.weatherObservation.weatherCondition + \" in the sky.\");\n"
"      }\n"
"    else {\n"
"      label2.set_text(\"Looks like there is \" + weather.weatherObservation.clouds + \" in the sky.\");\n"
"    }\n"
"    label3.set_text(\"Windspeed is \" + weather.weatherObservation.windSpeed + \" m/s\")\n"
"    // ...\n"
"  });\n"
"}\n"
"\n"
"grid.attach(label4, 2, 1, 1, 1);\n"
"grid.attach_next_to(label1,label4,3,1,1);\n"
"grid.attach_next_to(label2,label1,3,1,1);\n"
"grid.attach_next_to(label3,label2,3,1,1);\n"
"grid.attach_next_to(entry,label4,1,1,1);\n"
"grid.attach_next_to(button1,entry,1,1,1);\n"
"grid.attach_next_to(weatherIcon,label2,1,1,1)\n"
"weatherwindow.show_all();\n"
"//and run it\n"
"Gtk.main();\n"
msgstr ""
"\n"
"#!/usr/bin/gjs\n"
"//Η προηγούμενη γραμμή αρχίζει με δίεση-θαυμαστικό που λέει π να εκτελεστεί το σενάριο.\n"
"// Σημειώστε ότι το σενάριο πρέπει να είναι εκτελέσιμο (εκτέλεση σε τερματικό στον δεξιό φάκελο: chmod +x scriptname)\n"
"\n"
"var Gtk = imports.gi.Gtk;\n"
"\n"
"const WeatherService = imports.geonames;\n"
"//Μεταφορά της δικής σας βιβλιοθήκης από τον ίδιο φάκελο (όπως ορίστηκε στο GJS_PATH). Αν χρησιμοποιείτε autotools .desktop θα φροντίσει για αυτό\n"
"\n"
"// Αρχικοποίηση της gtk\n"
"Gtk.init(null, 0);\n"
"//Δημιουργία του παραθύρου σας, ονομασία του, και σύνδεση του x με τη συνάρτηση εξόδου. Να θυμάστε ότι το παράθυρο είναι μια δεσμευμένη λέξη\n"
"var weatherwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL});\n"
"weatherwindow.title = \"Todays weather\";\n"
"//Το παράθυρο δέχεται μόνο ένα γραφικό στοιχείο και έναν τίτλο. Παραπέρα δομή όμοια μεGtk.boxes\n"
"weatherwindow.connect(\"destroy\", function(){Gtk.main_quit()});\n"
"//We initialize the icon here, but deside the file later in geonames.js.\n"
"\n"
"var weatherIcon = new Gtk.Image();\n"
"\n"
"//Ορισμός μερικών ετικετών στο παράθυρό σας\n"
"var label1 = new Gtk.Label({label: \"\"});\n"
"var label2 = new Gtk.Label({label: \"Looking in the sky...\"});\n"
"var label3 = new Gtk.Label({label: \"\"});\n"
"\n"
"var grid = new Gtk.Grid();\n"
"weatherwindow.add(grid);\n"
"\n"
"var entry = new Gtk.Entry();\n"
"entry.set_width_chars(4);\n"
"entry.set_max_length(4);\n"
"var label4 = new Gtk.Label({label: \"Enter ICAO station for weather: \"});\n"
"var button1 = new Gtk.Button({label: \"search!\"});\n"
"\n"
"//Κάποιος καιρός\n"
"\n"
"entry.connect(\"key_press_event\", function(widget, event) {\n"
"  // FIXME: Λήψη καιρού με την εισαγωγή (πλήκτρο 13)\n"
"  if (entry.get_text().length === 4) {\n"
"    // Enough is enough\n"
"    getWeatherForStation();\n"
"  }\n"
"  return false;\n"
"});\n"
"\n"
"button1.connect(\"clicked\", function(){\n"
"  getWeatherForStation();\n"
"});\n"
"\n"
"function getWeatherForStation() {\n"
"  var station = entry.get_text();\n"
"\n"
"  var GeoNames = new WeatherService.GeoNames(station); //\"EFHF\";\n"
"\n"
"  GeoNames.getWeather(function(error, weather) {\n"
"    //Αυτό εδώ δουλεύει λίγο σαν σήματα. Αυτός ο κώδικας θα εκτελεστεί όταν έχουμε καιρό.\n"
"    if (error) {\n"
"      label2.set_text(\"Suggested ICAO station does not exist Try EFHF\");\n"
"    return; }\n"
"    weatherIcon.file = GeoNames.getIcon(weather);\n"
"\n"
"    label1.set_text(\"Temperature is \" + weather.weatherObservation.temperature + \" degrees.\");\n"
"    if (weather.weatherObservation.weatherCondition !== \"n/a\"){\n"
"      label2.set_text(\"Looks like there is \" + weather.weatherObservation.weatherCondition + \" in the sky.\");\n"
"      }\n"
"    else {\n"
"      label2.set_text(\"Looks like there is \" + weather.weatherObservation.clouds + \" in the sky.\");\n"
"    }\n"
"    label3.set_text(\"Windspeed is \" + weather.weatherObservation.windSpeed + \" m/s\")\n"
"    // ...\n"
"  });\n"
"}\n"
"\n"
"grid.attach(label4, 2, 1, 1, 1);\n"
"grid.attach_next_to(label1,label4,3,1,1);\n"
"grid.attach_next_to(label2,label1,3,1,1);\n"
"grid.attach_next_to(label3,label2,3,1,1);\n"
"grid.attach_next_to(entry,label4,1,1,1);\n"
"grid.attach_next_to(button1,entry,1,1,1);\n"
"grid.attach_next_to(weatherIcon,label2,1,1,1)\n"
"weatherwindow.show_all();\n"
"//και εκτέλεσή του\n"
"Gtk.main();\n"

#. (itstool) path: section/p
#: C/weatherAppMain.js.page:229
msgid "Running until you have all the autotools files ready. :"
msgstr "Εκτέλεση μέχρι να έχετε όλα τα αρχεία autotools έτοιμα. :"

#. (itstool) path: section/screen
#: C/weatherAppMain.js.page:231
#, no-wrap
msgid " <output style=\"prompt\">$ </output><input> GJS_PATH=`pwd` gjs weatherapp.js</input>"
msgstr " <output style=\"prompt\">$ </output><input> GJS_PATH=`pwd` gjs weatherapp.js</input>"

#. (itstool) path: section/p
#: C/weatherAppMain.js.page:232
msgid ""
"Use this command on terminal while developing your modules. When calling "
"your program in this manner it knows where to find your custom JSlibraries, "
"in this case geonames.js."
msgstr ""
"Χρησιμοποιήστε αυτήν την εντολή στο τερματικό ενώ αναπτύσσετε τα αρθρώματά "
"σας. Όταν καλείτε το πρόγραμμά σας με αυτόν τον τρόπο, ξέρει πού θα βρει τις "
"προσαρμοσμένες JSlibraries, σε αυτήν την περίπτωση το geonames.js."

#. (itstool) path: page/title
#: C/weatherAutotools.js.page:19
msgid "Autotools and Icons"
msgstr "Αυτόματα εργαλεία (Autotools) και εικονίδια"

#. (itstool) path: synopsis/p
#: C/weatherAutotools.js.page:21
msgid ""
"In this part of the guide well construct the autotools and custom icons "
"needed for weather application to be a seamless part of your desktop. To "
"write and run all the code examples yourself, you need an editor to write "
"code in, Terminal and GNOME 3 or higher installed into your computer. In "
"this guide we we'll go through the following parts:"
msgstr ""
"Σε αυτό το τμήμα του οδηγού θα κατασκευάσουμε τα αυτόματα εργαλεία και θα "
"προσαρμόσουμε τα απαιτούμενα εικονίδια για την εφαρμογή καιρού για να είναι "
"άρραφο μέρος της επιφάνειας εργασίας σας. Για να γράψετε και να τρέξετε όλα "
"τα παραδείγματα κώδικα οι ίδιοι, χρειαζόσαστε έναν επεξεργαστή για να "
"γράψιμο του κώδικα, τερματικό και GNOME 3 ή μεταγενέστερο εγκατεστημένο στον "
"υπολογιστή σας. Σε αυτόν τον οδηγό θα εξετάσουμε τα παρακάτω μέρη:"

#. (itstool) path: item/p
#: C/weatherAutotools.js.page:24
msgid "<link xref=\"#autotools\"> Autotools</link>"
msgstr "<link xref=\"#autotools\">Αυτόματα εργαλεία (Autotools)</link>"

#. (itstool) path: item/p
#: C/weatherAutotools.js.page:25
msgid "<link xref=\"#icons\">Custom icons for your application</link>"
msgstr ""
"<link xref=\"#icons\">Προσαρμοσμένα εικονίδια για την εφαρμογή σας</link>"

#. (itstool) path: section/title
#: C/weatherAutotools.js.page:32
msgid "Autotools and necessary files"
msgstr "Αυτόματα εργαλεία (Autotools) και απαραίτητα αρχεία"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:33
msgid ""
"Having more than one file in your folder makes using autotools a bit tricky. "
"You need the .desktop file, autogen.sh, Makefile.am, configure.ac and as a "
"new file: myapp.sh.in file. Hacking the autotools file is a complicated "
"field. More information can be found in many different sources, <link href="
"\"http://en.wikipedia.org/wiki/GNU_build_system\">the wikipedia article</"
"link> provides a good overwiev on the subject."
msgstr ""
"Έχοντας περισσότερα από ένα αρχεία στον φάκελό σας κάνει τη χρήση του "
"autotools λίγο περίπλοκο. Χρειαζόσαστε το αρχείο .desktop, autogen.sh, "
"Makefile.am, configure.ac και ως νέο αρχείο: το αρχείο myapp.sh.in. Η "
"επεξεργασία του αρχείου autotools είναι ένα περίπλοκο πεδίο. Περισσότερες "
"πληροφορίες μπορείτε να βρείτε σε πολλές διαφορετικές πηγές, <link href="
"\"http://en.wikipedia.org/wiki/GNU_build_system\">το άρθρο της βίκι</link> "
"παρέχει μια καλή επισκόπηση του θέματος."

#. (itstool) path: item/p
#. (itstool) path: section/p
#: C/weatherAutotools.js.page:36 C/weatherAutotools.js.page:42
msgid "weatherapp.desktop"
msgstr "weatherapp.desktop"

#. (itstool) path: item/p
#. (itstool) path: section/p
#: C/weatherAutotools.js.page:37 C/weatherAutotools.js.page:57
msgid "weatherapp.sh.in"
msgstr "weatherapp.sh.in"

#. (itstool) path: section/code
#: C/weatherAutotools.js.page:43
#, no-wrap
msgid ""
"\n"
"[Desktop Entry]\n"
"Version=1.0\n"
"Encoding=UTF-8\n"
"Name=Weather app\n"
"Comment=Weather showing application\n"
"Exec=weatherapp.sh\n"
"Icon=application-default-icon\n"
"Terminal=false\n"
"Type=Application\n"
"StartupNotify=true\n"
"Categories=GNOME;GTK;Utility;"
msgstr ""
"\n"
"[Desktop Entry]\n"
"Version=1.0\n"
"Encoding=UTF-8\n"
"Name=Weather app\n"
"Comment=Weather showing application\n"
"Exec=weatherapp.sh\n"
"Icon=application-default-icon\n"
"Terminal=false\n"
"Type=Application\n"
"StartupNotify=true\n"
"Categories=GNOME;GTK;Utility;"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:55
msgid ""
"The thing to notice in this file is that the Exec line will make this ."
"desktop file work only after running all the other makefiles. Weatherapp.sh "
"is a small shell script created with the weatherapp.sh.in."
msgstr ""
"Αυτό που πρέπει να σημειώσετε σε αυτό το αρχείο είναι ότι η γραμμή Exec θα "
"κάνει αυτό το αρχείο .desktop να δουλέψει μόνο μετά την εκτέλεση όλων των "
"άλλων makefiles. Το Weatherapp.sh είναι ένα μικρό σενάριο κελύφους που "
"δημιουργήθηκε με το weatherapp.sh.in."

#. (itstool) path: section/code
#: C/weatherAutotools.js.page:58
#, no-wrap
msgid ""
"\n"
"#!/bin/sh\n"
"export GJS_PATH=@bindir@\n"
"gjs @bindir@/weatherapp.js"
msgstr ""
"\n"
"#!/bin/sh\n"
"export GJS_PATH=@bindir@\n"
"gjs @bindir@/weatherapp.js"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:62
msgid ""
"This file is a template to the file Makefile will do to be run from .desktop."
msgstr ""
"Αυτό το αρχείο είναι ένα πρότυπο στο αρχείο Makefile για να εκτελεστεί από ."
"desktop."

#. (itstool) path: section/code
#: C/weatherAutotools.js.page:65
#, no-wrap
msgid ""
"\n"
"# The actual runnable program is set to the SCRIPTS primitive. Prefix bin_ tells where to copy this\n"
"bin_SCRIPTS = weatherapp.js geonames.js weatherapp.sh\n"
"# List of files to be distributed\n"
"EXTRA_DIST=  \\\n"
"    $(bin_SCRIPTS) \\\n"
"    $(private_icons)\t\\\n"
"\t  $(NULL)\n"
"\n"
"CLEANFILES =\n"
"\n"
"# The desktop files\n"
"desktopdir = $(datadir)/applications\n"
"desktop_DATA =weatherapp.desktop\n"
"\n"
"# convenience command for doing Makefile variable substitutions in non-Makefile\n"
"# files (scripts, service files, etc.)\n"
"do_subst = sed -e 's|@abs_top_srcdir[@]|$(abs_top_srcdir)|g' \\\n"
"               -e 's|@abs_top_builddir[@]|$(abs_top_builddir)|g' \\\n"
"               -e 's|@localedir[@]|$(localedir)|g' \\\n"
"               -e 's|@bindir[@]|$(bindir)|g' \\\n"
"               -e 's|@libexecdir[@]|$(libexecdir)|g' \\\n"
"\t       -e 's|@pkglibdir[@]|$(pkglibdir)|g' \\\n"
"\t       -e 's|@pkgdatadir[@]|$(pkgdatadir)|g' \\\n"
"\t       -e 's|@have_libnotify[@]|$(HAVE_LIBNOTIFY)|g' \\\n"
"\t       -e 's|@have_libsoup[@]|$(HAVE_LIBSOUP)|g' \\\n"
"\t       -e 's|@have_cheese[@]|$(HAVE_CHEESE)|g'\n"
"\n"
"weatherapp.sh: weatherapp.sh.in\n"
"\t$(AM_V_GEN) $(do_subst) $&lt; &gt; $@\n"
"\tchmod +x $@\n"
"\n"
"CLEANFILES += weatherapp.sh\n"
"EXTRA_DIST += weatherapp.sh.in\n"
"\n"
"#the application icon\n"
"appicondir=$(datadir)/icons/hicolor/scalable/apps\n"
"appicon_DATA=weather-icon.svg\n"
"\n"
"#icons in the application\n"
"NULL =\n"
"\n"
"private_icons = \\\n"
"\tweather-clear.svg \\\n"
"  weather-few-clouds.svg \\\n"
"  weather-fog.svg \\\n"
"  weather-icon.svg \\\n"
"  weather-overcast.svg \\\n"
"  weather-showers.svg \\\n"
"  weather-showers-scattered.svg \\\n"
"  weather-snow.svg \\\n"
"  $(NULL)\n"
"\n"
"install-icons:\n"
"\tfor icon in $(private_icons); do \\\n"
"\t\tmkdir -p $(DESTDIR)$(pkgdatadir)/icons/; \\\n"
"\t\t$(INSTALL_DATA) $(srcdir)/$$icon $(DESTDIR)$(pkgdatadir)/icons/; \\\n"
"\tdone\n"
"\n"
"install-data-local: install-icons"
msgstr ""
"\n"
"# Το ενεργό εκτελέσιμο πρόγραμμα ορίζεται στο θεμελιακό SCRIPTS . Το πρόθεμα bin_ λέει πού θα αντιγραφεί αυτό\n"
"bin_SCRIPTS = weatherapp.js geonames.js weatherapp.sh\n"
"# Ο κατάλογος αρχείων για διανομή\n"
"EXTRA_DIST=  \\\n"
"    $(bin_SCRIPTS) \\\n"
"    $(private_icons)\t\\\n"
"\t  $(NULL)\n"
"\n"
"CLEANFILES =\n"
"\n"
"# Τα αρχεία της επιφάνειας εργασίας\n"
"desktopdir = $(datadir)/applications\n"
"desktop_DATA =weatherapp.desktop\n"
"\n"
"# Κατάλληλη εντολή για εκτέλεση αντικαταστάσεων μεταβλητής Makefile σε μη Makefile\n"
"# Αρχεία (σενάρια, αρχεία υπηρεσίας, κλπ.)\n"
"do_subst = sed -e 's|@abs_top_srcdir[@]|$(abs_top_srcdir)|g' \\\n"
"               -e 's|@abs_top_builddir[@]|$(abs_top_builddir)|g' \\\n"
"               -e 's|@localedir[@]|$(localedir)|g' \\\n"
"               -e 's|@bindir[@]|$(bindir)|g' \\\n"
"               -e 's|@libexecdir[@]|$(libexecdir)|g' \\\n"
"\t       -e 's|@pkglibdir[@]|$(pkglibdir)|g' \\\n"
"\t       -e 's|@pkgdatadir[@]|$(pkgdatadir)|g' \\\n"
"\t       -e 's|@have_libnotify[@]|$(HAVE_LIBNOTIFY)|g' \\\n"
"\t       -e 's|@have_libsoup[@]|$(HAVE_LIBSOUP)|g' \\\n"
"\t       -e 's|@have_cheese[@]|$(HAVE_CHEESE)|g'\n"
"\n"
"weatherapp.sh: weatherapp.sh.in\n"
"\t$(AM_V_GEN) $(do_subst) $&lt; &gt; $@\n"
"\tchmod +x $@\n"
"\n"
"CLEANFILES += weatherapp.sh\n"
"EXTRA_DIST += weatherapp.sh.in\n"
"\n"
"#Το εικονίδιο της εφαρμογής\n"
"appicondir=$(datadir)/icons/hicolor/scalable/apps\n"
"appicon_DATA=weather-icon.svg\n"
"\n"
"#Εικονίδια στην εφαρμογή\n"
"NULL =\n"
"\n"
"private_icons = \\\n"
"\tweather-clear.svg \\\n"
"  weather-few-clouds.svg \\\n"
"  weather-fog.svg \\\n"
"  weather-icon.svg \\\n"
"  weather-overcast.svg \\\n"
"  weather-showers.svg \\\n"
"  weather-showers-scattered.svg \\\n"
"  weather-snow.svg \\\n"
"  $(NULL)\n"
"\n"
"install-icons:\n"
"\tfor icon in $(private_icons); do \\\n"
"\t\tmkdir -p $(DESTDIR)$(pkgdatadir)/icons/; \\\n"
"\t\t$(INSTALL_DATA) $(srcdir)/$$icon $(DESTDIR)$(pkgdatadir)/icons/; \\\n"
"\tdone\n"
"\n"
"install-data-local: install-icons"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:125
msgid ""
"This needs a bit more explaining. Compared to the HelloWorld Makefile.am "
"this has changed quite a bit. Lets go through all the new blocks:"
msgstr ""
"Αυτό χρειάζεται λίγη περισσότερη εξήγηση. Συγκρινόμενο με το HelloWorld "
"Makefile.am αυτό έχει αλλάξει αρκετά. Ας εξετάσουμε όλες τις νέες ομάδες:"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:126
msgid ""
"bin_scripts are the files that are needed to run your application. In thin "
"case they are the first two files are the program itself and the third is "
"the script that launches the application."
msgstr ""
"Τα bin_scripts είναι αρχεία που απαιτούνται για την εκτέλεση της εφαρμογής "
"σας. Σε αυτήν την περίπτωση τα δύο πρώτα είναι το ίδιο το πρόγραμμα και το "
"τρίτο είναι το σενάριο που ξεκινά την εφαρμογή."

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:127
msgid "EXTRA_DIST are the files that are to be distributed"
msgstr "EXTRA_DIST είναι τα αρχεία που πρόκειται να διανεμηθούν"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:128
msgid "do_subst block is bits and pieces that need to be where they are"
msgstr ""
"ομάδα do_subst είναι δυαδικά και κομμάτια που πρέπει να είναι εκεί που "
"βρίσκονται"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:129
msgid ""
"after the comment #icons in the application there are all the icons that are "
"used by the program. For them to be useful you need to install the icons in "
"correct places and that is done byt the install-icons: bit"
msgstr ""
"μετά το σχόλιο #εικονίδια στην εφαρμογή υπάρχουν όλα τα εικονίδια που "
"χρησιμοποιούνται από το πρόγραμμα. Για να είναι χρήσιμα αυτά πρέπει να "
"εγκαταστήσετε τα εικονίδια σε σωστές θέσεις και αυτό γίνεται από τα install-"
"icons: bit"

#. (itstool) path: section/code
#: C/weatherAutotools.js.page:132
#, no-wrap
msgid ""
"\n"
"dnl This file is processed by autoconf to create a configure script\n"
"AC_INIT([Weather App], 1.0)\n"
"AM_INIT_AUTOMAKE([1.10 no-define foreign])\n"
"AC_CONFIG_FILES(Makefile)\n"
"AC_OUTPUT"
msgstr ""
"\n"
"dnl This file is processed by autoconf to create a configure script\n"
"AC_INIT([Weather App], 1.0)\n"
"AM_INIT_AUTOMAKE([1.10 no-define foreign])\n"
"AC_CONFIG_FILES(Makefile)\n"
"AC_OUTPUT"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:138
msgid "autohen.sh"
msgstr "autohen.sh"

#. (itstool) path: section/code
#: C/weatherAutotools.js.page:139
#, no-wrap
msgid ""
"\n"
"#!/bin/sh\n"
"# This will run autoconf, automake, etc. for us\n"
"autoreconf --force --install"
msgstr ""
"\n"
"#!/bin/sh\n"
"# Αυτό θα εκτελέσει autoconf, automake, κλπ. για μας\n"
"autoreconf --force --install"

#. (itstool) path: section/title
#: C/weatherAutotools.js.page:145
msgid "Custom icons for your application"
msgstr "Προσαρμογή εικονιδίων για την εφαρμογή σας"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:146
msgid ""
"When thinking about custom icons a good rule of thumb is: do you expect to "
"see that icon used elsewhere or is it private to your app? If the first (e."
"g. the icons in the desktop file that are shown by the shell) then you need /"
"usr/share/hicolor, otherwise (e.g. the weather icons of your app) /usr/share/"
"$application/bla/bla"
msgstr ""
"Εάν σκέφτεστε τα προσαρμοσμένα εικονίδια ένας καλός πρόχειρος κανόνας είναι "
"ο εξής: περιμένετε να δείτε αυτό το εικονίδιο να χρησιμοποιείται κάπου αλλού "
"ή είναι μόνο για την εφαρμογή σας; Εάν συμβαίνει το πρώτο (π.χ. τα εικονίδια "
"στο αρχείο της επιφάνειας εργασίας που εμφανίζονται από το κέλυφος) τότε "
"χρειαζόσαστε /usr/share/hicolor, αλλιώς (π.χ. τα εικονίδια καιρού της "
"εφαρμογής σας) /usr/share/$application/bla/bla"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:147
msgid ""
"Using autotools you have to make some changes to your .desktop and Makefile."
"am files. In the desktop file you change the Icon's name Icon=weather-icon. "
"In the Makefile.am file you add these two lines to the end of your "
"application #the application icon"
msgstr ""
"Χρησιμοποιώντας το autotools πρέπει να κάνετε μερικές αλλαγές στα αρχεία "
"σας .desktop and Makefile.am. Στο αρχείο επιφάνειας εργασίας αλλάξτε το "
"όνομα του εικονιδίου Icon=weather-icon. Στο αρχείο Makefile.am προσθέστε "
"αυτές τις δύο γραμμές στο τέλος της εφαρμογή σας #the application icon"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:148
msgid "appicondir=$(datadir)/icons/hicolor/scalable/apps"
msgstr "appicondir=$(datadir)/icons/hicolor/scalable/apps"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:149
msgid "appicon_DATA=weather-icon.svg"
msgstr "appicon_DATA=weather-icon.svg"

#. (itstool) path: page/title
#: C/weatherGeonames.js.page:19
msgid "Local library geoNames"
msgstr "Τοπική βιβλιοθήκη geoNames"

#. (itstool) path: synopsis/p
#: C/weatherGeonames.js.page:21
msgid ""
"In this part of the guide we'll construct the local library geoNames using "
"asynchronous calls. Weather information in this example is fetched from "
"geonames.org and the application is using the <link href=\"http://en."
"wikipedia.org/wiki/List_of_airports_by_ICAO_code:_E\">ICAO codes </link> to "
"place your weather request. To write and run all the code examples yourself, "
"you need an editor to write code in, Terminal and GNOME 3 or higher "
"installed into your computer. In this guide we'll go through the following "
"parts:"
msgstr ""
"Σε αυτό το τμήμα του οδηγού πρόκειται να κατασκευάσουμε μια τοπική "
"βιβλιοθήκη geoNames χρησιμοποιώντας ασύγχρονες κλήσεις. Οι πληροφορίες του "
"καιρού σε αυτό το παράδειγμα παρέχονται από τον geonames.org και η εφαρμογή "
"χρησιμοποιεί το <link href=\"http://en.wikipedia.org/wiki/"
"List_of_airports_by_ICAO_code:_E\">κωδικούς ICAO</link> για να τοποθετήσει "
"την αίτηση σας για τον καιρό. Για να γράψετε και να εκτελέσετε οι ίδιοι τα "
"παραδείγματα του κώδικα, χρειάζεστε έναν επεξεργαστή για να γράψετε τον "
"κώδικα, τερματικό και GNOME 3 ή μεγαλύτερο εγκατεστημένο στον υπολογιστή "
"σας. Σε αυτόν τον οδηγό θα εξετάσουμε τα παρακάτω μέρη:"

#. (itstool) path: item/p
#: C/weatherGeonames.js.page:24
msgid ""
"<link xref=\"#geonamesimports\">Local library for getting the weather</link>"
msgstr ""
"<link xref=\"#geonamesimports\">Τοπική βιβλιοθήκη για λήψη του καιρού</link>"

#. (itstool) path: item/p
#: C/weatherGeonames.js.page:25
msgid "<link xref=\"#geonamesfunction\">Creating function geoNames</link>"
msgstr ""
"<link xref=\"#geonamesfunction\">Δημιουργώντας συναρτήσεις geoNames</link>"

#. (itstool) path: item/p
#: C/weatherGeonames.js.page:26
msgid "<link xref=\"#geonamesmethods\">Methods for geoNames</link>"
msgstr "<link xref=\"#geonamesmethods\">Μέθοδοι για το geoNames</link>"

#. (itstool) path: item/p
#: C/weatherGeonames.js.page:27
msgid "<link xref=\"#geonames.js\">geonames.js </link>"
msgstr "<link xref=\"#geonames.js\">geonames.js </link>"

#. (itstool) path: section/title
#: C/weatherGeonames.js.page:32
msgid "Local library for getting the weather"
msgstr "Τοπική βιβλιοθήκη για λήψη του καιρού"

#. (itstool) path: section/p
#: C/weatherGeonames.js.page:33
msgid "For this we need a new file that will be our local library."
msgstr ""
"Για αυτό θα χρειαστούμε ένα νέο αρχείο που θα είναι η τοπική μας βιβλιοθήκη."

#. (itstool) path: section/code
#: C/weatherGeonames.js.page:34
#, no-wrap
msgid ""
"\n"
"const Soup = imports.gi.Soup;\n"
"const _httpSession = new Soup.SessionAsync();\n"
"Soup.Session.prototype.add_feature.call(_httpSession, new Soup.ProxyResolverDefault());\n"
msgstr ""
"\n"
"const Soup = imports.gi.Soup;\n"
"const _httpSession = new Soup.SessionAsync();\n"
"Soup.Session.prototype.add_feature.call(_httpSession, new Soup.ProxyResolverDefault());\n"

#. (itstool) path: section/p
#: C/weatherGeonames.js.page:39
msgid ""
"In the first lines we'll import and initialize the libraries we need to use "
"in this local library. Soup handles all the requests we have to make with "
"http."
msgstr ""
"Στις πρώτες γραμμές θα εισάγουμε και θα αρχικοποιήσουμε τις απαιτούμενες "
"βιβλιοθήκες για χρήση σε αυτή την τοπική βιβλιοθήκη. Το Soup επεξεργάζεται "
"όλες τις αιτήσεις που πρέπει να κάνουμε με http."

#. (itstool) path: section/title
#: C/weatherGeonames.js.page:43
msgid "Creating function GeoNames"
msgstr "Δημιουργία συνάρτησης geoNames"

#. (itstool) path: section/code
#: C/weatherGeonames.js.page:44
#, no-wrap
msgid ""
"\n"
"function GeoNames(station) {\n"
"  this.station = station;\n"
"}\n"
"\n"
"GeoNames.prototype = {\n"
"\n"
"}\n"
msgstr ""
"\n"
"function GeoNames(station) {\n"
"  this.station = station;\n"
"}\n"
"\n"
"GeoNames.prototype = {\n"
"\n"
"}\n"

#. (itstool) path: section/p
#: C/weatherGeonames.js.page:53
msgid ""
"Here we create the function GeoNames that will handle getting weather for "
"us. JavaScript allows us to create functions that have little inside at "
"first and later expand them. This will be done inside the GeoNames.prototype "
"curly braces{}"
msgstr ""
"Εδώ δημιουργούμε τη συνάρτηση GeoNames που θα χειριστεί τη λήψη καιρού για "
"μας. Το JavaScript επιτρέπει τη δημιουργία συναρτήσεων που έχουν λίγο μέσα "
"στην αρχή και αργότερα τις επεκτείνει. Αυτό θα γίνει μέσα στα άγκιστρα {} "
"του GeoNames.prototype"

#. (itstool) path: section/title
#: C/weatherGeonames.js.page:57
msgid "Methods for GeoNames"
msgstr "Μέθοδοι για GeoNames"

#. (itstool) path: section/code
#: C/weatherGeonames.js.page:58
#, no-wrap
msgid ""
"\n"
"getWeather: function(callback) {\n"
"    var request = Soup.Message.new('GET', 'http://api.geonames.org/weatherIcaoJSON?ICAO=' + this.station + '&amp;username=demo');\n"
"    _httpSession.queue_message(request, function(_httpSession, message) {\n"
"      if (message.status_code !== 200) {\n"
"        callback(message.status_code, null);\n"
"        return;\n"
"      }\n"
"      var weatherJSON = request.response_body.data;\n"
"      var weather = JSON.parse(weatherJSON);\n"
"      callback(null, weather);\n"
"      });\n"
"},\n"
"\n"
"getIcon: function(weather){\n"
"    switch (weather.weatherObservation.weatherCondition){\n"
"    case \"drizzle\":\n"
"    case \"light showers rain\":\n"
"    case \"light rain\":\n"
"      return \"weather-showers-scattered.svg\";\n"
"    case \"rain\":\n"
"      return \"weather-showers.svg\";\n"
"    case \"light snow\":\n"
"    case \"snow grains\":\n"
"      return \"weather-snow.svg\";\n"
"    }\n"
"    switch (weather.weatherObservation.clouds){\n"
"      case \"few clouds\":\n"
"      case \"scattered clouds\":\n"
"        return \"weather-few-clouds.svg\";\n"
"      case \"clear sky\":\n"
"        return \"weather-clear.svg\"\n"
"      case \"broken clouds\":\n"
"      case \"overcast\":\n"
"        return \"weather-overcast.svg\";\n"
"    }\n"
"    return \"weather-fog.svg\";\n"
"}\n"
msgstr ""
"\n"
"getWeather: function(callback) {\n"
"    var request = Soup.Message.new('GET', 'http://api.geonames.org/weatherIcaoJSON?ICAO=' + this.station + '&amp;username=demo');\n"
"    _httpSession.queue_message(request, function(_httpSession, message) {\n"
"      if (message.status_code !== 200) {\n"
"        callback(message.status_code, null);\n"
"        return;\n"
"      }\n"
"      var weatherJSON = request.response_body.data;\n"
"      var weather = JSON.parse(weatherJSON);\n"
"      callback(null, weather);\n"
"      });\n"
"},\n"
"\n"
"getIcon: function(weather){\n"
"    switch (weather.weatherObservation.weatherCondition){\n"
"    case \"drizzle\":\n"
"    case \"light showers rain\":\n"
"    case \"light rain\":\n"
"      return \"weather-showers-scattered.svg\";\n"
"    case \"rain\":\n"
"      return \"weather-showers.svg\";\n"
"    case \"light snow\":\n"
"    case \"snow grains\":\n"
"      return \"weather-snow.svg\";\n"
"    }\n"
"    switch (weather.weatherObservation.clouds){\n"
"      case \"few clouds\":\n"
"      case \"scattered clouds\":\n"
"        return \"weather-few-clouds.svg\";\n"
"      case \"clear sky\":\n"
"        return \"weather-clear.svg\"\n"
"      case \"broken clouds\":\n"
"      case \"overcast\":\n"
"        return \"weather-overcast.svg\";\n"
"    }\n"
"    return \"weather-fog.svg\";\n"
"}\n"

#. (itstool) path: section/p
#: C/weatherGeonames.js.page:97
msgid ""
"The first method for GeoNames is getWeather and the second getIcon. In "
"getWeather we make a http request with soup, handle errors and then parse "
"the information from the request to form we can use it. In getIcon we simply "
"compare the results we got from getWeather to the switch we have in order to "
"get the icon matching current weather. Now that we have our local library "
"ready, it's time to make use of it."
msgstr ""
"Η πρώτη μέθοδος για το GeoNames είναι η getWeather και η δεύτερη η getIcon. "
"Στην getWeather κάνουμε μια αίτηση http με soup, επεξεργασία σφαλμάτων και "
"έπειτα ανάλυση της πληροφορίας από την αίτηση για μορφή που μπορούμε να "
"χρησιμοποιήσουμε. Στο getIcon συγκρίνουμε απλά τα αποτελέσματα που παίρνουμε "
"από getWeather στον διακόπτη που έχουμε για τη λήψη εικονιδίου που ταιριάζει "
"στον τρέχοντα καιρό. Τώρα που έχουμε την τοπική μας βιβλιοθήκη έτοιμη, είναι "
"καιρός να τη χρησιμοποιήσουμε."

#. (itstool) path: section/title
#: C/weatherGeonames.js.page:102
msgid "geonames.js"
msgstr "geonames.js"

#. (itstool) path: section/p
#: C/weatherGeonames.js.page:103
msgid ""
"Here is the entire code for our local library. The main program file calls "
"this asynchronously."
msgstr ""
"Εδώ είναι όλος ο κώδικας για την τοπική μας βιβλιοθήκη. Το αρχείο του κυρίως "
"προγράμματος το καλεί ασύγχρονα."

#. (itstool) path: section/code
#: C/weatherGeonames.js.page:104
#, no-wrap
msgid ""
"\n"
"const Soup = imports.gi.Soup;\n"
"const _httpSession = new Soup.SessionAsync();\n"
"Soup.Session.prototype.add_feature.call(_httpSession, new Soup.ProxyResolverDefault());\n"
"\n"
"function GeoNames(station) {\n"
"  this.station = station;\n"
"}\n"
"\n"
"GeoNames.prototype = {\n"
"  getWeather: function(callback) {\n"
"    var request = Soup.Message.new('GET', 'http://api.geonames.org/weatherIcaoJSON?ICAO=' + this.station + '&amp;username=demo');\n"
"    _httpSession.queue_message(request, function(_httpSession, message) {\n"
"      if (message.status_code !== 200) {\n"
"        callback(message.status_code, null);\n"
"        return;\n"
"      }\n"
"      var weatherJSON = request.response_body.data;\n"
"      var weather = JSON.parse(weatherJSON);\n"
"      callback(null, weather);\n"
"      });\n"
"    },\n"
"\n"
"  getIcon: function(weather){\n"
"    switch (weather.weatherObservation.weatherCondition){\n"
"    case \"drizzle\":\n"
"    case \"light showers rain\":\n"
"    case \"light rain\":\n"
"      return \"weather-showers-scattered.svg\";\n"
"    case \"rain\":\n"
"      return \"weather-showers.svg\";\n"
"    case \"light snow\":\n"
"    case \"snow grains\":\n"
"      return \"weather-snow.svg\";\n"
"    }\n"
"    switch (weather.weatherObservation.clouds){\n"
"      case \"few clouds\":\n"
"      case \"scattered clouds\":\n"
"        return \"weather-few-clouds.svg\";\n"
"      case \"clear sky\":\n"
"        return \"weather-clear.svg\"\n"
"      case \"broken clouds\":\n"
"      case \"overcast\":\n"
"        return \"weather-overcast.svg\";\n"
"    }\n"
"    return \"weather-fog.svg\";\n"
"    }\n"
"}\n"
"}  "
msgstr ""
"\n"
"const Soup = imports.gi.Soup;\n"
"const _httpSession = new Soup.SessionAsync();\n"
"Soup.Session.prototype.add_feature.call(_httpSession, new Soup.ProxyResolverDefault());\n"
"\n"
"function GeoNames(station) {\n"
"  this.station = station;\n"
"}\n"
"\n"
"GeoNames.prototype = {\n"
"  getWeather: function(callback) {\n"
"    var request = Soup.Message.new('GET', 'http://api.geonames.org/weatherIcaoJSON?ICAO=' + this.station + '&amp;username=demo');\n"
"    _httpSession.queue_message(request, function(_httpSession, message) {\n"
"      if (message.status_code !== 200) {\n"
"        callback(message.status_code, null);\n"
"        return;\n"
"      }\n"
"      var weatherJSON = request.response_body.data;\n"
"      var weather = JSON.parse(weatherJSON);\n"
"      callback(null, weather);\n"
"      });\n"
"    },\n"
"\n"
"  getIcon: function(weather){\n"
"    switch (weather.weatherObservation.weatherCondition){\n"
"    case \"drizzle\":\n"
"    case \"light showers rain\":\n"
"    case \"light rain\":\n"
"      return \"weather-showers-scattered.svg\";\n"
"    case \"rain\":\n"
"      return \"weather-showers.svg\";\n"
"    case \"light snow\":\n"
"    case \"snow grains\":\n"
"      return \"weather-snow.svg\";\n"
"    }\n"
"    switch (weather.weatherObservation.clouds){\n"
"      case \"few clouds\":\n"
"      case \"scattered clouds\":\n"
"        return \"weather-few-clouds.svg\";\n"
"      case \"clear sky\":\n"
"        return \"weather-clear.svg\"\n"
"      case \"broken clouds\":\n"
"      case \"overcast\":\n"
"        return \"weather-overcast.svg\";\n"
"    }\n"
"    return \"weather-fog.svg\";\n"
"    }\n"
"}\n"
"}  "

#. (itstool) path: info/title
#: C/window.c.page:8
msgctxt "text"
msgid "Window (C)"
msgstr "Παράθυρο (C)"

#. (itstool) path: info/desc
#: C/window.c.page:18 C/window.py.page:25 C/window.vala.page:18
msgid "A toplevel window which can contain other widgets"
msgstr ""
"Ένα παράθυρο ανώτατου επιπέδου που μπορεί να περιέχει άλλα γραφικά στοιχεία"

#. (itstool) path: page/title
#: C/window.c.page:21 C/window.js.page:21 C/window.py.page:28
#: C/window.vala.page:21
msgid "Window"
msgstr "Παράθυρο"

#. (itstool) path: page/p
#: C/window.c.page:24
msgid ""
"A minimal GtkApplication. Use <link xref=\"GtkApplicationWindow.c"
"\">Application Window</link> if you need GMenu support."
msgstr ""
"Μια απλή GtkApplication. Χρησιμοποιήστε το <link xref=\"GtkApplicationWindow."
"c\">παράθυρο εφαρμογής</link> εάν χρειαζόσαστε υποστήριξη GMenu."

#. (itstool) path: page/code
#: C/window.c.page:28
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  window = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n"
"\n"
"  gtk_window_set_application (GTK_WINDOW (window), GTK_APPLICATION (app));\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Hello GNOME\");\n"
"\n"
"  gtk_widget_show_all (GTK_WIDGET (window));\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\",G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  window = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n"
"\n"
"  gtk_window_set_application (GTK_WINDOW (window), GTK_APPLICATION (app));\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Hello GNOME\");\n"
"\n"
"  gtk_widget_show_all (GTK_WIDGET (window));\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\",G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"

#. (itstool) path: info/title
#: C/window.js.page:8
msgctxt "text"
msgid "Window (JavaScript)"
msgstr "Παράθυρο (JavaScript)"

#. (itstool) path: info/desc
#: C/window.js.page:18
msgid "A basic window which can contain other widgets"
msgstr "Ένα βασικό παράθυρο που μπορεί να περιέχει άλλα γραφικά στοιχεία"

#. (itstool) path: td/p
#: C/window.js.page:26
msgid "A minimal GtkApplication"
msgstr "Μια πρώτη GtkApplication"

#. (itstool) path: td/p
#: C/window.js.page:29
msgid ""
"Use <link xref=\"GtkApplicationWindow.js\">ApplicationWindow</link> if you "
"need GMenu support."
msgstr ""
"Χρησιμοποιήστε <link xref=\"GtkApplicationWindow.js\">ApplicationWindow</"
"link> εάν χρειαζόσαστε υποστήριξη GMenu."

#. (itstool) path: page/code
#: C/window.js.page:33
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class ({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.myapp',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function () {\n"
"\n"
"        MyWindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL});\n"
"        MyWindow.title = \"Welcome to GNOME\";\n"
"\n"
"       /* Here are a few ways we can customize our window.\n"
"       Try uncommenting them or changing their values! */\n"
"        //MyWindow.set_default_size (400,200);\n"
"        //MyWindow.set_has_resize_grip (false);\n"
"        //MyWindow.set_opacity (0.5);\n"
"        //MyWindow.maximize ();\n"
"\n"
"        //show the window and all child widgets (none in this case)\n"
"        MyWindow.show_all();\n"
"        this.application.add_window(MyWindow);\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class ({\n"
"    Name: 'Application',\n"
"\n"
"    //Δημιουργία της εφαρμογής\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.myapp',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    },\n"
"\n"
"    //Η συνάρτηση επανάκλησης για το σήμα 'activate'\n"
"    _onActivate: function () {\n"
"\n"
"        MyWindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL});\n"
"        MyWindow.title = \"Welcome to GNOME\";\n"
"\n"
"       /* Ιδού μερικοί τρόποι που μπορούμε να προσαρμόσουμε το παράθυρό μας.\n"
"       Try uncommenting them or changing their values! */\n"
"        //MyWindow.set_default_size (400,200);\n"
"        //MyWindow.set_has_resize_grip (false);\n"
"        //MyWindow.set_opacity (0.5);\n"
"        //MyWindow.maximize ();\n"
"\n"
"        //Εμφάνιση του παραθύρου και όλων των θυγατρικών γραφικών στοιχείων (κανένα σε αυτήν την περίπτωση)\n"
"        MyWindow.show_all();\n"
"        this.application.add_window(MyWindow);\n"
"    }\n"
"});\n"
"\n"
"//Εκτέλεση της εφαρμογής\n"
"let app = new Application ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: page/p
#: C/window.js.page:35
msgid "In this example we used the following:"
msgstr "Σε αυτό το παράδειγμα χρησιμοποιήσαμε το παρακάτω:"

#. (itstool) path: item/p
#: C/window.js.page:40
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Window.html"
"\">Gtk.Window</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Window.html"
"\">Gtk.Window</link>"

#. (itstool) path: info/title
#: C/window.py.page:8
msgctxt "text"
msgid "Window (Python)"
msgstr "Παράθυρο (Python)"

#. (itstool) path: td/p
#: C/window.py.page:34
msgid "A minimal GTK+ Application: a window with a title."
msgstr "Μια ελάχιστη εφαρμογή GTK+: ένα παράθυρο με τίτλο."

#. (itstool) path: td/p
#: C/window.py.page:37
msgid ""
"Use <link xref=\"GtkApplicationWindow.py\"/> if you need <link xref=\"gmenu."
"py\"/> support."
msgstr ""
"Χρησιμοποιήστε <link xref=\"GtkApplicationWindow.py\"/>, εάν χρειάζεστε "
"υποστήριξη <link xref=\"gmenu.py\"/>."

#. (itstool) path: section/code
#: C/window.py.page:47
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def do_activate(self):\n"
"        # create a Gtk Window belonging to the application itself\n"
"        window = Gtk.Window(application=self)\n"
"        # set the title\n"
"        window.set_title(\"Welcome to GNOME\")\n"
"        # show the window\n"
"        window.show_all()\n"
"\n"
"# create and run the application, exit with the value returned by\n"
"# running the program\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def do_activate(self):\n"
"        # δημιουργία ενός παραθύρου Gtk το οποίο ανήκει στην εφαρμογή\n"
"        window = Gtk.Window(application=self)\n"
"        # ορισμός τίτλου\n"
"        window.set_title(\"Welcome to GNOME\")\n"
"        # εμφάνιση του παραθύρου\n"
"        window.show_all()\n"
"\n"
"# δημιουργία και εκτέλεση της εφαρμογής, έξοδος με την επιστρεφόμενη τιμή\n"
"# από το εκτελούμενο πρόγραμμα\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/window.py.page:52
msgid "Useful methods for a Window widget"
msgstr "Χρήσιμες μέθοδοι για ένα γραφικό στοιχείο παραθύρου"

#. (itstool) path: info/title
#: C/window.vala.page:8
msgctxt "text"
msgid "Window (Vala)"
msgstr "Παράθυρο (Vala)"

#. (itstool) path: td/p
#: C/window.vala.page:26
msgid "The simplest Gtk.Application"
msgstr "Μια απλούστατη εφαρμογή σε Gtk"

#. (itstool) path: td/p
#: C/window.vala.page:29
msgid ""
"Use <link xref=\"GtkApplicationWindow.vala\">Application Window</link> if "
"you need GMenu support."
msgstr ""
"Χρησιμοποιήστε <link xref=\"GtkApplicationWindow.vala\">παράθυρο εφαρμογής</"
"link> εάν χρειαζόσαστε υποστήριξη GMenu."

#. (itstool) path: page/code
#: C/window.vala.page:33
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class Application : Gtk.Application {\n"
"\n"
"\t/* Constructor */\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.window\");\n"
"\t}\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application,\n"
"\t * which is inherited by Gtk.Application. */\n"
"\tpublic override void activate () {\n"
"\n"
"\t\tvar window = new Gtk.Window ();\n"
"\t\twindow.title = \"Welcome to GNOME\";\n"
"\n"
"\t\t/* The following 3 lines are included here to introduce\n"
"\t\t * you to ways you can adjust the toplevel window to suit\n"
"\t\t * your needs.  Uncomment them to see what they do.\n"
"\t\t */\n"
"\n"
"\t\t//window.border_width = 10;\n"
"\t\t//window.set_default_size (350, 70);\n"
"\t\t//window.window_position = Gtk.WindowPosition.CENTER;\n"
"\n"
"\t\t/* Add the window to this application. */\n"
"\t\tthis.add_window (window);\n"
"\n"
"\t\t/* Show the window. */\n"
"\t\twindow.show ();\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates the application and runs it.*/\n"
"int main (string[] args) {\n"
"\tvar app = new Application ();\n"
"\treturn app.run (args);\n"
"}\n"
msgstr ""
"/* Αυτή είναι η εφαρμογή. */\n"
"public class Application : Gtk.Application {\n"
"\n"
"\t/* Ο κατασκευαστής */\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.window\");\n"
"\t}\n"
"\n"
"\t/* Αντικατάσταση του σήματος 'activate' της GLib.Application,\n"
"\t * που κληρονομήθηκε από την Gtk.Application. */\n"
"\tpublic override void activate () {\n"
"\n"
"\t\tvar window = new Gtk.Window ();\n"
"\t\twindow.title = \"Welcome to GNOME\";\n"
"\n"
"\t\t/* Οι ακόλουθες 3 γραμμές περιλαμβάνονται εδώ για να σας εισάγουν\n"
"\t\t * τρόπους που μπορείτε να ρυθμίσετε τα ανώτα το επίπεδο παραθύρου για να ταιριάζει\n"
"\t\t * τις ανάγκες σας.  Αποσχολιάστε τες για να δείτε τι κάνουν.\n"
"\t\t */\n"
"\n"
"\t\t//window.border_width = 10;\n"
"\t\t//window.set_default_size (350, 70);\n"
"\t\t//window.window_position = Gtk.WindowPosition.CENTER;\n"
"\n"
"\t\t/* Προσθήκη του παραθύρου σε αυτήν την εφαρμογή. */\n"
"\t\tthis.add_window (window);\n"
"\n"
"\t\t/* Εμφάνιση του παραθύρου */\n"
"\t\twindow.show ();\n"
"\t}\n"
"}\n"
"\n"
"/* Η κύρια συνάρτηση δημιουργεί την εφαρμογή και την εκτελεί.*/\n"
"int main (string[] args) {\n"
"\tvar app = new Application ();\n"
"\treturn app.run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/window.vala.page:39
msgid ""
"The widget <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window.html"
"\">Gtk.Window</link>"
msgstr ""
"Το γραφικό στοιχείο <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window."
"html\">Gtk.Window</link>"

#. (itstool) path: item/p
#: C/window.vala.page:41
msgid ""
"The enum <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.WindowPosition.html"
"\">Gtk.WindowPosition</link>"
msgstr ""
"Η αρίθμηση <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.WindowPosition."
"html\">Gtk.WindowPosition</link>"

#. (itstool) path: item/p
#: C/window.vala.page:43
msgid ""
"The method <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window."
"set_default_size.html\">set_default_size</link>"
msgstr ""
"Η μέθοδος <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window."
"set_default_size.html\">set_default_size</link>"

#. (itstool) path: item/p
#: C/window.vala.page:45
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Container.border_width.html"
"\">border_width</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Container.border_width.html"
"\">border_width</link>"

#. (itstool) path: item/p
#: C/window.vala.page:47
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window.window_position.html"
"\">window_position</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window.window_position.html"
"\">window_position</link>"

#~ msgid "Creative Commons Share Alike 3.0"
#~ msgstr "Creative Commons Share Alike 3.0"

#~ msgid "Help make <app>GNOME Developer Tutorials</app> better"
#~ msgstr ""
#~ "Βοηθήστε να γίνουν καλύτερα τα <app>μαθήματα ανάπτυξης του GNOME</app>"

#~ msgid "Report a bug or suggest an improvement"
#~ msgstr "Αναφορά σφάλματος ή πρόταση βελτίωσης"

#~ msgid ""
#~ "<app>GNOME Developer Tutorials</app> are maintained by a volunteer "
#~ "community. You are welcome to participate. If you notice a problem you "
#~ "can file a <em>bug report</em>. To file a bug, go to <link href=\"https://"
#~ "bugzilla.gnome.org/\"/>."
#~ msgstr ""
#~ "Τα <app>μαθήματα ανάπτυξης του GNOME</app> συντηρούνται από μια "
#~ "εθελοντική κοινότητα. Είσαστε καλοδεχούμενοι να συμμετάσχετε. Εάν "
#~ "παρατηρήσετε ένα πρόβλημα μπορείτε να στείλετε μια <em>αναφορά σφάλματος</"
#~ "em>. Για υποβολή σφάλματος πηγαίνετε στο <link href=\"https://bugzilla."
#~ "gnome.org/\"/>."

#~ msgid ""
#~ "This is a bug tracking system where users and developers can file details "
#~ "about bugs, crashes and request enhancements."
#~ msgstr ""
#~ "Αυτό είναι ένα σύστημα ανίχνευσης σφαλμάτων όπου χρήστες και "
#~ "προγραμματιστές μπορούν να αρχειοθετούν λεπτομέρειες για σφάλματα, "
#~ "καταρρεύσεις και αιτήματα βελτιώσεων."

#~ msgid ""
#~ "To participate you need an account which will give you the ability to "
#~ "gain access, file bugs, and make comments. Also, you need to register so "
#~ "you can receive updates by e-mail about the status of your bug. If you "
#~ "don't already have an account, just click on the <gui>New Account</gui> "
#~ "link to create one."
#~ msgstr ""
#~ "Για να συμμετάσχετε χρειαζόσαστε έναν λογαριασμό που θα σας δώσει τη "
#~ "δυνατότητα να αποκτήσετε πρόσβαση σε αρχεία σφαλμάτων και να σχολιάσετε. "
#~ "Επίσης, χρειάζεται να καταχωρηθείτε έτσι ώστε να μπορείτε να δεχόσαστε "
#~ "ενημερώσεις ηλεκτρονικά για την κατάσταση του σφάλματός σας. Εάν δεν "
#~ "έχετε ήδη ένα λογαριασμό, πατήστε απλά στο σύνδεσμο <gui>νέος "
#~ "λογαριασμός</gui> για να δημιουργήσετε έναν."

#~ msgid ""
#~ "Once you have an account, log in, click on <guiseq><gui>File a Bug</"
#~ "gui><gui>All</gui><gui>gnome-devel-docs</gui></guiseq>. Before reporting "
#~ "a bug, please read the <link href=\"https://bugzilla.gnome.org/page.cgi?"
#~ "id=bug-writing.html\">bug writing guidelines</link>, and please <link "
#~ "href=\"https://bugzilla.gnome.org/browse.cgi?product=gnome-games"
#~ "\">browse</link> for the bug to see if it already exists."
#~ msgstr ""
#~ "Μόλις αποκτήσετε έναν λογαριασμό, κλικ στο <guiseq><gui>αποστολή "
#~ "σφάλματος</gui><gui>όλα</gui><gui>gnome-devel-docs</gui></guiseq>. Πριν "
#~ "την αναφορά σφάλματος, παρακαλώ διαβάστε το <link href=\"https://bugzilla."
#~ "gnome.org/page.cgi?id=bug-writing.html\">γραμμές οδηγιών για συγγραφή "
#~ "σφάλματος</link> και παρακαλώ <link href=\"https://bugzilla.gnome.org/"
#~ "browse.cgi?product=gnome-games\">περιηγηθείτε</link> για να δείτε αν ήδη "
#~ "υπάρχει."

#~ msgid ""
#~ "To file your bug, choose the component <gui>platform-demos</gui> in the "
#~ "<gui>Component</gui> menu."
#~ msgstr ""
#~ "Για αποστολή του σφάλματός σας, επιλέξτε το στοιχείο <gui>platform-demos</"
#~ "gui> στο μενού <gui>στοιχεία</gui>."

#~ msgid ""
#~ "If you are requesting a new feature, choose <gui>enhancement</gui> in the "
#~ "<gui>Severity</gui> menu. Fill in the Summary and Description sections "
#~ "and click <gui>Commit</gui>."
#~ msgstr ""
#~ "Εάν ζητάτε ένα νέο χαρακτηριστικό, επιλέξτε <gui>βελτίωση</gui> στο μενού "
#~ "<gui>σοβαρότητα</gui>. Συμπληρώστε τις ενότητες περίληψη και περιγραφή "
#~ "και κλικ <gui>υποβολή</gui>."

#~ msgid ""
#~ "Your report will be given an ID number, and its status will be updated as "
#~ "it is being dealt with. Thanks for helping make <app>GNOME Developer "
#~ "Tutorials</app> better!"
#~ msgstr ""
#~ "Στην αναφορά σας θα δοθεί ένας αριθμός ID και η κατάστασή της θα "
#~ "ενημερωθεί όταν θα επεξεργαστεί. Ευχαριστούμε για τη βοήθειά σας να "
#~ "κάνουμε τα <app>μαθήματα ανάπτυξης του GNOME</app> καλύτερα!"

#~ msgid "Help develop"
#~ msgstr "Βοήθεια στην ανάπτυξη"

#~ msgid ""
#~ "The <app>GNOME Developer Tutorials</app> are developed and maintained by "
#~ "a volunteer community. You are welcome to participate."
#~ msgstr ""
#~ "Τα <app>μαθήματα ανάπτυξης του GNOME</app> αναπτύσσονται και συντηρούνται "
#~ "από μια εθελοντική κοινότητα. Είσαστε καλοδεχούμενοι να συμμετάσχετε."

#~ msgid ""
#~ "If you would like to <link href=\"https://live.gnome.org/"
#~ "DocumentationProject/Tasks/DeveloperDocs\">help develop <app>GNOME "
#~ "Developer Tutorials</app></link>, you can get in touch with the "
#~ "developers using <link href=\"https://cbe005.chat.mibbit.com/?url=irc%3A"
#~ "%2F%2Firc.gnome.org%2Fdocs\">irc</link>, or via our <link href=\"http://"
#~ "mail.gnome.org/mailman/listinfo/gnome-doc-devel-list\">mailing list</"
#~ "link>."
#~ msgstr ""
#~ "Εάν θέλετε να <link href=\"https://live.gnome.org/DocumentationProject/"
#~ "Tasks/DeveloperDocs\">βοηθήσετε στην ανάπτυξη των <app>μαθημάτων "
#~ "ανάπτυξης του GNOME </app></link>, μπορείτε να έρθετε σε επαφή με τους "
#~ "προγραμματιστές χρησιμοποιώντας το <link href=\"https://cbe005.chat."
#~ "mibbit.com/?url=irc%3A%2F%2Firc.gnome.org%2Fdocs\">irc</link>, ή τη <link "
#~ "href=\"http://mail.gnome.org/mailman/listinfo/gnome-doc-devel-list"
#~ "\">λίστα ταχυδρομείου</link> μας."

#~ msgid "How to set up your development environment"
#~ msgstr "Πώς να εγκαταστήσετε το περιβάλλον ανάπτυξης"

#~ msgid "Tutorials, code samples, platform demos and more"
#~ msgstr "Μαθήματα, δείγματα κώδικα, παραδείγματα πλατφόρμας και άλλα"

#~ msgid "Get Involved"
#~ msgstr "Συμμετοχή"

#~ msgid "Michael Hill"
#~ msgstr "Michael Hill"

#~ msgid "Help translate"
#~ msgstr "Βοήθεια στη μετάφραση"

#~ msgid ""
#~ "The <app>Tutorial Demos</app> are being translated by a world-wide "
#~ "volunteer community. You are welcome to participate."
#~ msgstr ""
#~ "Οι <app>παρουσιάσεις μαθημάτων</app> μεταφράζονται από μια παγκόσμια "
#~ "κοινότητα εθελοντών. Είστε καλοδεχούμενοι να συμμετάσχετε."

#~ msgid ""
#~ "There are <link href=\"http://l10n.gnome.org/module/gnome-devel-docs/"
#~ "\">many languages</link> for which translations are still needed."
#~ msgstr ""
#~ "Υπάρχουν <link href=\"http://l10n.gnome.org/module/gnome-devel-docs/"
#~ "\">πολλές γλώσσες</link> για τις οποίες απαιτούνται μεταφράσεις."

#~ msgid ""
#~ "To start translating you will need to <link href=\"http://l10n.gnome.org"
#~ "\">create an account</link> and join the <link href=\"http://l10n.gnome."
#~ "org/teams/\">translation team</link> for your language. This will give "
#~ "you the ability to upload new translations."
#~ msgstr ""
#~ "Για να ξεκινήσετε να μεταφράζετε πρέπει να <link href=\"http://l10n.gnome."
#~ "org\">δημιουργήσετε ένα λογαριασμό</link> και να συμμετάσχετε στην <link "
#~ "href=\"http://l10n.gnome.org/teams/\">ομάδα μετάφρασης</link> της γλώσσας "
#~ "σας. Αυτό θα σας δώσει την δυνατότητα να ανεβάσετε νέες μεταφράσεις."

#~ msgid ""
#~ "You can chat with GNOME translators using <link href=\"https://cbe003."
#~ "chat.mibbit.com/?url=irc%3A%2F%2Firc.gnome.org%2Fi18n\">irc</link>. "
#~ "People on the channel are located worldwide, so you may not get an "
#~ "immediate response as a result of timezone differences."
#~ msgstr ""
#~ "Μπορείτε να συζητήσετε με μεταφραστές του GNOME χρησιμοποιώντας το <link "
#~ "href=\"https://cbe003.chat.mibbit.com/?url=irc%3A%2F%2Firc.gnome.org"
#~ "%2Fi18n\">irc</link>. Άνθρωποι στο κανάλι βρίσκονται παντού, έτσι "
#~ "μπορείτε να πάρετε μια άμεση απάντηση ως αποτέλεσμα των διαφορών ώρας."

#~ msgid ""
#~ "Alternatively, you can contact the Internationalization Team using their "
#~ "<link href=\"http://mail.gnome.org/mailman/listinfo/gnome-i18n\">mailing "
#~ "list</link>."
#~ msgstr ""
#~ "Εναλλακτικά, μπορείτε να επικοινωνήσετε με την ομάδα διεθνοποίησης "
#~ "χρησιμοποιώντας τη <link href=\"http://mail.gnome.org/mailman/listinfo/"
#~ "gnome-i18n\">λίστα αλληλογραφίας</link> τους."

#~ msgctxt "_"
#~ msgid ""
#~ "external ref='media/ubuntu.png' md5='40845e4a40b335b1958da1403f01c13f'"
#~ msgstr ""
#~ "external ref='media/ubuntu.png' md5='40845e4a40b335b1958da1403f01c13f'"

#~ msgctxt "_"
#~ msgid ""
#~ "external ref='media/fedora.png' md5='19add55f4349fd9e90f3a50b344ba626'"
#~ msgstr ""
#~ "external ref='media/fedora.png' md5='19add55f4349fd9e90f3a50b344ba626'"

#~ msgctxt "_"
#~ msgid ""
#~ "external ref='media/opensuse.png' md5='a852a94199328e2f978c7f6a55bf8b54'"
#~ msgstr ""
#~ "external ref='media/opensuse.png' md5='a852a94199328e2f978c7f6a55bf8b54'"

#~ msgctxt "link"
#~ msgid "Install GNOME development tools"
#~ msgstr "Εγκατάσταση εργαλείων ανάπτυξης GNOME"

#~ msgid "Getting ready for GNOME development"
#~ msgstr "Ετοιμασία για ανάπτυξη GNOME"

#~ msgid "Install the required tools"
#~ msgstr "Εγκατάσταση των απαιτούμενων εργαλείων"

#~ msgid ""
#~ "Before you can start coding you will have to install the required tools "
#~ "for GNOME development on your computer. This shouldn't take you more than "
#~ "ten minutes."
#~ msgstr ""
#~ "Πριν να μπορέσετε να ξεκινήσετε την κωδικοποίηση θα πρέπει να "
#~ "εγκαταστήσετε τα απαιτούμενα εργαλεία για την ανάπτυξη του GNOME στον "
#~ "υπολογιστή σας. Αυτό δεν πρέπει να πάρει πάνω από δέκα λεπτά."

#~ msgid "Automatic installation"
#~ msgstr "Αυτόματη εγκατάσταση"

#~ msgid ""
#~ "On an up-to-date distribution you should be able to simply install the "
#~ "required packages by clicking on <link href=\"media/gnome-devtools.catalog"
#~ "\">Install now</link>."
#~ msgstr ""
#~ "Σε μια ενημερωμένη διανομή θα πρέπει να μπορείτε να εγκαταστήσετε απλά τα "
#~ "απαιτούμενα πακέτα με κλικ στο <link href=\"media/gnome-devtools.catalog"
#~ "\">εγκατάσταση τώρα</link>."

#~ msgid "Manual installation"
#~ msgstr "Χειροκίνητη εγκατάσταση"

#~ msgid ""
#~ "If you prefer manual installation you can find the instructions for the "
#~ "various distributions in the <link href=\"http://live.gnome.org/"
#~ "DeveloperTools/Installation\">GNOME wiki</link>. Click on the image to go "
#~ "directly to the installation page for your distribution:"
#~ msgstr ""
#~ "Αν προτιμάτε χειροκίνητη εγκατάσταση μπορείτε να βρείτε οδηγίες για τις "
#~ "ποικίλες διανομές στο <link href=\"http://live.gnome.org/DeveloperTools/"
#~ "Installation\">βίκι GNOME</link>. Πατήστε στην εικόνα για να πάτε άμεσα "
#~ "στη σελίδα εγκατάστασης για τη διανομή σας:"

#~ msgid ""
#~ "<link href=\"http://live.gnome.org/DeveloperTools/Installation/Ubuntu\"> "
#~ "<media type=\"image\" mime=\"image/png\" src=\"media/ubuntu.png\">Ubuntu</"
#~ "media> </link>"
#~ msgstr ""
#~ "<link href=\"http://live.gnome.org/DeveloperTools/Installation/Ubuntu\"> "
#~ "<media type=\"image\" mime=\"image/png\" src=\"media/ubuntu.png\">Ubuntu</"
#~ "media> </link>"

#~ msgid ""
#~ "<link href=\"http://live.gnome.org/DeveloperTools/Installation/Fedora\"> "
#~ "<media type=\"image\" mime=\"image/png\" src=\"media/fedora.png\">Fedora</"
#~ "media> </link>"
#~ msgstr ""
#~ "<link href=\"http://live.gnome.org/DeveloperTools/Installation/Fedora\"> "
#~ "<media type=\"image\" mime=\"image/png\" src=\"media/fedora.png\">Fedora</"
#~ "media> </link>"

#~ msgid ""
#~ "<link href=\"http://live.gnome.org/DeveloperTools/Installation/OpenSuSE"
#~ "\"> <media type=\"image\" mime=\"image/png\" src=\"media/opensuse.png"
#~ "\">OpenSuSE</media> </link>"
#~ msgstr ""
#~ "<link href=\"http://live.gnome.org/DeveloperTools/Installation/OpenSuSE"
#~ "\"> <media type=\"image\" mime=\"image/png\" src=\"media/opensuse.png"
#~ "\">OpenSuSE</media> </link>"

#~ msgid ""
#~ "<link href=\"http://live.gnome.org/DeveloperTools/Installation\">Others</"
#~ "link>"
#~ msgstr ""
#~ "<link href=\"http://live.gnome.org/DeveloperTools/Installation\">Άλλα</"
#~ "link>"

#~ msgid "Required versions"
#~ msgstr "Απαιτούμενες εκδόσεις"

#~ msgid ""
#~ "The guides assume that you have at least the following versions of the "
#~ "tools installed:"
#~ msgstr ""
#~ "Οι οδηγοί υποθέτουν ότι έχετε τουλάχιστον τις παρακάτω εκδόσεις των "
#~ "εργαλείων εγκατεστημένες:"

#~ msgid "Anjuta - 3.0"
#~ msgstr "Anjuta - 3.0"

#~ msgid "Devhelp - 3.0"
#~ msgstr "Devhelp - 3.0"

#~ msgid "Glade - 3.10"
#~ msgstr "Glade - 3.10"

#~ msgid ""
#~ "Of course, any newer version will also work. Now, we wish you a lot of "
#~ "fun with the <link xref=\"index\">Demos</link>."
#~ msgstr ""
#~ "Φυσικά, οποιαδήποτε νεώτερη έκδοση θα δουλέψει επίσης. Σας ευχόμαστε καλή "
#~ "διασκέδαση με τα <link xref=\"index\">παραδείγματα</link>."

#~ msgid ""
#~ "This program will not compile with the quit action connected until <link "
#~ "href=\"https://bugzilla.gnome.org/show_bug.cgi?id=674090\">Bug #674090</"
#~ "link> is fixed. Therefore, the problematic line has been commented out."
#~ msgstr ""
#~ "Αυτό το πρόγραμμα δεν θα μεταγλωττίσει με την ενέργεια εγκατάλειψης "
#~ "συνδεμένη μέχρι τη ρύθμιση του <link href=\"https://bugzilla.gnome.org/"
#~ "show_bug.cgi?id=674090\">Bug #674090</link>. Συνεπώς, η προβληματική "
#~ "γραμμή έχει αποσχολιασθεί."

#~ msgid ""
#~ "To set a stock icon as image, you can use <code>set_from_stock(stock_id, "
#~ "size)</code> where <code>stock_id</code> is a stock icon such as "
#~ "<code>Gtk.STOCK_ABOUT</code> (more can be found at <link href=\"http://"
#~ "developer.gnome.org/gtk3/unstable/gtk3-Stock-Items\">Stock Items</link>, "
#~ "with the caveat that they should be modified as above) and <code>size</"
#~ "code> is a stock icon size to be chosen from <code>Gtk.IconSize.INVALID, "
#~ "Gtk.IconSize.MENU, Gtk.IconSize.SMALL_TOOLBAR, Gtk.IconSize."
#~ "LARGE_TOOLBAR, Gtk.IconSize.BUTTON, Gtk.IconSize.DND, Gtk.IconSize."
#~ "DIALOG</code>."
#~ msgstr ""
#~ "Για να ορίσετε ένα εικονίδιο παρακαταθήκης ως εικόνα, μπορείτε να "
#~ "χρησιμοποιήσετε το <code>set_from_stock(stock_id, size)</code> όπου "
#~ "<code>stock_id</code> είναι ένα εικονίδιο παρακαταθήκης όπως <code>Gtk."
#~ "STOCK_ABOUT</code> (περισσότερα μπορείτε να βρείτε στο <link href="
#~ "\"http://developer.gnome.org/gtk3/unstable/gtk3-Stock-Items\">στοιχεία "
#~ "παρακαταθήκης</link>, με την επιφύλαξη ότι πρέπει να τροποποιηθούν όπως "
#~ "πιο πάνω) και <code>size</code> είναι μέγεθος εικονιδίου παρακαταθήκης "
#~ "για επιλογή από <code>Gtk.IconSize.INVALID, Gtk.IconSize.MENU, Gtk."
#~ "IconSize.SMALL_TOOLBAR, Gtk.IconSize.LARGE_TOOLBAR, Gtk.IconSize.BUTTON, "
#~ "Gtk.IconSize.DND, Gtk.IconSize.DIALOG</code>."

#~ msgid ""
#~ "You can also use <code>set_from_icon_name(icon_name, size)</code>, where "
#~ "<code>icon_name</code> is a stock icon name such as <code>\"gtk-about\"</"
#~ "code> (more can be found as above) and <code>size</code> is as above."
#~ msgstr ""
#~ "Μπορείτε επίσης να χρησιμοποιήσετε <code>set_from_icon_name(icon_name, "
#~ "size)</code>, όπου <code>icon_name</code> είναι όνομα εικονιδίου "
#~ "παρακαταθήκης όπως το <code>\"gtk-about\"</code> (περισσότερα μπορούν να "
#~ "βρεθούν όπως παραπάνω) και το <code>size</code> είναι όπως παραπάνω."

#~ msgid "which is equivalent to using:"
#~ msgstr "που είναι ισοδύναμο με:"

#~ msgctxt "_"
#~ msgid "external ref='media/03_jssignal_02b.png' md5='__failed__'"
#~ msgstr "external ref='media/03_jssignal_02b.png' md5='__failed__'"

#~ msgctxt "_"
#~ msgid ""
#~ "external ref='media/menubutton.png' md5='1feb7b836a522c3007079d4420621d9d'"
#~ msgstr ""
#~ "external ref='media/menubutton.png' md5='1feb7b836a522c3007079d4420621d9d'"

#~ msgid ""
#~ "For an explanation of signals and callback functions, see <link xref="
#~ "\"signals-callbacks.py\">this page</link>."
#~ msgstr ""
#~ "Για μια εξήγηση των σημάτων και συναρτήσεων επανάκλησης, δείτε <link xref="
#~ "\"signals-callbacks.py\">αυτήν τη σελίδα</link>."

#~ msgctxt "text"
#~ msgid "Beginner's Tutorials (C)"
#~ msgstr "Μαθήματα αρχαρίων (C)"

#~ msgid "0 Beginner's Tutorials"
#~ msgstr "0 μαθήματα αρχαρίων"

#~ msgid "0 Beginner's tutorials and samples"
#~ msgstr "0 Μαθήματα και παραδείγματα αρχαρίων"

#~ msgctxt "text"
#~ msgid "Beginner Tutorials (Vala)"
#~ msgstr "Μαθήματα αρχαρίων (Vala)"

#, fuzzy
#~ msgid ""
#~ "<code>button = Gtk.Button(label=\"Click me\")</code> could also be used "
#~ "to create a button and set the text directly. For a general discussion of "
#~ "this, see <link xref=\"properties.py\">here</link>."
#~ msgstr ""
#~ "Το <code>button = Gtk.Button(label=\"Click me\")</code> μπορεί επίσης να "
#~ "χρησιμοποιηθεί στη δημιουργία ενός κουμπιού τον ορισμό του κειμένου "
#~ "άμεσα. Για μια γενική συζήτηση του, δείτε <link xref=\"properties.py"
#~ "\">εδώ</link>."

#~ msgid ""
#~ "We could also create the CheckButton with <code>button = Gtk.CheckButton."
#~ "new_with_label(\"Show Title\")</code>."
#~ msgstr ""
#~ "Θα μπορούσαμε επίσης να δημιουργήσουμε το CheckButton με <code>button = "
#~ "Gtk.CheckButton.new_with_label(\"Show Title\")</code>."

#~ msgid ""
#~ "For a discussion on signals and callback functions, see <link xref="
#~ "\"signals-callbacks.py\">this page</link>."
#~ msgstr ""
#~ "Για μια συζήτηση των σημάτων και συναρτήσεων επανάκλησης, δείτε <link "
#~ "xref=\"signals-callbacks.py\">αυτήν τη σελίδα</link>."

#~ msgid "Platform demos in C++"
#~ msgstr "Παραδείγματα πλατφόρμας σε C++"

#~ msgid "<_:item-1/> <_:item-2/> <_:item-3/> <_:item-4/>."
#~ msgstr "<_:item-1/> <_:item-2/> <_:item-3/> <_:item-4/>."

#~ msgid "2 Guitar Tuner"
#~ msgstr "2 Συντονιστής κιθάρας"

#~ msgid "1 Image Viewer"
#~ msgstr "1 Προβολέας εικόνων"

#~ msgid ""
#~ "<code>label = Gtk.Label(label=\"Hello GNOME!\")</code> could also be used "
#~ "to create a label and set the text directly. For a general discussion of "
#~ "this, see <link xref=\"properties.py\">here</link>."
#~ msgstr ""
#~ "Το <code>label = Gtk.Label(\"Hello GNOME!\")</code> μπορεί επίσης να "
#~ "χρησιμοποιηθεί για τη δημιουργία μιας ετικέτας και τον ορισμό του "
#~ "κειμένου άμεσα. Για μια γενική συζήτηση σχετικά με αυτό, δείτε <link xref="
#~ "\"properties.py\">εδώ</link>."

#~ msgid ""
#~ "<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/"
#~ "treeview.html\">The Python Gtk+ 3 Tutorial - Tree and List Widgets</link>"
#~ msgstr ""
#~ "<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/"
#~ "treeview.html\">The Python Gtk+ 3 Tutorial - Tree and List Widgets</link>"

#~ msgid ""
#~ "<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/"
#~ "cellrenderers.html\">The Python Gtk+ 3 Tutorial - CellRenderers</link>"
#~ msgstr ""
#~ "<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/"
#~ "cellrenderers.html\">The Python Gtk+ 3 Tutorial - CellRenderers</link>"

#~ msgid ""
#~ "<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/"
#~ "combobox.html\">The Python Gtk+ 3 Tutorial - ComboBox</link>"
#~ msgstr ""
#~ "<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/"
#~ "combobox.html\">The Python Gtk+ 3 Tutorial - ComboBox</link>"

#~ msgid ""
#~ "\n"
#~ "int\n"
#~ "main(int argc, char *argv[])\n"
#~ "{\n"
#~ "    ClutterColor stage_color = { 16, 16, 16, 255 };\n"
#~ "    ClutterActor *stage = NULL;\n"
#~ "\n"
#~ "    clutter_init(&amp;argc, &amp;argv);\n"
#~ "\n"
#~ "    stage = clutter_stage_get_default();\n"
#~ "    clutter_actor_set_size(stage, STAGE_WIDTH, STAGE_HEIGHT);\n"
#~ "    clutter_stage_set_color(CLUTTER_STAGE (stage), &amp;stage_color);\n"
#~ "\n"
#~ "    load_image_path_names();\n"
#~ "\n"
#~ "    guint row = 0;\n"
#~ "    guint col = 0;\n"
#~ "    for(row=0; row &lt; ROW_COUNT; ++row)\n"
#~ "    {\n"
#~ "        for(col=0; col &lt; COL_COUNT; ++col)\n"
#~ "        {\n"
#~ "            GSList *img_path_node = g_slist_nth(img_path_list, (row * "
#~ "COL_COUNT) + col);\n"
#~ "            ClutterActor *actor = clutter_texture_new_from_file((gchar *)"
#~ "(img_path_node-&gt;data), NULL);\n"
#~ "            initialize_actor(actor, row, col);\n"
#~ "            clutter_container_add_actor(CLUTTER_CONTAINER(stage), "
#~ "actor);\n"
#~ "            actor_list = g_slist_prepend(actor_list, actor);\n"
#~ "        }\n"
#~ "    }\n"
#~ "\n"
#~ "    /* Show the stage. */\n"
#~ "    clutter_actor_show(stage);\n"
#~ "\n"
#~ "    /* Start the clutter main loop. */\n"
#~ "    clutter_main();\n"
#~ "\n"
#~ "    return 0;\n"
#~ "}"
#~ msgstr ""
#~ "\n"
#~ "int\n"
#~ "main(int argc, char *argv[])\n"
#~ "{\n"
#~ "    ClutterColor stage_color = { 16, 16, 16, 255 };\n"
#~ "    ClutterActor *stage = NULL;\n"
#~ "\n"
#~ "    clutter_init(&amp;argc, &amp;argv);\n"
#~ "\n"
#~ "    stage = clutter_stage_get_default();\n"
#~ "    clutter_actor_set_size(stage, STAGE_WIDTH, STAGE_HEIGHT);\n"
#~ "    clutter_stage_set_color(CLUTTER_STAGE (stage), &amp;stage_color);\n"
#~ "\n"
#~ "    load_image_path_names();\n"
#~ "\n"
#~ "    guint row = 0;\n"
#~ "    guint col = 0;\n"
#~ "    for(row=0; row &lt; ROW_COUNT; ++row)\n"
#~ "    {\n"
#~ "        for(col=0; col &lt; COL_COUNT; ++col)\n"
#~ "        {\n"
#~ "            GSList *img_path_node = g_slist_nth(img_path_list, (row * "
#~ "COL_COUNT) + col);\n"
#~ "            ClutterActor *actor = clutter_texture_new_from_file((gchar *)"
#~ "(img_path_node-&gt;data), NULL);\n"
#~ "            initialize_actor(actor, row, col);\n"
#~ "            clutter_container_add_actor(CLUTTER_CONTAINER(stage), "
#~ "actor);\n"
#~ "            actor_list = g_slist_prepend(actor_list, actor);\n"
#~ "        }\n"
#~ "    }\n"
#~ "\n"
#~ "    /* Show the stage. */\n"
#~ "    clutter_actor_show(stage);\n"
#~ "\n"
#~ "    /* Start the clutter main loop. */\n"
#~ "    clutter_main();\n"
#~ "\n"
#~ "    return 0;\n"
#~ "}"

#~ msgid ""
#~ "\n"
#~ "for(row=0; row &lt; ROW_COUNT; ++row)\n"
#~ "{\n"
#~ "    for(col=0; col &lt; COL_COUNT; ++col)\n"
#~ "    {\n"
#~ "        GSList *img_path_node = g_slist_nth(img_path_list, (row * "
#~ "COL_COUNT) + col);\n"
#~ "        ClutterActor *actor = clutter_texture_new_from_file((gchar *)"
#~ "(img_path_node-&gt;data), NULL);\n"
#~ "        initialize_actor(actor, row, col);\n"
#~ "        clutter_container_add_actor(CLUTTER_CONTAINER(stage), actor);\n"
#~ "        actor_list = g_slist_prepend(actor_list, actor);\n"
#~ "    }\n"
#~ "}\n"
#~ "\n"
#~ msgstr ""
#~ "\n"
#~ "for(row=0; row &lt; ROW_COUNT; ++row)\n"
#~ "{\n"
#~ "    for(col=0; col &lt; COL_COUNT; ++col)\n"
#~ "    {\n"
#~ "        GSList *img_path_node = g_slist_nth(img_path_list, (row * "
#~ "COL_COUNT) + col);\n"
#~ "        ClutterActor *actor = clutter_texture_new_from_file((gchar *)"
#~ "(img_path_node-&gt;data), NULL);\n"
#~ "        initialize_actor(actor, row, col);\n"
#~ "        clutter_container_add_actor(CLUTTER_CONTAINER(stage), actor);\n"
#~ "        actor_list = g_slist_prepend(actor_list, actor);\n"
#~ "    }\n"
#~ "}\n"
#~ "\n"

#~ msgid "Line 7: We'll look at this function in a later section."
#~ msgstr "Γραμμή 7: θα δούμε αυτή την συνάρτηση σε επόμενη ενότητα."

#~ msgid ""
#~ "Line 9: This adds our <code>ClutterActor</code> to a <code>GSList</code> "
#~ "so that we can later iterate over the <code>ClutterActor</code>s."
#~ msgstr ""
#~ "Γραμμή 9: Αυτό προσθέτει το <code>ClutterActor</code> σε ένα "
#~ "<code>GSList</code>, έτσι ώστε αργότερα να μπορούμε να επαναλάβουμε το "
#~ "<code>ClutterActor</code>."

#~ msgid ""
#~ "Interesting to note is that we want to prepend the <code>ClutterActor</"
#~ "code>s rather than append so that we avoid traversing the list upon each "
#~ "insertion. You will often see <code>g_slist_prepend</code> followed by "
#~ "<code>g_slist_reverse</code> because it faster than inserting many "
#~ "objects at the end of the list."
#~ msgstr ""
#~ "Σημειώστε ότι θέλουμε να προτάξουμε το <code>ClutterActor</code> παρά να "
#~ "το προσαρτήσουμε για αποφυγή διάσχισης της λίστας με κάθε εισαγωγή. Θα "
#~ "δείτε συχνά το <code>g_slist_prepend</code> ακολουθούμενο από "
#~ "<code>g_slist_reverse</code> επειδή είναι πιο γρήγορο παρά η εισαγωγή "
#~ "πολλών αντικειμένων στο τέλος της λίστας."

#~ msgid ""
#~ "\n"
#~ "static gboolean\n"
#~ "actor_clicked_cb(ClutterActor *actor,\n"
#~ "                 ClutterEvent *event,\n"
#~ "                 gpointer      user_data)\n"
#~ "{\n"
#~ "    /* Flag to keep track of our state. */\n"
#~ "    static gboolean is_focused = FALSE;\n"
#~ "\n"
#~ "    g_slist_foreach(actor_list, foreach_set_focus_state, &amp;"
#~ "is_focused);\n"
#~ "\n"
#~ "    if(is_focused)\n"
#~ "    {\n"
#~ "        clutter_actor_animate(actor, CLUTTER_LINEAR, "
#~ "ANIMATION_DURATION_MS,\n"
#~ "                              \"x\",      origin.x,\n"
#~ "                              \"y\",      origin.y,\n"
#~ "                              \"depth\",  UNFOCUS_DEPTH,\n"
#~ "                              \"width\",  (float) THUMBNAIL_SIZE,\n"
#~ "                              \"height\", (float) THUMBNAIL_SIZE,\n"
#~ "                              NULL);\n"
#~ "    }\n"
#~ "    else\n"
#~ "    {\n"
#~ "        /*Save the current location before animating. */\n"
#~ "        clutter_actor_get_position(actor, &amp;origin.x, &amp;origin.y);\n"
#~ "        clutter_actor_set_reactive(actor, TRUE);\n"
#~ "        clutter_actor_animate(actor, CLUTTER_LINEAR, "
#~ "ANIMATION_DURATION_MS,\n"
#~ "                              \"x\",      (STAGE_WIDTH - STAGE_HEIGHT) / "
#~ "2.0,\n"
#~ "                              \"y\",      0.0,\n"
#~ "                              \"depth\",  FOCUS_DEPTH,\n"
#~ "                              \"width\",  (float) STAGE_HEIGHT,\n"
#~ "                              \"height\", (float) STAGE_HEIGHT,\n"
#~ "                              NULL);\n"
#~ "    }\n"
#~ "\n"
#~ "    /* Toggle our flag. */\n"
#~ "    is_focused = !is_focused;\n"
#~ "\n"
#~ "    return TRUE;\n"
#~ "}"
#~ msgstr ""
#~ "\n"
#~ "static gboolean\n"
#~ "actor_clicked_cb(ClutterActor *actor,\n"
#~ "                 ClutterEvent *event,\n"
#~ "                 gpointer      user_data)\n"
#~ "{\n"
#~ "    /* Flag to keep track of our state. */\n"
#~ "    static gboolean is_focused = FALSE;\n"
#~ "\n"
#~ "    g_slist_foreach(actor_list, foreach_set_focus_state, &amp;"
#~ "is_focused);\n"
#~ "\n"
#~ "    if(is_focused)\n"
#~ "    {\n"
#~ "        clutter_actor_animate(actor, CLUTTER_LINEAR, "
#~ "ANIMATION_DURATION_MS,\n"
#~ "                              \"x\",      origin.x,\n"
#~ "                              \"y\",      origin.y,\n"
#~ "                              \"depth\",  UNFOCUS_DEPTH,\n"
#~ "                              \"width\",  (float) THUMBNAIL_SIZE,\n"
#~ "                              \"height\", (float) THUMBNAIL_SIZE,\n"
#~ "                              NULL);\n"
#~ "    }\n"
#~ "    else\n"
#~ "    {\n"
#~ "        /*Save the current location before animating. */\n"
#~ "        clutter_actor_get_position(actor, &amp;origin.x, &amp;origin.y);\n"
#~ "        clutter_actor_set_reactive(actor, TRUE);\n"
#~ "        clutter_actor_animate(actor, CLUTTER_LINEAR, "
#~ "ANIMATION_DURATION_MS,\n"
#~ "                              \"x\",      (STAGE_WIDTH - STAGE_HEIGHT) / "
#~ "2.0,\n"
#~ "                              \"y\",      0.0,\n"
#~ "                              \"depth\",  FOCUS_DEPTH,\n"
#~ "                              \"width\",  (float) STAGE_HEIGHT,\n"
#~ "                              \"height\", (float) STAGE_HEIGHT,\n"
#~ "                              NULL);\n"
#~ "    }\n"
#~ "\n"
#~ "    /* Toggle our flag. */\n"
#~ "    is_focused = !is_focused;\n"
#~ "\n"
#~ "    return TRUE;\n"
#~ "}"

#~ msgid ""
#~ "Line 9: This line of code runs a custom function, "
#~ "<code>foreach_set_focus_state</code>, for each element in our "
#~ "<code>actor_list</code>, passing it the address to the <code>is_focused</"
#~ "code> flag. We'll see the definition of the "
#~ "<code>foreach_set_focus_state</code> function in the next section."
#~ msgstr ""
#~ "Γραμμή 9: Αυτή η γραμμή κώδικα τρέχει μια προσαρμοσμένη συνάρτηση, "
#~ "<code>foreach_set_focus_state</code>, για κάθε στοιχείο στη "
#~ "<code>actor_list</code> μας, περνώντας τη διεύθυνση στη σημαία "
#~ "<code>is_focused</code>. Θα δούμε τον ορισμό της συνάρτησης "
#~ "<code>foreach_set_focus_state</code> στην επόμενη ενότητα."

#~ msgid "The address of the <code>ClutterActor</code> to animate"
#~ msgstr "Η διεύθυνση του <code>ClutterActor</code> για κίνηση"

#~ msgid ""
#~ "The animation mode to use. Here we use <code>CLUTTER_LINEAR</code> so "
#~ "that we have a constant speed for animation."
#~ msgstr ""
#~ "Η κατάσταση κίνησης για χρήση. Εδώ χρησιμοποιούμε <code>CLUTTER_LINEAR</"
#~ "code> έτσι ώστε να έχουμε μια σταθερή ταχύτητα για κίνηση."

#~ msgid ""
#~ "The duration of the animation in milliseconds. I've chosen 500 ms for "
#~ "this example."
#~ msgstr ""
#~ "Η διάρκεια της κίνησης σε ms. Επέλεξα 500 ms για αυτό το παράδειγμα."

#~ msgid ""
#~ "The remaining arguments are property/value pairs. Here we want to set the "
#~ "<code>x</code> value to the starting <code>x</code> value this "
#~ "<code>ClutterActor</code> was at before being brought into focus."
#~ msgstr ""
#~ "Τα υπολειπόμενα ορίσματα είναι ζεύγη ιδιότητας/τιμής. Εδώ θέλουμε να "
#~ "ορίσουμε την τιμή <code>x</code> στην αρχική τιμή <code>x</code>, αυτός ο "
#~ "<code>ClutterActor</code> ήταν πριν μεταφερθεί σε εστίαση."

#~ msgid ""
#~ "The last argument must always be <code>NULL</code> to indicate that there "
#~ "are no more properties to be set."
#~ msgstr ""
#~ "Το τελευταίο όρισμα πρέπει πάντοτε να είναι <code>NULL</code> για να "
#~ "δείξει ότι δεν υπάρχουν περισσότερες ιδιότητες να οριστούν."

#~ msgid ""
#~ "The <code>depth</code> property needs a little more explaining. We need "
#~ "to raise the focused image so that it doesn't slide behind other "
#~ "<code>ClutterActor</code>s. In this section we are returning it to the "
#~ "same depth as the others on the wall."
#~ msgstr ""
#~ "Η ιδιότητα <code>depth</code> χρειάζεται περισσότερη εξήγηση. "
#~ "Χρειαζόμαστε να ανυψώσουμε την εστιασμένη εικόνα, έτσι ώστε να μην "
#~ "ολισθήσει πίσω από άλλο <code>ClutterActor</code>. Σε αυτή την ενότητα "
#~ "επιστρέφουμε στο ίδιο βάθος όπως οι άλλες στον τοίχο."

#~ msgid ""
#~ "Depth also determines which <code>ClutterActor</code>s receive events. A "
#~ "<code>ClutterActor</code> with a higher depth value receives the click "
#~ "events and can choose whether the event gets sent to <code>ClutterActor</"
#~ "code>s under it. We'll see how that works in a few steps."
#~ msgstr ""
#~ "Το βάθος επίσης καθορίζει ποιος <code>ClutterActor</code> δέχεται "
#~ "συμβάντα. Ένας <code>ClutterActor</code> με υψηλότερη τιμή βάθους δέχεται "
#~ "τα συμβάντα κλικ και μπορεί να επιλέξει εάν το συμβάν στέλνεται στο "
#~ "<code>ClutterActor</code> κάτω από αυτό. Θα δούμε πώς δουλεύει αυτό σε "
#~ "λίγα βήματα."

#~ msgid ""
#~ "Lines 27‒33: This is similar to the above block of code. Notice that we "
#~ "are setting the the depth to raise it above the other images."
#~ msgstr ""
#~ "Γραμμές 27-33: Αυτό είναι όμοιο με την παραπάνω ομάδα κώδικα. Σημειώστε "
#~ "ότι ορίζουμε το βάθος ανύψωσης του πάνω από τις άλλες εικόνες."

#~ msgid ""
#~ "The following is the convenience function passed to "
#~ "<code>g_slist_foreach</code>."
#~ msgstr ""
#~ "Το παρακάτω είναι μια συνάρτηση διευκόλυνσης που πέρασε σε "
#~ "<code>g_slist_foreach</code>."

#~ msgid ""
#~ "\n"
#~ "static void\n"
#~ "foreach_set_focus_state(gpointer data, gpointer user_data)\n"
#~ "{\n"
#~ "    ClutterActor *actor = CLUTTER_ACTOR(data);\n"
#~ "    gboolean is_reactive = *((gboolean*)user_data);\n"
#~ "\n"
#~ "    clutter_actor_set_reactive(actor, is_reactive);\n"
#~ "}"
#~ msgstr ""
#~ "\n"
#~ "static void\n"
#~ "foreach_set_focus_state(gpointer data, gpointer user_data)\n"
#~ "{\n"
#~ "    ClutterActor *actor = CLUTTER_ACTOR(data);\n"
#~ "    gboolean is_reactive = *((gboolean*)user_data);\n"
#~ "\n"
#~ "    clutter_actor_set_reactive(actor, is_reactive);\n"
#~ "}"

#~ msgid ""
#~ "Lines 2‒5: The signature of this function requires two <code>gpointer</"
#~ "code>s. The first is a pointer to the <code>ClutterActor</code> that our "
#~ "<code>GSList</code> holds and the other is the <code>is_focused</code> "
#~ "flag that we've passed in the previous section. We want to cast these and "
#~ "store them for easy use."
#~ msgstr ""
#~ "Γραμμές 2-5: Η υπογραφή αυτής της συνάρτησης απαιτεί δύο <code>gpointer</"
#~ "code>. Το πρώτο είναι ένας δείκτης στο <code>ClutterActor</code> που η "
#~ "<code>GSList</code> μας κρατά και ο άλλος είναι η σημαία "
#~ "<code>is_focused</code> που περάσαμε στην προηγούμενη ενότητα. Θέλουμε να "
#~ "τα αλλάξουμε και να τα αποθηκεύσουμε για εύκολη χρήση."

#~ msgid ""
#~ "Line 7: Depending on which boolean value is passed in, the "
#~ "<code>ClutterActor</code> will be set to respond to events or not."
#~ msgstr ""
#~ "Γραμμή 7: Ανάλογα με ποια τιμή Μπουλ πέρασε, ο <code>ClutterActor</code> "
#~ "θα οριστεί να απαντήσει ή όχι στα συμβάντα."

#~ msgid ""
#~ "For a general discussion of this, see <link xref=\"properties.py\">here</"
#~ "link>."
#~ msgstr ""
#~ "Για μια γενική συζήτηση του δείτε <link xref=\"properties.py\">εδώ</link>."

#~ msgid ""
#~ "For an explanation of signals and callback functions, see <link xref="
#~ "\"signals-callbacks.py\">this page</link>. An example is the <code>"
#~ "\"value-changed\"</code> signal, emitted when the value of the scale "
#~ "changes."
#~ msgstr ""
#~ "Για μια εξήγηση των σημάτων και συναρτήσεων επανάκλησης, δείτε <link xref="
#~ "\"signals-callbacks.py\">αυτήν τη σελίδα</link>. Ένα παράδειγμα είναι το "
#~ "σήμα <code>\"value-changed\"</code>, που εκπέμπεται όταν η τιμή της "
#~ "κλίμακας αλλάζει."

#~ msgid ""
#~ "For an explanation of signals and callback functions, see <link xref="
#~ "\"signals-callbacks.py\">this page</link>. An example is the <code>"
#~ "\"value-changed\"</code> signal, emitted when the value of the spinbutton "
#~ "changes."
#~ msgstr ""
#~ "Για μια εξήγηση των σημάτων και συναρτήσεων επανάκλησης, δείτε <link xref="
#~ "\"signals-callbacks.py\">αυτήν τη σελίδα</link>. Ένα παράδειγμα είναι το "
#~ "σήμα <code>\"value-changed\"</code>, που εκπέμπεται όταν η τιμή του "
#~ "κουμπιού μετρητή αλλάζει."

#~ msgid "Definitions"
#~ msgstr "Ορισμοί"

#~ msgid ""
#~ "Conceptionally, a <em>string</em> is a list of <em>characters</em> such "
#~ "as 'A', 'B', 'C' or 'È'. Characters are abstract representations and "
#~ "their meaning depends on the language and context they are used in. The "
#~ "<em>Unicode standard</em> describes how characters are represented by "
#~ "<em>code points</em>. For example the characters above are represented "
#~ "with the code points U+0041, U+0042, U+0043, and U+00C9, respectively. "
#~ "Basically, code points are numbers in the range from 0 to 0x10FFFF."
#~ msgstr ""
#~ "Εννοιολογικά μια <em>συμβολοσειρά</em> είναι μια λίστα <em>χαρακτήρων</"
#~ "em> όπως 'A', 'B', 'C' or 'È'. Οι χαρακτήρες είναι αφηρημένες "
#~ "αναπαραστάσεις και το νόημα τους εξαρτάται από τη γλώσσα και το "
#~ "περιεχόμενο στο οποίο χρησιμοποιούνται. Το <em>τυπικό Unicode</em> "
#~ "περιγράφει πώς οι χαρακτήρες αναπαριστώνται από <em>σημεία κώδικα</em>. "
#~ "Για παράδειγμα οι παραπάνω χαρακτήρες αναπαριστώνται με τα σημεία κώδικα U"
#~ "+0041, U+0042, U+0043 και U+00C9, αντίστοιχα. Βασικά, τα σημεία κώδικα "
#~ "είναι αριθμοί στην περιοχή από 0 έως 0x10FFFF."

#~ msgid ""
#~ "The representation of a string as a list of code points is abstract. In "
#~ "order to convert this abstract representation into a sequence of bytes "
#~ "the Unicode string must be <em>encoded</em>. The simplest from of "
#~ "encoding is ASCII and is performed as follows:"
#~ msgstr ""
#~ "Η αναπαράσταση μιας συμβολοσειράς ως μιας λίστας σημείων κώδικα είναι "
#~ "αφηρημένη. Για να μετατρέψετε αυτήν την αφηρημένη αναπαράσταση σε μια "
#~ "σειρά bytes η συμβολοσειρά Unicode πρέπει να <em>κωδικοποιηθεί</em>. Η "
#~ "απλούστερη μορφή κωδικοποίησης είναι η ASCII και εκτελείται ως εξής:"

#~ msgid ""
#~ "If the code point is strictly less than 128, each byte is the same as the "
#~ "value of the code point."
#~ msgstr ""
#~ "Εάν το σημείο κώδικα είναι αυστηρά μικρότερο από 128, κάθε byte είναι η "
#~ "ίδια όπως η τιμή του σημείου κώδικα."

#~ msgid ""
#~ "If the code point is 128 or greater, the Unicode string can’t be "
#~ "represented in this encoding. (Python raises a <sys>UnicodeEncodeError</"
#~ "sys> exception in this case.)"
#~ msgstr ""
#~ "Εάν το σημείο κώδικα είναι 128 ή μεγαλύτερο, η συμβολοσειρά Unicode δεν "
#~ "μπορεί να αναπαρασταθεί σε αυτήν την κωδικοποίηση. (Ο Python εγείρει μια "
#~ "εξαίρεση <sys>UnicodeEncodeError</sys> σε αυτήν την περίπτωση.)"

#~ msgid ""
#~ "Although ASCII encoding is simple to apply it can only encode for 128 "
#~ "different characters which is hardly enough. One of the most commonly "
#~ "used encodings that addresses this problem is UTF-8 (it can handle any "
#~ "Unicode code point). UTF stands for “Unicode Transformation Format”, and "
#~ "the ‘8’ means that 8-bit numbers are used in the encoding."
#~ msgstr ""
#~ "Αν και η κωδικοποίηση ASCII είναι απλή στην εφαρμογή μπορεί να "
#~ "κωδικοποιήσει μόνο 128 διαφορετικούς χαρακτήρες που είναι ανεπαρκείς. Μια "
#~ "από τις συνηθέστερες χρησιμοποιούμενες κωδικοποιήσεις που αντιμετωπίζει "
#~ "αυτό το πρόβλημα είναι η UTF-8 (μπορεί να χειριστεί οποιοδήποτε σημείο "
#~ "κώδικα Unicode). UTF σημαίνει “μορφή μετασχηματισμού κοινού κώδικα”, και "
#~ "το ‘8’ σημαίνει ότι αριθμοί 8 δυαδικών χρησιμοποιούνται στην κωδικοποίηση."

#~ msgid ""
#~ "<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/"
#~ "builder.html\">The Python Gtk+ 3 Tutorial - Glade and Gtk.Builder</link>"
#~ msgstr ""
#~ "<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/"
#~ "builder.html\">Μάθημα του Python Gtk+ 3 - Glade και Gtk.Builder</link>"

#~ msgid ""
#~ "The TreeView widget is designed around a <em>Model/View/Controller</em> "
#~ "design. For more information, and for a list of useful methods for "
#~ "TreeView and the interface TreeModel, see <link xref=\"model-view-"
#~ "controller.py\">here</link>."
#~ msgstr ""
#~ "Το γραφικό συστατικό TreeView σχεδιάστηκε γύρω από ένα σχέδιο "
#~ "<em>πρότυπου/προβολής/ελεγκτή</em>. Για περισσότερες πληροφορίες και για "
#~ "μια λίστα χρήσιμων μεθόδων για TreeView και την διεπαφή TreeModel, δείτε "
#~ "<link xref=\"model-view-controller.py\">εδώ</link>."

#~ msgid ""
#~ "For buttons and callbacks functions, see <link xref=\"signals-callbacks.py"
#~ "\">here</link>"
#~ msgstr ""
#~ "Για κουμπιά και επανακλήσεις συναρτήσεων, δείτε <link xref=\"signals-"
#~ "callbacks.py\">εδώ</link>"

#~ msgctxt "text"
#~ msgid "Beginner's Tutorial (Python)"
#~ msgstr "Μαθήματα αρχαρίων (Python)"

#~ msgid "0 Beginner's Tutorial"
#~ msgstr "0 Μαθήμα αρχαρίων"

#~ msgid "Basic buttons"
#~ msgstr "Βασικά κουμπιά"

#~ msgid "Entry widgets (with a detour on basic scrolling)"
#~ msgstr "Γραφικά συστατικά εισόδου (με μια παράκαμψη στη βασική κύλιση)"

#~ msgid "Selectors (a recap)"
#~ msgstr "Επιλογείς (μια ανακεφαλαίωση)"

#~ msgid "More containers"
#~ msgstr "Περισσότεροι περιέκτες"

#~ msgid ""
#~ "<code>window = Gtk.Window(application=self, title=\"Welcome to GNOME\")</"
#~ "code> sets the title as well, without the need for the line <code>window."
#~ "set_title(\"Welcome to GNOME\")</code>. For a general discussion of this, "
#~ "see <link xref=\"properties.py\">here</link>."
#~ msgstr ""
#~ "<code>window = Gtk.Window(application=self, title=\"Welcome to GNOME\")</"
#~ "code> ορίζει τον τίτλο επίσης, χωρίς την ανάγκη για τη γραμμή "
#~ "<code>window.set_title(\"Welcome to GNOME\")</code>. Για μια γενική "
#~ "συζήτηση του, δείτε <link xref=\"properties.py\">εδώ</link>."

#~ msgid "More scrolling"
#~ msgstr "Περισσότερη κύλιση"

#~ msgid "\"scrollbar.py\""
#~ msgstr "\"scrollbar.py\""

#~ msgid "\"widget.py\""
#~ msgstr "\"widget.py\""

#~ msgid "Some theory to help you"
#~ msgstr "Κάποια θεωρία για βοήθεια"

#~ msgid "tiffany.antopolski@gmail.com"
#~ msgstr "tiffany.antopolski@gmail.com"

#~ msgid "Gtk.Application"
#~ msgstr "Εφαρμογή Gtk"

#~ msgid "border_width"
#~ msgstr "border_width"

#~ msgid "window_position"
#~ msgstr "window_position"

#~ msgid "mmcasetti@gmail.com"
#~ msgstr "mmcasetti@gmail.com"

#~ msgid "GtkApplication"
#~ msgstr "GtkApplication"

#~ msgid "GtkWindow"
#~ msgstr "GtkWindow"

#~ msgid "jewelfox@fursona.net"
#~ msgstr "jewelfox@fursona.net"

#~ msgid "Gtk.Window"
#~ msgstr "Παράθυρο Gtk"

#~ msgid "ihmis.suski@gmail.com"
#~ msgstr "ihmis.suski@gmail.com"

#~ msgid "Creating function geoNames"
#~ msgstr "Δημιουργία συνάρτησης geoNames"

#~ msgid "Methods for geoNames"
#~ msgstr "Μέθοδοι για geoNames"

#~ msgid "Autotools"
#~ msgstr "Autotools"

#~ msgid "weatherapp.js"
#~ msgstr "weatherapp.js"

#~ msgid "$"
#~ msgstr "$"

#~ msgid "GJS_PATH=`pwd` gjs weatherapp.js"
#~ msgstr "GJS_PATH=`pwd` gjs weatherapp.js"

#~ msgid "mdhillca@gmail.com"
#~ msgstr "mdhillca@gmail.com"

#~ msgid "GtkTreeView"
#~ msgstr "GtkTreeView"

#~ msgid "GtkTreeModel"
#~ msgstr "GtkTreeModel"

#~ msgid "GtkTreeStore"
#~ msgstr "GtkTreeStore"

#~ msgid "GtkCellRendererText"
#~ msgstr "GtkCellRendererText"

#~ msgid "GtkTreeViewColumn"
#~ msgstr "GtkTreeViewColumn"

#~ msgid "Gtk.TreeView"
#~ msgstr "Gtk.TreeView"

#~ msgid "Gtk.ListStore"
#~ msgstr "Gtk.ListStore"

#~ msgid "Gtk.TreeSelection"
#~ msgstr "Gtk.TreeSelection"

#~ msgid "GtkListStore"
#~ msgstr "GtkListStore"

#~ msgid "pygobject - Python bindings for GObject Introspection"
#~ msgstr "pygobject - συνδέσεις Python για αυτοέλεγχο GObject"

#~ msgid "Fonts"
#~ msgstr "Γραμματοσειρές"

#~ msgid "Gtk.ApplicationWindow"
#~ msgstr "Gtk.ApplicationWindow"

#~ msgid "Gtk.CellRendererText"
#~ msgstr "Gtk.CellRendererText"

#~ msgid "Gtk.TreeIter"
#~ msgstr "Gtk.TreeIter"

#~ msgid "Gtk.TreeViewColumn"
#~ msgstr "Gtk.TreeViewColumn"

#~ msgid "GtkCellRendererToggle"
#~ msgstr "GtkCellRendererToggle"

#~ msgid "GtkTooltip"
#~ msgstr "GtkTooltip"

#~ msgid "GtkToolbar"
#~ msgstr "GtkToolbar"

#~ msgid "GtkWidget"
#~ msgstr "GtkWidget"

#~ msgid "Stock Items"
#~ msgstr "Στοιχεία παρακαταθήκης"

#~ msgid "Screenshot of Glade ui"
#~ msgstr "Στιγμιότυπο της ui του Glade"

#~ msgid "Screenshot of toolbar icon in Glade ui"
#~ msgstr "Στιγμιότυπο του εικονιδίου της γραμμής εργαλείων στη ui του Glade"

#~ msgid "Screenshot of General tab"
#~ msgstr "Στιγμιότυπο της γενικής καρτέλας"

#~ msgid "Screenshot of Common tab"
#~ msgstr "Στιγμιότυπο της κοινής καρτέλας"

#~ msgid "Setting the visible property to No"
#~ msgstr "Ορισμός της ιδιότητας ορατό σε όχι"

#~ msgid "Gtk.Toolbar"
#~ msgstr "Εργαλειοθήκη Gtk"

#~ msgid "Gtk.Toolbutton"
#~ msgstr "Κουμπί εργαλείου Gtk"

#~ msgid "Gtk.Stock"
#~ msgstr "Απόθεμα Gtk"

#~ msgid "sebp@k-d-w.org"
#~ msgstr "sebp@k-d-w.org"

#~ msgid "GtkGrid"
#~ msgstr "GtkGrid"

#~ msgid "GtkBuilder"
#~ msgstr "GtkBuilder"

#~ msgid "Event Structures"
#~ msgstr "Δομές συμβάντων"

#~ msgid "The Python Gtk+ 3 Tutorial - Glade and Gtk.Builder"
#~ msgstr "Το μάθημα Python Gtk+ 3 - Glade και Gtk.Builder"

#~ msgid "GtkToolButton"
#~ msgstr "GtkToolButton"

#~ msgid "GtkToolItem"
#~ msgstr "GtkToolItem"

#~ msgid "GtkActionable"
#~ msgstr "GtkActionable"

#~ msgid "Gtk.ToolButton"
#~ msgstr "ToolButton Gtk"

#~ msgid "Gtk Stock items"
#~ msgstr "Στοιχεία αποθέματος Gtk"

#~ msgid "Gdk.WindowState"
#~ msgstr "Gdk.WindowState"

#~ msgid "Gtk.ToggleButton"
#~ msgstr "Gtk.ToggleButton"

#~ msgid "GtkToggleButton"
#~ msgstr "GtkToggleButton"

#~ msgid "GtkSpinner"
#~ msgstr "GtkSpinner"

#~ msgid "Gtk.Grid"
#~ msgstr "Gtk.Grid"

#~ msgid "Gtk.Spinner"
#~ msgstr "Gtk.Spinner"

#~ msgid "monicakochofar@gmail.com"
#~ msgstr "monicakochofar@gmail.com"

#~ msgid "GtkTogglebutton"
#~ msgstr "GtkToggleButton"

#~ msgid "Gtk.TextBuffer"
#~ msgstr "Gtk.TextBuffer"

#~ msgid "Gtk.TextView"
#~ msgstr "Gtk.TextView"

#~ msgid "Gtk.ScrolledWindow"
#~ msgstr "Gtk.ScrolledWindow"

#~ msgid "Gtk.WrapMode"
#~ msgstr "Gtk.WrapMode"

#~ msgid "Gtk.PolicyType"
#~ msgstr "Gtk.PolicyType"

#~ msgid "GtkTextView"
#~ msgstr "GtkTextView"

#~ msgid "GtkTextBuffer"
#~ msgstr "GtkTextBuffer"

#~ msgid "GtkTextTag"
#~ msgstr "GtkTextTag"

#~ msgid "GtkScrolledWindow"
#~ msgstr "GtkScrolledWindow"

#~ msgid "Standard Enumerations"
#~ msgstr "Τυπικές απαριθμήσεις"

#~ msgid "Gtk.Button"
#~ msgstr "Gtk.Button"

#~ msgid "Gtk.Label"
#~ msgstr "Gtk.Label"

#~ msgid "Gtk.RadioButton"
#~ msgstr "Gtk.RadioButton"

#~ msgid "GtkContainer"
#~ msgstr "GtkContainer"

#~ msgid "Gtk.Switch"
#~ msgstr "Gtk.Switch"

#~ msgid "GtkSwitch"
#~ msgstr "GtkSwitch"

#~ msgid "GtkLabel"
#~ msgstr "GtkLabel"

#~ msgid "GSimpleAction"
#~ msgstr "GSimpleAction"

#~ msgid "Gtk.Image"
#~ msgstr "Gtk.Image"

#~ msgid "How To Deal With Strings - The Python GTK+ 3 Tutorial"
#~ msgstr "Πώς να αντιμετωπίσετε τις συμβολοσειρές - Το μάθημα Python GTK+ 3"

#~ msgid "Gtk.Statusbar"
#~ msgstr "Gtk.Statusbar"

#~ msgid "GtkStatusbar"
#~ msgstr "GtkStatusbar"

#~ msgid "Gdk - Key Values"
#~ msgstr "Τιμές κλειδιού Gdk"

#~ msgid "Gtk.Frame"
#~ msgstr "Gtk.Frame"

#~ msgid "Gtk.Paned"
#~ msgstr "Gtk.Paned"

#~ msgid "GtkStatusBar"
#~ msgstr "GtkStatusBar"

#~ msgid "String Utility Functions"
#~ msgstr "Συναρτήσεις βοηθητικές συμβολοσειράς"

#~ msgid "Gtk.Widget"
#~ msgstr "Gtk.Widget"

#~ msgid "Gdk.keyval_name"
#~ msgstr "Gdk.keyval_name"

#~ msgid "Key Values"
#~ msgstr "Τιμές κλειδιού"

#~ msgid "GObject"
#~ msgstr "GObject"

#~ msgid "Gtk.SpinButton"
#~ msgstr "Gtk.SpinButton"

#~ msgid "GtkSpinButton"
#~ msgstr "GtkSpinButton"

#~ msgid "GtkAdjustment"
#~ msgstr "GtkAdjustment"

#~ msgid "Gtk.Adjustment"
#~ msgstr "Gtk.Adjustment"

#~ msgid "GtkSeparator"
#~ msgstr "GtkSeparator"

#~ msgid "GtkImage"
#~ msgstr "GtkImage"

#~ msgid "Gtk.Scale"
#~ msgstr "Gtk.Scale"

#~ msgid "Gtk.PositionType"
#~ msgstr "Gtk.PositionType"

#~ msgid "Gtk.Orientation"
#~ msgstr "Gtk.Orientation"

#~ msgid "GtkScale"
#~ msgstr "GtkScale"

#~ msgid "GtkRange"
#~ msgstr "GtkRange"

#~ msgid "gnome-doc-list@gnome.org"
#~ msgstr "gnome-doc-list@gnome.org"

#~ msgid "jhs@gnome.org"
#~ msgstr "jhs@gnome.org"

#~ msgid "GtkRadioButton"
#~ msgstr "GtkRadioButton"

#~ msgid "Gtk.ProgressBar"
#~ msgstr "Gtk.ProgressBar"

#~ msgid "GLib.Timeout"
#~ msgstr "GLib.Timeout"

#~ msgid "GtkProgressBar"
#~ msgstr "GtkProgressBar"

#~ msgid "GLib - The Main Event Loop"
#~ msgstr "GLib - Ο κύριος βρόχος συμβάντος"

#~ msgid "GLib"
#~ msgstr "GLib"

#~ msgid "G_Timeout"
#~ msgstr "G_Timeout"

#~ msgid "chrisk@openismus.com"
#~ msgstr "chrisk@openismus.com"

#~ msgid "GtkPaned"
#~ msgstr "GtkPaned"

#~ msgid "GtkComboBox"
#~ msgstr "GtkComboBox"

#~ msgid "GtkCellRenderer"
#~ msgstr "GtkCellRenderer"

#~ msgid "The Python Gtk+ 3 Tutorial - Tree and List Widgets"
#~ msgstr "Το μάθημα Python Gtk+ 3 - Γραφικά συστατικά δένδρου και λίστας"

#~ msgid "The Python Gtk+ 3 Tutorial - CellRenderers"
#~ msgstr "Το μάθημα Python Gtk+ 3 - CellRenderers"

#~ msgid "The Python Gtk+ 3 Tutorial - ComboBox"
#~ msgstr "Το μάθημα Python Gtk+ 3 - ComboBox"

#~ msgid "Gtk.MessageDialog"
#~ msgstr "Gtk.MessageDialog"

#~ msgid "Gtk.DialogFlags"
#~ msgstr "Gtk.DialogFlags"

#~ msgid "Gtk.MessageType"
#~ msgstr "Gtk.MessageType"

#~ msgid "Gtk.ButtonsType"
#~ msgstr "Gtk.ButtonsType"

#~ msgid "GtkMessageDialog"
#~ msgstr "GtkMessageDialog"

#~ msgid "GtkDialog"
#~ msgstr "GtkDialog"

#~ msgid "GActionMap"
#~ msgstr "GActionMap"

#~ msgid "List of button types"
#~ msgstr "Λίστα των τύπων κουμπιού"

#~ msgid "List of message types"
#~ msgstr "Λίστα των τύπων μηνύματος"

#~ msgid "GApplication"
#~ msgstr "GApplication"

#~ msgid "shaunm@gnome.org"
#~ msgstr "shaunm@gnome.org"

#~ msgid "\"UTF-8\""
#~ msgstr "\"UTF-8\""

#~ msgid "NULL"
#~ msgstr "NULL"

#~ msgid "shaunm"
#~ msgstr "shaunm"

#~ msgid "FIXME: Is this true? Does query_selector take CSS, CSSish, or what?"
#~ msgstr ""
#~ "ΔΙΟΡΘΩΣΗ: Είναι αλήθεια; Το query_selector παίρνει CSS, CSSish ή τι;"

#~ msgid ""
#~ "Not passing the GError**, but we should give it a quick mention and link "
#~ "to somewhere that explains how GError-handling works."
#~ msgstr ""
#~ "Να μην περνάτε το GError**, αλλά θα μπορούσαμε να του δώσουμε μια γρήγορη "
#~ "αναφορά και σύνδεση κάπου, όπου εξηγείται πώς λειτουργεί ο χειρισμός "
#~ "GError."

#~ msgid "g_base64_encode has bad args"
#~ msgstr "Το g_base64_encode έχει άσχημα ορίσματα"

#~ msgid "Link to method to get HTML from DOM and to GIO APIs."
#~ msgstr "Συνδεθείτε με τη μέθοδο λήψης HTML από DOM και σε GIO APIs."

#~ msgid "Link to strftime or something"
#~ msgstr "Σύνδεση με strftime ή κάτι άλλο"

#~ msgid "azzurroverde@gmail.com"
#~ msgstr "azzurroverde@gmail.com"

#~ msgid "Glib.ActionEntry"
#~ msgstr "Glib.ActionEntry"

#~ msgid "Gtk.Builder"
#~ msgstr "Gtk.Builder"

#~ msgid "dgsiegel@gnome.org"
#~ msgstr "dgsiegel@gnome.org"

#~ msgid "Gtk.LinkButton"
#~ msgstr "Gtk.LinkButton"

#~ msgid "GtkLinkButton"
#~ msgstr "GtkLinkButton"

#~ msgid "philip.chimento@gmail.com"
#~ msgstr "philip.chimento@gmail.com"

#~ msgid "jwendell@gnome.org"
#~ msgstr "jwendell@gnome.org"

#~ msgid "GtkApplicationWindow"
#~ msgstr "GtkApplicationWindow"

#~ msgid "gjs helloWorld.js"
#~ msgstr "gjs helloWorld.js"

#~ msgid "chmod +x helloWorld"
#~ msgstr "chmod +x helloWorld"

#~ msgid "chmod +x autogen.sh"
#~ msgstr "chmod +x autogen.sh"

#~ msgid "GJS_PATH=`pwd` gjs guitarTuner.js"
#~ msgstr "GJS_PATH=`pwd` gjs guitarTuner.js"

#~ msgid "GtkButton"
#~ msgstr "GtkButton"

#~ msgid "desrt@desrt.ca"
#~ msgstr "desrt@desrt.ca"

#~ msgid "Menu"
#~ msgstr "Μενού"

#~ msgid "append"
#~ msgstr "προσάρτηση"

#~ msgid "SimpleAction"
#~ msgstr "SimpleAction"

#~ msgid "add_action"
#~ msgstr "add_action"

#~ msgid "GVariantType"
#~ msgstr "GVariantType"

#~ msgid "GVariant"
#~ msgstr "GVariant"

#~ msgid "Ubuntu"
#~ msgstr "Ubuntu"

#~ msgid "Fedora"
#~ msgstr "Fedora"

#~ msgid "OpenSuSE"
#~ msgstr "OpenSuSE"

#~ msgid "Others"
#~ msgstr "Άλλα"

#~ msgid "GtkFontChooserWidget"
#~ msgstr "GtkFontChooserWidget"

#~ msgid "FileChooser"
#~ msgstr "FileChooser"

#~ msgid "GLib.ActionEntry"
#~ msgstr "GLib.ActionEntry"

#~ msgid "GtkFileChooserDialog"
#~ msgstr "GtkFileChooserDialog"

#~ msgid "GtkFileChooser"
#~ msgstr "GtkFileChooser"

#~ msgid "GFile"
#~ msgstr "GFile"

#~ msgid "Gtk.Entry"
#~ msgstr "Gtk.Entry"

#~ msgid "GtkEntry"
#~ msgstr "GtkEntry"

#~ msgid "Gtk.Dialog"
#~ msgstr "Gtk.Dialog"

#~ msgid "Gtk.Dialog.with_buttons"
#~ msgstr "Gtk.Dialog.with_buttons"

#~ msgid "get_content_area"
#~ msgstr "get_content_area"

#~ msgid "GtkCellRendererPixbuf"
#~ msgstr "GtkCellRendererPixbuf"

#~ msgid "Gtk.ComboBox"
#~ msgstr "Gtk.ComboBox"

#~ msgid "set_attributes"
#~ msgstr "set_attributes"

#~ msgid "GtkCellLayout"
#~ msgstr "GtkCellLayout"

#~ msgid "Gtk.CellRendererPixbuf"
#~ msgstr "Gtk.CellRendererPixbuf"

#~ msgid "Gtk.ComboBoxText"
#~ msgstr "Gtk.ComboBoxText"

#~ msgid "Gtk.ColorButton"
#~ msgstr "Gtk.ColorButton"

#~ msgid "Gdk.RGBA"
#~ msgstr "Gdk.RGBA"

#~ msgid "GtkColorButton"
#~ msgstr "GtkColorButton"

#~ msgid "GtkColorChooser"
#~ msgstr "GtkColorChooser"

#~ msgid "RGBA Colors"
#~ msgstr "Χρώματα RGBA"

#~ msgid "Gtk.CheckButton"
#~ msgstr "Gtk.CheckButton"

#~ msgid "GtkCheckButton"
#~ msgstr "GtkCheckButton"

#~ msgid "tiffany.antpoolski@gmail.com"
#~ msgstr "tiffany.antpoolski@gmail.com"

#~ msgid "GtkButtonBox"
#~ msgstr "GtkButtonBox"

#~ msgid "GtkBox"
#~ msgstr "GtkBox"

#~ msgid "Unicode Manipulation"
#~ msgstr "Χειρισμός Unicode"

#~ msgid "tiffany@antopolski.com"
#~ msgstr "tiffany@antopolski.com"

#~ msgid "The Vala Tutorial"
#~ msgstr "Το μάθημα Vala"

#~ msgid "Sample Vala code"
#~ msgstr "Δείγμα κώδικα Vala"

#~ msgid "set_default_size"
#~ msgstr "set_default_size"

#~ msgid "GtkAboutDialog"
#~ msgstr "GtkAboutDialog"

#~ msgid "Gtk.AboutDialog"
#~ msgstr "Gtk.AboutDialog"

#~ msgid "@@image: 'media/03_jssignal_02b.png'; md5=THIS FILE DOESN'T EXIST"
#~ msgstr "@@image: 'media/03_jssignal_02b.png'· md5=THIS FILE DOESN'T EXIST"

#~ msgid ""
#~ "<code>set_position(Gtk.WindowPosition.CENTER)</code> centers the window. "
#~ "Other options are described in the <link href=\"http://developer.gnome."
#~ "org/gtk3/3.4/gtk3-Standard-Enumerations.html#GtkWindowPosition\">standard "
#~ "enumerations</link> (with the caveat that they should be changed on the "
#~ "model of Gtk.WindowPosition.CENTER)."
#~ msgstr ""
#~ "<code>set_position(Gtk.WindowPosition.CENTER)</code> κεντράρει το "
#~ "παράθυρο. Άλλες επιλογές περιγράφονται στο <link href=\"http://developer."
#~ "gnome.org/gtk3/3.4/gtk3-Standard-Enumerations.html#GtkWindowPosition"
#~ "\">τυπικές απαριθμήσεις</link> (με την επιφύλαξη ότι πρέπει να αλλαχθούν "
#~ "στο πρότυπο του Gtk.WindowPosition.CENTER)."

#~ msgid "Toolbar widget"
#~ msgstr "Γραφικό στοιχείο εργαλειοθήκης"
