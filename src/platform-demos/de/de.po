# German translation for gnome-devel-docs (tutorial demos).
# Copyright (C) 2011 gnome-devel-docs's COPYRIGHT HOLDER
# This file is distributed under the same license as the gnome-devel-docs package.
# Mario Blättermann <mario.blaettermann@gmail.com>, 2011, 2013.
#
msgid ""
msgstr ""
"Project-Id-Version: gnome-devel-docs master\n"
"POT-Creation-Date: 2013-03-11 13:22+0000\n"
"PO-Revision-Date: 2013-03-12 22:56+0100\n"
"Last-Translator: Mario Blättermann <mario.blaettermann@gmail.com>\n"
"Language-Team: German <gnome-de@gnome.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#. Put one translator per line, in the form NAME <EMAIL>, YEAR1, YEAR2
msgctxt "_"
msgid "translator-credits"
msgstr "Mario Blättermann <mario.blaettermann@gmail.com>, 2011, 2013"

#: C/index.page:7(credit/name)
msgid "GNOME Documentation Team"
msgstr "GNOME-Dokumentationsteam"

#: C/index.page:9(credit/years)
msgid "2010, 2011"
msgstr "2010, 2011"

#: C/index.page:12(credit/name) C/message-board.c.page:14(credit/name)
msgid "Shaun McCance"
msgstr "Shaun McCance"

#: C/index.page:14(credit/years) C/message-board.c.page:16(credit/years)
msgid "2010"
msgstr "2010"

#: C/index.page:17(credit/name) C/guitar-tuner.c.page:18(credit/name)
#: C/guitar-tuner.cpp.page:16(credit/name)
#: C/guitar-tuner.py.page:18(credit/name)
#: C/guitar-tuner.vala.page:17(credit/name)
#: C/image-viewer.c.page:18(credit/name)
#: C/image-viewer.cpp.page:16(credit/name)
#: C/image-viewer.js.page:18(credit/name)
#: C/image-viewer.py.page:18(credit/name)
#: C/image-viewer.vala.page:18(credit/name)
#: C/magic-mirror.vala.page:18(credit/name) C/photo-wall.c.page:17(credit/name)
#: C/record-collection.js.page:18(credit/name)
msgid "Johannes Schmid"
msgstr "Johannes Schmid"

#: C/index.page:19(credit/years) C/bug-filing.page:11(credit/years)
#: C/documentation.page:12(credit/years) C/entry.py.page:22(credit/years)
#: C/model-view-controller.py.page:17(credit/years)
#: C/properties.py.page:17(credit/years)
#: C/signals-callbacks.py.page:17(credit/years)
#: C/strings.py.page:17(credit/years) C/textview.py.page:17(credit/years)
#: C/toolbar_builder.py.page:29(credit/years) C/translate.page:12(credit/years)
msgid "2011"
msgstr "2011"

#: C/index.page:22(credit/name) C/aboutdialog.vala.page:20(credit/name)
#: C/beginner.py.page:14(credit/name) C/beginner.vala.page:14(credit/name)
#: C/bug-filing.page:9(credit/name) C/button.vala.page:13(credit/name)
#: C/c.page:10(credit/name) C/checkbutton.c.page:12(credit/name)
#: C/checkbutton.vala.page:12(credit/name)
#: C/colorbutton.vala.page:14(credit/name) C/combobox.vala.page:12(credit/name)
#: C/cpp.page:10(credit/name) C/dialog.vala.page:12(credit/name)
#: C/documentation.page:10(credit/name) C/entry.vala.page:12(credit/name)
#: C/filechooserdialog.vala.page:15(credit/name) C/gmenu.c.page:12(credit/name)
#: C/gmenu.js.page:12(credit/name) C/gmenu.py.page:14(credit/name)
#: C/gmenu.vala.page:19(credit/name) C/grid.py.page:14(credit/name)
#: C/grid.vala.page:14(credit/name)
#: C/GtkApplicationWindow.c.page:12(credit/name)
#: C/GtkApplicationWindow.js.page:12(credit/name)
#: C/GtkApplicationWindow.py.page:14(credit/name)
#: C/GtkApplicationWindow.vala.page:12(credit/name)
#: C/guitar-tuner.vala.page:21(credit/name)
#: C/helloWorld.js.page:19(credit/name) C/image.vala.page:12(credit/name)
#: C/image-viewer.vala.page:26(credit/name) C/js.page:11(credit/name)
#: C/label.vala.page:12(credit/name) C/linkbutton.vala.page:12(credit/name)
#: C/menubar.py.page:14(credit/name) C/menubar.vala.page:14(credit/name)
#: C/menubutton.py.page:13(credit/name) C/menubutton.vala.page:12(credit/name)
#: C/messagedialog.vala.page:12(credit/name)
#: C/progressbar.vala.page:12(credit/name) C/py.page:10(credit/name)
#: C/radiobutton.vala.page:15(credit/name) C/scale.vala.page:14(credit/name)
#: C/scrolledwindow.vala.page:13(credit/name)
#: C/spinbutton.vala.page:14(credit/name) C/spinner.vala.page:12(credit/name)
#: C/statusbar.vala.page:15(credit/name) C/switch.vala.page:16(credit/name)
#: C/textview.vala.page:12(credit/name)
#: C/togglebutton.vala.page:15(credit/name) C/toolbar.js.page:12(credit/name)
#: C/toolbar.vala.page:13(credit/name)
#: C/toolbar_builder.py.page:15(credit/name)
#: C/toolbar_builder.vala.page:14(credit/name)
#: C/treeview_simple_liststore.vala.page:14(credit/name)
#: C/translate.page:10(credit/name) C/tutorial.py.page:14(credit/name)
#: C/vala.page:10(credit/name) C/window.c.page:12(credit/name)
#: C/window.py.page:14(credit/name) C/window.vala.page:12(credit/name)
msgid "Tiffany Antopolski"
msgstr "Tiffany Antopolski"

#: C/index.page:27(page/title)
msgid "GNOME Developer Platform Demos"
msgstr "Demos zur GNOME-Entwicklerplattform"

#: C/index.page:30(section/title)
msgid "How to set up your development environment"
msgstr "Einrichten Ihrer Entwicklungsumgebung"

#: C/index.page:34(section/title)
msgid "Tutorials, code samples, platform demos and more"
msgstr ""

#: C/index.page:38(section/title)
msgid "Get Involved"
msgstr "Mithelfen"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:94(media)
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_01.png' md5='3fdc22d361cf801f71557fdc76ae5b49'"
msgstr ""
"external ref='media/02_jsgrid_01.png' md5='3fdc22d361cf801f71557fdc76ae5b49'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:149(media)
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_02.png' md5='07db86b0043ba5c3c24a90d7322bd81e'"
msgstr ""
"external ref='media/02_jsgrid_02.png' md5='07db86b0043ba5c3c24a90d7322bd81e'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:166(media)
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_03.png' md5='817351e73c687d47253c56ed06b6629f'"
msgstr ""
"external ref='media/02_jsgrid_03.png' md5='817351e73c687d47253c56ed06b6629f'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:196(media)
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_04.png' md5='eeaead27cee2851877fc3cfe66177f07'"
msgstr ""
"external ref='media/02_jsgrid_04.png' md5='eeaead27cee2851877fc3cfe66177f07'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:205(media)
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_05.png' md5='a3ad12f432d5977fc1f66302ad5b7498'"
msgstr ""
"external ref='media/02_jsgrid_05.png' md5='a3ad12f432d5977fc1f66302ad5b7498'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:216(media)
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_06.png' md5='450e48dbf6b8f5ce1c208e4812e1714b'"
msgstr ""
"external ref='media/02_jsgrid_06.png' md5='450e48dbf6b8f5ce1c208e4812e1714b'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:226(media)
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_07.png' md5='0b304d70728903fbb2601d55bf00fdb9'"
msgstr ""
"external ref='media/02_jsgrid_07.png' md5='0b304d70728903fbb2601d55bf00fdb9'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:248(media)
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_08.png' md5='78890beb47bd11360154b8ca4d50d1ff'"
msgstr ""
"external ref='media/02_jsgrid_08.png' md5='78890beb47bd11360154b8ca4d50d1ff'"

#: C/02_welcome_to_the_grid.js.page:14(credit/name)
#: C/03_getting_the_signal.js.page:15(credit/name)
#: C/aboutdialog.js.page:11(credit/name) C/button.js.page:12(credit/name)
#: C/checkbutton.js.page:12(credit/name) C/comboboxtext.js.page:14(credit/name)
#: C/combobox.js.page:16(credit/name) C/dialog.js.page:12(credit/name)
#: C/entry.js.page:12(credit/name) C/grid.js.page:17(credit/name)
#: C/hellognome.js.page:11(credit/name) C/image.js.page:11(credit/name)
#: C/label.js.page:12(credit/name) C/linkbutton.js.page:12(credit/name)
#: C/messagedialog.js.page:15(credit/name)
#: C/progressbar.js.page:11(credit/name) C/radiobutton.js.page:12(credit/name)
#: C/scale.js.page:12(credit/name) C/set-up-gedit.js.page:11(credit/name)
#: C/spinbutton.js.page:15(credit/name) C/spinner.js.page:12(credit/name)
#: C/statusbar.js.page:12(credit/name) C/switch.js.page:12(credit/name)
#: C/textview.js.page:16(credit/name) C/togglebutton.js.page:12(credit/name)
#: C/treeview_simple_liststore.js.page:15(credit/name)
#: C/window.js.page:12(credit/name)
msgid "Taryn Fox"
msgstr "Taryn Fox"

#: C/02_welcome_to_the_grid.js.page:16(credit/years)
#: C/03_getting_the_signal.js.page:17(credit/years)
#: C/aboutdialog.c.page:16(credit/years) C/aboutdialog.js.page:13(credit/years)
#: C/aboutdialog.py.page:15(credit/years)
#: C/aboutdialog.vala.page:16(credit/years) C/beginner.js.page:12(credit/years)
#: C/button.c.page:16(credit/years) C/button.js.page:14(credit/years)
#: C/button.py.page:16(credit/years) C/button.vala.page:15(credit/years)
#: C/buttonbox.py.page:16(credit/years) C/checkbutton.c.page:14(credit/years)
#: C/checkbutton.js.page:14(credit/years)
#: C/checkbutton.py.page:15(credit/years)
#: C/checkbutton.vala.page:14(credit/years)
#: C/colorbutton.py.page:15(credit/years)
#: C/colorbutton.vala.page:16(credit/years)
#: C/comboboxtext.js.page:16(credit/years) C/combobox.js.page:18(credit/years)
#: C/combobox.py.page:16(credit/years) C/combobox.vala.page:14(credit/years)
#: C/combobox_multicolumn.py.page:15(credit/years)
#: C/dialog.c.page:16(credit/years) C/dialog.js.page:14(credit/years)
#: C/dialog.py.page:16(credit/years) C/dialog.vala.page:14(credit/years)
#: C/entry.c.page:14(credit/years) C/entry.js.page:14(credit/years)
#: C/entry.py.page:16(credit/years) C/entry.vala.page:14(credit/years)
#: C/filechooserdialog.py.page:18(credit/years)
#: C/filechooserdialog.vala.page:17(credit/years)
#: C/fontchooserwidget.py.page:16(credit/years) C/gmenu.c.page:14(credit/years)
#: C/gmenu.js.page:14(credit/years) C/gmenu.py.page:16(credit/years)
#: C/gmenu.py.page:22(credit/years) C/gmenu.vala.page:15(credit/years)
#: C/grid.c.page:14(credit/years) C/grid.js.page:14(credit/years)
#: C/grid.py.page:16(credit/years) C/grid.py.page:22(credit/years)
#: C/grid.vala.page:16(credit/years)
#: C/GtkApplicationWindow.c.page:14(credit/years)
#: C/GtkApplicationWindow.js.page:14(credit/years)
#: C/GtkApplicationWindow.py.page:16(credit/years)
#: C/GtkApplicationWindow.py.page:21(credit/years)
#: C/GtkApplicationWindow.vala.page:14(credit/years)
#: C/guitar-tuner.js.page:13(credit/years)
#: C/hellognome.js.page:13(credit/years) C/helloWorld.js.page:16(credit/years)
#: C/image.c.page:14(credit/years) C/image.js.page:13(credit/years)
#: C/image.py.page:16(credit/years) C/image.vala.page:14(credit/years)
#: C/label.c.page:15(credit/years) C/label.js.page:14(credit/years)
#: C/label.py.page:17(credit/years) C/label.py.page:22(credit/years)
#: C/label.vala.page:14(credit/years) C/linkbutton.c.page:14(credit/years)
#: C/linkbutton.js.page:14(credit/years) C/linkbutton.py.page:15(credit/years)
#: C/linkbutton.vala.page:14(credit/years) C/menubar.c.page:16(credit/years)
#: C/menubar.py.page:16(credit/years) C/menubar.py.page:21(credit/years)
#: C/menubar.vala.page:16(credit/years) C/menubutton.js.page:14(credit/years)
#: C/menubutton.py.page:15(credit/years) C/menubutton.py.page:21(credit/years)
#: C/menubutton.vala.page:14(credit/years)
#: C/messagedialog.c.page:15(credit/years)
#: C/messagedialog.js.page:17(credit/years)
#: C/messagedialog.py.page:15(credit/years)
#: C/messagedialog.vala.page:14(credit/years)
#: C/model-view-controller.py.page:22(credit/years)
#: C/paned.py.page:15(credit/years) C/progressbar.c.page:15(credit/years)
#: C/progressbar.js.page:13(credit/years)
#: C/progressbar.py.page:15(credit/years)
#: C/progressbar.vala.page:14(credit/years)
#: C/properties.py.page:22(credit/years) C/radiobutton.c.page:16(credit/years)
#: C/radiobutton.js.page:14(credit/years)
#: C/radiobutton.py.page:16(credit/years)
#: C/radiobutton.vala.page:17(credit/years) C/scale.c.page:16(credit/years)
#: C/scale.js.page:14(credit/years) C/scale.py.page:16(credit/years)
#: C/scale.vala.page:16(credit/years) C/scrolledwindow.c.page:16(credit/years)
#: C/scrolledwindow.py.page:15(credit/years)
#: C/scrolledwindow.vala.page:15(credit/years)
#: C/separator.py.page:16(credit/years) C/set-up-gedit.js.page:13(credit/years)
#: C/signals-callbacks.py.page:22(credit/years)
#: C/spinbutton.c.page:17(credit/years) C/spinbutton.js.page:17(credit/years)
#: C/spinbutton.py.page:16(credit/years)
#: C/spinbutton.vala.page:16(credit/years) C/spinner.c.page:15(credit/years)
#: C/spinner.js.page:14(credit/years) C/spinner.py.page:15(credit/years)
#: C/spinner.vala.page:14(credit/years) C/statusbar.c.page:18(credit/years)
#: C/statusbar.js.page:14(credit/years) C/statusbar.py.page:16(credit/years)
#: C/statusbar.vala.page:17(credit/years) C/strings.py.page:22(credit/years)
#: C/switch.c.page:14(credit/years) C/switch.js.page:14(credit/years)
#: C/switch.py.page:15(credit/years) C/switch.vala.page:18(credit/years)
#: C/textview.c.page:14(credit/years) C/textview.js.page:18(credit/years)
#: C/textview.py.page:23(credit/years) C/textview.vala.page:14(credit/years)
#: C/togglebutton.c.page:18(credit/years)
#: C/togglebutton.js.page:14(credit/years)
#: C/togglebutton.py.page:15(credit/years)
#: C/togglebutton.vala.page:17(credit/years) C/toolbar.c.page:16(credit/years)
#: C/toolbar.js.page:14(credit/years) C/toolbar.py.page:16(credit/years)
#: C/toolbar.vala.page:15(credit/years)
#: C/toolbar_builder.py.page:17(credit/years)
#: C/toolbar_builder.py.page:23(credit/years)
#: C/toolbar_builder.vala.page:16(credit/years)
#: C/tooltip.py.page:16(credit/years)
#: C/treeview_advanced_liststore.py.page:15(credit/years)
#: C/treeview_cellrenderertoggle.py.page:15(credit/years)
#: C/treeview_simple_liststore.js.page:17(credit/years)
#: C/treeview_simple_liststore.py.page:16(credit/years)
#: C/treeview_simple_liststore.vala.page:16(credit/years)
#: C/treeview_treestore.py.page:16(credit/years)
#: C/tutorial.py.page:16(credit/years) C/weatherApp.js.page:13(credit/years)
#: C/weatherAppMain.js.page:12(credit/years)
#: C/weatherAutotools.js.page:12(credit/years)
#: C/weatherGeonames.js.page:12(credit/years) C/window.c.page:14(credit/years)
#: C/window.js.page:14(credit/years) C/window.py.page:16(credit/years)
#: C/window.py.page:21(credit/years) C/window.vala.page:14(credit/years)
msgid "2012"
msgstr "2012"

#: C/02_welcome_to_the_grid.js.page:19(info/desc)
msgid "Learn how to lay out UI components, like Images and Labels."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:22(page/title)
msgid "2. Welcome to the Grid"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:24(synopsis/p)
msgid ""
"This tutorial will show you how to create basic widgets, or parts of the "
"GNOME user interface, like Images and Labels. You'll then learn how to "
"arrange them all in a Grid, which lets you put widgets exactly where you want "
"them."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:25(note/p)
msgid ""
"Have you taken <link xref=\"hellognome.js\">the first tutorial in this "
"series</link> already? You'll want to do so before continuing."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:31(section/title)
msgid "Going native"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:33(section/p)
msgid ""
"In the last tutorial, we created what was basically a GNOME window frame for "
"a web app. All the GNOME-specific code we needed to learn revolved around "
"putting the WebView -- the widget containing our application -- into an "
"ApplicationWindow, and telling it to display. The application itself was "
"written in HTML and JavaScript, just like most pages on the web."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:34(section/p)
msgid ""
"This time, we're going to use only native GNOME widgets. A widget is just a "
"thing, like a checkbox or picture, and GNOME has a wide variety of them to "
"choose from. We call them \"native\" widgets to distinguish them from things "
"like the button and header in the web app we wrote. Because instead of using "
"web code, these are going to be 100 percent GNOME, using GTK+."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:35(note/p)
msgid ""
"GTK+ stands for \"GIMP Toolkit\". It's like a toolbox of widgets that you can "
"reach into, while building your applications. It was originally written for "
"<link href=\"http://www.gimp.org/\">the GIMP</link>, which is a free software "
"image editor."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:39(section/title)
msgid "Setting up our application"
msgstr "Entwurf der Anwendung"

#: C/02_welcome_to_the_grid.js.page:41(section/p)
msgid ""
"Before we dig out any widgets from the GTK+ toolbox, we first need to write "
"the basic boilerplate code that our application requires."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:42(section/code)
#: C/comboboxtext.js.page:30(section/code) C/textview.js.page:38(section/code)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:48(section/p)
msgid ""
"This part always goes at the start of your code. Depending on what you'll be "
"doing with it, you may want to declare more imports here. What we're writing "
"today is pretty basic, so these are all we need; Gtk for the widgets, and "
"Lang so we can use Lang.bind to connect our application's activate and "
"startup signals to the requisite functions."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:49(section/p)
msgid "Speaking of which:"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:50(section/code)
#, no-wrap
msgid ""
"\n"
"const WelcomeToTheGrid = new Lang.Class({\n"
"    Name: 'Welcome to the Grid',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:73(section/p)
msgid ""
"This is the start of the application itself, and the _init function which "
"creates it. It tells _buildUI to create an ApplicationWindow, which we're "
"going to call _window, and it tells our window to present itself whenever "
"needed."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:74(section/p)
msgid ""
"This part, again, is pretty much copy-and-paste, but you always want to give "
"your application a unique name."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:76(section/code)
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 10,\n"
"            title: \"Welcome to the Grid\"});\n"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:87(section/p)
msgid ""
"Finally, we start off the _buildUI function by creating a new "
"ApplicationWindow. We specify that it goes with this application, that it "
"should appear in the center of the screen, and that there should be at least "
"10 pixels between the outside edge and any widgets inside of it. We also give "
"it a title, which will appear at the top of the window."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:91(section/title)
msgid "Reaching into the GTK+ toolbox"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:92(section/p)
msgid ""
"What widgets should we use? Well, let's say we want to write an application "
"that looks like this:"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:96(section/p)
msgid ""
"We're going to need, at the very least, a picture and a text label to go with "
"it. Let's start with the picture:"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:97(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create an image\n"
"        this._image = new Gtk.Image ({ file: \"gnome-image.png\" });\n"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:102(section/p)
msgid ""
"You can download the image file used in this example <link href=\"https://"
"live.gnome.org/TarynFox?action=AttachFile&amp;do=get&amp;target=gnome-image."
"png\">here</link>. Be sure to put it in the same directory as the code you're "
"writing."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:104(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a label\n"
"        this._label = new Gtk.Label ({ label: \"Welcome to GNOME, too!\" });\n"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:108(section/p)
msgid ""
"That code adds in the label beneath. You can see how we create widgets, here; "
"each one is a part of Gtk, and we can give it properties that customize how "
"it behaves. In this case, we set the Image's file property to be the filename "
"of the picture we want, and the Label's label property to be the sentence "
"that we want beneath the picture."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:109(note/p)
msgid ""
"Yes, it sounds redundant for a Label to have a label property, but it's not. "
"Other widgets that contain text have a label property, so it's "
"<em>consistent</em> for the Label widget to have one too."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:110(section/p)
msgid ""
"We can't just add these widgets to our window in order, though, the same way "
"HTML elements appear in the order you write them. That's because an "
"ApplicationWindow can only contain one widget."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:111(section/p)
msgid ""
"How do we get around that? By making that one widget a container widget, "
"which can hold more than one widget and organize them inside it. Behold: The "
"Grid."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:112(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the Grid\n"
"        this._grid = new Gtk.Grid ();\n"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:117(section/p)
msgid ""
"We're not giving it any properties yet. Those will come later, as we learn "
"how to use the Grid's powers. First, let's attach the Image and Label we made "
"to our Grid."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:118(section/code)
#, no-wrap
msgid ""
"\n"
"        // Attach the image and label to the grid\n"
"        this._grid.attach (this._image, 0, 0, 1, 1);\n"
"        this._grid.attach (this._label, 0, 1, 1, 1);\n"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:124(section/p)
msgid ""
"This code looks awfully complicated, but it's not. Here's what those numbers "
"mean:"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:126(item/p)
msgid ""
"The <em>first</em> number is what left-to-right position to put things in, "
"starting from 0. Any widget that uses a 0 here goes all the way to the left."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:127(item/p)
msgid ""
"The <em>second</em> number is what top-to-botton position to put a given "
"widget in, starting from 0. The Label goes beneath the Image, so we give the "
"Image a 0 and the Label a 1 here."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:128(item/p)
msgid ""
"The <em>third</em> and <em>fourth</em> numbers are how many columns and rows "
"a widget should take up. We'll see how these work in a minute."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:131(section/code)
#, no-wrap
msgid ""
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new WelcomeToTheGrid ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:145(section/p)
msgid ""
"Now that we've created the Grid and attached all our widgets to it, we add it "
"to the window and tell the window to show itself, as the last part of the "
"_buildUI function. As always, to finish up we create a new instance of the "
"application's class and tell it to run."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:146(section/p)
msgid ""
"Save your application as welcome_to_the_grid.js. Then, to run your "
"application just open a terminal, go to the directory where your application "
"is at, and type"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:147(section/screen)
#, no-wrap
msgid " <output style=\"prompt\">$ </output>gjs welcome_to_the_grid.js "
msgstr ""

#: C/02_welcome_to_the_grid.js.page:151(section/p)
msgid ""
"There we go! But wait. That doesn't look right. Why is the Label crammed up "
"next to the Image like that? That doesn't look as nice, and it makes it "
"harder to read. What can we do about this?"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:155(section/title)
msgid "Tweaking the Grid"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:157(section/p)
msgid ""
"One thing we can do, is we can give the Label a margin_top property when we "
"create it. This works sort of like setting a margin for an HTML element using "
"inline CSS styling."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:158(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a label\n"
"        this._label = new Gtk.Label ({\n"
"            label: \"Welcome to GNOME, too!\",\n"
"            margin_top: 20 });\n"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:165(section/p)
msgid ""
"Of course, if we do that then if we replace the Label with something else -- "
"or add in another widget -- then we have to repeat the margin_top on it too. "
"Otherwise we end up with something like this:"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:168(section/p)
msgid ""
"We could give the Image a margin_bottom property, but that won't work when "
"the new Label is in a separate column. So how about we try this instead:"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:169(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the Grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            row_spacing: 20 });\n"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:175(section/p)
msgid ""
"That makes it so that there are always 20 pixels of space in between each "
"horizontal row."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:176(note/p)
msgid ""
"Yes, you can also set the column_spacing property on a Grid, or the "
"margin_left and margin_right properties on any widget. Try them out, if you "
"like!"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:180(section/title)
msgid "Adding more widgets"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:182(section/p)
msgid ""
"If we did want to add a second Label, how would we do it so that it actually "
"looked like it belonged there? One way is to center the Image on top, so that "
"it's above both Labels instead of just the one on the left. That's where "
"those other numbers in the Grid's attach method come in:"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:183(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a second label\n"
"        this._labelTwo = new Gtk.Label ({\n"
"            label: \"The cake is a pie.\" });\n"
"\n"
"        // Attach the image and labels to the grid\n"
"        this._grid.attach (this._image, 0, 0, 2, 1);\n"
"        this._grid.attach (this._label, 0, 1, 1, 1);\n"
"        this._grid.attach (this._labelTwo, 1, 1, 1, 1);\n"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:194(section/p)
msgid ""
"After we create the second Label, we attach it to the Grid to the right of "
"the first Label. Remember, the first two numbers count columns and rows from "
"left to right and top to bottom, starting with 0. So if the first Label is in "
"column 0 and row 1, we can put the second in column 1 and row 1 to put it to "
"the right of the first Label."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:195(section/p)
msgid ""
"Note the number 2 in the attach statement for the Image. That's what does the "
"trick here. That number is how many columns the Image spans, remember? So "
"when we put it together, we get something like this:"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:198(section/p)
msgid "There are two things you should take note of, here."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:200(item/p)
msgid ""
"Setting the Image to span two columns doesn't stretch the picture itself "
"horizontally. Instead, it stretches the invisible box taken up by the Image "
"widget to fill both columns, then places the Image in the center of that box."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:201(item/p)
msgid ""
"Even though we've set the Grid's row_spacing and the ApplicationWindow's "
"border_width properties, we haven't yet set anything that puts a border in "
"between the two Labels. They were separate earlier when the Image was in only "
"one column, but now that it spans both GNOME doesn't see a reason to keep "
"them apart."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:204(section/p)
msgid ""
"There are at least three ways we can get around that last one. First, we can "
"set a margin_left or margin_right on one of the Labels:"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:207(section/p)
msgid "Second, we can set the Grid's column_homogenous property to true."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:208(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the Grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            column_homogeneous: true,\n"
"            row_spacing: 20 });\n"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:215(section/p)
msgid "That makes it look something like this:"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:218(section/p)
msgid ""
"And third, we can set the Grid's column_spacing property, the same way we set "
"its row_spacing."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:219(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the Grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            column_spacing: 20,\n"
"            row_spacing: 20 });\n"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:225(section/p)
msgid "That makes it look like this:"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:230(section/title)
#, fuzzy
#| msgid "Loading the images"
msgid "Using stock images"
msgstr "Laden der Bilder"

#: C/02_welcome_to_the_grid.js.page:232(section/p)
msgid ""
"GNOME has a lot of stock images on hand already, that we can use if we don't "
"feel like creating our own or if we want a universally-recognized icon. "
"Here's how we create a stock image, compared to how we create a normal one:"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:233(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create an image\n"
"        this._image = new Gtk.Image ({ file: \"gnome-image.png\" });\n"
"\n"
"        // Create a second image using a stock icon\n"
"        this._icon = new Gtk.Image ({ stock: 'gtk-about' });\n"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:240(section/p)
msgid ""
"After that, we attach it to the Grid to the left of the first Label. (We "
"aren't using the second one for this example.)"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:241(section/code)
#, no-wrap
msgid ""
"\n"
"        // Attach the images and label to the grid\n"
"        this._grid.attach (this._image, 0, 0, 2, 1);\n"
"        this._grid.attach (this._icon,  0, 1, 1, 1);\n"
"        this._grid.attach (this._label, 1, 1, 1, 1);\n"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:247(section/p)
msgid "That gives us this, when we run it:"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:250(section/p)
msgid ""
"That's what the stock \"About\" icon looks like. You can see a list of all "
"the stock items starting with gtk-about in <link href=\"http://developer."
"gnome.org/gtk/2.24/gtk-Stock-Items.html#GTK-STOCK-ABOUT:CAPS\">GNOME's "
"developer documentation</link>. It was written for C programmers, but you "
"don't need to know C to use it; just look at the part in quotation marks, "
"like \"gtk-about\", and copy that part to use the icon next to it."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:251(note/p)
msgid ""
"We put single quotes around 'gtk-about' here because, unlike text strings "
"that have double quotes around them, that part will never need to be "
"translated into another language. In fact, if it <em>were</em> translated "
"it'd break the icon, because its name is still \"gtk-about\" no matter which "
"language you speak."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:256(section/title)
#: C/03_getting_the_signal.js.page:339(section/title)
#: C/hellognome.js.page:186(section/title)
msgid "What's next?"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:257(section/p)
msgid ""
"Before we go on to the next tutorial, let's try something a little different:"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:258(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a button\n"
"        this._button = new Gtk.Button ({\n"
"            label: \"Welcome to GNOME, too!\"});\n"
"\n"
"        // Attach the images and button to the grid\n"
"        this._grid.attach (this._image,  0, 0, 2, 1);\n"
"        this._grid.attach (this._icon,   0, 1, 1, 1);\n"
"        this._grid.attach (this._button, 1, 1, 1, 1);\n"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:269(section/p)
msgid ""
"That's right, we turned the Label into a Button just by changing the name! If "
"you run the application and click on it, though, you'll find that it doesn't "
"do anything. How do we make our Button do something? That's what we'll find "
"out, in <link xref=\"getting_the_signal.js\">our next tutorial</link>."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:270(section/p)
msgid ""
"If you like, feel free to spend some time experimenting with Grids, Labels, "
"and Images, including stock images."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:271(note/p)
msgid ""
"One trick you can use to make more complex layouts is to nest Grids inside of "
"each other. This lets you group together related widgets, and rearrange them "
"easily. Take a look at the <link xref=\"radiobutton.js\">RadioButton</link> "
"code sample if you'd like to see how this is done."
msgstr ""

#: C/02_welcome_to_the_grid.js.page:275(section/title)
#: C/checkbutton.js.page:130(section/title)
#: C/comboboxtext.js.page:170(section/title)
#: C/combobox.js.page:227(section/title)
#: C/hellognome.js.page:193(section/title)
#: C/messagedialog.js.page:183(section/title)
#: C/radiobutton.js.page:268(section/title) C/scale.js.page:202(section/title)
#: C/spinbutton.js.page:193(section/title)
#: C/statusbar.js.page:215(section/title) C/switch.js.page:258(section/title)
#: C/textview.js.page:242(section/title)
#: C/togglebutton.js.page:147(section/title)
#: C/treeview_simple_liststore.js.page:266(section/title)
msgid "Complete code sample"
msgstr ""

#: C/02_welcome_to_the_grid.js.page:276(section/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const WelcomeToTheGrid = new Lang.Class({\n"
"    Name: 'Welcome to the Grid',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 10,\n"
"            title: \"Welcome to the Grid\"});\n"
"\n"
"        // Create the Grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            // column_homogeneous: true,\n"
"            // column_spacing: 20,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Create an image\n"
"        this._image = new Gtk.Image ({ file: \"gnome-image.png\" });\n"
"\n"
"        // Create a second image using a stock icon\n"
"        this._icon = new Gtk.Image ({ stock: 'gtk-about' });\n"
"\n"
"        // Create a label\n"
"        this._label = new Gtk.Label ({\n"
"            label: \"Welcome to GNOME, too!\",\n"
"            /* margin_top: 20 */ });\n"
"\n"
"        /* Create a second label\n"
"        this._labelTwo = new Gtk.Label ({\n"
"            label: \"The cake is a pie.\" }); */\n"
"\n"
"        /* Create a button\n"
"        this._button = new Gtk.Button ({\n"
"            label: \"Welcome to GNOME, too!\"}); */\n"
"\n"
"        // Attach the images and button to the grid\n"
"        this._grid.attach (this._image,  0, 0, 2, 1);\n"
"        this._grid.attach (this._icon,   0, 1, 1, 1);\n"
"        this._grid.attach (this._label,  1, 1, 1, 1);\n"
"\n"
"        // this._grid.attach (this._label, 0, 1, 1, 1);\n"
"        // this._grid.attach (this._labelTwo, 1, 1, 1, 1);\n"
"\n"
"        // this._grid.attach (this._button, 1, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new WelcomeToTheGrid ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/03_getting_the_signal.js.page:36(media)
#: C/03_getting_the_signal.js.page:352(media)
msgctxt "_"
msgid ""
"external ref='media/03_jssignal_01.png' md5='8d6ecab185f4af4534cc255d62b58b8e'"
msgstr ""
"external ref='media/03_jssignal_01.png' md5='8d6ecab185f4af4534cc255d62b58b8e'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/03_getting_the_signal.js.page:156(media)
#: C/03_getting_the_signal.js.page:358(media)
msgctxt "_"
msgid ""
"external ref='media/03_jssignal_02.png' md5='ba941390fbafc4a0f653c8f70bca92c0'"
msgstr ""
"external ref='media/03_jssignal_02.png' md5='ba941390fbafc4a0f653c8f70bca92c0'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/03_getting_the_signal.js.page:160(media)
msgctxt "_"
msgid "external ref='media/03_jssignal_02b.png' md5='__failed__'"
msgstr "external ref='media/03_jssignal_02b.png' md5='__failed__'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/03_getting_the_signal.js.page:232(media)
#: C/03_getting_the_signal.js.page:364(media)
msgctxt "_"
msgid ""
"external ref='media/03_jssignal_03.png' md5='49ecf251b0bf57543c8d79a77b6f306d'"
msgstr ""
"external ref='media/03_jssignal_03.png' md5='49ecf251b0bf57543c8d79a77b6f306d'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/03_getting_the_signal.js.page:303(media)
#: C/03_getting_the_signal.js.page:370(media)
msgctxt "_"
msgid ""
"external ref='media/03_jssignal_04.png' md5='dfc5221ca15ca9fba7d3c76a73804e2d'"
msgstr ""
"external ref='media/03_jssignal_04.png' md5='dfc5221ca15ca9fba7d3c76a73804e2d'"

#: C/03_getting_the_signal.js.page:20(info/desc)
msgid "Create Buttons and other widgets that do things when you click on them."
msgstr ""

#: C/03_getting_the_signal.js.page:23(page/title)
#, fuzzy
#| msgid "Connecting the signals"
msgid "3. Getting the Signal"
msgstr "Verbinden der Signale"

#: C/03_getting_the_signal.js.page:25(synopsis/p)
msgid ""
"In the last tutorial, we learned how to create widgets like Labels, Images, "
"and Buttons. Here, we'll learn how to make Buttons and other input widgets "
"actually do things, by writing functions which handle the signals they send "
"when they are clicked on or interacted with."
msgstr ""

#: C/03_getting_the_signal.js.page:31(section/title)
msgid "A basic application"
msgstr "Eine erste Anwendung"

#: C/03_getting_the_signal.js.page:32(section/p)
msgid ""
"In GNOME, widgets that you can interact with, like Buttons and Switches, send "
"out signals when they are clicked on or activated. A Button, for instance, "
"sends out the \"clicked\" signal when somebody clicks on it. When this "
"happens, GNOME looks for the part in your code that says what to do."
msgstr ""

#: C/03_getting_the_signal.js.page:33(section/p)
msgid ""
"How do we write that code? By connecting that Button's \"clicked\" signal to "
"a callback function, which is a function you write just to handle that "
"signal. So whenever it gives off that signal, the function connected to that "
"signal is run."
msgstr ""

#: C/03_getting_the_signal.js.page:34(section/p)
msgid "Here is an extremely basic example:"
msgstr ""

#: C/03_getting_the_signal.js.page:38(section/p)
msgid ""
"This ApplicationWindow has a Button and a Label inside it, arranged in a "
"Grid. Whenever the Button is clicked, a variable that holds the number of "
"cookies is increased by 1, and the Label that shows how many cookies there "
"are is updated."
msgstr ""

#: C/03_getting_the_signal.js.page:39(note/p)
msgid ""
"The cookies in this example are not the same as the cookies that you get from "
"websites, which store your login information and may keep track of which "
"sites you've visited. They're just imaginary treats. You may bake some real "
"ones if you like."
msgstr ""

#: C/03_getting_the_signal.js.page:40(section/p)
msgid ""
"Here is the basic, boilerplate code that goes at the start of the "
"application, before we start creating the window and widgets. Besides the "
"application having a unique name, the biggest change from the usual "
"boilerplate is that we create a global variable right near the beginning, to "
"hold the number of cookies."
msgstr ""

#: C/03_getting_the_signal.js.page:41(section/code)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// We start out with 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""

#: C/03_getting_the_signal.js.page:72(section/p)
msgid ""
"Take a look at the part that uses our application's connect method and Lang."
"bind, to connect its activate and startup signals to the functions that "
"present the window and build the UI. We're going to do the same thing with "
"our Button when we get to it, except that we're going to connect its \"clicked"
"\" signal instead."
msgstr ""

#: C/03_getting_the_signal.js.page:76(section/title)
msgid "Click the button"
msgstr ""

#: C/03_getting_the_signal.js.page:78(section/p)
msgid ""
"As usual, we'll put all the code to create our Button and other widgets "
"inside the _buildUI function, which is called when the application starts up."
msgstr ""

#: C/03_getting_the_signal.js.page:79(section/code)
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
msgstr ""

#: C/03_getting_the_signal.js.page:84(section/p)
msgid "First, we create the window itself:"
msgstr ""

#: C/03_getting_the_signal.js.page:85(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            title: \"Click the button to get a cookie!\"});\n"
msgstr ""

#: C/03_getting_the_signal.js.page:94(section/p)
msgid ""
"Note that we've set its default_height and default_width properties. These "
"let us control how tall and wide the ApplicationWindow will be, in pixels."
msgstr ""

#: C/03_getting_the_signal.js.page:95(section/p)
msgid ""
"Next, we'll create the Label that shows us the number of cookies. We can use "
"the cookies variable as part of the Label's label property."
msgstr ""

#: C/03_getting_the_signal.js.page:96(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the label\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
msgstr ""

#: C/03_getting_the_signal.js.page:102(section/p)
msgid ""
"Now we'll create the Button. We set its label property to show the text that "
"we want on the Button, and we connect its \"clicked\" signal to a function "
"called _getACookie, which we'll write after we're done building our "
"application's UI."
msgstr ""

#: C/03_getting_the_signal.js.page:103(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the cookie button\n"
"        this._cookieButton = new Gtk.Button ({ label: \"Get a cookie\" });\n"
"\n"
"        // Connect the cookie button to the function that handles clicking it\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
msgstr ""

#: C/03_getting_the_signal.js.page:110(section/p)
msgid ""
"Finally, we create a Grid, attach the Label and Button to it, add it to the "
"window and tell the window to show itself and its contents. That's all we "
"need inside the _buildUI function, so we close it with a bracket, as well as "
"a comma that tells GNOME to go on to the next function. Note that even though "
"we wrote the code for the Label first, we can still attach it to the Grid in "
"a way that will put it on the bottom."
msgstr ""

#: C/03_getting_the_signal.js.page:111(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a grid to arrange everything inside\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._cookieButton, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
msgstr ""

#: C/03_getting_the_signal.js.page:130(section/p)
msgid ""
"Now, we write the _getACookie function. Whenever our Button sends out its "
"\"clicked\" signal, the code in this function will run. In this case, all it "
"does is increase the number of cookies by 1, and update the Label to show the "
"new number of cookies. We do this using the Label's set_label method."
msgstr ""

#: C/03_getting_the_signal.js.page:131(note/p)
msgid ""
"Many widgets have the same properties and methods. Both Labels and Buttons, "
"for instance, have a label property that says what text is inside them, and "
"get_label and set_label methods that let you check what that text is and "
"change it, respectively. So if you learn how one widget works, you'll also "
"know how others like it work."
msgstr ""

#: C/03_getting_the_signal.js.page:132(section/code)
#, no-wrap
msgid ""
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Increase the number of cookies by 1 and update the label\n"
"        cookies++;\n"
"        this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""

#: C/03_getting_the_signal.js.page:144(section/p)
msgid ""
"Finally, we run the application, using the same kind of code as in our last "
"tutorial."
msgstr ""

#: C/03_getting_the_signal.js.page:145(section/code)
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/03_getting_the_signal.js.page:153(section/title)
msgid "Flip the switch"
msgstr ""

#: C/03_getting_the_signal.js.page:154(section/p)
msgid ""
"Buttons aren't the only input widgets in our GTK+ toolbox. We can also use "
"switches, like the one in this example. Switches don't have a label property, "
"so we have to create a separate Label that says what it does to go next to it."
msgstr ""

#: C/03_getting_the_signal.js.page:158(section/p)
msgid ""
"A Switch has two positions, Off and On. When a Switch is turned on, its text "
"and background color change, so you can tell which position it's in."
msgstr ""

#: C/03_getting_the_signal.js.page:162(section/p)
msgid ""
"You may have seen Switches like these in GNOME's accessibility menu, which "
"let you turn features like large text and the on-screen keyboard on and off. "
"In this case, the Switch controls our imaginary cookie dispenser. If the "
"Switch is turned on, you can get cookies by clicking the \"Get a cookie\" "
"Button. If it's turned off, clicking the Button won't do anything."
msgstr ""

#: C/03_getting_the_signal.js.page:163(note/p)
msgid ""
"You can get to the accessibility menu by clicking on the outline of a human, "
"near your name in the upper-right corner of the screen."
msgstr ""

#: C/03_getting_the_signal.js.page:164(section/p)
msgid "Here's how we create the Switch:"
msgstr ""

#: C/03_getting_the_signal.js.page:165(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the switch that controls whether or not you can win\n"
"        this._cookieSwitch = new Gtk.Switch ();\n"
msgstr ""

#: C/03_getting_the_signal.js.page:170(section/p)
msgid ""
"We don't actually need to connect the Switch to anything. All we need to do "
"is write an if statement in our _getACookie function, to check to see if the "
"Switch is turned on. If we wanted to make something happen as soon as you "
"flip the Switch, though, we would connect its notify::active signal, like so:"
msgstr ""

#: C/03_getting_the_signal.js.page:171(section/code)
#, no-wrap
msgid ""
"\n"
"        // Connect the switch to the function that handles it\n"
"        this._cookieSwitch.connect ('notify::active', Lang.bind (this, this._cookieDispenser));\n"
msgstr ""

#: C/03_getting_the_signal.js.page:176(section/p)
msgid ""
"A Switch is set to the off position by default. If we wanted the Switch to "
"start out turned on, we would set the value of its active property to true "
"when we create it."
msgstr ""

#: C/03_getting_the_signal.js.page:177(section/code)
#, no-wrap
msgid ""
"\n"
"        this._cookieSwitch = new Gtk.Switch ({ active: true });\n"
msgstr ""

#: C/03_getting_the_signal.js.page:181(section/p)
msgid ""
"Let's just create it normally, though, and then create the Label that goes "
"with it. We want the Switch and the Label to be kept right next to each "
"other, so we'll create a Grid just for them, then put that Grid in our larger "
"Grid that holds all the widgets inside it. Here's what the code looks like to "
"create all that:"
msgstr ""

#: C/03_getting_the_signal.js.page:182(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the switch that controls whether or not you can win\n"
"        this._cookieSwitch = new Gtk.Switch ();\n"
"\n"
"        // Create the label to go with the switch\n"
"        this._switchLabel = new Gtk.Label ({\n"
"            label: \"Cookie dispenser\" });\n"
"\n"
"        // Create a grid for the switch and its label\n"
"        this._switchGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Put the switch and its label inside that grid\n"
"        this._switchGrid.attach (this._switchLabel, 0, 0, 1, 1);\n"
"        this._switchGrid.attach (this._cookieSwitch, 1, 0, 1, 1);\n"
msgstr ""

#: C/03_getting_the_signal.js.page:200(section/p)
msgid "And now we arrange everything in the larger Grid like so."
msgstr ""

#: C/03_getting_the_signal.js.page:201(section/code)
#, no-wrap
msgid ""
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._cookieButton, 0, 0, 1, 1);\n"
"        this._grid.attach (this._switchGrid, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
msgstr ""

#: C/03_getting_the_signal.js.page:208(section/p)
msgid ""
"Now we change the _getACookie function so that it checks to see if the cookie "
"dispenser is turned on. We do that by using the Switch's get_active method. "
"It returns true if the Switch is turned on, and false if the Switch is turned "
"off."
msgstr ""

#: C/03_getting_the_signal.js.page:209(note/p)
msgid ""
"When a method is used in an if statement like this, the code inside the if "
"statement is executed if the method returns true."
msgstr ""

#: C/03_getting_the_signal.js.page:210(section/code)
#, no-wrap
msgid ""
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Is the cookie dispenser turned on?\n"
"        if (this._cookieSwitch.get_active()) {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
msgstr ""

#: C/03_getting_the_signal.js.page:228(section/title)
msgid "Tuning the radio"
msgstr ""

#: C/03_getting_the_signal.js.page:230(section/p)
msgid ""
"Another type of input widget we can use is called the RadioButton. You create "
"them in groups, and then only one RadioButton in a group can be selected at a "
"time. They're called RadioButtons because they work like the channel preset "
"button in old-style car radios. The radio could only be tuned to one station "
"at a time, so whenever you pressed one button in, another would pop back out."
msgstr ""

#: C/03_getting_the_signal.js.page:234(section/p)
msgid ""
"First off, let's change our ApplicationWindow's name and increase its "
"border_width property, so that our widgets aren't packed in too tightly. The "
"border_width is the number of pixels between any widget and the edge of the "
"window."
msgstr ""

#: C/03_getting_the_signal.js.page:235(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            border_width: 20,\n"
"            title: \"Choose the one that says 'cookie'!\"});\n"
msgstr ""

#: C/03_getting_the_signal.js.page:246(section/p)
msgid ""
"After that, we create the RadioButtons. Remember how they're created in "
"groups? The way we do that, is we set each new RadioButton's group property "
"to the name of another RadioButton."
msgstr ""

#: C/03_getting_the_signal.js.page:247(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the radio buttons\n"
"        this._cookieButton = new Gtk.RadioButton ({ label: \"Cookie\" });\n"
"        this._notCookieOne = new Gtk.RadioButton ({ label: \"Not cookie\",\n"
"            group: this._cookieButton });\n"
"        this._notCookieTwo = new Gtk.RadioButton ({ label: \"Not cookie\",\n"
"            group: this._cookieButton });\n"
msgstr ""

#: C/03_getting_the_signal.js.page:256(section/p)
msgid ""
"Next, we create a Grid for the RadioButtons. Remember, we don't have to "
"arrange things in Grids in the same order that we create them in."
msgstr ""

#: C/03_getting_the_signal.js.page:257(section/code)
#, no-wrap
msgid ""
"\n"
"        // Arrange the radio buttons in their own grid\n"
"        this._radioGrid = new Gtk.Grid ();\n"
"        this._radioGrid.attach (this._notCookieOne, 0, 0, 1, 1);\n"
"        this._radioGrid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._radioGrid.attach (this._notCookieTwo, 0, 2, 1, 1);\n"
msgstr ""

#: C/03_getting_the_signal.js.page:265(section/p)
msgid ""
"Normally, the RadioButton that's selected by default is the one that's the "
"name of the group. We want the first \"Not cookie\" button to be selected by "
"default, though, so we use its set_active method."
msgstr ""

#: C/03_getting_the_signal.js.page:266(note/p)
msgid "We could also set its active property to true when we create it."
msgstr ""

#: C/03_getting_the_signal.js.page:267(section/code)
#, no-wrap
msgid ""
"\n"
"        // Set the button that will be at the top to be active by default\n"
"        this._notCookieOne.set_active (true);\n"
msgstr ""

#: C/03_getting_the_signal.js.page:272(section/p)
msgid "Now we arrange everything in our main Grid like usual ..."
msgstr ""

#: C/03_getting_the_signal.js.page:273(section/code)
#, no-wrap
msgid ""
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._radioGrid, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
msgstr ""

#: C/03_getting_the_signal.js.page:280(section/p)
msgid ""
"And then we change our _getACookie function to test to see if the cookie "
"button is the one that's selected."
msgstr ""

#: C/03_getting_the_signal.js.page:281(section/code)
#, no-wrap
msgid ""
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Did you select \"cookie\" instead of \"not cookie\"?\n"
"        if (this._cookieButton.get_active()) {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
msgstr ""

#: C/03_getting_the_signal.js.page:299(section/title)
msgid "Can you spell \"cookie\"?"
msgstr ""

#: C/03_getting_the_signal.js.page:301(section/p)
msgid ""
"The last input widget we're going to cover is the Entry widget, which is used "
"for single-line text entry."
msgstr ""

#: C/03_getting_the_signal.js.page:302(note/p)
msgid ""
"If you need to be able to enter in a whole paragraph or more, like if you are "
"building a text editor, you'll want to look at the much more customizable "
"<link xref=\"textview.js\">TextView</link> widget."
msgstr ""

#: C/03_getting_the_signal.js.page:305(section/p)
msgid "After we change the window's name, we create the Entry widget."
msgstr ""

#: C/03_getting_the_signal.js.page:306(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the text entry field\n"
"        this._spellCookie = new Gtk.Entry ();\n"
msgstr ""

#: C/03_getting_the_signal.js.page:311(section/p)
msgid "Next, we arrange everything in the Grid ..."
msgstr ""

#: C/03_getting_the_signal.js.page:312(section/code)
#, no-wrap
msgid ""
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._spellCookie, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
msgstr ""

#: C/03_getting_the_signal.js.page:319(section/p)
msgid ""
"And now we modify _getACookie's if statement again, using the Entry's "
"get_text method to retrieve the text that you entered into it and see if you "
"spelled \"cookie\" right. We don't care whether you capitalize \"cookie\" or "
"not, so we use JavaScript's built-in toLowerCase method to change the Entry's "
"text to all lower case inside the if statement."
msgstr ""

#: C/03_getting_the_signal.js.page:320(note/p)
msgid ""
"An Entry widget doesn't have a label property, which is a set text string "
"that the user can't change. (You can't normally change the label on a Button, "
"for instance.) Instead, it has a text property, which changes to match what "
"the user types in."
msgstr ""

#: C/03_getting_the_signal.js.page:321(section/code)
#, no-wrap
msgid ""
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Did you spell \"cookie\" correctly?\n"
"        if ((this._spellCookie.get_text()).toLowerCase() == \"cookie\") {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
msgstr ""

#: C/03_getting_the_signal.js.page:340(section/p)
msgid ""
"<link xref=\"04_popup_dialog_boxes.js\">Click here</link> to go on to the "
"next tutorial. Or keep reading, if you'd like to see the complete code for "
"each version of our cookie maker application."
msgstr ""

#: C/03_getting_the_signal.js.page:341(note/p)
msgid ""
"The main JavaScript tutorials page has <link xref=\"beginner.js#buttons"
"\">more detailed code samples</link> for each input widget, including several "
"not covered here."
msgstr ""

#: C/03_getting_the_signal.js.page:346(section/title)
msgid "Complete code samples"
msgstr ""

#: C/03_getting_the_signal.js.page:351(section/title)
msgid "Code sample with Button"
msgstr ""

#: C/03_getting_the_signal.js.page:353(section/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// We start out with 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            title: \"Click the button to get a cookie!\"});\n"
"\n"
"        // Create the label\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
"\n"
"        // Create the cookie button\n"
"        this._cookieButton = new Gtk.Button ({ label: \"Get a cookie\" });\n"
"\n"
"        // Connect the cookie button to the function that handles clicking it\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
"\n"
"        // Create a grid to arrange everything inside\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._cookieButton, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Increase the number of cookies by 1 and update the label\n"
"        cookies++;\n"
"        this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/03_getting_the_signal.js.page:357(section/title)
msgid "Code sample with Switch"
msgstr ""

#: C/03_getting_the_signal.js.page:359(section/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// We start out with 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            title: \"Click the button to get a cookie!\"});\n"
"\n"
"        // Create the label\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
"\n"
"        // Create the cookie button\n"
"        this._cookieButton = new Gtk.Button ({\n"
"            label: \"Get a cookie\" });\n"
"\n"
"        // Connect the cookie button to the function that handles clicking it\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
"\n"
"        // Create the switch that controls whether or not you can win\n"
"        this._cookieSwitch = new Gtk.Switch ();\n"
"\n"
"        // Create the label to go with the switch\n"
"        this._switchLabel = new Gtk.Label ({\n"
"            label: \"Cookie dispenser\" });\n"
"\n"
"        // Create a grid for the switch and its label\n"
"        this._switchGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Put the switch and its label inside that grid\n"
"        this._switchGrid.attach (this._switchLabel, 0, 0, 1, 1);\n"
"        this._switchGrid.attach (this._cookieSwitch, 1, 0, 1, 1);\n"
"\n"
"        // Create a grid to arrange everything else inside\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._cookieButton, 0, 0, 1, 1);\n"
"        this._grid.attach (this._switchGrid, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Is the cookie dispenser turned on?\n"
"        if (this._cookieSwitch.get_active()) {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/03_getting_the_signal.js.page:363(section/title)
msgid "Code sample with RadioButton"
msgstr ""

#: C/03_getting_the_signal.js.page:365(section/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// We start out with 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            border_width: 20,\n"
"            title: \"Choose the one that says 'cookie'!\"});\n"
"\n"
"        // Create the radio buttons\n"
"        this._cookieButton = new Gtk.RadioButton ({ label: \"Cookie\" });\n"
"        this._notCookieOne = new Gtk.RadioButton ({ label: \"Not cookie\",\n"
"            group: this._cookieButton });\n"
"        this._notCookieTwo = new Gtk.RadioButton ({ label: \"Not cookie\",\n"
"            group: this._cookieButton });\n"
"\n"
"        // Arrange the radio buttons in their own grid\n"
"        this._radioGrid = new Gtk.Grid ();\n"
"        this._radioGrid.attach (this._notCookieOne, 0, 0, 1, 1);\n"
"        this._radioGrid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._radioGrid.attach (this._notCookieTwo, 0, 2, 1, 1);\n"
"\n"
"        // Set the button that will be at the top to be active by default\n"
"        this._notCookieOne.set_active (true);\n"
"\n"
"        // Create the cookie button\n"
"        this._cookieButton = new Gtk.Button ({\n"
"            label: \"Get a cookie\" });\n"
"\n"
"        // Connect the cookie button to the function that handles clicking it\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
"\n"
"        // Create the label\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
"\n"
"        // Create a grid to arrange everything inside\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._radioGrid, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Did you select \"cookie\" instead of \"not cookie\"?\n"
"        if (this._cookieButton.get_active()) {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/03_getting_the_signal.js.page:369(section/title)
msgid "Code sample with Entry"
msgstr ""

#: C/03_getting_the_signal.js.page:371(section/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// We start out with 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            border_width: 20,\n"
"            title: \"Spell 'cookie' to get a cookie!\"});\n"
"\n"
"        // Create the text entry field\n"
"        this._spellCookie = new Gtk.Entry ();\n"
"\n"
"        // Create the cookie button\n"
"        this._cookieButton = new Gtk.Button ({\n"
"            label: \"Get a cookie\" });\n"
"\n"
"        // Connect the cookie button to the function that handles clicking it\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
"\n"
"        // Create the label\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
"\n"
"        // Create a grid to arrange everything inside\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._spellCookie, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Did you spell \"cookie\" correctly?\n"
"        if ((this._spellCookie.get_text()).toLowerCase() == \"cookie\") {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/aboutdialog.c.page:24(media) C/aboutdialog.js.page:20(media)
#: C/aboutdialog.py.page:22(media) C/aboutdialog.vala.page:29(media)
msgctxt "_"
msgid ""
"external ref='media/aboutdialog_GMenu.png' "
"md5='a36117a559fa98e25e2f6b3db593639f'"
msgstr ""
"external ref='media/aboutdialog_GMenu.png' "
"md5='a36117a559fa98e25e2f6b3db593639f'"

#: C/aboutdialog.c.page:7(info/title)
msgctxt "text"
msgid "AboutDialog (C)"
msgstr ""

#: C/aboutdialog.c.page:14(credit/name) C/button.c.page:14(credit/name)
#: C/dialog.c.page:14(credit/name) C/entry.c.page:12(credit/name)
#: C/grid.c.page:12(credit/name) C/image.c.page:12(credit/name)
#: C/label.c.page:13(credit/name) C/linkbutton.c.page:12(credit/name)
#: C/menubar.c.page:14(credit/name) C/messagedialog.c.page:13(credit/name)
#: C/progressbar.c.page:13(credit/name) C/radiobutton.c.page:14(credit/name)
#: C/scale.c.page:14(credit/name) C/scrolledwindow.c.page:14(credit/name)
#: C/spinbutton.c.page:15(credit/name) C/spinner.c.page:13(credit/name)
#: C/statusbar.c.page:16(credit/name) C/switch.c.page:12(credit/name)
#: C/textview.c.page:12(credit/name) C/togglebutton.c.page:16(credit/name)
#: C/toolbar.c.page:14(credit/name)
msgid "Monica Kochofar"
msgstr ""

#: C/aboutdialog.c.page:19(info/desc) C/aboutdialog.js.page:16(info/desc)
#: C/aboutdialog.vala.page:25(info/desc)
#, fuzzy
#| msgid "Designing the application"
msgid "Display information about an application"
msgstr "Entwurf der Anwendung"

#: C/aboutdialog.c.page:22(page/title) C/aboutdialog.js.page:19(page/title)
#: C/aboutdialog.py.page:21(page/title) C/aboutdialog.vala.page:28(page/title)
msgid "AboutDialog"
msgstr ""

#: C/aboutdialog.c.page:25(page/p) C/aboutdialog.vala.page:30(page/p)
msgid "An AboutDialog example using Gtk.ApplicationWindow and Menu"
msgstr ""

#: C/aboutdialog.c.page:26(note/p) C/aboutdialog.vala.page:31(note/p)
#: C/gmenu.c.page:23(note/p)
msgid ""
"<em style=\"bold\">You need to be running Gtk3.4 or later for this to work</"
"em>"
msgstr ""

#: C/aboutdialog.c.page:28(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* Callback function in which reacts to the \"response\" signal from the user in\n"
" * the message dialog window.\n"
" * This function is used to destroy the dialog window.\n"
" */\n"
"static void\n"
"on_close (GtkDialog *dialog,\n"
"          gint       response_id,\n"
"          gpointer   user_data)\n"
"{\n"
"  /*This will cause the dialog to be destroyed*/\n"
"  gtk_widget_destroy (GTK_WIDGET (dialog));\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the response signal \"activate\" related to the SimpleAction\n"
" * \"about_action\".\n"
" * This function is used to cause the about dialog window to popup.\n"
" */\n"
"static void\n"
"about_cb (GSimpleAction *simple,\n"
"          GVariant      *parameter,\n"
"          gpointer       user_data)\n"
"{\n"
"   GtkWidget *about_dialog;\n"
"\n"
"   about_dialog = gtk_about_dialog_new ();\n"
"\n"
"   /* Lists of authors/ documentators to be used later, they must be initialized\n"
"    * in a null terminated array of strings.\n"
"    */\n"
"   const gchar *authors[] = {\"GNOME Documentation Team\", NULL};\n"
"   const gchar *documenters[] = {\"GNOME Documentation Team\", NULL};\n"
"\n"
"   /* We fill in the information for the about dialog */\n"
"   gtk_about_dialog_set_program_name (GTK_ABOUT_DIALOG (about_dialog), \"AboutDialog Example\");\n"
"   gtk_about_dialog_set_copyright (GTK_ABOUT_DIALOG (about_dialog), \"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\");\n"
"   gtk_about_dialog_set_authors (GTK_ABOUT_DIALOG (about_dialog), authors);\n"
"   gtk_about_dialog_set_documenters (GTK_ABOUT_DIALOG (about_dialog), documenters);\n"
"   gtk_about_dialog_set_website_label (GTK_ABOUT_DIALOG (about_dialog), \"GNOME Developer Website\");\n"
"   gtk_about_dialog_set_website (GTK_ABOUT_DIALOG (about_dialog), \"http://developer.gnome.org\");\n"
"\n"
"  /* We do not wish to show the title, which in this case would be \n"
"   * \"AboutDialog Example\". We have to reset the title of the messagedialog \n"
"   * window after setting the program name.\n"
"   */\n"
"  gtk_window_set_title (GTK_WINDOW (about_dialog), \"\");\n"
"\n"
"  /* To close the aboutdialog when \"close\" is clicked we connect the response \n"
"   * signal to on_close\n"
"   */\n"
"  g_signal_connect (GTK_DIALOG (about_dialog), \"response\", \n"
"                    G_CALLBACK (on_close), NULL);\n"
"\n"
"  /* Show the about dialog */\n"
"  gtk_widget_show (about_dialog); \n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  GSimpleAction *about_action;\n"
"\n"
"  /* Create a window with a title and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"AboutDialog Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);\n"
"\n"
"  /* Create a new simple action, giving it a NULL parameter type. It will \n"
"   * always be NULL for actions invoked from a menu. (e.g clicking on an \"ok\" \n"
"   * or \"cancel\" button)\n"
"   */\n"
"  about_action = g_simple_action_new (\"about\", NULL); \n"
"\n"
"  /* Connect the \"activate\" signal to the appropriate callback function. \n"
"   * It will indicate that the action was just activated.\n"
"   */\n"
"  g_signal_connect (about_action, \"activate\", G_CALLBACK (about_cb), \n"
"                    GTK_WINDOW (window));\n"
"\n"
"  /* Adds the about_action to the overall action map. An Action map is an \n"
"   * interface that contains a number of named GAction instances \n"
"   * (such as about_action) \n"
"   */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (about_action));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the response signal \"activate\" from the \"quit\" action \n"
" * found in the function directly below.\n"
" */ \n"
"static void\n"
"quit_cb (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the menu we are creating in this sample */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GMenu *menu;\n"
"  GSimpleAction *quit_action;\n"
"\n"
"  /* Initialize the GMenu, and add a menu item with label \"About\" and action \n"
"   * \"win.about\". Also add another menu item with label \"Quit\" and action \n"
"   * \"app.quit\" \n"
"   */\n"
"  menu = g_menu_new ();\n"
"  g_menu_append (menu, \"About\", \"win.about\");\n"
"  g_menu_append (menu, \"Quit\", \"app.quit\");\n"
"\n"
"  /* Create a new simple action for the application. (In this case it is the \n"
"   * \"quit\" action.\n"
"   */\n"
"  quit_action = g_simple_action_new (\"quit\", NULL);\n"
"\n"
"  /* Ensure that the menu we have just created is set for the overall application */\n"
"  gtk_application_set_app_menu (GTK_APPLICATION (app), G_MENU_MODEL (menu));\n"
"\n"
"  g_signal_connect (quit_action, \n"
"                    \"activate\", \n"
"                    G_CALLBACK (quit_cb), \n"
"                    app);\n"
"\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (quit_action));\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the application */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""

#: C/aboutdialog.c.page:30(page/p) C/aboutdialog.js.page:24(page/p)
#: C/aboutdialog.py.page:41(section/p) C/aboutdialog.vala.page:34(page/p)
#: C/button.c.page:29(page/p) C/button.js.page:26(page/p)
#: C/button.py.page:52(section/p) C/buttonbox.py.page:46(section/p)
#: C/checkbutton.c.page:25(page/p) C/checkbutton.py.page:42(section/p)
#: C/checkbutton.vala.page:25(page/p) C/colorbutton.py.page:40(section/p)
#: C/colorbutton.vala.page:27(page/p) C/comboboxtext.js.page:176(section/p)
#: C/combobox.js.page:233(section/p) C/combobox.py.page:42(section/p)
#: C/combobox.vala.page:25(page/p) C/combobox_multicolumn.py.page:41(section/p)
#: C/dialog.c.page:29(page/p) C/dialog.js.page:25(page/p)
#: C/dialog.py.page:46(section/p) C/dialog.vala.page:27(page/p)
#: C/entry.c.page:27(page/p) C/entry.js.page:25(page/p)
#: C/entry.py.page:61(section/p) C/entry.vala.page:25(page/p)
#: C/filechooserdialog.py.page:70(section/p)
#: C/filechooserdialog.vala.page:35(section/p)
#: C/fontchooserwidget.py.page:44(section/p) C/gmenu.c.page:27(page/p)
#: C/gmenu.js.page:25(page/p) C/gmenu.py.page:77(section/p)
#: C/gmenu.vala.page:37(page/p) C/grid.c.page:27(page/p)
#: C/grid.js.page:29(page/p) C/grid.py.page:54(section/p)
#: C/grid.vala.page:27(page/p) C/GtkApplicationWindow.c.page:25(page/p)
#: C/GtkApplicationWindow.js.page:26(page/p)
#: C/GtkApplicationWindow.py.page:50(section/p)
#: C/GtkApplicationWindow.vala.page:26(page/p) C/image.c.page:28(page/p)
#: C/image.js.page:27(page/p) C/image.py.page:100(section/p)
#: C/image.vala.page:27(page/p) C/label.c.page:32(page/p)
#: C/label.js.page:25(page/p) C/label.py.page:87(section/p)
#: C/label.vala.page:26(page/p) C/linkbutton.c.page:27(page/p)
#: C/linkbutton.js.page:25(page/p) C/linkbutton.py.page:44(section/p)
#: C/linkbutton.vala.page:25(page/p) C/menubar.c.page:32(page/p)
#: C/menubar.py.page:183(section/p) C/menubar.vala.page:187(section/p)
#: C/menubutton.js.page:28(page/p) C/menubutton.py.page:53(section/p)
#: C/menubutton.vala.page:28(page/p) C/messagedialog.c.page:31(page/p)
#: C/messagedialog.js.page:189(section/p) C/messagedialog.py.page:54(section/p)
#: C/messagedialog.vala.page:26(page/p) C/paned.py.page:39(section/p)
#: C/progressbar.c.page:28(page/p) C/progressbar.js.page:34(page/p)
#: C/progressbar.py.page:54(section/p) C/progressbar.vala.page:25(page/p)
#: C/radiobutton.c.page:29(page/p) C/radiobutton.py.page:46(section/p)
#: C/radiobutton.vala.page:28(page/p) C/scale.c.page:29(page/p)
#: C/scale.py.page:54(section/p) C/scale.vala.page:27(page/p)
#: C/scrolledwindow.c.page:29(page/p) C/scrolledwindow.py.page:42(section/p)
#: C/scrolledwindow.vala.page:26(page/p) C/separator.py.page:36(section/p)
#: C/spinbutton.c.page:30(page/p) C/spinbutton.py.page:46(section/p)
#: C/spinbutton.vala.page:27(page/p) C/spinner.c.page:28(page/p)
#: C/spinner.js.page:25(page/p) C/spinner.py.page:39(section/p)
#: C/spinner.vala.page:25(page/p) C/statusbar.c.page:31(page/p)
#: C/statusbar.py.page:50(section/p) C/statusbar.vala.page:28(page/p)
#: C/switch.c.page:28(page/p) C/switch.py.page:42(section/p)
#: C/switch.vala.page:31(page/p) C/textview.c.page:31(page/p)
#: C/textview.py.page:93(section/p) C/textview.vala.page:30(page/p)
#: C/togglebutton.c.page:31(page/p) C/togglebutton.py.page:41(section/p)
#: C/togglebutton.vala.page:28(page/p) C/toolbar.c.page:30(page/p)
#: C/toolbar.js.page:26(page/p) C/toolbar.py.page:52(section/p)
#: C/toolbar.vala.page:29(page/p) C/toolbar_builder.py.page:191(section/p)
#: C/toolbar_builder.vala.page:146(page/p) C/tooltip.py.page:55(section/p)
#: C/treeview_advanced_liststore.py.page:41(section/p)
#: C/treeview_cellrenderertoggle.py.page:41(section/p)
#: C/treeview_simple_liststore.js.page:272(section/p)
#: C/treeview_simple_liststore.py.page:42(section/p)
#: C/treeview_simple_liststore.vala.page:27(page/p)
#: C/treeview_treestore.py.page:41(section/p) C/window.c.page:29(page/p)
#: C/window.py.page:61(section/p) C/window.vala.page:33(page/p)
msgid "In this sample we used the following:"
msgstr ""

#: C/aboutdialog.c.page:34(item/p) C/button.c.page:33(item/p)
#: C/dialog.c.page:33(item/p) C/entry.c.page:31(item/p)
#: C/grid.c.page:31(item/p) C/GtkApplicationWindow.c.page:29(item/p)
#: C/image.c.page:32(item/p) C/label.c.page:36(item/p)
#: C/linkbutton.c.page:31(item/p) C/messagedialog.c.page:35(item/p)
#: C/progressbar.c.page:32(item/p) C/radiobutton.c.page:33(item/p)
#: C/scale.c.page:33(item/p) C/spinbutton.c.page:34(item/p)
#: C/spinner.c.page:32(item/p) C/statusbar.c.page:35(item/p)
#: C/switch.c.page:32(item/p) C/textview.c.page:35(item/p)
#: C/togglebutton.c.page:35(item/p) C/window.c.page:33(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/3.4/GtkApplication.html"
"\">GtkApplication</link>"
msgstr ""

#: C/aboutdialog.c.page:35(item/p) C/button.c.page:34(item/p)
#: C/dialog.c.page:34(item/p) C/entry.c.page:32(item/p)
#: C/grid.c.page:32(item/p) C/linkbutton.c.page:32(item/p)
#: C/messagedialog.c.page:37(item/p) C/progressbar.c.page:33(item/p)
#: C/radiobutton.c.page:34(item/p) C/scale.c.page:34(item/p)
#: C/spinbutton.c.page:35(item/p) C/spinner.c.page:33(item/p)
#: C/statusbar.c.page:36(item/p) C/switch.c.page:33(item/p)
#: C/textview.c.page:36(item/p) C/togglebutton.c.page:36(item/p)
#: C/window.c.page:34(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/3.4/GtkWindow.html\">GtkWindow</"
"link>"
msgstr ""

#: C/aboutdialog.c.page:36(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkAboutDialog.html"
"\">GtkAboutDialog</link>"
msgstr ""

#: C/aboutdialog.c.page:37(item/p) C/aboutdialog.py.page:47(item/p)
#: C/messagedialog.c.page:41(item/p) C/messagedialog.py.page:63(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gio/stable/GMenu.html\">GMenu</link>"
msgstr ""

#: C/aboutdialog.c.page:38(item/p) C/messagedialog.c.page:40(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gio/stable/GActionMap.html"
"\">GActionMap</link>"
msgstr ""

#: C/aboutdialog.js.page:6(info/title)
msgctxt "text"
msgid "AboutDialog (JavaScript)"
msgstr ""

#: C/aboutdialog.js.page:21(page/p)
msgid ""
"A modal dialog window which shows information about an application and its "
"creators. This one is triggered by clicking \"About\" in the application's "
"menu, which is normally a good place to put it."
msgstr ""

#: C/aboutdialog.js.page:23(page/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const AboutDialogExample = new Lang.Class({\n"
"    Name: 'AboutDialog Example',\n"
"\n"
"    // Create the application itself\n"
"        _init: function() {\n"
"            this.application = new Gtk.Application({\n"
"                application_id: 'org.example.jsaboutdialog',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal creates the menu and builds the UI\n"
"    _onStartup: function() {\n"
"        this._initMenus();\n"
"        this._buildUI();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function(){\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"AboutDialog Example\",\n"
"                                                   default_height: 250,\n"
"                                                   default_width: 350 });\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    // Create the application menu\n"
"    _initMenus: function() {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"About\", 'app.about');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // Create the \"About\" menu option and have it call the _showAbout() function\n"
"        let aboutAction = new Gio.SimpleAction({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        // Create the \"Quit\" menu option and have it close the window\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"    _showAbout: function() {\n"
"\n"
"        // String arrays of the names of the people involved in the project\n"
"        var authors = [\"GNOME Documentation Team\"];\n"
"        var documenters = [\"GNOME Documentation Team\"];\n"
"\n"
"        // Create the About dialog\n"
"        let aboutDialog = new Gtk.AboutDialog({ title: \"AboutDialog Example\",\n"
"                                                program_name: \"GtkApplication Example\",\n"
"                                                copyright: \"Copyright \\xa9 2012 GNOME Documentation Team\",\n"
"                                                authors: authors,\n"
"                                                documenters: documenters,\n"
"                                                website: \"http://developer.gnome.org\",\n"
"                                                website_label: \"GNOME Developer Website\" });\n"
"\n"
"        // Attach the About dialog to the window\n"
"        aboutDialog.modal = true;\n"
"        aboutDialog.transient_for = this._window;\n"
"\n"
"        // Show the About dialog\n"
"        aboutDialog.show();\n"
"\n"
"        // Connect the Close button to the destroy signal for the dialog\n"
"        aboutDialog.connect('response', function() {\n"
"            aboutDialog.destroy();\n"
"        });\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new AboutDialogExample();\n"
"app.application.run(ARGV);\n"
msgstr ""

#: C/aboutdialog.js.page:28(item/p) C/gmenu.c.page:31(item/p)
#: C/gmenu.js.page:29(item/p) C/gmenu.py.page:79(item/p)
#: C/messagedialog.js.page:193(item/p) C/switch.js.page:265(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gio/unstable/GMenu.html\">GMenu</link>"
msgstr ""

#: C/aboutdialog.js.page:29(item/p) C/filechooserdialog.py.page:79(item/p)
#: C/gmenu.c.page:32(item/p) C/gmenu.js.page:30(item/p)
#: C/gmenu.py.page:80(item/p) C/menubar.c.page:38(item/p)
#: C/messagedialog.js.page:194(item/p) C/messagedialog.py.page:61(item/p)
#: C/switch.js.page:266(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gio/stable/GSimpleAction.html"
"\">GSimpleAction</link>"
msgstr ""

#: C/aboutdialog.js.page:30(item/p)
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.AboutDialog."
"html\">Gtk.AboutDialog</link>"
msgstr ""

#: C/aboutdialog.js.page:31(item/p) C/button.js.page:30(item/p)
#: C/checkbutton.js.page:137(item/p) C/comboboxtext.js.page:180(item/p)
#: C/combobox.js.page:237(item/p) C/dialog.js.page:29(item/p)
#: C/entry.js.page:29(item/p) C/grid.js.page:33(item/p)
#: C/GtkApplicationWindow.js.page:30(item/p) C/image.js.page:31(item/p)
#: C/label.js.page:29(item/p) C/linkbutton.js.page:29(item/p)
#: C/messagedialog.js.page:195(item/p) C/progressbar.js.page:39(item/p)
#: C/radiobutton.js.page:275(item/p) C/scale.js.page:210(item/p)
#: C/spinbutton.js.page:201(item/p) C/spinner.js.page:30(item/p)
#: C/statusbar.js.page:222(item/p) C/switch.js.page:267(item/p)
#: C/textview.js.page:249(item/p) C/togglebutton.js.page:154(item/p)
#: C/treeview_simple_liststore.js.page:276(item/p) C/window.js.page:38(item/p)
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Application."
"html\">Gtk.Application</link>"
msgstr ""

#: C/aboutdialog.js.page:32(item/p) C/button.js.page:31(item/p)
#: C/checkbutton.js.page:138(item/p) C/comboboxtext.js.page:181(item/p)
#: C/combobox.js.page:238(item/p) C/dialog.js.page:30(item/p)
#: C/entry.js.page:30(item/p) C/grid.js.page:34(item/p)
#: C/GtkApplicationWindow.js.page:31(item/p) C/image.js.page:32(item/p)
#: C/label.js.page:30(item/p) C/linkbutton.js.page:30(item/p)
#: C/messagedialog.js.page:196(item/p) C/progressbar.js.page:40(item/p)
#: C/radiobutton.js.page:276(item/p) C/scale.js.page:211(item/p)
#: C/spinbutton.js.page:202(item/p) C/spinner.js.page:31(item/p)
#: C/statusbar.js.page:223(item/p) C/switch.js.page:268(item/p)
#: C/textview.js.page:250(item/p) C/togglebutton.js.page:155(item/p)
#: C/treeview_simple_liststore.js.page:277(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkApplicationWindow.html"
"\">Gtk.ApplicationWindow</link>"
msgstr ""

#: C/aboutdialog.py.page:7(info/title)
msgctxt "text"
msgid "AboutDialog (Python)"
msgstr ""

#: C/aboutdialog.py.page:13(credit/name) C/beginner.c.page:19(credit/name)
#: C/beginner.js.page:15(credit/name) C/beginner.py.page:18(credit/name)
#: C/beginner.vala.page:18(credit/name) C/button.py.page:14(credit/name)
#: C/buttonbox.py.page:14(credit/name) C/checkbutton.py.page:13(credit/name)
#: C/colorbutton.py.page:13(credit/name) C/combobox.py.page:14(credit/name)
#: C/combobox_multicolumn.py.page:13(credit/name)
#: C/dialog.py.page:14(credit/name) C/entry.py.page:14(credit/name)
#: C/filechooserdialog.py.page:16(credit/name)
#: C/fontchooserwidget.py.page:14(credit/name) C/gmenu.py.page:20(credit/name)
#: C/grid.py.page:20(credit/name)
#: C/GtkApplicationWindow.py.page:19(credit/name)
#: C/guitar-tuner.c.page:22(credit/name)
#: C/guitar-tuner.cpp.page:20(credit/name)
#: C/guitar-tuner.py.page:22(credit/name)
#: C/guitar-tuner.py.page:27(credit/name)
#: C/guitar-tuner.vala.page:25(credit/name) C/image.py.page:14(credit/name)
#: C/image-viewer.c.page:22(credit/name)
#: C/image-viewer.cpp.page:20(credit/name)
#: C/image-viewer.js.page:22(credit/name)
#: C/image-viewer.py.page:22(credit/name)
#: C/image-viewer.vala.page:30(credit/name) C/js.page:15(credit/name)
#: C/label.py.page:15(credit/name) C/linkbutton.py.page:13(credit/name)
#: C/magic-mirror.vala.page:22(credit/name) C/menubar.py.page:19(credit/name)
#: C/menubutton.py.page:19(credit/name) C/message-board.c.page:19(credit/name)
#: C/messagedialog.py.page:13(credit/name)
#: C/model-view-controller.py.page:20(credit/name)
#: C/paned.py.page:13(credit/name) C/photo-wall.c.page:21(credit/name)
#: C/progressbar.py.page:13(credit/name) C/properties.py.page:20(credit/name)
#: C/py.page:14(credit/name) C/radiobutton.py.page:14(credit/name)
#: C/record-collection.js.page:22(credit/name) C/scale.py.page:14(credit/name)
#: C/scrolledwindow.py.page:13(credit/name) C/separator.py.page:14(credit/name)
#: C/signals-callbacks.py.page:20(credit/name)
#: C/spinbutton.py.page:14(credit/name) C/spinner.py.page:13(credit/name)
#: C/statusbar.py.page:14(credit/name) C/strings.py.page:20(credit/name)
#: C/switch.py.page:13(credit/name) C/textview.py.page:21(credit/name)
#: C/togglebutton.py.page:13(credit/name) C/toolbar.py.page:14(credit/name)
#: C/toolbar_builder.py.page:21(credit/name) C/tooltip.py.page:14(credit/name)
#: C/treeview_advanced_liststore.py.page:13(credit/name)
#: C/treeview_cellrenderertoggle.py.page:13(credit/name)
#: C/treeview_simple_liststore.py.page:14(credit/name)
#: C/treeview_treestore.py.page:14(credit/name)
#: C/tutorial.py.page:19(credit/name) C/vala.page:14(credit/name)
#: C/weatherApp.js.page:16(credit/name) C/window.py.page:19(credit/name)
msgid "Marta Maria Casetti"
msgstr ""

#: C/aboutdialog.py.page:18(info/desc)
msgid "A window that displays information about an application"
msgstr ""

#: C/aboutdialog.py.page:23(page/p)
msgid ""
"An AboutDialog example using Gtk.ApplicationWindow and Menu (the \"about\" is "
"displayed if \"About\" in the menu is selected)."
msgstr ""

#: C/aboutdialog.py.page:28(section/title) C/button.py.page:30(section/title)
#: C/buttonbox.py.page:30(section/title)
#: C/checkbutton.py.page:28(section/title)
#: C/colorbutton.py.page:28(section/title) C/combobox.py.page:29(section/title)
#: C/combobox_multicolumn.py.page:28(section/title)
#: C/dialog.py.page:29(section/title) C/entry.py.page:34(section/title)
#: C/filechooserdialog.py.page:52(section/title)
#: C/fontchooserwidget.py.page:30(section/title)
#: C/gmenu.py.page:35(section/title) C/grid.py.page:36(section/title)
#: C/GtkApplicationWindow.py.page:34(section/title)
#: C/image.py.page:33(section/title) C/label.py.page:35(section/title)
#: C/linkbutton.py.page:29(section/title)
#: C/menubutton.py.page:36(section/title)
#: C/messagedialog.py.page:28(section/title) C/paned.py.page:28(section/title)
#: C/progressbar.py.page:38(section/title)
#: C/radiobutton.py.page:29(section/title) C/scale.py.page:29(section/title)
#: C/scrolledwindow.py.page:28(section/title)
#: C/separator.py.page:30(section/title) C/spinbutton.py.page:29(section/title)
#: C/spinner.py.page:28(section/title) C/statusbar.py.page:29(section/title)
#: C/switch.py.page:30(section/title) C/textview.py.page:43(section/title)
#: C/togglebutton.py.page:28(section/title) C/toolbar.py.page:30(section/title)
#: C/toolbar_builder.py.page:163(section/title)
#: C/tooltip.py.page:29(section/title)
#: C/treeview_advanced_liststore.py.page:28(section/title)
#: C/treeview_cellrenderertoggle.py.page:28(section/title)
#: C/treeview_simple_liststore.py.page:29(section/title)
#: C/treeview_treestore.py.page:29(section/title)
#: C/window.py.page:44(section/title)
msgid "Code used to generate this example"
msgstr ""

#: C/aboutdialog.py.page:30(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"     # constructor for a window (the parent window)\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"AboutDialog Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"\n"
"        # create the about_action (a Gio.SimpleAction)\n"
"        about_action = Gio.SimpleAction.new(\"about\", None)\n"
"        # connect the signal from the action to the function about_cb()\n"
"        about_action.connect(\"activate\", self.about_cb)\n"
"        # add the action to the application\n"
"        app.add_action(about_action)\n"
"\n"
"    # callback function for the about_action's \"activate\" signal\n"
"    def about_cb(self, action, parameter):\n"
"        # a  Gtk.AboutDialog\n"
"        aboutdialog = Gtk.AboutDialog()\n"
"\n"
"        # lists of authors and documenters (will be used later)\n"
"        authors = [\"GNOME Documentation Team\"]\n"
"        documenters = [\"GNOME Documentation Team\"]\n"
"\n"
"        # we fill in the aboutdialog\n"
"        aboutdialog.set_program_name(\"AboutDialog Example\")\n"
"        aboutdialog.set_copyright(\"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\")\n"
"        aboutdialog.set_authors(authors)\n"
"        aboutdialog.set_documenters(documenters)\n"
"        aboutdialog.set_website(\"http://developer.gnome.org\")\n"
"        aboutdialog.set_website_label(\"GNOME Developer Website\")\n"
"\n"
"        # we do not want to show the title, which by default would be \"About AboutDialog Example\"\n"
"        # we have to reset the title of the messagedialog window after setting the program name\n"
"        aboutdialog.set_title(\"\")\n"
"\n"
"        # to close the aboutdialog when \"close\" is clicked we connect the\n"
"        # \"response\" signal to on_close\n"
"        aboutdialog.connect(\"response\", self.on_close)\n"
"        # show the aboutdialog\n"
"        aboutdialog.show()\n"
"\n"
"    # destroy the aboutdialog\n"
"    def on_close(self, action, parameter):\n"
"        action.destroy()\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def quit_cb(self, action, parameter):\n"
"        self.quit()\n"
"\n"
"    def do_startup (self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # create a menu (a Gio.Menu)\n"
"        menu = Gio.Menu()\n"
"        # append a menu item with label \"About\" and action \"app.about\"\n"
"        menu.append (\"About\", \"app.about\")\n"
"        # append a menu item with label \"Quit\" and action \"app.quit\"\n"
"        menu.append(\"Quit\", \"app.quit\")\n"
"        # set menu as the menu for the application\n"
"        self.set_app_menu (menu)\n"
"\n"
"        # a new simpleaction - for the application\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_cb)\n"
"        self.add_action(quit_action)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/aboutdialog.py.page:35(section/title)
msgid "Useful methods for an AboutDialog widget"
msgstr ""

#: C/aboutdialog.py.page:36(section/p)
msgid ""
"In line 15 the signal <code>\"activate\"</code> is connected to the callback "
"function <code>about_cb()</code> using <code><var>widget</var>.connect"
"(<var>signal</var>, <var>callback function</var>)</code>. See <link xref="
"\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""

#: C/aboutdialog.py.page:40(section/title) C/button.py.page:51(section/title)
#: C/buttonbox.py.page:45(section/title)
#: C/checkbutton.py.page:41(section/title)
#: C/colorbutton.py.page:39(section/title) C/combobox.py.page:41(section/title)
#: C/combobox_multicolumn.py.page:40(section/title)
#: C/dialog.py.page:45(section/title) C/entry.py.page:60(section/title)
#: C/filechooserdialog.py.page:69(section/title)
#: C/fontchooserwidget.py.page:43(section/title)
#: C/gmenu.py.page:76(section/title) C/grid.py.page:53(section/title)
#: C/GtkApplicationWindow.py.page:49(section/title)
#: C/image.py.page:99(section/title) C/label.py.page:86(section/title)
#: C/linkbutton.py.page:43(section/title) C/menubar.py.page:182(section/title)
#: C/menubutton.py.page:52(section/title)
#: C/messagedialog.py.page:53(section/title) C/paned.py.page:38(section/title)
#: C/progressbar.py.page:53(section/title)
#: C/radiobutton.py.page:45(section/title) C/scale.py.page:53(section/title)
#: C/scrolledwindow.py.page:41(section/title)
#: C/spinbutton.py.page:45(section/title) C/spinner.py.page:38(section/title)
#: C/statusbar.py.page:49(section/title) C/switch.py.page:41(section/title)
#: C/textview.py.page:92(section/title)
#: C/togglebutton.py.page:40(section/title) C/toolbar.py.page:51(section/title)
#: C/toolbar_builder.py.page:190(section/title)
#: C/tooltip.py.page:54(section/title)
#: C/treeview_advanced_liststore.py.page:40(section/title)
#: C/treeview_cellrenderertoggle.py.page:40(section/title)
#: C/treeview_simple_liststore.py.page:41(section/title)
#: C/treeview_treestore.py.page:40(section/title)
#: C/window.py.page:59(section/title)
msgid "API References"
msgstr ""

#: C/aboutdialog.py.page:45(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkAboutDialog.html"
"\">GtkAboutDialog</link>"
msgstr ""

#: C/aboutdialog.py.page:46(item/p) C/checkbutton.py.page:45(item/p)
#: C/grid.py.page:57(item/p) C/GtkApplicationWindow.py.page:55(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkApplicationWindow."
"html\">GtkApplicationWindow</link>"
msgstr ""

#: C/aboutdialog.py.page:48(item/p) C/checkbutton.py.page:44(item/p)
#: C/grid.py.page:56(item/p) C/GtkApplicationWindow.py.page:54(item/p)
#: C/messagedialog.py.page:64(item/p) C/window.py.page:63(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkApplication.html"
"\">GtkApplication</link>"
msgstr ""

#: C/aboutdialog.vala.page:7(info/title)
msgctxt "text"
msgid "AboutDialog (Vala)"
msgstr ""

#: C/aboutdialog.vala.page:14(credit/name) C/gmenu.vala.page:13(credit/name)
msgid "Ryan Lortie"
msgstr ""

#: C/aboutdialog.vala.page:33(page/code)
#, no-wrap
msgid ""
"/* A window in the application */\n"
"public class Window : Gtk.ApplicationWindow {\n"
"\n"
"\t/* The constructor */\n"
"\tpublic Window (Application app) {\n"
"\t\tObject (application: app, title: \"AboutDialog Example\");\n"
"\n"
"\t\tvar about_action = new SimpleAction (\"about\", null);\n"
"\n"
"\t\tabout_action.activate.connect (this.about_cb);\n"
"\t\tthis.add_action (about_action);\n"
"\t\tthis.show_all ();\n"
"\t}\n"
"\n"
"\t/* This is the callback function connected to the 'activate' signal\n"
"\t * of the SimpleAction about_action.\n"
"\t */\n"
"\tvoid about_cb (SimpleAction simple, Variant? parameter) {\n"
"\t\tstring[] authors = { \"GNOME Documentation Team\", null };\n"
"\t\tstring[] documenters = { \"GNOME Documentation Team\", null };\n"
"\n"
"\t\tGtk.show_about_dialog (this,\n"
"                               \"program-name\", (\"GtkApplication Example\"),\n"
"                               \"copyright\", (\"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\"),\n"
"                               \"authors\", authors,\n"
"                               \"documenters\", documenters,\n"
"                               \"website\", \"http://developer.gnome.org\",\n"
"                               \"website-label\", (\"GNOME Developer Website\"),\n"
"                               null);\n"
"\t}\n"
"}\n"
"\n"
"/* This is the Application */\n"
"public class Application : Gtk.Application {\n"
"\n"
"\t/* Here we override the activate signal of GLib.Application */\n"
"\tprotected override void activate () {\n"
"\t\tnew Window (this);\n"
"\t}\n"
"\n"
"\t/* Here we override the startup signal of GLib.Application */\n"
"\tprotected override void startup () {\n"
"\n"
"\t\tbase.startup ();\n"
"\n"
"\t\tvar menu = new Menu ();\n"
"\t\tmenu.append (\"About\", \"win.about\");\n"
"\t\tmenu.append (\"Quit\", \"app.quit\");\n"
"\t\tthis.app_menu = menu;\n"
"\n"
"\t\tvar quit_action = new SimpleAction (\"quit\", null);\n"
"\t\t//quit_action.activate.connect (this.quit);\n"
"\t\tthis.add_action (quit_action);\n"
"\t}\n"
"\n"
"\t/* The constructor */\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.application\");\n"
"\t}\n"
"}\n"
"\n"
"/* main function creates Application and runs it */\n"
"int main (string[] args) {\n"
"\treturn new Application ().run (args);\n"
"}\n"
msgstr ""

#: C/aboutdialog.vala.page:38(item/p) C/gmenu.vala.page:41(item/p)
#: C/window.vala.page:37(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Application.html\">Gtk."
"Application</link>"
msgstr ""

#: C/aboutdialog.vala.page:39(item/p) C/gmenu.vala.page:42(item/p)
#: C/GtkApplicationWindow.vala.page:31(item/p) C/label.vala.page:31(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ApplicationWindow.html\">Gtk."
"ApplicationWindow</link>"
msgstr ""

#: C/aboutdialog.vala.page:40(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window.set_default_size.html"
"\">set_default_size</link>"
msgstr ""

#: C/audio-player.vala.page:9(info/desc)
msgid "Coming soon..."
msgstr ""

#: C/audio-player.vala.page:13(credit/name)
#: C/getting-ready.page:11(credit/name) C/guitar-tuner.c.page:14(credit/name)
#: C/guitar-tuner.cpp.page:12(credit/name)
#: C/guitar-tuner.py.page:14(credit/name)
#: C/guitar-tuner.vala.page:13(credit/name)
#: C/image-viewer.c.page:14(credit/name)
#: C/image-viewer.cpp.page:12(credit/name)
#: C/image-viewer.vala.page:14(credit/name)
#: C/record-collection.js.page:14(credit/name)
msgid "GNOME Documentation Project"
msgstr "GNOME-Dokumentationsprojekt"

#: C/audio-player.vala.page:18(page/title)
msgid "Audio player"
msgstr ""

#: C/beginner.c.page:8(info/title)
msgctxt "text"
msgid "Tutorial for beginners (C)"
msgstr ""

#: C/beginner.c.page:12(info/desc) C/beginner.vala.page:12(info/desc)
msgid ""
"A beginner's guide to GUI programming using GTK+, including code samples and "
"practice exercises."
msgstr ""

#: C/beginner.c.page:21(credit/years) C/beginner.js.page:17(credit/years)
#: C/beginner.py.page:20(credit/years) C/beginner.vala.page:20(credit/years)
#: C/guitar-tuner.c.page:24(credit/years)
#: C/guitar-tuner.cpp.page:22(credit/years)
#: C/guitar-tuner.py.page:24(credit/years)
#: C/guitar-tuner.py.page:29(credit/years)
#: C/guitar-tuner.vala.page:27(credit/years)
#: C/image-viewer.c.page:24(credit/years)
#: C/image-viewer.cpp.page:22(credit/years)
#: C/image-viewer.js.page:24(credit/years)
#: C/image-viewer.py.page:24(credit/years)
#: C/image-viewer.vala.page:32(credit/years) C/js.page:17(credit/years)
#: C/magic-mirror.vala.page:24(credit/years)
#: C/message-board.c.page:21(credit/years) C/photo-wall.c.page:23(credit/years)
#: C/py.page:16(credit/years) C/record-collection.js.page:24(credit/years)
#: C/tutorial.py.page:26(credit/years) C/vala.page:16(credit/years)
#: C/weatherApp.js.page:18(credit/years)
msgid "2013"
msgstr ""

#: C/beginner.c.page:25(page/title) C/beginner.js.page:23(page/title)
#: C/beginner.vala.page:24(page/title)
msgid "Tutorial for beginners and code samples"
msgstr ""

#: C/beginner.c.page:27(synopsis/p) C/beginner.vala.page:26(synopsis/p)
msgid ""
"Although these tutorials are designed for beginners, we can't cover all the "
"basics. Before attempting to follow these tutorials, you are expected to be "
"familiar with the following concepts:"
msgstr ""

#: C/beginner.c.page:29(item/p) C/beginner.vala.page:28(item/p)
msgid "Object oriented programming"
msgstr ""

#: C/beginner.c.page:30(item/p)
msgid "The C programming language"
msgstr ""

#: C/beginner.c.page:34(synopsis/p) C/beginner.vala.page:37(synopsis/p)
msgid ""
"By following these tutorials you will learn the basics of GUI programming "
"using GTK+."
msgstr ""

#: C/beginner.c.page:38(section/title) C/beginner.js.page:41(section/title)
#: C/beginner.vala.page:41(section/title)
msgid "Tutorials"
msgstr ""

#: C/beginner.c.page:42(section/title) C/beginner.js.page:45(section/title)
#: C/beginner.vala.page:45(section/title) C/py.page:31(section/title)
msgid "Code samples"
msgstr ""

#: C/beginner.c.page:43(section/p) C/beginner.js.page:47(section/p)
#: C/beginner.vala.page:46(section/p)
msgid "To run the code samples:"
msgstr ""

#: C/beginner.c.page:47(item/p)
msgid "Copy and paste the code into <var>filename</var>.c"
msgstr ""

#: C/beginner.c.page:48(item/p) C/beginner.c.page:61(item/p)
#: C/beginner.vala.page:51(item/p)
msgid "In the terminal type:"
msgstr ""

#: C/beginner.c.page:49(item/screen)
#, no-wrap
msgid "gcc <var>filename</var>.c `pkg-config --cflags --libs gtk+-3.0` -o <var>filename</var>\n"
msgstr ""

#: C/beginner.c.page:51(item/screen) C/beginner.c.page:65(item/screen)
#: C/beginner.vala.page:53(item/screen)
#, no-wrap
msgid "./<var>filename</var>"
msgstr ""

#: C/beginner.c.page:55(note/p)
msgid ""
"For more information about compiling GTK+ programs see <link href=\"http://"
"developer.gnome.org/gtk3/3.4/gtk-compiling.html\">Compiling GTK+ Applications "
"on UNIX</link>."
msgstr ""

#: C/beginner.c.page:59(section/p)
msgid "You can also use the Vala compiler to compile these samples:"
msgstr ""

#: C/beginner.c.page:62(item/screen)
#, no-wrap
msgid "valac --pkg gtk+-3.0 <var>filename</var>.c"
msgstr ""

#: C/beginner.c.page:64(item/p)
msgid "To run:"
msgstr ""

#: C/beginner.c.page:68(section/title) C/beginner.js.page:54(section/title)
#: C/beginner.py.page:31(section/title) C/beginner.vala.page:57(section/title)
msgid "Windows"
msgstr ""

#: C/beginner.c.page:71(section/title) C/beginner.js.page:56(section/title)
#: C/beginner.py.page:33(section/title) C/beginner.vala.page:60(section/title)
msgid "Display widgets"
msgstr ""

#: C/beginner.c.page:73(section/title) C/beginner.js.page:58(section/title)
#: C/beginner.py.page:35(section/title) C/beginner.vala.page:62(section/title)
msgid "Buttons and toggles"
msgstr ""

#: C/beginner.c.page:75(section/title) C/beginner.js.page:60(section/title)
#: C/beginner.py.page:37(section/title) C/beginner.vala.page:64(section/title)
msgid "Numeric and text data entry"
msgstr ""

#: C/beginner.c.page:77(section/title) C/beginner.js.page:62(section/title)
#: C/beginner.py.page:39(section/title) C/beginner.vala.page:66(section/title)
msgid "Multiline text editor"
msgstr ""

#: C/beginner.c.page:79(section/title) C/beginner.js.page:64(section/title)
#: C/beginner.py.page:41(section/title) C/beginner.vala.page:68(section/title)
msgid "Menu, combo box and toolbar widgets"
msgstr ""

#: C/beginner.c.page:81(section/title) C/beginner.js.page:66(section/title)
#: C/beginner.py.page:43(section/title) C/beginner.vala.page:70(section/title)
msgid "TreeView widget"
msgstr ""

#: C/beginner.c.page:83(section/title) C/beginner.js.page:68(section/title)
#: C/beginner.py.page:45(section/title) C/beginner.vala.page:72(section/title)
#: C/tutorial.py.page:126(steps/title)
#, fuzzy
#| msgid "Selecting"
msgid "Selectors"
msgstr "Auswählen"

#: C/beginner.c.page:84(section/title) C/beginner.js.page:69(section/title)
#: C/beginner.py.page:46(section/title) C/beginner.vala.page:73(section/title)
msgid "File selectors"
msgstr ""

#: C/beginner.c.page:86(section/title) C/beginner.js.page:71(section/title)
#: C/beginner.py.page:48(section/title) C/beginner.vala.page:75(section/title)
msgid "Font selectors"
msgstr ""

#: C/beginner.c.page:88(section/title) C/beginner.js.page:73(section/title)
#: C/beginner.py.page:50(section/title) C/beginner.vala.page:77(section/title)
msgid "Color Selectors"
msgstr ""

#: C/beginner.c.page:91(section/title) C/beginner.js.page:76(section/title)
#: C/beginner.py.page:53(section/title) C/beginner.vala.page:80(section/title)
msgid "Layout containers"
msgstr ""

#: C/beginner.c.page:93(section/title) C/beginner.js.page:78(section/title)
#: C/beginner.py.page:55(section/title) C/beginner.vala.page:82(section/title)
msgid "Ornaments"
msgstr ""

#: C/beginner.c.page:95(section/title) C/beginner.js.page:80(section/title)
#: C/beginner.py.page:57(section/title) C/beginner.vala.page:84(section/title)
msgid "Scrolling"
msgstr ""

#: C/beginner.c.page:97(section/title) C/beginner.js.page:82(section/title)
#: C/beginner.py.page:59(section/title) C/beginner.vala.page:86(section/title)
msgid "Miscellaneous"
msgstr ""

#: C/beginner.c.page:102(section/title) C/beginner.js.page:87(section/title)
#: C/beginner.vala.page:91(section/title)
#: C/menubar.vala.page:197(section/title)
msgid "Exercises"
msgstr ""

#: C/beginner.js.page:10(credit/name) C/grid.js.page:12(credit/name)
#: C/guitar-tuner.js.page:11(credit/name) C/helloWorld.js.page:14(credit/name)
#: C/weatherApp.js.page:11(credit/name)
#: C/weatherAppMain.js.page:10(credit/name)
#: C/weatherAutotools.js.page:10(credit/name)
#: C/weatherGeonames.js.page:10(credit/name)
msgid "Susanna Huhtanen"
msgstr "Susanna Huhtanen"

#: C/beginner.js.page:20(info/desc)
msgid ""
"A beginner's guide to writing GNOME applications in JavaScript, including "
"code samples and practice exercises."
msgstr ""

#: C/beginner.js.page:25(synopsis/p)
msgid ""
"JavaScript is one of the most popular programming languages on the web. It's "
"not just for the web, though. If you have even a basic understanding of "
"JavaScript, you can write full-fledged applications for GNOME. <link href="
"\"https://live.gnome.org/GnomeDocuments\">GNOME Documents</link> is written "
"in JavaScript, and so is <link href=\"https://live.gnome.org/GnomeShell/Tour"
"\">GNOME Shell</link>, the most basic part of GNOME."
msgstr ""

#: C/beginner.js.page:26(note/p)
msgid ""
"GNOME Shell is what you see when you click on \"Activities\" in the top-left "
"corner of your screen. It also controls the clock and the rest of the top "
"panel. Besides showing how you to write GNOME applications, these tutorials "
"will also show you how to use JavaScript to write GNOME Shell extensions, "
"which give it new features or change the way it does things."
msgstr ""

#: C/beginner.js.page:30(section/title)
msgid "Getting Started"
msgstr "Erste Schritte"

#: C/beginner.js.page:31(section/p)
msgid ""
"These tutorials are designed for people who already know how to write in "
"JavaScript, and who have GNOME installed on their computers already, but who "
"are new to developing GNOME applications. If you don't already know "
"JavaScript, or if you need help getting GNOME set up, take a look at these "
"resources first:"
msgstr ""

#: C/beginner.js.page:33(item/p)
msgid ""
"<link href=\"http://eloquentjavascript.net/contents.html\">Eloquent "
"JavaScript</link> is a free, Creative Commons-licensed book, which explains "
"the basics of JavaScript programming. Since you won't be writing JavaScript "
"for the web, you only need to read up to chapter 10 or so."
msgstr ""

#: C/beginner.js.page:34(item/p)
msgid ""
"<link href=\"http://www.gnome.org/getting-gnome/\">Download GNOME</link> as "
"part of a distribution, like Fedora, openSUSE, or Ubuntu. Each distribution "
"has its own instructions for how to get GNOME."
msgstr ""

#: C/beginner.js.page:35(item/p)
msgid ""
"<link xref=\"set-up-gedit.js\">Set up gedit</link> for writing applications. "
"GNOME's text editor, gedit, is sometimes just called \"text editor\"."
msgstr ""

#: C/beginner.js.page:46(section/p)
msgid ""
"These samples show how to use widgets in your GNOME applications. Each one "
"demonstrates a complete application which showcases the featured widget. At "
"the end of each sample, you will find links to more detailed reference "
"material."
msgstr ""

#: C/beginner.js.page:49(item/p)
msgid "Copy and paste the code into <var>filename</var>.js"
msgstr ""

#: C/beginner.js.page:50(item/p)
msgid "In the terminal, type:"
msgstr ""

#: C/beginner.js.page:51(item/screen)
#, no-wrap
msgid "gjs <var>filename</var>.js"
msgstr ""

#: C/beginner.py.page:8(info/title)
msgctxt "text"
msgid "GTK+ widgets sample code (Python)"
msgstr ""

#: C/beginner.py.page:12(info/desc)
msgid ""
"A guide to GUI programming using GTK+, including code samples and practice "
"exercises."
msgstr ""

#: C/beginner.py.page:24(page/title)
msgid "GTK+ widgets sample code"
msgstr ""

#: C/beginner.py.page:26(synopsis/p)
msgid ""
"If you are a beginner and you would like a tutorial to guide you step by step "
"in an exploration of what you can do with GTK+ 3, you should go to the <link "
"xref=\"tutorial.py\"/> page. If you are looking for a specific widget, you "
"can find it in the sections below."
msgstr ""

#: C/beginner.py.page:63(section/title)
msgid "Theory pages"
msgstr ""

#: C/beginner.vala.page:8(info/title)
msgctxt "text"
msgid "Tutorial for beginners (Vala)"
msgstr ""

#: C/beginner.vala.page:29(item/p)
msgid "The Vala programming language:"
msgstr ""

#: C/beginner.vala.page:31(item/p)
msgid ""
"<link href=\"https://live.gnome.org/Vala/Tutorial\">The Vala Tutorial</link>"
msgstr ""

#: C/beginner.vala.page:32(item/p)
msgid ""
"<link href=\"https://live.gnome.org/Vala/Documentation#Sample_Code\">Sample "
"Vala code</link>"
msgstr ""

#: C/beginner.vala.page:50(item/p)
msgid "Copy and paste the code into <var>filename</var>.vala"
msgstr ""

#: C/beginner.vala.page:52(item/screen)
#, no-wrap
msgid "valac --pkg gtk+-3.0 <var>filename</var>.vala"
msgstr ""

#: C/bug-filing.page:14(license/p) C/documentation.page:15(license/p)
#: C/translate.page:19(license/p)
msgid "Creative Commons Share Alike 3.0"
msgstr "Creative Commons Share Alike 3.0"

#: C/bug-filing.page:18(page/title)
msgid "Help make <app>GNOME Developer Tutorials</app> better"
msgstr ""

#: C/bug-filing.page:21(section/title)
msgid "Report a bug or suggest an improvement"
msgstr ""

#: C/bug-filing.page:22(section/p)
msgid ""
"<app>GNOME Developer Tutorials</app> are maintained by a volunteer community. "
"You are welcome to participate. If you notice a problem you can file a "
"<em>bug report</em>. To file a bug, go to <link href=\"https://bugzilla.gnome."
"org/\"/>."
msgstr ""

#: C/bug-filing.page:25(section/p)
msgid ""
"This is a bug tracking system where users and developers can file details "
"about bugs, crashes and request enhancements."
msgstr ""

#: C/bug-filing.page:28(section/p)
msgid ""
"To participate you need an account which will give you the ability to gain "
"access, file bugs, and make comments. Also, you need to register so you can "
"receive updates by e-mail about the status of your bug. If you don't already "
"have an account, just click on the <gui>New Account</gui> link to create one."
msgstr ""

#: C/bug-filing.page:31(section/p)
msgid ""
"Once you have an account, log in, click on <guiseq><gui>File a Bug</"
"gui><gui>All</gui><gui>gnome-devel-docs</gui></guiseq>. Before reporting a "
"bug, please read the <link href=\"https://bugzilla.gnome.org/page.cgi?id=bug-"
"writing.html\">bug writing guidelines</link>, and please <link href=\"https://"
"bugzilla.gnome.org/browse.cgi?product=gnome-games\">browse</link> for the bug "
"to see if it already exists."
msgstr ""

#: C/bug-filing.page:35(section/p)
msgid ""
"To file your bug, choose the component <gui>platform-demos</gui> in the "
"<gui>Component</gui> menu."
msgstr ""

#: C/bug-filing.page:38(section/p)
msgid ""
"If you are requesting a new feature, choose <gui>enhancement</gui> in the "
"<gui>Severity</gui> menu. Fill in the Summary and Description sections and "
"click <gui>Commit</gui>."
msgstr ""

#: C/bug-filing.page:42(section/p)
msgid ""
"Your report will be given an ID number, and its status will be updated as it "
"is being dealt with. Thanks for helping make <app>GNOME Developer Tutorials</"
"app> better!"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/button.c.page:24(media) C/button.js.page:21(media)
#: C/button.py.page:24(media) C/button.vala.page:23(media)
msgctxt "_"
msgid "external ref='media/button.png' md5='8d69efbb3a0d3e043af6139b6492171c'"
msgstr "external ref='media/button.png' md5='8d69efbb3a0d3e043af6139b6492171c'"

#: C/button.c.page:7(info/title)
msgctxt "text"
msgid "Button (C)"
msgstr ""

#: C/button.c.page:19(info/desc) C/button.py.page:19(info/desc)
#: C/button.vala.page:18(info/desc)
msgid "A button widget which emits a signal when clicked"
msgstr ""

#: C/button.c.page:22(page/title) C/button.js.page:20(page/title)
#: C/button.py.page:22(page/title)
msgid "Button"
msgstr ""

#: C/button.c.page:25(page/p)
msgid ""
"A button widget connected to a callback function that reverses its label when "
"clicked."
msgstr ""

#: C/button.c.page:27(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*This is the callback function. It is a handler function which \n"
"reacts to the signal. In this case, it will cause the button label's \n"
"string to reverse.*/\n"
"static void\n"
"button_clicked (GtkButton *button,\n"
"                gpointer   user_data)\n"
"{\n"
"  const char *old_label;\n"
"  char *new_label;\n"
"\n"
"  old_label = gtk_button_get_label (button);\n"
"  new_label = g_utf8_strreverse (old_label, -1);\n"
"\n"
"  gtk_button_set_label (button, new_label);\n"
"  g_free (new_label);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *button;\n"
"\n"
"  /*Create a window with a title and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"GNOME Button\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 250, 50);\n"
"\n"
"  /*Create a button with a label, and add it to the window*/\n"
"  button = gtk_button_new_with_label (\"Click Me\");\n"
"  gtk_container_add (GTK_CONTAINER (window), button);\n"
"\n"
"  /*Connecting the clicked signal to the callback function*/\n"
"  g_signal_connect (GTK_BUTTON (button),\n"
"                    \"clicked\", \n"
"                    G_CALLBACK (button_clicked), \n"
"                    G_OBJECT (window));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""

#: C/button.c.page:35(item/p) C/buttonbox.py.page:50(item/p)
#: C/grid.c.page:34(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkButton.html"
"\">GtkButton</link>"
msgstr ""

#: C/button.c.page:36(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-Unicode-Manipulation."
"html#g-utf8-strreverse\">Unicode Manipulation</link>"
msgstr ""

#: C/button.js.page:7(info/title)
#, fuzzy
#| msgid "JavaScript"
msgctxt "text"
msgid "Button (JavaScript)"
msgstr "JavaScript"

#: C/button.js.page:17(info/desc)
msgid "A button which can be connected to other widgets"
msgstr ""

#: C/button.js.page:22(page/p)
msgid "A button widget that changes its label when you click it."
msgstr ""

#: C/button.js.page:24(page/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ButtonExample = new Lang.Class ({\n"
"    Name: 'Button Example',\n"
"\n"
"    /* Create the application itself\n"
"       This boilerplate code is needed to build any GTK+ application. */\n"
"        _init: function () {\n"
"            this.application = new Gtk.Application ({\n"
"                application_id: 'org.example.jsbutton',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                              window_position: Gtk.WindowPosition.CENTER,\n"
"                                                              title: \"GNOME Button\",\n"
"                                                              default_height: 50,\n"
"                                                              default_width: 250 });\n"
"\n"
"        // Create the button\n"
"        this.Button = new Gtk.Button ({label: \"Click Me\"});\n"
"        this._window.add (this.Button);\n"
"\n"
"        // Bind it to a function that says what to do when the button is clicked\n"
"        this.Button.connect (\"clicked\", Lang.bind(this, this._clickHandler));\n"
"\n"
"                // Show the window and all child widgets\n"
"                this._window.show_all();\n"
"    },\n"
"\n"
"    // Here's the function that says what happens when the button is clicked\n"
"    _clickHandler: function () {\n"
"        this.Button.set_label (\"Clicked!\");\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/button.js.page:32(item/p) C/grid.js.page:35(item/p)
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Button.html"
"\">Gtk.Button</link>"
msgstr ""

#: C/button.py.page:7(info/title)
msgctxt "text"
msgid "Button (Python)"
msgstr ""

#: C/button.py.page:25(page/p) C/button.vala.page:24(page/p)
msgid "A button widget connected to a simple callback function."
msgstr ""

#: C/button.py.page:31(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GNOME Button\", application=app)\n"
"        self.set_default_size(250, 50)\n"
"\n"
"        # a button\n"
"        button = Gtk.Button()\n"
"        # with a label\n"
"        button.set_label(\"Click me\")\n"
"        # connect the signal \"clicked\" emitted by the button\n"
"        # to the callback function do_clicked\n"
"        button.connect(\"clicked\", self.do_clicked)\n"
"        # add the button to the window\n"
"        self.add(button)\n"
"\n"
"    # callback function connected to the signal \"clicked\" of the button\n"
"    def do_clicked(self, button):\n"
"        print \"You clicked me!\"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup (self):\n"
"        Gtk.Application.do_startup (self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/button.py.page:35(section/title)
msgid "Useful methods for a Button widget"
msgstr ""

#: C/button.py.page:36(section/p)
msgid ""
"In line 16 the <code>\"clicked\"</code> signal from the button is connected "
"to the callback function <code>do_clicked()</code> using <code><var>widget</"
"var>.connect(<var>signal</var>, <var>callback function</var>)</code>. See "
"<link xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""

#: C/button.py.page:38(item/p)
msgid ""
"<code>set_relief(Gtk.ReliefStyle.NONE)</code> sets to none the relief style "
"of the edges of the Gtk.Button - as opposed to <code>Gtk.ReliefStyle.NORMAL</"
"code>."
msgstr ""

#: C/button.py.page:39(item/p)
msgid ""
"If the label of the button is a <link href=\"http://developer.gnome.org/gtk3/"
"unstable/gtk3-Stock-Items.html\">stock icon</link>, <code>set_use_stock(True)"
"</code> sets the label as the name of the corresponding stock icon."
msgstr ""

#: C/button.py.page:40(item/p)
msgid "To set an image (e.g. a stock image) for the button <code>button</code>:"
msgstr ""

#: C/button.py.page:41(item/code)
#, no-wrap
msgid ""
"\n"
"image = Gtk.Image()\n"
"image.set_from_stock(Gtk.STOCK_ABOUT, Gtk.IconSize.BUTTON)\n"
"button.set_image(image)"
msgstr ""

#: C/button.py.page:45(item/p)
msgid ""
"You should not set a label for the button after this, otherwise it will show "
"the label and not the image."
msgstr ""

#: C/button.py.page:46(item/p)
msgid ""
"If we use <code>set_focus_on_click(False)</code> the button will not grab "
"focus when it is clicked by the mouse. This could be useful in places like "
"toolbars, so that the keyboard focus is not removed from the main area of the "
"application."
msgstr ""

#: C/button.py.page:54(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkButton.html"
"\">GtkButton</link>"
msgstr ""

#: C/button.py.page:55(item/p) C/dialog.py.page:51(item/p)
#: C/image.py.page:103(item/p) C/label.py.page:90(item/p)
#: C/linkbutton.py.page:46(item/p) C/messagedialog.py.page:60(item/p)
#: C/radiobutton.py.page:48(item/p) C/separator.py.page:38(item/p)
#: C/window.py.page:64(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkWindow.html"
"\">GtkWindow</link>"
msgstr ""

#: C/button.vala.page:7(info/title)
msgctxt "text"
msgid "Button (Vala)"
msgstr ""

#: C/button.vala.page:21(page/title)
msgid "Button widget"
msgstr ""

#: C/button.vala.page:26(page/code)
#, no-wrap
msgid ""
"\n"
"/* A window in the application */\n"
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* The constructor of the window */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"GNOME Button\");\n"
"\n"
"\t\tvar button = new Gtk.Button.with_label (\"Click Me\");\n"
"\t\tbutton.clicked.connect (this.reverse_label);\n"
"\t\tbutton.show ();\n"
"\n"
"\t\tthis.window_position = Gtk.WindowPosition.CENTER;\n"
"\t\tthis.set_default_size (250,50);\n"
"\t\tthis.add (button);\n"
"\t}\n"
"\n"
"\t/* The callback function connected to the\n"
"\t * 'clicked' signal of the button.\n"
"\t */\n"
"\tvoid reverse_label (Gtk.Button button) {\n"
"\t\tbutton.label = button.label.reverse ();\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\n"
"\t/* This is the constructor */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the activate signal of GLib.Application */\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/button.vala.page:28(page/p)
msgid ""
"In this sample we used the following: <link href=\"http://www.valadoc.org/gtk"
"+-3.0/Gtk.Button.html\">Gtk.Button</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/buttonbox.py.page:24(media)
msgctxt "_"
msgid ""
"external ref='media/buttonbox_calculator.png' "
"md5='ce0de08b7ac66f517290e33e6d33d508'"
msgstr ""
"external ref='media/buttonbox_calculator.png' "
"md5='ce0de08b7ac66f517290e33e6d33d508'"

#: C/buttonbox.py.page:7(info/title)
msgctxt "text"
msgid "ButtonBox (Python)"
msgstr ""

#: C/buttonbox.py.page:19(info/desc)
msgid "A container for arranging buttons"
msgstr ""

#: C/buttonbox.py.page:22(page/title) C/tutorial.py.page:91(steps/title)
msgid "ButtonBox"
msgstr ""

#: C/buttonbox.py.page:25(page/p)
msgid "A calculator - the buttons are enclosed in horizontal ButtonBoxes."
msgstr ""

#: C/buttonbox.py.page:31(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Calculator\", application=app)\n"
"        self.set_default_size(350, 200)\n"
"        self.set_border_width(10)\n"
"\n"
"        # an entry\n"
"        self.entry = Gtk.Entry()\n"
"        # with an initial text\n"
"        self.entry.set_text('0')\n"
"        # text aligned on the right\n"
"        self.entry.set_alignment(1)\n"
"        # the text in the entry cannot be modified writing in it\n"
"        self.entry.set_can_focus(False)\n"
"\n"
"        # a grid\n"
"        grid = Gtk.Grid()\n"
"        grid.set_row_spacing(5)\n"
"        \n"
"        # to attach the entry\n"
"        grid.attach(self.entry, 0, 0, 1, 1)\n"
"        \n"
"        # the labels for the buttons\n"
"        buttons = [ 7, 8, 9, '/',\n"
"                    4, 5, 6, '*',\n"
"                    1, 2, 3, '-',\n"
"                    'C', 0, '=', '+' ]\n"
"        \n"
"        # each row is a ButtonBox, attached to the grid            \n"
"        for i in range(4):\n"
"            hbox = Gtk.ButtonBox.new(Gtk.Orientation.HORIZONTAL)\n"
"            hbox.set_spacing(5)\n"
"            grid.attach(hbox, 0, i + 1, 1, 1)\n"
"            # each ButtonBox has 4 buttons, connected to the callback function\n"
"            for j in range(4):\n"
"                button = Gtk.Button(label=buttons[i * 4 + j])\n"
"                button.set_can_focus(False)\n"
"                button.connect(\"clicked\", self.button_clicked)\n"
"                hbox.add(button)\n"
"            \n"
"        # some variables for the calculations\n"
"        self.first_number = 0\n"
"        self.second_number = 0\n"
"        self.counter = 0\n"
"        self.operation = \"\"\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # callback function for all the buttons\n"
"    def button_clicked(self, button):\n"
"        # for the operations\n"
"        if button.get_label() == '+':\n"
"            self.counter += 1 \n"
"            if self.counter &gt; 1:\n"
"                self.do_operation()\n"
"            self.entry.set_text('0')\n"
"            self.operation = \"plus\"\n"
"        elif button.get_label() == '-':\n"
"            self.counter += 1 \n"
"            if self.counter &gt; 1:\n"
"                self.do_operation()\n"
"            self.entry.set_text('0')\n"
"            self.operation = \"minus\"\n"
"        elif button.get_label() == '*':\n"
"            self.counter += 1 \n"
"            if self.counter &gt; 1:\n"
"                self.do_operation()\n"
"            self.entry.set_text('0')\n"
"            self.operation = \"multiplication\"\n"
"        elif button.get_label() == '/':\n"
"            self.counter += 1 \n"
"            if self.counter &gt; 1:\n"
"                self.do_operation()\n"
"            self.entry.set_text('0')\n"
"            self.operation = \"division\"\n"
"        # for =\n"
"        elif button.get_label() == '=':\n"
"            self.do_operation()\n"
"            self.entry.set_text(str(self.first_number))\n"
"            self.counter = 1\n"
"        # for Cancel\n"
"        elif button.get_label() == 'C':\n"
"            self.first_number = 0\n"
"            self.second_number = 0\n"
"            self.counter = 0\n"
"            self.entry.set_text('')\n"
"            self.operation = \"\"\n"
"        # for a digit button\n"
"        else:\n"
"            new_digit = int(button.get_label())\n"
"            if self.entry.get_text() == 'error':\n"
"                number = 0\n"
"            else:\n"
"                number = int(self.entry.get_text())\n"
"            number = number * 10 + new_digit            \n"
"            if self.counter == 0:\n"
"                self.first_number = number\n"
"            else:\n"
"                self.second_number = number\n"
"            self.entry.set_text(str(number))\n"
"\n"
"    def do_operation(self):\n"
"        if self.operation == \"plus\":\n"
"            self.first_number += self.second_number\n"
"        elif self.operation == \"minus\":\n"
"            self.first_number -= self.second_number\n"
"        elif self.operation == \"multiplication\":\n"
"            self.first_number *= self.second_number\n"
"        elif self.operation == \"division\":\n"
"            try:\n"
"                self.first_number /= self.second_number\n"
"            except ZeroDivisionError:\n"
"                self.first_number = 0\n"
"                self.second_number = 0\n"
"                self.counter = 0\n"
"                self.entry.set_text('error')\n"
"                self.operation = \"\"\n"
"                return\n"
"        else:\n"
"            self.first_number = 0\n"
"            self.second_number = 0\n"
"            self.counter = 0\n"
"            self.entry.set_text('error')\n"
"            \n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/buttonbox.py.page:35(section/title)
msgid "Uselful methods for a ButtonBox widget"
msgstr ""

#: C/buttonbox.py.page:37(item/p)
msgid ""
"The layout of the ButtonBox are set with <code>set_layout(layout)</code>, "
"where <code>layout</code> can be <code>Gtk.ButtonBoxStyle.SPREAD</code> "
"(buttons are evenly spread across the box), <code>Gtk.ButtonBoxStyle.EDGE</"
"code> (buttons are placed at the edges of the box), <code>Gtk.ButtonBoxStyle."
"START</code> (buttons are grouped towards the start of the box), <code>Gtk."
"ButtonBoxStyle.END</code> (buttons are grouped towards the end of the box), "
"<code>Gtk.ButtonBoxStyle.CENTER</code> (buttons are centered in the box)."
msgstr ""

#: C/buttonbox.py.page:38(item/p)
msgid ""
"<code>set_child_secondary(button, is_secondary)</code> sets whether "
"<code>button</code> should appear in a secondary group of children. A typical "
"use of a secondary child is the help button in a dialog. This group appears "
"after the other children if the style is <code>START</code>, <code>SPREAD</"
"code> or <code>EDGE</code>, and before the other children if the style is "
"<code>END</code>. If the style is <code>START</code> or <code>END</code>, "
"then the secondary children are aligned at the other end of the button box "
"from the main children. For the other styles, they appear immediately next to "
"the main children."
msgstr ""

#: C/buttonbox.py.page:39(item/p)
msgid ""
"<code>set_child_non_homogeneous(button, is_non_homogeneous)</code> sets "
"whether the child is exempted from homogeous sizing. Default value is "
"<code>False</code>."
msgstr ""

#: C/buttonbox.py.page:40(item/p)
msgid ""
"<code>set_spacing(spacing)</code> sets the spacing, in pixels, between the "
"buttons of the box."
msgstr ""

#: C/buttonbox.py.page:48(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkButtonBox.html"
"\">GtkButtonBox</link>"
msgstr ""

#: C/buttonbox.py.page:49(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkBox.html\">GtkBox</"
"link>"
msgstr ""

#: C/buttonbox.py.page:51(item/p) C/entry.c.page:33(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkEntry.html\">GtkEntry</"
"link>"
msgstr ""

#: C/buttonbox.py.page:52(item/p) C/grid.c.page:35(item/p)
#: C/radiobutton.c.page:36(item/p) C/spinbutton.c.page:39(item/p)
#: C/statusbar.c.page:39(item/p) C/switch.c.page:36(item/p)
#: C/togglebutton.c.page:39(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkGrid.html\">GtkGrid</"
"link>"
msgstr ""

#: C/c.page:6(info/title)
msgctxt "link"
msgid "C"
msgstr "C"

#: C/c.page:15(page/title)
msgid "Tutorials, code samples and plaform demos in C"
msgstr ""

#: C/c.page:20(section/title) C/vala.page:25(section/title)
msgid "Code samples and tutorial"
msgstr ""

#: C/c.page:27(section/title) C/cpp.page:20(section/title)
#: C/js.page:35(section/title) C/py.page:38(section/title)
#: C/vala.page:29(section/title)
#, fuzzy
#| msgid "Designing the application"
msgid "Examples of applications"
msgstr "Entwurf der Anwendung"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/checkbutton.c.page:21(media) C/checkbutton.js.page:21(media)
#: C/checkbutton.py.page:22(media) C/checkbutton.vala.page:21(media)
msgctxt "_"
msgid ""
"external ref='media/checkbutton.png' md5='7921a6812c87dd2b3781f4fad241e858'"
msgstr ""
"external ref='media/checkbutton.png' md5='7921a6812c87dd2b3781f4fad241e858'"

#: C/checkbutton.c.page:7(info/title)
msgctxt "text"
msgid "CheckButton (C)"
msgstr ""

#: C/checkbutton.c.page:17(info/desc)
msgid "Create widgets with a discrete ToggleButton"
msgstr ""

#: C/checkbutton.c.page:20(page/title) C/checkbutton.js.page:20(page/title)
#: C/checkbutton.py.page:21(page/title) C/checkbutton.vala.page:20(page/title)
msgid "CheckButton"
msgstr ""

#: C/checkbutton.c.page:22(page/p) C/checkbutton.py.page:23(page/p)
#: C/checkbutton.vala.page:22(page/p)
msgid "This CheckButton toggles the title."
msgstr ""

#: C/checkbutton.c.page:24(page/code)
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"/* signal handler for \"toggled\" signal of the CheckButton */\n"
"static void\n"
"toggled_cb (GtkToggleButton *toggle_button,\n"
"            gpointer         user_data)\n"
"{\n"
"  GtkWindow *window = user_data;\n"
"\n"
"  if (gtk_toggle_button_get_active (toggle_button))\n"
"      gtk_window_set_title (window, \"CheckButton Example\");\n"
"  else\n"
"      gtk_window_set_title (window, \"\");\n"
"}\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *checkbutton;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"CheckButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 100);\n"
"\n"
"  checkbutton = gtk_check_button_new_with_label (\"Show Title\");\n"
"  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (checkbutton), TRUE);\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (checkbutton), \"toggled\", G_CALLBACK (toggled_cb), window);\n"
"  gtk_container_add (GTK_CONTAINER (window), checkbutton);\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.example.checkbutton\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""

#: C/checkbutton.c.page:29(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/3.2/GtkCheckButton.html"
"\">GtkCheckButton</link>"
msgstr ""

#: C/checkbutton.js.page:7(info/title)
#, fuzzy
#| msgid "Classes in JavaScript"
msgctxt "text"
msgid "CheckButton (JavaScript)"
msgstr "Klassen in JavaScript"

#: C/checkbutton.js.page:17(info/desc)
msgid "A box which can be checked or unchecked"
msgstr ""

#: C/checkbutton.js.page:22(page/p)
msgid ""
"This application has a CheckButton. Whether the box is checked dictates "
"whether the window's title bar shows anything."
msgstr ""

#: C/checkbutton.js.page:23(page/p)
msgid ""
"A CheckButton sends the \"toggled\" signal when it's checked or unchecked. "
"While it's checked, the \"active\" property is true. While it's not, \"active"
"\" tests as false."
msgstr ""

#: C/checkbutton.js.page:27(section/title)
#: C/comboboxtext.js.page:29(section/title)
#: C/combobox.js.page:32(section/title)
#: C/guitar-tuner.js.page:54(section/title)
#: C/helloWorld.js.page:52(section/title)
#: C/messagedialog.js.page:30(section/title)
#: C/radiobutton.js.page:27(section/title) C/scale.js.page:27(section/title)
#: C/spinbutton.js.page:30(section/title) C/statusbar.js.page:27(section/title)
#: C/switch.js.page:34(section/title) C/textview.js.page:37(section/title)
#: C/togglebutton.js.page:27(section/title)
#: C/treeview_simple_liststore.js.page:36(section/title)
#: C/weatherAppMain.js.page:40(section/title)
msgid "Libraries to import"
msgstr ""

#: C/checkbutton.js.page:28(section/code)
#: C/messagedialog.js.page:31(section/code)
#: C/radiobutton.js.page:28(section/code) C/scale.js.page:28(section/code)
#: C/spinbutton.js.page:31(section/code) C/statusbar.js.page:28(section/code)
#: C/switch.js.page:35(section/code) C/togglebutton.js.page:28(section/code)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
msgstr ""

#: C/checkbutton.js.page:35(section/p) C/comboboxtext.js.page:36(section/p)
#: C/combobox.js.page:40(section/p) C/messagedialog.js.page:38(section/p)
#: C/radiobutton.js.page:35(section/p) C/scale.js.page:35(section/p)
#: C/spinbutton.js.page:38(section/p) C/statusbar.js.page:35(section/p)
#: C/switch.js.page:42(section/p) C/textview.js.page:44(section/p)
#: C/togglebutton.js.page:35(section/p)
#: C/treeview_simple_liststore.js.page:45(section/p)
msgid ""
"These are the libraries we need to import for this application to run. "
"Remember that the line which tells GNOME that we're using Gjs always needs to "
"go at the start."
msgstr ""

#: C/checkbutton.js.page:39(section/title)
#: C/comboboxtext.js.page:40(section/title)
#: C/combobox.js.page:44(section/title)
#: C/messagedialog.js.page:42(section/title)
#: C/radiobutton.js.page:39(section/title) C/scale.js.page:39(section/title)
#: C/spinbutton.js.page:42(section/title) C/statusbar.js.page:39(section/title)
#: C/switch.js.page:46(section/title) C/textview.js.page:48(section/title)
#: C/togglebutton.js.page:39(section/title)
#: C/treeview_simple_liststore.js.page:49(section/title)
msgid "Creating the application window"
msgstr "Entwurf des Anwendungsfensters"

#: C/checkbutton.js.page:40(section/code)
#, no-wrap
msgid ""
"\n"
"const CheckButtonExample = new Lang.Class({\n"
"    Name: 'CheckButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jscheckbutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""

#: C/checkbutton.js.page:66(section/p)
msgid ""
"All the code for this sample goes in the CheckButtonExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"Application.html\">Gtk.Application</link> for our widgets and window to go in."
msgstr ""

#: C/checkbutton.js.page:67(section/code)
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 100,\n"
"            default_width: 300,\n"
"            border_width: 10,\n"
"            title: \"CheckButton Example\"});\n"
msgstr ""

#: C/checkbutton.js.page:80(section/p)
msgid ""
"The _buildUI function is where we put all the code to create the "
"application's user interface. The first step is creating a new <link href="
"\"GtkApplicationWindow.js.page\">Gtk.ApplicationWindow</link> to put all our "
"widgets into."
msgstr ""

#: C/checkbutton.js.page:84(section/title)
msgid "Creating the checkbutton"
msgstr ""

#: C/checkbutton.js.page:85(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the check button\n"
"        this._button = new Gtk.CheckButton ({label: \"Show Title\"});\n"
"        this._window.add (this._button);\n"
"\n"
"        // Have the check button be checked by default\n"
"        this._button.set_active (true);\n"
"\n"
"        // Connect the button to a function that does something when it's toggled\n"
"        this._button.connect (\"toggled\", Lang.bind (this, this._toggledCB));\n"
msgstr ""

#: C/checkbutton.js.page:96(section/p)
msgid ""
"This code creates the checkbutton itself. The label next to the checkbutton "
"is created by giving the checkbutton the \"label\" property and assigning a "
"string value to it. Since this checkbutton toggles whether the window title "
"is on or off, and the window title will be on to start with, we want the box "
"to be checked by default. Whenever the user checks or unchecks the box, we "
"call the _toggledCB function."
msgstr ""

#: C/checkbutton.js.page:97(section/code)
#: C/radiobutton.js.page:169(section/code)
#, no-wrap
msgid ""
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""

#: C/checkbutton.js.page:102(section/p)
msgid ""
"This code finishes up creating the UI, by telling the window to show itself "
"and all child widgets (which is just the checkbutton in this case)."
msgstr ""

#: C/checkbutton.js.page:106(section/title)
msgid "Function which handles the checkbutton's toggling"
msgstr ""

#: C/checkbutton.js.page:107(section/code)
#, no-wrap
msgid ""
"\n"
"    _toggledCB: function () {\n"
"\n"
"        // Make the window title appear or disappear when the checkbox is toggled\n"
"        if (this._button.get_active() == true)\n"
"            this._window.set_title (\"CheckButton Example\");\n"
"        else\n"
"            this._window.set_title (\"\");\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""

#: C/checkbutton.js.page:120(section/p)
msgid ""
"If the checkbutton is toggled from on to off, we want the window title to "
"disappear. If it's toggled from off to on, we want it to reappear. We can "
"tell which way it was toggled by testing to see whether it's active (checked) "
"or not afterwards. A simple if / else statement which calls the checkbutton's "
"get_active() method will work for this."
msgstr ""

#: C/checkbutton.js.page:121(section/code)
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new CheckButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/checkbutton.js.page:126(section/p)
msgid ""
"Finally, we create a new instance of the finished CheckButtonExample class, "
"and set the application running."
msgstr ""

#: C/checkbutton.js.page:131(section/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const CheckButtonExample = new Lang.Class({\n"
"    Name: 'CheckButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jscheckbutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 100,\n"
"            default_width: 300,\n"
"            border_width: 10,\n"
"            title: \"CheckButton Example\"});\n"
"\n"
"        // Create the check button\n"
"        this._button = new Gtk.CheckButton ({label: \"Show Title\"});\n"
"        this._window.add (this._button);\n"
"\n"
"        // Have the check button be checked by default\n"
"        this._button.set_active (true);\n"
"\n"
"        // Connect the button to a function that does something when it's toggled\n"
"        this._button.connect (\"toggled\", Lang.bind (this, this._toggledCB));\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _toggledCB: function () {\n"
"\n"
"        // Make the window title appear or disappear when the checkbox is toggled\n"
"        if (this._button.get_active() == true)\n"
"            this._window.set_title (\"CheckButton Example\");\n"
"        else\n"
"            this._window.set_title (\"\");\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new CheckButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/checkbutton.js.page:135(section/title)
#: C/comboboxtext.js.page:175(section/title)
#: C/combobox.js.page:232(section/title)
#: C/messagedialog.js.page:188(section/title)
#: C/radiobutton.js.page:273(section/title) C/scale.js.page:207(section/title)
#: C/spinbutton.js.page:198(section/title)
#: C/statusbar.js.page:220(section/title) C/switch.js.page:263(section/title)
#: C/textview.js.page:247(section/title)
#: C/togglebutton.js.page:152(section/title)
#: C/treeview_simple_liststore.js.page:271(section/title)
msgid "In-depth documentation"
msgstr ""

#: C/checkbutton.js.page:139(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.CheckButton."
"html\">Gtk.CheckButton</link>"
msgstr ""

#: C/checkbutton.py.page:7(info/title)
msgctxt "text"
msgid "CheckButton (Python)"
msgstr ""

#: C/checkbutton.py.page:18(info/desc)
msgid "A toggle button in a window"
msgstr ""

#: C/checkbutton.py.page:30(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"CheckButton Example\", application=app)\n"
"        self.set_default_size(300, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a new checkbutton\n"
"        button = Gtk.CheckButton()\n"
"        #  with a label\n"
"        button.set_label(\"Show Title\")\n"
"        # connect the signal \"toggled\" emitted by the checkbutton\n"
"        # with the callback function toggled_cb\n"
"        button.connect(\"toggled\", self.toggled_cb)\n"
"        # by default, the checkbutton is active\n"
"        button.set_active(True)\n"
"\n"
"        # add the checkbutton to the window\n"
"        self.add(button)\n"
"\n"
"    # callback function\n"
"    def toggled_cb(self, button):\n"
"        # if the togglebutton is active, set the title of the window\n"
"        # as \"Checkbutton Example\"\n"
"        if button.get_active():\n"
"            self.set_title(\"CheckButton Example\")\n"
"        # else, set it as \"\" (empty string)\n"
"        else:\n"
"            self.set_title(\"\")\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/checkbutton.py.page:35(section/title)
msgid "Useful methods for a CheckButton widget"
msgstr ""

#: C/checkbutton.py.page:36(section/p)
msgid ""
"In line 17 the <code>\"toggled\"</code> signal is connected to the callback "
"function <code>toggled_cb()</code> using <code><var>widget</var>.connect"
"(<var>signal</var>, <var>callback function</var>)</code>. See <link xref="
"\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""

#: C/checkbutton.py.page:46(item/p) C/togglebutton.py.page:43(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkToggleButton.html"
"\">GtkToggleButton</link>"
msgstr ""

#: C/checkbutton.py.page:47(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCheckButton.html"
"\">GtkCheckButton</link>"
msgstr ""

#: C/checkbutton.vala.page:7(info/title)
msgctxt "text"
msgid "CheckButton (Vala)"
msgstr ""

#: C/checkbutton.vala.page:17(info/desc)
msgid "Create widgets with a disrete toggle button"
msgstr ""

#: C/checkbutton.vala.page:24(page/code)
#, no-wrap
msgid ""
"/* A window in the application */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* The constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"CheckButton Example\");\n"
"\n"
"\t\tthis.set_default_size (300, 100);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tvar checkbutton = new Gtk.CheckButton.with_label (\"Show Title\");\n"
"\n"
"\t\t/* Connect the checkbutton to the\n"
"\t\t * callback function (aka. signal handler).\n"
"\t\t */\n"
"\t\tcheckbutton.toggled.connect (this.toggled_cb);\n"
"\n"
"\t\t/* Add the button to the this window */\n"
"\t\tthis.add (checkbutton);\n"
"\n"
"\t\tcheckbutton.set_active (true);\n"
"\t\tcheckbutton.show ();\n"
"\t}\n"
"\n"
"\t/* The signal handler for the 'toggled' signal of the checkbutton. */\n"
"\tvoid toggled_cb (Gtk.ToggleButton checkbutton) {\n"
"\t\tif (checkbutton.get_active())\n"
"\t\t\tthis.set_title (\"CheckButton Example\");\n"
"\t\telse\n"
"\t\t\tthis.set_title (\"\");\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication : Gtk.Application {\n"
"\n"
"\t/* The constructor */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.checkbutton\");\n"
"\t}\n"
"\n"
"\t/* Override the activate signal of GLib.Application */\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"}\n"
"\n"
"/* main creates and runs the application */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/checkbutton.vala.page:29(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CheckButton.html\">Gtk."
"CheckButton</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/colorbutton.py.page:22(media) C/colorbutton.vala.page:23(media)
msgctxt "_"
msgid ""
"external ref='media/colorbutton.png' md5='904539d26fe367bf99f9a0961cfc9a03'"
msgstr ""
"external ref='media/colorbutton.png' md5='904539d26fe367bf99f9a0961cfc9a03'"

#: C/colorbutton.py.page:7(info/title)
msgctxt "text"
msgid "ColorButton (Python)"
msgstr ""

#: C/colorbutton.py.page:18(info/desc) C/colorbutton.vala.page:19(info/desc)
msgid "A button to launch a color selection dialog"
msgstr ""

#: C/colorbutton.py.page:21(page/title) C/colorbutton.vala.page:22(page/title)
msgid "ColorButton"
msgstr ""

#: C/colorbutton.py.page:23(page/p)
msgid ""
"This ColorButton launches a color selection dialog and prints in the terminal "
"the RGB values of the color selected."
msgstr ""

#: C/colorbutton.py.page:29(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"ColorButton\", application=app)\n"
"        self.set_default_size(150, 50)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a colorbutton (which opens a dialogue window in\n"
"        # which we choose a color)\n"
"        self.button = Gtk.ColorButton()\n"
"        # with a default color (blue, in this instance)\n"
"        color = Gdk.RGBA()\n"
"        color.red = 0.0\n"
"        color.green = 0.0\n"
"        color.blue = 1.0\n"
"        color.alpha = 0.5\n"
"        self.button.set_rgba(color)\n"
"\n"
"        # choosing a color in the dialogue window emits a signal\n"
"        self.button.connect(\"color-set\", self.on_color_chosen)\n"
"\n"
"        # a label\n"
"        label = Gtk.Label()\n"
"        label.set_text(\"Click to choose a color\")\n"
"\n"
"        # a grid to attach button and label\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(self.button, 0, 0, 2, 1)\n"
"        grid.attach(label, 0, 1, 2, 1)\n"
"        self.add(grid)\n"
"\n"
"    # if a new color is chosen, we print it as rgb(r,g,b) in the terminal\n"
"    def on_color_chosen(self, user_data):\n"
"        print \"You chose the color: \" + self.button.get_rgba().to_string()\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup (self):\n"
"        Gtk.Application.do_startup (self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/colorbutton.py.page:33(section/title)
msgid "Useful methods for a ColorButton widget"
msgstr ""

#: C/colorbutton.py.page:34(section/p)
msgid ""
"<code>set_color(color)</code>, where the <code>color</code> is defined as in "
"the example, sets the color of the ColorButton, which by default is black. "
"<code>get_color()</code> returns the color."
msgstr ""

#: C/colorbutton.py.page:35(section/p)
msgid ""
"In line 23 the <code>\"color-set\"</code> signal is connected to the callback "
"function <code>on_color_chosen()</code> using <code><var>widget</var>.connect"
"(<var>signal</var>, <var>callback function</var>)</code>. See <link xref="
"\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""

#: C/colorbutton.py.page:42(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkColorButton.html"
"\">GtkColorButton</link>"
msgstr ""

#: C/colorbutton.py.page:43(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkColorChooser.html"
"\">GtkColorChooser</link>"
msgstr ""

#: C/colorbutton.py.page:44(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gdk3/stable/gdk3-RGBA-Colors.html"
"\">RGBA Colors</link>"
msgstr ""

#: C/colorbutton.vala.page:7(info/title)
msgctxt "text"
msgid "ColorButton (Vala)"
msgstr ""

#: C/colorbutton.vala.page:24(page/p)
msgid "RGB values of the selected color are shown in the label."
msgstr ""

#: C/colorbutton.vala.page:26(page/code)
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\tGtk.Label label;\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\t/* Create the window of this application and show it. */\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"ColorButton\";\n"
"\t\twindow.set_default_size (150, 50);\n"
"\t\twindow.set_border_width (10);\n"
"\n"
"\t\t/* Create a new ColorButton with default blue. */\n"
"\t\tvar blue = Gdk.RGBA ();\n"
"\t\tblue.parse (\"blue\");\n"
"\t\tvar colorbutton = new Gtk.ColorButton.with_rgba (blue);\n"
"\n"
"\t\tlabel = new Gtk.Label (\"Click to choose a color\");\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.attach (colorbutton, 0, 0, 1, 1);\n"
"\t\tgrid.attach_next_to (label, colorbutton, Gtk.PositionType.BOTTOM, 1, 1);\n"
"\n"
"\t\tcolorbutton.color_set.connect (this.on_color_set);\n"
"\n"
"\t\twindow.add (grid);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"\n"
"\tvoid on_color_set (Gtk.ColorButton button) {\n"
"\t\tvar color =  button.get_rgba ();\n"
"\t\tlabel.set_text (\"RGBA: \" + color.to_string());\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/colorbutton.vala.page:31(item/p)
msgid ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.ColorButton.html\">Gtk."
"ColorButton</link>"
msgstr ""

#: C/colorbutton.vala.page:32(item/p)
msgid "<link href=\"http://valadoc.org/gdk-3.0/Gdk.RGBA.html\">Gdk.RGBA</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/comboboxtext.js.page:23(media) C/combobox.py.page:23(media)
#: C/combobox.vala.page:21(media)
msgctxt "_"
msgid "external ref='media/combobox.png' md5='ab9e91bc1a58fe866cb00dd52159251d'"
msgstr ""
"external ref='media/combobox.png' md5='ab9e91bc1a58fe866cb00dd52159251d'"

#: C/comboboxtext.js.page:7(info/title)
msgctxt "text"
msgid "ComboBoxText (JavaScript)"
msgstr ""

#: C/comboboxtext.js.page:19(info/desc)
msgid "A text-only drop-down menu"
msgstr ""

#: C/comboboxtext.js.page:22(page/title)
msgid "ComboBoxText"
msgstr ""

#: C/comboboxtext.js.page:24(page/p)
msgid ""
"A ComboBox is a drop-down menu. The difference between a <link xref="
"\"combobox.js\">ComboBox</link> and a ComboBoxText is that a ComboBoxText "
"just has basic text options, while a full ComboBox uses a ListStore or "
"TreeStore (which are basically spreadsheets) to show things like branching "
"options, or pictures to go alongside each choice."
msgstr ""

#: C/comboboxtext.js.page:25(note/p)
msgid ""
"Unless you need the added features of a full ComboBox, or are comfortable "
"working with ListStores and TreeStores, you may find it a lot simpler to use "
"a ComboBoxText whenever possible."
msgstr ""

#: C/comboboxtext.js.page:41(section/code)
#, no-wrap
msgid ""
"\n"
"const ComboBoxTextExample = new Lang.Class ({\n"
"    Name: 'ComboBoxText Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jscomboboxtext'});\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""

#: C/comboboxtext.js.page:65(section/p) C/messagedialog.js.page:69(section/p)
msgid ""
"All the code for this sample goes in the MessageDialogExample class. The "
"above code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/"
"gjs/Gtk.Application.html\">Gtk.Application</link> for our widgets and window "
"to go in."
msgstr ""

#: C/comboboxtext.js.page:66(section/code) C/combobox.js.page:70(section/code)
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_width: 200,\n"
"            border_width: 10 });\n"
msgstr ""

#: C/comboboxtext.js.page:78(section/p) C/combobox.js.page:82(section/p)
#: C/messagedialog.js.page:83(section/p) C/radiobutton.js.page:78(section/p)
#: C/scale.js.page:77(section/p) C/spinbutton.js.page:80(section/p)
#: C/switch.js.page:87(section/p) C/textview.js.page:87(section/p)
#: C/togglebutton.js.page:80(section/p)
#: C/treeview_simple_liststore.js.page:89(section/p)
msgid ""
"The _buildUI function is where we put all the code to create the "
"application's user interface. The first step is creating a new <link xref="
"\"GtkApplicationWindow.js\">Gtk.ApplicationWindow</link> to put all our "
"widgets into."
msgstr ""

#: C/comboboxtext.js.page:82(section/title)
msgid "Creating the ComboBoxText"
msgstr ""

#: C/comboboxtext.js.page:83(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the combobox\n"
"        this._comboBoxText = new Gtk.ComboBoxText();\n"
"\n"
"        // Populate the combobox\n"
"        let distros = [\"Select distribution\", \"Fedora\", \"Mint\", \"Suse\"];\n"
"        for (let i = 0; i &lt; distros.length; i++)\n"
"            this._comboBoxText.append_text (distros[i]);\n"
"        this._comboBoxText.set_active (0);\n"
"\n"
"        // Connect the combobox's 'changed' signal to our callback function\n"
"        this._comboBoxText.connect ('changed', Lang.bind (this, this._onComboChanged));\n"
msgstr ""

#: C/comboboxtext.js.page:96(section/p)
msgid ""
"After we create the ComboBoxText, we use its <file>append_text</file> method "
"to add text strings to it. Like the entries in an array, they each have a "
"number for an ID, starting with 0. To make things simpler, you can actually "
"create an array for your ComboBoxText entries, then use a for loop to append "
"them in order, like we did here."
msgstr ""

#: C/comboboxtext.js.page:97(section/p)
msgid ""
"After we populate the ComboBoxText, we set its first entry to be active, so "
"that we'll see the \"Select distribution\" line before we click on it. Then "
"we connect its <file>changed</file> signal to the _onComboChanged function, "
"so that it's called whenever you make a new selection from the drop-down menu."
msgstr ""

#: C/comboboxtext.js.page:98(note/p)
msgid ""
"If you'd like to add an entry to a ComboBoxText, you can use the "
"<file>insert_text</file> method. And if you'd rather use a text string as an "
"ID for each entry than rely on numbers alone, you can use the <file>append</"
"file> and <file>insert</file> methods. See the links at the bottom of this "
"tutorial for the details of how to use them."
msgstr ""

#: C/comboboxtext.js.page:100(section/code)
#, no-wrap
msgid ""
"\n"
"        // Add the combobox to the window\n"
"        this._window.add (this._comboBoxText);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""

#: C/comboboxtext.js.page:108(section/p)
msgid ""
"Finally, we add the ComboBoxText to the window, and tell the window to show "
"itself and the widget inside it."
msgstr ""

#: C/comboboxtext.js.page:112(section/title)
#: C/combobox.js.page:169(section/title)
#: C/radiobutton.js.page:180(section/title)
msgid "Function which handles your selection"
msgstr ""

#: C/comboboxtext.js.page:113(section/code)
#, no-wrap
msgid ""
"\n"
"    _onComboChanged: function () {\n"
"\n"
"        // The responses we'll use for our messagedialog\n"
"        let responses = [\"\",\n"
"            \"Fedora is a community distro sponsored by Red Hat.\",\n"
"            \"Mint is a popular distro based on Ubuntu.\",\n"
"            \"SUSE is a name shared by two separate distros.\"];\n"
msgstr ""

#: C/comboboxtext.js.page:122(section/p)
msgid ""
"We're going to create a pop-up <link xref=\"messagedialog.js\">MessageDialog</"
"link>, which shows you a message based on which distro you select. First, we "
"create the array of responses to use. Since the first string in our "
"ComboBoxText is just the \"Select distribution\" message, we make the first "
"string in our array blank."
msgstr ""

#: C/comboboxtext.js.page:124(section/code)
#, no-wrap
msgid ""
"\n"
"        // Which combobox item is active?\n"
"        let activeItem = this._comboBoxText.get_active();\n"
"\n"
"        // No messagedialog if you chose \"Select distribution\"\n"
"        if (activeItem != 0) {\n"
"            this._popUp = new Gtk.MessageDialog ({\n"
"                transient_for: this._window,\n"
"                modal: true,\n"
"                buttons: Gtk.ButtonsType.OK,\n"
"                message_type: Gtk.MessageType.INFO,\n"
"                text: responses[activeItem]});\n"
"\n"
"            // Connect the OK button to a handler function\n"
"            this._popUp.connect ('response', Lang.bind (this, this._onDialogResponse));\n"
"\n"
"            // Show the messagedialog\n"
"            this._popUp.show();\n"
"        }\n"
"\n"
"    },\n"
msgstr ""

#: C/comboboxtext.js.page:146(section/p)
msgid ""
"Before showing a MessageDialog, we first test to make sure you didn't choose "
"the \"Select distribution\" message. After that, we set its text to be the "
"entry in the array that corresponds to the active entry in our ComboBoxText. "
"We do that using the <file>get_active</file> method, which returns the number "
"ID of your selection."
msgstr ""

#: C/comboboxtext.js.page:147(note/p)
msgid ""
"Other methods you can use include <file>get_active_id,</file> which returns "
"the text ID assigned by <file>append,</file> and <file>get_active_text,</"
"file> which returns the full text of the string you selected."
msgstr ""

#: C/comboboxtext.js.page:148(section/p) C/combobox.js.page:205(section/p)
msgid ""
"After we create the MessageDialog, we connect its response signal to the "
"_onDialogResponse function, then tell it to show itself."
msgstr ""

#: C/comboboxtext.js.page:150(section/code)
#: C/combobox.js.page:207(section/code)
#, no-wrap
msgid ""
"\n"
"    _onDialogResponse: function () {\n"
"\n"
"        this._popUp.destroy ();\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""

#: C/comboboxtext.js.page:159(section/p) C/combobox.js.page:216(section/p)
msgid ""
"Since the only button the MessageDialog has is an OK button, we don't need to "
"test its response_id to see which button was clicked. All we do here is "
"destroy the popup."
msgstr ""

#: C/comboboxtext.js.page:161(section/code)
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new ComboBoxTextExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/comboboxtext.js.page:166(section/p)
msgid ""
"Finally, we create a new instance of the finished ComboBoxTextExample class, "
"and set the application running."
msgstr ""

#: C/comboboxtext.js.page:171(section/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ComboBoxTextExample = new Lang.Class ({\n"
"    Name: 'ComboBoxText Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jscomboboxtext'});\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_width: 200,\n"
"            border_width: 10 });\n"
"\n"
"        // Create the combobox\n"
"        this._comboBoxText = new Gtk.ComboBoxText();\n"
"\n"
"        // Populate the combobox\n"
"        let distros = [\"Select distribution\", \"Fedora\", \"Mint\", \"Suse\"];\n"
"        for (let i = 0; i &lt; distros.length; i++)\n"
"            this._comboBoxText.append_text (distros[i]);\n"
"        this._comboBoxText.set_active (0);\n"
"\n"
"        // Connect the combobox's 'changed' signal to our callback function\n"
"        this._comboBoxText.connect ('changed', Lang.bind (this, this._onComboChanged));\n"
"\n"
"        // Add the combobox to the window\n"
"        this._window.add (this._comboBoxText);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onComboChanged: function () {\n"
"\n"
"        // The responses we'll use for our messagedialog\n"
"        let responses = [\"\",\n"
"            \"Fedora is a community distro sponsored by Red Hat.\",\n"
"            \"Mint is a popular distro based on Ubuntu.\",\n"
"            \"SUSE is a name shared by two separate distros.\"];\n"
"\n"
"        // Which combobox item is active?\n"
"        let activeItem = this._comboBoxText.get_active();\n"
"\n"
"        // No messagedialog if you chose \"Select distribution\"\n"
"        if (activeItem != 0) {\n"
"            this._popUp = new Gtk.MessageDialog ({\n"
"                transient_for: this._window,\n"
"                modal: true,\n"
"                buttons: Gtk.ButtonsType.OK,\n"
"                message_type: Gtk.MessageType.INFO,\n"
"                text: responses[activeItem]});\n"
"\n"
"            // Connect the OK button to a handler function\n"
"            this._popUp.connect ('response', Lang.bind (this, this._onDialogResponse));\n"
"\n"
"            // Show the messagedialog\n"
"            this._popUp.show();\n"
"        }\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onDialogResponse: function () {\n"
"\n"
"        this._popUp.destroy ();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ComboBoxTextExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/comboboxtext.js.page:182(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ComboBoxText."
"html\">Gtk.ComboBoxText</link>"
msgstr ""

#: C/comboboxtext.js.page:183(item/p) C/combobox.js.page:243(item/p)
#: C/entry.js.page:32(item/p) C/messagedialog.js.page:197(item/p)
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.MessageDialog."
"html\">Gtk.MessageDialog</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/combobox.js.page:25(media) C/combobox_multicolumn.py.page:22(media)
msgctxt "_"
msgid ""
"external ref='media/combobox_multicolumn.png' "
"md5='43f16648fb11ebc7d2f70825ed0f63b3'"
msgstr ""
"external ref='media/combobox_multicolumn.png' "
"md5='43f16648fb11ebc7d2f70825ed0f63b3'"

#: C/combobox.js.page:7(info/title)
#, fuzzy
#| msgid "JavaScript"
msgctxt "text"
msgid "ComboBox (JavaScript)"
msgstr "JavaScript"

#: C/combobox.js.page:21(info/desc)
msgid "A customizable drop-down menu"
msgstr ""

#: C/combobox.js.page:24(page/title) C/combobox.vala.page:20(page/title)
msgid "ComboBox"
msgstr ""

#: C/combobox.js.page:26(page/p)
msgid ""
"A ComboBox is an extremely customizable drop-down menu. It holds the "
"equivalent of a <link xref=\"treeview_simple_liststore.js\">TreeView</link> "
"widget that appears when you click on it, complete with a ListStore "
"(basically a spreadsheet) that says what's in the rows and columns. In this "
"example, our ListStore has the name of each option in one column, and the "
"name of a stock icon in the other, which the ComboBox then turns into an icon "
"for each option."
msgstr ""

#: C/combobox.js.page:27(page/p)
msgid ""
"You select a whole horizontal row at a time, so the icons aren't treated as "
"separate options. They and the text beside them make up each option you can "
"click on."
msgstr ""

#: C/combobox.js.page:28(note/p)
msgid ""
"Working with a ListStore can be time-consuming. If you just want a simple "
"text-only drop-down menu, take a look at the <link xref=\"comboboxtext.js"
"\">ComboBoxText</link>. It doesn't take as much time to set up, and is easier "
"to work with."
msgstr ""

#: C/combobox.js.page:33(section/code)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
msgstr ""

#: C/combobox.js.page:45(section/code)
#, no-wrap
msgid ""
"\n"
"const ComboBoxExample = new Lang.Class ({\n"
"    Name: 'ComboBox Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jscombobox'});\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""

#: C/combobox.js.page:69(section/p)
msgid ""
"All the code for this sample goes in the ComboBoxExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"Application.html\">Gtk.Application</link> for our widgets and window to go in."
msgstr ""

#: C/combobox.js.page:86(section/title)
#: C/treeview_simple_liststore.js.page:93(section/title)
#, fuzzy
#| msgid "Creating the user interface"
msgid "Creating the ListStore"
msgstr "Erstellen der Benutzeroberfläche"

#: C/combobox.js.page:87(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the liststore to put our options in\n"
"        this._listStore = new Gtk.ListStore();\n"
"        this._listStore.set_column_types ([\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING]);\n"
msgstr ""

#: C/combobox.js.page:94(section/p)
msgid ""
"This ListStore works like the one used in the <link xref="
"\"treeview_simple_liststore.js\">TreeView</link> example. We're giving it two "
"columns, both strings, because one of them will contain the names of <link "
"href=\"http://developer.gnome.org/gtk/2.24/gtk-Stock-Items.html#GTK-STOCK-"
"ABOUT:CAPS\">stock Gtk icons</link>."
msgstr ""

#: C/combobox.js.page:95(section/p)
msgid ""
"If we'd wanted to use our own icons that weren't already built in to GNOME, "
"we'd have needed to use the <file>gtk.gdk.Pixbuf</file> type instead. Here "
"are a few other types you can use:"
msgstr ""

#: C/combobox.js.page:97(item/p)
#: C/treeview_simple_liststore.js.page:106(item/p)
msgid "<file>GObject.TYPE_BOOLEAN</file> -- True or false"
msgstr ""

#: C/combobox.js.page:98(item/p)
#: C/treeview_simple_liststore.js.page:107(item/p)
msgid ""
"<file>GObject.TYPE_FLOAT</file> -- A floating point number (one with a "
"decimal point)"
msgstr ""

#: C/combobox.js.page:99(item/p)
#: C/treeview_simple_liststore.js.page:108(item/p)
msgid "<file>GObject.TYPE_STRING</file> -- A string of letters and numbers"
msgstr ""

#: C/combobox.js.page:101(note/p)
#: C/treeview_simple_liststore.js.page:112(note/p)
msgid ""
"You need to put the line <file>const GObject = imports.gi.GObject;</file> at "
"the start of your application's code, like we did in this example, if you "
"want to be able to use GObject types."
msgstr ""

#: C/combobox.js.page:103(section/code)
#, no-wrap
msgid ""
"\n"
"        // This array holds our list of options and their icons\n"
"        let options = [{ name: \"Select\" },\n"
"            { name: \"New\", icon: Gtk.STOCK_NEW },\n"
"            { name: \"Open\", icon: Gtk.STOCK_OPEN },\n"
"            { name: \"Save\", icon: Gtk.STOCK_SAVE }];\n"
"\n"
"        // Put the options in the liststore\n"
"        for (let i = 0; i &lt; options.length; i++ ) {\n"
"            let option = options[i];\n"
"            let iter = this._listStore.append();\n"
"            this._listStore.set (iter, [0], [option.name]);\n"
"            if ('icon' in option)\n"
"                this._listStore.set (iter, [1], [option.icon]);\n"
"        }\n"
msgstr ""

#: C/combobox.js.page:119(section/p)
msgid ""
"Here we create an array of the text options and their corresponding icons, "
"then put them into the ListStore in much the same way we would for a <link "
"xref=\"treeview_simple_liststore.js\">TreeView's</link> ListStore. We only "
"want to put an icon in if there's actually an icon in the options array, so "
"we make sure to check for that first."
msgstr ""

#: C/combobox.js.page:120(note/p)
msgid ""
"\"Select\" isn't really an option so much as an invitation to click on our "
"ComboBox, so it doesn't need an icon."
msgstr ""

#: C/combobox.js.page:124(section/title)
msgid "Creating the ComboBox"
msgstr ""

#: C/combobox.js.page:125(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the combobox\n"
"        this._comboBox = new Gtk.ComboBox({\n"
"            model: this._listStore});\n"
msgstr ""

#: C/combobox.js.page:130(section/p)
msgid ""
"Each ComboBox has an underlying \"model\" it takes all its options from. You "
"can use a TreeStore if you want to have a ComboBox with branching options. In "
"this case, we're just using the ListStore we already created."
msgstr ""

#: C/combobox.js.page:131(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create some cellrenderers for the items in each column\n"
"        let rendererPixbuf = new Gtk.CellRendererPixbuf();\n"
"        let rendererText = new Gtk.CellRendererText();\n"
"\n"
"        // Pack the renderers into the combobox in the order we want to see\n"
"        this._comboBox.pack_start (rendererPixbuf, false);\n"
"        this._comboBox.pack_start (rendererText, false);\n"
"\n"
"        // Set the renderers to use the information from our liststore\n"
"        this._comboBox.add_attribute (rendererText, \"text\", 0);\n"
"        this._comboBox.add_attribute (rendererPixbuf, \"stock_id\", 1);\n"
msgstr ""

#: C/combobox.js.page:144(section/p)
msgid ""
"This part, again, works much like creating CellRenderers and packing them "
"into the columns of a <link xref=\"treeview_simple_liststore.js\">TreeView</"
"link>. The biggest difference is that we don't need to create the ComboBox's "
"columns as separate objects. We just pack the CellRenderers into it in the "
"order we want them to show up, then tell them to pull information from the "
"ListStore (and what type of information we want them to expect)."
msgstr ""

#: C/combobox.js.page:145(section/p)
msgid ""
"We use a CellRendererText to show the text, and a CellRendererPixbuf to show "
"the icons. We can store the names of the icons' stock types as strings, but "
"when we display them we need a CellRenderer that's designed for pictures."
msgstr ""

#: C/combobox.js.page:146(note/p)
msgid ""
"Just like with a TreeView, the \"model\" (in this case a ListStore) and the "
"\"view\" (in this case our ComboBox) are separate. Because of that, we can do "
"things like have the columns in one order in the ListStore, and then pack the "
"CellRenderers that correspond to those columns into the ComboBox in a "
"different order. We can even create a TreeView or other widget that shows the "
"information in the ListStore in a different way, without it affecting our "
"ComboBox."
msgstr ""

#: C/combobox.js.page:148(section/code)
#, no-wrap
msgid ""
"\n"
"        // Set the first row in the combobox to be active on startup\n"
"        this._comboBox.set_active (0);\n"
"\n"
"        // Connect the combobox's 'changed' signal to our callback function\n"
"        this._comboBox.connect ('changed', Lang.bind (this, this._onComboChanged));\n"
msgstr ""

#: C/combobox.js.page:155(section/p)
msgid ""
"We want the \"Select\" text to be the part people see at first, that gets "
"them to click on the ComboBox. So we set it to be the active entry. We also "
"connect the ComboBox's <file>changed</file> signal to a callback function, so "
"that any time someone clicks on a new option something happens. In this case, "
"we're just going to show a popup with a little haiku."
msgstr ""

#: C/combobox.js.page:157(section/code)
#, no-wrap
msgid ""
"\n"
"        // Add the combobox to the window\n"
"        this._window.add (this._comboBox);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""

#: C/combobox.js.page:165(section/p)
msgid ""
"Finally, we add the ComboBox to the window, and tell the window to show "
"itself and everything inside it."
msgstr ""

#: C/combobox.js.page:170(section/code)
#, no-wrap
msgid ""
"\n"
"    _selected: function () {\n"
"\n"
"        // The silly pseudohaiku that we'll use for our messagedialog\n"
"        let haiku = [\"\",\n"
"            \"You ask for the new\\nwith no thought for the aged\\nlike fallen leaves trod.\",\n"
"            \"Like a simple clam\\nrevealing a lustrous pearl\\nit opens for you.\",\n"
"            \"A moment in time\\na memory on the breeze\\nthese things can't be saved.\"];\n"
msgstr ""

#: C/combobox.js.page:179(section/p)
msgid ""
"We're going to create a pop-up <link xref=\"messagedialog.js\">MessageDialog</"
"link>, which shows you a silly haiku based on which distro you select. First, "
"we create the array of haiku to use. Since the first string in our ComboBox "
"is just the \"Select\" message, we make the first string in our array blank."
msgstr ""

#: C/combobox.js.page:181(section/code)
#, no-wrap
msgid ""
"\n"
"        // Which combobox item is active?\n"
"        let activeItem = this._comboBox.get_active();\n"
"\n"
"        // No messagedialog if you choose \"Select\"\n"
"        if (activeItem != 0) {\n"
"            this._popUp = new Gtk.MessageDialog ({\n"
"                transient_for: this._window,\n"
"                modal: true,\n"
"                buttons: Gtk.ButtonsType.OK,\n"
"                message_type: Gtk.MessageType.INFO,\n"
"                text: haiku[activeItem]});\n"
"\n"
"            // Connect the OK button to a handler function\n"
"            this._popUp.connect ('response', Lang.bind (this, this._onDialogResponse));\n"
"\n"
"            // Show the messagedialog\n"
"            this._popUp.show();\n"
"        }\n"
"\n"
"    },\n"
msgstr ""

#: C/combobox.js.page:203(section/p)
msgid ""
"Before showing a MessageDialog, we first test to make sure you didn't choose "
"the \"Select\" message. After that, we set its text to be the haiku in the "
"array that corresponds to the active entry in our ComboBoxText. We do that "
"using the <file>get_active</file> method, which returns the number ID of your "
"selection."
msgstr ""

#: C/combobox.js.page:204(note/p)
msgid ""
"Other methods you can use include <file>get_active_id</file>, which returns "
"the text ID assigned by <file>append</file>, and <file>get_active_text</"
"file>, which returns the full text of the string you selected."
msgstr ""

#: C/combobox.js.page:218(section/code)
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new ComboBoxExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/combobox.js.page:223(section/p)
msgid ""
"Finally, we create a new instance of the finished ComboBoxExample class, and "
"set the application running."
msgstr ""

#: C/combobox.js.page:228(section/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ComboBoxExample = new Lang.Class ({\n"
"    Name: 'ComboBox Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jscombobox'});\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_width: 200,\n"
"            border_width: 10 });\n"
"\n"
"        // Create the liststore to put our options in\n"
"        this._listStore = new Gtk.ListStore();\n"
"        this._listStore.set_column_types ([\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING]);\n"
"\n"
"        // This array holds our list of options and their icons\n"
"        let options = [{ name: \"Select\" },\n"
"            { name: \"New\", icon: Gtk.STOCK_NEW },\n"
"            { name: \"Open\", icon: Gtk.STOCK_OPEN },\n"
"            { name: \"Save\", icon: Gtk.STOCK_SAVE }];\n"
"\n"
"        // Put the options in the liststore\n"
"        for (let i = 0; i &lt; options.length; i++ ) {\n"
"            let option = options[i];\n"
"            let iter = this._listStore.append();\n"
"            this._listStore.set (iter, [0], [option.name]);\n"
"            if ('icon' in option)\n"
"                this._listStore.set (iter, [1], [option.icon]);\n"
"        }\n"
"\n"
"        // Create the combobox\n"
"        this._comboBox = new Gtk.ComboBox({\n"
"            model: this._listStore});\n"
"\n"
"        // Create some cellrenderers for the items in each column\n"
"        let rendererPixbuf = new Gtk.CellRendererPixbuf();\n"
"        let rendererText = new Gtk.CellRendererText();\n"
"\n"
"        // Pack the renderers into the combobox in the order we want to see\n"
"        this._comboBox.pack_start (rendererPixbuf, false);\n"
"        this._comboBox.pack_start (rendererText, false);\n"
"\n"
"        // Set the renderers to use the information from our liststore\n"
"        this._comboBox.add_attribute (rendererText, \"text\", 0);\n"
"        this._comboBox.add_attribute (rendererPixbuf, \"stock_id\", 1);\n"
"\n"
"        // Set the first row in the combobox to be active on startup\n"
"        this._comboBox.set_active (0);\n"
"\n"
"        // Connect the combobox's 'changed' signal to our callback function\n"
"        this._comboBox.connect ('changed', Lang.bind (this, this._onComboChanged));\n"
"\n"
"        // Add the combobox to the window\n"
"        this._window.add (this._comboBox);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onComboChanged: function () {\n"
"\n"
"        // The silly pseudohaiku that we'll use for our messagedialog\n"
"        let haiku = [\"\",\n"
"            \"You ask for the new\\nwith no thought for the aged\\nlike fallen leaves trod.\",\n"
"            \"Like a simple clam\\nrevealing a lustrous pearl\\nit opens for you.\",\n"
"            \"A moment in time\\na memory on the breeze\\nthese things can't be saved.\"];\n"
"\n"
"        // Which combobox item is active?\n"
"        let activeItem = this._comboBox.get_active();\n"
"\n"
"        // No messagedialog if you choose \"Select\"\n"
"        if (activeItem != 0) {\n"
"            this._popUp = new Gtk.MessageDialog ({\n"
"                transient_for: this._window,\n"
"                modal: true,\n"
"                buttons: Gtk.ButtonsType.OK,\n"
"                message_type: Gtk.MessageType.INFO,\n"
"                text: haiku[activeItem]});\n"
"\n"
"            // Connect the OK button to a handler function\n"
"            this._popUp.connect ('response', Lang.bind (this, this._onDialogResponse));\n"
"\n"
"            // Show the messagedialog\n"
"            this._popUp.show();\n"
"        }\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onDialogResponse: function () {\n"
"\n"
"        this._popUp.destroy ();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ComboBoxExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/combobox.js.page:239(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"CellRendererPixbuf.html\">Gtk.CellRendererPixbuf</link>"
msgstr ""

#: C/combobox.js.page:240(item/p)
#: C/treeview_simple_liststore.js.page:278(item/p)
msgid ""
"<link href=\"www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.CellRendererText.html"
"\">Gtk.CellRendererText</link>"
msgstr ""

#: C/combobox.js.page:241(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ComboBox.html"
"\">Gtk.ComboBox</link>"
msgstr ""

#: C/combobox.js.page:242(item/p)
#: C/treeview_simple_liststore.js.page:279(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ListStore.html"
"\">Gtk.ListStore</link>"
msgstr ""

#: C/combobox.js.page:244(item/p)
#: C/treeview_simple_liststore.js.page:280(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TreeIter.html"
"\">Gtk.TreeIter</link>"
msgstr ""

#: C/combobox.py.page:7(info/title)
#: C/combobox_multicolumn.py.page:7(info/title)
msgctxt "text"
msgid "ComboBox (Python)"
msgstr ""

#: C/combobox.py.page:19(info/desc) C/combobox.vala.page:17(info/desc)
#: C/combobox_multicolumn.py.page:18(info/desc)
msgid "A widget used to choose from a list of items"
msgstr ""

#: C/combobox.py.page:22(page/title)
msgid "ComboBox (one column)"
msgstr ""

#: C/combobox.py.page:24(page/p) C/combobox_multicolumn.py.page:23(page/p)
msgid "This ComboBox prints to the terminal your selection when you change it."
msgstr ""

#: C/combobox.py.page:30(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"distros = [[\"Select distribution\"], [\"Fedora\"], [\"Mint\"], [\"Suse\"]]\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(200, -1)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data in the model, of type string\n"
"        listmodel = Gtk.ListStore(str)\n"
"        # append the data in the model\n"
"        for i in range(len(distros)):\n"
"            listmodel.append(distros[i])\n"
"\n"
"        # a combobox to see the data stored in the model\n"
"        combobox = Gtk.ComboBox(model=listmodel)\n"
"\n"
"        # a cellrenderer to render the text\n"
"        cell = Gtk.CellRendererText()\n"
"\n"
"        # pack the cell into the beginning of the combobox, allocating\n"
"        # no more space than needed\n"
"        combobox.pack_start(cell, False)\n"
"        # associate a property (\"text\") of the cellrenderer (cell) to a column (column 0)\n"
"        # in the model used by the combobox\n"
"        combobox.add_attribute(cell, \"text\", 0)\n"
"\n"
"        # the first row is the active one by default at the beginning\n"
"        combobox.set_active(0)\n"
"\n"
"        # connect the signal emitted when a row is selected to the callback function\n"
"        combobox.connect(\"changed\", self.on_changed)\n"
"\n"
"        # add the combobox to the window\n"
"        self.add(combobox)\n"
"\n"
"    def on_changed(self, combo):\n"
"        # if the row selected is not the first one, write its value on the terminal\n"
"        if combo.get_active() != 0:\n"
"            print \"You chose \" + str(distros[combo.get_active()][0]) +\".\"\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/combobox.py.page:34(section/title)
#: C/combobox_multicolumn.py.page:34(section/title)
msgid "Useful methods for a ComboBox widget"
msgstr ""

#: C/combobox.py.page:35(section/p)
#: C/combobox_multicolumn.py.page:35(section/p)
msgid ""
"The ComboBox widget is designed around a <em>Model/View/Controller</em> "
"design: the <em>Model</em> stores the data; the <em>View</em> gets change "
"notifications and displays the content of the model; the <em>Controller</em>, "
"finally, changes the state of the model and notifies the view of these "
"changes. For more information and for a list of useful methods for ComboBox "
"see <link xref=\"model-view-controller.py\"/>."
msgstr ""

#: C/combobox.py.page:36(section/p)
msgid ""
"In line 35 the <code>\"changed\"</code> signal is connected to the callback "
"function <code>on_changed()</code> using <code><var>widget</var>.connect"
"(<var>signal</var>, <var>callback function</var>)</code>. See <link xref="
"\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""

#: C/combobox.py.page:44(item/p) C/combobox_multicolumn.py.page:43(item/p)
#: C/model-view-controller.py.page:189(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkComboBox.html"
"\">GtkComboBox</link>"
msgstr ""

#: C/combobox.py.page:45(item/p) C/combobox_multicolumn.py.page:44(item/p)
#: C/treeview_advanced_liststore.py.page:45(item/p)
#: C/treeview_simple_liststore.py.page:46(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkListStore.html"
"\">GtkListStore</link>"
msgstr ""

#: C/combobox.py.page:46(item/p) C/combobox_multicolumn.py.page:45(item/p)
#: C/treeview_advanced_liststore.py.page:46(item/p)
#: C/treeview_cellrenderertoggle.py.page:46(item/p)
#: C/treeview_simple_liststore.py.page:47(item/p)
#: C/treeview_treestore.py.page:46(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRendererText.html"
"\">GtkCellRendererText</link>"
msgstr ""

#: C/combobox.py.page:47(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellLayout.html"
"\">GtkCellLayout</link>"
msgstr ""

#: C/combobox.py.page:48(item/p) C/combobox_multicolumn.py.page:48(item/p)
#: C/treeview_advanced_liststore.py.page:48(item/p)
#: C/treeview_simple_liststore.py.page:49(item/p)
msgid ""
"<link href=\"http://git.gnome.org/browse/pygobject/tree/gi/overrides/Gtk.py"
"\">pygobject - Python bindings for GObject Introspection</link>"
msgstr ""

#: C/combobox.vala.page:7(info/title)
msgctxt "text"
msgid "ComboBox (Vala)"
msgstr ""

#: C/combobox.vala.page:22(page/p)
msgid "This ComboBox prints to the terminal when you change your selection."
msgstr ""

#: C/combobox.vala.page:24(page/code)
#, no-wrap
msgid ""
"/* A window in the application */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* An instance array of linux distributions belonging to this window. */\n"
"\tstring[] distros = {\"Select distribution\", \"Fedora\", \"Mint\", \"Suse\"};\n"
"\n"
"\t/* This enum makes the code more readable when we refer to\n"
"\t * the column as Column.DISTRO, instead of just 0.\n"
"\t */\n"
"\tenum Column {\n"
"\t\tDISTRO\n"
"\t}\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Welcome to GNOME\");\n"
"\n"
"\t\tthis.set_default_size (200, -1);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tGtk.ListStore liststore = new Gtk.ListStore (1, typeof (string));\n"
"\n"
"\t\tfor (int i = 0; i &lt; distros.length; i++){\n"
"\t\t\tGtk.TreeIter iter;\n"
"\t\t\tliststore.append (out iter);\n"
"\t\t\tliststore.set (iter, Column.DISTRO, distros[i]);\n"
"\t\t}\n"
"\n"
"\t\tGtk.ComboBox combobox = new Gtk.ComboBox.with_model (liststore);\n"
"\t\tGtk.CellRendererText cell = new Gtk.CellRendererText ();\n"
"\t\tcombobox.pack_start (cell, false);\n"
"\n"
"\t\tcombobox.set_attributes (cell, \"text\", Column.DISTRO);\n"
"\n"
"\t\t/* Set the first item in the list to be selected (active). */\n"
"\t\tcombobox.set_active (0);\n"
"\n"
"\t\t/* Connect the 'changed' signal of the combobox\n"
"\t\t * to the signal handler (aka. callback function.\n"
"\t\t */\n"
"\t\tcombobox.changed.connect (this.item_changed);\n"
"\n"
"\t\t/* Add the combobox to this window */\n"
"\t\tthis.add (combobox);\n"
"\t\tcombobox.show ();\n"
"\t}\n"
"\n"
"\t/* Signal handler for the 'changed' signal of the combobox. */\n"
"\tvoid item_changed (Gtk.ComboBox combo) {\n"
"\t\tif (combo.get_active () !=0) {\n"
"\t\t\tprint (\"You chose \" + distros [combo.get_active ()] +\"\\n\");\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication : Gtk.Application {\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the activate signal of GLib.Application,\n"
"\t * which is inherited by Gtk.Application.\n"
"\t */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create the window of this application\n"
"\t\t * and show it.\n"
"\t\t */\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/combobox.vala.page:29(item/p)
#: C/treeview_simple_liststore.vala.page:32(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ListStore.html\">Gtk."
"ListStore</link>"
msgstr ""

#: C/combobox.vala.page:30(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ComboBox.html\">Gtk."
"ComboBox</link>"
msgstr ""

#: C/combobox.vala.page:31(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CellRendererText.html\">Gtk."
"CellRendererText</link>"
msgstr ""

#: C/combobox.vala.page:32(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CellLayout.set_attributes."
"html\">set_attributes</link>"
msgstr ""

#: C/combobox_multicolumn.py.page:21(page/title)
msgid "ComboBox (two columns)"
msgstr ""

#: C/combobox_multicolumn.py.page:29(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"actions = [[\"Select\", None],\n"
"           [\"New\", Gtk.STOCK_NEW],\n"
"           [\"Open\", Gtk.STOCK_OPEN],\n"
"           [\"Save\", Gtk.STOCK_SAVE]]\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(200, -1)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data in the model, of type string on two columns\n"
"        listmodel = Gtk.ListStore(str, str)\n"
"        # append the data\n"
"        for i in range(len(actions)):\n"
"            listmodel.append(actions[i])\n"
"\n"
"        # a combobox to see the data stored in the model\n"
"        combobox = Gtk.ComboBox(model=listmodel)\n"
"\n"
"        # cellrenderers to render the data\n"
"        renderer_pixbuf = Gtk.CellRendererPixbuf()\n"
"        renderer_text = Gtk.CellRendererText()\n"
"\n"
"        # we pack the cell into the beginning of the combobox, allocating\n"
"        # no more space than needed;\n"
"        # first the image, then the text;\n"
"        # note that it does not matter in which order they are in the model,\n"
"        # the visualization is decided by the order of the cellrenderers\n"
"        combobox.pack_start(renderer_pixbuf, False)\n"
"        combobox.pack_start(renderer_text, False)\n"
"\n"
"        # associate a property of the cellrenderer to a column in the model\n"
"        # used by the combobox\n"
"        combobox.add_attribute(renderer_text, \"text\", 0)\n"
"        combobox.add_attribute(renderer_pixbuf, \"stock_id\", 1)\n"
"\n"
"        # the first row is the active one at the beginning\n"
"        combobox.set_active(0)\n"
"\n"
"        # connect the signal emitted when a row is selected to the callback function\n"
"        combobox.connect(\"changed\", self.on_changed)\n"
"\n"
"        # add the combobox to the window\n"
"        self.add(combobox)\n"
"\n"
"    def on_changed(self, combo):\n"
"        # if the row selected is not the first one, write on the terminal\n"
"        # the value of the first column in the model\n"
"        if combo.get_active() != 0:\n"
"\t\t\tprint \"You chose \" + str(actions[combo.get_active()][0]) +\"\\n\"\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/combobox_multicolumn.py.page:36(section/p)
msgid ""
"In line 45 the <code>\"changed\"</code> signal is connected to the callback "
"function <code>on_changed()</code> using <code><var>widget</var>.connect"
"(<var>signal</var>, <var>callback function</var>)</code>. See <link xref="
"\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""

#: C/combobox_multicolumn.py.page:46(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRendererPixbuf."
"html\">GtkCellRendererPixbuf</link>"
msgstr ""

#: C/combobox_multicolumn.py.page:47(item/p) C/toolbar.py.page:57(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/gtk3-Stock-Items.html"
"\">Stock Items</link>"
msgstr ""

#: C/cpp.page:6(info/title)
msgctxt "link"
msgid "C++"
msgstr "C++"

#: C/cpp.page:15(page/title)
msgid "Code samples and platform demos in C++"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/dialog.c.page:24(media) C/dialog.js.page:21(media)
#: C/dialog.py.page:23(media) C/dialog.vala.page:21(media)
msgctxt "_"
msgid "external ref='media/dialog.png' md5='c90a33386a600e892fe623d4072c8c38'"
msgstr "external ref='media/dialog.png' md5='c90a33386a600e892fe623d4072c8c38'"

#: C/dialog.c.page:7(info/title)
msgctxt "text"
msgid "Dialog (C)"
msgstr ""

#: C/dialog.c.page:19(info/desc) C/dialog.js.page:17(info/desc)
#: C/dialog.py.page:19(info/desc) C/dialog.vala.page:17(info/desc)
msgid "A popup window"
msgstr ""

#: C/dialog.c.page:22(page/title) C/dialog.js.page:20(page/title)
#: C/dialog.py.page:22(page/title) C/dialog.vala.page:20(page/title)
msgid "Dialog"
msgstr ""

#: C/dialog.c.page:25(page/p)
msgid "A dialog window that pops up when a button is pressed."
msgstr ""

#: C/dialog.c.page:27(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
" \n"
"\n"
"/*Callback function in which reacts to the \"response\" signal. Be sure to place \n"
"it before the function it is called in*/\n"
"static void\n"
"on_response (GtkDialog *dialog,\n"
"             gint       response_id,\n"
"             gpointer   user_data)\n"
"{\n"
"  /*For demonstration purposes, this will show the int value \n"
"  of the response type*/\n"
"  g_print (\"response is %d\\n\", response_id);\n"
"  \n"
"  /*This will cause the dialog to be destroyed*/\n"
"  gtk_widget_destroy (GTK_WIDGET (dialog));\n"
"}\n"
"\n"
"\n"
"\n"
"/*Callback function in which reacts to the \"clicked\" signal*/\n"
"static void\n"
"show_dialog (GtkButton *button,\n"
"             gpointer   user_data)\n"
"{\n"
"  GtkWindow *window = user_data;\n"
"  GtkWidget *dialog;\n"
"  GtkWidget *content_area;\n"
"  GtkWidget *label;\n"
"\n"
"  gint response_id;\n"
"\n"
"  /*Create the dialog window. Modal windows prevent interaction with other \n"
"  windows in the same application*/\n"
"  dialog = gtk_dialog_new_with_buttons (\"A Gtk+ Dialog\", \n"
"                                        window, \n"
"                                        GTK_DIALOG_MODAL, \n"
"                                        GTK_STOCK_OK, \n"
"                                        GTK_RESPONSE_OK, \n"
"                                        NULL);\n"
"\n"
"  /*Create a label and attach it to the content area of the dialog*/\n"
"  content_area = gtk_dialog_get_content_area (GTK_DIALOG (dialog));\n"
"  label = gtk_label_new (\"This demonstrates a dialog with a label\");\n"
"  gtk_container_add (GTK_CONTAINER (content_area), label);\n"
"\n"
"  /*The main purpose of this is to show dialog's child widget, label*/\n"
"  gtk_widget_show_all (dialog);\n"
"  \n"
"  /*Connecting the \"response\" signal from the user to the associated\n"
"  callback function*/\n"
"  g_signal_connect (GTK_DIALOG (dialog), \n"
"                    \"response\", \n"
"                    G_CALLBACK (on_response), \n"
"                    NULL);\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *button;\n"
" \n"
"  /*Create a window with a title and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"GNOME Button\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 250, 50);\n"
"\n"
"  /*Create a button with a label, and add it to the window*/\n"
"  button = gtk_button_new_with_label (\"Click Me\");\n"
"  gtk_container_add (GTK_CONTAINER (window), button);\n"
" \n"
"  /*Connecting the clicked signal to the callback*/\n"
"  g_signal_connect (GTK_BUTTON (button), \n"
"                    \"clicked\", \n"
"                    G_CALLBACK (show_dialog), \n"
"                    GTK_WINDOW (window));\n"
" \n"
"  gtk_widget_show_all (window);\n"
"}\n"
" \n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
" \n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
" \n"
"  return status;\n"
"}\n"
msgstr ""

#: C/dialog.c.page:35(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkDialog.html"
"\">GtkDialog</link>"
msgstr ""

#: C/dialog.c.page:36(item/p) C/radiobutton.c.page:35(item/p)
#: C/spinbutton.c.page:37(item/p) C/switch.c.page:34(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkLabel.html\">GtkLabel</"
"link>"
msgstr ""

#: C/dialog.js.page:7(info/title)
#, fuzzy
#| msgid "JavaScript"
msgctxt "text"
msgid "Dialog (JavaScript)"
msgstr "JavaScript"

#: C/dialog.js.page:22(page/p)
msgid ""
"A customizable popup window, which has a content area and an action area. "
"This example dialog's content area contains a short message, and its action "
"area contains a button which dismisses the dialog."
msgstr ""

#: C/dialog.js.page:24(page/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const DialogExample = new Lang.Class ({\n"
"    Name: 'Dialog Example',\n"
"\n"
"    // Create the application itself\n"
"        _init: function () {\n"
"            this.application = new Gtk.Application ({\n"
"                application_id: 'org.example.jsdialog',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                         window_position: Gtk.WindowPosition.CENTER,\n"
"                                                         title: \"Gtk.Dialog Example\",\n"
"                                                         default_height: 50,\n"
"                                                         default_width: 250 });\n"
"\n"
"        // Create a button\n"
"        this._button = new Gtk.Button ({label: \"Click Me\"});\n"
"        this._window.add (this._button);\n"
"\n"
"        // Bind it to the function that creates the dialog\n"
"        this._button.connect (\"clicked\", Lang.bind(this, this._createDialog));\n"
"\n"
"                // Show the window and all child widgets\n"
"                this._window.show_all();\n"
"    },\n"
"\n"
"    _createDialog: function () {\n"
"\n"
"        // Create the dialog\n"
"        this._dialog = new Gtk.Dialog ({ transient_for: this._window,\n"
"                         modal: true,\n"
"                         title: \"A Gtk+ dialog\" });\n"
"\n"
"        // Create the dialog's content area, which contains a message\n"
"        this._contentArea = this._dialog.get_content_area();\n"
"        this._message = new Gtk.Label ({label: \"This demonstrates a dialog with a label\"});\n"
"        this._contentArea.add (this._message);\n"
"\n"
"        // Create the dialog's action area, which contains a stock OK button\n"
"        this._actionArea = this._dialog.get_action_area();\n"
"        this._OKButton = new Gtk.Button.new_from_stock (Gtk.STOCK_OK);\n"
"        this._actionArea.add (this._OKButton);\n"
"\n"
"        // Connect the button to the function that handles what it does\n"
"        this._OKButton.connect (\"clicked\", Lang.bind (this, this._OKHandler));\n"
"\n"
"        this._dialog.show_all();\n"
"    },\n"
"\n"
"    _OKHandler: function (dialog, response_id) {\n"
"\n"
"        // Destroy the dialog\n"
"        this._dialog.destroy();\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new DialogExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/dialog.js.page:31(item/p)
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Dialog.html"
"\">Gtk.Dialog</link>"
msgstr ""

#: C/dialog.py.page:7(info/title)
msgctxt "text"
msgid "Dialog (Python)"
msgstr ""

#: C/dialog.py.page:24(page/p)
msgid "A dialog with the response signal connected to a callback function."
msgstr ""

#: C/dialog.py.page:31(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # construct a window (the parent window)\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GNOME Button\", application=app)\n"
"        self.set_default_size(250, 50)\n"
"\n"
"        # a button on the parent window\n"
"        button = Gtk.Button(\"Click me\")\n"
"        # connect the signal \"clicked\" of the button with the function on_button_click()\n"
"        button.connect(\"clicked\", self.on_button_click)\n"
"        # add the button to the window\n"
"        self.add(button)\n"
"\n"
"    # callback function for the signal \"clicked\" of the button in the parent window\n"
"    def on_button_click(self, widget):\n"
"        # create a Gtk.Dialog\n"
"        dialog = Gtk.Dialog()\n"
"        dialog.set_title(\"A Gtk+ Dialog\")\n"
"        # The window defined in the constructor (self) is the parent of the dialog.\n"
"        # Furthermore, the dialog is on top of the parent window\n"
"        dialog.set_transient_for(self)\n"
"        # set modal true: no interaction with other windows of the application\n"
"        dialog.set_modal(True)\n"
"        # add a button to the dialog window\n"
"        dialog.add_button(button_text=\"OK\", response_id=Gtk.ResponseType.OK)\n"
"        # connect the \"response\" signal (the button has been clicked) to the function on_response()\n"
"        dialog.connect(\"response\", self.on_response)\n"
"\n"
"        # get the content area of the dialog, add a label to it\n"
"        content_area = dialog.get_content_area()\n"
"        label = Gtk.Label(\"This demonstrates a dialog with a label\")\n"
"        content_area.add(label)\n"
"        # show the dialog\n"
"        dialog.show_all()\n"
"\n"
"    def on_response(self, widget, response_id):\n"
"        print \"response_id is\", response_id\n"
"        # destroy the widget (the dialog) when the function on_response() is called\n"
"        # (that is, when the button of the dialog has been clicked)\n"
"        widget.destroy()\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup (self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/dialog.py.page:36(section/title)
msgid "Useful methods for a Dialog widget"
msgstr ""

#: C/dialog.py.page:37(section/p)
msgid ""
"In line 16 the signal <code>\"clicked\"</code> is connected to the callback "
"function <code>on_button_click()</code> using <code><var>widget</var>.connect"
"(<var>signal</var>, <var>callback function</var>)</code>. See <link xref="
"\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""

#: C/dialog.py.page:39(item/p)
msgid ""
"Instead of <code>set_modal(True)</code> we could have <code>set_modal(False)</"
"code> followed by <code>set_destroy_with_parent(True)</code> that would "
"destroy the dialog window if the main window is closed."
msgstr ""

#: C/dialog.py.page:40(item/p)
msgid ""
"<code>add_button(button_text=\"The Answer\", response_id=42)</code>, where "
"<code>42</code> is any integer, is an alternative to <code>add_button"
"(button_text=\"text\", response_id=Gtk.ResponseType.RESPONSE)</code>, where "
"<code>RESPONSE</code> could be one of <code>OK, CANCEL, CLOSE, YES, NO, "
"APPLY, HELP</code>, which in turn correspond to the integers <code>-5, "
"-6,..., -11</code>."
msgstr ""

#: C/dialog.py.page:50(item/p) C/messagedialog.py.page:59(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkDialog.html"
"\">GtkDialog</link>"
msgstr ""

#: C/dialog.vala.page:7(info/title)
msgctxt "text"
msgid "Dialog (Vala)"
msgstr ""

#: C/dialog.vala.page:22(page/p)
msgid "A dialog with the response signal hooked up to a callback function."
msgstr ""

#: C/dialog.vala.page:24(page/code)
#, no-wrap
msgid ""
"\n"
"/* A window in the application. */\n"
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"GNOME Button\");\n"
"\n"
"\t\tthis.window_position = Gtk.WindowPosition.CENTER;\n"
"\t\tthis.set_default_size (250,50);\n"
"\n"
"\t\tvar button = new Gtk.Button.with_label (\"Click Me\");\n"
"\n"
"\t\t/* Connect the button's \"clicked\" signal to\n"
"\t\t * the signal handler (aka. this.callback function).\n"
"\t\t */\n"
"\t\tbutton.clicked.connect (this.on_button_click);\n"
"\n"
"\t\t/* Add the button to this window and show it. */\n"
"\t\tthis.add (button);\n"
"\t\tbutton.show ();\n"
"\t}\n"
"\n"
"\t/* The signal handler for the buttons 'clicked' signal. */\n"
"\tvoid on_button_click (Gtk.Button button) {\n"
"\t\tvar dialog = new Gtk.Dialog.with_buttons (\"A Gtk+ Dialog\", this,\n"
"                                                          Gtk.DialogFlags.MODAL,\n"
"                                                          Gtk.Stock.OK,\n"
"                                                          Gtk.ResponseType.OK, null);\n"
"\n"
"\t\tvar content_area = dialog.get_content_area ();\n"
"\t\tvar label = new Gtk.Label (\"This demonstrates a dialog with a label\");\n"
"\n"
"\t\tcontent_area.add (label);\n"
"\n"
"\t\t/* Connect the 'response' signal of the dialog\n"
"\t\t * the signal handler.  It is emitted when the dialog's\n"
"\t\t * OK button is clicked.\n"
"\t\t */\n"
"\t\tdialog.response.connect (on_response);\n"
"\n"
"\t\t/* Show the dialog and all the widgets. */\n"
"\t\tdialog.show_all ();\n"
"\t}\n"
"\n"
"\t/* Signal handler for the 'response' signal of the dialog. */\n"
"        void on_response (Gtk.Dialog dialog, int response_id) {\n"
"\n"
"                /* To see the int value of the ResponseType. This is only\n"
"\t\t * for demonstration purposes.*/\n"
"                print (\"response is %d\\n\", response_id);\n"
"\n"
"\t\t/* This causes the dialog to be destroyed. */\n"
"                dialog.destroy ();\n"
"        }\n"
"\n"
"}\n"
"\n"
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\n"
"\t/* The constructore of the application. */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create a window for the this application and show it. */\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/dialog.vala.page:31(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Dialog.html\">Gtk.Dialog</"
"link>"
msgstr ""

#: C/dialog.vala.page:32(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Dialog.Dialog.with_buttons."
"html\">Gtk.Dialog.with_buttons</link>"
msgstr ""

#: C/dialog.vala.page:33(item/p) C/label.vala.page:32(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Label.html\">Gtk.Label</link>"
msgstr ""

#: C/dialog.vala.page:34(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Dialog.get_content_area.html"
"\">get_content_area</link>"
msgstr ""

#: C/documentation.page:19(page/title)
msgid "Help develop"
msgstr ""

#: C/documentation.page:20(page/p)
msgid ""
"The <app>GNOME Developer Tutorials</app> are developed and maintained by a "
"volunteer community. You are welcome to participate."
msgstr ""

#: C/documentation.page:23(page/p)
msgid ""
"If you would like to <link href=\"https://live.gnome.org/DocumentationProject/"
"Tasks/DeveloperDocs\">help develop <app>GNOME Developer Tutorials</app></"
"link>, you can get in touch with the developers using <link href=\"https://"
"cbe005.chat.mibbit.com/?url=irc%3A%2F%2Firc.gnome.org%2Fdocs\">irc</link>, or "
"via our <link href=\"http://mail.gnome.org/mailman/listinfo/gnome-doc-devel-"
"list\">mailing list</link>."
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/entry.c.page:22(media) C/entry.js.page:21(media) C/entry.py.page:28(media)
#: C/entry.vala.page:21(media)
msgctxt "_"
msgid "external ref='media/entry.png' md5='8a828cffdcbaa4bad83342e109f28cc8'"
msgstr "external ref='media/entry.png' md5='8a828cffdcbaa4bad83342e109f28cc8'"

#: C/entry.c.page:7(info/title)
msgctxt "text"
msgid "Entry (C)"
msgstr ""

#: C/entry.c.page:17(info/desc) C/entry.py.page:24(info/desc)
#: C/entry.vala.page:17(info/desc)
msgid "A single line text entry field"
msgstr ""

#: C/entry.c.page:20(page/title) C/entry.js.page:20(page/title)
#: C/entry.py.page:27(page/title) C/entry.vala.page:20(page/title)
msgid "Entry"
msgstr ""

#: C/entry.c.page:23(page/p) C/entry.vala.page:22(page/p)
msgid "This application greets you in the terminal."
msgstr ""

#: C/entry.c.page:25(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*This is the callback function. It is a handler function \n"
"which reacts to the signal. In this case, it will grab the \n"
"text input from the entry box and print out a line to the user.*/\n"
"static void\n"
"on_activate (GtkEntry *entry,\n"
"             gpointer  user_data)\n"
"{\n"
"  const char *name;\n"
"  name = gtk_entry_get_text (entry);\n"
"\n"
"  g_print (\"\\nHello %s!\\n\\n\", name);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *entry_box;\n"
"\n"
"  /*Create a window with a title, a default size, \n"
"  and a set border width*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"What is your name?\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 100);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 10);\n"
"\n"
"  /*Create a new entry box, and add it to the window*/\n"
"  entry_box = gtk_entry_new ();\n"
"  gtk_container_add (GTK_CONTAINER (window), entry_box);\n"
"\n"
"  /*Connecting the activate signal to the callback*/\n"
"  g_signal_connect (GTK_ENTRY (entry_box), \"activate\", \n"
"                    G_CALLBACK (on_activate), NULL);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""

#: C/entry.js.page:7(info/title)
#, fuzzy
#| msgid "JavaScript"
msgctxt "text"
msgid "Entry (JavaScript)"
msgstr "JavaScript"

#: C/entry.js.page:17(info/desc)
msgid "A single-line text entry field"
msgstr ""

#: C/entry.js.page:22(page/p)
msgid "This application greets you by name through a pop-up window."
msgstr ""

#: C/entry.js.page:24(page/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const EntryExample = new Lang.Class({\n"
"    Name: 'Entry Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsentry',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 100,\n"
"            default_width: 300,\n"
"            border_width: 10,\n"
"            title: \"What is your name?\"});\n"
"\n"
"        // Create the text entry box\n"
"        this.entry = new Gtk.Entry ();\n"
"        this._window.add(this.entry);\n"
"\n"
"        // Connect the text entry box to a function that responds to what you type in\n"
"        this.entry.connect(\"activate\", Lang.bind (this, this._hello));\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _hello: function() {\n"
"\n"
"        // Create a popup dialog to greet the person who types in their name\n"
"        this._greeter = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            text: \"Hello, \" + this.entry.get_text() + \"!\",\n"
"            message_type: Gtk.MessageType.OTHER,\n"
"            buttons: Gtk.ButtonsType.OK,\n"
"        });\n"
"\n"
"        // Show the popup dialog\n"
"        this._greeter.show();\n"
"\n"
"        // Bind the OK button to the function that closes the popup\n"
"        this._greeter.connect (\"response\", Lang.bind(this, this._okClicked));\n"
"    },\n"
"\n"
"    _okClicked: function () {\n"
"        this._greeter.destroy();\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new EntryExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/entry.js.page:31(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Entry.html"
"\">Gtk.Entry</link>"
msgstr ""

#: C/entry.py.page:7(info/title)
#, fuzzy
#| msgid "Python"
msgctxt "text"
msgid "Entry (Python)"
msgstr "Python"

#: C/entry.py.page:20(credit/name) C/label.py.page:20(credit/name)
#: C/model-view-controller.py.page:15(credit/name)
#: C/properties.py.page:15(credit/name)
#: C/signals-callbacks.py.page:15(credit/name)
#: C/strings.py.page:15(credit/name) C/textview.py.page:15(credit/name)
#: C/toolbar_builder.py.page:27(credit/name)
msgid "Sebastian Pölsterl"
msgstr ""

#: C/entry.py.page:29(page/p)
msgid "This application greets you in the terminal with the name you provide."
msgstr ""

#: C/entry.py.page:35(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"What is your name?\", application=app)\n"
"        self.set_default_size(300, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a single line entry\n"
"        name_box = Gtk.Entry()\n"
"        # emits a signal when the Enter key is pressed, connected to the\n"
"        # callback function cb_activate\n"
"        name_box.connect(\"activate\", self.cb_activate)\n"
"\n"
"        # add the Gtk.Entry to the window\n"
"        self.add(name_box)\n"
"\n"
"    # the content of the entry is used to write in the terminal\n"
"    def cb_activate(self, entry):\n"
"        # retrieve the content of the widget\n"
"\t\tname = entry.get_text()\n"
"\t\t# print it in a nice form in the terminal\n"
"\t\tprint \"Hello \" + name + \"!\"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/entry.py.page:39(section/title)
msgid "Useful methods for an Entry widget"
msgstr ""

#: C/entry.py.page:40(section/p)
msgid ""
"In line 14 the signal <code>\"activate\"</code> is connected to the callback "
"function <code>cb_activate()</code> using <code><var>widget</var>.connect"
"(<var>signal</var>, <var>callback function</var>)</code>. See <link xref="
"\"signals-callbacks.py\"/> for a more detailed explanation. Some of the "
"signals that a Gtk.Entry widget can emit are: <code>\"activate\"</code> "
"(emitted when the user activates the Entry key); <code>\"backspace\"</code> "
"(emitted when the user activates the Backspace or Shift-Backspace keys); "
"<code>\"copy-clipboard\"</code> (Ctrl-c and Ctrl-Insert); <code>\"paste-"
"clipboard\"</code> (Ctrl-v and Shift-Insert); <code>\"delete-from-cursor\"</"
"code> (Delete, for deleting a character; Ctrl-Delete, for deleting a word); "
"<code>\"icon-press\"</code> (emitted when the user clicks an activable icon); "
"<code>\"icon-release\"</code> (emitted on the button release from a mouse "
"click over an activable icon); <code>\"insert-at-cursor\"</code> (emitted "
"when the user initiates the insertion of a fixed string at the cursor); <code>"
"\"move-cursor\"</code> (emitted when the user initiates a cursor movement); "
"<code>\"populate-popup\"</code> (emitted before showing the context menu of "
"the entry; it can be used to add items to it)."
msgstr ""

#: C/entry.py.page:42(item/p)
msgid ""
"<code>get_buffer()</code> and <code>set_buffer(buffer)</code>, where "
"<code>buffer</code> is a Gtk.EntryBuffer object, can be used to get and set "
"the buffer for the entry."
msgstr ""

#: C/entry.py.page:43(item/p)
msgid ""
"<code>get_text()</code> and <code>set_text(\"some text\")</code> can be used "
"to get and set the content for the entry."
msgstr ""

#: C/entry.py.page:44(item/p)
msgid "<code>get_text_length()</code> is self-explanatory."
msgstr ""

#: C/entry.py.page:45(item/p)
msgid ""
"<code>get_text_area()</code> gets the area where the entry's text is drawn."
msgstr ""

#: C/entry.py.page:46(item/p)
msgid ""
"If we set <code>set_visibility(False)</code> the characters in the entry are "
"displayed as the invisible char. This is the best available in the current "
"font, but it can be changed with <code>set_invisible_char(ch)</code>, where "
"<code>ch</code> is a Unicode charcater. The latter method is reversed by "
"<code>unset_invisbile_char()</code>."
msgstr ""

#: C/entry.py.page:47(item/p)
msgid ""
"<code>set_max_length(int)</code>, where <code>int</code> is an integer, "
"truncates every entry longer than <code>int</code> to have the desired "
"maximum length."
msgstr ""

#: C/entry.py.page:48(item/p)
msgid ""
"By default, if you press the Entry key the Gtk.Entry emits the signal <code>"
"\"activate\"</code>. If you would like to activate the default widget for the "
"window (set using <code>set_default(widget)</code> on the window), then use "
"<code>set_activates_default(True)</code>."
msgstr ""

#: C/entry.py.page:49(item/p)
msgid "To set a frame around the entry: <code>set_has_frame(True)</code>."
msgstr ""

#: C/entry.py.page:50(item/p)
msgid ""
"<code>set_placeholder_text(\"some text\")</code> sets the text to be "
"displayed in the entry when it is empty and unfocused."
msgstr ""

#: C/entry.py.page:51(item/p)
msgid ""
"<code>set_overwrite_mode(True)</code> and <code>set_overwrite_mode(False)</"
"code> are self-explanatory."
msgstr ""

#: C/entry.py.page:52(item/p)
msgid ""
"If we have <code>set_editable(False)</code> the user cannot edit the text in "
"the widget."
msgstr ""

#: C/entry.py.page:53(item/p)
msgid ""
"<code>set_completion(completion)</code>, where <code>completion</code> is a "
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkEntryCompletion.html"
"\"><code>Gtk.EntryCompletion</code></link>, sets completion - or disables it "
"if <code>completion</code> is <code>None</code>."
msgstr ""

#: C/entry.py.page:54(item/p)
msgid ""
"An Entry widget can display progress or activity information behind the text. "
"We use <code>set_progress_fraction(fraction)</code>, where <code>fraction</"
"code> is a <code>float</code> between <code>0.0</code> and <code>1.0</code> "
"inclusive, to fill in the given fraction of the bar. We use "
"<code>set_progress_pulse_step()</code> to set the fraction of total entry "
"width to move the progress bouncing block for each call to "
"<code>progress_pulse()</code>. The latter method indicates that some progress "
"is made, and causes the progress indicator of the entry to enter \"activity "
"mode\", where a block bounces back and forth. Each call to "
"<code>progress_pulse()</code> causes the block to move by a little bit (the "
"amount of movement per pulse is determined, as said before, by "
"<code>set_progress_pulse_step()</code>)."
msgstr ""

#: C/entry.py.page:55(item/p)
msgid ""
"An Entry widget can also show icons. These icons can be activatable by "
"clicking, can be set up as drag source and can have tooltips. To add an icon, "
"use <code>set_icon_from_stock(icon_position, stock_id)</code>, or one of "
"<code>set_icon_from_pixbuf(icon_position, pixbuf)</code>, "
"<code>set_icon_from_icon_name(icon_position, icon_name)</code>, where "
"<code>icon_position</code> is one of <code>Gtk.EntryIconPosition.PRIMARY</"
"code> (to set the icon at the beginning of the entry) <code>Gtk."
"EntryIconPosition.SECONDARY</code> (to set the icon at the end of the entry). "
"To set a tooltip on an icon, use <code>set_icon_tooltip_text(\"tooltip text\")"
"</code> or <code>set_icon_tooltip_markup(\"tooltip text in Pango markup "
"language\")</code>."
msgstr ""

#: C/entry.py.page:63(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkEntry.html"
"\">GtkEntry</link>"
msgstr ""

#: C/entry.vala.page:7(info/title)
msgctxt "text"
msgid "Entry (Vala)"
msgstr ""

#: C/entry.vala.page:24(page/code)
#, no-wrap
msgid ""
"/* A window in the application. */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"What is your name?\");\n"
"\n"
"\t\tvar name_box = new Gtk.Entry ();\n"
"\n"
"\t\t/* Connect to the signal handler. */\n"
"\t\tname_box.activate.connect (this.on_activate);\n"
"\t\tname_box.show ();\n"
"\n"
"\t\tthis.set_default_size (300, 100);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\t/* Add the name_box to this window. */\n"
"\t\tthis.add (name_box);\n"
"\t}\n"
"\n"
"\t/* Signal handler (aka. callback function) for the 'activate'\n"
"\t * signal of a Gtk.Entry.\n"
"\t */\n"
"\tvoid on_activate (Gtk.Entry entry) {\n"
"\t\tname = entry.get_text ();\n"
"\t\tprint (\"\\nHello \" + name + \"!\\n\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application. */\n"
"class MyApplication : Gtk.Application {\n"
"\n"
"\t/* Constructor for the application. */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create a new window for this application\n"
"\t\t * and show it. */\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"}\n"
"\n"
"/* The main function creats and runs the application. */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/entry.vala.page:29(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Entry.html\">Gtk.Entry</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/filechooserdialog.py.page:25(media)
msgctxt "_"
msgid ""
"external ref='media/filechooserdialog_save.png' "
"md5='3a7a3b71b9d3a36066857843b68ff27f'"
msgstr ""
"external ref='media/filechooserdialog_save.png' "
"md5='3a7a3b71b9d3a36066857843b68ff27f'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/filechooserdialog.py.page:27(media)
msgctxt "_"
msgid ""
"external ref='media/filechooserdialog_menu.png' "
"md5='8a75f04127a70eba0ed68a9eb1d3bbca'"
msgstr ""
"external ref='media/filechooserdialog_menu.png' "
"md5='8a75f04127a70eba0ed68a9eb1d3bbca'"

#: C/filechooserdialog.py.page:7(info/title)
msgctxt "text"
msgid "FileChooserDialog (Python)"
msgstr ""

#: C/filechooserdialog.py.page:21(info/desc)
msgid "A dialog suitable for \"Open\" and \"Save\" commands"
msgstr ""

#: C/filechooserdialog.py.page:24(page/title)
#: C/filechooserdialog.vala.page:23(page/title)
msgid "FileChooserDialog"
msgstr ""

#: C/filechooserdialog.py.page:26(page/p)
msgid ""
"This FileChooserDialog saves a text document, which can be opened or written "
"from scratch in a TextView (see below)."
msgstr ""

#: C/filechooserdialog.py.page:28(page/p)
msgid "It is also possible to call a FileChooserDialog to open a new document."
msgstr ""

#: C/filechooserdialog.py.page:33(section/title)
msgid "Steps to recreate the example"
msgstr ""

#: C/filechooserdialog.py.page:35(item/p)
msgid ""
"Create a file .ui to describe an app-menu with items \"New\", \"Open\", \"Save"
"\", \"Save as\", and \"Quit\". This can be done with Glade or in a text "
"editor. See <link xref=\"#xml\"/>"
msgstr ""

#: C/filechooserdialog.py.page:36(item/p)
msgid ""
"Create a Python program for a Gtk.TextView with a Gtk.Buffer <code>self."
"buffer</code>, and a <code>self.file</code> which will be a Gio.File and we "
"set initially as <code>None</code>."
msgstr ""

#: C/filechooserdialog.py.page:37(item/p)
msgid ""
"In this program, create also the actions corresponding to the items in the "
"app-menu, connect them to callback functions, and import the menu in the "
"<code>do_startup()</code> method with a Gtk.Builder."
msgstr ""

#: C/filechooserdialog.py.page:38(item/p)
msgid ""
"\"New\" and \"Quit\" actions and callback functions are quite "
"straightforward, see <link xref=\"#code\"/>. See <link xref=\"signals-"
"callbacks.py\"/> for a more detailed explanation of signals and callback "
"functions."
msgstr ""

#: C/filechooserdialog.py.page:39(item/p)
msgid ""
"\"Open\" callback should create and open a Gtk.FileChooserDialog for \"Open"
"\", connected with another callback function for each of the two \"Open\" and "
"\"Cancel\" buttons of the FileChooserDialog."
msgstr ""

#: C/filechooserdialog.py.page:40(item/p)
msgid ""
"\"Save as\" works basically as \"Open\", but the callback function of the "
"\"Save\" button depends on a more complex method <code>save_to_file()</code>."
msgstr ""

#: C/filechooserdialog.py.page:41(item/p)
msgid ""
"\"Save\" can be reduced to the case where the file is <code>None</code>, that "
"is the case where <code>self.file</code> is a new file, which in turn is the "
"case \"Save as\"; and to the case where the file is not <code>None</code>, "
"which in turn is reduced to <code>save_to_file()</code>."
msgstr ""

#: C/filechooserdialog.py.page:42(item/p)
msgid ""
"Finally, the method <code>save_to_file()</code>: see <link xref=\"#code\"/>, "
"lines 146 - 175."
msgstr ""

#: C/filechooserdialog.py.page:47(section/title)
msgid "XML file which creates the app-menu"
msgstr ""

#: C/filechooserdialog.py.page:48(section/code)
#: C/filechooserdialog.vala.page:29(section/code)
#, no-wrap
msgid ""
"&lt;?xml version=\"1.0\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"appmenu\"&gt;\n"
"    &lt;section&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;win.new&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Open&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;win.open&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"    &lt;/section&gt;\n"
"    &lt;section&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Save&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;win.save&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Save As...&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;win.save-as&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"    &lt;/section&gt;\n"
"    &lt;section&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Quit&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"    &lt;/section&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;\n"
msgstr ""

#: C/filechooserdialog.py.page:53(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"from gi.repository import Gio\n"
"from gi.repository import GObject\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"FileChooserDialog Example\", application=app)\n"
"        self.set_default_size(400, 400)\n"
"\n"
"        # the actions for the window menu, connected to the callback functions\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        self.add_action(new_action)\n"
"        \n"
"        open_action = Gio.SimpleAction.new(\"open\", None)\n"
"        open_action.connect(\"activate\", self.open_callback)\n"
"        self.add_action(open_action)\n"
"        \n"
"        save_action = Gio.SimpleAction.new(\"save\", None)\n"
"        save_action.connect(\"activate\", self.save_callback)\n"
"        self.add_action(save_action)\n"
"        \n"
"        save_as_action = Gio.SimpleAction.new(\"save-as\", None)\n"
"        save_as_action.connect(\"activate\", self.save_as_callback)\n"
"        self.add_action(save_as_action)\n"
"        \n"
"        # the file\n"
"        self.file = None\n"
"        \n"
"        # the textview with the buffer\n"
"        self.buffer = Gtk.TextBuffer()\n"
"        textview = Gtk.TextView(buffer=self.buffer)\n"
"        textview.set_wrap_mode(Gtk.WrapMode.WORD)\n"
"        \n"
"        # a scrolled window for the textview\n"
"        self.scrolled_window = Gtk.ScrolledWindow()\n"
"        self.scrolled_window.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)\n"
"        self.scrolled_window.add(textview)\n"
"        self.scrolled_window.set_border_width(5)\n"
"        \n"
"        # add the scrolled window to the window\n"
"        self.add(self.scrolled_window)\n"
"\n"
"    # callback for new\n"
"    def new_callback(self, action, parameter):\n"
"        self.buffer.set_text(\"\")\n"
"        print \"New file created\"\n"
"        \n"
"    # callback for open\n"
"    def open_callback(self, action, parameter):\n"
"        # create a filechooserdialog to open: \n"
"        # the arguments are: title of the window, parent_window, action, (buttons, response)\n"
"        open_dialog = Gtk.FileChooserDialog (\"Pick a file\", self,\n"
"                                             Gtk.FileChooserAction.OPEN, \n"
"                                             (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, \n"
"                                             Gtk.STOCK_OPEN, Gtk.ResponseType.ACCEPT))\n"
"        \n"
"        # not only local files can be selected in the file selector\n"
"        open_dialog.set_local_only(False)\n"
"        # dialog always on top of the textview window\n"
"        open_dialog.set_modal(True)\n"
"        # connect the dialog with the callback function open_response_cb()\n"
"        open_dialog.connect(\"response\", self.open_response_cb)\n"
"        # show the dialog\n"
"        open_dialog.show()\n"
"\n"
"    # callback function for the dialog open_dialog\n"
"    def open_response_cb(self, dialog, response_id):\n"
"        open_dialog = dialog\n"
"        # if response is \"ACCEPT\" (the button \"Open\" has been clicked)\n"
"        if response_id == Gtk.ResponseType.ACCEPT:\n"
"            # self.file is the file that we get from the FileChooserDialog\n"
"            self.file = open_dialog.get_file()\n"
"            # an empty string (provisionally)\n"
"            content = \"\"\n"
"            try:\n"
"                # load the content of the file into memory:\n"
"                # success is a boolean depending on the success of the operation\n"
"                # content is self-explanatory\n"
"                # etags is an entity tag (can be used to quickly determine if the\n"
"                # file has been modified from the version on the file system)\n"
"                [success, content, etags] = self.file.load_contents(None)\n"
"            except GObject.GError as e:\n"
"                print \"Error: \" + e.message\n"
"            # set the content as the text into the buffer\n"
"            self.buffer.set_text(content, len(content))\n"
"            print \"opened: \" + open_dialog.get_filename()\n"
"        # if response is \"CANCEL\" (the button \"Cancel\" has been clicked)\n"
"        elif response_id == Gtk.ResponseType.CANCEL:\n"
"            print \"cancelled: FileChooserAction.OPEN\"\n"
"        # destroy the FileChooserDialog\n"
"        dialog.destroy()\n"
"\n"
"    # callback function for save_as\n"
"    def save_as_callback(self, action, parameter):\n"
"        # create a filechooserdialog to save: \n"
"        # the arguments are: title of the window, parent_window, action, (buttons, response)\n"
"        save_dialog = Gtk.FileChooserDialog (\"Pick a file\", self,\n"
"                                             Gtk.FileChooserAction.SAVE, \n"
"                                             (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL, \n"
"                                             Gtk.STOCK_SAVE, Gtk.ResponseType.ACCEPT))\n"
"        # the dialog will present a confirmation dialog if the user types a file name that\n"
"        # already exists\n"
"        save_dialog.set_do_overwrite_confirmation(True)\n"
"        # dialog always on top of the textview window\n"
"        save_dialog.set_modal(True)\n"
"        # if self.file has already been saved\n"
"        if self.file is not None:\n"
"            try:\n"
"                # set self.file as the current filename for the file chooser\n"
"                save_dialog.set_file(self.file)\n"
"            except GObject.GError as e:\n"
"                print \"Error: \" + e.message\n"
"        # connect the dialog to the callback function save_response_cb()\n"
"        save_dialog.connect(\"response\", self.save_response_cb)\n"
"        # show the dialog\n"
"        save_dialog.show()\n"
"        \n"
"    # callback function for the dialog save_dialog\n"
"    def save_response_cb(self, dialog, response_id):\n"
"        save_dialog = dialog\n"
"        # if response is \"ACCEPT\" (the button \"Save\" has been clicked)\n"
"        if response_id == Gtk.ResponseType.ACCEPT:\n"
"            # self.file is the currently selected file\n"
"            self.file = save_dialog.get_file()\n"
"            # save to file (see below)\n"
"            self.save_to_file()\n"
"        # if response is \"CANCEL\" (the button \"Cancel\" has been clicked)\n"
"        elif response_id == Gtk.ResponseType.CANCEL:\n"
"            print \"cancelled: FileChooserAction.SAVE\"\n"
"        # destroy the FileChooserDialog\n"
"        dialog.destroy()\n"
"        \n"
"    # callback function for save    \n"
"    def save_callback(self, action, parameter):\n"
"        # if self.file is not already there\n"
"        if self.file is not None:\n"
"            self.save_to_file()\n"
"        # self.file is a new file\n"
"        else:\n"
"            # use save_as\n"
"            self.save_as_callback(action, parameter)\n"
"\n"
"    # save_to_file\n"
"    def save_to_file(self):\n"
"        # get the content of the buffer, without hidden characters\n"
"        [start, end] = self.buffer.get_bounds()\n"
"        current_contents = self.buffer.get_text(start, end, False)\n"
"        # if there is some content\n"
"        if current_contents != \"\":\n"
"            # set the content as content of self.file.\n"
"            # arguments: contents, etags, make_backup, flags, GError\n"
"            try:\n"
"                self.file.replace_contents(current_contents,\n"
"                                           None,\n"
"                                           False,\n"
"                                           Gio.FileCreateFlags.NONE,\n"
"                                           None)\n"
"                print \"saved: \" + self.file.get_path()\n"
"            except GObject.GError as e:\n"
"                print \"Error: \" + e.message\n"
"        # if the contents are empty\n"
"        else:\n"
"            # create (if the file does not exist) or overwrite the file in readwrite mode.\n"
"            # arguments: etags, make_backup, flags, GError \n"
"            try:\n"
"                self.file.replace_readwrite(None,\n"
"                                            False,\n"
"                                            Gio.FileCreateFlags.NONE, \n"
"                                            None)\n"
"                print \"saved: \" + self.file.get_path()\n"
"            except GObject.GError as e:\n"
"                print \"Error: \" + e.message\n"
"        \n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # app action quit, connected to the callback function\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_callback)\n"
"        self.add_action(quit_action)\n"
"\n"
"        # get the menu from the ui file with a builder\n"
"        builder = Gtk.Builder()\n"
"        try:\n"
"            builder.add_from_file(\"filechooserdialog.ui\")\n"
"        except:\n"
"            print \"file not found\"\n"
"            sys.exit()\n"
"        menu = builder.get_object(\"appmenu\")\n"
"        self.set_app_menu(menu)\n"
"        \n"
"    # callback function for quit\n"
"    def quit_callback(self, action, parameter):\n"
"        self.quit()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/filechooserdialog.py.page:57(section/title)
msgid "Useful methods for a FileChooserDialog"
msgstr ""

#: C/filechooserdialog.py.page:58(section/p)
msgid ""
"Note that the action of the FileChooserDialog can be one of the following: "
"<code>Gtk.FileChooserAction.OPEN</code> (the file chooser will only let the "
"user pick an existing file) <code>Gtk.FileChooserAction.SAVE</code> (the file "
"chooser will let the user pick an existing file, or type in a new filename), "
"<code>Gtk.FileChooserAction.SELECT_FOLDER</code> (the file chooser will let "
"the user pick an existing folder), <code>Gtk.FileChooserAction.CREATE_FOLDER</"
"code> (the file chooser will let the user name an existing or new folder)."
msgstr ""

#: C/filechooserdialog.py.page:59(section/p)
msgid "Besides the methods used in the <link xref=\"#code\"/>, we have:"
msgstr ""

#: C/filechooserdialog.py.page:61(item/p)
msgid ""
"<code>set_show_hidden(True)</code> is used to display hidden files and "
"folders."
msgstr ""

#: C/filechooserdialog.py.page:62(item/p)
msgid ""
"<code>set_select_multiple(True)</code> sets that multiple files can be "
"selected. This is only relevant if the mode is <code>Gtk.FileChooserAction."
"OPEN</code> or <code>Gtk.FileChooserAction.SELECT_FOLDER</code>."
msgstr ""

#: C/filechooserdialog.py.page:63(item/p)
msgid ""
"In a \"Save as\" dialog, <code>set_current_name(current_name)</code> sets "
"<code>current_name</code> in the file selector, as if entered by the user; "
"<code>current_name</code> can be something like <em>Untitled.txt</em>. This "
"method should not be used except in a \"Save as\" dialog."
msgstr ""

#: C/filechooserdialog.py.page:64(item/p)
msgid ""
"The default current folder is \"recent items\". To set another folder use "
"<code>set_current_folder_uri(uri)</code>; but note you should use this method "
"and cause the file chooser to show a specific folder only when you are doing "
"a \"Save as\" command and you already have a file saved somewhere."
msgstr ""

#: C/filechooserdialog.py.page:72(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkFileChooserDialog.html"
"\">GtkFileChooserDialog</link>"
msgstr ""

#: C/filechooserdialog.py.page:73(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkFileChooser.html"
"\">GtkFileChooser</link>"
msgstr ""

#: C/filechooserdialog.py.page:74(item/p) C/image.c.page:33(item/p)
#: C/label.c.page:37(item/p) C/menubar.c.page:37(item/p)
#: C/scrolledwindow.c.page:34(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkWindow.html"
"\">GtkWindow</link>"
msgstr ""

#: C/filechooserdialog.py.page:75(item/p) C/textview.c.page:38(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkTextView.html"
"\">GtkTextView</link>"
msgstr ""

#: C/filechooserdialog.py.page:76(item/p) C/textview.c.page:37(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkTextBuffer.html"
"\">GtkTextBuffer</link>"
msgstr ""

#: C/filechooserdialog.py.page:77(item/p) C/scrolledwindow.c.page:35(item/p)
#: C/textview.c.page:39(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkScrolledWindow.html"
"\">GtkScrolledWindow</link>"
msgstr ""

#: C/filechooserdialog.py.page:78(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gio/stable/GFile.html\">GFile</link>"
msgstr ""

#: C/filechooserdialog.py.page:80(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkBuilder.html"
"\">GtkBuilder</link>"
msgstr ""

#: C/filechooserdialog.vala.page:7(info/title)
msgctxt "text"
msgid "FileChooserDialog (Vala)"
msgstr ""

#: C/filechooserdialog.vala.page:20(info/desc)
msgid "A dialog suitable for \"Open\" and \"Save\" commands."
msgstr ""

#: C/filechooserdialog.vala.page:25(section/title)
msgid "Overview of the example"
msgstr ""

#: C/filechooserdialog.vala.page:26(section/p)
msgid ""
"This example demonstrates how the FileChooserDialog can be used. It is "
"incorporated into a very simple text editor application. All the <link xref="
"\"menubar.vala#win-app\">actions</link>, including the \"open\", \"save\" and "
"\"save-as\" commands can be found in the <link xref=\"gmenu.vala\">app-menu</"
"link>. Here, the app-menu is created using an XML UI file, which is then "
"imported into the application using Gtk.Builder."
msgstr ""

#: C/filechooserdialog.vala.page:28(section/title)
msgid "XML UI file which creates the app-menu"
msgstr ""

#: C/filechooserdialog.vala.page:31(section/title)
msgid "Vala Code"
msgstr "Vala-code"

#: C/filechooserdialog.vala.page:32(section/code)
#, no-wrap
msgid ""
"class MyWindow: Gtk.ApplicationWindow {\n"
"\n"
"\t/* MyWindow instance variables. */\n"
"\tGLib.File? file;\n"
"\tGtk.TextBuffer buffer;\n"
"\tGtk.TextView textview;\n"
"\tGtk.ScrolledWindow scrolled_window;\n"
"\n"
"\t/* Create ActionEntries. */\n"
"\tconst ActionEntry[] actions = {\n"
"\t\t{ \"new\", new_cb },\n"
"\t\t{ \"open\", open_cb },\n"
"\t\t{ \"save\", save_cb },\n"
"\t\t{ \"save-as\", save_as_cb }\n"
"\t};\n"
"\n"
"\t/* Constructor creates MyWindow, and add the scrolled_window. */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"FileChooserDialog Example\");\n"
"\t\tthis.set_default_size (400, 400);\n"
"\n"
"\t\t/* Add the ActionEntries to MyWindow. */\n"
"\t\tthis.add_action_entries (actions, this);\n"
"\n"
"\t\tbuffer = new Gtk.TextBuffer (null); //stores text to be displayed\n"
"\t\ttextview = new Gtk.TextView.with_buffer (buffer); //displays TextBuffer\n"
"\t\ttextview.set_wrap_mode (Gtk.WrapMode.WORD); //sets line wrapping\n"
"\n"
"\t\tscrolled_window = new Gtk.ScrolledWindow (null, null);\n"
"\t\tscrolled_window.set_policy (Gtk.PolicyType.AUTOMATIC,\n"
"\t\t                            Gtk.PolicyType.AUTOMATIC);\n"
"\n"
"\t\tscrolled_window.add (textview);\n"
"\t\tscrolled_window.set_border_width (5);\n"
"\n"
"        this.add (scrolled_window);\n"
"\t\tthis.show_all ();\n"
"\t}\n"
"\n"
"\tvoid new_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tfile = null;\n"
"\t\tbuffer.set_text (\"\");\n"
"\t\tprint (\"New file created\\n\");\n"
"\t}\n"
"\n"
"\t/* Create FileChooserDialog in OPEN mode. */\n"
"\tvoid open_cb (SimpleAction action, Variant? parameter) {\n"
"\n"
"\t\tvar open_dialog = new Gtk.FileChooserDialog (\"Pick a file\",\n"
"\t\t                                             this as Gtk.Window,\n"
"\t\t                                             Gtk.FileChooserAction.OPEN,\n"
"\t\t                                             Gtk.Stock.CANCEL,\n"
"\t\t                                             Gtk.ResponseType.CANCEL,\n"
"\t\t                                             Gtk.Stock.OPEN,\n"
"\t\t                                             Gtk.ResponseType.ACCEPT);\n"
"\n"
"\t\topen_dialog.local_only = false; //allow for uri\n"
"\t\topen_dialog.set_modal (true);\n"
"\t\topen_dialog.response.connect (open_response_cb);\n"
"\t\topen_dialog.show ();\n"
"\t}\n"
"\n"
"\t/* Either open the file and load the file contents or cancel. */\n"
"\tvoid open_response_cb (Gtk.Dialog dialog, int response_id) {\n"
"\t\tvar open_dialog = dialog as Gtk.FileChooserDialog;\n"
"\n"
"\t\tswitch (response_id) {\n"
"\t\t\tcase Gtk.ResponseType.ACCEPT: //open the file\n"
"\t\t\t\tfile = open_dialog.get_file();\n"
"\n"
"\t\t\t\tuint8[] file_contents;\n"
"\n"
"\t\t\t\ttry {\n"
"\t\t\t\t\tfile.load_contents (null, out file_contents, null);\n"
"\t\t\t\t}\n"
"\t\t\t\tcatch (GLib.Error err) { //handle the exception\n"
"\t\t\t\t\terror (\"%s\\n\", err.message);\n"
"\t\t\t\t}\n"
"\t\t\t\t/* Set the buffer text to be the contents of the file. */\n"
"\t\t\t\tbuffer.set_text ((string) file_contents,\n"
"\t\t\t\t                 file_contents.length);\n"
"\n"
"\t\t\t\tprint (\"opened: %s\\n\", (open_dialog.get_filename ()));\n"
"\t\t\t\tbreak;\n"
"\n"
"\t\t\tcase Gtk.ResponseType.CANCEL:\n"
"\t\t\t\tprint (\"cancelled: FileChooserAction.OPEN\\n\");\n"
"\t\t\t\tbreak;\n"
"\t\t}\n"
"\t\tdialog.destroy ();\n"
"\t}\n"
"\n"
"\n"
"\t/* Create FileChooserDialog in SAVE mode. */\n"
"\tvoid save_as_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tvar save_dialog = new Gtk.FileChooserDialog (\"Pick a file\",\n"
"\t\t                                             this as Gtk.Window,\n"
"\t\t                                             Gtk.FileChooserAction.SAVE,\n"
"\t\t                                             Gtk.Stock.CANCEL,\n"
"\t\t                                             Gtk.ResponseType.CANCEL,\n"
"\t\t                                             Gtk.Stock.SAVE,\n"
"\t\t                                             Gtk.ResponseType.ACCEPT);\n"
"\n"
"\t\tsave_dialog.set_do_overwrite_confirmation (true);\n"
"\t\tsave_dialog.set_modal (true);\n"
"\t\tif (file != null) {\n"
"\t\t\ttry {\n"
"\t\t\t\t(save_dialog as Gtk.FileChooser).set_file (file);\n"
"\t\t\t}\n"
"\t\t\tcatch (GLib.Error error) {\n"
"\t\t\t\tprint (\"%s\\n\", error.message);\n"
"\t\t\t}\n"
"\t\t}\n"
"\t\tsave_dialog.response.connect (save_as_response_cb);\n"
"\t\tsave_dialog.show ();\n"
"\t}\n"
"\n"
"\tvoid save_as_response_cb (Gtk.Dialog dialog, int response_id) {\n"
"\t\tvar save_dialog = dialog as Gtk.FileChooserDialog;\n"
"\n"
"\t\tswitch (response_id) {\n"
"\t\t\tcase Gtk.ResponseType.ACCEPT:\n"
"\t\t\t\tfile = save_dialog.get_file();\n"
"\t\t\t\tthis.save_to_file ();\n"
"\t\t\t\tbreak;\n"
"\t\t\tdefault:\n"
"\t\t\t\tbreak;\n"
"\t\t}\n"
"\t\t\tdialog.destroy ();\n"
"\t}\n"
"\n"
"\t/* Save the existing contents to the file.\n"
"\t * If file does not exist, call save_as_cb.\n"
"\t */\n"
"\tvoid save_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tif (file != null) {\n"
"\t\t\tthis.save_to_file ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tsave_as_cb (action, parameter);\n"
"\t\t}\n"
"\t}\n"
"\n"
"\tvoid save_to_file (){\n"
"\t\tGtk.TextIter start;\n"
"\t\tGtk.TextIter end;\n"
"\n"
"\t\tbuffer.get_bounds (out start, out end);\n"
"\t\tstring current_contents = buffer.get_text (start, end, false);\n"
"\t\ttry {\n"
"\t\t\t\tfile.replace_contents (current_contents.data, null, false,\n"
"\t\t\t\t                       GLib.FileCreateFlags.NONE, null, null);\n"
"\n"
"\t\t\t\tprint (\"saved: %s\\n\", file.get_path ());\n"
"\t\t}\n"
"\t\tcatch (GLib.Error err) {\n"
"\t\t\terror (\"%s\\n\", err.message);\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication: Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show_all;\n"
"\t}\n"
"\n"
"\tconst ActionEntry[] actions = {\n"
"\t\t{ \"quit\", quit_cb }\n"
"\t};\n"
"\n"
"\tvoid quit_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tthis.quit ();\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Setup actions */\n"
"\t\tthis.add_action_entries (actions, this);\n"
"\n"
"\t\t/* Setup menus */\n"
"\t\tvar builder = new Gtk.Builder ();\n"
"\t\ttry {\n"
"\t\t\tbuilder.add_from_file (\"filechooserdialog.ui\");\n"
"\t\t} catch (GLib.Error err) {\n"
"\t\t\terror (\"Unable to load file: %s\\n\", err.message);\n"
"\t\t}\n"
"\t\tthis.app_menu = builder.get_object (\"appmenu\") as MenuModel;\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/filechooserdialog.vala.page:34(section/title)
#: C/menubar.vala.page:186(section/title)
#, fuzzy
#| msgid "Reference Implementation"
msgid "Relevant API documentation"
msgstr "Referenz-Implementierung"

#: C/filechooserdialog.vala.page:39(item/p)
msgid ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.FileChooser.html\">FileChooser</"
"link>"
msgstr ""

#: C/filechooserdialog.vala.page:40(item/p)
msgid ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.FileChooserDialog.html"
"\">FileChooserDialog</link>"
msgstr ""

#: C/filechooserdialog.vala.page:41(item/p)
msgid ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.Builder.html\">Gtk.Builder</link>"
msgstr ""

#: C/filechooserdialog.vala.page:42(item/p)
msgid ""
"<link href=\"http://valadoc.org/gio-2.0/GLib.ActionEntry.html\">GLib."
"ActionEntry</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/fontchooserwidget.py.page:24(media)
msgctxt "_"
msgid ""
"external ref='media/fontchooserwidget.png' "
"md5='9161245e307b432ae1313e9a9941edae'"
msgstr ""
"external ref='media/fontchooserwidget.png' "
"md5='9161245e307b432ae1313e9a9941edae'"

#: C/fontchooserwidget.py.page:7(info/title)
msgctxt "text"
msgid "FontChooserWidget (Python)"
msgstr ""

#: C/fontchooserwidget.py.page:19(info/desc)
msgid "A widget to choose a font"
msgstr ""

#: C/fontchooserwidget.py.page:22(page/title)
msgid "FontChooserWidget"
msgstr ""

#: C/fontchooserwidget.py.page:25(page/p)
msgid "A FontChooserWidget with a callback function."
msgstr ""

#: C/fontchooserwidget.py.page:31(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"FontChooserWidget\", application=app)\n"
"\n"
"        # a font chooser\n"
"        self.font_chooser = Gtk.FontChooserWidget()\n"
"        # a default font\n"
"        self.font_chooser.set_font(\"Sans\")\n"
"        # a text to preview the font\n"
"        self.font_chooser.set_preview_text(\"This is an example of preview text!\")\n"
"\n"
"        # connect signal from the font chooser to the callback function\n"
"        self.font_chooser.connect(\"notify::font\", self.font_cb)\n"
"\n"
"        # add the font chooser to the window\n"
"        self.add(self.font_chooser)\n"
"\n"
"    # callback function:\n"
"    def font_cb(self, event, user_data):\n"
"        # print in the terminal\n"
"        print \"You chose the font \" + self.font_chooser.get_font()\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/fontchooserwidget.py.page:34(section/title)
msgid "Useful methods for a FontChooserWidget"
msgstr ""

#: C/fontchooserwidget.py.page:35(section/p)
msgid ""
"In line 16 the <code>\"notify::font\"</code> signal from the widget is "
"connected to the callback function <code>font_cb()</code> using "
"<code><var>widget</var>.connect(<var>signal</var>, <var>callback function</"
"var>)</code>. See <link xref=\"signals-callbacks.py\"/> for a more detailed "
"explanation."
msgstr ""

#: C/fontchooserwidget.py.page:37(item/p)
msgid ""
"To set the font which is initially selected, use <code>set_font(font)</code> "
"(where <code>font</code> is the font name) or <code>set_font_desc(font)</"
"code> (where <code>font</code> is the PangoFontDescription)."
msgstr ""

#: C/fontchooserwidget.py.page:38(item/p)
msgid ""
"To get the selected font use <code>get_font()</code> or <code>get_font_desc()"
"</code>."
msgstr ""

#: C/fontchooserwidget.py.page:39(item/p)
msgid ""
"To change the text which is shown in the preview area, use "
"<code>set_preview_text()</code>."
msgstr ""

#: C/fontchooserwidget.py.page:46(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkFontChooserWidget."
"html\">GtkFontChooserWidget</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/getting-ready.page:39(media)
msgctxt "_"
msgid "external ref='media/ubuntu.png' md5='40845e4a40b335b1958da1403f01c13f'"
msgstr "external ref='media/ubuntu.png' md5='40845e4a40b335b1958da1403f01c13f'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/getting-ready.page:44(media)
msgctxt "_"
msgid "external ref='media/fedora.png' md5='19add55f4349fd9e90f3a50b344ba626'"
msgstr "external ref='media/fedora.png' md5='19add55f4349fd9e90f3a50b344ba626'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/getting-ready.page:49(media)
msgctxt "_"
msgid "external ref='media/opensuse.png' md5='a852a94199328e2f978c7f6a55bf8b54'"
msgstr ""
"external ref='media/opensuse.png' md5='a852a94199328e2f978c7f6a55bf8b54'"

#: C/getting-ready.page:6(info/title)
msgctxt "link"
msgid "Install GNOME development tools"
msgstr ""

#: C/getting-ready.page:16(page/title)
msgid "Getting ready for GNOME development"
msgstr ""

#: C/getting-ready.page:19(section/title)
msgid "Install the required tools"
msgstr ""

#: C/getting-ready.page:20(section/p)
msgid ""
"Before you can start coding you will have to install the required tools for "
"GNOME development on your computer. This shouldn't take you more than ten "
"minutes."
msgstr ""

#: C/getting-ready.page:25(section/title)
msgid "Automatic installation"
msgstr "Automatische Installation"

#: C/getting-ready.page:26(section/p)
msgid ""
"On an up-to-date distribution you should be able to simply install the "
"required packages by clicking on <link href=\"media/gnome-devtools.catalog"
"\">Install now</link>."
msgstr ""

#: C/getting-ready.page:31(section/title)
msgid "Manual installation"
msgstr "Manuelle Installation"

#: C/getting-ready.page:32(section/p)
msgid ""
"If you prefer manual installation you can find the instructions for the "
"various distributions in the <link href=\"http://live.gnome.org/"
"DeveloperTools/Installation\">GNOME wiki</link>. Click on the image to go "
"directly to the installation page for your distribution:"
msgstr ""

#: C/getting-ready.page:37(item/p)
msgid ""
"<link href=\"http://live.gnome.org/DeveloperTools/Installation/Ubuntu\"> "
"<media type=\"image\" mime=\"image/png\" src=\"media/ubuntu.png\">Ubuntu</"
"media> </link>"
msgstr ""

#: C/getting-ready.page:42(item/p)
msgid ""
"<link href=\"http://live.gnome.org/DeveloperTools/Installation/Fedora\"> "
"<media type=\"image\" mime=\"image/png\" src=\"media/fedora.png\">Fedora</"
"media> </link>"
msgstr ""

#: C/getting-ready.page:47(item/p)
msgid ""
"<link href=\"http://live.gnome.org/DeveloperTools/Installation/OpenSuSE\"> "
"<media type=\"image\" mime=\"image/png\" src=\"media/opensuse.png\">OpenSuSE</"
"media> </link>"
msgstr ""

#: C/getting-ready.page:52(item/p)
msgid ""
"<link href=\"http://live.gnome.org/DeveloperTools/Installation\">Others</link>"
msgstr ""

#: C/getting-ready.page:59(section/title)
msgid "Required versions"
msgstr "Erforderliche Versionen"

#: C/getting-ready.page:60(section/p)
msgid ""
"The guides assume that you have at least the following versions of the tools "
"installed:"
msgstr ""

#: C/getting-ready.page:63(item/p)
msgid "Anjuta - 3.0"
msgstr "Anjuta - 3.0"

#: C/getting-ready.page:64(item/p)
msgid "Devhelp - 3.0"
msgstr "Devhelp - 3.0"

#: C/getting-ready.page:65(item/p)
msgid "Glade - 3.10"
msgstr "Glade - 3.10"

#: C/getting-ready.page:67(section/p)
msgid ""
"Of course, any newer version will also work. Now, we wish you a lot of fun "
"with the <link xref=\"index\">Demos</link>."
msgstr ""
"Natürlich wird auch jede neuere Version funktionieren. Wir wünschen Ihnen nun "
"viel Spaß mit den <link xref=\"index\">Demos</link>."

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/gmenu.c.page:21(media)
msgctxt "_"
msgid "external ref='media/gmenu.c.png' md5='f305fc3cae8d16d72b734ee53b559e33'"
msgstr "external ref='media/gmenu.c.png' md5='f305fc3cae8d16d72b734ee53b559e33'"

#: C/gmenu.c.page:7(info/title)
msgctxt "text"
msgid "GMenu (C)"
msgstr ""

#: C/gmenu.c.page:17(info/desc) C/gmenu.js.page:17(info/desc)
#: C/gmenu.vala.page:23(info/desc)
msgid "A simple implementation of GMenuModel"
msgstr ""

#: C/gmenu.c.page:20(page/title) C/gmenu.js.page:20(page/title)
#: C/gmenu.py.page:28(page/title) C/gmenu.vala.page:26(page/title)
msgid "GMenu"
msgstr ""

#: C/gmenu.c.page:22(page/p) C/gmenu.js.page:22(page/p)
#: C/gmenu.py.page:30(page/p) C/gmenu.vala.page:34(page/p)
msgid "A GtkApplication with a simple GMenu and SimpleActions"
msgstr ""

#: C/gmenu.c.page:25(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"new_window (GSimpleAction *action,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"  g_print (\"This does nothing. It is only a demonstration.\\n\");\n"
"}\n"
"\n"
"static void\n"
"quit (GSimpleAction *action,\n"
"      GVariant      *parameter,\n"
"      gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"static void\n"
"startup (GtkApplication *application,\n"
"         gpointer        user_data)\n"
"{\n"
"  static const GActionEntry actions[] = {\n"
"    { \"new\", new_window },\n"
"    { \"quit\", quit }\n"
"  };\n"
"\n"
"  GMenu *menu;\n"
"\n"
"  g_action_map_add_action_entries (G_ACTION_MAP (application), actions, G_N_ELEMENTS (actions), application);\n"
"\n"
"  menu = g_menu_new ();\n"
"  g_menu_append (menu, \"New\", \"app.new\");\n"
"  g_menu_append (menu, \"Quit\", \"app.quit\");\n"
"  gtk_application_set_app_menu (application, G_MENU_MODEL (menu));\n"
"  g_object_unref (menu);\n"
"}\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"\n"
"  gtk_window_set_application (GTK_WINDOW (window), GTK_APPLICATION (app));\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Hello GNOME\");\n"
"\n"
"  gtk_widget_show_all (GTK_WIDGET (window));\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\",G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/gmenu.js.page:21(media)
msgctxt "_"
msgid "external ref='media/gmenu.js.png' md5='16b8bee122197771ec8498dac42f196b'"
msgstr ""
"external ref='media/gmenu.js.png' md5='16b8bee122197771ec8498dac42f196b'"

#: C/gmenu.js.page:7(info/title)
msgctxt "text"
msgid "GMenu (JavaScript)"
msgstr "GMenu (JavaScript)"

#: C/gmenu.js.page:24(page/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class ({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.myapp',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"       //connect to 'activate' and 'startup' signals to the callback functions\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI (in this case it's just the ApplicationWindow\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"Welcome to GNOME\" });\n"
"\n"
"        //uncommenting the line below will change the window size\n"
"        //this._window.set_default_size(600, 400);\n"
"\n"
"        //show the window and all child widgets (none in this case)\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    _showNew: function() {\n"
"    print (\"This doesn't do anything. It is only a demonstration.\");\n"
"    },\n"
"\n"
"    _showAbout: function() {\n"
"        print (\"No AboutDialog here.  This is only a demonstration.\");\n"
"    },\n"
"\n"
"    //create the menu items and connect the signals to the callback functions.\n"
"    _initMenus: function() {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"New\",'app.new');\n"
"        menu.append(\"About\", 'app.about');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        let newAction = new Gio.SimpleAction ({ name: 'new' });\n"
"        newAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showNew();\n"
"            }));\n"
"        this.application.add_action(newAction);\n"
"\n"
"        let aboutAction = new Gio.SimpleAction ({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"         this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    //callback function for 'startup' signal\n"
"    _onStartup: function() {\n"
"        //You must call _initMenus() before calling _buildUI().\n"
"        this._initMenus();\n"
"        this._buildUI();\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/gmenu.py.page:29(media)
msgctxt "_"
msgid "external ref='media/gmenu.py.png' md5='52c68b34d5d566f37e9f803dedb6353a'"
msgstr ""
"external ref='media/gmenu.py.png' md5='52c68b34d5d566f37e9f803dedb6353a'"

#: C/gmenu.py.page:7(info/title)
msgctxt "text"
msgid "GMenu (Python)"
msgstr "GMenu (Python)"

#: C/gmenu.py.page:25(info/desc)
msgid "A simple implementation of GMenu"
msgstr ""

#: C/gmenu.py.page:36(section/code)
#, no-wrap
msgid ""
"\n"
"    from gi.repository import Gtk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GMenu Example\", application=app)\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup (self):\n"
"        # start the application\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # create a menu\n"
"        menu = Gio.Menu()\n"
"        # append to the menu three options\n"
"        menu.append(\"New\", \"app.new\")\n"
"        menu.append(\"About\", \"app.about\")\n"
"        menu.append(\"Quit\", \"app.quit\")\n"
"        # set the menu as menu of the application\n"
"        self.set_app_menu(menu)\n"
"\n"
"        # create an action for the option \"new\" of the menu\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        # connect it to the callback function new_cb\n"
"        new_action.connect(\"activate\", self.new_cb)\n"
"        # add the action to the application\n"
"        self.add_action(new_action)\n"
"\n"
"        # option \"about\"\n"
"        about_action = Gio.SimpleAction.new(\"about\", None)\n"
"        about_action.connect(\"activate\", self.about_cb)\n"
"        self.add_action(about_action)\n"
"\n"
"        # option \"quit\"\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_cb)\n"
"        self.add_action(quit_action)\n"
"\n"
"    # callback function for \"new\"\n"
"    def new_cb(self, action, parameter):\n"
"        print \"This does nothing. It is only a demonstration.\"\n"
"\n"
"    # callback function for \"about\"\n"
"    def about_cb(self, action, parameter):\n"
"        print \"No AboutDialog for you. This is only a demonstration.\"\n"
"\n"
"    # callback function for \"quit\"\n"
"    def quit_cb(self, action, parameter):\n"
"        print \"You have quit.\"\n"
"        self.quit()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/gmenu.py.page:41(section/title)
msgid "Useful methods for a GSimpleAction and a GMenu"
msgstr ""

#: C/gmenu.py.page:43(section/p)
msgid ""
"In line 33 the signal <code>\"activate\"</code> from the action "
"<code>new_action</code> (not the menu!) is connected to the callback function "
"<code>new_cb()</code> using <code><var>action</var>.connect(<var>signal</"
"var>, <var>callback function</var>)</code>. See <link xref=\"signals-"
"callbacks.py\"/> for a more detailed explanation."
msgstr ""

#: C/gmenu.py.page:45(section/p)
msgid "Useful methods for a GSimpleAction:"
msgstr ""

#: C/gmenu.py.page:47(item/p)
msgid ""
"To create a new action that is <em>stateless</em>, that is, an action that do "
"not retain or depend on a state given by the action itself, use"
msgstr ""

#: C/gmenu.py.page:48(item/code)
#, no-wrap
msgid ""
"\n"
"action = Gio.SimpleAction.new(\"name\", parameter_type)"
msgstr ""

#: C/gmenu.py.page:50(item/p)
msgid ""
"where <code>\"name\"</code> is the name of the action and "
"<code>parameter_type</code> is the type of the parameters that the action "
"receives when being activated. This can be <code>None</code>, or <code>GLib."
"VariantType.new('s')</code> if the parameter is of type <code>str</code>, or "
"instead of <code>'s'</code> a character as described <link href=\"http://"
"developer.gnome.org/glib/unstable/glib-GVariantType.html\">here</link>. To "
"create a new <em>stateful</em> (i.e. not stateless) action, use"
msgstr ""

#: C/gmenu.py.page:51(item/code)
#, no-wrap
msgid ""
"\n"
"action = Gio.SimpleAction.new_stateful(\"name\", parameter_type, initial_state)"
msgstr ""

#: C/gmenu.py.page:53(item/p)
msgid ""
"where <code>initial_state</code> is defined as a GVariant - for instance "
"<code>Glib.Variant.new_string('start')</code>; for a list of possiblities see "
"<link href=\"http://developer.gnome.org/glib/unstable/glib-GVariant.html"
"\">here</link>."
msgstr ""

#: C/gmenu.py.page:54(item/p)
msgid ""
"<code>set_enabled(True)</code> sets the action as enabled; an action must be "
"enabled in order to be activated or in order to have its state changed from "
"outside callers. This should only be called by the implementor of the action. "
"Users of the action should not attempt to modify its enabled flag."
msgstr ""

#: C/gmenu.py.page:55(item/p)
msgid ""
"<code>set_state(state)</code>, where <code>state</code> is a GVariant, sets "
"the state of the action, updating the 'state' property to the given value. "
"This should only be called by the implementor of the action; users of the "
"action should instead call <code>change_state(state)</code> (where "
"<code>state</code> is as above) to request the change."
msgstr ""

#: C/gmenu.py.page:58(section/p)
msgid "Useful methods for a GMenu:"
msgstr ""

#: C/gmenu.py.page:60(item/p)
msgid ""
"To insert an item in the menu in position <code>position</code>, use "
"<code>insert(position, label, detailed_action)</code>, where <code>label</"
"code> is the label that will appear in the menu and <code>detailed_action</"
"code> is a string composed of the name of the action to which we prepend the "
"prefix <code>app.</code>. A more detailed discussion of this can be found in "
"<link xref=\"menubar.py#win-app\"/>."
msgstr ""

#: C/gmenu.py.page:61(item/p)
msgid ""
"To append or prepend an item in the menu use respectively <code>append(label, "
"detailed_action)</code> and <code>prepend(label, detailed_action)</code>."
msgstr ""

#: C/gmenu.py.page:62(item/p)
msgid ""
"Another way of adding items to the menu is to create them as <code>GMenuItem</"
"code>s and use <code>insert_item(position, item)</code>, <code>append_item"
"(item)</code>, or <code>prepend_item(item)</code>; so for instance we might "
"have:"
msgstr ""

#: C/gmenu.py.page:63(item/code)
#, no-wrap
msgid ""
"\n"
"about = Gio.MenuItem.new(\"About\", \"app.about\")\n"
"menu.append_item(about)"
msgstr ""

#: C/gmenu.py.page:67(item/p)
msgid ""
"We can also add a whole subsection in a menu using <code>insert_section"
"(position, label, section)</code>, <code>append_section(label, section)</"
"code>, or <code>prepend_section(label, section)</code>, where <code>label</"
"code> is the title of the subsection."
msgstr ""

#: C/gmenu.py.page:68(item/p)
msgid ""
"To add a submenu that will expand and collapse, use <code>insert_submenu"
"(position, label, section)</code>, <code>append_submenu(label, section)</"
"code>, or <code>prepend_submenu(label, section)</code>, where <code>label</"
"code> is the title of the subsection."
msgstr ""

#: C/gmenu.py.page:69(item/p)
msgid "To remove an item from the menu, use <code>remove(postion)</code>."
msgstr ""

#: C/gmenu.py.page:70(item/p)
msgid "To set a label for the menu, use <code>set_label(label)</code>."
msgstr ""

#: C/gmenu.py.page:81(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/glib/unstable/glib-GVariantType.html"
"\">GVariantType</link>"
msgstr ""

#: C/gmenu.py.page:82(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/glib/unstable/glib-GVariant.html"
"\">GVariant</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/gmenu.vala.page:27(media)
msgctxt "_"
msgid ""
"external ref='media/gmenu.vala.png' md5='7a9f381fc3ed5bf8d1c50d2acb095400'"
msgstr ""
"external ref='media/gmenu.vala.png' md5='7a9f381fc3ed5bf8d1c50d2acb095400'"

#: C/gmenu.vala.page:7(info/title)
msgctxt "text"
msgid "GMenu (Vala)"
msgstr ""

#: C/gmenu.vala.page:29(note/p)
msgid ""
"<em style=\"strong\">You need to be running GTK+-3.4 or later for this to "
"work</em>"
msgstr ""

#: C/gmenu.vala.page:32(note/p)
msgid ""
"This program will not compile with the quit action connected until <link href="
"\"https://bugzilla.gnome.org/show_bug.cgi?id=674090\">Bug #674090</link> is "
"fixed. Therefore, the problematic line has been commented out."
msgstr ""

#: C/gmenu.vala.page:36(page/code)
#, no-wrap
msgid ""
"/* A window in the application. */\n"
"public class Window : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Constructor */\n"
"\tpublic Window (Application app) {\n"
"\t\tObject (application: app, title: \"Gmenu Example\");\n"
"\n"
"\t\tvar about_action = new SimpleAction (\"about\", null);\n"
"\n"
"\t\t/* Connect the 'activate' signal to the\n"
"\t\t * signal handler (aka. callback).\n"
"\t\t */\n"
"\t\tabout_action.activate.connect (this.about_cb);\n"
"\n"
"\t\t/* Add the action to this window. */\n"
"\t\tthis.add_action (about_action);\n"
"\n"
"\t\tthis.show ();\n"
"\t}\n"
"\n"
"\t/* Signal handler for 'activate' signal of the SimpleAction. */\n"
"\tvoid about_cb (SimpleAction simple, Variant? parameter) {\n"
"\t\tprint (\"This does nothing.  It is only a demonstration.\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* This is the Application. */\n"
"public class Application : Gtk.Application {\n"
"\n"
"\t/* Constructor */\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.application\");\n"
"\t}\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create a new window for this application. */\n"
"\t\tnew Window (this);\n"
"\t}\n"
"\n"
"\t/* Override the 'startup' signal of GLib.Application. */\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\tvar menu = new Menu ();\n"
"\t\tmenu.append (\"About\", \"win.about\");\n"
"\t\tmenu.append (\"Quit\", \"app.quit\");\n"
"\t\tthis.app_menu = menu;\n"
"\n"
"\t\tvar quit_action = new SimpleAction (\"quit\", null);\n"
"\t\t//quit_action.activate.connect (this.quit);\n"
"\t\tthis.add_action (quit_action);\n"
"\t}\n"
"}\n"
"\n"
"/* main function creates Application and runs it. */\n"
"int main (string[] args) {\n"
"\treturn new Application ().run (args);\n"
"}\n"
msgstr ""

#: C/gmenu.vala.page:43(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gio-2.0/GLib.Menu.Menu.html\">Menu</link>"
msgstr ""

#: C/gmenu.vala.page:44(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gio-2.0/GLib.Menu.append.html\">append</"
"link>"
msgstr ""

#: C/gmenu.vala.page:45(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gio-2.0/GLib.SimpleAction.html"
"\">SimpleAction</link>"
msgstr ""

#: C/gmenu.vala.page:46(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gio-2.0/GLib.ActionMap.add_action.html"
"\">add_action</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/grid.c.page:22(media) C/grid.js.page:25(media) C/grid.vala.page:23(media)
msgctxt "_"
msgid "external ref='media/grid.png' md5='27d45da115401127456a3b854dcfc5be'"
msgstr "external ref='media/grid.png' md5='27d45da115401127456a3b854dcfc5be'"

#: C/grid.c.page:7(info/title)
msgctxt "text"
msgid "Grid (C)"
msgstr ""

#: C/grid.c.page:17(info/desc) C/grid.js.page:21(info/desc)
#: C/grid.py.page:25(info/desc) C/grid.vala.page:19(info/desc)
msgid "Pack widgets in rows and columns"
msgstr ""

#: C/grid.c.page:20(page/title) C/grid.js.page:24(page/title)
#: C/grid.py.page:28(page/title)
msgid "Grid"
msgstr ""

#: C/grid.c.page:23(page/p) C/grid.vala.page:24(page/p)
msgid "A button widget connected to a progress bar."
msgstr ""

#: C/grid.c.page:25(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Signal handler for the \"clicked\" signal of the Button. Each\n"
"click generates a progress bar pulse*/\n"
"static void\n"
"on_button_click (GtkButton *button,\n"
"                 gpointer   user_data)\n"
"{\n"
"  GtkProgressBar *progress_bar = user_data;\n"
"  gtk_progress_bar_pulse (progress_bar);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"  GtkWidget *button;\n"
"  GtkWidget *progress_bar;\n"
"\n"
"  /*Create the window and set a title*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Grid Example\");\n"
"\n"
"  /*Create a button with a label*/\n"
"  button = gtk_button_new_with_label (\"Button\");\n"
"\n"
"  /*Create the progress bar*/\n"
"  progress_bar = gtk_progress_bar_new ();\n"
"\n"
"  /*Create a grid and attach the button and progress bar\n"
"  accordingly*/\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_attach (GTK_GRID (grid), button, 1, 1, 1, 1);\n"
"  gtk_grid_attach_next_to (GTK_GRID (grid), \n"
"                           progress_bar, \n"
"                           button, \n"
"                           GTK_POS_BOTTOM, 1, 1);\n"
"\n"
"  /*Connecting the clicked signal to the callback function*/\n"
"  g_signal_connect (GTK_BUTTON (button), \"clicked\", \n"
"                    G_CALLBACK (on_button_click), progress_bar);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""

#: C/grid.c.page:33(item/p) C/progressbar.c.page:34(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkProgressBar.html"
"\">GtkProgressBar</link>"
msgstr ""

#: C/grid.js.page:7(info/title)
msgctxt "text"
msgid "Grid (JavaScript)"
msgstr "Grid (JavaScript)"

#: C/grid.js.page:26(page/p)
msgid ""
"A button widget connected to a progress bar, inside of a grid which handles "
"the layout."
msgstr ""

#: C/grid.js.page:28(page/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const GridExample = new Lang.Class ({\n"
"    Name: 'Grid Example',\n"
"\n"
"    /* Create the application itself\n"
"       This boilerplate code is needed to build any GTK+ application. */\n"
"        _init: function () {\n"
"            this.application = new Gtk.Application ({\n"
"                application_id: 'org.example.jsgrid',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                         window_position: Gtk.WindowPosition.CENTER,\n"
"                                                         title: \"Grid Example\"});\n"
"\n"
"        // Create the grid\n"
"        this.Grid = new Gtk.Grid ();\n"
"\n"
"        // Create the widgets inside the grid\n"
"        this.progressBar = new Gtk.ProgressBar ();\n"
"        this.Button = new Gtk.Button ({ label: \"Button\" });\n"
"        this.Button.connect (\"clicked\", Lang.bind(this, this._clickHandler));\n"
"\n"
"        // Assemble the grid\n"
"        this._window.add (this.Grid);\n"
"        this.Grid.attach (this.Button, 1, 1, 1, 1);\n"
"        this.Grid.attach_next_to (this.progressBar, this.Button, Gtk.PositionType.BOTTOM, 1, 1);\n"
"\n"
"                // Show the window and all child widgets\n"
"                this._window.show_all();\n"
"    },\n"
"\n"
"    // Here's the function that says what happens when the button is clicked\n"
"    _clickHandler: function () {\n"
"        this.progressBar.pulse ();\n"
"    }\n"
"\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GridExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/grid.js.page:36(item/p)
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Grid.html"
"\">Gtk.Grid</link>"
msgstr ""

#: C/grid.js.page:37(item/p) C/progressbar.js.page:41(item/p)
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.ProgressBar."
"html\">Gtk.ProgressBar</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/grid.py.page:30(media)
msgctxt "_"
msgid ""
"external ref='media/grid_simple.png' md5='c806f2e69b30373d4d2e08b41d6cc1f6'"
msgstr ""
"external ref='media/grid_simple.png' md5='c806f2e69b30373d4d2e08b41d6cc1f6'"

#: C/grid.py.page:7(info/title)
msgctxt "text"
msgid "Grid (Python)"
msgstr "Grid (Python)"

#: C/grid.py.page:31(page/p)
msgid "Some labels in a grid."
msgstr ""

#: C/grid.py.page:37(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Grid Example\", application=app)\n"
"\n"
"        # three labels\n"
"        label_top_left = Gtk.Label(label=\"This is Top Left\")\n"
"        label_top_right = Gtk.Label(label=\"This is Top Right\")\n"
"        label_bottom = Gtk.Label(label=\"This is Bottom\")\n"
"\n"
"        # a grid\n"
"        grid = Gtk.Grid()\n"
"\n"
"        # some space between the columns of the grid\n"
"        grid.set_column_spacing(20)\n"
"\n"
"        # in the grid:\n"
"        # attach the first label in the top left corner\n"
"        grid.attach(label_top_left, 0, 0, 1, 1)\n"
"        # attach the second label\n"
"        grid.attach(label_top_right, 1, 0, 1, 1)\n"
"        # attach the third label below the first label\n"
"        grid.attach_next_to(label_bottom, label_top_left, Gtk.PositionType.BOTTOM, 2, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/grid.py.page:41(section/title)
msgid "Useful methods for a Grid widget"
msgstr ""

#: C/grid.py.page:44(item/p)
msgid ""
"To attach a widget <code>child</code> in position <code>left, top</code> in a "
"slot of given <code>width, height</code> use <code>attach(child, top, left, "
"width, height)</code>. If a widget <code>sibling</code> is already in place, "
"we can also use <code>attach_next_to(child, sibling, side, width, height)</"
"code>, where <code>side</code> is one of <code>Gtk.PositionType.LEFT, Gtk."
"PositionType.RIGHT, Gtk.PositionType.TOP, Gtk.PositionType.BOTTOM</code>."
msgstr ""

#: C/grid.py.page:45(item/p)
msgid ""
"<code>insert_row(position)</code> and <code>insert_column(position)</code> do "
"exactly what they say; children which are attached at or below this position "
"are moved one row down, and children which span across this position are "
"grown to span the new row. <code>insert_next_to(sibling, side)</code> inserts "
"a row or column at the specified position. The new row or column is placed "
"next to <code>sibling</code>, on the side determined by <code>side</code>; if "
"side is <code>Gtk.PositionType.TOP</code> or <code>Gtk.PositionType.BOTTOM</"
"code>, a row is inserted, if side is <code>Gtk.PositionType.LEFT</code> or "
"<code>Gtk.PositionType.RIGHT</code>, a column is inserted."
msgstr ""

#: C/grid.py.page:46(item/p)
msgid ""
"<code>set_row_homogeneous(True)</code> and <code>set_column_homogeneous(True)"
"</code> ensure that (respectively) every row or every column has the same "
"width or height."
msgstr ""

#: C/grid.py.page:47(item/p)
msgid ""
"<code>set_row_spacing(spacing)</code> and <code>set_column_spacing(spacing)</"
"code> force a spacing between (respectively) rows or columns. The value of "
"<code>spacing</code> can be between <code>0</code>, which is the default "
"value, and <code>32767</code>."
msgstr ""

#: C/grid.py.page:58(item/p) C/label.py.page:89(item/p)
#: C/separator.py.page:41(item/p) C/switch.py.page:45(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkLabel.html"
"\">GtkLabel</link>"
msgstr ""

#: C/grid.py.page:59(item/p) C/image.py.page:102(item/p)
#: C/paned.py.page:43(item/p) C/scrolledwindow.py.page:46(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkImage.html"
"\">GtkImage</link>"
msgstr ""

#: C/grid.py.page:60(item/p) C/radiobutton.py.page:49(item/p)
#: C/separator.py.page:40(item/p) C/switch.py.page:46(item/p)
#: C/toolbar_builder.py.page:195(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkGrid.html\">GtkGrid</"
"link>"
msgstr ""

#: C/grid.vala.page:7(info/title)
msgctxt "text"
msgid "Grid (Vala)"
msgstr "Grid (Vala)"

#: C/grid.vala.page:22(page/title)
msgid "Grid widget"
msgstr "Grid-Widget"

#: C/grid.vala.page:26(page/code)
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Widget progress_bar;\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Grid Example\");\n"
"\t\tvar grid = new Gtk.Grid();\n"
"\t\tprogress_bar = new Gtk.ProgressBar ();\n"
"\t\tprogress_bar.show ();\n"
"\n"
"\t\tvar button = new Gtk.Button.with_label (\"Button\");\n"
"\t\tbutton.clicked.connect (on_button_click);\n"
"\t\tbutton.show ();\n"
"\n"
"\t\tthis.add(grid);\n"
"\t\tgrid.attach(button, 0, 1, 1, 1);\n"
"\t\tgrid.attach_next_to (progress_bar, button, Gtk.PositionType.BOTTOM, 1, 1);\n"
"\t\tgrid.show ();\n"
"\t}\n"
"\n"
"\tvoid on_button_click (Gtk.Button button) {\n"
"\t\t(progress_bar as Gtk.ProgressBar).pulse ();\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/grid.vala.page:31(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Grid.html\">Gtk.Grid</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/GtkApplicationWindow.c.page:21(media)
#: C/GtkApplicationWindow.js.page:21(media)
#: C/GtkApplicationWindow.py.page:28(media)
#: C/GtkApplicationWindow.vala.page:21(media) C/window.c.page:21(media)
#: C/window.js.page:24(media) C/window.py.page:32(media)
#: C/window.vala.page:24(media)
msgctxt "_"
msgid "external ref='media/window.png' md5='eb0cde3530978619c25bddfaeb453345'"
msgstr "external ref='media/window.png' md5='eb0cde3530978619c25bddfaeb453345'"

#: C/GtkApplicationWindow.c.page:7(info/title)
msgctxt "text"
msgid "ApplicationWindow (C)"
msgstr ""

#: C/GtkApplicationWindow.c.page:17(info/desc)
msgid "A toplevel window which can contain other widgets, and support GMenu"
msgstr ""

#: C/GtkApplicationWindow.c.page:20(page/title)
#: C/GtkApplicationWindow.js.page:20(page/title)
#: C/GtkApplicationWindow.py.page:27(page/title)
#: C/GtkApplicationWindow.vala.page:20(page/title)
msgid "ApplicationWindow"
msgstr ""

#: C/GtkApplicationWindow.c.page:22(page/p)
msgid "A minimal GtkApplication with a GtkApplicationWindow"
msgstr ""

#: C/GtkApplicationWindow.c.page:24(page/code)
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Hello GNOME\");\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""

#: C/GtkApplicationWindow.c.page:30(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/3.4/GtkApplicationWindow.html"
"\">GtkApplicationWindow</link>"
msgstr ""

#: C/GtkApplicationWindow.js.page:7(info/title)
msgctxt "text"
msgid "ApplicationWindow (JavaScript)"
msgstr ""

#: C/GtkApplicationWindow.js.page:17(info/desc)
#: C/GtkApplicationWindow.py.page:24(info/desc)
#: C/GtkApplicationWindow.vala.page:17(info/desc)
msgid "GtkWindow subclass with GtkApplication support"
msgstr ""

#: C/GtkApplicationWindow.js.page:22(page/p)
msgid "A simple GtkApplicationWindow which can support Menus."
msgstr ""

#: C/GtkApplicationWindow.js.page:24(page/code)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class ({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.myapp',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"       //connect to 'activate' and 'startup' signals to the callback functions\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI (in this case it's just the ApplicationWindow\n"
"    _buildUI: function () {\n"
"        this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"Welcome to GNOME\" });\n"
"\n"
"        //uncommenting the line below will change the window size\n"
"        //this._window.set_default_size(600, 400);\n"
"\n"
"        //show the window and all child widgets (none in this case)\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    //callback function for 'startup' signal\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/GtkApplicationWindow.py.page:7(info/title)
msgctxt "text"
msgid "ApplicationWindow (Python)"
msgstr ""

#: C/GtkApplicationWindow.py.page:29(page/p)
#: C/GtkApplicationWindow.vala.page:22(page/p)
msgid "The simplest GtkApplication Window which can support Menus."
msgstr ""

#: C/GtkApplicationWindow.py.page:36(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"# a Gtk ApplicationWindow\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # constructor: the title is \"Welcome to GNOME\" and the window belongs\n"
"    # to the application app\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    # constructor of the Gtk Application\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    # create and activate a MyWindow, with self (the MyApplication) as\n"
"    # application the window belongs to.\n"
"    # Note that the function in C activate() becomes do_activate() in Python\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        # show the window and all its content\n"
"        # this line could go in the constructor of MyWindow as well\n"
"        win.show_all()\n"
"\n"
"    # start up the application\n"
"    # Note that the function in C startup() becomes do_startup() in Python\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"# create and run the application, exit with the value returned by\n"
"# running the program\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/GtkApplicationWindow.py.page:40(section/title)
msgid "Useful methods for a Gtk.ApplicationWindow widget"
msgstr ""

#: C/GtkApplicationWindow.py.page:43(item/p) C/window.py.page:53(item/p)
msgid ""
"<code>set_default_size(200, 100)</code> sets the default size of the window "
"to a width of <code>200</code> and a height of <code>100</code>; if instead "
"of a positive number we pass <code>-1</code> we have the default size."
msgstr ""

#: C/GtkApplicationWindow.py.page:44(item/p) C/window.py.page:54(item/p)
msgid ""
"<code>set_position(Gtk.WindowPosition.CENTER)</code> centers the window. "
"Other options are <code>Gtk.WindowPosition.NONE, Gtk.WindowPosition.MOUSE, "
"Gtk.WindowPosition.CENTER_ALWAYS, Gtk.WindowPosition.CENTER_ON_PARENT</code>."
msgstr ""

#: C/GtkApplicationWindow.vala.page:7(info/title)
msgctxt "text"
msgid "ApplicationWindow (Vala)"
msgstr ""

#: C/GtkApplicationWindow.vala.page:24(page/code)
#, no-wrap
msgid ""
"\n"
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\t/* Create the window of this application and show it. */\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"Welcome to GNOME\";\n"
"\t\twindow.show ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/GtkApplicationWindow.vala.page:30(item/p) C/label.vala.page:30(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Application.html.content.tpl"
"\">Gtk.Application</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/guitar-tuner.c.page:44(media) C/guitar-tuner.cpp.page:42(media)
#: C/guitar-tuner.js.page:36(media) C/guitar-tuner.py.page:49(media)
#: C/guitar-tuner.vala.page:47(media)
msgctxt "_"
msgid ""
"external ref='media/guitar-tuner.png' md5='35e615e0f5e293671d00c5c414ac2f6b'"
msgstr ""
"external ref='media/guitar-tuner.png' md5='35e615e0f5e293671d00c5c414ac2f6b'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/guitar-tuner.c.page:99(media) C/guitar-tuner.cpp.page:93(media)
#: C/guitar-tuner.py.page:100(media) C/guitar-tuner.vala.page:100(media)
msgctxt "_"
msgid ""
"external ref='media/guitar-tuner-glade.png' "
"md5='f6606525443ab2160f53a87a454364d0'"
msgstr ""
"@@image: 'media/guitar-tuner-glade.png'; md5=f6606525443ab2160f53a87a454364d0"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/guitar-tuner.c.page:144(media) C/guitar-tuner.cpp.page:122(media)
#: C/guitar-tuner.js.page:42(media) C/guitar-tuner.py.page:143(media)
#: C/guitar-tuner.vala.page:134(media)
msgctxt "_"
msgid ""
"external ref='media/guitar-tuner-pipeline.png' "
"md5='5adc952909d92af5dae6954781b4ad5f'"
msgstr ""
"@@image: 'media/guitar-tuner-pipeline.png'; "
"md5=5adc952909d92af5dae6954781b4ad5f"

#: C/guitar-tuner.c.page:7(info/title)
msgctxt "text"
msgid "Guitar tuner (C)"
msgstr "Gitarrenstimmgerät (C)"

#: C/guitar-tuner.c.page:10(info/desc) C/guitar-tuner.py.page:10(info/desc)
msgid ""
"Use GTK+ and GStreamer to build a simple guitar tuner application for GNOME. "
"Shows off how to use the interface designer."
msgstr ""

#: C/guitar-tuner.c.page:28(page/title) C/guitar-tuner.cpp.page:26(page/title)
#: C/guitar-tuner.js.page:19(page/title) C/guitar-tuner.py.page:33(page/title)
#: C/guitar-tuner.vala.page:31(page/title)
msgid "Guitar tuner"
msgstr "Gitarrenstimmgerät"

#: C/guitar-tuner.c.page:31(synopsis/p) C/guitar-tuner.cpp.page:29(synopsis/p)
#: C/guitar-tuner.py.page:36(synopsis/p)
msgid ""
"In this tutorial, we're going to make a program which plays tones that you "
"can use to tune a guitar. You will learn how to:"
msgstr ""

#: C/guitar-tuner.c.page:33(item/p) C/guitar-tuner.cpp.page:31(item/p)
#: C/guitar-tuner.py.page:38(item/p)
msgid "Set up a basic project in Anjuta"
msgstr ""

#: C/guitar-tuner.c.page:34(item/p) C/guitar-tuner.cpp.page:32(item/p)
#: C/guitar-tuner.py.page:39(item/p)
msgid "Create a simple GUI with Anjuta's UI designer"
msgstr ""

#: C/guitar-tuner.c.page:35(item/p) C/guitar-tuner.cpp.page:33(item/p)
#: C/guitar-tuner.py.page:40(item/p)
msgid "Use GStreamer to play sounds"
msgstr ""

#: C/guitar-tuner.c.page:37(synopsis/p) C/guitar-tuner.cpp.page:35(synopsis/p)
#: C/guitar-tuner.py.page:42(synopsis/p)
#: C/guitar-tuner.vala.page:40(synopsis/p)
#: C/image-viewer.js.page:38(synopsis/p) C/image-viewer.py.page:38(synopsis/p)
#: C/image-viewer.vala.page:45(synopsis/p)
#: C/magic-mirror.vala.page:38(synopsis/p)
msgid "You'll need the following to be able to follow this tutorial:"
msgstr ""

#: C/guitar-tuner.c.page:39(item/p) C/guitar-tuner.cpp.page:37(item/p)
#: C/guitar-tuner.py.page:44(item/p) C/image-viewer.js.page:40(item/p)
#: C/image-viewer.py.page:40(item/p) C/magic-mirror.vala.page:40(item/p)
msgid "An installed copy of the <link xref=\"getting-ready\">Anjuta IDE</link>"
msgstr ""

#: C/guitar-tuner.c.page:40(item/p)
msgid "Basic knowledge of the C programming language"
msgstr ""

#: C/guitar-tuner.c.page:47(section/title)
#: C/guitar-tuner.cpp.page:45(section/title)
#: C/guitar-tuner.py.page:52(section/title)
#: C/image-viewer.c.page:41(section/title)
#: C/image-viewer.cpp.page:39(section/title)
#: C/image-viewer.js.page:49(section/title)
#: C/image-viewer.py.page:48(section/title)
#: C/image-viewer.vala.page:56(section/title)
#: C/magic-mirror.vala.page:49(section/title)
#: C/message-board.c.page:45(section/title)
#: C/photo-wall.c.page:51(section/title)
#: C/record-collection.js.page:52(section/title)
msgid "Create a project in Anjuta"
msgstr ""

#: C/guitar-tuner.c.page:48(section/p) C/guitar-tuner.cpp.page:46(section/p)
#: C/guitar-tuner.py.page:53(section/p) C/guitar-tuner.vala.page:51(section/p)
#: C/image-viewer.c.page:42(section/p) C/image-viewer.cpp.page:40(section/p)
#: C/image-viewer.js.page:50(section/p) C/image-viewer.py.page:49(section/p)
#: C/image-viewer.vala.page:57(section/p)
#: C/magic-mirror.vala.page:50(section/p) C/photo-wall.c.page:52(section/p)
#: C/record-collection.js.page:53(section/p)
msgid ""
"Before you start coding, you'll need to set up a new project in Anjuta. This "
"will create all of the files you need to build and run the code later on. "
"It's also useful for keeping everything together."
msgstr ""

#: C/guitar-tuner.c.page:51(item/p) C/guitar-tuner.cpp.page:49(item/p)
#: C/guitar-tuner.py.page:56(item/p) C/image-viewer.c.page:45(item/p)
#: C/image-viewer.cpp.page:43(item/p) C/image-viewer.js.page:53(item/p)
#: C/image-viewer.py.page:52(item/p) C/magic-mirror.vala.page:53(item/p)
#: C/photo-wall.c.page:55(item/p) C/record-collection.js.page:56(item/p)
msgid ""
"Start Anjuta and click <guiseq><gui>File</gui><gui>New</gui><gui>Project</"
"gui></guiseq> to open the project wizard."
msgstr ""

#: C/guitar-tuner.c.page:54(item/p)
msgid ""
"Choose <gui>GTK+ (Simple)</gui> from the <gui>C</gui> tab, click "
"<gui>Continue</gui>, and fill out your details on the next few pages. Use "
"<file>guitar-tuner</file> as project name and directory."
msgstr ""

#: C/guitar-tuner.c.page:57(item/p)
msgid ""
"Make sure that <gui>Configure external packages</gui> is switched <gui>ON</"
"gui>. On the next page, select <em>gstreamer-0.10</em> from the list to "
"include the GStreamer library in your project."
msgstr ""

#: C/guitar-tuner.c.page:61(item/p) C/image-viewer.c.page:56(item/p)
#: C/photo-wall.c.page:70(item/p)
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. Open "
"<file>src/main.c</file> from the <gui>Project</gui> or <gui>File</gui> tabs. "
"You should see some code which starts with the lines:"
msgstr ""

#: C/guitar-tuner.c.page:62(item/code) C/image-viewer.c.page:57(item/code)
#: C/photo-wall.c.page:71(item/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;config.h&gt;\n"
"#include &lt;gtk/gtk.h&gt;"
msgstr ""

#: C/guitar-tuner.c.page:70(section/title)
#: C/guitar-tuner.cpp.page:68(section/title)
#: C/guitar-tuner.vala.page:73(section/title)
#: C/image-viewer.c.page:65(section/title)
#: C/image-viewer.cpp.page:65(section/title)
#: C/image-viewer.vala.page:112(section/title)
#: C/magic-mirror.vala.page:77(section/title)
msgid "Build the code for the first time"
msgstr ""

#: C/guitar-tuner.c.page:71(section/p)
msgid ""
"C is a rather verbose language, so don't be surprised that the file contains "
"quite a lot of code. Most of it is template code. It loads an (empty) window "
"from the user interface description file and shows it. More details are given "
"below; skip this list if you understand the basics:"
msgstr ""

#: C/guitar-tuner.c.page:75(item/p) C/image-viewer.c.page:70(item/p)
msgid ""
"The three <code>#include</code> lines at the top include the <code>config</"
"code> (useful autoconf build defines), <code>gtk</code> (user interface) and "
"<code>gi18n</code> (internationalization) libraries. Functions from these "
"libraries are used in the rest of the code."
msgstr ""

#: C/guitar-tuner.c.page:78(item/p)
msgid ""
"The <code>create_window</code> function creates a new window by opening a "
"GtkBuilder file (<file>src/guitar-tuner.ui</file>, defined a few lines "
"above), connecting its signals and then displaying it in a window. The "
"GtkBuilder file contains a description of a user interface and all of its "
"elements. You can use Anjuta's editor to design GtkBuilder user interfaces."
msgstr ""

#: C/guitar-tuner.c.page:79(item/p) C/image-viewer.c.page:74(item/p)
#: C/image-viewer.vala.page:122(item/p)
msgid ""
"Connecting signals is how you define what happens when you push a button, or "
"when some other event happens. Here, the <code>destroy</code> function is "
"called (and quits the app) when you close the window."
msgstr ""

#: C/guitar-tuner.c.page:82(item/p) C/image-viewer.c.page:77(item/p)
msgid ""
"The <code>main</code> function is run by default when you start a C "
"application. It calls a few functions which set up and then run the "
"application. The <code>gtk_main</code> function starts the GTK main loop, "
"which runs the user interface and starts listening for events (like clicks "
"and key presses)."
msgstr ""

#: C/guitar-tuner.c.page:85(item/p) C/image-viewer.c.page:80(item/p)
msgid ""
"The <code>ENABLE_NLS</code> conditional definition sets up <code>gettext</"
"code>, which is a framework for translating applications. These functions "
"specify how translation tools should handle your app when you run them."
msgstr ""

#: C/guitar-tuner.c.page:89(section/p) C/guitar-tuner.cpp.page:83(section/p)
#: C/image-viewer.c.page:84(section/p) C/image-viewer.cpp.page:81(section/p)
#: C/image-viewer.vala.page:132(section/p)
#: C/magic-mirror.vala.page:92(section/p)
msgid ""
"This code is ready to be used, so you can compile it by clicking "
"<guiseq><gui>Build</gui><gui>Build Project</gui></guiseq> (or press "
"<keyseq><key>Shift</key><key>F7</key></keyseq>)."
msgstr ""

#: C/guitar-tuner.c.page:90(section/p) C/guitar-tuner.cpp.page:84(section/p)
#: C/image-viewer.c.page:85(section/p) C/image-viewer.cpp.page:82(section/p)
msgid ""
"Press <gui>Execute</gui> on the next window that appears to configure a debug "
"build. You only need to do this once, for the first build."
msgstr ""

#: C/guitar-tuner.c.page:94(section/title)
#: C/guitar-tuner.cpp.page:88(section/title)
#: C/guitar-tuner.py.page:95(section/title)
#: C/guitar-tuner.vala.page:95(section/title)
msgid "Create the user interface"
msgstr ""

#: C/guitar-tuner.c.page:95(section/p) C/guitar-tuner.cpp.page:89(section/p)
msgid ""
"A description of the user interface (UI) is contained in the GtkBuilder file. "
"To edit the user interface, open <file>src/guitar_tuner.ui</file>. This will "
"switch to the interface designer. The design window is in the center; widgets "
"and widgets' properties are on the left, and the palette of available widgets "
"is on the right."
msgstr ""

#: C/guitar-tuner.c.page:97(section/p) C/guitar-tuner.cpp.page:91(section/p)
#: C/guitar-tuner.py.page:98(section/p)
msgid ""
"The layout of every UI in GTK+ is organized using boxes and tables. Let's use "
"a vertical <gui>GtkButtonBox</gui> here to assign six <gui>GtkButtons</gui>, "
"one for each of the six guitar strings."
msgstr ""

#: C/guitar-tuner.c.page:103(item/p) C/guitar-tuner.cpp.page:97(item/p)
#: C/guitar-tuner.py.page:104(item/p)
msgid ""
"Select a <gui>GtkButtonBox</gui> from the <gui>Container</gui> section of the "
"<gui>Palette</gui> on the right and put it into the window. In the "
"<gui>Properties</gui> pane, set the number of elements to 6 (for the six "
"strings) and the orientation to vertical."
msgstr ""

#: C/guitar-tuner.c.page:107(item/p) C/guitar-tuner.cpp.page:101(item/p)
#: C/guitar-tuner.py.page:108(item/p)
msgid ""
"Now, choose a <gui>GtkButton</gui> from the palette and put it into the first "
"part of the box."
msgstr ""

#: C/guitar-tuner.c.page:110(item/p) C/guitar-tuner.py.page:111(item/p)
msgid ""
"While the button is still selected, change the <gui>Label</gui> property in "
"the <gui>Widgets</gui> tab to <gui>E</gui>. This will be the low E string."
msgstr ""

#: C/guitar-tuner.c.page:113(item/p) C/guitar-tuner.py.page:114(item/p)
msgid ""
"Switch to the <gui>Signals</gui> tab (inside the <gui>Widgets</gui> tab) and "
"look for the <code>clicked</code> signal of the button. You can use this to "
"connect a signal handler that will be called when the button is clicked by "
"the user. To do this, click on the signal and type <code>on_button_clicked</"
"code> in the <gui>Handler</gui> column and press <key>Return</key>."
msgstr ""

#: C/guitar-tuner.c.page:116(item/p) C/guitar-tuner.py.page:117(item/p)
#: C/guitar-tuner.vala.page:121(item/p)
msgid ""
"Repeat the above steps for the other buttons, adding the next 5 strings with "
"the names <em>A</em>, <em>D</em>, <em>G</em>, <em>B</em>, and <em>e</em>."
msgstr ""

#: C/guitar-tuner.c.page:119(item/p) C/guitar-tuner.py.page:120(item/p)
#: C/guitar-tuner.vala.page:124(item/p)
msgid ""
"Save the UI design (by clicking <guiseq><gui>File</gui><gui>Save</gui></"
"guiseq>) and keep it open."
msgstr ""

#: C/guitar-tuner.c.page:125(section/title)
#: C/guitar-tuner.vala.page:202(section/title)
msgid "Creating the signal handler"
msgstr ""

#: C/guitar-tuner.c.page:126(section/p) C/guitar-tuner.py.page:127(section/p)
msgid ""
"In the UI designer, you made it so that all of the buttons will call the same "
"function, <gui>on_button_clicked</gui>, when they are clicked. We need to add "
"that function in the source file."
msgstr ""

#: C/guitar-tuner.c.page:127(section/p)
msgid ""
"To do this, open <file>main.c</file> while the user interface file is still "
"open. Switch to the <gui>Signals</gui> tab, which you already used to set the "
"signal name. Now take the row where you set the <gui>clicked</gui> signal and "
"drag it into to the source file at a position that is outside any function. "
"The following code will be added to your source file:"
msgstr ""

#: C/guitar-tuner.c.page:130(section/code)
#, no-wrap
msgid ""
"\n"
"void on_button_clicked (GtkWidget* button, gpointer user_data)\n"
"{\n"
"\n"
"}"
msgstr ""

#: C/guitar-tuner.c.page:135(section/p)
msgid ""
"This signal handler has two arguments: a pointer to the <code>GtkWidget</"
"code> that called the function (in our case, always a <code>GtkButton</"
"code>), and a pointer to some \"user data\" that you can define, but which we "
"won't be using here. (You can set the user data by calling "
"<code>gtk_builder_connect_signals</code>; it is normally used to pass a "
"pointer to a data structure that you might need to access inside the signal "
"handler.)"
msgstr ""

#: C/guitar-tuner.c.page:136(section/p) C/guitar-tuner.py.page:135(section/p)
msgid ""
"For now, we'll leave the signal handler empty while we work on writing the "
"code to produce sounds."
msgstr ""

#: C/guitar-tuner.c.page:140(section/title)
#: C/guitar-tuner.cpp.page:117(section/title)
#: C/guitar-tuner.js.page:38(section/title)
#: C/guitar-tuner.py.page:139(section/title)
#: C/guitar-tuner.vala.page:130(section/title)
msgid "GStreamer pipelines"
msgstr "GStreamer-Weiterleitungen"

#: C/guitar-tuner.c.page:141(section/p) C/guitar-tuner.js.page:39(section/p)
#: C/guitar-tuner.py.page:140(section/p)
msgid ""
"GStreamer is GNOME's multimedia framework — you can use it for playing, "
"recording, and processing video, audio, webcam streams and the like. Here, "
"we'll be using it to produce single-frequency tones."
msgstr ""

#: C/guitar-tuner.c.page:142(section/p) C/guitar-tuner.cpp.page:120(section/p)
#: C/guitar-tuner.js.page:40(section/p) C/guitar-tuner.py.page:141(section/p)
msgid ""
"Conceptually, GStreamer works as follows: You create a <em>pipeline</em> "
"containing several processing elements going from the <em>source</em> to the "
"<em>sink</em> (output). The source can be an image file, a video, or a music "
"file, for example, and the output could be a widget or the soundcard."
msgstr ""

#: C/guitar-tuner.c.page:143(section/p) C/guitar-tuner.cpp.page:121(section/p)
#: C/guitar-tuner.js.page:41(section/p) C/guitar-tuner.py.page:142(section/p)
#: C/guitar-tuner.vala.page:133(section/p)
msgid ""
"Between source and sink, you can apply various filters and converters to "
"handle effects, format conversions and so on. Each element of the pipeline "
"has properties which can be used to change its behaviour."
msgstr ""

#: C/guitar-tuner.c.page:145(media/p) C/guitar-tuner.cpp.page:123(media/p)
#: C/guitar-tuner.js.page:43(media/p) C/guitar-tuner.py.page:144(media/p)
#: C/guitar-tuner.vala.page:135(media/p)
msgid "An example GStreamer pipeline."
msgstr "Eine Beispiel-Weiterleitung in GStreamer."

#: C/guitar-tuner.c.page:150(section/title)
#: C/guitar-tuner.py.page:149(section/title)
#: C/guitar-tuner.vala.page:140(section/title)
msgid "Set up the pipeline"
msgstr "Einrichten der Weiterleitung"

#: C/guitar-tuner.c.page:151(section/p) C/guitar-tuner.cpp.page:134(section/p)
#: C/guitar-tuner.py.page:150(section/p)
msgid ""
"In this simple example we will use a tone generator source called "
"<code>audiotestsrc</code> and send the output to the default system sound "
"device, <code>autoaudiosink</code>. We only need to configure the frequency "
"of the tone generator; this is accessible through the <code>freq</code> "
"property of <code>audiotestsrc</code>."
msgstr ""

#: C/guitar-tuner.c.page:153(section/p)
msgid ""
"Insert the following line into <file>main.c</file>, just below the "
"<code>#include &lt;gtk/gtk.h&gt;</code> line:"
msgstr ""

#: C/guitar-tuner.c.page:154(section/code)
#, no-wrap
msgid "#include &lt;gst/gst.h&gt;"
msgstr "#include &lt;gst/gst.h&gt;"

#: C/guitar-tuner.c.page:155(section/p)
msgid ""
"This includes the GStreamer library. You also need to add a line to "
"initialize GStreamer; put the following code on the line above the "
"<code>gtk_init</code> call in the <code>main</code> function:"
msgstr ""

#: C/guitar-tuner.c.page:156(section/code)
#, no-wrap
msgid "gst_init (&amp;argc, &amp;argv);"
msgstr "gst_init (&amp;argc, &amp;argv);"

#: C/guitar-tuner.c.page:157(section/p)
msgid ""
"Then, copy the following function into <file>main.c</file> above the empty "
"<code>on_button_clicked</code> function:"
msgstr ""

#: C/guitar-tuner.c.page:158(section/code)
#, no-wrap
msgid ""
"static void\n"
"play_sound (gdouble frequency)\n"
"{\n"
"\tGstElement *source, *sink;\n"
"\tGstElement *pipeline;\n"
"\n"
"\tpipeline = gst_pipeline_new (\"note\");\n"
"\tsource   = gst_element_factory_make (\"audiotestsrc\",\n"
"\t                                     \"source\");\n"
"\tsink     = gst_element_factory_make (\"autoaudiosink\",\n"
"\t                                     \"output\");\n"
"\n"
"\t/* set frequency */\n"
"\tg_object_set (source, \"freq\", frequency, NULL);\n"
"\n"
"\tgst_bin_add_many (GST_BIN (pipeline), source, sink, NULL);\n"
"\tgst_element_link (source, sink);\n"
"\n"
"\tgst_element_set_state (pipeline, GST_STATE_PLAYING);\n"
"\n"
"\t/* stop it after 500ms */\n"
"\tg_timeout_add (LENGTH, (GSourceFunc) pipeline_stop, pipeline);\n"
"}"
msgstr ""

#: C/guitar-tuner.c.page:184(item/p)
msgid ""
"The first five lines create source and sink GStreamer elements "
"(<code>GstElement</code>), and a pipeline element (which will be used as a "
"container for the other two elements). The pipeline is given the name \"note"
"\"; the source is named \"source\" and is set to the <code>audiotestsrc</"
"code> source; and the sink is named \"output\" and set to the "
"<code>autoaudiosink</code> sink (default sound card output)."
msgstr ""

#: C/guitar-tuner.c.page:187(item/p)
msgid ""
"The call to <code>g_object_set</code> sets the <code>freq</code> property of "
"the source element to <code>frequency</code>, which is passed as an argument "
"to the <code>play_sound</code> function. This is just the frequency of the "
"note in Hertz; some useful frequencies will be defined later on."
msgstr ""

#: C/guitar-tuner.c.page:190(item/p)
msgid ""
"<code>gst_bin_add_many</code> puts the source and sink into the pipeline. The "
"pipeline is a <code>GstBin</code>, which is just an element that can contain "
"multiple other GStreamer elements. In general, you can add as many elements "
"as you like to the pipeline by adding more arguments to "
"<code>gst_bin_add_many</code>."
msgstr ""

#: C/guitar-tuner.c.page:193(item/p)
msgid ""
"Next, <code>gst_element_link</code> is used to connect the elements together, "
"so the output of <code>source</code> (a tone) goes into the input of "
"<code>sink</code> (which is then output to the sound card). "
"<code>gst_element_set_state</code> is then used to start playback, by setting "
"the state of the pipeline to playing (<code>GST_STATE_PLAYING</code>)."
msgstr ""

#: C/guitar-tuner.c.page:200(section/title)
#: C/guitar-tuner.py.page:190(section/title)
msgid "Stopping playback"
msgstr "Die Wiedergabe stoppen"

#: C/guitar-tuner.c.page:201(section/p)
msgid ""
"We don't want to play an annoying tone forever, so the last thing "
"<code>play_sound</code> does is to call <code>g_timeout_add</code>. This sets "
"a timeout for stopping the sound; it waits for <code>LENGTH</code> "
"milliseconds before calling the function <code>pipeline_stop</code>, and will "
"keep calling it until <code>pipeline_stop</code> returns <code>FALSE</code>."
msgstr ""

#: C/guitar-tuner.c.page:202(section/p)
msgid ""
"Now, we'll write the <code>pipeline_stop</code> function which is called by "
"<code>g_timeout_add</code>. Insert the following code <em>above</em> the "
"<code>play_sound</code> function:"
msgstr ""

#: C/guitar-tuner.c.page:203(section/code)
#, no-wrap
msgid ""
"\n"
"#define LENGTH 500 /* Length of playing in ms */\n"
"\n"
"static gboolean\n"
"pipeline_stop (GstElement* pipeline)\n"
"{\n"
"\tgst_element_set_state (pipeline, GST_STATE_PAUSED);\n"
"\tg_object_unref (pipeline);\n"
"\n"
"\treturn FALSE;\n"
"}"
msgstr ""

#: C/guitar-tuner.c.page:214(section/p)
msgid ""
"The call to <code>gst_element_set_state</code> pauses the playback of the "
"pipeline and <code>g_object_unref</code> unreferences the pipeline, "
"destroying it and freeing its memory."
msgstr ""

#: C/guitar-tuner.c.page:218(section/title)
#: C/guitar-tuner.py.page:207(section/title)
msgid "Define the tones"
msgstr ""

#: C/guitar-tuner.c.page:219(section/p)
msgid ""
"We want to play the correct sound when the user clicks a button. First of "
"all, we need to know the frequencies for the six guitar strings, which are "
"defined (at the top of <file>main.c</file>) as follows:"
msgstr ""

#: C/guitar-tuner.c.page:220(section/code)
#, no-wrap
msgid ""
"\n"
"/* Frequencies of the strings */\n"
"#define NOTE_E 329.63\n"
"#define NOTE_A 440\n"
"#define NOTE_D 587.33\n"
"#define NOTE_G 783.99\n"
"#define NOTE_B 987.77\n"
"#define NOTE_e 1318.5"
msgstr ""

#: C/guitar-tuner.c.page:228(section/p) C/guitar-tuner.py.page:221(section/p)
msgid ""
"Now to flesh out the signal handler that we defined earlier, "
"<code>on_button_clicked</code>. We could have connected every button to a "
"different signal handler, but that would lead to a lot of code duplication. "
"Instead, we can use the label of the button to figure out which button was "
"clicked:"
msgstr ""

#: C/guitar-tuner.c.page:229(section/code)
#, no-wrap
msgid ""
"\n"
"/* Callback for the buttons */\n"
"void on_button_clicked (GtkButton* button,\n"
"                        gpointer user_data)\n"
"{\n"
"\tGtkWidget* label = gtk_bin_get_child (GTK_BIN (button));\n"
"\tconst gchar* text = gtk_label_get_label (GTK_LABEL (label));\n"
"\n"
"\tif (g_str_equal (text, _(\"E\")))\n"
"\t    play_sound (NOTE_E);\n"
"\telse if (g_str_equal (text, _(\"A\")))\n"
"\t    play_sound (NOTE_A);\n"
"\telse if (g_str_equal (text, _(\"G\")))\n"
"\t    play_sound (NOTE_G);\n"
"\telse if (g_str_equal (text, _(\"D\")))\n"
"\t    play_sound (NOTE_D);\n"
"\telse if (g_str_equal (text, _(\"B\")))\n"
"\t    play_sound (NOTE_B);\n"
"\telse if (g_str_equal (text, _(\"e\")))\n"
"\t    play_sound (NOTE_e);\n"
"}\n"
msgstr ""

#: C/guitar-tuner.c.page:251(section/p)
msgid ""
"A pointer to the <code>GtkButton</code> that was clicked is passed as an "
"argument (<code>button</code>) to <code>on_button_clicked</code>. We can get "
"the label of that button by using <code>gtk_bin_get_child</code>, and then "
"get the text from that label using <code>gtk_label_get_label</code>."
msgstr ""

#: C/guitar-tuner.c.page:252(section/p)
msgid ""
"The label text is then compared to the notes that we have using "
"<code>g_str_equal</code>, and <code>play_sound</code> is called with the "
"frequency appropriate for that note. This plays the tone; we have a working "
"guitar tuner!"
msgstr ""

#: C/guitar-tuner.c.page:256(section/title)
#: C/guitar-tuner.cpp.page:254(section/title)
#: C/guitar-tuner.vala.page:252(section/title)
#: C/image-viewer.c.page:221(section/title)
#: C/image-viewer.cpp.page:209(section/title)
#: C/image-viewer.vala.page:279(section/title)
#: C/photo-wall.c.page:391(section/title)
msgid "Build and run the application"
msgstr ""

#: C/guitar-tuner.c.page:257(section/p) C/guitar-tuner.vala.page:253(section/p)
#: C/image-viewer.c.page:222(section/p) C/image-viewer.cpp.page:210(section/p)
#: C/image-viewer.vala.page:280(section/p)
msgid ""
"All of the code should now be ready to go. Click <guiseq><gui>Build</"
"gui><gui>Build Project</gui></guiseq> to build everything again, and then "
"<guiseq><gui>Run</gui><gui>Execute</gui></guiseq> to start the application."
msgstr ""

#: C/guitar-tuner.c.page:258(section/p) C/guitar-tuner.cpp.page:256(section/p)
#: C/guitar-tuner.vala.page:254(section/p)
msgid ""
"If you haven't already done so, choose the <file>Debug/src/guitar-tuner</"
"file> application in the dialog that appears. Finally, hit <gui>Run</gui> and "
"enjoy!"
msgstr ""

#: C/guitar-tuner.c.page:262(section/title)
#: C/guitar-tuner.cpp.page:260(section/title)
#: C/guitar-tuner.js.page:241(section/title)
#: C/guitar-tuner.py.page:239(section/title)
#: C/guitar-tuner.vala.page:258(section/title)
#: C/image-viewer.c.page:227(section/title)
#: C/image-viewer.cpp.page:215(section/title)
#: C/image-viewer.js.page:315(section/title)
#: C/image-viewer.py.page:229(section/title)
#: C/image-viewer.vala.page:287(section/title)
#: C/magic-mirror.vala.page:149(section/title)
#: C/photo-wall.c.page:399(section/title)
#: C/record-collection.js.page:296(section/title)
msgid "Reference Implementation"
msgstr "Referenz-Implementierung"

#: C/guitar-tuner.c.page:263(section/p)
msgid ""
"If you run into problems with the tutorial, compare your code with this <link "
"href=\"guitar-tuner/guitar-tuner.c\">reference code</link>."
msgstr ""

#: C/guitar-tuner.c.page:267(section/title)
#: C/guitar-tuner.cpp.page:273(section/title)
#: C/guitar-tuner.py.page:244(section/title)
#: C/guitar-tuner.vala.page:269(section/title)
#: C/image-viewer.c.page:232(section/title)
#: C/image-viewer.cpp.page:220(section/title)
#: C/image-viewer.js.page:320(section/title)
#: C/image-viewer.py.page:234(section/title)
#: C/image-viewer.vala.page:292(section/title)
msgid "Next steps"
msgstr "Nächste Schritte"

#: C/guitar-tuner.c.page:268(section/p) C/guitar-tuner.cpp.page:274(section/p)
#: C/guitar-tuner.py.page:245(section/p)
#: C/guitar-tuner.vala.page:270(section/p) C/image-viewer.c.page:233(section/p)
#: C/image-viewer.cpp.page:221(section/p) C/image-viewer.js.page:321(section/p)
#: C/image-viewer.py.page:235(section/p)
#: C/image-viewer.vala.page:293(section/p)
msgid "Here are some ideas for how you can extend this simple demonstration:"
msgstr ""

#: C/guitar-tuner.c.page:271(item/p) C/guitar-tuner.cpp.page:277(item/p)
#: C/guitar-tuner.py.page:248(item/p) C/guitar-tuner.vala.page:273(item/p)
msgid "Have the program automatically cycle through the notes."
msgstr ""

#: C/guitar-tuner.c.page:274(item/p) C/guitar-tuner.cpp.page:280(item/p)
#: C/guitar-tuner.py.page:251(item/p) C/guitar-tuner.vala.page:276(item/p)
msgid "Make the program play recordings of real guitar strings being plucked."
msgstr ""

#: C/guitar-tuner.c.page:275(item/p) C/guitar-tuner.cpp.page:281(item/p)
#: C/guitar-tuner.py.page:252(item/p) C/guitar-tuner.vala.page:277(item/p)
msgid ""
"To do this, you would need to set up a more complicated GStreamer pipeline "
"which allows you to load and play back music files. You'll have to choose "
"<link href=\"http://gstreamer.freedesktop.org/documentation/plugins.html"
"\">decoder and demuxer</link> GStreamer elements based on the file format of "
"your recorded sounds — MP3s use different elements to Ogg Vorbis files, for "
"example."
msgstr ""

#: C/guitar-tuner.c.page:276(item/p) C/guitar-tuner.cpp.page:282(item/p)
#: C/guitar-tuner.py.page:253(item/p) C/guitar-tuner.vala.page:278(item/p)
msgid ""
"You might need to connect the elements in more complicated ways too. This "
"could involve using <link href=\"http://gstreamer.freedesktop.org/data/doc/"
"gstreamer/head/manual/html/chapter-intro-basics.html\">GStreamer concepts</"
"link> that we didn't cover in this tutorial, such as <link href=\"http://"
"gstreamer.freedesktop.org/data/doc/gstreamer/head/manual/html/section-intro-"
"basics-pads.html\">pads</link>. You may also find the <cmd>gst-inspect</cmd> "
"command useful."
msgstr ""

#: C/guitar-tuner.c.page:279(item/p) C/guitar-tuner.cpp.page:285(item/p)
#: C/guitar-tuner.py.page:256(item/p) C/guitar-tuner.vala.page:281(item/p)
msgid "Automatically analyze notes that the user plays."
msgstr ""

#: C/guitar-tuner.c.page:280(item/p) C/guitar-tuner.cpp.page:286(item/p)
#: C/guitar-tuner.py.page:257(item/p) C/guitar-tuner.vala.page:282(item/p)
msgid ""
"You could connect a microphone and record sounds from it using an <link href="
"\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-good-"
"plugins/html/gst-plugins-good-plugins-autoaudiosrc.html\">input source</"
"link>. Perhaps some form of <link href=\"http://gstreamer.freedesktop.org/"
"data/doc/gstreamer/head/gst-plugins-good-plugins/html/gst-plugins-good-"
"plugins-plugin-spectrum.html\">spectrum analysis</link> would allow you to "
"figure out what notes are being played?"
msgstr ""

#: C/guitar-tuner.cpp.page:8(info/desc)
msgid ""
"Use GTKmm and GStreamermm to build a simple guitar tuner application for "
"GNOME. Shows off how to use the interface designer."
msgstr ""

#: C/guitar-tuner.cpp.page:38(item/p)
msgid "Basic knowledge of the C++ programming language"
msgstr ""

#: C/guitar-tuner.cpp.page:52(item/p)
msgid ""
"Choose <gui>GTKmm (Simple)</gui> from the <gui>C++</gui> tab, click "
"<gui>Forward</gui>, and fill out your details on the next few pages. Use "
"<file>guitar-tuner</file> as project name and directory."
msgstr ""

#: C/guitar-tuner.cpp.page:55(item/p)
msgid ""
"Make sure that <gui>Configure external packages</gui> is selected. On the "
"next page, select <em>gstreamermm-0.10</em> from the list to include the "
"GStreamermm library in your project."
msgstr ""

#: C/guitar-tuner.cpp.page:59(item/p)
msgid ""
"Click <gui>Finished</gui> and the project will be created for you. Open "
"<file>src/main.cc</file> from the <gui>Project</gui> or <gui>File</gui> tabs. "
"You should see some code which starts with the lines:"
msgstr ""

#: C/guitar-tuner.cpp.page:60(item/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtkmm.h&gt;\n"
"#include &lt;iostream&gt;"
msgstr ""

#: C/guitar-tuner.cpp.page:69(section/p) C/image-viewer.cpp.page:66(section/p)
msgid ""
"This is a very basic C++ code setting up GTKmm. More details are given below; "
"skip this list if you understand the basics:"
msgstr ""

#: C/guitar-tuner.cpp.page:73(item/p)
msgid ""
"The three <code>#include</code> lines at the top include the <code>config</"
"code> (useful autoconf build defines), <code>gtkmm</code> (user interface) "
"and <code>iostream</code> (STL). Functions from these libraries are used in "
"the rest of the code."
msgstr ""

#: C/guitar-tuner.cpp.page:76(item/p)
msgid ""
"The <code>main</code> function creates a new window by opening a GtkBuilder "
"file (<file>src/guitar-tuner.ui</file>, defined a few lines above) and then "
"displaying it in a window. The GtkBuilder file contains a description of a "
"user interface and all of its elements. You can use Anjuta's editor to design "
"GtkBuilder user interfaces."
msgstr ""

#: C/guitar-tuner.cpp.page:79(item/p)
msgid ""
"Afterwards it calls a few functions which set up and then run the "
"application. The <code>kit.run</code> function starts the GTKmm main loop, "
"which runs the user interface and starts listening for events (like clicks "
"and key presses)."
msgstr ""

#: C/guitar-tuner.cpp.page:104(item/p)
msgid ""
"While the button is still selected, change the <gui>Label</gui> property in "
"the <gui>Widgets</gui> tab to <gui>E</gui>. This will be the low E string. "
"Also change the <gui>Name</gui> property to <gui>button_E</gui>. This is the "
"name we will refer to the widget later in code."
msgstr ""

#: C/guitar-tuner.cpp.page:108(item/p)
msgid ""
"Repeat the above steps for the other buttons, adding the next 5 strings with "
"the labels <em>A</em>, <em>D</em>, <em>G</em>, <em>B</em>, and <em>e</em> and "
"the names <em>button_A</em>, etc."
msgstr ""

#: C/guitar-tuner.cpp.page:111(item/p)
msgid ""
"Save the UI design (by clicking <guiseq><gui>File</gui><gui>Save</gui></"
"guiseq>) and close the file."
msgstr ""

#: C/guitar-tuner.cpp.page:118(section/p)
msgid ""
"GStreamer is GNOME's multimedia framework — you can use it for playing, "
"recording, and processing video, audio, webcam streams and the like. Here, "
"we'll be using it to produce single-frequency tones. GStreamermm is the C++ "
"binding to GStreamer which we will use here."
msgstr ""

#: C/guitar-tuner.cpp.page:128(section/title)
msgid "Using GStreamermm"
msgstr "Verwendung von GStreamermm"

#: C/guitar-tuner.cpp.page:129(section/p)
msgid ""
"To use GStreamermm, it has to be initialised. We do that by adding the "
"following line of code next to the <code>Gtk::Main kit(argc, argv);</code> "
"line in <file>main.cc</file>:"
msgstr ""

#: C/guitar-tuner.cpp.page:131(section/code)
#, no-wrap
msgid "\tGst::init (argc, argv);"
msgstr "\tGst::init (argc, argv);"

#: C/guitar-tuner.cpp.page:132(section/p)
msgid ""
"While we are on it, also make sure that the <file>gstreamermm.h</file> is "
"included in <file>main.cc</file> properly."
msgstr ""

#: C/guitar-tuner.cpp.page:136(section/p)
msgid ""
"To simplify the handling of the pipeline we will define a helper class "
"<code>Sound</code>. We do that in <file>main.cc</file> in order to keep this "
"example simple, whereas you might usually want to use a separate file:"
msgstr ""

#: C/guitar-tuner.cpp.page:139(section/code)
#, no-wrap
msgid ""
"\n"
"class Sound\n"
"{\n"
"\tpublic:\n"
"\t\tSound();\n"
"\n"
"\t\tvoid start_playing(double frequency);\n"
"\t\tbool stop_playing();\n"
"\n"
"\tprivate:\n"
"\t\tGlib::RefPtr&lt;Gst::Pipeline&gt; m_pipeline;\n"
"\t\tGlib::RefPtr&lt;Gst::Element&gt; m_source;\n"
"\t\tGlib::RefPtr&lt;Gst::Element&gt; m_sink;\n"
"};\n"
"\n"
"Sound::Sound()\n"
"{\n"
"\tm_pipeline = Gst::Pipeline::create(\"note\");\n"
"\tm_source = Gst::ElementFactory::create_element(\"audiotestsrc\",\n"
"\t                                               \"source\");\n"
"\tm_sink = Gst::ElementFactory::create_element(\"autoaudiosink\",\n"
"\t                                             \"output\");\n"
"\tm_pipeline-&gt;add(m_source);\n"
"\tm_pipeline-&gt;add(m_sink);\n"
"\tm_source-&gt;link(m_sink);\n"
"}\n"
"\n"
"void Sound::start_playing (double frequency)\n"
"{\n"
"\tm_source-&gt;set_property(\"freq\", frequency);\n"
"\tm_pipeline-&gt;set_state(Gst::STATE_PLAYING);\n"
"\n"
"\t/* stop it after 200ms */\n"
"\tGlib::signal_timeout().connect(sigc::mem_fun(*this, &amp;Sound::stop_playing),\n"
"\t                               200);\n"
"}\n"
"\n"
"bool Sound::stop_playing()\n"
"{\n"
"\tm_pipeline-&gt;set_state(Gst::STATE_NULL);\n"
"\treturn false;\n"
"}\n"
msgstr ""

#: C/guitar-tuner.cpp.page:183(section/p)
msgid "The code has the following purpose:"
msgstr "Der Code hat den folgenden Zweck:"

#: C/guitar-tuner.cpp.page:186(item/p)
msgid ""
"In the constructor, source and sink GStreamer elements (<code>Gst::Element</"
"code>) are created, and a pipeline element (which will be used as a container "
"for the other two elements). The pipeline is given the name \"note\"; the "
"source is named \"source\" and is set to the <code>audiotestsrc</code> "
"source; and the sink is named \"output\" and set to the <code>autoaudiosink</"
"code> sink (default sound card output). After the elements have been added to "
"the pipeline and linked together, the pipeline is ready to run."
msgstr ""

#: C/guitar-tuner.cpp.page:189(item/p)
msgid ""
"<code>start_playing</code> sets the source element to play a particular "
"frequency and then starts the pipeline so the sound actually starts playing. "
"As we don't want to have the annoying sound for ages, a timeout is set up to "
"stop the pipeline after 200 ms by calling <code>stop_playing</code>."
msgstr ""

#: C/guitar-tuner.cpp.page:194(item/p)
msgid ""
"In <code>stop_playing</code> which is called when the timeout has elapsed, "
"the pipeline is stopped and as such there isn't any sound output anymore. As "
"GStreamermm uses reference counting through the <code>Glib::RefPtr</code> "
"object, the memory is automatically freed once the <code>Sound</code> class "
"is destroyed."
msgstr ""

#: C/guitar-tuner.cpp.page:202(section/title)
msgid "Connecting the signals"
msgstr "Verbinden der Signale"

#: C/guitar-tuner.cpp.page:203(section/p)
msgid ""
"We want to play the correct sound when the user clicks a button. That means "
"that we have to connect to the signal that is fired when the user clicks the "
"button. We also want to provide information to the called function which tone "
"to play. GTKmm makes that quite easy as we can easily bind information with "
"the <em>sigc</em> library."
msgstr ""

#: C/guitar-tuner.cpp.page:208(section/p)
msgid ""
"The function that is called when the user clicks a button can be pretty "
"simple, as all the interesting stuff is done in the helper class now:"
msgstr ""

#: C/guitar-tuner.cpp.page:210(section/code)
#, no-wrap
msgid ""
"\n"
"static void\n"
"on_button_clicked(double frequency, Sound* sound)\n"
"{\n"
"\tsound-&gt;start_playing (frequency);\n"
"}\n"
msgstr ""

#: C/guitar-tuner.cpp.page:217(section/p)
msgid ""
"It only calls the helper class we defined before to play the correct "
"frequencies. With some more clever code we would also have been able to "
"directly connect to the class without using the function but we will leave "
"that to use as an exercise."
msgstr ""

#: C/guitar-tuner.cpp.page:221(section/p)
msgid ""
"The code to set up the signals should be added to the <code>main()</code> "
"function just after the <code>builder-&gt;get_widget(\"main_window\", "
"main_win);</code> line:"
msgstr ""

#: C/guitar-tuner.cpp.page:223(section/code)
#, no-wrap
msgid ""
"\n"
"Sound sound;\n"
"Gtk::Button* button;\n"
"\n"
"builder-&gt;get_widget(\"button_E\", button);\n"
"button-&gt;signal_clicked().connect (sigc::bind&lt;double, Sound*&gt;(sigc::ptr_fun(&amp;on_button_clicked),\n"
"                                              329.63, &amp;sound));\n"
msgstr ""

#: C/guitar-tuner.cpp.page:233(item/p)
msgid ""
"At first we create an instance of our helper class that we want to use now "
"and declare a variable for the button we want to connect to."
msgstr ""

#: C/guitar-tuner.cpp.page:237(item/p)
msgid ""
"Next, we receive the button object from the user interface that was created "
"out of the user interface file. Remember that <em>button_E</em> is the name "
"we gave to the first button."
msgstr ""

#: C/guitar-tuner.cpp.page:241(item/p)
msgid ""
"Finally we connect the <em>clicked</em> signal. This isn't fully "
"straightforward because this is done in a fully type-safe way and we actually "
"want to pass the frequency and our helper class to the signal handler. "
"<code>sigc::ptr_fun(&amp;on_button_clicked)</code> creates a <em>slot</em> "
"for the <code>on_button_clicked</code> method we defined above. With "
"<code>sigc::bind</code> we are able to pass additional arguments to the slot "
"and in this case we pass the frequency (as double) and our helper class."
msgstr ""

#: C/guitar-tuner.cpp.page:248(section/p)
msgid ""
"Now that we have set up the <em>E</em> button we also need to connect the "
"other buttons according to their frequencies: 440 for A, 587.33 for D, 783.99 "
"for G, 987.77 for B and 1318.5 for the high E. This is done in the same way, "
"just passing a different frequency to the handler."
msgstr ""

#: C/guitar-tuner.cpp.page:255(section/p)
msgid ""
"All of the code should now be ready to go. Click <guiseq><gui>Build</"
"gui><gui>Build Project</gui></guiseq> to build everything again, and then "
"<guiseq><gui>Run</gui><gui>Run</gui></guiseq> to start the application."
msgstr ""

#: C/guitar-tuner.cpp.page:261(section/p)
msgid ""
"If you run into problems with the tutorial, compare your code with this <link "
"href=\"guitar-tuner/guitar-tuner.cc\">reference code</link>."
msgstr ""

#: C/guitar-tuner.cpp.page:265(section/title)
msgid "Further Reading"
msgstr "Weitere Informationen"

#: C/guitar-tuner.cpp.page:266(section/p)
msgid ""
"Many of the things shown above are explained in detail in the <link href="
"\"http://library.gnome.org/devel/gtkmm-tutorial/stable/\">GTKmm book</link> "
"which also covers a lot more key concept for using the full power of GTKmm. "
"You might also be interested in the <link href=\"http://library.gnome.org/"
"devel/gstreamermm/\">GStreamermm reference documentation</link>."
msgstr ""

#: C/guitar-tuner.js.page:6(info/title)
msgctxt "text"
msgid "Guitar tuner (JavaScript)"
msgstr "Gitarrenstimmgerät (JavaScript)"

#: C/guitar-tuner.js.page:16(info/desc)
msgid ""
"Use GTK+ and GStreamer to build a simple guitar tuner application for GNOME."
msgstr ""

#: C/guitar-tuner.js.page:22(synopsis/p)
msgid ""
"In this tutorial we'll construct a small application, Guitar Tuner, using "
"JavaScript and GTK+ and GStreamer. To do and run all the code examples "
"yourself, you need an editor to write code in, terminal and GNOME 3. or "
"higher installed into your computer."
msgstr ""

#: C/guitar-tuner.js.page:24(item/p)
#, fuzzy
#| msgid "An example GStreamer pipeline."
msgid "<link xref=\"#gstreamer\">GStreamer pipelines</link>"
msgstr "Eine Beispiel-Weiterleitung in GStreamer."

#: C/guitar-tuner.js.page:25(item/p) C/weatherAppMain.js.page:22(item/p)
msgid "<link xref=\"#script\">Script for running the application</link>"
msgstr ""

#: C/guitar-tuner.js.page:26(item/p) C/weatherAppMain.js.page:23(item/p)
msgid "<link xref=\"#imports\">Libraries to import</link>"
msgstr ""

#: C/guitar-tuner.js.page:27(item/p) C/weatherAppMain.js.page:24(item/p)
msgid ""
"<link xref=\"#mainwindow\">Creating the main window for the application</link>"
msgstr ""

#: C/guitar-tuner.js.page:28(item/p)
msgid "<link xref=\"#buttons\">Buttons for the tunes</link>"
msgstr ""

#: C/guitar-tuner.js.page:29(item/p)
msgid "<link xref=\"#playSound\">Making the sounds with GStreamer</link>"
msgstr ""

#: C/guitar-tuner.js.page:30(item/p)
msgid "<link xref=\"#connecting\">Connecting buttons to playSound</link>"
msgstr ""

#: C/guitar-tuner.js.page:31(item/p)
msgid "<link xref=\"#guitarjs\">The whole program</link>"
msgstr ""

#: C/guitar-tuner.js.page:32(item/p)
msgid "<link xref=\"#terminal\">Running the application form Terminal</link>"
msgstr ""

#: C/guitar-tuner.js.page:35(page/p) C/weatherApp.js.page:39(page/p)
msgid "After reading this tutorial, you should see this in your screen:"
msgstr ""

#: C/guitar-tuner.js.page:47(section/title)
#: C/helloWorld.js.page:45(section/title)
#: C/weatherAppMain.js.page:32(section/title)
msgid "Script for running the application"
msgstr "Skript zum Ausführen der Anwendung"

#: C/guitar-tuner.js.page:48(section/code)
#: C/weatherAppMain.js.page:33(section/code)
#, no-wrap
msgid ""
"\n"
"  #!/usr/bin/gjs"
msgstr ""

#: C/guitar-tuner.js.page:50(section/p)
msgid ""
"This line tells how to run the script. It needs to be the first line of the "
"code and it needs to be executable. To get the execution rights go to "
"terminal and run in right folder: chmod +x scriptname. Or you can use the "
"graphical filemanager. Just go to the right folder where your code is, right "
"click you code file, choose properties, click the permissions tab and check "
"the box for allow executing file as a program"
msgstr ""

#: C/guitar-tuner.js.page:55(section/code)
#, no-wrap
msgid ""
"\n"
"var Gtk = imports.gi.Gtk;\n"
"var Gst = imports.gi.Gst;\n"
"\n"
"const Mainloop = imports.mainloop;"
msgstr ""

#: C/guitar-tuner.js.page:60(section/p)
msgid ""
"In order to have a working program we need to import a few GObject "
"Introspection -libraries to our use. For working UI, we need Gtk and for "
"Gstreamer to work we need Gst. These are imported in the beginning so we have "
"them at use everywhere. Also in the beginning we import a construct Mainloop "
"to handle the timeout to be used with the tuning sounds."
msgstr ""

#: C/guitar-tuner.js.page:63(section/title)
#: C/helloWorld.js.page:58(section/title)
#: C/weatherAppMain.js.page:48(section/title)
#, fuzzy
#| msgid "Designing the application"
msgid "Creating the main window for the application"
msgstr "Entwurf der Anwendung"

#: C/guitar-tuner.js.page:64(section/code)
#, no-wrap
msgid ""
"\n"
"Gtk.init(null, 0);\n"
"Gst.init(null, 0);\n"
"\n"
"var guitarwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL, border_width: 100});\n"
"guitarwindow.title = \"Guitar Tuner\";\n"
"guitarwindow.connect(\"destroy\", function(){Gtk.main_quit()});\n"
"\n"
"guitarwindow.show();\n"
"Gtk.main();"
msgstr ""

#: C/guitar-tuner.js.page:74(section/p)
msgid ""
"Importing Gtk and Gst is not enough, we need to initialize them in order to "
"get them working. When Gtk and Gst are up and running we need to create the "
"window for the application. Later we are going to put all the buttons for "
"making sounds inside this window. In order to get the window showing, we need "
"to tell it to show and we need also to run the code with the Gtk.main()"
msgstr ""

#: C/guitar-tuner.js.page:77(section/title)
msgid "Buttons for the tunes"
msgstr ""

#: C/guitar-tuner.js.page:78(section/code)
#, no-wrap
msgid ""
"\n"
"var guitar_box = new Gtk.ButtonBox ({orientation: Gtk.Orientation.VERTICAL, spacing: 10});\n"
"\n"
"var E = new Gtk.Button({label: \"E\"});\n"
"var A = new Gtk.Button({label: \"A\"});\n"
"var D = new Gtk.Button({label: \"D\"});\n"
"var G = new Gtk.Button({label: \"G\"});\n"
"var B = new Gtk.Button({label: \"B\"});\n"
"var e = new Gtk.Button({label: \"e\"});\n"
"\n"
"guitar_box.add(E);\n"
"guitar_box.add(A);\n"
"guitar_box.add(D);\n"
"guitar_box.add(G);\n"
"guitar_box.add(B);\n"
"guitar_box.add(e);\n"
"\n"
"guitarwindow.add(guitar_box);\n"
"\n"
"guitar_box.show_all();"
msgstr ""

#: C/guitar-tuner.js.page:98(section/p)
msgid ""
"Because Gtk.Window can only contain a single widget, we need to create "
"something under it to be able to add all the necessary buttons inside it. In "
"this example we use Buttonbox. After creating the Buttonbox we create buttons "
"with necessary labels. After we have the buttons we need to add them to the "
"Buttonbox and the Buttonbox must be added to the Gtk.Window and everything in "
"the Buttonbox must be shown."
msgstr ""

#: C/guitar-tuner.js.page:99(section/p)
msgid ""
"After this stage you should have a window appearing to your screen showing 6 "
"buttons. Right now the buttons don't do anything and we shall address that "
"issue later. Before we can connect the button signals to something we need to "
"code that something first."
msgstr ""

#: C/guitar-tuner.js.page:102(section/title)
msgid "Making the sounds with GStreamer"
msgstr ""

#: C/guitar-tuner.js.page:103(section/code)
#, no-wrap
msgid ""
"\n"
"var frequencies = {E: 329.63, A: 440,\tD: 587.33,\tG: 783.99,\tB: 987.77,\te: 1318.5}\n"
"\n"
"function playSound(frequency){\n"
"  var pipeline = new Gst.Pipeline({name: \"note\"});\n"
"  var source = new Gst.ElementFactory.make(\"audiotestsrc\",\"source\");\n"
"  var sink = new Gst.ElementFactory.make(\"autoaudiosink\",\"output\");\n"
"\n"
"  source.set_property('freq', frequency);\n"
"  pipeline.add(source);\n"
"  pipeline.add(sink);\n"
"  source.link(sink);\n"
"  pipeline.set_state(Gst.State.PLAYING);\n"
"\n"
"  Mainloop.timeout_add(500, function () {\n"
"    pipeline.set_state(Gst.State.PAUSED);\n"
"\t  return false;\n"
"  });\n"
"}"
msgstr ""

#: C/guitar-tuner.js.page:122(section/p)
msgid ""
"The first thing we need to do is decide what tunes we want to make when we "
"push a button. The frequencies list takes care of that. After that we get to "
"actually making the sounds with the function playSound. For function "
"playSound we give as an input a frequency (that we just defined in the "
"frequencies variable). First thing we need to construct is a pipeline, a "
"source and a sink. For the source we set the frequency. To the pipeline we "
"add both the source and the sink and then we tell it to keep playing. As a "
"last thing we use the const Mainloop to get the pipeline to pause after a "
"500ms."
msgstr ""

#: C/guitar-tuner.js.page:123(section/p)
msgid ""
"Now we have the method of playing a tune when clicking a button. Next well "
"make the conncetions between pushing a button and playing the correct sound "
"from that button."
msgstr ""

#: C/guitar-tuner.js.page:126(section/title)
msgid "Connecting buttons to playSound"
msgstr ""

#: C/guitar-tuner.js.page:127(section/code)
#, no-wrap
msgid ""
"\n"
"E.connect(\"clicked\", function() {\n"
"  playSound(frequencies.E);\n"
"});\n"
"A.connect(\"clicked\", function(){\n"
"  playSound(frequencies.A);\n"
"});\n"
"D.connect(\"clicked\", function(){\n"
"  playSound(frequencies.D);\n"
"});\n"
"G.connect(\"clicked\", function(){\n"
"  playSound(frequencies.G);\n"
"});\n"
"B.connect(\"clicked\", function(){\n"
"  playSound(frequencies.B);\n"
"});\n"
"e.connect(\"clicked\", function(){\n"
"  playSound(frequencies.e);\n"
"});"
msgstr ""

#: C/guitar-tuner.js.page:146(section/p)
msgid ""
"The method of connecting button clicks to playSound with the correct tune is "
"by using the connect method of the button widget. So we choose a button to be "
"connected and type <code>E.connect(\"clicked\", function(){playSound"
"(frequencies.E);});</code> The <code>connect</code> tells that when pushing "
"E, something should happen. The <code>clicked</code> tells the type of the "
"signal happening to E and then in the <code>function(){};</code> we call "
"playSound with the correct note that should be associated with the button."
msgstr ""

#: C/guitar-tuner.js.page:156(section/title)
msgid "The whole program"
msgstr ""

#: C/guitar-tuner.js.page:157(section/p)
msgid ""
"So this is what all the parts combined looks like. When running this code, "
"you should be able to tune your guitar(if you have correctly calibrated "
"speakers)."
msgstr ""

#: C/guitar-tuner.js.page:158(section/code)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"var Gtk = imports.gi.Gtk;\n"
"var Gst = imports.gi.Gst;\n"
"\n"
"const Mainloop = imports.mainloop;\n"
"\n"
"Gtk.init(null, 0);\n"
"Gst.init(null, 0);\n"
"\n"
"var guitarwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL, border_width: 100});\n"
"guitarwindow.title = \"Guitar Tuner\";\n"
"guitarwindow.connect(\"destroy\", function(){Gtk.main_quit()});\n"
"\n"
"var guitar_box = new Gtk.ButtonBox ({orientation: Gtk.Orientation.VERTICAL, spacing: 10});\n"
"\n"
"var E = new Gtk.Button({label: \"E\"});\n"
"var A = new Gtk.Button({label: \"A\"});\n"
"var D = new Gtk.Button({label: \"D\"});\n"
"var G = new Gtk.Button({label: \"G\"});\n"
"var B = new Gtk.Button({label: \"B\"});\n"
"var e = new Gtk.Button({label: \"e\"});\n"
"\n"
"var frequencies = {E: 329.63, A: 440,\tD: 587.33,\tG: 783.99,\tB: 987.77,\te: 1318.5}\n"
"\n"
"\n"
"function playSound(frequency){\n"
"  var pipeline = new Gst.Pipeline({name: \"note\"});\n"
"\n"
"  var source = new Gst.ElementFactory.make(\"audiotestsrc\",\"source\");\n"
"  var sink = new Gst.ElementFactory.make(\"autoaudiosink\",\"output\");\n"
"\n"
"  source.set_property('freq', frequency);\n"
"  pipeline.add(source);\n"
"  pipeline.add(sink);\n"
"  source.link(sink);\n"
"  pipeline.set_state(Gst.State.PLAYING);\n"
"\n"
"  Mainloop.timeout_add(500, function () {\n"
"    pipeline.set_state(Gst.State.PAUSED);\n"
"\t  return false;\n"
"});\n"
"}\n"
"\n"
"E.connect(\"clicked\", function() {\n"
"  playSound(frequencies.E);\n"
"});\n"
"A.connect(\"clicked\", function(){\n"
"  playSound(frequencies.A);\n"
"});\n"
"D.connect(\"clicked\", function(){\n"
"  playSound(frequencies.D);\n"
"});\n"
"G.connect(\"clicked\", function(){\n"
"  playSound(frequencies.G);\n"
"});\n"
"B.connect(\"clicked\", function(){\n"
"  playSound(frequencies.B);\n"
"});\n"
"e.connect(\"clicked\", function(){\n"
"  playSound(frequencies.e);\n"
"});\n"
"\n"
"guitar_box.add(E);\n"
"guitar_box.add(A);\n"
"guitar_box.add(D);\n"
"guitar_box.add(G);\n"
"guitar_box.add(B);\n"
"guitar_box.add(e);\n"
"\n"
"guitarwindow.add(guitar_box);\n"
"\n"
"guitar_box.show_all();\n"
"guitarwindow.show();\n"
"Gtk.main();"
msgstr ""

#: C/guitar-tuner.js.page:236(section/title)
msgid "Running the application form Terminal"
msgstr "Die Anwendung im Terminal ausführen"

#: C/guitar-tuner.js.page:237(section/p)
msgid ""
"To run this application open Terminal, go to the folder where your "
"application is stored and then run"
msgstr ""

#: C/guitar-tuner.js.page:237(section/screen)
#, no-wrap
msgid " <output style=\"prompt\">$ </output><input> GJS_PATH=`pwd` gjs guitarTuner.js</input> "
msgstr ""

#: C/guitar-tuner.js.page:242(section/p)
msgid ""
"If you run into problems with the tutorial, compare your code with this <link "
"href=\"guitar-tuner/guitar-tuner.js\">reference code</link>."
msgstr ""

#: C/guitar-tuner.py.page:7(info/title)
msgctxt "text"
msgid "Guitar tuner (Python)"
msgstr "Gitarrenstimmgerät (Python)"

#: C/guitar-tuner.py.page:45(item/p)
msgid "Basic knowledge of the Python programming language"
msgstr ""

#: C/guitar-tuner.py.page:59(item/p)
msgid ""
"Choose <gui>PyGTK (automake)</gui> from the <gui>Python</gui> tab, click "
"<gui>Continue</gui>, and fill out your details on the next few pages. Use "
"<file>guitar-tuner</file> as project name and directory."
msgstr ""

#: C/guitar-tuner.py.page:62(item/p)
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. Open "
"<file>src/guitar_tuner.py</file> from the <gui>Project</gui> or <gui>File</"
"gui> tabs. You should see some code which starts with the lines:"
msgstr ""

#: C/guitar-tuner.py.page:63(item/code)
#, no-wrap
msgid ""
"\n"
"from gi.repository import Gtk, GdkPixbuf, Gdk\n"
"import os, sys"
msgstr ""

#: C/guitar-tuner.py.page:71(section/title)
msgid "Run the code for the first time"
msgstr "Erste Ausführung des Codes"

#: C/guitar-tuner.py.page:72(section/p)
msgid ""
"Most of the code in the file is template code. It loads an (empty) window "
"from the user interface description file and shows it. More details are given "
"below; skip this list if you understand the basics:"
msgstr ""

#: C/guitar-tuner.py.page:76(item/p)
msgid ""
"The <code>import</code> lines at the top include the tell Python to load the "
"user interface and system libraries needed."
msgstr ""

#: C/guitar-tuner.py.page:80(item/p)
msgid ""
"A class is declared that will be the main class for our application. In the "
"<code>__init__</code> method the main window is loaded from the GtkBuilder "
"file (<file>src/guitar-tuner.ui</file>) and the signals are connected."
msgstr ""

#: C/guitar-tuner.py.page:83(item/p)
msgid ""
"Connecting signals is how you define what happens when you push a button, or "
"when some other event happens. Here, the <code>destroy</code> method is "
"called (and quits the app) when you close the window."
msgstr ""

#: C/guitar-tuner.py.page:86(item/p)
msgid ""
"The <code>main</code> function is run by default when you start a Python "
"application. It just creates an instance of the main class and starts the "
"main loop to bring up the window."
msgstr ""

#: C/guitar-tuner.py.page:91(section/p)
msgid ""
"This code is ready to be used, so you can run it by clicking "
"<guiseq><gui>Run</gui><gui>Execute</gui></guiseq>."
msgstr ""

#: C/guitar-tuner.py.page:96(section/p)
msgid ""
"A description of the user interface (UI) is contained in the GtkBuilder file. "
"To edit the user interface, open <file>src/guitar_tuner.ui</file>. This will "
"switch to the interface designer. The design window is in the center; widgets "
"and widgets' properties are on the right, and the palette of available "
"widgets is on the left."
msgstr ""

#: C/guitar-tuner.py.page:126(section/title)
msgid "Write the signal handler"
msgstr ""

#: C/guitar-tuner.py.page:128(section/p)
msgid ""
"To do this, open <file>guitar_tuner.py</file> while the user interface file "
"is still open. Switch to the <gui>Signals</gui> tab, which you already used "
"to set the signal name. Now take the row where you set the <gui>clicked</gui> "
"signal and drag it into to the source file inside the class. The following "
"code will be added to your source file:"
msgstr ""

#: C/guitar-tuner.py.page:130(section/code)
#, no-wrap
msgid ""
"\n"
"def on_button_clicked (self, button):\n"
msgstr ""

#: C/guitar-tuner.py.page:134(section/p)
msgid ""
"This signal handler has two arguments: the usual Python class pointer, and "
"the <code>Gtk.Button</code> that called the function."
msgstr ""

#: C/guitar-tuner.py.page:152(section/p)
msgid ""
"Change the import line in <file>guitar_tuner.py</file>, just at the beginning "
"to :"
msgstr ""

#: C/guitar-tuner.py.page:153(section/code)
#, no-wrap
msgid "from gi.repository import Gtk, Gst, GObject "
msgstr ""

#: C/guitar-tuner.py.page:154(section/p)
msgid ""
"The <code>Gst</code> includes the GStreamer library. You also need to "
"initialise GStreamer properly which is done in the <code>main()</code> method "
"with this call added above the <code>app = GUI()</code> line:"
msgstr ""

#: C/guitar-tuner.py.page:157(section/code)
#, no-wrap
msgid "Gst.init_check(sys.argv)"
msgstr ""

#: C/guitar-tuner.py.page:158(section/p)
msgid ""
"Then, copy the following function into the class in <file>guitar_tuner.py</"
"file> somewhere:"
msgstr ""

#: C/guitar-tuner.py.page:159(section/code)
#, no-wrap
msgid ""
"\n"
"def play_sound(self, frequency):\n"
"\tpipeline = Gst.Pipeline(name='note')\n"
"\tsource = Gst.ElementFactory.make('audiotestsrc', 'src')\n"
"\tsink = Gst.ElementFactory.make('autoaudiosink', 'output')\n"
"\n"
"\tsource.set_property('freq', frequency)\n"
"\tpipeline.add(source)\n"
"\tpipeline.add(sink)\n"
"\tsource.link(sink)\n"
"\tpipeline.set_state(Gst.State.PLAYING)\n"
"\n"
"\tGObject.timeout_add(self.LENGTH, self.pipeline_stop, pipeline)"
msgstr ""

#: C/guitar-tuner.py.page:174(item/p)
msgid ""
"The first three lines create source and sink GStreamer elements and a "
"pipeline element (which will be used as a container for the other two "
"elements). The pipeline is given the name \"note\"; the source is named "
"\"source\" and is set to the <code>audiotestsrc</code> source; and the sink "
"is named \"output\" and set to the <code>autoaudiosink</code> sink (default "
"sound card output)."
msgstr ""

#: C/guitar-tuner.py.page:177(item/p)
msgid ""
"The call to <code>source.set_property</code> sets the <code>freq</code> "
"property of the source element to <code>frequency</code>, which was passed as "
"an argument to the <code>play_sound</code> function. This is just the "
"frequency of the note in Hertz; some useful frequencies will be defined later "
"on."
msgstr ""

#: C/guitar-tuner.py.page:180(item/p)
msgid ""
"The next two lines call <code>pipeline.add</code>, putting the source and "
"sink into the pipeline. The pipeline can contain multiple other GStreamer "
"elements. In general, you can add as many elements as you like to the "
"pipeline by calling its <code>add</code> method repeatedly."
msgstr ""

#: C/guitar-tuner.py.page:183(item/p)
msgid ""
"Next <code>pipeline.set_state</code> is used to start playback, by setting "
"the state of the pipeline to playing (<code>Gst.State.PLAYING</code>)."
msgstr ""

#: C/guitar-tuner.py.page:191(section/p)
msgid ""
"We don't want to play an annoying tone forever, so the last thing "
"<code>play_sound</code> does is to call <code>GObject.timeout_add</code>. "
"This sets a timeout for stopping the sound; it waits for <code>LENGTH</code> "
"milliseconds before calling the function <code>pipeline_stop</code>, and will "
"keep calling it until <code>pipeline_stop</code> returns <code>False</code>."
msgstr ""

#: C/guitar-tuner.py.page:192(section/p)
msgid ""
"Now, we'll write the <code>pipeline_stop</code> function which is called by "
"<code>GObject.timeout_add</code>. Insert the following code <em>above</em> "
"the <code>play_sound</code> function:"
msgstr ""

#: C/guitar-tuner.py.page:193(section/code)
#, no-wrap
msgid ""
"\n"
"def pipeline_stop(self, pipeline):\n"
"\tpipeline.set_state(Gst.State.PAUSED)\n"
"\treturn False\n"
msgstr ""

#: C/guitar-tuner.py.page:198(section/p)
msgid ""
"You need to define the <code>LENGTH</code> constant inside the class, so add "
"this code at the beginning of the main class:"
msgstr ""

#: C/guitar-tuner.py.page:200(section/code)
#, no-wrap
msgid ""
"\n"
"LENGTH = 500\n"
msgstr ""

#: C/guitar-tuner.py.page:203(section/p)
msgid ""
"The call to <code>pipeline.set_state</code> pauses the playback of the "
"pipeline."
msgstr ""

#: C/guitar-tuner.py.page:208(section/p)
msgid ""
"We want to play the correct sound when the user clicks a button. First of "
"all, we need to know the frequencies for the six guitar strings, which are "
"defined (at the beginning of the main class) inside a dictionary so we can "
"easily map them to the names of the strings:"
msgstr ""

#: C/guitar-tuner.py.page:210(section/code)
#, no-wrap
msgid ""
"\n"
"# Frequencies of the strings\n"
"frequencies = {\n"
"\t'E': 329.63,\n"
"\t'A': 440,\n"
"\t'D': 587.33,\n"
"\t'G': 783.99,\n"
"\t'B': 987.77,\n"
"\t'e': 1318.5\n"
"}\n"
msgstr ""

#: C/guitar-tuner.py.page:222(section/code)
#, no-wrap
msgid ""
"\n"
"def on_button_clicked(self, button):\n"
"\tlabel = button.get_child()\n"
"\ttext = label.get_label()\n"
"\n"
"\tself.play_sound (self.frequencies[text])\n"
msgstr ""

#: C/guitar-tuner.py.page:229(section/p)
msgid ""
"The button that was clicked is passed as an argument (<code>button</code>) to "
"<code>on_button_clicked</code>. We can get the label of that button by using "
"<code>button.get_child</code>, and then get the text from that label using "
"<code>label.get_label</code>."
msgstr ""

#: C/guitar-tuner.py.page:230(section/p)
msgid ""
"The label text is then used as a key for the dictionary and <code>play_sound</"
"code> is called with the frequency appropriate for that note. This plays the "
"tone; we have a working guitar tuner!"
msgstr ""

#: C/guitar-tuner.py.page:234(section/title)
#: C/image-viewer.js.page:310(section/title)
#: C/image-viewer.py.page:224(section/title)
#: C/record-collection.js.page:291(section/title)
msgid "Run the application"
msgstr "Anwendung ausführen"

#: C/guitar-tuner.py.page:235(section/p)
msgid ""
"All of the code should now be ready to go. Click <guiseq><gui>Run</"
"gui><gui>Execute</gui></guiseq> to start the application. Enjoy!"
msgstr ""

#: C/guitar-tuner.py.page:240(section/p)
msgid ""
"If you run into problems with the tutorial, compare your code with this <link "
"href=\"guitar-tuner/guitar-tuner.py\">reference code</link>."
msgstr ""

#: C/guitar-tuner.vala.page:9(info/desc)
msgid ""
"Use <link href=\"http://developer.gnome.org/platform-overview/stable/gtk\">GTK"
"+</link> and <link href=\"http://developer.gnome.org/platform-overview/stable/"
"gstreamer\">GStreamer</link> to build a simple guitar tuner application for "
"GNOME. Shows off how to use the interface designer."
msgstr ""

#: C/guitar-tuner.vala.page:34(synopsis/p)
msgid ""
"In this tutorial you will create an application which plays tones that you "
"can use to tune a guitar. You will learn how to:"
msgstr ""

#: C/guitar-tuner.vala.page:36(item/p)
msgid ""
"Set up a basic project using the <link xref=\"getting-ready\">Anjuta IDE</"
"link>."
msgstr ""

#: C/guitar-tuner.vala.page:37(item/p)
msgid "Create a simple GUI with <app>Anjuta</app>'s UI designer."
msgstr ""

#: C/guitar-tuner.vala.page:38(item/p)
msgid ""
"Use the <link href=\"http://developer.gnome.org/platform-overview/stable/"
"gstreamer\">GStreamer</link> library to play sounds."
msgstr ""

#: C/guitar-tuner.vala.page:42(item/p) C/image-viewer.vala.page:47(item/p)
msgid ""
"Basic knowledge of the <link href=\"https://live.gnome.org/Vala/Tutorial"
"\">Vala</link> programming language."
msgstr ""

#: C/guitar-tuner.vala.page:43(item/p) C/image-viewer.vala.page:48(item/p)
msgid "An installed copy of <app>Anjuta</app>."
msgstr ""

#: C/guitar-tuner.vala.page:50(section/title)
msgid "Create a project in <app>Anjuta</app>"
msgstr ""

#: C/guitar-tuner.vala.page:54(item/p) C/image-viewer.vala.page:62(item/p)
msgid ""
"Start <app>Anjuta</app> and click <gui>Create a new project</gui> or "
"<guiseq><gui>File</gui><gui>New</gui><gui>Project</gui></guiseq> to open the "
"project wizard."
msgstr ""

#: C/guitar-tuner.vala.page:57(item/p)
msgid ""
"Click on the <gui>Vala</gui> tab and select <gui>GTK+ (Simple)</gui>. Click "
"<gui>Continue</gui>, and fill out your details on the next few pages. Use "
"<file>guitar-tuner</file> as project name and directory."
msgstr ""

#: C/guitar-tuner.vala.page:60(item/p)
msgid ""
"Make sure that <gui>Configure external packages</gui> is switched <gui>ON</"
"gui>. On the next page, select <link href=\"http://valadoc.org/gstreamer-0.10/"
"index.htm\"><em>gstreamer-0.10</em></link> from the list to include the "
"GStreamer library in your project. Click <gui>Continue</gui>"
msgstr ""

#: C/guitar-tuner.vala.page:64(item/p)
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. From the "
"<gui>Project</gui> or <gui>Files</gui> tab, open <file>src/guitar_tuner.vala</"
"file> by double-clicking on it. You should see some code which starts with "
"the lines:"
msgstr ""

#: C/guitar-tuner.vala.page:65(item/code)
#: C/magic-mirror.vala.page:69(item/code)
#, no-wrap
msgid ""
"\n"
"using GLib;\n"
"using Gtk;"
msgstr ""

#: C/guitar-tuner.vala.page:74(section/p)
msgid ""
"The code loads an (empty) window from the user interface description file and "
"displays it. More details are given below; you may choose to skip this list "
"if you understand the basics:"
msgstr ""

#: C/guitar-tuner.vala.page:78(item/p) C/magic-mirror.vala.page:81(item/p)
msgid ""
"The two <code>using</code> lines import namespaces so we don't have to name "
"them explicitly."
msgstr ""

#: C/guitar-tuner.vala.page:81(item/p)
msgid ""
"The constructor of the <code>Main</code> class creates a new window by "
"opening a GtkBuilder file (<file>src/guitar-tuner.ui</file>, defined a few "
"lines above), connecting its signals and then displaying it in a window. This "
"GtkBuilder file contains a description of a user interface and all of its "
"elements. You can use Anjuta's editor to design GtkBuilder user interfaces."
msgstr ""

#: C/guitar-tuner.vala.page:83(note/p)
msgid ""
"Connecting signals is how you define what happens when you push a button, or "
"when some other event happens. Here, the <code>on_destroy</code> function is "
"called (and quits the app) when you close the window."
msgstr ""

#: C/guitar-tuner.vala.page:87(item/p)
msgid ""
"The static <code>main</code> function is run by default when you start a Vala "
"application. It calls a few functions which create the Main class, set up and "
"then run the application. The <code>Gtk.main</code> function starts the GTK "
"main loop, which runs the user interface and starts listening for events "
"(like clicks and key presses)."
msgstr ""

#: C/guitar-tuner.vala.page:91(section/p)
msgid ""
"This code is ready to be used, so you can compile it by clicking "
"<guiseq><gui>Build</gui><gui>Build Project</gui></guiseq> (or press "
"<keyseq><key>Shift</key><key>F7</key></keyseq>). When you do this, a dialog "
"will appear. Change the <gui>Configuration</gui> to <gui>Default</gui> and "
"then click <gui>Execute</gui> to configure the build directory. You only need "
"to do this once, for the first build."
msgstr ""

#: C/guitar-tuner.vala.page:96(section/p)
msgid ""
"A description of the user interface (UI) is contained in the GtkBuilder file "
"<file>src/guitar_tuner.ui</file> defined at the top of the class. To edit the "
"user interface, open <file>src/guitar_tuner.ui</file> by double-clicking on "
"it in the <gui>Project</gui> or <gui>Files</gui> section. This will switch to "
"the interface designer. The design window is in the center; <gui>Widgets</"
"gui> and the widget properties are on the right, and the <gui>Palette</gui> "
"of available widgets is on the left."
msgstr ""

#: C/guitar-tuner.vala.page:98(section/p)
msgid ""
"The layout of every UI in GTK+ is organized using boxes and tables. Let's use "
"a vertical GtkButtonBox here to assign six GtkButtons, one for each of the "
"six guitar strings."
msgstr ""

#: C/guitar-tuner.vala.page:104(item/p)
msgid ""
"In the <gui>Palette</gui> tab, from the <gui>Containers</gui> section, select "
"a <gui>Button Box</gui> (GtkButtonBox) by clicking on the icon. Then click on "
"the design window in the center to place it into the window. A dialog will "
"display where you can set the <gui>Number of items</gui> to <input>6</input>. "
"Then click <gui>Create</gui>."
msgstr ""

#: C/guitar-tuner.vala.page:105(note/p)
msgid ""
"You can also change the <gui>Number of elements</gui> and the "
"<gui>Orientation</gui> in the <gui>General</gui> tab on the right."
msgstr ""

#: C/guitar-tuner.vala.page:109(item/p)
msgid ""
"Now, from the <gui>Control and Display</gui> section of the <gui>Palette</"
"gui> choose a <gui>Button</gui> (GtkButton) by clicking on it. Place it into "
"the first section of the GtkButtonBox by clicking in the first section."
msgstr ""

#: C/guitar-tuner.vala.page:112(item/p)
msgid ""
"While the button is still selected, scroll down in the <gui>General</gui> tab "
"on the right to the <gui>Label</gui> property, and change it to <gui>E</gui>. "
"This will be the low E guitar string."
msgstr ""

#: C/guitar-tuner.vala.page:113(note/p)
msgid ""
"The <gui>General</gui> tab is located in the <gui>Widgets</gui> section on "
"the right."
msgstr ""

#: C/guitar-tuner.vala.page:118(item/p)
msgid ""
"Click on the <gui>Signals</gui> tab in the <gui>Widgets</gui> section on the "
"right, and look for the <code>clicked</code> signal of the button. You can "
"use this to connect a signal handler that will be called when the button is "
"clicked by the user. To do this, click on the signal and type "
"<code>main_on_button_clicked</code> in the <gui>Handler</gui> column and "
"press the <key>Enter</key>."
msgstr ""

#: C/guitar-tuner.vala.page:131(section/p)
msgid ""
"This section will show you how to create the code to produce sounds. <link "
"href=\"http://developer.gnome.org/platform-overview/stable/gstreamer"
"\">GStreamer</link> is GNOME's multimedia framework — you can use it for "
"playing, recording, and processing video, audio, webcam streams and the like. "
"Here, we'll be using it to produce single-frequency tones."
msgstr ""

#: C/guitar-tuner.vala.page:132(section/p)
msgid ""
"Conceptually, GStreamer works as follows: You create a <link href=\"http://"
"gstreamer.freedesktop.org/data/doc/gstreamer/head/manual/html/section-intro-"
"basics-bins.html\"><em>pipeline</em></link> containing several processing "
"elements going from the <em>source</em> to the <em>sink</em> (output). The "
"source can be an image file, a video, or a music file, for example, and the "
"output could be a widget or the soundcard."
msgstr ""

#: C/guitar-tuner.vala.page:141(section/p)
msgid ""
"In this example we will use a tone generator source called "
"<code>audiotestsrc</code> and send the output to the default system sound "
"device, <code>autoaudiosink</code>. We only need to configure the frequency "
"of the tone generator; this is accessible through the <code>freq</code> "
"property of <code>audiotestsrc</code>."
msgstr ""

#: C/guitar-tuner.vala.page:143(section/p)
msgid ""
"We need to add a line to initialize GStreamer; put the following code on the "
"line above the <code>Gtk.init</code> call in the <code>main</code> function:"
msgstr ""

#: C/guitar-tuner.vala.page:144(section/code)
#, no-wrap
msgid "Gst.init (ref args);"
msgstr "Gst::init (argc, argv);"

#: C/guitar-tuner.vala.page:145(section/p)
msgid ""
"Then, copy the following function into <file>guitar_tuner.vala</file> inside "
"our <code>Main</code> class:"
msgstr ""

#: C/guitar-tuner.vala.page:146(section/code)
#, no-wrap
msgid ""
"\n"
"Gst.Element sink;\n"
"Gst.Element source;\n"
"Gst.Pipeline pipeline;\n"
"\n"
"private void play_sound(double frequency)\n"
"{\n"
"\tpipeline = new Gst.Pipeline (\"note\");\n"
"\tsource   = Gst.ElementFactory.make (\"audiotestsrc\",\n"
"\t                                    \"source\");\n"
"\tsink     = Gst.ElementFactory.make (\"autoaudiosink\",\n"
"\t                                    \"output\");\n"
"\n"
"\t/* set frequency */\n"
"\tsource.set (\"freq\", frequency);\n"
"\n"
"\tpipeline.add (source);\n"
"\tpipeline.add (sink);\n"
"\tsource.link (sink);\n"
"\n"
"\tpipeline.set_state (Gst.State.PLAYING);\n"
"\n"
"\t/* stop it after 200ms */\n"
"\tvar time = new TimeoutSource(200);\n"
"\n"
"\ttime.set_callback(() =&gt; {\n"
"\t\tpipeline.set_state (Gst.State.PAUSED);\n"
"\t\treturn false;\n"
"\t});\n"
"\ttime.attach(null);\n"
"}"
msgstr ""

#: C/guitar-tuner.vala.page:180(item/p)
msgid ""
"The first three lines create source and sink GStreamer elements (<link href="
"\"http://valadoc.org/gstreamer-0.10/Gst.Element.html\"><code>Gst.Element</"
"code></link>), and a <link href=\"http://valadoc.org/gstreamer-0.10/Gst."
"Pipeline.html\">pipeline element</link> (which will be used as a container "
"for the other two elements). Those are class variables so they are defined "
"outside the method. The pipeline is given the name \"note\"; the source is "
"named \"source\" and is set to the <code>audiotestsrc</code> source; and the "
"sink is named \"output\" and set to the <code>autoaudiosink</code> sink "
"(default sound card output)."
msgstr ""

#: C/guitar-tuner.vala.page:183(item/p)
msgid ""
"The call to <link href=\"http://valadoc.org/gobject-2.0/GLib.Object.set.html"
"\"><code>source.set</code></link> sets the <code>freq</code> property of the "
"source element to <code>frequency</code>, which is passed in as an argument "
"to the <code>play_sound</code> function. This is just the frequency of the "
"note in Hertz; some useful frequencies will be defined later on."
msgstr ""

#: C/guitar-tuner.vala.page:186(item/p)
msgid ""
"<link href=\"http://valadoc.org/gstreamer-0.10/Gst.Bin.add.html"
"\"><code>pipeline.add</code></link> puts the source and sink into the "
"pipeline. The pipeline is a <link href=\"http://valadoc.org/gstreamer-0.10/"
"Gst.Bin.html\"><code>Gst.Bin</code></link>, which is just an element that can "
"contain multiple other GStreamer elements. In general, you can add as many "
"elements as you like to the pipeline by adding more calls to <code>pipeline."
"add</code>."
msgstr ""

#: C/guitar-tuner.vala.page:189(item/p)
msgid ""
"Next, <link href=\"http://valadoc.org/gstreamer-0.10/Gst.Element.link.html"
"\"><code>sink.link</code></link> is used to connect the elements together, so "
"the output of source (a tone) goes into the input of sink (which is then "
"output to the sound card). <link href=\"http://www.valadoc.org/gstreamer-0.10/"
"Gst.Element.set_state.html\"><code>pipeline.set_state</code></link> is then "
"used to start playback, by setting the <link href=\"http://www.valadoc.org/"
"gstreamer-0.10/Gst.State.html\">state of the pipeline</link> to playing "
"(<code>Gst.State.PLAYING</code>)."
msgstr ""

#: C/guitar-tuner.vala.page:192(item/p)
msgid ""
"We don't want to play an annoying tone forever, so the last thing "
"<code>play_sound</code> does is to add a <link href=\"http://www.valadoc.org/"
"glib-2.0/GLib.TimeoutSource.html\"><code>TimeoutSource</code></link>. This "
"sets a timeout for stopping the sound; it waits for 200 milliseconds before "
"calling a signal handler defined inline that stops and destroys the pipeline. "
"It returns <code>false</code> to remove itself from the timeout, otherwise it "
"would continue to be called every 200 ms."
msgstr ""

#: C/guitar-tuner.vala.page:203(section/p)
msgid ""
"In the UI designer, you made it so that all of the buttons will call the same "
"function, <gui>on_button_clicked</gui>, when they are clicked. Actually we "
"type <gui>main_on_button_clicked</gui> which tells the UI designer that this "
"method is part of our <code>Main</code>. We need to add that function in the "
"source file."
msgstr ""

#: C/guitar-tuner.vala.page:204(section/p)
msgid ""
"To do this, in the user interface file (guitar_tuner.ui) select one of the "
"buttons by clicking on it, then open <file>guitar_tuner.vala</file> (by "
"clicking on the tab in the center). Switch to the <gui>Signals</gui> tab on "
"the right, which you used to set the signal name. Now take the row where you "
"set the <gui>clicked</gui> signal and drag and drop it into to the source "
"file at the beginning of the class. The following code will be added to your "
"source file:"
msgstr ""

#: C/guitar-tuner.vala.page:206(section/code)
#, no-wrap
msgid ""
"\n"
"public void on_button_clicked (Gtk.Button sender) {\n"
"\n"
"}"
msgstr ""

#: C/guitar-tuner.vala.page:211(note/p)
msgid ""
"You can also just type the code at the beginning of the class instead of "
"using the drag and drop."
msgstr ""

#: C/guitar-tuner.vala.page:212(section/p)
msgid ""
"This signal handler has only one argument: the <link href=\"http://valadoc."
"org/gtk+-3.0/Gtk.Widget.html\"><code>Gtk.Widget</code></link> that called the "
"function (in our case, always a <link href=\"http://valadoc.org/gtk+-3.0/Gtk."
"Button.html\"><code>Gtk.Button</code></link>)."
msgstr ""

#: C/guitar-tuner.vala.page:218(section/title)
msgid "Define the signal handler"
msgstr ""

#: C/guitar-tuner.vala.page:219(section/p)
msgid ""
"We want to play the correct sound when the user clicks a button. For this, we "
"flesh out the signal handler which we defined above, <code>on_button_clicked</"
"code>. We could have connected every button to a different signal handler, "
"but that would lead to a lot of code duplication. Instead, we can use the "
"label of the button to figure out which button was clicked:"
msgstr ""

#: C/guitar-tuner.vala.page:220(section/code)
#, no-wrap
msgid ""
"\n"
"public void on_button_clicked (Gtk.Button sender) {\n"
"\tvar label = sender.get_child () as Gtk.Label;\n"
"\tswitch (label.get_label()) {\n"
"\t\tcase \"E\":\n"
"\t\t\tplay_sound (329.63);\n"
"\t\t\tbreak;\n"
"\t\tcase \"A\":\n"
"\t\t\tplay_sound (440);\n"
"\t\t\tbreak;\n"
"\t\tcase \"D\":\n"
"\t\t\tplay_sound (587.33);\n"
"\t\t\tbreak;\n"
"\t\tcase \"G\":\n"
"\t\t\tplay_sound (783.99);\n"
"\t\t\tbreak;\n"
"\t\tcase \"B\":\n"
"\t\t\tplay_sound (987.77);\n"
"\t\t\tbreak;\n"
"\t\tcase \"e\":\n"
"\t\t\tplay_sound (1318);\n"
"\t\t\tbreak;\n"
"\t\tdefault:\n"
"\t\t\tbreak;\n"
"\t}\n"
"}\n"
msgstr ""

#: C/guitar-tuner.vala.page:247(section/p)
msgid ""
"The <code>Gtk.Button</code> that was clicked is passed as an argument "
"(<code>sender</code>) to <code>on_button_clicked</code>. We can get the label "
"of that button by using <code>get_child</code>, and then get the text from "
"that label using <code>get_label</code>."
msgstr ""

#: C/guitar-tuner.vala.page:248(section/p)
msgid ""
"The switch statement compares the label text to the notes that we can play, "
"and <code>play_sound</code> is called with the frequency appropriate for that "
"note. This plays the tone; we have a working guitar tuner!"
msgstr ""

#: C/guitar-tuner.vala.page:259(section/p)
msgid ""
"If you run into problems with the tutorial, compare your code with this <link "
"href=\"guitar-tuner/guitar-tuner.vala\">reference code</link>."
msgstr ""

#: C/guitar-tuner.vala.page:263(section/title)
#: C/magic-mirror.vala.page:156(section/title)
msgid "Further reading"
msgstr "Weitere Informationen"

#: C/guitar-tuner.vala.page:264(section/p)
msgid ""
"To find out more about the Vala programming language you might want to check "
"out the <link href=\"http://live.gnome.org/Vala/Tutorial\">Vala Tutorial</"
"link> and the <link href=\"http://valadoc.org/\">Vala API Documentation</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/hellognome.js.page:64(media)
msgctxt "_"
msgid ""
"external ref='media/hellognomewebapp.png' "
"md5='948efb6148ede3bc6b47b4b0bbe4a74f'"
msgstr ""
"external ref='media/hellognomewebapp.png' "
"md5='948efb6148ede3bc6b47b4b0bbe4a74f'"

#: C/hellognome.js.page:16(info/desc)
msgid "Your first GNOME application!"
msgstr "Ihre erste GNOME-Anwendung!"

#: C/hellognome.js.page:19(page/title)
msgid "1. Hello, GNOME!"
msgstr ""

#: C/hellognome.js.page:21(synopsis/p)
msgid ""
"This tutorial will show you how to write your first GNOME application in "
"JavaScript. You will use JavaScript to write for GNOME the same way you would "
"for the web. Afterwards, you will learn how to use \"native\" widgets, to "
"write applications that look and feel like other GNOME apps."
msgstr ""

#: C/hellognome.js.page:22(note/p)
msgid ""
"Have you gotten GNOME installed on your computer, and <link xref=\"set-up-"
"gedit.js\">gedit</link> set up to write code with? You'll want to do these "
"things first."
msgstr ""

#: C/hellognome.js.page:28(section/title)
msgid "Let's start with a web page"
msgstr ""

#: C/hellognome.js.page:30(section/p)
msgid ""
"Here's some basic HTML, CSS, and JavaScript code. Does this look familiar?"
msgstr ""

#: C/hellognome.js.page:31(section/code)
#, no-wrap
msgid ""
"\n"
"&lt;!DOCTYPE html&gt;\n"
"&lt;html&gt;\n"
"    &lt;head&gt;\n"
"        &lt;title&gt;Hello, GNOME!&lt;/title&gt;\n"
"\n"
"        &lt;!-- Use JavaScript to show a greeting when someone clicks the button --&gt;\n"
"        &lt;script type=\"application/javascript\"&gt;\n"
"        function greeting () {\n"
"            document.getElementById (\"greeting\").innerHTML = (\"O hai!\");\n"
"        }\n"
"        &lt;/script&gt;\n"
"\n"
"        &lt;!-- Very basic CSS style using the GNOME font --&gt;\n"
"        &lt;style type=\"text/css\"&gt;\n"
"            body {\n"
"                font-face: Cantarell, sans-serif;\n"
"                text-align: center; }\n"
"        &lt;/style&gt;\n"
"\n"
"    &lt;/head&gt;\n"
"    &lt;body&gt;\n"
"        &lt;br /&gt; &lt;br /&gt;\n"
"        &lt;button type=\"button\" onclick=\"greeting()\"&gt;Hello, GNOME!&lt;/button&gt;\n"
"\n"
"        &lt;!-- Empty H1 element gets filled in when the button is clicked --&gt;\n"
"        &lt;h1 id=\"greeting\"&gt;&lt;/h1&gt;\n"
"    &lt;/body&gt;\n"
"&lt;/html&gt;\n"
msgstr ""

#: C/hellognome.js.page:62(section/p)
msgid ""
"Let's save this as <file>hellognome.html</file>, and see what it looks like "
"when we run it!"
msgstr ""

#: C/hellognome.js.page:66(section/p)
msgid ""
"You <em>can</em> run the above code by opening <file>hellognome.html</file> "
"in a web browser. But here, we're going to create a GNOME application that "
"runs our web app inside of it, just like you see in the screenshot. You'll be "
"able to resize and maximize the window, and click the X in the corner to "
"close it, just like you'd expect from any other GNOME app. The difference is "
"that this one will run our web code inside of it."
msgstr ""

#: C/hellognome.js.page:67(section/p)
msgid ""
"The best part? We're going to continue to use JavaScript, to write all the "
"parts that make our app work with GNOME. Let's look at the code, and see how "
"it's done!"
msgstr ""

#: C/hellognome.js.page:71(section/title)
msgid "Creating a GNOME window to frame our web app"
msgstr ""

#: C/hellognome.js.page:73(section/p)
msgid ""
"First, we need to tell GNOME that this is a JavaScript application, which "
"uses gjs. Gjs is GNOME's way of turning your JavaScript code into "
"instructions it understands, so this line always has to go at the start of "
"your applications."
msgstr ""

#: C/hellognome.js.page:74(section/code)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
msgstr ""

#: C/hellognome.js.page:77(section/p)
msgid "After that, we need to tell GNOME which libraries we want to import."
msgstr ""

#: C/hellognome.js.page:78(section/code)
#, no-wrap
msgid ""
"\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"const Webkit = imports.gi.WebKit;\n"
msgstr ""

#: C/hellognome.js.page:84(section/p)
msgid ""
"Just like how add-on libraries like jQuery let us do extra things with "
"JavaScript, each of these libraries gives us new capabilities for our GNOME "
"apps:"
msgstr ""

#: C/hellognome.js.page:86(item/p)
msgid ""
"<file>Gtk</file> and <file>Lang</file> are basic parts of any GNOME "
"application, which let you create windows and widgets and tie them together."
msgstr ""

#: C/hellognome.js.page:87(item/p)
msgid ""
"<file>GLib</file> is a helper library, which lets us do things like tell "
"GNOME where the <file>hellognome.html</file> file we created is."
msgstr ""

#: C/hellognome.js.page:88(item/p)
msgid ""
"And <file>Webkit</file> is a web rendering engine, which we'll use to "
"basically create a browser window to open our HTML file with."
msgstr ""

#: C/hellognome.js.page:91(section/p)
#, fuzzy
#| msgid "How to write a Gtk application in C++"
msgid "Now we create the application itself:"
msgstr "Schreiben einer Gtk-Anwendung in C++"

#: C/hellognome.js.page:92(section/code)
#, no-wrap
msgid ""
"\n"
"const HelloGNOME = new Lang.Class ({\n"
"    Name: 'Hello GNOME',\n"
msgstr ""

#: C/hellognome.js.page:96(section/p)
msgid ""
"This will look familiar to you if you've worked with object-oriented "
"JavaScript before. That's right; our whole application is a class called "
"HelloGNOME. And as you can see, we've given it a property that says what its "
"name is."
msgstr ""

#: C/hellognome.js.page:98(section/code)
#, no-wrap
msgid ""
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""

#: C/hellognome.js.page:118(section/p)
msgid ""
"Here's some code you will more or less copy-and-paste for every JavaScript "
"application you build. It creates a new Application, and then binds its "
"activate and startup signals to functions that make the window show itself "
"and build its user interface, respectively."
msgstr ""

#: C/hellognome.js.page:119(section/p)
msgid ""
"What does that mean? Well, everything in a GNOME application sends out a "
"signal when something important happens. A button might send out the clicked "
"signal when you click on it, for instance. Our job is to connect the signals "
"to functions which handle them, and make the things that we want to have "
"happen occur. We do this using each object's connect method, which takes two "
"arguments: The signal we want to handle, and the Lang.bind function, which we "
"have to use to tell connect which function we want to have handle the signal."
msgstr ""

#: C/hellognome.js.page:120(section/p)
msgid ""
"In this case, we want _onActivate to handle the activate signal, and "
"_onStartup to handle the startup signal. _onActivate just tells the window to "
"present itself; so basically, whenever you <keyseq><key>Alt</key> <key>Tab</"
"key></keyseq> to the application it appears, like you would expect it to. "
"_onStartup calls _buildUI, which is the function that creates our user "
"interface and is the next part that we will look at."
msgstr ""

#: C/hellognome.js.page:121(note/p)
msgid ""
"When you copy and paste the above code for your own applications, be sure to "
"change the name to a unique one each time."
msgstr ""

#: C/hellognome.js.page:125(section/title)
msgid "Designing our window's UI"
msgstr ""

#: C/hellognome.js.page:126(section/p)
msgid ""
"In the _buildUI function, we're going to tell GNOME about our window and the "
"things inside it, one at a time. After that, we're going to connect "
"everything together and put it all on display."
msgstr ""

#: C/hellognome.js.page:128(section/code)
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            window_position: Gtk.WindowPosition.CENTER });\n"
msgstr ""

#: C/hellognome.js.page:141(section/p)
msgid ""
"The first object we create is an ApplicationWindow. It needs a title to go in "
"the title bar, and its application property needs to be the application that "
"we created, above. Beyond that, there are various ways of customizing how it "
"looks, which the <link xref=\"GtkApplicationWindow.js\">ApplicationWindow</"
"link> reference page will go into more detail about. As you can see here, we "
"gave it a default height and width (measured in pixels), and told GNOME we "
"want our window to appear in the center of the screen."
msgstr ""

#: C/hellognome.js.page:142(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a webview to show the web app\n"
"        this._webView = new Webkit.WebView ();\n"
"\n"
"        // Put the web app into the webview\n"
"        this._webView.load_uri (GLib.filename_to_uri (GLib.get_current_dir() +\n"
"            \"/hellognome.html\", null));\n"
msgstr ""

#: C/hellognome.js.page:150(section/p)
msgid ""
"Remember how we imported Webkit right at the start? Here we're creating a new "
"instance of a Webkit class called a WebView, which is more or less a browser "
"window you can put inside of your app. After that, we then give it the URI "
"that we want it to load when the application starts up."
msgstr ""

#: C/hellognome.js.page:151(section/p)
msgid ""
"We <em>could</em> just give it a web URI, like <link href=\"http://gnome.org"
"\">http://gnome.org</link>. Instead, here we use a couple of GLib helper "
"functions to tell the WebView where our <file>hellognome.html</file> file is. "
"GLib.get_current_dir returns the directory that our app's running in, and "
"GLib.filename_to_uri turns our file's path and filename into a URI that the "
"WebView's load_uri function understands. (filename_to_uri's second parameter "
"should be null unless you know what it's used for and have a reason for "
"changing it.)"
msgstr ""

#: C/hellognome.js.page:152(section/code)
#, no-wrap
msgid ""
"\n"
"        // Put the webview into the window\n"
"        this._window.add (this._webView);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"});\n"
msgstr ""

#: C/hellognome.js.page:162(section/p)
msgid ""
"Each window can hold one, and only one, widget. Normally, we'd use a "
"container widget like a <link xref=\"grid.js\">Grid</link> to put multiple "
"widgets into, then use the window's add function to add the Grid to it. Here, "
"we just need the WebView, so that's all we add to the window. After that, as "
"the last part of the _buildUI function that creates our window, we tell the "
"window to show itself and its contents."
msgstr ""

#: C/hellognome.js.page:163(section/code)
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new HelloGNOME ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/hellognome.js.page:168(section/p)
msgid ""
"Finally, we create a new instance of our HelloGNOME class, and tell GNOME to "
"run it."
msgstr ""

#: C/hellognome.js.page:172(section/title)
msgid "Running your GNOME application"
msgstr "Ihre GNOME-Anwendung ausführen"

#: C/hellognome.js.page:174(section/p)
msgid ""
"Now that we've created our first GNOME application, it's time to test it out! "
"You don't need to compile your app or install any special software for this; "
"GNOME has gjs built in, to let it run GNOME Shell. Just save <file>hellognome."
"html</file> and our actual application, <file>hellognome.js</file>, to a "
"directory you can get to with the terminal. (They usually open onto your home "
"directory, the one that's called by your username.) After that, open a "
"terminal, go there, and type:"
msgstr ""

#: C/hellognome.js.page:175(section/screen)
#, no-wrap
msgid " <output style=\"prompt\">$ </output>gjs hellognome.js "
msgstr ""

#: C/hellognome.js.page:176(section/p)
msgid ""
"You should see more or less the same screenshot as before, with a button that "
"you can click to make a short message appear."
msgstr ""

#: C/hellognome.js.page:179(note/p)
msgid "You can use the terminal command"
msgstr ""

#: C/hellognome.js.page:180(note/screen)
#, no-wrap
msgid " <output style=\"prompt\">$ </output>cd <var>(directory name)</var> "
msgstr ""

#: C/hellognome.js.page:181(note/p)
msgid ""
"to navigate between directories inside the Terminal, in order to get to where "
"you saved the files. There is also an extension for Nautilus, GNOME's file "
"manager, which lets you right-click anywhere inside it to open a terminal "
"window right there. Check the app you use to install new software (like Add/"
"Remove Programs or the Software Center) for it."
msgstr ""

#: C/hellognome.js.page:188(section/p)
msgid ""
"<link xref=\"02_welcome_to_the_grid.js\">Continue on to the next tutorial</"
"link> to learn how to build \"native\" GNOME applications that look and feel "
"like the others, instead of a webview with HTML code inside. Or take a look "
"at some <link xref=\"beginner.js#samples\">code samples</link>, if you'd like "
"to see example code for each Gtk widget."
msgstr ""

#: C/hellognome.js.page:189(section/p)
msgid ""
"Finally, if you want to just build GNOME applications using JavaScript "
"libraries designed for the web, you can basically stop here and go do that! "
"Take a look at the <link xref=\"scrolledwindow.js\">ScrolledWindow</link> "
"code sample if you'd like to see how to make a WebView widget that can scroll "
"to show parts of a larger web page, and check out <link xref=\"beginner."
"js#tutorials\">the later tutorials</link> if you'd like to see how to create "
"a .desktop file for your application, which will let it appear in your "
"desktop's Activities menu with all your other apps."
msgstr ""

#: C/hellognome.js.page:194(section/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"const Webkit = imports.gi.WebKit;\n"
"\n"
"const HelloGNOME = new Lang.Class ({\n"
"    Name: 'Hello GNOME',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            window_position: Gtk.WindowPosition.CENTER });\n"
"\n"
"        // Create a webview to show the web app\n"
"        this._webView = new Webkit.WebView ();\n"
"\n"
"        // Put the web app into the webview\n"
"        this._webView.load_uri (GLib.filename_to_uri (GLib.get_current_dir() +\n"
"            \"/hellognome.html\", null));\n"
"\n"
"        // Put the webview into the window\n"
"        this._window.add (this._webView);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new HelloGNOME ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/helloWorld.js.page:27(media)
msgctxt "_"
msgid ""
"external ref='media/helloWorld.png' md5='4c88a27211dfd1b33e504c9f78602f2d'"
msgstr ""
"external ref='media/helloWorld.png' md5='4c88a27211dfd1b33e504c9f78602f2d'"

#: C/helloWorld.js.page:8(info/title)
msgctxt "text"
msgid "Hello World (JavaScript)"
msgstr ""

#: C/helloWorld.js.page:23(info/desc)
msgid "A basic \"hello, world\" application"
msgstr ""

#: C/helloWorld.js.page:26(page/title)
msgid "Hello World"
msgstr ""

#: C/helloWorld.js.page:29(synopsis/p)
msgid "This tutorial will demonstrate how to:"
msgstr ""

#: C/helloWorld.js.page:31(item/p)
msgid "create a small \"Hello, World\" application using JavaScript and GTK+"
msgstr ""

#: C/helloWorld.js.page:32(item/p)
msgid "make the <file>.desktop</file> file"
msgstr ""

#: C/helloWorld.js.page:33(item/p)
msgid "how to set up the build system"
msgstr ""

#: C/helloWorld.js.page:41(section/title)
msgid "Create the HelloWorld program"
msgstr ""

#: C/helloWorld.js.page:46(section/p)
msgid "This needs to be the first line of your script:"
msgstr ""

#: C/helloWorld.js.page:47(section/code)
#, no-wrap
msgid "#!/usr/bin/gjs"
msgstr ""

#: C/helloWorld.js.page:48(section/p)
msgid ""
"It tells the script to use <link href=\"https://live.gnome.org/Gjs/\">Gjs</"
"link>. Gjs is a JavaScript binding for GNOME."
msgstr ""

#: C/helloWorld.js.page:53(section/code)
#, no-wrap
msgid ""
"const Lang = imports.lang;\n"
"const Gtk = imports.gi.Gtk;"
msgstr ""
"const Lang = imports.lang;\n"
"const Gtk = imports.gi.Gtk;"

#: C/helloWorld.js.page:55(section/p)
msgid ""
"In order for our script to work with GNOME, we need to import GNOME libraries "
"via GObject Introspection. Here we import the language bindings and GTK+, the "
"library which contains the graphical widgets used to make GNOME applications."
msgstr ""

#: C/helloWorld.js.page:59(section/code)
#, no-wrap
msgid ""
"const Application = new Lang.Class({\n"
"    //A Class requires an explicit Name parameter. This is the Class Name.\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"       //connect to 'activate' and 'startup' signals to handlers.\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   title: \"Hello World!\" });\n"
"    },\n"
"\n"
"    //handler for 'activate' signal\n"
"    _onActivate: function() {\n"
"        //show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    //handler for 'startup' signal\n"
"    _onStartup: function() {\n"
"        this._buildUI();\n"
"    }\n"
"});\n"
msgstr ""

#: C/helloWorld.js.page:91(section/p)
msgid ""
"GtkApplication initializes GTK+. It also connects the <gui>x</gui> button "
"that's automatically generated along with the window to the \"destroy\" "
"signal."
msgstr ""

#: C/helloWorld.js.page:92(section/p)
msgid ""
"We can start building our first window. We do this by creating a variable "
"called <var>_window</var> and assigning it a new Gtk.ApplicationWindow."
msgstr ""

#: C/helloWorld.js.page:93(section/p)
msgid ""
"We give the window a property called <var>title</var>. The title can be any "
"string you want it to be. To be on the safe side, it's best to stick to UTF-8 "
"encoding."
msgstr ""

#: C/helloWorld.js.page:94(section/p)
msgid ""
"Now we have a window which has a title and a working \"close\" button. Let's "
"add the actual \"Hello World\" text."
msgstr ""

#: C/helloWorld.js.page:97(section/title)
#, fuzzy
#| msgid "Closing the window"
msgid "Label for the window"
msgstr "Schließen des Fensters"

#: C/helloWorld.js.page:98(section/code)
#, no-wrap
msgid ""
"// Add a label widget to your window\n"
"this.label = new Gtk.Label({ label: \"Hello World\" });\n"
"this._window.add(this.label);\n"
"this._window.set_default_size(200, 200);"
msgstr ""

#: C/helloWorld.js.page:103(section/p)
msgid ""
"A text label is one of the GTK+ widgets we can use, on account of having "
"imported the GTK+ library. To use it, we create a new variable called label, "
"and assign it a new Gtk.Label. Then we give it properties inside the curly "
"braces {}. In this case, we're setting the text that the label will hold. "
"Finally, we create and run the application:"
msgstr ""

#: C/helloWorld.js.page:105(section/code)
#, no-wrap
msgid ""
"//run the application\n"
"let app = new Application();\n"
"app.application.run(ARGV);"
msgstr ""

#: C/helloWorld.js.page:109(section/p)
msgid ""
"Gtk.ApplicationWindow can only hold one widget at a time. To construct more "
"elaborate programs you need to create a holder widget like Gtk.Grid inside "
"the window, and then add all the other widgets to it."
msgstr ""

#: C/helloWorld.js.page:113(section/title)
msgid "helloWorld.js"
msgstr ""

#: C/helloWorld.js.page:114(section/p)
msgid "The complete file:"
msgstr ""

#: C/helloWorld.js.page:115(section/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Lang = imports.lang;\n"
"const Gtk = imports.gi.Gtk;\n"
"\n"
"const Application = new Lang.Class({\n"
"    //A Class requires an explicit Name parameter. This is the Class Name.\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"       //connect to 'activate' and 'startup' signals to handlers.\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   title: \"Hello World!\" });\n"
"        this._window.set_default_size(200, 200);\n"
"        this.label = new Gtk.Label({ label: \"Hello World\" });\n"
"        this._window.add(this.label);\n"
"    },\n"
"\n"
"    //handler for 'activate' signal\n"
"    _onActivate: function() {\n"
"        //show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    //handler for 'startup' signal\n"
"    _onStartup: function() {\n"
"        this._buildUI();\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application();\n"
"app.application.run(ARGV);\n"
msgstr ""

#: C/helloWorld.js.page:118(section/title)
msgid "Running the application from terminal"
msgstr "Anwendung im Terminal ausführen"

#: C/helloWorld.js.page:119(section/p)
msgid ""
"To run this application, first save it as helloWorld.js. Then open Terminal, "
"go to the folder where your application is stored and run:"
msgstr ""

#: C/helloWorld.js.page:120(section/screen)
#, no-wrap
msgid "<output style=\"prompt\">$ </output><input>gjs helloWorld.js</input>"
msgstr ""

#: C/helloWorld.js.page:126(section/title)
msgid "The <file>.desktop.in</file> file"
msgstr ""

#: C/helloWorld.js.page:127(section/p)
msgid ""
"Running applications from the Terminal is useful at the beginning of the "
"application making process. To have fully working <link href=\"http://library."
"gnome.org/admin/system-admin-guide/stable/mimetypes-9.html.en\">application "
"integration</link> in GNOME 3 requires a desktop launcher. For this you need "
"to create a <file>.desktop</file> file. The <file>.desktop</file> file "
"describes the application name, the used icon and various integration bits. A "
"deeper insight into the <file>.desktop</file> file can be found <link href="
"\"http://developer.gnome.org/desktop-entry-spec/\">here</link>. The <file>."
"desktop.in</file> file will create the <file>.desktop</file>."
msgstr ""

#: C/helloWorld.js.page:130(note/p)
msgid ""
"Before continuing, resave <file>helloWorld.js</file> as <file>helloWorld</"
"file>. Then run this in the command line:"
msgstr ""

#: C/helloWorld.js.page:131(note/screen)
#, no-wrap
msgid "<output style=\"prompt\">$ </output><input>chmod +x helloWorld</input>"
msgstr ""

#: C/helloWorld.js.page:134(section/p)
msgid ""
"The example shows you the minimum requirements for a <code>.desktop.in</code> "
"file."
msgstr ""

#: C/helloWorld.js.page:135(section/code)
#, no-wrap
msgid ""
"[Desktop Entry]\n"
"Version=1.0\n"
"Encoding=UTF-8\n"
"Name=Hello World\n"
"Comment=Say Hello\n"
"Exec=@prefix@/bin/helloWorld\n"
"Icon=application-default-icon\n"
"Terminal=false\n"
"Type=Application\n"
"StartupNotify=true\n"
"Categories=GNOME;GTK;Utility;\n"
msgstr ""

#: C/helloWorld.js.page:137(section/p)
msgid "Now let's go through some parts of the <code>.desktop.in</code> file."
msgstr ""

#: C/helloWorld.js.page:139(item/title) C/toolbar_builder.py.page:94(td/p)
#: C/toolbar_builder.vala.page:77(td/p)
msgid "Name"
msgstr ""

#: C/helloWorld.js.page:139(item/p)
msgid "The application name."
msgstr "Der Anwendungsname."

#: C/helloWorld.js.page:140(item/title)
msgid "Comment"
msgstr ""

#: C/helloWorld.js.page:140(item/p)
msgid "A short description of the application."
msgstr "Eine kurze Beschreibung der Anwendung."

#: C/helloWorld.js.page:141(item/title)
msgid "Exec"
msgstr ""

#: C/helloWorld.js.page:141(item/p)
msgid ""
"Specifies a command to execute when you choose the application from the menu. "
"In this example exec just tells where to find the <file>helloWorld</file> "
"file and the file takes care of the rest."
msgstr ""

#: C/helloWorld.js.page:142(item/title)
msgid "Terminal"
msgstr ""

#: C/helloWorld.js.page:142(item/p)
msgid "Specifies whether the command in the Exec key runs in a terminal window."
msgstr ""

#: C/helloWorld.js.page:145(section/p)
msgid ""
"To put your application into the appropriate category, you need to add the "
"necessary categories to the Categories line. More information on the "
"different categories can be found in the <link href=\"http://standards."
"freedesktop.org/menu-spec/latest/apa.html\">menu specification</link>."
msgstr ""

#: C/helloWorld.js.page:146(section/p)
msgid ""
"In this example we use an existing icon. For a custom icon you need to have "
"a .svg file of your icon, stored in <file>/usr/share/icons/hicolor/scalable/"
"apps</file>. Write the name of your icon file to the .desktop.in file, on "
"line 7. More information on icons in: <link href=\"http://library.gnome.org/"
"admin/system-admin-guide/stable/themes-11.html.en\"> Installing Icons for "
"Themes </link>, <link href=\"https://live.gnome.org/GnomeGoals/AppIcon"
"\">Installing Icons for Themes</link> and <link href=\"http://freedesktop.org/"
"wiki/Specifications/icon-theme-spec\">on freedesktop.org: Specifications/icon-"
"theme-spec</link>."
msgstr ""

#: C/helloWorld.js.page:149(section/title)
msgid "The build system"
msgstr ""

#: C/helloWorld.js.page:150(section/p)
msgid ""
"To make your application truly a part of the GNOME 3 system you need to "
"install it with the help of autotools. The autotools build will install all "
"the necessary files to all the right places."
msgstr ""

#: C/helloWorld.js.page:151(section/p)
msgid "For this you need to have the following files:"
msgstr ""

#: C/helloWorld.js.page:154(section/title)
#: C/weatherAutotools.js.page:39(item/p)
msgid "autogen.sh"
msgstr ""

#: C/helloWorld.js.page:155(section/code)
#, no-wrap
msgid ""
"#!/bin/sh\n"
"\n"
"set -e\n"
"\n"
"test -n \"$srcdir\" || srcdir=`dirname \"$0\"`\n"
"test -n \"$srcdir\" || srcdir=.\n"
"\n"
"olddir=`pwd`\n"
"cd \"$srcdir\"\n"
"\n"
"# This will run autoconf, automake, etc. for us\n"
"autoreconf --force --install\n"
"\n"
"cd \"$olddir\"\n"
"\n"
"if test -z \"$NOCONFIGURE\"; then\n"
"  \"$srcdir\"/configure \"$@\"\n"
"fi\n"
msgstr ""

#: C/helloWorld.js.page:157(section/p)
msgid "After the <file>autogen.sh</file> file is ready and saved, run:"
msgstr ""

#: C/helloWorld.js.page:158(section/screen)
#, no-wrap
msgid "<output style=\"prompt\">$ </output><input>chmod +x autogen.sh</input>"
msgstr ""

#: C/helloWorld.js.page:162(section/title)
#: C/weatherAutotools.js.page:37(item/p)
#: C/weatherAutotools.js.page:63(section/p)
msgid "Makefile.am"
msgstr ""

#: C/helloWorld.js.page:163(section/code)
#, no-wrap
msgid ""
"# The actual runnable program is set to the SCRIPTS primitive.\n"
"# # Prefix bin_ tells where to copy this\n"
"bin_SCRIPTS = helloWorld\n"
"# # List of files to be distributed\n"
"EXTRA_DIST=  \\\n"
"\t$(bin_SCRIPTS)\n"
"#\n"
"#     # The desktop files\n"
"desktopdir = $(datadir)/applications\n"
"desktop_DATA = \\\n"
"\thelloWorld.desktop\n"
msgstr ""

#: C/helloWorld.js.page:167(section/title)
#: C/weatherAutotools.js.page:38(item/p)
#: C/weatherAutotools.js.page:130(section/p)
msgid "configure.ac"
msgstr ""

#: C/helloWorld.js.page:168(section/code)
#, no-wrap
msgid ""
"# This file is processed by autoconf to create a configure script\n"
"AC_INIT([Hello World], 1.0)\n"
"AM_INIT_AUTOMAKE([1.10 no-define foreign dist-xz no-dist-gzip])\n"
"AC_CONFIG_FILES([Makefile helloWorld.desktop])\n"
"AC_OUTPUT\n"
msgstr ""

#: C/helloWorld.js.page:172(section/title)
msgid "README"
msgstr ""

#: C/helloWorld.js.page:173(section/p)
msgid "Information users should read first. This file can be blank."
msgstr ""

#: C/helloWorld.js.page:175(section/p)
msgid ""
"When you have the <file>helloWorld</file>, <file>helloWorld.desktop.in</"
"file>, <file>Makefile.am</file>, <file>configure.ac</file> and <file>autogen."
"sh</file> files with correct information and rights, the <file>README</file> "
"file can include the following instructions:"
msgstr ""

#: C/helloWorld.js.page:176(section/code)
#, no-wrap
msgid ""
"To build and install this program:\n"
"\n"
"./autogen.sh --prefix=/home/your_username/.local\n"
"make install\n"
"\n"
"-------------\n"
"Running the first line above creates the following files:\n"
"\n"
"aclocal.m4\n"
"autom4te.cache\n"
"config.log\n"
"config.status\n"
"configure\n"
"helloWorld.desktop\n"
"install-sh\n"
"missing\n"
"Makefile.in\n"
"Makefile\n"
"\n"
"Running \"make install\", installs the application in /home/your_username/.local/bin\n"
"and installs the helloWorld.desktop file in /home/your_username/.local/share/applications\n"
"\n"
"You can now run the application by typing \"Hello World\" in the Overview.\n"
"\n"
"----------------\n"
"To uninstall, type:\n"
"\n"
"make uninstall\n"
"\n"
"----------------\n"
"To create a tarball type:\n"
"\n"
"make distcheck\n"
"\n"
"This will create hello-world-1.0.tar.xz\n"
"\n"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/image.c.page:21(media) C/image.js.page:20(media) C/image.py.page:23(media)
#: C/image.vala.page:21(media)
msgctxt "_"
msgid "external ref='media/image.png' md5='9416aa74d9d6a857783f7a36338e7a02'"
msgstr "external ref='media/image.png' md5='9416aa74d9d6a857783f7a36338e7a02'"

#: C/image.c.page:7(info/title)
msgctxt "text"
msgid "Image (C)"
msgstr ""

#: C/image.c.page:17(info/desc) C/image.js.page:16(info/desc)
#: C/image.py.page:19(info/desc) C/image.vala.page:17(info/desc)
msgid "A widget displaying an image"
msgstr ""

#: C/image.c.page:20(page/title) C/image.js.page:19(page/title)
#: C/image.py.page:22(page/title) C/image.vala.page:20(page/title)
msgid "Image"
msgstr ""

#: C/image.c.page:22(page/p) C/image.js.page:21(page/p)
#: C/image.py.page:24(page/p) C/image.vala.page:22(page/p)
msgid "This GtkApplication displays an image file from the current directory."
msgstr ""

#: C/image.c.page:23(note/p) C/image.js.page:22(note/p)
#: C/image.vala.page:23(note/p)
msgid ""
"If the image file isn't loaded successfully, the image will contain a "
"\"broken image\" icon. The <file>filename.png</file> needs to be in the "
"current directory for this code to work. Use your favorite picture!"
msgstr ""

#: C/image.c.page:27(page/code)
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *image;\n"
"\n"
"  /*Create a window with a title and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Welcome to GNOME\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 300);\n"
"\n"
"  image = gtk_image_new_from_file (\"gnome-image.png\");\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (image));\n"
"\n"
"  gtk_widget_show_all (GTK_WIDGET (window));\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\",G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""

#: C/image.c.page:34(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkImage.html\">GtkImage</"
"link>"
msgstr ""

#: C/image.js.page:6(info/title)
msgctxt "text"
msgid "Image (JavaScript)"
msgstr "Bild (JavaScript)"

#: C/image.js.page:26(page/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ImageExample = new Lang.Class ({\n"
"\tName: 'Image Example',\n"
"\n"
"\t/* Create the application itself\n"
"\t   This boilerplate code is needed to build any GTK+ application. */\n"
"        _init: function () {\n"
"   \t     this.application = new Gtk.Application ({\n"
"  \t          application_id: 'org.example.jsimage',\n"
"  \t          flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"   \t     });\n"
"\n"
"\t// Connect 'activate' and 'startup' signals to the callback functions\n"
"\tthis.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"\tthis.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"\t},\n"
"\n"
"\t// Callback function for 'activate' signal presents windows when active\n"
"\t_onActivate: function () {\n"
"\t\tthis._window.present ();\n"
"\t},\n"
"\n"
"\t// Callback function for 'startup' signal initializes menus and builds the UI\n"
"\t_onStartup: function () {\n"
"\t\tthis._buildUI ();\n"
"\t},\n"
"\n"
"\n"
"\n"
"\n"
"\t// Build the application's UI\n"
"\t_buildUI: function () {\n"
"\n"
"\t\t// Create the application window\n"
"        \tthis._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                     \t     window_position: Gtk.WindowPosition.CENTER,\n"
"                                                     \t     title: \"Welcome to GNOME\",\n"
"                                                     \t     default_height: 300,\n"
"                                                     \t     default_width: 300 });\n"
"\n"
"\t\t// Create the label\n"
"\t\tthis.jsimage = new Gtk.Image ({file: \"gnome-image.png\"});\n"
"\t\tthis._window.add (this.jsimage);\n"
"\n"
"       \t \t// Show the window and all child widgets\n"
"       \t \tthis._window.show_all();\n"
"\t}\n"
"\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ImageExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/image.js.page:33(item/p)
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Image.html"
"\">Gtk.Image</link>"
msgstr ""

#: C/image.py.page:7(info/title)
msgctxt "text"
msgid "Image (Python)"
msgstr "Bild (Python)"

#: C/image.py.page:26(note/p)
msgid ""
"If the image file is not loaded successfully, the image will contain a "
"\"broken image\" icon. The <file>filename.png</file> needs to be in the "
"current directory for this code to work."
msgstr ""

#: C/image.py.page:35(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # create a window\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(300, 300)\n"
"\n"
"        # create an image\n"
"        image = Gtk.Image()\n"
"        # set the content of the image as the file filename.png\n"
"        image.set_from_file(\"gnome-image.png\")\n"
"        # add the image to the window\n"
"        self.add(image)\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/image.py.page:37(section/p)
msgid ""
"Another way to obtain what we have in the example is to create the image as "
"an instance of another class and add it to the instance of <code>MyWindow</"
"code> in the <code>do_activate(self)</code> method:"
msgstr ""

#: C/image.py.page:38(section/code)
#, no-wrap
msgid ""
"\n"
"# a class to create a window\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(300, 300)\n"
"\n"
"# a class to create an image\n"
"class MyImage(Gtk.Image):\n"
"    def __init__(self):\n"
"        Gtk.Image.__init__(self)\n"
"        self.set_from_file(\"gnome-image.png\")\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        # create an instance of MyWindow\n"
"        win = MyWindow(self)\n"
"        # create an instance of MyImage and add it to the window\n"
"        win.add(MyImage())\n"
"        # show the window and everything on it\n"
"        win.show_all()"
msgstr ""

#: C/image.py.page:65(section/title)
msgid "Useful methods for an Image widget"
msgstr ""

#: C/image.py.page:68(item/p)
msgid ""
"To set a stock icon as image, you can use <code>set_from_stock(stock_id, size)"
"</code> where <code>stock_id</code> is a stock icon such as <code>Gtk."
"STOCK_ABOUT</code> (more can be found at <link href=\"http://developer.gnome."
"org/gtk3/unstable/gtk3-Stock-Items\">Stock Items</link>, with the caveat that "
"they should be modified as above) and <code>size</code> is a stock icon size "
"to be chosen from <code>Gtk.IconSize.INVALID, Gtk.IconSize.MENU, Gtk.IconSize."
"SMALL_TOOLBAR, Gtk.IconSize.LARGE_TOOLBAR, Gtk.IconSize.BUTTON, Gtk.IconSize."
"DND, Gtk.IconSize.DIALOG</code>."
msgstr ""

#: C/image.py.page:69(item/p)
msgid ""
"You can also use <code>set_from_icon_name(icon_name, size)</code>, where "
"<code>icon_name</code> is a stock icon name such as <code>\"gtk-about\"</"
"code> (more can be found as above) and <code>size</code> is as above."
msgstr ""

#: C/image.py.page:70(item/p)
msgid ""
"To load an image over a network use <code>set_from_pixbuf(pixbuf)</code>, "
"where <code>pixbuf</code> is a <link href=\"http://developer.gnome.org/gdk-"
"pixbuf/unstable//index.html\">GdkPixbuf</link>."
msgstr ""

#: C/image.py.page:71(item/code)
#, no-wrap
msgid ""
"\n"
"from gi.repository import Gtk\n"
"from gi.repository import GdkPixbuf\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # create a window\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(300, 300)\n"
"\n"
"        # create a pixbuf from file filename=\"gnome-image.png\", with width=32\n"
"        # and height=64 amd boolean preserve_aspect_ratio=False.\n"
"        pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(\"gnome-image.png\", 64, 128, False)\n"
"\n"
"        # create an image\n"
"        image = Gtk.Image()\n"
"        # set the content of the image as the pixbuf\n"
"        image.set_from_pixbuf(pixbuf)\n"
"        # add the image to the window\n"
"        self.add(image)"
msgstr ""

#: C/image.py.page:92(item/p)
msgid ""
"If <code>preserve_aspect_ratio=True</code> we can use "
"<code>new_from_file_at_size(filename, width, height)</code>. If <code>width</"
"code> or <code>height</code> is <code>-1</code>, it is not constrained."
msgstr ""

#: C/image.py.page:93(item/p)
msgid ""
"For loading from an input stream, see <code>new_from_stream()</code> and "
"<code>new_from_stream_at_scale()</code> in the documentation"
msgstr ""

#: C/image.vala.page:7(info/title)
msgctxt "text"
msgid "Image (Vala)"
msgstr ""

#: C/image.vala.page:26(page/code)
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Welcome to GNOME\");\n"
"\n"
"\t\tvar image = new Gtk.Image ();\n"
"\t\timage.set_from_file (\"gnome-image.png\");\n"
"\t\tthis.add (image);\n"
"\t\tthis.set_default_size (300, 300);\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/image.vala.page:31(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Application.html"
"\">GtkApplication</link>"
msgstr ""

#: C/image.vala.page:32(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ApplicationWindow.html"
"\">GtkApplicationWindow</link>"
msgstr ""

#: C/image.vala.page:33(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Image.html\">GtkImage</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/image-viewer.c.page:38(media) C/image-viewer.cpp.page:36(media)
#: C/image-viewer.js.page:46(media) C/image-viewer.py.page:45(media)
#: C/image-viewer.vala.page:53(media)
msgctxt "_"
msgid ""
"external ref='media/image-viewer.png' md5='7720360611243b14283b83527be968c2'"
msgstr "@@image: 'media/image-viewer.png'; md5=7720360611243b14283b83527be968c2"

#: C/image-viewer.c.page:7(info/title)
msgctxt "text"
msgid "Image viewer (C)"
msgstr "Bildbetrachter (C)"

#: C/image-viewer.c.page:10(info/desc)
msgid "A little bit more than a simple \"Hello world\" Gtk application."
msgstr ""

#: C/image-viewer.c.page:28(page/title) C/image-viewer.cpp.page:26(page/title)
#: C/image-viewer.js.page:28(page/title) C/image-viewer.py.page:28(page/title)
#: C/image-viewer.vala.page:36(page/title)
msgid "Image viewer"
msgstr "Bildbetrachter"

#: C/image-viewer.c.page:31(synopsis/p) C/image-viewer.cpp.page:29(synopsis/p)
#: C/message-board.c.page:28(synopsis/p)
#: C/record-collection.js.page:31(synopsis/p)
msgid "In this tutorial, you will learn:"
msgstr "In diesem Tutorial lernen Sie, wie:"

#: C/image-viewer.c.page:33(item/p)
msgid "Some basic concepts of C/GObject programming"
msgstr ""

#: C/image-viewer.c.page:34(item/p)
msgid "How to write a Gtk application in C"
msgstr ""

#: C/image-viewer.c.page:48(item/p)
msgid ""
"Choose <gui>GTK+ (Simple)</gui> from the <gui>C</gui> tab, click "
"<gui>Continue</gui>, and fill out your details on the next few pages. Use "
"<file>image-viewer</file> as project name and directory."
msgstr ""

#: C/image-viewer.c.page:51(item/p)
msgid ""
"Make sure that <gui>Use GtkBuilder for user interface</gui> is disabled as we "
"will create the UI manually in this tutorial. Check the <link xref=\"guitar-"
"tuner.c\">Guitar-Tuner</link> tutorial if you want to learn how to use the "
"interface builder."
msgstr ""

#: C/image-viewer.c.page:66(section/p)
msgid ""
"C is a rather verbose language, so don't be surprised that the file contains "
"quite a lot of code. Most of it is template code. It loads an (empty) window "
"and shows it. More details are given below; skip this list if you understand "
"the basics:"
msgstr ""

#: C/image-viewer.c.page:73(item/p)
msgid ""
"The <code>create_window</code> function creates a new (empty) window and "
"connects a signal to exit the application when that window is closed."
msgstr ""

#: C/image-viewer.c.page:89(section/title)
#: C/image-viewer.cpp.page:86(section/title)
#: C/image-viewer.vala.page:138(section/title)
msgid "Creating the user interface"
msgstr "Erstellen der Benutzeroberfläche"

#: C/image-viewer.c.page:90(section/p)
msgid ""
"Now we will bring life into the empty window. GTK organizes the user "
"interface with <code>GtkContainer</code>s that can contain other widgets and "
"even other containers. Here we will use the simplest available container, a "
"<code>GtkBox</code>:"
msgstr ""

#: C/image-viewer.c.page:93(section/code)
#, no-wrap
msgid ""
"\n"
"static GtkWidget*\n"
"create_window (void)\n"
"{\n"
"\tGtkWidget *window;\n"
"\tGtkWidget *button;\n"
"\tGtkWidget *image;\n"
"\tGtkWidget *box;\n"
"\n"
"\t/* Set up the UI */\n"
"\twindow = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n"
"\tgtk_window_set_title (GTK_WINDOW (window), \"image-viewer-c\");\n"
"\n"
"\tbox = gtk_box_new (GTK_ORIENTATION_VERTICAL, 5);\n"
"\tbutton = gtk_button_new_with_label (_(\"Open image\"));\n"
"\timage = gtk_image_new ();\n"
"\n"
"\tgtk_box_pack_start (GTK_BOX (box), image, TRUE, TRUE, 0);\n"
"\tgtk_box_pack_start (GTK_BOX (box), button, FALSE, FALSE, 0);\n"
"\n"
"\tgtk_container_add (GTK_CONTAINER (window), box);\n"
"\n"
"\t/* Connect signals */\n"
"\n"
"\t/* Show open dialog when opening a file */\n"
"\tg_signal_connect (button, \"clicked\", G_CALLBACK (on_open_image), image);\n"
"\n"
"\t/* Exit when the window is closed */\n"
"\tg_signal_connect (window, \"destroy\", G_CALLBACK (gtk_main_quit), NULL);\n"
"\n"
"\treturn window;\n"
"}\n"
msgstr ""

#: C/image-viewer.c.page:128(item/p)
msgid ""
"The first lines create the widgets we want to use: a button for opening up an "
"image, the image view widget itself and the box we will use as a container. "
"The macros like <code>GTK_BOX</code> are used for dynamic type checking and "
"casting which is needed as C doesn't support object-orientation out-of-the-"
"box."
msgstr ""

#: C/image-viewer.c.page:133(item/p)
msgid ""
"The calls to <code>gtk_box_pack_start</code> add the two widgets to the box "
"and define their behaviour. The image will expand into any available space "
"while the button will just be as big as needed. You will notice that we don't "
"set explicit sizes on the widgets. In GTK this is usually not needed as it "
"makes it much easier to have a layout that looks good in different window "
"sizes. Next, the box is added to the window."
msgstr ""

#: C/image-viewer.c.page:139(item/p)
msgid ""
"We need to define what happens when the user clicks on the button. GTK uses "
"the concept of <em>signals</em>. When the button is clicked, it fires the "
"<em>clicked</em> signal, which we can connect to some action. This is done "
"using the <code>g_signal_connect</code> function which tells GTK to call the "
"<code>on_image_open</code> function when the button is clicked and to pass "
"the image as an additional argument to that function. We will define the "
"<em>callback</em> in the next section."
msgstr ""

#: C/image-viewer.c.page:144(item/p)
msgid ""
"The last <code>g_signal_connect()</code> makes sure that the application "
"exits when the window is closed."
msgstr ""

#: C/image-viewer.c.page:147(item/p)
msgid ""
"As a last step, make sure to replace the <code>gtk_widget_show</code> call in "
"the <code>main()</code> function by <code>gtk_widget_show_all()</code> to "
"show the window and all the widgets it contains."
msgstr ""

#: C/image-viewer.c.page:154(section/title)
#: C/image-viewer.cpp.page:141(section/title)
#: C/image-viewer.vala.page:209(section/title)
msgid "Showing the image"
msgstr "Bildanzeige"

#: C/image-viewer.c.page:155(section/p)
msgid ""
"We will now define the signal handler for the <em>clicked</em> signal or the "
"button we mentioned before. Add this code before the <code>create_window()</"
"code> method."
msgstr ""

#: C/image-viewer.c.page:158(section/code)
#, no-wrap
msgid ""
"\n"
"static void\n"
"on_open_image (GtkButton* button, gpointer user_data)\n"
"{\n"
"\tGtkWidget *image = GTK_WIDGET (user_data);\n"
"\tGtkWidget *toplevel = gtk_widget_get_toplevel (image);\n"
"\tGtkFileFilter *filter = gtk_file_filter_new ();\n"
"\tGtkWidget *dialog = gtk_file_chooser_dialog_new (_(\"Open image\"),\n"
"\t                                                 GTK_WINDOW (toplevel),\n"
"\t                                                 GTK_FILE_CHOOSER_ACTION_OPEN,\n"
"\t                                                 GTK_STOCK_OK, GTK_RESPONSE_ACCEPT,\n"
"\t                                                 GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,\n"
"\t                                                 NULL);\n"
"\n"
"\tgtk_file_filter_add_pixbuf_formats (filter);\n"
"\tgtk_file_chooser_add_filter (GTK_FILE_CHOOSER (dialog),\n"
"\t                             filter);\n"
"\n"
"\tswitch (gtk_dialog_run (GTK_DIALOG (dialog)))\n"
"\t{\n"
"\t\tcase GTK_RESPONSE_ACCEPT:\n"
"\t\t{\n"
"\t\t\tgchar *filename =\n"
"\t\t\t\tgtk_file_chooser_get_filename (GTK_FILE_CHOOSER (dialog));\n"
"\t\t\tgtk_image_set_from_file (GTK_IMAGE (image), filename);\n"
"\t\t\tbreak;\n"
"\t\t}\n"
"\t\tdefault:\n"
"\t\t\tbreak;\n"
"\t}\n"
"\tgtk_widget_destroy (dialog);\n"
"}\n"
msgstr ""

#: C/image-viewer.c.page:191(section/p) C/image-viewer.cpp.page:177(section/p)
#: C/image-viewer.js.page:282(section/p) C/image-viewer.py.page:196(section/p)
msgid ""
"This is a bit more complicated than anything we've attempted so far, so let's "
"break it down:"
msgstr ""

#: C/image-viewer.c.page:193(item/p)
msgid ""
"The first argument of the signal is always the widget that sent the signal. "
"Sometimes other arguments related to the signal come after that, but "
"<em>clicked</em> doesn't have any. Next is the <code>user_data</code> "
"argument which is a pointer to the data we passed when connecting the signal. "
"In this case it is our <code>GtkImage</code> object."
msgstr ""

#: C/image-viewer.c.page:199(item/p)
msgid ""
"The next interesting line is where the dialog for choosing the file is "
"created using <code>gtk_file_chooser_dialog_new</code>. The function takes "
"the title of the dialog, the parent window of the dialog and several options "
"like the number of buttons and their corresponding values."
msgstr ""

#: C/image-viewer.c.page:203(item/p) C/image-viewer.cpp.page:185(item/p)
#: C/image-viewer.js.page:289(item/p) C/image-viewer.py.page:203(item/p)
msgid ""
"Notice that we are using <em>stock</em> button names from Gtk, instead of "
"manually typing \"Cancel\" or \"Open\". The advantage of using stock names is "
"that the button labels will already be translated into the user's language."
msgstr ""

#: C/image-viewer.c.page:206(item/p)
msgid ""
"The next two lines restrict the <gui>Open</gui> dialog to only display files "
"which can be opened by GtkImage. A filter object is created first; we then "
"add all kinds of files supported by <code>GdkPixbuf</code> (which includes "
"most image formats like PNG and JPEG) to the filter. Finally, we set this "
"filter to be the <gui>Open</gui> dialog's filter."
msgstr ""

#: C/image-viewer.c.page:209(item/p)
msgid ""
"<code>gtk_dialog_run</code> displays the <gui>Open</gui> dialog. The dialog "
"will wait for the user to choose an image; when they do, "
"<code>gtk_dialog_run</code> will return the value <code>GTK_RESPONSE_ACCEPT</"
"code> (it would return <code>GTK_RESPONSE_CANCEL</code> if the user clicked "
"<gui>Cancel</gui>). The <code>switch</code> statement tests for this."
msgstr ""

#: C/image-viewer.c.page:211(item/p)
msgid ""
"Assuming that the user did click <gui>Open</gui>, the next line sets the "
"<code>file</code> property of the GtkImage to the filename of the image "
"selected by the user. The GtkImage will then load and display the chosen "
"image."
msgstr ""

#: C/image-viewer.c.page:214(item/p)
msgid ""
"In the final line of this method, we destroy the <gui>Open</gui> dialog "
"because we don't need it any more. Destroying automatically hides the dialog."
msgstr ""

#: C/image-viewer.c.page:223(section/p) C/image-viewer.cpp.page:211(section/p)
msgid ""
"If you haven't already done so, choose the <file>Debug/src/image-viewer</"
"file> application in the dialog that appears. Finally, hit <gui>Run</gui> and "
"enjoy!"
msgstr ""

#: C/image-viewer.c.page:228(section/p)
msgid ""
"If you run into problems with the tutorial, compare your code with this <link "
"href=\"image-viewer/image-viewer.c\">reference code</link>."
msgstr ""

#: C/image-viewer.c.page:236(item/p) C/image-viewer.cpp.page:224(item/p)
#: C/image-viewer.js.page:324(item/p) C/image-viewer.py.page:238(item/p)
#: C/image-viewer.vala.page:297(item/p)
msgid ""
"Have the user select a directory rather than a file, and provide controls to "
"cycle through all of the images in a directory."
msgstr ""

#: C/image-viewer.c.page:239(item/p) C/image-viewer.cpp.page:227(item/p)
#: C/image-viewer.js.page:327(item/p) C/image-viewer.py.page:241(item/p)
#: C/image-viewer.vala.page:300(item/p)
msgid ""
"Apply random filters and effects to the image when it is loaded and allow the "
"user to save the modified image."
msgstr ""

#: C/image-viewer.c.page:240(item/p) C/image-viewer.cpp.page:228(item/p)
#: C/image-viewer.js.page:328(item/p) C/image-viewer.py.page:242(item/p)
#: C/image-viewer.vala.page:301(item/p)
msgid ""
"<link href=\"http://www.gegl.org/api.html\">GEGL</link> provides powerful "
"image manipulation capabilities."
msgstr ""

#: C/image-viewer.c.page:243(item/p) C/image-viewer.cpp.page:231(item/p)
#: C/image-viewer.js.page:331(item/p) C/image-viewer.py.page:245(item/p)
#: C/image-viewer.vala.page:304(item/p)
msgid ""
"Allow the user to load images from network shares, scanners, and other more "
"complicated sources."
msgstr ""

#: C/image-viewer.c.page:244(item/p) C/image-viewer.cpp.page:232(item/p)
#: C/image-viewer.js.page:332(item/p) C/image-viewer.py.page:246(item/p)
#: C/image-viewer.vala.page:305(item/p)
msgid ""
"You can use <link href=\"http://library.gnome.org/devel/gio/unstable/\">GIO</"
"link> to handle network file tranfers and the like, and <link href=\"http://"
"library.gnome.org/devel/gnome-scan/unstable/\">GNOME Scan</link> to handle "
"scanning."
msgstr ""

#: C/image-viewer.cpp.page:8(info/desc)
msgid "A little bit more than a simple \"Hello world\" GTKmm application."
msgstr ""

#: C/image-viewer.cpp.page:31(item/p)
msgid "Some basic concepts of C++/GObject programming"
msgstr ""

#: C/image-viewer.cpp.page:32(item/p)
msgid "How to write a Gtk application in C++"
msgstr "Schreiben einer Gtk-Anwendung in C++"

#: C/image-viewer.cpp.page:46(item/p)
msgid ""
"Choose <gui>GTKmm (Simple)</gui> from the <gui>C++</gui> tab, click "
"<gui>Forward</gui>, and fill out your details on the next few pages. Use "
"<file>image-viewer</file> as project name and directory."
msgstr ""

#: C/image-viewer.cpp.page:49(item/p)
msgid ""
"Make sure that <gui>Use GtkBuilder for user interface</gui> is disabled as we "
"will create the UI manually in this tutorial. Check the <link xref=\"guitar-"
"tuner.cpp\">Guitar-Tuner</link> tutorial if you want to learn how to use the "
"interface builder."
msgstr ""

#: C/image-viewer.cpp.page:54(item/p)
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. Open "
"<file>src/main.cc</file> from the <gui>Project</gui> or <gui>File</gui> tabs. "
"You should see some code which starts with the lines:"
msgstr ""

#: C/image-viewer.cpp.page:55(item/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtkmm.h&gt;\n"
"#include &lt;iostream&gt;\n"
"\n"
"#include \"config.h\"&gt;"
msgstr ""

#: C/image-viewer.cpp.page:69(item/p)
msgid ""
"The three <code>#include</code> lines at the top include the <code>config</"
"code> (useful autoconf build defines), <code>gtkmm</code> (user interface) "
"and <code>iostream</code> (C++-STL) libraries. Functions from these libraries "
"are used in the rest of the code."
msgstr ""

#: C/image-viewer.cpp.page:72(item/p)
msgid ""
"The <code>main</code> function creates a new (empty) window and sets the "
"window title."
msgstr ""

#: C/image-viewer.cpp.page:75(item/p)
msgid ""
"The <code>kit::run()</code> call starts the GTKmm main loop, which runs the "
"user interface and starts listening for events (like clicks and key presses). "
"As we give the window as an argument to that function, the application will "
"automatically exit when that window is closed."
msgstr ""

#: C/image-viewer.cpp.page:87(section/p)
msgid ""
"Now we will bring life into the empty window. GTKmm organizes the user "
"interface with <code>Gtk::Container</code>s that can contain other widgets "
"and even other containers. Here we will use the simplest available container, "
"a <code>Gtk::Box</code>:"
msgstr ""

#: C/image-viewer.cpp.page:90(section/code)
#, no-wrap
msgid ""
"\n"
"int\n"
"main (int argc, char *argv[])\n"
"{\n"
"\tGtk::Main kit(argc, argv);\n"
"\n"
"\tGtk::Window main_win;\n"
"\tmain_win.set_title (\"image-viewer-cpp\");\n"
"\n"
"\tGtk::Box* box = Gtk::manage(new Gtk::Box());\n"
"\tbox-&gt;set_orientation (Gtk::ORIENTATION_VERTICAL);\n"
"\tbox-&gt;set_spacing(6);\n"
"\tmain_win.add(*box);\n"
"\n"
"\timage = Gtk::manage(new Gtk::Image());\n"
"\tbox-&gt;pack_start (*image, true, true);\n"
"\n"
"\tGtk::Button* button = Gtk::manage(new Gtk::Button(\"Open Image…\"));\n"
"\tbutton-&gt;signal_clicked().connect (\n"
"\t\tsigc::ptr_fun(&amp;on_open_image));\n"
"\tbox-&gt;pack_start (*button, false, false);\n"
"\n"
"\tmain_win.show_all_children();\n"
"\tkit.run(main_win);\n"
"\n"
"\treturn 0;\n"
"}\n"
msgstr ""

#: C/image-viewer.cpp.page:120(item/p)
msgid ""
"The first lines create the widgets we want to use: a button for opening up an "
"image, the image view widget itself and the box we will use as a container."
msgstr ""

#: C/image-viewer.cpp.page:123(item/p)
msgid ""
"The calls to <code>pack_start</code> add the two widgets to the box and "
"define their behaviour. The image will expand into any available space while "
"the button will just be as big as needed. You will notice that we don't set "
"explicit sizes on the widgets. In GTKmm this is usually not needed as it "
"makes it much easier to have a layout that looks good in different window "
"sizes. Next, the box is added to the window."
msgstr ""

#: C/image-viewer.cpp.page:129(item/p)
msgid ""
"We need to define what happens when the user clicks on the button. GTKmm uses "
"the concept of <em>signals</em>. When the button is clicked, it fires the "
"<em>clicked</em> signal, which we can connect to some action. This is done "
"using the <code>signal_clicked().connect</code> method which tells GTKmm to "
"call the <code>on_open_image</code> function when the button is clicked. We "
"will define the <em>callback</em> in the next section."
msgstr ""

#: C/image-viewer.cpp.page:133(item/p)
msgid ""
"The last step is to show all widgets in the window using "
"<code>show_all_children()</code>. This is equivalent to using the <code>show()"
"</code> method on all our child widgets."
msgstr ""

#: C/image-viewer.cpp.page:142(section/p)
msgid ""
"We will now define the signal handler for the <em>clicked</em> signal or the "
"button we mentioned before. Add this code before the <code>main</code> method."
msgstr ""

#: C/image-viewer.cpp.page:145(section/code)
#, no-wrap
msgid ""
"\n"
"Gtk::Image* image = 0;\n"
"\n"
"static void\n"
"on_open_image ()\n"
"{\n"
"\tGtk::FileChooserDialog dialog(\"Open image\",\n"
"\t                              Gtk::FILE_CHOOSER_ACTION_OPEN);\n"
"\tdialog.add_button (Gtk::Stock::OPEN,\n"
"\t                   Gtk::RESPONSE_ACCEPT);\n"
"\tdialog.add_button (Gtk::Stock::CANCEL,\n"
"\t                   Gtk::RESPONSE_CANCEL);\n"
"\n"
"\tGlib::RefPtr&lt;Gtk::FileFilter&gt; filter =\n"
"\t\tGtk::FileFilter::create();\n"
"\tfilter-&gt;add_pixbuf_formats();\n"
"\tfilter-&gt;set_name(\"Images\");\n"
"\tdialog.add_filter (filter);\n"
"\n"
"\tconst int response = dialog.run();\n"
"\tdialog.hide();\n"
"\n"
"\tswitch (response)\n"
"\t{\n"
"\t\tcase Gtk::RESPONSE_ACCEPT:\n"
"\t\t\timage-&gt;set(dialog.get_filename());\n"
"\t\t\tbreak;\n"
"\t\tdefault:\n"
"\t\t\tbreak;\n"
"\t}\n"
"}\n"
msgstr ""

#: C/image-viewer.cpp.page:180(item/p)
msgid ""
"The dialog for choosing the file is created using the <code>Gtk::"
"FileChooserDialog</code> constructor. This takes the title and type of the "
"dialog. In our case, it is an <em>Open</em> dialog."
msgstr ""

#: C/image-viewer.cpp.page:184(item/p)
msgid ""
"The next two lines add an <em>Open</em> and a <em>Close</em> button to the "
"dialog."
msgstr ""

#: C/image-viewer.cpp.page:186(item/p)
msgid ""
"The second argument to the <code>add_button()</code> method is a value to "
"identify the clicked button. We use predefined values provided by GTKmm here, "
"too."
msgstr ""

#: C/image-viewer.cpp.page:191(item/p)
msgid ""
"The next two lines restrict the <gui>Open</gui> dialog to only display files "
"which can be opened by <code>Gtk::Image</code>. A filter object is created "
"first; we then add all kinds of files supported by <code>Gdk::Pixbuf</code> "
"(which includes most image formats like PNG and JPEG) to the filter. Finally, "
"we set this filter to be the <gui>Open</gui> dialog's filter."
msgstr ""

#: C/image-viewer.cpp.page:192(item/p)
msgid ""
"<code>Glib::RefPtr</code> is a smart pointer used here, that makes sure that "
"the filter is destroyed when there is no reference to it anymore."
msgstr ""

#: C/image-viewer.cpp.page:196(item/p)
msgid ""
"<code>dialog.run</code> displays the <gui>Open</gui> dialog. The dialog will "
"wait for the user to choose an image; when they do, <code>dialog.run</code> "
"will return the value <code>Gtk::RESPONSE_ACCEPT</code> (it would return "
"<code>Gtk::RESPONSE_CANCEL</code> if the user clicked <gui>Cancel</gui>). The "
"<code>switch</code> statement tests for this."
msgstr ""

#: C/image-viewer.cpp.page:199(item/p)
msgid ""
"We hide the <gui>Open</gui> dialog because we don't need it any more. The "
"dialog would be hidden later anyway, as it is only a local variable and is "
"destroyed (and therefore hidden) when the scope ends."
msgstr ""

#: C/image-viewer.cpp.page:202(item/p)
msgid ""
"Assuming that the user did click <gui>Open</gui>, the next line loads the "
"file into the <code>Gtk::Image</code> so that it is displayed."
msgstr ""

#: C/image-viewer.cpp.page:216(section/p)
msgid ""
"If you run into problems with the tutorial, compare your code with this <link "
"href=\"image-viewer/image-viewer.cc\">reference code</link>."
msgstr ""

#: C/image-viewer.js.page:7(info/title)
msgctxt "text"
msgid "Image viewer (JavaScript)"
msgstr "Bildbetrachter (JavaScript)"

#: C/image-viewer.js.page:10(info/desc)
msgid ""
"A little bit more than a simple \"Hello world\" application - write an image "
"viewer in GTK+. Includes an introduction to the JavaScript language."
msgstr ""

#: C/image-viewer.js.page:14(credit/name)
#: C/image-viewer.py.page:14(credit/name)
msgid "Jonh Wendell"
msgstr "Jonh Wendell"

#: C/image-viewer.js.page:31(synopsis/p) C/image-viewer.py.page:31(synopsis/p)
msgid ""
"In this tutorial, we're going to write a very simple GTK application that "
"loads and displays an image file. You will learn how to:"
msgstr ""

#: C/image-viewer.js.page:33(item/p)
msgid "Write a basic GTK user interface in JavaScript"
msgstr ""

#: C/image-viewer.js.page:34(item/p) C/image-viewer.py.page:34(item/p)
msgid "Deal with events by connecting signals to signal handlers"
msgstr ""

#: C/image-viewer.js.page:35(item/p) C/image-viewer.py.page:35(item/p)
msgid "Lay out GTK user interfaces using containers"
msgstr ""

#: C/image-viewer.js.page:36(item/p) C/image-viewer.py.page:36(item/p)
msgid "Load and display image files"
msgstr ""

#: C/image-viewer.js.page:41(item/p)
msgid "An installed copy of the <em>gjs</em> interpreter"
msgstr ""

#: C/image-viewer.js.page:42(item/p)
msgid "Basic knowledge of any object-orientated programming language"
msgstr ""

#: C/image-viewer.js.page:56(item/p)
msgid ""
"Choose <gui>Generic Javascript</gui> from the <gui>JS</gui> tab, click "
"<gui>Forward</gui>, and fill out your details on the next few pages. Use "
"<file>image-viewer</file> as project name and directory."
msgstr ""

#: C/image-viewer.js.page:59(item/p)
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. Open "
"<file>src/main.js</file> from the <gui>Project</gui> or <gui>File</gui> tabs. "
"It contains very basic example code."
msgstr ""

#: C/image-viewer.js.page:66(section/title)
msgid "JavaScript basics: Hello World"
msgstr ""

#: C/image-viewer.js.page:67(section/p)
msgid ""
"Before we start writing the image viewer, let's find out more about the way "
"JavaScript is used in GNOME. Of course, your very first contact with any "
"programming language should be the Hello World program which can already be "
"found in <file>main.js</file>:"
msgstr ""

#: C/image-viewer.js.page:68(section/code)
#, no-wrap
msgid "print (\"Hello world!\");"
msgstr "print (\"Hello world!\");"

#: C/image-viewer.js.page:69(section/p)
msgid ""
"This should look quite natural if you're familiar with almost any other "
"programming language. The function <code>print</code> is called with the "
"argument <code>\"Hello world!\"</code>, which will be printed on the screen. "
"Note that each line of code ends with a semicolon."
msgstr ""

#: C/image-viewer.js.page:73(section/title)
msgid "Classes in JavaScript"
msgstr "Klassen in JavaScript"

#: C/image-viewer.js.page:74(section/p)
msgid "This is the standard way to define a class in JavaScript:"
msgstr ""

#: C/image-viewer.js.page:75(section/code)
#, no-wrap
msgid ""
"\n"
"function MyClass () {\n"
"  this._init ();\n"
"}\n"
"\n"
"MyClass.prototype = {\n"
"\n"
"  _init: function () {\n"
"    this.propertyA = \"This is an object's field\";\n"
"    this.propertyB = 10;\n"
"  },\n"
"\n"
"  aMethod: function (arg1, arg2) {\n"
"    print (\"inside aMethod: \" + arg1 + \" \" + arg2);\n"
"  },\n"
"\n"
"  dumpProperties: function () {\n"
"    print (this.propertyA);\n"
"    print (this.propertyB);\n"
"  }\n"
"\n"
"}"
msgstr ""

#: C/image-viewer.js.page:97(section/p)
msgid ""
"This defines a class called <code>MyClass</code>. Let's go through each part "
"of the class definition:"
msgstr ""

#: C/image-viewer.js.page:100(item/p)
msgid ""
"<code>function MyClass</code> is the constructor of the class — its name must "
"match the class's name. You can access any member of the class by using the "
"<code>this</code> object; here, the constructor calls the class's "
"<code>_init</code> method."
msgstr ""

#: C/image-viewer.js.page:103(item/p)
msgid ""
"The <code>MyClass.prototype</code> block is where you define the "
"<em>structure</em> of the class. Each class is made up of methods (functions) "
"and fields (variables); there are three methods and two fields in this "
"example."
msgstr ""

#: C/image-viewer.js.page:106(item/p)
msgid ""
"The first method defined here is called <code>_init</code>, and we specify "
"that it is a function with no arguments:"
msgstr ""

#: C/image-viewer.js.page:107(item/code)
#, no-wrap
msgid "_init: function ()"
msgstr "_init: function ()"

#: C/image-viewer.js.page:108(item/p)
msgid ""
"We write the function inside some curly braces. Two fields are defined here, "
"<code>propertyA</code> and <code>propertyB</code>. The first is set to a "
"string and the second is set to an integer (10). The function doesn't return "
"any value."
msgstr ""

#: C/image-viewer.js.page:111(item/p)
msgid ""
"The next method is called <code>aMethod</code> and has two arguments, which "
"it prints out when you call it. The final method is <code>dumpProperties</"
"code>, and prints the fields <code>propertyA</code> and <code>propertyB</"
"code>."
msgstr ""

#: C/image-viewer.js.page:114(item/p)
msgid ""
"Note how the class definition (prototype) is arranged; each function "
"definition is separated by a comma."
msgstr ""

#: C/image-viewer.js.page:118(section/p)
msgid "Now that MyClass has been defined, we can play with it:"
msgstr ""

#: C/image-viewer.js.page:119(section/code)
#, no-wrap
msgid ""
"\n"
"var o = new MyClass ();\n"
"o.aMethod (\"Hello\", \"world\");\n"
"o.propertyA = \"Just changed its value!\";\n"
"o.dumpProperties ();"
msgstr ""

#: C/image-viewer.js.page:124(section/p)
msgid ""
"This code creates a new instance of the class called <code>o</code>, runs "
"<code>aMethod</code>, changes <code>propertyA</code> to a different string, "
"and then calls <code>dumpProperties</code> (which outputs the fields)."
msgstr ""

#: C/image-viewer.js.page:125(section/p)
msgid ""
"Save the code in the <file>main.js</file> and then run it by using "
"<guiseq><gui>Run</gui><gui>Execute</gui></guiseq> from the menu or using the "
"toolbar."
msgstr ""

#: C/image-viewer.js.page:130(section/title)
#: C/image-viewer.py.page:69(section/title)
msgid "A first Gtk application"
msgstr "Eine erste Gtk-Anwendung"

#: C/image-viewer.js.page:131(section/p)
msgid "Let's see what a very basic Gtk application looks like in JavaScript:"
msgstr ""

#: C/image-viewer.js.page:132(section/code)
#, no-wrap
msgid ""
"\n"
"const Gtk = imports.gi.Gtk;\n"
"\n"
"Gtk.init (null, null);\n"
"\n"
"var w = new Gtk.Window ({title: \"Image Viewer Demo\"});\n"
"w.show ();\n"
"\n"
"Gtk.main ();"
msgstr ""

#: C/image-viewer.js.page:141(section/p) C/image-viewer.py.page:94(section/p)
msgid "Let's take a look at what's happening:"
msgstr ""

#: C/image-viewer.js.page:144(item/p) C/image-viewer.py.page:97(item/p)
msgid ""
"The first line imports the Gtk namespace (that is, it includes the Gtk "
"library). The libraries are provided by GObject Introspection (gi), which "
"provides language bindings for many GNOME libraries."
msgstr ""

#: C/image-viewer.js.page:147(item/p)
msgid ""
"<code>Gtk.init</code> initializes the Gtk library; this statement is "
"mandatory for all Gtk programs."
msgstr ""

#: C/image-viewer.js.page:150(item/p)
msgid ""
"The next line creates the main window by creating a new <code>Gtk.Window</"
"code> object. You can pass several properties to the window's constructor by "
"using the syntax <code>{property: value, property: value, ...}</code>. In "
"this case we are setting the title of the window."
msgstr ""

#: C/image-viewer.js.page:151(item/p)
msgid ""
"The next line explicitly shows the window. In Gtk, every widget is hidden by "
"default."
msgstr ""

#: C/image-viewer.js.page:152(item/p)
msgid ""
"Finally, <code>Gtk.main</code> runs the main loop — in other words, it "
"executes the program. The main loop listens for events (signals) from the "
"user interface and then calls a signal handler which will do something "
"useful. We'll learn more about signals shortly."
msgstr ""

#: C/image-viewer.js.page:155(section/p)
msgid ""
"Save the code in <file>main.js</file> and run it. You will notice that the "
"application does not quit when you close the window. This is because we "
"haven't set up a signal handler to deal with the window's <code>destroy</"
"code> (close) signal yet. We'll do this shortly, but for now you can just hit "
"<keyseq><key>Ctrl</key><key>C</key></keyseq> in the terminal window to quit "
"the program."
msgstr ""

#: C/image-viewer.js.page:160(section/title)
msgid "Adding classes"
msgstr "Hinzufügen von Klassen"

#: C/image-viewer.js.page:161(section/p)
msgid ""
"The proper way of doing Gtk programming is by using classes. Let's rewrite "
"the simple code you just wrote using classes:"
msgstr ""

#: C/image-viewer.js.page:162(section/code)
#, no-wrap
msgid ""
"\n"
"const Gtk = imports.gi.Gtk;\n"
"\n"
"function ImageViewer () {\n"
"  this._init ();\n"
"}\n"
"\n"
"ImageViewer.prototype = {\n"
"  _init: function () {\n"
"    this.window = new Gtk.Window ({title: \"Image Viewer Demo\"});\n"
"    this.window.show ();\n"
"  }\n"
"}\n"
"\n"
"Gtk.init (0, null);\n"
"var iv = new ImageViewer ();\n"
"Gtk.main ();"
msgstr ""

#: C/image-viewer.js.page:180(section/p)
msgid ""
"Notice that the program is the same; we just moved the window creation code "
"to our own <code>ImageViewer</code> class. The class's constructor calls the "
"<code>_init</code> method, which creates and shows the window. We then create "
"an instance of the class before running the main loop (<code>Gtk.main</code>)."
msgstr ""

#: C/image-viewer.js.page:181(section/p)
msgid ""
"This code is modular and can be split into multiple files easily. This makes "
"it cleaner and easier to read."
msgstr ""

#: C/image-viewer.js.page:185(section/title)
#: C/image-viewer.py.page:118(section/title)
msgid "Signals"
msgstr "Signale"

#: C/image-viewer.js.page:186(section/p) C/image-viewer.py.page:119(section/p)
msgid ""
"Signals are one of the key concepts in Gtk programming. Whenever something "
"happens to an object, it emits a signal; for example, when a button is "
"clicked it gives off the <code>clicked</code> signal. If you want your "
"program to do something when that event occurs, you must connect a function "
"(a \"signal handler\") to that signal. Here's an example:"
msgstr ""

#: C/image-viewer.js.page:187(section/code)
#, no-wrap
msgid ""
"\n"
"function button_clicked () {\n"
"  print (\"you clicked me!\");\n"
"}\n"
"var b = new Gtk.Button ({label:\"Click me\"});\n"
"b.connect (\"clicked\", button_clicked);"
msgstr ""

#: C/image-viewer.js.page:193(section/p) C/image-viewer.py.page:126(section/p)
msgid ""
"The last two lines create a <code>Gtk.Button</code> called <code>b</code> and "
"connect its <code>clicked</code> signal to the <code>button_clicked</code> "
"function, which is defined above. Every time the button is clicked, the code "
"in the <code>button_clicked</code> function will be executed. It just prints "
"a message here."
msgstr ""

#: C/image-viewer.js.page:194(section/p)
msgid "The syntax for connecting any signal to a function is:"
msgstr ""

#: C/image-viewer.js.page:195(section/code)
#, no-wrap
msgid ""
"\n"
"object.connect (&lt;signal_name&gt;, &lt;function_to_be_called&gt;);"
msgstr ""

#: C/image-viewer.js.page:197(section/p)
msgid ""
"You can find signal definitions for any object in the <link href=\"http://"
"library.gnome.org/devel/gtk/stable/ch01.html\">GTK class reference</link>."
msgstr ""

#: C/image-viewer.js.page:200(note/p)
msgid ""
"You can simplify the code by making use of an inline function definition:"
msgstr ""

#: C/image-viewer.js.page:201(note/code)
#, no-wrap
msgid ""
"\n"
"b.connect (\"clicked\", function () { print (\"you clicked me!\"); });"
msgstr ""

#: C/image-viewer.js.page:208(section/title)
msgid "Closing the window"
msgstr "Schließen des Fensters"

#: C/image-viewer.js.page:209(section/p)
msgid ""
"When you close a Gtk window it's not really closed, it's hidden. This allows "
"you to keep the window around (which is useful if you want to ask the user if "
"they really want to close the window, for example)."
msgstr ""

#: C/image-viewer.js.page:210(section/p)
msgid ""
"In our case, we really do just want to close the window. The simplest way of "
"doing this is by connecting the <code>hide</code> signal of the GtkWindow "
"object to a function that closes the application. Go back to the <file>image-"
"viewer.js</file> file and add the following code to the <code>_init</code> "
"method, on the line above <code>this.window.show</code>:"
msgstr ""

#: C/image-viewer.js.page:211(section/code)
#, no-wrap
msgid "this.window.connect (\"hide\", Gtk.main_quit);"
msgstr "this.window.connect (\"hide\", Gtk.main_quit);"

#: C/image-viewer.js.page:212(section/p)
msgid ""
"This connects the <code>hide</code> signal of the window to Gtk's "
"<code>main_quit</code> function, which ends the execution of the Gtk main "
"loop. Once the main loop finishes, the function <code>Gtk.main</code> "
"returns. Our program would continue to run any code written after the "
"<code>Gtk.main ();</code> line, but since we don't have any code after that "
"point, the program just ends."
msgstr ""

#: C/image-viewer.js.page:216(section/title)
#: C/image-viewer.py.page:130(section/title)
msgid "Containers: Laying-out the user interface"
msgstr ""

#: C/image-viewer.js.page:217(section/p) C/image-viewer.py.page:131(section/p)
msgid ""
"Widgets (controls, such as buttons and labels) can be arranged in the window "
"by making use of <em>containers</em>. You can organize the layout by mixing "
"different types of containers, like boxes and grids."
msgstr ""

#: C/image-viewer.js.page:218(section/p) C/image-viewer.py.page:132(section/p)
msgid ""
"A <code>Gtk.Window</code> is itself a type of container, but you can only put "
"one widget directly into it. We would like to have two widgets, an image and "
"a button, so we must put a \"higher-capacity\" container inside the window to "
"hold the other widgets. A number of <link href=\"http://library.gnome.org/"
"devel/gtk/stable/GtkContainer.html\">container types</link> are available, "
"but we will use a <code>Gtk.Box</code> here. A <code>Gtk.Box</code> can hold "
"several widgets, organized horizontally or vertically. You can do more "
"complicated layouts by putting several boxes inside another box and so on."
msgstr ""

#: C/image-viewer.js.page:220(note/p) C/image-viewer.py.page:134(note/p)
msgid ""
"There is a graphical user interface designer called <app>Glade</app> "
"integrated in <app>Anjuta</app> which makes UI design really easy. For this "
"simple example, however, we will code everything manually."
msgstr ""

#: C/image-viewer.js.page:222(section/p)
msgid ""
"Let's add the box and widgets to the window. Insert the following code into "
"the <code>_init</code> method, immediately above the <code>this.window.show</"
"code> line:"
msgstr ""

#: C/image-viewer.js.page:223(section/code)
#, no-wrap
msgid ""
"\n"
"var main_box = new Gtk.Box ({orientation: Gtk.Orientation.VERTICAL, spacing: 0});\n"
"this.window.add (main_box);"
msgstr ""

#: C/image-viewer.js.page:226(section/p)
msgid ""
"The first line creates a <code>Gtk.Box</code> called <code>main_box</code> "
"and sets two of its properties: the <code>orientation</code> is set to "
"vertical (so widgets are arranged in a column), and the <code>spacing</code> "
"between the widgets is set to 0 pixels. The next line then adds the newly-"
"created <code>Gtk.Box</code> to the window."
msgstr ""

#: C/image-viewer.js.page:227(section/p) C/image-viewer.py.page:145(section/p)
msgid ""
"So far the window only contains an empty <code>Gtk.Box</code>, and if you run "
"the program now you will see no changes at all (the <code>Gtk.Box</code> is a "
"transparent container, so you can't see that it's there)."
msgstr ""

#: C/image-viewer.js.page:231(section/title)
#: C/image-viewer.py.page:149(section/title)
msgid "Packing: Adding widgets to the container"
msgstr "Packen: Hinzufügen von Widgets zum Container"

#: C/image-viewer.js.page:232(section/p)
msgid ""
"To add some widgets to the <code>Gtk.Box</code>, insert the following code "
"directly below the <code>this.window.add (main_box)</code> line:"
msgstr ""

#: C/image-viewer.js.page:233(section/code)
#, no-wrap
msgid ""
"\n"
"this.image = new Gtk.Image ();\n"
"main_box.pack_start (this.image, true, true, 0);"
msgstr ""

#: C/image-viewer.js.page:236(section/p)
msgid ""
"The first line creates a new <code>Gtk.Image</code> called <code>image</"
"code>, which will be used to display an image file. Then, the image widget is "
"added (<em>packed</em>) into the <code>main_box</code> container using "
"<code>Gtk.Box</code>'s <link href=\"http://library.gnome.org/devel/gtk/stable/"
"GtkBox.html#gtk-box-pack-start\"><code>pack_start</code></link> method."
msgstr ""

#: C/image-viewer.js.page:237(section/p)
msgid ""
"<code>pack_start</code> takes 4 arguments: the widget that is to be added to "
"the <code>Gtk.Box</code> (<code>child</code>); whether the <code>Gtk.Box</"
"code> should grow larger when the new widget is added (<code>expand</code>); "
"whether the new widget should take up all of the extra space created if the "
"<code>Gtk.Box</code> gets bigger (<code>fill</code>); and how much space "
"there should be, in pixels, between the widget and its neighbors inside the "
"<code>Gtk.Box</code> (<code>padding</code>)."
msgstr ""

#: C/image-viewer.js.page:238(section/p) C/image-viewer.py.page:157(section/p)
msgid ""
"Gtk containers (and widgets) dynamically expand to fill the available space, "
"if you let them. You don't position widgets by giving them a precise x,y-"
"coordinate location in the window; rather, they are positioned relative to "
"one another. This makes handling window resizing much easier, and widgets "
"should automatically take a sensible size in most situations."
msgstr ""

#: C/image-viewer.js.page:239(section/p) C/image-viewer.py.page:158(section/p)
msgid ""
"Also note how the widgets are organized in a hierarchy. Once packed in the "
"<code>Gtk.Box</code>, the <code>Gtk.Image</code> is considered a <em>child</"
"em> of the <code>Gtk.Box</code>. This allows you to treat all of the children "
"of a widget as a group; for example, you could hide the <code>Gtk.Box</code>, "
"which would also hide all of its children at the same time."
msgstr ""

#: C/image-viewer.js.page:240(section/p) C/image-viewer.py.page:159(section/p)
msgid "Now insert these two lines, below the two you just added:"
msgstr ""

#: C/image-viewer.js.page:241(section/code)
#, no-wrap
msgid ""
"\n"
"var open_button = new Gtk.Button ({label: \"Open a picture...\"});\n"
"main_box.pack_start (open_button, false, false, 0);"
msgstr ""

#: C/image-viewer.js.page:244(section/p)
msgid ""
"These lines are similar to the first two, but this time they create a "
"<code>Gtk.Button</code> and add it to <code>main_box</code>. Notice that we "
"are setting the <code>expand</code> argument (the second one) to <code>false</"
"code> here, whereas it was set to <code>true</code> for the <code>Gtk.Image</"
"code>. This will cause the image to take up all available space and the "
"button to take only the space it needs. When you maximize the window, the "
"button size will remain the same, but the image size will increase, taking up "
"all of the rest of the window."
msgstr ""

#: C/image-viewer.js.page:245(section/p)
msgid ""
"Finally, we must change the <code>this.window.show ();</code> line to read:"
msgstr ""

#: C/image-viewer.js.page:246(section/code)
#, no-wrap
msgid "this.window.show_all ();"
msgstr "this.window.show_all ();"

#: C/image-viewer.js.page:247(section/p)
msgid ""
"This will show the child of the Gtk window, and all of its children, and its "
"children's children, and so on. (Remember that Gtk widgets are all hidden by "
"default.)"
msgstr ""

#: C/image-viewer.js.page:251(section/title)
#: C/image-viewer.py.page:168(section/title)
msgid ""
"Loading the image: Connecting to the button's <code>clicked</code> signal"
msgstr ""

#: C/image-viewer.js.page:252(section/p)
msgid ""
"When the user clicks on the <gui>Open</gui> button, a dialog should appear so "
"that the user can choose a picture. Once chosen, the picture should be loaded "
"and shown in the image widget."
msgstr ""

#: C/image-viewer.js.page:253(section/p)
msgid ""
"The first step is to connect the <code>clicked</code> signal of the button to "
"a signal handler function, which we call <code>_openClicked</code>. Put this "
"code immediately after the <code>var open_button = new Gtk.Button</code> line "
"where the button was created:"
msgstr ""

#: C/image-viewer.js.page:254(section/code)
#, no-wrap
msgid ""
"\n"
"open_button.connect (\"clicked\", Lang.bind (this, this._openClicked));"
msgstr ""

#: C/image-viewer.js.page:256(section/p)
msgid ""
"We are using the <em>Lang</em> JavaScript helper here. It allows us to "
"connect a <em>class method</em> to the signal, rather than a plain function "
"(without a class) which we had used before for the window's <code>hide</code> "
"signal. Don't worry about this for now, it's just a technical detail. For it "
"to work, you also need to put the following line at the top of the file:"
msgstr ""

#: C/image-viewer.js.page:257(section/code)
#, no-wrap
msgid "const Lang = imports.lang;"
msgstr "const Lang = imports.lang;"

#: C/image-viewer.js.page:261(section/title)
#: C/image-viewer.py.page:179(section/title)
msgid "Loading the image: Writing the signal's callback"
msgstr ""

#: C/image-viewer.js.page:262(section/p)
msgid ""
"Now we can create the <code>_openClicked()</code> method. Insert the "
"following into the <code>ImageViewer.prototype</code> code block, after the "
"<code>_init</code> method (and not forgetting the comma):"
msgstr ""

#: C/image-viewer.js.page:263(section/code)
#, no-wrap
msgid ""
"\n"
"  _openClicked: function () {\n"
"    var chooser = new Gtk.FileChooserDialog ({title: \"Select an image\",\n"
"                                              action: Gtk.FileChooserAction.OPEN,\n"
"                                              transient_for: this.window,\n"
"                                              modal: true});\n"
"    chooser.add_button (Gtk.STOCK_CANCEL, 0);\n"
"    chooser.add_button (Gtk.STOCK_OPEN, 1);\n"
"    chooser.set_default_response (1);\n"
"\n"
"    var filter = new Gtk.FileFilter ();\n"
"    filter.add_pixbuf_formats ();\n"
"    chooser.filter = filter;\n"
"\n"
"    if (chooser.run () == 1)\n"
"      this.image.file = chooser.get_filename ();\n"
"\n"
"    chooser.destroy ();\n"
"  }"
msgstr ""

#: C/image-viewer.js.page:285(item/p)
msgid ""
"The line beginning with <code>var chooser</code> creates an <gui>Open</gui> "
"dialog, which the user can use to choose files. We set four properties: the "
"title of the dialog; the action (type) of the dialog (it's an \"open\" "
"dialog, but we could have used <code>SAVE</code> if the intention was to save "
"a file; <code>transient_for</code>, which sets the parent window of the "
"dialog; and <code>modal</code> which, if set to <code>true</code>, prevents "
"the user from clicking on another area of the application until the dialog is "
"closed."
msgstr ""

#: C/image-viewer.js.page:288(item/p) C/image-viewer.py.page:202(item/p)
msgid ""
"The next two lines add <gui>Cancel</gui> and <gui>Open</gui> buttons to the "
"dialog. The second argument of the <code>add_button</code> method is the "
"(integer) value that is returned when the button is pressed: 0 for "
"<gui>Cancel</gui> and 1 for <gui>Open</gui>."
msgstr ""

#: C/image-viewer.js.page:292(item/p) C/image-viewer.py.page:206(item/p)
msgid ""
"<code>set_default_response</code> determines the button that will be "
"activated if the user double-clicks a file or presses <key>Enter</key>. In "
"our case, we are using the <gui>Open</gui> button as default (which has the "
"value 1)."
msgstr ""

#: C/image-viewer.js.page:295(item/p) C/image-viewer.py.page:209(item/p)
msgid ""
"The next three lines restrict the <gui>Open</gui> dialog to only display "
"files which can be opened by <code>Gtk.Image</code>. A filter object is "
"created first; we then add all kinds of files supported by <code>Gdk.Pixbuf</"
"code> (which includes most image formats like PNG and JPEG) to the filter. "
"Finally, we set this filter to be the <gui>Open</gui> dialog's filter."
msgstr ""

#: C/image-viewer.js.page:298(item/p)
msgid ""
"<code>chooser.run</code> displays the <gui>Open</gui> dialog. The dialog will "
"wait for the user to choose an image; when they do, <code>chooser.run</code> "
"will return the value <output>1</output> (it would return <output>0</output> "
"if the user clicked <gui>Cancel</gui>). The <code>if</code> statement tests "
"for this."
msgstr ""

#: C/image-viewer.js.page:300(item/p) C/image-viewer.py.page:214(item/p)
msgid ""
"Assuming that the user did click <gui>Open</gui>, the next line sets the "
"<code>file</code> property of the <code>Gtk.Image</code> to the filename of "
"the image selected by the user. The <code>Gtk.Image</code> will then load and "
"display the chosen image."
msgstr ""

#: C/image-viewer.js.page:303(item/p) C/image-viewer.py.page:217(item/p)
#: C/image-viewer.vala.page:272(item/p)
msgid ""
"In the final line of this method, we destroy the <gui>Open</gui> dialog "
"because we don't need it any more."
msgstr ""

#: C/image-viewer.js.page:311(section/p)
msgid ""
"All of the code you need should now be in place, so try running the code. "
"That should be it; a fully-functioning image viewer (and a whistlestop tour "
"of JavaScript and Gtk) in not much time at all!"
msgstr ""

#: C/image-viewer.js.page:316(section/p)
msgid ""
"If you run into problems with the tutorial, compare your code with this <link "
"href=\"image-viewer/image-viewer.js\">reference code</link>."
msgstr ""

#: C/image-viewer.py.page:7(info/title)
msgctxt "text"
msgid "Image viewer (Python)"
msgstr "Bildbetrachter (Python)"

#: C/image-viewer.py.page:10(info/desc)
msgid ""
"A little bit more than a simple \"Hello world\" application - write an image "
"viewer in GTK."
msgstr ""

#: C/image-viewer.py.page:33(item/p)
msgid "Write a basic GTK user interface in Python"
msgstr ""

#: C/image-viewer.py.page:41(item/p)
msgid "Basic knowledge of the python programming language"
msgstr ""

#: C/image-viewer.py.page:55(item/p)
msgid ""
"Choose <gui>PyGTK (automake)</gui> from the <gui>Python</gui> tab, click "
"<gui>Continue</gui>, and fill out your details on the next few pages. Use "
"<file>image-viewer</file> as project name and directory."
msgstr ""

#: C/image-viewer.py.page:58(item/p)
msgid ""
"Be sure to disable <gui>Use GtkBuilder for user interface</gui> as we will "
"build the user interface manually in this example. For an example of using "
"the interface designer, check the <link xref=\"guitar-tuner.py\">Guitar-Tuner "
"demo</link>."
msgstr ""

#: C/image-viewer.py.page:63(item/p)
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. Open "
"<file>src/image_viewer.py</file> from the <gui>Project</gui> or <gui>File</"
"gui> tabs. It contains very basic example code."
msgstr ""

#: C/image-viewer.py.page:70(section/p)
msgid "Let's see what a very basic Gtk application looks like in Python:"
msgstr ""

#: C/image-viewer.py.page:71(section/code)
#, no-wrap
msgid ""
"\n"
"from gi.repository import Gtk, GdkPixbuf, Gdk\n"
"import os, sys\n"
"\n"
"class GUI:\n"
"\tdef __init__(self):\n"
"\t\twindow = Gtk.Window()\n"
"\t\twindow.set_title (\"Hello World\")\n"
"\t\twindow.connect_after('destroy', self.destroy)\n"
"\n"
"\t\twindow.show_all()\n"
"\n"
"\tdef destroy(window, self):\n"
"\t\tGtk.main_quit()\n"
"\n"
"def main():\n"
"\tapp = GUI()\n"
"\tGtk.main()\n"
"\n"
"if __name__ == \"__main__\":\n"
"    sys.exit(main())\n"
"\n"
"  "
msgstr ""

#: C/image-viewer.py.page:100(item/p)
msgid ""
"In the <code>__init__</code> method of the <code>GUI</code> class creates an "
"(empty) <code>Gtk.Window</code>, sets its title and then connects a signal to "
"quit the application once the window is closed. That's pretty simple overall, "
"more on signals later."
msgstr ""

#: C/image-viewer.py.page:105(item/p)
msgid ""
"Next, <code>destroy</code> is defined which just quits the application. It is "
"called by the <code>destroy</code> signal connected above."
msgstr ""

#: C/image-viewer.py.page:109(item/p)
msgid "The rest of the file does initialisation for Gtk and displays the GUI."
msgstr ""

#: C/image-viewer.py.page:113(section/p)
msgid ""
"This code is ready to run, so try it using <guiseq><gui>Run</"
"gui><gui>Execute</gui></guiseq>. It should show you an empty window."
msgstr ""

#: C/image-viewer.py.page:120(section/code)
#, no-wrap
msgid ""
"\n"
"def button_clicked () :\n"
"  print \"you clicked me!\"\n"
"\n"
"b = new Gtk.Button (\"Click me\")\n"
"b.connect_after ('clicked', button_clicked)"
msgstr ""

#: C/image-viewer.py.page:136(section/p)
msgid ""
"Let's add the box and widgets to the window. Insert the following code into "
"the <code>__init__</code> method, immediately after the <code>window."
"connect_after</code> line:"
msgstr ""

#: C/image-viewer.py.page:137(section/code)
#, no-wrap
msgid ""
"\n"
"box = Gtk.Box()\n"
"box.set_spacing (5)\n"
"box.set_orientation (Gtk.Orientation.VERTICAL)\n"
"window.add (box)\n"
"\n"
msgstr ""

#: C/image-viewer.py.page:144(section/p)
msgid ""
"The first line creates a <code>Gtk.Box</code> called <code>box</code> and the "
"following lines set two of its properties: the <code>orientation</code> is "
"set to vertical (so the widgets are arranged in a column), and the "
"<code>spacing</code> between the widgets is set to 5 pixels. The next line "
"then adds the newly-created <code>Gtk.Box</code> to the window."
msgstr ""

#: C/image-viewer.py.page:150(section/p)
msgid ""
"To add some widgets to the <code>Gtk.Box</code>, insert the following code "
"directly below the <code>window.add (box)</code> line:"
msgstr ""

#: C/image-viewer.py.page:151(section/code)
#, no-wrap
msgid ""
"\n"
"self.image = Gtk.Image()\n"
"box.pack_start (self.image, False, False, 0)"
msgstr ""

#: C/image-viewer.py.page:154(section/p)
msgid ""
"The first line creates a new <code>Gtk.Image</code> called <code>image</"
"code>, which will be used to display an image file. As we need that later on "
"in the signal handler, we will define it as a class-wide variable. You need "
"to add <code>image = 0</code> to the beginning of the <code>GUI</code> class. "
"Then, the image widget is added (<em>packed</em>) into the <code>box</code> "
"container using GtkBox's <link href=\"http://library.gnome.org/devel/gtk/"
"stable/GtkBox.html#gtk-box-pack-start\"><code>pack_start</code></link> method."
msgstr ""

#: C/image-viewer.py.page:156(section/p)
msgid ""
"<code>pack_start</code> takes 4 arguments: the widget that is to be added to "
"the GtkBox (<code>child</code>); whether the <code>Gtk.Box</code> should grow "
"larger when the new widget is added (<code>expand</code>); whether the new "
"widget should take up all of the extra space created if the <code>Gtk.Box</"
"code> gets bigger (<code>fill</code>); and how much space there should be, in "
"pixels, between the widget and its neighbors inside the <code>Gtk.Box</code> "
"(<code>padding</code>)."
msgstr ""

#: C/image-viewer.py.page:160(section/code)
#, no-wrap
msgid ""
"\n"
"button = Gtk.Button (\"Open a picture...\")\n"
"box.pack_start (button, False, False, 0)\n"
msgstr ""

#: C/image-viewer.py.page:164(section/p)
msgid ""
"These lines are similar to the first two, but this time they create a "
"<code>Gtk.Button</code> and add it to <code>box</code>. Notice that we are "
"setting the <code>expand</code> argument (the second one) to <code>False</"
"code> here, whereas it was set to <code>True</code> for the <code>Gtk.Image</"
"code>. This will cause the image to take up all available space and the "
"button to take only the space it needs. When you maximize the window, the "
"button size will remain the same, but the image size will increase, taking up "
"all of the rest of the window."
msgstr ""

#: C/image-viewer.py.page:169(section/p)
msgid ""
"When the user clicks on the <gui>Open Image...</gui> button, a dialog should "
"appear so that the user can choose a picture. Once chosen, the picture should "
"be loaded and shown in the image widget."
msgstr ""

#: C/image-viewer.py.page:170(section/p)
msgid ""
"The first step is to connect the <code>clicked</code> signal of the button to "
"a signal handler function, which we call <code>on_open_clicked</code>. Put "
"this code immediately after the <code>button = Gtk.Button()</code> line where "
"the button was created:"
msgstr ""

#: C/image-viewer.py.page:171(section/code)
#, no-wrap
msgid ""
"\n"
"button.connect_after('clicked', self.on_open_clicked)\n"
msgstr ""

#: C/image-viewer.py.page:174(section/p)
msgid ""
"This will connect the <code>clicked</code> signal to <code>on_open_clicked</"
"code> method that we will define below."
msgstr ""

#: C/image-viewer.py.page:180(section/p)
msgid ""
"Now we can create the <code>on_open_clicked</code> method. Insert the "
"following into the <code>GUI</code> class code block, after the "
"<code>__init__</code> method:"
msgstr ""

#: C/image-viewer.py.page:181(section/code)
#, no-wrap
msgid ""
"\n"
"def on_open_clicked (self, button):\n"
"\tdialog = Gtk.FileChooserDialog (\"Open Image\", button.get_toplevel(), Gtk.FileChooserAction.OPEN);\n"
"\tdialog.add_button (Gtk.STOCK_CANCEL, 0)\n"
"\tdialog.add_button (Gtk.STOCK_OK, 1)\n"
"\tdialog.set_default_response(1)\n"
"\n"
"\tfilefilter = Gtk.FileFilter ()\n"
"\tfilefilter.add_pixbuf_formats ()\n"
"\tdialog.set_filter(filefilter)\n"
"\n"
"\tif dialog.run() == 1:\n"
"\t\tself.image.set_from_file(dialog.get_filename())\n"
"\n"
"\tdialog.destroy()"
msgstr ""

#: C/image-viewer.py.page:199(item/p)
msgid ""
"The line beginning with <code>dialog</code> creates an <gui>Open</gui> "
"dialog, which the user can use to choose files. We set three properties: the "
"title of the dialog; the action (type) of the dialog (it's an \"open\" "
"dialog, but we could have used <code>SAVE</code> if the intention was to save "
"a file; and <code>transient_for</code>, which sets the parent window of the "
"dialog."
msgstr ""

#: C/image-viewer.py.page:212(item/p)
msgid ""
"<code>dialog.run</code> displays the <gui>Open</gui> dialog. The dialog will "
"wait for the user to choose an image; when they do, <code>dialog.run</code> "
"will return the value <output>1</output> (it would return <output>0</output> "
"if the user clicked <gui>Cancel</gui>). The <code>if</code> statement tests "
"for this."
msgstr ""

#: C/image-viewer.py.page:225(section/p)
msgid ""
"All of the code you need should now be in place, so try running the code. "
"That should be it; a fully-functioning image viewer (and a whistlestop tour "
"of Python and Gtk) in not much time at all!"
msgstr ""

#: C/image-viewer.py.page:230(section/p)
msgid ""
"If you run into problems with the tutorial, compare your code with this <link "
"href=\"image-viewer/image-viewer.py\">reference code</link>."
msgstr ""

#: C/image-viewer.vala.page:7(info/title)
msgctxt "text"
msgid "Image viewer (Vala)"
msgstr "Bildbetrachter (Vala)"

#: C/image-viewer.vala.page:10(info/desc)
msgid "A little bit more than a simple \"Hello world\" GTK+ application."
msgstr ""

#: C/image-viewer.vala.page:22(credit/name)
msgid "Philip Chimento"
msgstr "Philip Chimento"

#: C/image-viewer.vala.page:38(synopsis/p)
msgid ""
"In this tutorial you will create an application which opens and displays an "
"image file. You will learn:"
msgstr ""

#: C/image-viewer.vala.page:40(item/p)
msgid ""
"How to set up a basic project using the <link xref=\"getting-ready\">Anjuta "
"IDE</link>."
msgstr ""

#: C/image-viewer.vala.page:41(item/p)
msgid ""
"How to write a <link href=\"http://developer.gnome.org/platform-overview/"
"stable/gtk\">Gtk application</link> in Vala"
msgstr ""

#: C/image-viewer.vala.page:42(item/p)
msgid ""
"Some basic concepts of <link href=\"http://developer.gnome.org/gobject/stable/"
"\">GObject</link> programming"
msgstr ""

#: C/image-viewer.vala.page:49(item/p)
msgid ""
"You may find the <link href=\"http://valadoc.org/gtk+-3.0/\">gtk+-3.0</link> "
"API Reference useful, although it is not necessary to follow the tutorial."
msgstr ""

#: C/image-viewer.vala.page:65(item/p)
msgid ""
"From the <gui>Vala</gui> tab choose <gui>GTK+ (Simple)</gui>, click "
"<gui>Continue</gui>, and fill out your details on the next page. Use "
"<file>image-viewer</file> as project name and directory."
msgstr ""

#: C/image-viewer.vala.page:69(item/p)
msgid ""
"Make sure that <gui>Use GtkBuilder for user interface</gui> is unchecked as "
"we will create the UI manually in this tutorial."
msgstr ""

#: C/image-viewer.vala.page:70(note/p)
msgid ""
"You will learn how to use the interface builder in the <link xref=\"guitar-"
"tuner.vala\">Guitar-Tuner</link> tutorial."
msgstr ""

#: C/image-viewer.vala.page:74(item/p)
msgid ""
"Click <gui>Continue</gui> then <gui>Apply</gui> and the project will be "
"created for you. Open <file>src/image_viewer.vala</file> from the "
"<gui>Project</gui> or <gui>File</gui> tabs. You will see this code:"
msgstr ""

#: C/image-viewer.vala.page:77(item/code)
#, no-wrap
msgid ""
"\n"
"using GLib;\n"
"using Gtk;\n"
"\n"
"public class Main : Object\n"
"{\n"
"\n"
"\tpublic Main ()\n"
"\t{\n"
"\t\tWindow window = new Window();\n"
"\t\twindow.set_title (\"Hello World\");\n"
"\t\twindow.show_all();\n"
"\t\twindow.destroy.connect(on_destroy);\n"
"\t}\n"
"\n"
"\tpublic void on_destroy (Widget window)\n"
"\t{\n"
"\t\tGtk.main_quit();\n"
"\t}\n"
"\n"
"\tstatic int main (string[] args)\n"
"\t{\n"
"\t\tGtk.init (ref args);\n"
"\t\tvar app = new Main ();\n"
"\n"
"\t\tGtk.main ();\n"
"\n"
"\t\treturn 0;\n"
"\t}\n"
"}"
msgstr ""

#: C/image-viewer.vala.page:113(section/p)
msgid ""
"The code loads an (empty) window from the user interface description file and "
"shows it. More details are given below; skip this list if you understand the "
"basics:"
msgstr ""

#: C/image-viewer.vala.page:118(item/p)
msgid ""
"The two <code>using</code> lines at the top import namespaces so we don't "
"have to name them explicitly."
msgstr ""

#: C/image-viewer.vala.page:121(item/p)
msgid ""
"The constructor of the <code>Main</code> class creates a new (empty) window "
"and connects a <link href=\"https://live.gnome.org/Vala/SignalsAndCallbacks"
"\">signal</link> to exit the application when that window is closed."
msgstr ""

#: C/image-viewer.vala.page:126(item/p)
msgid ""
"The <code>static main</code> function is run by default when you start a Vala "
"application. It calls a few functions which create the <code>Main</code> "
"class, set up and then run the application. The <link href=\"http://valadoc."
"org/gtk+-3.0/Gtk.main.html\"><code>Gtk.main</code></link> function starts the "
"GTK <link href=\"http://en.wikipedia.org/wiki/Event_loop\">main loop</link>, "
"which runs the user interface and starts listening for events (like clicks "
"and key presses)."
msgstr ""

#: C/image-viewer.vala.page:133(section/p)
#: C/magic-mirror.vala.page:93(section/p)
msgid ""
"Change the <gui>Configuration</gui> to <gui>Default</gui> and then press "
"<gui>Execute</gui> to configure the build directory. You only need to do this "
"once, for the first build."
msgstr ""

#: C/image-viewer.vala.page:139(section/p)
msgid ""
"Now we will bring life into the empty window. GTK organizes the user "
"interface with <link href=\"http://www.valadoc.org/gtk+-2.0/Gtk.Container.html"
"\"><code>Gtk.Container</code></link>s that can contain other widgets and even "
"other containers. Here we will use the simplest available container, a <link "
"href=\"http://unstable.valadoc.org/gtk+-2.0/Gtk.Box.html\"><code>Gtk.Box</"
"code></link>."
msgstr ""

#: C/image-viewer.vala.page:143(section/p)
msgid "Add the following lines to the top of the <code>Main</code> class:"
msgstr ""

#: C/image-viewer.vala.page:144(section/code)
#, no-wrap
msgid ""
"\n"
"private Window window;\n"
"private Image image;\n"
msgstr ""

#: C/image-viewer.vala.page:149(section/p)
msgid "Now replace the current constructor with the one below:"
msgstr ""

#: C/image-viewer.vala.page:150(section/code)
#, no-wrap
msgid ""
"\n"
"\n"
"public Main () {\n"
"\n"
"\twindow = new Window ();\n"
"\twindow.set_title (\"Image Viewer in Vala\");\n"
"\n"
"\t// Set up the UI\n"
"\tvar box = new Box (Orientation.VERTICAL, 5);\n"
"\tvar button = new Button.with_label (\"Open image\");\n"
"\timage = new Image ();\n"
"\n"
"\tbox.pack_start (image, true, true, 0);\n"
"\tbox.pack_start (button, false, false, 0);\n"
"\twindow.add (box);\n"
"\n"
"\t// Show open dialog when opening a file\n"
"\tbutton.clicked.connect (on_open_image);\n"
"\n"
"\twindow.show_all ();\n"
"\twindow.destroy.connect (main_quit);\n"
"}\n"
msgstr ""

#: C/image-viewer.vala.page:175(item/p)
msgid ""
"The first two lines are the parts of the GUI that we will need to access from "
"more than one method. We declare them up here so that they are accessible "
"throughout the class instead of only in the method where they are created."
msgstr ""

#: C/image-viewer.vala.page:179(item/p)
msgid ""
"The first lines of the constructor create the empty window. The next lines "
"create the widgets we want to use: a button for opening up an image, the "
"image view widget itself and the box we will use as a container."
msgstr ""

#: C/image-viewer.vala.page:183(item/p)
msgid ""
"The calls to <link href=\"http://unstable.valadoc.org/gtk+-2.0/Gtk.Box."
"pack_start.html\"><code>pack_start</code></link> add the two widgets to the "
"box and define their behaviour. The image will expand into any available "
"space whereas the button will just be as big as needed. You will notice that "
"we don't set explicit sizes on the widgets. In GTK this is usually not needed "
"as it makes it much easier to have a layout that looks good in different "
"window sizes. Next, the box is added to the window."
msgstr ""

#: C/image-viewer.vala.page:190(item/p)
msgid ""
"We need to define what happens when the user clicks on the button. GTK uses "
"the concept of <em>signals</em>."
msgstr ""

#: C/image-viewer.vala.page:191(item/p)
msgid ""
"When the <link href=\"http://valadoc.org/gtk+-3.0/Gtk.Button.html\">button</"
"link> is clicked, it fires the <link href=\"http://valadoc.org/gtk+-3.0/Gtk."
"Button.clicked.html\"><code>clicked</code></link> signal, which we can "
"connect to some action (defined in a <link href=\"https://live.gnome.org/Vala/"
"SignalsAndCallbacks\">callback</link> method)."
msgstr ""

#: C/image-viewer.vala.page:194(item/p)
msgid ""
"This is done using the <code>connect</code> method of the button's "
"<code>clicked</code> signal, which in this case tells GTK to call the (yet "
"undefined) <code>on_image_open</code> callback method when the button is "
"clicked. We will define the <em>callback</em> in the next section."
msgstr ""

#: C/image-viewer.vala.page:198(item/p)
msgid ""
"In the callback, we need to access the <code>window</code> and <code>image</"
"code> widgets, which is why we defined them as private members at the top of "
"our class."
msgstr ""

#: C/image-viewer.vala.page:202(item/p)
msgid ""
"The last <code>connect</code> call makes sure that the application exits when "
"the window is closed. The code generated by Anjuta called an "
"<code>on_destroy</code> callback method which called <link href=\"http://www."
"valadoc.org/gtk+-2.0/Gtk.main_quit.html\"><code>Gtk.main_quit</code></link>, "
"but just connecting our signal to <code>main_quit</code> directly is easier. "
"You can delete the <code>on_destroy</code> method."
msgstr ""

#: C/image-viewer.vala.page:210(section/p)
msgid ""
"We will now define the signal handler for the <code>clicked</code> signal for "
"the button we mentioned before. Add this code after the constructor:"
msgstr ""

#: C/image-viewer.vala.page:213(section/code)
#, no-wrap
msgid ""
"\n"
"public void on_open_image (Button self) {\n"
"\tvar filter = new FileFilter ();\n"
"\tvar dialog = new FileChooserDialog (\"Open image\",\n"
"\t                                    window,\n"
"\t                                    FileChooserAction.OPEN,\n"
"\t                                    Stock.OK,     ResponseType.ACCEPT,\n"
"\t                                    Stock.CANCEL, ResponseType.CANCEL);\n"
"\tfilter.add_pixbuf_formats ();\n"
"\tdialog.add_filter (filter);\n"
"\n"
"\tswitch (dialog.run ())\n"
"\t{\n"
"\t\tcase ResponseType.ACCEPT:\n"
"\t\t\tvar filename = dialog.get_filename ();\n"
"\t\t\timage.set_from_file (filename);\n"
"\t\t\tbreak;\n"
"\t\tdefault:\n"
"\t\t\tbreak;\n"
"\t}\n"
"\tdialog.destroy ();\n"
"}\n"
msgstr ""

#: C/image-viewer.vala.page:236(section/p)
msgid "This is a bit complicated, so let's break it down:"
msgstr ""

#: C/image-viewer.vala.page:237(note/p)
msgid ""
"A signal handler is a type of callback method that is called when a signal is "
"emitted. Here the terms are used interchangeably."
msgstr ""

#: C/image-viewer.vala.page:240(item/p)
msgid ""
"The first argument of the callback method is always the widget that sent the "
"signal. Sometimes other arguments related to the signal come after that, but "
"<em>clicked</em> doesn't have any."
msgstr ""

#: C/image-viewer.vala.page:242(item/p)
msgid ""
"In this case the <code>button</code> sent the <code>clicked</code> signal, "
"which is connected to the <code>on_open_image</code> callback method:"
msgstr ""

#: C/image-viewer.vala.page:243(item/code)
#, no-wrap
msgid ""
"\n"
"        button.clicked.connect (on_open_image);\n"
msgstr ""

#: C/image-viewer.vala.page:247(item/p)
msgid ""
"The <code>on_open_image</code> method takes the button that emitted the "
"signal as an argument:"
msgstr ""

#: C/image-viewer.vala.page:248(item/code)
#, no-wrap
msgid ""
"\n"
"        public void on_open_image (Button self)\n"
msgstr ""

#: C/image-viewer.vala.page:253(item/p)
msgid ""
"The next interesting line is where the dialog for choosing the file is "
"created. <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.FileChooserDialog."
"html\"><code>FileChooserDialog</code></link>'s constructor takes the title of "
"the dialog, the parent window of the dialog and several options like the "
"number of buttons and their corresponding values."
msgstr ""

#: C/image-viewer.vala.page:255(item/p)
msgid ""
"Notice that we are using <link href=\"http://unstable.valadoc.org/gtk+-3.0/"
"Gtk.Stock.html\"><em>stock</em></link> button names from Gtk, instead of "
"manually typing \"Cancel\" or \"Open\". The advantage of using stock names is "
"that the button labels will already be translated into the user's language."
msgstr ""

#: C/image-viewer.vala.page:259(item/p)
msgid ""
"The next two lines restrict the <gui>Open</gui> dialog to only display files "
"which can be opened by <em>GtkImage</em>. GtkImage is a widget which displays "
"an image. A filter object is created first; we then add all kinds of files "
"supported by <link href=\"http://www.valadoc.org/gdk-pixbuf-2.0/Gdk.Pixbuf."
"html\"><code>Gdk.Pixbuf</code></link> (which includes most image formats like "
"PNG and JPEG) to the filter. Finally, we set this filter to be the <gui>Open</"
"gui> dialog's filter."
msgstr ""

#: C/image-viewer.vala.page:264(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Dialog.run.html"
"\"><code>dialog.run</code></link> displays the <gui>Open</gui> dialog. The "
"dialog will wait for the user to choose an image; when they do, <code>dialog."
"run</code> will return the <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk."
"ResponseType.html\">ResponseType</link> value <code>ResponseType.ACCEPT</"
"code> (it would return <code>ResponseType.CANCEL</code> if the user clicked "
"<gui>Cancel</gui>). The <code>switch</code> statement tests for this."
msgstr ""

#: C/image-viewer.vala.page:269(item/p)
msgid ""
"Assuming that the user did click <gui>Open</gui>, the next lines get the "
"filename of the image selected by the user, and tell the <code>GtkImage</"
"code> widget to load and display the selected image."
msgstr ""

#: C/image-viewer.vala.page:273(item/p)
msgid "Destroying automatically hides the dialog."
msgstr ""

#: C/image-viewer.vala.page:282(section/p)
msgid ""
"If you haven't already done so, choose the <file>src/image-viewer</file> "
"application in the dialog that appears. Finally, hit <gui>Run</gui> and enjoy!"
msgstr ""

#: C/image-viewer.vala.page:288(section/p)
msgid ""
"If you run into problems with the tutorial, compare your code with this <link "
"href=\"image-viewer/image-viewer.vala\">reference code</link>."
msgstr ""

#: C/image-viewer.vala.page:295(item/p)
msgid ""
"Set it up so that when the window opens it is of a specific size to start off "
"with. For example, 200 X 200 pixels."
msgstr ""

#: C/js.page:7(info/title)
msgctxt "link"
msgid "JavaScript"
msgstr "JavaScript"

#: C/js.page:20(credit/name)
msgid "Ekaterina Gerasimova"
msgstr "Ekaterina Gerasimova"

#: C/js.page:25(page/title)
msgid "Tutorials, code samples and platform demos in JavaScript"
msgstr ""

#: C/js.page:30(section/title)
msgid "Code samples and tutorials"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/label.c.page:25(media) C/label.js.page:21(media) C/label.py.page:29(media)
#: C/label.vala.page:21(media)
msgctxt "_"
msgid "external ref='media/label.png' md5='734975c18653d88379f983e4501c3fc0'"
msgstr "external ref='media/label.png' md5='734975c18653d88379f983e4501c3fc0'"

#: C/label.c.page:7(info/title)
msgctxt "text"
msgid "Label (C)"
msgstr ""

#: C/label.c.page:18(info/desc) C/label.vala.page:17(info/desc)
msgid "A widget which displays text"
msgstr ""

#: C/label.c.page:21(page/title) C/label.js.page:20(page/title)
#: C/label.py.page:28(page/title) C/label.vala.page:20(page/title)
#: C/toolbar_builder.py.page:97(td/p) C/toolbar_builder.vala.page:80(td/p)
msgid "Label"
msgstr ""

#: C/label.c.page:26(td/p) C/label.py.page:30(page/p)
#: C/label.vala.page:22(page/p)
msgid "A simple label"
msgstr ""

#: C/label.c.page:31(page/code)
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"\n"
"  /*Create a window with a title and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_application (GTK_WINDOW (window), GTK_APPLICATION (app));\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Welcome to GNOME\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200,100);\n"
"   \n"
"  /*Create a label and set its alignment. Setting the line wrap to TRUE makes \n"
"  the label break lines if the text exceeds the widget's size. When set to \n"
"  FALSE the text gets cut off by the edge of the widget*/\n"
"  label = gtk_label_new (\"Hello GNOME!\");\n"
"  gtk_label_set_justify (GTK_LABEL (label), GTK_JUSTIFY_CENTER);\n"
"  gtk_label_set_line_wrap (GTK_LABEL (label), TRUE);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (label));\n"
"\n"
"  gtk_widget_show_all (GTK_WIDGET (window));\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\",G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""

#: C/label.c.page:38(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/3.4/GtkLabel.html\">GtkLabel</"
"link>"
msgstr ""

#: C/label.js.page:7(info/title)
#, fuzzy
#| msgid "JavaScript"
msgctxt "text"
msgid "Label (JavaScript)"
msgstr "JavaScript"

#: C/label.js.page:17(info/desc)
msgid "A label which can contain text"
msgstr ""

#: C/label.js.page:22(page/p)
msgid "A label displaying a friendly message."
msgstr ""

#: C/label.js.page:24(page/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const LabelExample = new Lang.Class ({\n"
"    Name: 'Label Example',\n"
"\n"
"    /* Create the application itself\n"
"       This boilerplate code is needed to build any GTK+ application. */\n"
"        _init: function () {\n"
"            this.application = new Gtk.Application ({\n"
"                application_id: 'org.example.jslabel',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                              window_position: Gtk.WindowPosition.CENTER,\n"
"                                                              title: \"Welcome to GNOME\",\n"
"                                                              default_height: 100,\n"
"                                                              default_width: 200 });\n"
"\n"
"        // Create the label\n"
"        this.label = new Gtk.Label ({label: \"Hello GNOME!\"});\n"
"        this._window.add (this.label);\n"
"\n"
"                // Show the window and all child widgets\n"
"                this._window.show_all();\n"
"    }\n"
"\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new LabelExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/label.js.page:31(item/p)
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Label.html"
"\">Gtk.Label</link>"
msgstr ""

#: C/label.py.page:7(info/title)
#, fuzzy
#| msgid "Python"
msgctxt "text"
msgid "Label (Python)"
msgstr "Python"

#: C/label.py.page:25(info/desc)
msgid "A widget that displays a small to medium amount of text"
msgstr ""

#: C/label.py.page:37(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # constructor for a Gtk.ApplicationWindow\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(200, 100)\n"
"\n"
"        # create a label\n"
"        label = Gtk.Label()\n"
"        # set the text of the label\n"
"        label.set_text(\"Hello GNOME!\")\n"
"        # add the label to the window\n"
"        self.add(label)\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/label.py.page:39(section/p)
msgid ""
"Another way to obtain what we have in the example is to create the label as "
"an instance of another class and add it to the instance of <code>MyWindow</"
"code> in the <code>do_activate(self)</code> method:"
msgstr ""

#: C/label.py.page:40(section/code)
#, no-wrap
msgid ""
"\n"
"# a class to define a window\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(200, 100)\n"
"\n"
"# a class to define a label\n"
"class MyLabel(Gtk.Label):\n"
"    def __init__(self):\n"
"        Gtk.Label.__init__(self)\n"
"        self.set_text(\"Hello GNOME!\")\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        # create an instance of MyWindow\n"
"        win = MyWindow(self)\n"
"        # create an instance of MyLabel\n"
"        label = MyLabel()\n"
"        # and add it to the window\n"
"        win.add(label)\n"
"        # show the window and everything on it\n"
"        win.show_all()"
msgstr ""

#: C/label.py.page:70(section/title)
msgid "Useful methods for a Label widget"
msgstr ""

#: C/label.py.page:71(section/p)
msgid ""
"An explanation of how to deal with strings in GTK+ can be found in <link xref="
"\"strings.py\"/>."
msgstr ""

#: C/label.py.page:73(item/p)
msgid ""
"<code>set_line_wrap(True)</code> breaks lines if the text of the label "
"exceeds the size of the widget."
msgstr ""

#: C/label.py.page:74(item/p)
msgid ""
"<code>set_justify(Gtk.Justification.LEFT)</code> (or <code>Gtk.Justification."
"RIGHT, Gtk.Justification.CENTER, Gtk.Justification.FILL</code>) sets the "
"alignment of the lines in the text of the label relative to each other. The "
"method has no effect on a single-line label."
msgstr ""

#: C/label.py.page:75(item/p)
msgid ""
"For decorated text we can use <code>set_markup(\"text\")</code>, where <code>"
"\"text\"</code> is a text in the <link href=\"http://developer.gnome.org/"
"pango/stable/PangoMarkupFormat.html\">Pango Markup Language</link>. An "
"example:"
msgstr ""

#: C/label.py.page:76(item/code)
#, no-wrap
msgid ""
"\n"
"label.set_markup(\"Text can be &lt;small&gt;small&lt;/small&gt;, &lt;big&gt;big&lt;/big&gt;, \"\n"
"                 \"&lt;b&gt;bold&lt;/b&gt;, &lt;i&gt;italic&lt;/i&gt; and even point to somewhere \"\n"
"                 \"in the &lt;a href=\\\"http://www.gtk.org\\\" \"\n"
"                 \"title=\\\"Click to find out more\\\"&gt;internets&lt;/a&gt;.\")"
msgstr ""

#: C/label.vala.page:7(info/title)
msgctxt "text"
msgid "Label (Vala)"
msgstr ""

#: C/label.vala.page:24(page/code)
#, no-wrap
msgid ""
"\n"
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Welcome to GNOME\");\n"
"\n"
"\t\tvar label = new Gtk.Label (\"Hello GNOME!\");\n"
"\n"
"\t\tthis.add (label);\n"
"\t\tthis.set_default_size (200, 100);\n"
"\t\tthis.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/license.page:8(info/desc)
msgid "Legal information."
msgstr "Rechtliche Hinweise."

#: C/license.page:11(page/title)
msgid "License"
msgstr "Lizenz"

#: C/license.page:12(page/p)
msgid ""
"This work is distributed under a CreativeCommons Attribution-Share Alike 3.0 "
"Unported license."
msgstr ""
"Dieses Werk wird unter einer »CreativeCommons Attribution-Share Alike 3.0 "
"Unported license« verbreitet."

#: C/license.page:20(page/p)
msgid "You are free:"
msgstr "Es ist Ihnen gestattet:"

#: C/license.page:25(item/title)
msgid "<em>To share</em>"
msgstr "<em>Freizugeben</em>"

#: C/license.page:26(item/p)
msgid "To copy, distribute and transmit the work."
msgstr ""
"Das Werk bzw. den Inhalt zu vervielfältigen, zu verbreiten und öffentlich "
"zugänglich zu machen."

#: C/license.page:29(item/title)
msgid "<em>To remix</em>"
msgstr "<em>Änderungen vorzunehmen</em>"

#: C/license.page:30(item/p)
msgid "To adapt the work."
msgstr "Abwandlungen und Bearbeitungen des Werkes bzw. Inhaltes anzufertigen."

#: C/license.page:33(page/p)
msgid "Under the following conditions:"
msgstr "Unter den folgenden Bedingungen:"

#: C/license.page:38(item/title)
msgid "<em>Attribution</em>"
msgstr "<em>Weitergabe</em>"

#: C/license.page:39(item/p)
msgid ""
"You must attribute the work in the manner specified by the author or licensor "
"(but not in any way that suggests that they endorse you or your use of the "
"work)."
msgstr ""
"Sie dürfen das Werk nur unter gleichen Bedingungen weitergeben, wie Sie vom "
"Autor oder Lizenzgeber festgelegt wurden (aber nicht so, dass es wie Ihr Werk "
"aussieht)."

#: C/license.page:46(item/title)
msgid "<em>Share Alike</em>"
msgstr "<em>Unter gleichen Bedingungen</em>"

#: C/license.page:47(item/p)
msgid ""
"If you alter, transform, or build upon this work, you may distribute the "
"resulting work only under the same, similar or a compatible license."
msgstr ""
"Wenn Sie das lizenzierte Werk bzw. den lizenzierten Inhalt bearbeiten, "
"abwandeln oder in anderer Weise erkennbar als Grundlage für eigenes Schaffen "
"verwenden, dürfen Sie die daraufhin neu entstandenen Werke bzw. Inhalte nur "
"unter Verwendung von Lizenzbedingungen weitergeben, die mit denen dieses "
"Lizenzvertrages identisch, vergleichbar oder kompatibel sind."

#: C/license.page:53(page/p)
msgid ""
"For the full text of the license, see the <link href=\"http://creativecommons."
"org/licenses/by-sa/3.0/legalcode\">CreativeCommons website</link>, or read "
"the full <link href=\"http://creativecommons.org/licenses/by-sa/3.0/"
"\">Commons Deed</link>."
msgstr ""
"Den vollständigen Text der Lizenz finden Sie auf der <link href=\"http://"
"creativecommons.org/licenses/by-sa/3.0/legalcode\">CreativeCommons-Webseite</"
"link>. Oder Sie können den vollständigen <link href=\"http://creativecommons."
"org/licenses/by-sa/3.0/\">Commons Deed</link> lesen."

#: C/license.page:60(note/p)
msgid ""
"As a special exception, the copyright holders give you permission to copy, "
"modify, and distribute the example code contained in this documentation under "
"the terms of your choosing, without restriction."
msgstr ""
"Als besondere Ausnahme erteilen Ihnen die Urheberrechtsinhaber die "
"Genehmigung, den in diesem Dokument enthaltenen Beispielcode ohne "
"Einschränkung unter den Bedingungen Ihrer Wahl zu verbreiten."

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/linkbutton.c.page:22(media) C/linkbutton.js.page:21(media)
#: C/linkbutton.py.page:23(media) C/linkbutton.vala.page:21(media)
msgctxt "_"
msgid ""
"external ref='media/linkbutton.png' md5='3712eae8953e87c65a6aa74503b8e32b'"
msgstr ""
"external ref='media/linkbutton.png' md5='3712eae8953e87c65a6aa74503b8e32b'"

#: C/linkbutton.c.page:7(info/title)
msgctxt "text"
msgid "LinkButton (C)"
msgstr ""

#: C/linkbutton.c.page:17(info/desc) C/linkbutton.vala.page:17(info/desc)
msgid "Create buttons bound to a URL"
msgstr ""

#: C/linkbutton.c.page:20(page/title) C/linkbutton.js.page:20(page/title)
#: C/linkbutton.py.page:21(page/title) C/linkbutton.vala.page:20(page/title)
msgid "LinkButton"
msgstr ""

#: C/linkbutton.c.page:23(page/p)
msgid "This button links to the GNOME live webpage."
msgstr ""

#: C/linkbutton.c.page:25(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *linkbutton;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"GNOME LinkButton\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 250, 50);\n"
"\n"
"  linkbutton = gtk_link_button_new (\"Link to GNOME live!\");\n"
"  gtk_link_button_set_uri (GTK_LINK_BUTTON(linkbutton), \"http://live.gnome.org\");\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (linkbutton));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""

#: C/linkbutton.c.page:33(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkLinkButton.html"
"\">GtkLinkButton</link>"
msgstr ""

#: C/linkbutton.js.page:7(info/title)
#, fuzzy
#| msgid "JavaScript"
msgctxt "text"
msgid "LinkButton (JavaScript)"
msgstr "JavaScript"

#: C/linkbutton.js.page:17(info/desc)
msgid "A button that links to a web page"
msgstr ""

#: C/linkbutton.js.page:22(page/p)
msgid "A button that links to live.gnome.org."
msgstr ""

#: C/linkbutton.js.page:24(page/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const LinkButtonExample = new Lang.Class ({\n"
"    Name: 'LinkButton Example',\n"
"\n"
"    // Create the application itself\n"
"        _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"              application_id: 'org.example.jslinkbutton',\n"
"              flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"         });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"    this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                 window_position: Gtk.WindowPosition.CENTER,\n"
"                                                 title: \"GNOME LinkButton\",\n"
"                                                 default_height: 50,\n"
"                                                 default_width: 250 });\n"
"\n"
"        // Create the LinkButton and have it link to live.gnome.org\n"
"        this.LinkButton = new Gtk.LinkButton ({label: \"Link to GNOME live!\",\n"
"                               uri: \"http://live.gnome.org\"});\n"
"        this._window.add (this.LinkButton);\n"
"\n"
"    // Show the window and all child widgets\n"
"    this._window.show_all();\n"
"    },\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new LinkButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/linkbutton.js.page:31(item/p)
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.LinkButton.html"
"\">Gtk.LinkButton</link>"
msgstr ""

#: C/linkbutton.py.page:7(info/title)
msgctxt "text"
msgid "LinkButton (Python)"
msgstr ""

#: C/linkbutton.py.page:18(info/desc)
msgid "A button bound to an URL"
msgstr ""

#: C/linkbutton.py.page:24(page/p)
msgid "A button that links to a web page."
msgstr ""

#: C/linkbutton.py.page:31(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GNOME LinkButton\", application=app)\n"
"        self.set_default_size(250, 50)\n"
"\n"
"        # a linkbutton pointing to the given URI\n"
"        button = Gtk.LinkButton(uri=\"http://live.gnome.org\")\n"
"        # with given text\n"
"        button.set_label(\"Link to GNOME live!\")\n"
"\n"
"        # add the button to the window\n"
"        self.add(button)\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup (self):\n"
"        Gtk.Application.do_startup (self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/linkbutton.py.page:35(section/title)
msgid "Useful methods for a LinkButton widget"
msgstr ""

#: C/linkbutton.py.page:37(item/p)
msgid ""
"<code>get_visited()</code> returns the 'visited' state (<code>True</code> or "
"<code>False</code>) of the URI where the LinkButton points. The button "
"becomes visited when it is clicked."
msgstr ""

#: C/linkbutton.py.page:38(item/p)
msgid ""
"<code>set_visited(True)</code> sets the 'visited' state of the URI where the "
"LinkButton points as <code>True</code> (analogously for <code>False</code>)."
msgstr ""

#: C/linkbutton.py.page:39(item/p)
msgid ""
"Each time the button is clicked, the signal <code>\"activate-link\"</code> is "
"emitted. For an explanation of signals and callback functions, see <link xref="
"\"signals-callbacks.py\"/>."
msgstr ""

#: C/linkbutton.py.page:47(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkLinkButton.html"
"\">GtkLinkButton</link>"
msgstr ""

#: C/linkbutton.vala.page:7(info/title)
msgctxt "text"
msgid "LinkButton (Vala)"
msgstr ""

#: C/linkbutton.vala.page:22(page/p)
msgid "This button links to GNOME live."
msgstr ""

#: C/linkbutton.vala.page:24(page/code)
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create the window of this application and child widget and show all the things. */\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.set_default_size (250, 50);\n"
"\t\twindow.title = \"GNOME LinkButton\";\n"
"\n"
"\t\tvar linkbutton = new Gtk.LinkButton.with_label (\"http://live.gnome.org\", \"Link to GNOME live!\");\n"
"\n"
"\t\twindow.add (linkbutton);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/linkbutton.vala.page:29(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.LinkButton.html\">Gtk."
"LinkButton</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/magic-mirror.vala.page:46(media)
msgctxt "_"
msgid ""
"external ref='media/magic-mirror.png' md5='8171faea6ed3b6ddac0da084c29e4e22'"
msgstr "@@image: 'media/magic-mirror.png'; md5=8171faea6ed3b6ddac0da084c29e4e22"

#: C/magic-mirror.vala.page:7(info/title)
msgctxt "text"
msgid "Magic mirror (Vala)"
msgstr ""

#: C/magic-mirror.vala.page:10(info/desc)
msgid "Use your webcam as a mirror using the GStreamer framework and GTK+"
msgstr ""

#: C/magic-mirror.vala.page:14(credit/name)
msgid "Daniel G. Siegel"
msgstr "Daniel G. Siegel"

#: C/magic-mirror.vala.page:28(page/title)
msgid "Magic mirror"
msgstr ""

#: C/magic-mirror.vala.page:31(synopsis/p)
msgid ""
"<em>Your mirror just fell off the wall and broke into a thousand pieces — but "
"you need a mirror to shave your beard off or add some makeup! You only have "
"15 minutes left before catching the bus to work. So what can you do?</em>"
msgstr ""

#: C/magic-mirror.vala.page:32(synopsis/p)
msgid ""
"In this tutorial, we're going to make a program which lets you use your "
"webcam as a mirror. You will learn how to:"
msgstr ""

#: C/magic-mirror.vala.page:34(item/p)
msgid "Create a GTK+ application"
msgstr ""

#: C/magic-mirror.vala.page:35(item/p)
msgid "Access your webcam using GStreamer and embed the result into a window"
msgstr ""

#: C/magic-mirror.vala.page:36(item/p)
msgid "Grab photos off your webcam"
msgstr ""

#: C/magic-mirror.vala.page:41(item/p)
msgid "Installed copies of GTK, GStreamer, and a Vala compiler"
msgstr ""

#: C/magic-mirror.vala.page:42(item/p)
msgid "Basic knowledge of an object-oriented programming language"
msgstr ""

#: C/magic-mirror.vala.page:56(item/p)
msgid ""
"Choose <gui>GTK+ (simple)</gui> from the <gui>Vala</gui> tab, click "
"<gui>Forward</gui>, and fill out your details on the next few pages. Use "
"<file>guitar-tuner</file> as project name and directory."
msgstr ""

#: C/magic-mirror.vala.page:59(item/p)
msgid ""
"Disable <gui>Use GtkBuilder for user interface</gui> as we will create the UI "
"manually in this tutorial. Check the <link xref=\"guitar-tuner.vala\">Guitar-"
"Tuner</link> tutorial using the interface builder."
msgstr ""

#: C/magic-mirror.vala.page:64(item/p)
msgid ""
"Make sure that <gui>Configure external packages</gui> is selected. On the "
"next page, select <em>gstreamer-0.10</em> from the list to include the "
"<app>GStreamer</app> library into your project."
msgstr ""

#: C/magic-mirror.vala.page:68(item/p)
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. Open "
"<file>src/magic_mirror.vala</file> from the <gui>Project</gui> or <gui>File</"
"gui> tabs. You should see some code which starts with the lines:"
msgstr ""

#: C/magic-mirror.vala.page:78(section/p)
msgid ""
"The code loads an (empty) window and shows it. More details are given below; "
"skip this list if you understand the basics:"
msgstr ""

#: C/magic-mirror.vala.page:84(item/p)
msgid ""
"The constructor of the <code>Main</code> class creates a new window and sets "
"its title. Afterwards the window is shown and a signal is connected which "
"quits the application if the window is closed. More on signals later on."
msgstr ""

#: C/magic-mirror.vala.page:88(item/p)
msgid ""
"The static <code>main</code> function is run by default when you start a Vala "
"application. It calls a few functions which create the Main class, set up and "
"then run the application. The <code>Gtk.Main</code> function starts the GTK "
"main loop, which runs the user interface and starts listening for events "
"(like clicks and key presses)."
msgstr ""

#: C/magic-mirror.vala.page:97(section/title)
msgid "Access the webcam video stream with GStreamer"
msgstr ""

#: C/magic-mirror.vala.page:98(section/p)
msgid ""
"The GStreamer multimedia framework is able to handle video from webcams. "
"Let's add GStreamer to our application and so we can access the video stream."
msgstr ""

#: C/magic-mirror.vala.page:100(section/code)
#, no-wrap
msgid ""
"\n"
"using GLib;\n"
"using Gtk;\n"
"\n"
"public class Main : Object\n"
"{\n"
"\tprivate Gst.Element camerabin;\n"
"\n"
"\tpublic Main () {\n"
"\t\tthis.camerabin = Gst.ElementFactory.make (\"camerabin\", \"camera\");\n"
"\t\tthis.camerabin.set_state (Gst.State.PLAYING);\n"
"\t}\n"
"\n"
"\tstatic int main (string[] args) {\n"
"\t\tGtk.init (ref args);\n"
"\t\tGst.init (ref args);\n"
"\t\tvar app = new Main ();\n"
"\n"
"\t\tGtk.main ();\n"
"\n"
"\t\treturn 0;\n"
"\t}\n"
"}\n"
msgstr ""

#: C/magic-mirror.vala.page:125(item/p)
msgid ""
"First we remove the window we created before because GStreamer will take care "
"of showing the picture on screen."
msgstr ""

#: C/magic-mirror.vala.page:129(item/p)
msgid ""
"Now we are creating a GStreamer element which accesses our webcam. We are "
"using the Camerabin element, which is an all-in-one camera element and is "
"capable of taking photos, videos, applying effects and much more. Perfect for "
"our use case! With <code>this.camerabin.set_state (Gst.State.PLAYING)</code> "
"we tell the GStreamer pipeline we just created to start playing. Easy, no?"
msgstr ""

#: C/magic-mirror.vala.page:136(item/p)
msgid ""
"Of course it is also possible to integrate the video more tighly into other "
"windows but that is an advanced topic that includes some details of the X "
"Window System we will omit here."
msgstr ""

#: C/magic-mirror.vala.page:140(item/p)
msgid ""
"Compile and run it again. You will end up with two windows. In the next step "
"we will integrate the video into the GTK+ window."
msgstr ""

#: C/magic-mirror.vala.page:150(section/p)
msgid ""
"If you run into problems with the tutorial, compare your code with this <link "
"href=\"magic-mirror/magic-mirror.vala\">reference code</link>. There is also "
"a more <link href=\"magic-mirror/magic-mirror-advanced.vala\">extensive "
"implementation</link> that embeds the window into a regular Gtk.Window which "
"involves some advanced techniques, and adds buttons to start/stop the picture."
msgstr ""

#: C/magic-mirror.vala.page:157(section/p)
msgid ""
"To find out more about the Vala programming language you might want to check "
"out the <link href=\"http://live.gnome.org/Vala/Tutorial\">Vala Tutorial</"
"link>."
msgstr ""

#: C/magic-mirror.vala.page:162(section/title)
msgid "Conclusion"
msgstr ""

#: C/magic-mirror.vala.page:163(section/p)
msgid ""
"That's it, you have managed to create a full-featured webcam photo "
"application in 15 minutes. Now you can shave your beard off or add some "
"makeup to your beautiful face, right before having a beautiful day at your "
"workplace, where you can impress your friends and colleagues with an awesome "
"application you just made in 15 minutes."
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/menubar.c.page:24(media) C/menubar.py.page:28(media)
#: C/menubar.vala.page:23(media)
msgctxt "_"
msgid "external ref='media/menubar.png' md5='7b642aaa1628d5e43ab85ac230ac1c78'"
msgstr "external ref='media/menubar.png' md5='7b642aaa1628d5e43ab85ac230ac1c78'"

#: C/menubar.c.page:7(info/title)
msgctxt "text"
msgid "MenuBar (C)"
msgstr ""

#: C/menubar.c.page:19(info/desc) C/menubar.py.page:24(info/desc)
#: C/menubar.vala.page:19(info/desc)
msgid "A widget which holds GtkMenuItem widgets"
msgstr ""

#: C/menubar.c.page:22(page/title) C/menubar.vala.page:22(page/title)
msgid "MenuBar"
msgstr ""

#: C/menubar.c.page:25(page/p) C/menubar.py.page:29(page/p)
#: C/menubar.vala.page:24(page/p)
msgid "A MenuBar created using XML and GtkBuilder."
msgstr ""

#: C/menubar.c.page:26(note/p)
msgid ""
"For a more in-depth look at this sample, please do not hesitate to check out "
"the <link xref=\"menubar.vala\">Vala MenuBar</link> and/or <link xref="
"\"menubar.py\">Python MenuBar</link> tutorials."
msgstr ""

#: C/menubar.c.page:30(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"copy\" action */\n"
"static void\n"
"copy_callback (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   g_print (\"\\\"Copy\\\" activated\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"paste\" action */\n"
"static void\n"
"paste_callback (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   g_print (\"\\\"Paste\\\" activated\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"shape\" action */\n"
"static void\n"
"shape_callback (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   /* We first gather the value of the GVariant instance with a string type.\n"
"    * The overall goal here is to see if shape is set to line, triangle, etc,\n"
"    * and put that value within the variable \"answer\".\n"
"    */\n"
"   const gchar *answer = g_variant_get_string (parameter, NULL);\n"
"   g_printf (\"Shape is set to %s.\\n\", answer);\n"
"   /* Note that we set the state of the action */\n"
"   g_simple_action_set_state (simple, parameter);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function in which closes the about_dialog created below */\n"
"static void\n"
"on_close (GtkDialog *dialog,\n"
"          gint       response_id,\n"
"          gpointer   user_data)\n"
"{\n"
"  gtk_widget_destroy (GTK_WIDGET (dialog));\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the about action (see aboutdialog.c example) */\n"
"static void\n"
"about_callback (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   GtkWidget *about_dialog;\n"
"\n"
"   about_dialog = gtk_about_dialog_new ();\n"
"\n"
"   const gchar *authors[] = {\"GNOME Documentation Team\", NULL};\n"
"   const gchar *documenters[] = {\"GNOME Documentation Team\", NULL};\n"
"\n"
"   /* Fill in the about_dialog with the desired information */\n"
"   gtk_about_dialog_set_program_name (GTK_ABOUT_DIALOG (about_dialog), \"AboutDialog Example\");\n"
"   gtk_about_dialog_set_copyright (GTK_ABOUT_DIALOG (about_dialog), \"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\");\n"
"   gtk_about_dialog_set_authors (GTK_ABOUT_DIALOG (about_dialog), authors);\n"
"   gtk_about_dialog_set_documenters (GTK_ABOUT_DIALOG (about_dialog), documenters);\n"
"   gtk_about_dialog_set_website_label (GTK_ABOUT_DIALOG (about_dialog), \"GNOME Developer Website\");\n"
"   gtk_about_dialog_set_website (GTK_ABOUT_DIALOG (about_dialog), \"http://developer.gnome.org\");\n"
"\n"
"   /* The \"response\" signal is emitted when the dialog receives a delete event,\n"
"    * therefore we connect that signal to the on_close callback function\n"
"    * created above.\n"
"    */\n"
"   g_signal_connect (GTK_DIALOG (about_dialog), \"response\",\n"
"                    G_CALLBACK (on_close), NULL);\n"
"\n"
"   /* Show the about dialog */\n"
"   gtk_widget_show (about_dialog);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  GSimpleAction *copy_action;\n"
"  GSimpleAction *paste_action;\n"
"  GSimpleAction *shape_action;\n"
"  GSimpleAction *about_action;\n"
"\n"
"  /* Create a window with a title and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"MenuBar Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);\n"
"\n"
"  /* Begin creating the \"copy\" action.\n"
"   * Note that it is an action without a state.\n"
"   */\n"
"  copy_action = g_simple_action_new (\"copy\", NULL);\n"
"  /* Connected to a callback function */\n"
"  g_signal_connect (copy_action, \"activate\", G_CALLBACK (copy_callback),\n"
"                    GTK_WINDOW (window));\n"
"  /* Added to the window */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (copy_action));\n"
"\n"
"  /* Begin creating the \"paste\" action.\n"
"   * Note that it is an action without a state.\n"
"   */\n"
"  paste_action = g_simple_action_new (\"paste\", NULL);\n"
"  /* Connect the action to a callback function */\n"
"  g_signal_connect (paste_action, \"activate\", G_CALLBACK (paste_callback),\n"
"                    GTK_WINDOW (window));\n"
"  /* Add it to the window */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (paste_action));\n"
"\n"
"  /* Begin creating the \"shape\" action.\n"
"   * Note that it is an action with a state.\n"
"   * First we state that the parameter type of the simple action is a string.\n"
"   * When using g_variant_type_new, it is appropriate to free the return value\n"
"   * once you're done with it.\n"
"   */\n"
"  GVariantType *type_string = g_variant_type_new (\"s\");\n"
"  /* parameters for the g_simple_action_new_stateful are: (name, parameter type,\n"
"   * initial state).\n"
"   */\n"
"  shape_action = g_simple_action_new_stateful (\"shape\", type_string,\n"
"                                               g_variant_new_string (\"line\"));\n"
"  /* Connect the action to a callback function */\n"
"  g_signal_connect (shape_action, \"activate\", G_CALLBACK (shape_callback),\n"
"                    GTK_WINDOW (window));\n"
"  /* Add it to the window */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (shape_action));\n"
"  g_variant_type_free (type_string);\n"
"\n"
"  /* Begin creating the \"about\" action.\n"
"   * Note that it is an action without a state.\n"
"   */\n"
"  about_action = g_simple_action_new (\"about\", NULL);\n"
"  /* Connect the action to a callback function */\n"
"  g_signal_connect (about_action, \"activate\", G_CALLBACK (about_callback),\n"
"                    GTK_WINDOW (window));\n"
"  /* Add it to the window */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (about_action));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"new\" action */\n"
"static void\n"
"new_callback (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"New\\\"\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"quit\" action */\n"
"static void\n"
"quit_callback (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_print (\"You clicked \\\"Quit\\\"\\n\");\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"state\" action */\n"
"static void\n"
"state_callback (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"   /* The two possibilies in this case for the \"answer\" variable are either\n"
"    * \"on\" or \"off\".\n"
"    */\n"
"   const gchar *answer = g_variant_get_string (parameter, NULL);\n"
"   /* We print the information to the user */\n"
"   g_printf (\"State is set to %s.\\n\", answer);\n"
"   /* Note that we set the state of the action */\n"
"   g_simple_action_set_state (simple, parameter);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"awesome\" action */\n"
"static void\n"
"awesome_callback (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  GVariant *action_state = g_action_get_state (G_ACTION (simple));\n"
"  gboolean active = g_variant_get_boolean (action_state);\n"
"  GVariant *new_state = g_variant_new_boolean (!active);\n"
"  /* Set the new state for the action.\n"
"   * (Keeps track of whether it was last checked or unchecked).\n"
"   */\n"
"  g_simple_action_set_state (simple, new_state);\n"
"\n"
"  if (active)\n"
"     g_print (\"You unchecked \\\"Awesome\\\"\\n\");\n"
"  else\n"
"     g_print (\"You checked \\\"Awesome\\\"\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the menu we are creating in this sample */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  /* Initialize variables */\n"
"  GSimpleAction *new_action;\n"
"  GSimpleAction *quit_action;\n"
"  GSimpleAction *state_action;\n"
"  GSimpleAction *awesome_action;\n"
"\n"
"  GtkBuilder *builder;\n"
"\n"
"  GError **error;\n"
"\n"
"  /* Begin creating the \"new\" action.\n"
"   * Note that it is an action without a state.\n"
"   */\n"
"  new_action = g_simple_action_new (\"new\", NULL);\n"
"  g_signal_connect (new_action, \"activate\", G_CALLBACK (new_callback), app);\n"
"  /* It is added to the overall application */\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (new_action));\n"
"\n"
"  /* Begin creating the \"quit\" action.\n"
"   * Note that it is an action without a state.\n"
"   */\n"
"  quit_action = g_simple_action_new (\"quit\", NULL);\n"
"  g_signal_connect (quit_action, \"activate\", G_CALLBACK (quit_callback), app);\n"
"  /* It is added to the overall application */\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (quit_action));\n"
"\n"
"  /* Begin creating the \"state\" action.\n"
"   * Note that it is an action with a state.\n"
"   */\n"
"  GVariantType *type_string2 = g_variant_type_new (\"s\");\n"
"  state_action = g_simple_action_new_stateful (\"state\", type_string2,\n"
"                                               g_variant_new_string (\"off\"));\n"
"  g_signal_connect (state_action, \"activate\", G_CALLBACK (state_callback), app);\n"
"  /* It is added to the overall application */\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (state_action));\n"
"  g_variant_type_free (type_string2);\n"
"\n"
"  /* Begin creating the \"awesome\" action.\n"
"   * Note that it is an action with a state.\n"
"   */\n"
"  awesome_action = g_simple_action_new_stateful (\"awesome\", NULL, g_variant_new_boolean (FALSE));\n"
"  g_signal_connect (awesome_action, \"activate\", G_CALLBACK (awesome_callback), app);\n"
"  /* It is added to the overall application */\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (awesome_action));\n"
"\n"
"  /* A builder to add the User Interface designed with GLADE to the grid: */\n"
"  builder = gtk_builder_new ();\n"
"  /* Get the file (if it is there):\n"
"   * Note: you must make sure that the file is in the current directory for\n"
"   * this to work. The function used here returns a value within our variable\n"
"   * \"error\", and it is equal to zero if an error is indeed found.\n"
"   */\n"
"  gtk_builder_add_from_file (builder, \"menubar.ui\", error);\n"
"  if (error == 0) {\n"
"     g_print (\"File not found.\\n\");\n"
"  }\n"
"\n"
"  /* Extract the menubar */\n"
"  GObject *menubar = gtk_builder_get_object (builder, \"menubar\");\n"
"  gtk_application_set_menubar (GTK_APPLICATION (app), G_MENU_MODEL (menubar));\n"
"\n"
"  /* Extract the appmenu */\n"
"  GObject *appmenu = gtk_builder_get_object (builder, \"appmenu\");\n"
"  gtk_application_set_app_menu (GTK_APPLICATION (app), G_MENU_MODEL (appmenu));\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the application */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""

#: C/menubar.c.page:36(item/p) C/scrolledwindow.c.page:33(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkApplication.html"
"\">GtkApplication</link>"
msgstr ""

#: C/menubar.c.page:39(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk/stable/GtkAboutDialog.html"
"\">GtkAboutDialog</link>"
msgstr ""

#: C/menubar.c.page:40(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-GVariantType.html"
"\">GtkVariantType</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/menubar.py.page:131(media) C/menubar.vala.page:133(media)
msgctxt "_"
msgid ""
"external ref='media/menubar_choices.png' "
"md5='47cdfa12caf85ba20dd3e835bd7f893f'"
msgstr ""
"external ref='media/menubar_choices.png' "
"md5='47cdfa12caf85ba20dd3e835bd7f893f'"

#: C/menubar.py.page:7(info/title)
msgctxt "text"
msgid "MenuBar (Python)"
msgstr ""

#: C/menubar.py.page:27(page/title)
msgid "MenuBar created using XML and GtkBuilder"
msgstr ""

#: C/menubar.py.page:33(section/title) C/menubar.vala.page:28(section/title)
msgid "Create a MenuBar using XML"
msgstr ""

#: C/menubar.py.page:34(section/p) C/menubar.vala.page:29(section/p)
msgid "To create the menubar using XML:"
msgstr ""

#: C/menubar.py.page:36(item/p) C/menubar.vala.page:31(item/p)
msgid "Create <file>menubar.ui</file> using your favorite text editor."
msgstr ""

#: C/menubar.py.page:37(item/p) C/menubar.vala.page:32(item/p)
msgid "Enter the following line at the top of the file:"
msgstr ""

#: C/menubar.py.page:38(item/code) C/menubar.vala.page:33(item/code)
#, no-wrap
msgid ""
"\n"
"&lt;?xml version=\"1.0\"? encoding=\"UTF-8\"?&gt;"
msgstr ""
"\n"
"&lt;?xml version=\"1.0\"? encoding=\"UTF-8\"?&gt;"

#: C/menubar.py.page:41(item/p) C/menubar.vala.page:36(item/p)
msgid ""
"We want to create the interface which will contain our menubar and its "
"submenus. Our menubar will contain <gui>File</gui>, <gui>Edit</gui>, "
"<gui>Choices</gui> and <gui>Help</gui> submenus. We add the following XML "
"code to the file:"
msgstr ""

#: C/menubar.py.page:42(item/code) C/menubar.vala.page:37(item/code)
#, no-wrap
msgid ""
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"menubar\"&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;File&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Edit&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Choices&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Help&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;\n"
msgstr ""
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"menubar\"&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;File&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Edit&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Choices&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Help&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;\n"

#: C/menubar.py.page:44(item/p)
msgid ""
"Now we will create the .py file and use GtkBuilder to import the "
"<file>menubar.ui</file> we just created."
msgstr ""

#: C/menubar.py.page:48(section/title) C/menubar.vala.page:42(section/title)
msgid "Add the MenuBar to the window using GtkBuilder"
msgstr ""

#: C/menubar.py.page:49(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"MenuBar Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # a builder to add the UI designed with Glade to the grid:\n"
"        builder = Gtk.Builder()\n"
"        # get the file (if it is there)\n"
"        try:\n"
"            builder.add_from_file(\"menubar_basis.ui\")\n"
"        except:\n"
"            print \"file not found\"\n"
"            sys.exit()\n"
"\n"
"        # we use the method Gtk.Application.set_menubar(menubar) to add the menubar\n"
"        # to the application (Note: NOT the window!)\n"
"        self.set_menubar(builder.get_object(\"menubar\"))\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/menubar.py.page:50(section/p)
msgid ""
"Now run the python application. It should look like the picture at the top of "
"this page."
msgstr ""

#: C/menubar.py.page:54(section/title) C/menubar.vala.page:50(section/title)
msgid "Add items to the menus"
msgstr ""

#: C/menubar.py.page:55(section/p) C/menubar.vala.page:51(section/p)
msgid ""
"We start off by adding 2 menuitems to the <gui>File</gui> menu: <gui>New</"
"gui> and <gui>Quit</gui>. We do this by adding a <code>section</code> to the "
"the <code>File</code> submenu with these items. The <file>menubar.ui</file> "
"should look like this (lines 6 to 13 inclusive comprise the newly added "
"section):"
msgstr ""

#: C/menubar.py.page:58(listing/title)
msgid "menubar.ui"
msgstr "menubar.ui"

#: C/menubar.py.page:59(listing/code) C/menubar.vala.page:52(section/code)
#, no-wrap
msgid ""
"\n"
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"menubar\"&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;File&lt;/attribute&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name =\"label\"&gt;Quit&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Edit&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Choices&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Help&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;"
msgstr ""

#: C/menubar.py.page:87(section/p)
msgid ""
"Following this pattern, you can now add a <code>Copy</code> and a "
"<code>Paste</code> item to the <code>Edit</code> submenu, and an <code>About</"
"code> item to the <code>Help</code> submenu."
msgstr ""

#: C/menubar.py.page:92(section/title) C/menubar.vala.page:86(section/title)
msgid "Setup actions"
msgstr "Aktionen einrichten"

#: C/menubar.py.page:94(section/p)
msgid ""
"We now create the actions for \"New\" and \"Quit\" connected to a callback "
"function in the Python file; for instance we create \"new\" as:"
msgstr ""

#: C/menubar.py.page:95(section/code)
#, no-wrap
msgid ""
"\n"
"new_action = Gio.SimpleAction.new(\"new\", None)\n"
"new_action.connect(\"activate\", self.new_callback)"
msgstr ""

#: C/menubar.py.page:99(section/p)
msgid "And we create the callback function of \"new\" as"
msgstr ""

#: C/menubar.py.page:100(section/code)
#, no-wrap
msgid ""
"\n"
"def new_callback(self, action, parameter):\n"
"    print \"You clicked \\\"New\\\"\""
msgstr ""

#: C/menubar.py.page:104(section/p)
msgid ""
"Now, in the XML file, we connect the menu items to the actions in the XML "
"file by adding the \"action\" attribute:"
msgstr ""

#: C/menubar.py.page:105(section/code)
#, no-wrap
msgid ""
"\n"
"&lt;item&gt;\n"
"  &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"  &lt;attribute name=\"action\"&gt;app.new&lt;/attribute&gt;\n"
"&lt;/item&gt;"
msgstr ""

#: C/menubar.py.page:111(section/p)
msgid ""
"Note that for an action that is relative to the application, we use the "
"prefix <code>app.</code>; for actions that are relative to the window we use "
"the prefix <code>win.</code>."
msgstr ""

#: C/menubar.py.page:113(section/p)
msgid ""
"Finally, in the Python file, we add the action to the application or to the "
"window - so for instance <code>app.new</code> will be added to the "
"application in the method <code>do_startup(self)</code> as"
msgstr ""

#: C/menubar.py.page:114(section/code)
#, no-wrap
msgid ""
"\n"
"self.add_action(new_action)"
msgstr ""

#: C/menubar.py.page:117(section/p)
msgid ""
"See <link xref=\"signals-callbacks.py\"/> for a more detailed explanation of "
"signals and callbacks."
msgstr ""

#: C/menubar.py.page:121(section/title) C/menubar.vala.page:138(section/title)
msgid "Actions: Application or Window?"
msgstr "Aktionen: Anwendung oder Fenster?"

#: C/menubar.py.page:122(section/p) C/menubar.vala.page:139(section/p)
msgid ""
"Above, we created the \"new\" and \"open\" actions as part of the "
"MyApplication class. Actions which control the application itself, such as "
"\"quit\" should be created similarly."
msgstr ""

#: C/menubar.py.page:124(section/p) C/menubar.vala.page:142(section/p)
msgid ""
"Some actions, such as \"copy\" and \"paste\" deal with the window, not the "
"application. Window actions should be created as part of the window class."
msgstr ""

#: C/menubar.py.page:126(section/p)
msgid ""
"The complete example files contain both application actions and window "
"actions. The window actions are the ones usually included in the <link xref="
"\"gmenu.py\">application menu</link> also. It is not good practice to include "
"window actions in the applcation menu. For demonstration purposes, the "
"complete example files which follow include XML in the UI file which creates "
"the application menu which includes a \"New\" and \"Open\" item, and these "
"are hooked up to the same actions as the menubar items of the same name."
msgstr ""

#: C/menubar.py.page:130(section/title) C/menubar.vala.page:132(section/title)
msgid "Choices submenu and items with state"
msgstr ""

#: C/menubar.py.page:132(section/p)
msgid ""
"Lines 30 to 80 inclusive of the <link xref=\"menubar.py#xml-code\"/> "
"demonstrate the XML code used to create the UI for <gui>Choices</gui> menu."
msgstr ""

#: C/menubar.py.page:134(section/p)
msgid ""
"The actions created so far are <em>stateless</em>, that is they do not retain "
"or depend on a state given by the action itself. The actions we need to "
"create for the Choices submenu, on the other hand, are <em>stateful</em>. An "
"example of creation of a stateful action is:"
msgstr ""

#: C/menubar.py.page:135(section/code)
#, no-wrap
msgid ""
"\n"
"shape_action = Gio.SimpleAction.new_stateful(\"shape\", GLib.VariantType.new('s'), GLib.Variant.new_string('line'))"
msgstr ""

#: C/menubar.py.page:138(section/p)
msgid ""
"where the variables of the method are: name, parameter type (in this case, a "
"string - see <link href=\"http://developer.gnome.org/glib/unstable/glib-"
"GVariantType.html\">here</link> for a complete list of character meanings), "
"initial state (in this case, 'line' - in case of a <code>True</code> boolean "
"value it should be <code>Glib.Variant.new_boolean(True)</code>, and so on, "
"see <link href=\"http://developer.gnome.org/glib/unstable/glib-GVariant.html"
"\">here</link> for a complete list)"
msgstr ""

#: C/menubar.py.page:140(section/p)
msgid ""
"After creating the stateful SimpleAction we connect it to the callback "
"function and we add it to the window (or the application, if it is the case), "
"as before:"
msgstr ""

#: C/menubar.py.page:142(section/code)
#, no-wrap
msgid ""
"\n"
"shape_action.connect(\"activate\", self.shape_callback)\n"
"self.add_action(shape_action)"
msgstr ""

#: C/menubar.py.page:149(section/title) C/menubar.vala.page:153(section/title)
msgid "Complete XML UI file for this example"
msgstr ""

#: C/menubar.py.page:150(section/code) C/menubar.vala.page:154(section/code)
#, no-wrap
msgid ""
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"menubar\"&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;File&lt;/attribute&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.new&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Quit&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Edit&lt;/attribute&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Copy&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;win.copy&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Paste&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;win.paste&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Choices&lt;/attribute&gt;\n"
"      &lt;submenu&gt;\n"
"        &lt;attribute name=\"label\"&gt;Shapes&lt;/attribute&gt;\n"
"          &lt;section&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Line&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;line&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Triangle&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;triangle&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Square&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;square&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Polygon&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;polygon&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Circle&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;circle&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"          &lt;/section&gt;\n"
"      &lt;/submenu&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;On&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.state&lt;/attribute&gt;\n"
"          &lt;attribute name=\"target\"&gt;on&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Off&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.state&lt;/attribute&gt;\n"
"          &lt;attribute name=\"target\"&gt;off&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Awesome&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.awesome&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Help&lt;/attribute&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;About&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;win.about&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"  &lt;/menu&gt;\n"
"  &lt;menu id=\"appmenu\"&gt;\n"
"    &lt;section&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;app.new&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Quit&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"    &lt;/section&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;\n"
msgstr ""

#: C/menubar.py.page:154(section/title)
msgid "Complete Python file for this example"
msgstr ""

#: C/menubar.py.page:155(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import GLib\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"MenuBar Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"\n"
"        # action without a state created (name, parameter type)\n"
"        copy_action = Gio.SimpleAction.new(\"copy\", None)\n"
"        # connected with the callback function\n"
"        copy_action.connect(\"activate\", self.copy_callback)\n"
"        # added to the window\n"
"        self.add_action(copy_action)\n"
"\n"
"        # action without a state created (name, parameter type)\n"
"        paste_action = Gio.SimpleAction.new(\"paste\", None)\n"
"        # connected with the callback function\n"
"        paste_action.connect(\"activate\", self.paste_callback)\n"
"        # added to the window\n"
"        self.add_action(paste_action)\n"
"\n"
"        # action with a state created (name, parameter type, initial state)\n"
"        shape_action = Gio.SimpleAction.new_stateful(\"shape\", GLib.VariantType.new('s'), GLib.Variant.new_string('line'))\n"
"        # connected to the callback function\n"
"        shape_action.connect(\"activate\", self.shape_callback)\n"
"        # added to the window\n"
"        self.add_action(shape_action)\n"
"\n"
"        # action with a state created\n"
"        about_action = Gio.SimpleAction.new(\"about\", None)\n"
"        # action connected to the callback function\n"
"        about_action.connect(\"activate\", self.about_callback)\n"
"        # action added to the application\n"
"        self.add_action(about_action)\n"
"\n"
"    # callback function for copy_action\n"
"    def copy_callback(self, action, parameter):\n"
"        print \"\\\"Copy\\\" activated\"\n"
"\n"
"    # callback function for paste_action\n"
"    def paste_callback(self, action, parameter):\n"
"        print \"\\\"Paste\\\" activated\"\n"
"\n"
"    # callback function for shape_action\n"
"    def shape_callback(self, action, parameter):\n"
"\t\tprint \"Shape is set to\", parameter.get_string()\n"
"\t\t# Note that we set the state of the action!\n"
"\t\taction.set_state(parameter)\n"
"\n"
"    # callback function for about (see the AboutDialog example)\n"
"    def about_callback(self, action, parameter):\n"
"        # a  Gtk.AboutDialog\n"
"        aboutdialog = Gtk.AboutDialog()\n"
"\n"
"        # lists of authors and documenters (will be used later)\n"
"        authors = [\"GNOME Documentation Team\"]\n"
"        documenters = [\"GNOME Documentation Team\"]\n"
"\n"
"        # we fill in the aboutdialog\n"
"        aboutdialog.set_program_name(\"MenuBar Example\")\n"
"        aboutdialog.set_copyright(\"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\")\n"
"        aboutdialog.set_authors(authors)\n"
"        aboutdialog.set_documenters(documenters)\n"
"        aboutdialog.set_website(\"http://developer.gnome.org\")\n"
"        aboutdialog.set_website_label(\"GNOME Developer Website\")\n"
"\n"
"        # to close the aboutdialog when \"close\" is clicked we connect the\n"
"        # \"response\" signal to on_close\n"
"        aboutdialog.connect(\"response\", self.on_close)\n"
"        # show the aboutdialog\n"
"        aboutdialog.show()\n"
"\n"
"    # a callback function to destroy the aboutdialog\n"
"    def on_close(self, action, parameter):\n"
"        action.destroy()\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        # FIRST THING TO DO: do_startup()\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # action without a state created\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        # action connected to the callback function\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        # action added to the application\n"
"        self.add_action(new_action)\n"
"\n"
"        # action without a state created\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        # action connected to the callback function\n"
"        quit_action.connect(\"activate\", self.quit_callback)\n"
"        # action added to the application\n"
"        self.add_action(quit_action)\n"
"\n"
"        # action with a state created\n"
"        state_action = Gio.SimpleAction.new_stateful(\"state\",  GLib.VariantType.new('s'), GLib.Variant.new_string('off'))\n"
"        # action connected to the callback function\n"
"        state_action.connect(\"activate\", self.state_callback)\n"
"        # action added to the application\n"
"        self.add_action(state_action)\n"
"\n"
"        # action with a state created\n"
"        awesome_action = Gio.SimpleAction.new_stateful(\"awesome\", None, GLib.Variant.new_boolean(False))\n"
"        # action connected to the callback function\n"
"        awesome_action.connect(\"activate\", self.awesome_callback)\n"
"        # action added to the application\n"
"        self.add_action(awesome_action)\n"
"\n"
"        # a builder to add the UI designed with Glade to the grid:\n"
"        builder = Gtk.Builder()\n"
"        # get the file (if it is there)\n"
"        try:\n"
"            builder.add_from_file(\"menubar.ui\")\n"
"        except:\n"
"            print \"file not found\"\n"
"            sys.exit()\n"
"\n"
"        # we use the method Gtk.Application.set_menubar(menubar) to add the menubar\n"
"        # and the menu to the application (Note: NOT the window!)\n"
"        self.set_menubar(builder.get_object(\"menubar\"))\n"
"        self.set_app_menu(builder.get_object(\"appmenu\"))\n"
"\n"
"    # callback function for new\n"
"    def new_callback(self, action, parameter):\n"
"        print \"You clicked \\\"New\\\"\"\n"
"\n"
"    # callback function for quit\n"
"    def quit_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Quit\\\"\"\n"
"        sys.exit()\n"
"\n"
"    # callback function for state\n"
"    def state_callback(self, action, parameter):\n"
"        print \"State is set to\", parameter.get_string()\n"
"        action.set_state(parameter)\n"
"\n"
"    # callback function for awesome\n"
"    def awesome_callback(self, action, parameter):\n"
"        action.set_state(GLib.Variant.new_boolean(not action.get_state()))\n"
"        if action.get_state().get_boolean() is True:\n"
"            print \"You checked \\\"Awesome\\\"\"\n"
"        else:\n"
"            print \"You unchecked \\\"Awesome\\\"\"\n"
"\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/menubar.py.page:158(section/title)
msgid "Mnemonics and Accelerators"
msgstr ""

#: C/menubar.py.page:159(section/p) C/menubar.vala.page:161(section/p)
msgid ""
"Labels may contain mnemonics. Mnemonics are underlined characters in the "
"label, used for keyboard navigation. Mnemonics are created by placing an "
"underscore before the mnemonic character. For example \"_File\" instead of "
"just \"File\" in the menubar.ui label attribute."
msgstr ""

#: C/menubar.py.page:160(section/p) C/menubar.vala.page:162(section/p)
msgid ""
"The mnemonics are visible when you press the <key>Alt</key> key. Pressing "
"<keyseq><key>Alt</key><key>F</key></keyseq> will open the <gui>File</gui> "
"menu."
msgstr ""

#: C/menubar.py.page:162(section/p) C/menubar.vala.page:167(section/p)
msgid ""
"Accelerators can be explicitly added in the UI definitions. For example, it "
"is common to be able to quit an application by pressing <keyseq><key>Ctrl</"
"key><key>Q</key></keyseq> or to save a file by pressing <keyseq><key>Ctrl</"
"key><key>S</key></keyseq>. To add an accelerator to the UI definition, you "
"simply need add an \"accel\" attribute to the item."
msgstr ""

#: C/menubar.py.page:163(section/p) C/menubar.vala.page:168(section/p)
msgid ""
"<code mime=\"application/xml\">&lt;attribute name=\"accel\"&gt;&amp;lt;"
"Primary&amp;gt;q&lt;/attribute&gt;</code> will create the <keyseq><key>Ctrl</"
"key><key>Q</key></keyseq> sequence when added to the <code>Quit</code> label "
"item. Here, \"Primary\" refers to the <key>Ctrl</key> key on a PC or the "
"<key>⌘</key> key on a Mac."
msgstr ""

#: C/menubar.py.page:165(section/code) C/menubar.vala.page:170(section/code)
#, no-wrap
msgid ""
"\n"
"&lt;item&gt;\n"
"  &lt;attribute name=\"label\"&gt;_Quit&lt;/attribute&gt;\n"
"  &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"  &lt;attribute name=\"accel\"&gt;&amp;lt;Primary&amp;gt;q&lt;/attribute&gt;\n"
"&lt;/item&gt;"
msgstr ""

#: C/menubar.py.page:173(section/title) C/menubar.vala.page:178(section/title)
msgid "Translatable strings"
msgstr "Übersetzbare Strings"

#: C/menubar.py.page:174(section/p) C/menubar.vala.page:179(section/p)
msgid ""
"Since GNOME applications are being translated into <link href=\"http://l10n."
"gnome.org/languages/\">many languages</link>, it is important that the "
"strings in your application are translable. To make a label translatable, "
"simple set <code>translatable=\"yes\"</code>:"
msgstr ""

#: C/menubar.py.page:178(section/code)
#, no-wrap
msgid "&lt;attribute name=\"label\" translatable=\"yes\"&gt;Quit&lt;/attribute&gt;"
msgstr ""

#: C/menubar.py.page:185(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gio/unstable/GSimpleAction.html"
"\">GSimpleAction</link>"
msgstr ""

#: C/menubar.py.page:186(item/p) C/toolbar_builder.py.page:196(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkBuilder.html"
"\">GtkBuilder</link>"
msgstr ""

#: C/menubar.vala.page:7(info/title)
msgctxt "text"
msgid "MenuBar (Vala)"
msgstr ""

#: C/menubar.vala.page:39(item/p)
msgid ""
"Now we will create the .vala file and use GtkBuilder to import the "
"<file>menubar.ui</file> we just created."
msgstr ""

#: C/menubar.vala.page:43(section/code)
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"MenuBar Example\");\n"
"\t\tthis.set_default_size (200, 200);\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication: Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Setup menubar. */\n"
"\t\t/* Get the UI file. */\n"
"\t\tvar builder = new Gtk.Builder ();\n"
"\t\ttry {\n"
"\t\t\tbuilder.add_from_file (\"menubar_basis.ui\");\n"
"\t\t/* Handle the exception. */\n"
"\t\t} catch (Error e) {\n"
"\t\t\terror (\"Unable to load file: %s\", e.message);\n"
"\t\t}\n"
"\n"
"\t\t/* Get the menubar from the builder. */\n"
"\t\tthis.menubar = builder.get_object (\"menubar\") as MenuModel;\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/menubar.vala.page:44(section/p)
msgid ""
"Now, compile the vala file, and run it. The application should look like the "
"picture at the top of this page."
msgstr ""

#: C/menubar.vala.page:79(section/p)
msgid ""
"Following this pattern, you can now add a <code>Copy</code> and a "
"<code>Paste</code> item to the <code>Edit</code> submenu, and an <code>About</"
"code> item to the <code>Help</code> submenu. We will hold off on adding items "
"to the <link xref=\"menubar.vala#choices\">Choices submenu</link> until "
"further in the tutorial."
msgstr ""

#: C/menubar.vala.page:81(note/p)
msgid ""
"You do not need to recompile the vala program if you only made changes to the "
"UI file. Just run your previously compiled application, and the UI changes "
"will be reflected."
msgstr ""

#: C/menubar.vala.page:87(section/p)
msgid "This is a three step process."
msgstr ""

#: C/menubar.vala.page:89(item/p)
msgid ""
"First we create the ActionEntry array in the MyApplication class. An "
"ActionEntry consists of:"
msgstr ""

#: C/menubar.vala.page:92(item/p)
msgid "the \"action name\" (mandatory)"
msgstr ""

#: C/menubar.vala.page:93(item/p)
msgid ""
"the callback function to connect to the \"activate\" signal of the action (if "
"applicable)"
msgstr ""

#: C/menubar.vala.page:94(item/p)
msgid ""
"the type of the parameter that must be passed to the activate function for "
"the action (if applicable)"
msgstr ""

#: C/menubar.vala.page:95(item/p)
msgid "the initial state for this action (if applicable)"
msgstr ""

#: C/menubar.vala.page:96(item/p)
msgid "the callback to connect to \"change-state\" signal (if applicable)"
msgstr ""

#: C/menubar.vala.page:98(item/code)
#, no-wrap
msgid ""
"\n"
"const ActionEntry[] actions = {\n"
"    { \"new\", new_cb }, // {\"action name\", callback_function}\n"
"    { \"quit\", quit_cb }\n"
"};"
msgstr ""

#: C/menubar.vala.page:105(item/p)
msgid "Second, we create the callback functions the actions are connected to."
msgstr ""

#: C/menubar.vala.page:106(item/code)
#, no-wrap
msgid ""
"\n"
"void new_cb (SimpleAction action, Variant? parameter) {\n"
"    print (\"You clicked \\\"New\\\"\\n\");\n"
"    //new MyWindow (this).show ();\n"
"}\n"
"\n"
"void quit_cb (SimpleAction action, Variant? parameter) {\n"
"    print (\"You clicked \\\"Quit\\\"\\n\");\n"
"    //this.quit ();  **Bug #674090**\n"
"}"
msgstr ""

#: C/menubar.vala.page:117(item/p)
msgid ""
"And lastly, we connect the menu items to the actions in the XML file by "
"adding the \"action\" attribute:"
msgstr ""

#: C/menubar.vala.page:118(item/code)
#, no-wrap
msgid ""
"\n"
"&lt;item&gt;\n"
"  &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"  &lt;attribute name=\"action\"&gt;app.new&lt;/attribute&gt;\n"
"&lt;/item&gt;\n"
"&lt;item&gt;\n"
"  &lt;attribute name=\"label\"&gt;Quit&lt;/attribute&gt;\n"
"  &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"&lt;/item&gt;"
msgstr ""

#: C/menubar.vala.page:134(section/p)
msgid ""
"Lines 30 to 80 inclusive of the <link xref=\"menubar.vala#xml-code\"/> "
"demonstrate the XML code used to create the UI for <gui>Choices</gui> menu."
msgstr ""

#: C/menubar.vala.page:145(section/p)
msgid ""
"The complete example files contain both application actions and window "
"applications. The window actions are the ones usually included in the <link "
"xref=\"gmenu.vala\">application menu</link> also. It is not good practice to "
"include window actions in the applcation menu. For demonstration purposes, "
"the complete example files which follow include XML in the UI file which "
"creates the application menu which includes a \"New\" and \"Open\" item, and "
"these are hooked up to the same actions as the menubar items of the same name."
msgstr ""

#: C/menubar.vala.page:156(section/title)
msgid "Complete Vala file for this example"
msgstr ""

#: C/menubar.vala.page:157(section/code)
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Callback functions for the window actions. */\n"
"\tvoid copy_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"\\\"Copy\\\" activated\\n\");\n"
"\t}\n"
"\n"
"\tvoid paste_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"\\\"Paste\\\" activated\\n\");\n"
"\t}\n"
"\n"
"\tvoid shape_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"shape is set to %s\\n\", parameter.get_string(null));\n"
"\t\taction.set_state (parameter);\n"
"\t}\n"
"\n"
"\t/* Create the window actions. */\n"
"\tconst ActionEntry[] actions = {\n"
"\t\t/*{ \"action name\", cb to connect to \"activate\" signal, parameter type,\n"
"\t\t     initial state, cb to connect to \"change-state\" signal } */\n"
"\t\t{ \"copy\", copy_cb },\n"
"\t\t{ \"paste\", paste_cb },\n"
"\t\t{ \"shape\", shape_cb, \"s\", \"'line'\"}\n"
"\t};\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"MenuBar Example\");\n"
"\t\tthis.set_default_size (200, 200);\n"
"\n"
"\t\t/* Setup window actions. */\n"
"\t\tthis.add_action_entries (actions, this);\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication: Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\t/* Callback functions for the application actions. */\n"
"\tvoid new_cb (SimpleAction action, Variant? parameter) {\n"
"\t\t//new MyWindow (this).show ();\n"
"\t\tprint (\"You clicked \\\"New\\\"\\n\");\n"
"\t}\n"
"\n"
"\tvoid quit_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"Quit\\\"\\n\");\n"
"\t\t//this.quit ();  **Bug #674090**\n"
"\t}\n"
"\n"
"\tvoid awesome_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tvar active = action.get_state ().get_boolean ();\n"
"\t\taction.set_state (new Variant.boolean (!active));\n"
"\t\tif (active)\n"
"\t\t\tprint (\"You unchecked \\\"Awesome\\\"\\n\");\n"
"\t\telse\n"
"\t\t\tprint (\"You checked \\\"Awesome\\\"\\n\");\n"
"\t}\n"
"\n"
"\tvoid state_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"state is set to %s\\n\", parameter.get_string(null));\n"
"\t\taction.set_state (parameter);\n"
"\t}\n"
"\n"
"\t/* Create the application actions. */\n"
"\tconst ActionEntry[] actions = {\n"
"\t\t{ \"new\", new_cb },\n"
"\t\t{ \"quit\", quit_cb },\n"
"\t\t{ \"awesome\", awesome_cb, null, \"false\" },\n"
"\t\t{ \"state\", state_cb, \"s\", \"'off'\" }\n"
"\t};\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Setup application actions. */\n"
"\t\tthis.add_action_entries (actions, this);\n"
"\n"
"\t\t/* Setup menubar and app_menu. */\n"
"\t\t/* Get the UI file. */\n"
"\t\tvar builder = new Gtk.Builder ();\n"
"\t\ttry {\n"
"\t\t\tbuilder.add_from_file (\"menubar.ui\");\n"
"\t\t} catch (Error e) {\n"
"\t\t\terror (\"Unable to load file: %s\", e.message);\n"
"\t\t}\n"
"\n"
"\t\t/* Get the menubar from the builder. */\n"
"\t\tthis.menubar = builder.get_object (\"menubar\") as MenuModel;\n"
"\n"
"\t\t/* Get the app_menu from the builder. */\n"
"\t\tthis.app_menu = builder.get_object (\"appmenu\") as MenuModel;\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/menubar.vala.page:160(section/title)
msgid "Mnemonics"
msgstr ""

#: C/menubar.vala.page:166(section/title)
msgid "Accelerators"
msgstr ""

#: C/menubar.vala.page:182(section/p)
msgid ""
"<code mime=\"application/xml\">&lt;attribute name=\"label\" translatable=\"yes"
"\"&gt;Quit&lt;/attribute&gt;</code>"
msgstr ""

#: C/menubar.vala.page:191(item/p)
msgid ""
"<link href=\"http://valadoc.org/gio-2.0/GLib.ActionEntry.html\">Glib."
"ActionEntry</link>"
msgstr ""

#: C/menubar.vala.page:192(item/p)
msgid ""
"<link href=\"http://valadoc.org/gio-2.0/Gtk.Builder.html\">Gtk.Builder</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/menubutton.js.page:21(media) C/menubutton.py.page:28(media)
#: C/menubutton.vala.page:21(media)
msgctxt "_"
msgid ""
"external ref='media/menubutton.png' md5='1feb7b836a522c3007079d4420621d9d'"
msgstr ""
"external ref='media/menubutton.png' md5='1feb7b836a522c3007079d4420621d9d'"

#: C/menubutton.js.page:7(info/title)
#, fuzzy
#| msgid "JavaScript"
msgctxt "text"
msgid "MenuButton (JavaScript)"
msgstr "JavaScript"

#: C/menubutton.js.page:12(credit/name)
msgid "Anna Zacchi"
msgstr "Anna Zacchi"

#: C/menubutton.js.page:17(info/desc) C/menubutton.py.page:24(info/desc)
#: C/menubutton.vala.page:17(info/desc)
msgid "A widget that shows a menu when clicked on"
msgstr ""

#: C/menubutton.js.page:20(page/title) C/menubutton.py.page:27(page/title)
#: C/menubutton.vala.page:20(page/title)
msgid "MenuButton"
msgstr ""

#: C/menubutton.js.page:22(page/p) C/menubutton.py.page:29(page/p)
#: C/menubutton.vala.page:22(page/p)
msgid ""
"The GtkMenuButton widget is used to display a menu when clicked on. This menu "
"can be provided either as a GtkMenu, or an abstract GMenuModel. The "
"GtkMenuButton widget can hold any valid child widget. That is, it can hold "
"almost any other standard GtkWidget. The most commonly used child is the "
"provided GtkArrow."
msgstr ""

#: C/menubutton.js.page:26(note/p) C/menubutton.py.page:31(note/p)
#: C/menubutton.vala.page:26(note/p)
msgid "You need to be running GNOME 3.6 for the MenuButton to work."
msgstr ""

#: C/menubutton.js.page:27(page/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class ({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application ({ application_id: 'org.example.myapp',\n"
"                                                  flags: Gio.ApplicationFlags.FLAGS_NONE });\n"
"\n"
"       //connect to 'activate' and 'startup' signals to the callback functions\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI (in this case it's just the ApplicationWindow)\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"Welcome to GNOME\" });\n"
"        this._window.set_default_size(600, 400);\n"
"        this.grid = new Gtk.Grid();\n"
"        this._window.add(this.grid);\n"
"\n"
"\n"
"        this._menuButton = new Gtk.MenuButton();\n"
"        this.grid.attach(this._menuButton, 0, 0, 1, 1 );\n"
"        this.menu = new Gtk.Menu.new_from_model(this.menuModel);\n"
"\n"
"        this.menu.show();\n"
"        this._menuButton.set_menu(this.menu);\n"
"        this._menuButton.set_size_request(80, 35);\n"
"        this._menuButton.show();\n"
"\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    _showNew: function() {\n"
"    print(\"New Menu. It doesn't do anything. It is only a demonstration.\");\n"
"    },\n"
"\n"
"    _showAbout: function() {\n"
"        print(\"No AboutDialog here.  This is only a demonstration.\");\n"
"    },\n"
"\n"
"    //create the menu items and connect the signals to the callback functions.\n"
"    _initMenus: function() {\n"
"        let newAction = new Gio.SimpleAction({ name: 'new' });\n"
"        newAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showNew();\n"
"            }));\n"
"        this.application.add_action(newAction);\n"
"\n"
"        let aboutAction = new Gio.SimpleAction({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        let quitAction = new Gio.SimpleAction({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"         this.application.add_action(quitAction);\n"
"\n"
"        this.menuModel = new Gio.Menu();\n"
"\n"
"        this.menuItemNew = Gio.MenuItem.new(\"New\", 'app.new');\n"
"        this.menuItemAbout = Gio.MenuItem.new(\"About\", 'app.about');\n"
"        this.fileMenuItem = Gio.MenuItem.new(\"Other\", null);\n"
"\n"
"        this.menuModel.append_item(this.menuItemNew);\n"
"        this.menuModel.append_item(this.menuItemAbout);\n"
"\n"
"        //submenu\n"
"        this.subMenu = new Gio.Menu();\n"
"        this.fileMenuItem.set_submenu(this.subMenu);\n"
"        this.menuItemQuit = Gio.MenuItem.new(\"Quit\", 'app.quit');\n"
"        this.subMenu.append_item(this.menuItemQuit);\n"
"        this.menuModel.append_item(this.fileMenuItem);\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    //callback function for 'startup' signal\n"
"    _onStartup: function() {\n"
"        //You must call _initMenus() before calling _buildUI().\n"
"        this._initMenus();\n"
"        this._buildUI();\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application();\n"
"app.application.run(ARGV);\n"
msgstr ""

#: C/menubutton.js.page:32(item/p) C/menubutton.vala.page:32(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/3.5/gtk3-GtkMenuButton.html"
"\">MenuButton</link>"
msgstr ""

#: C/menubutton.py.page:7(info/title)
msgctxt "text"
msgid "MenuButton"
msgstr ""

#: C/menubutton.py.page:37(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Menubutton Example\", application=app)\n"
"        self.set_default_size(600, 400)\n"
"\n"
"        grid = Gtk.Grid()\n"
"        \n"
"        # a menubutton\n"
"        menubutton = Gtk.MenuButton()\n"
"        menubutton.set_size_request(80, 35)\n"
"        \n"
"        grid.attach(menubutton, 0, 0, 1, 1)\n"
"        \n"
"        # a menu with two actions\n"
"        menumodel = Gio.Menu()\n"
"        menumodel.append(\"New\", \"app.new\")\n"
"        menumodel.append(\"About\", \"win.about\")\n"
"\n"
"        # a submenu with one action for the menu\n"
"        submenu = Gio.Menu()\n"
"        submenu.append(\"Quit\", \"app.quit\")\n"
"        menumodel.append_submenu(\"Other\", submenu)\n"
"\n"
"        # the menu is set as the menu of the menubutton\n"
"        menubutton.set_menu_model(menumodel)\n"
"\n"
"        # the action related to the window (about)\n"
"        about_action = Gio.SimpleAction.new(\"about\", None)\n"
"        about_action.connect(\"activate\", self.about_callback)\n"
"        self.add_action(about_action)\n"
"        \n"
"        self.add(grid)\n"
"\n"
"    # callback for \"about\"\n"
"    def about_callback(self, action, parameter):\n"
"        print \"You clicked \\\"About\\\"\"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        #  the actions related to the application\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        self.add_action(new_action)\n"
"        \n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_callback)\n"
"        self.add_action(quit_action)\n"
"    \n"
"    # callback functions for the actions related to the application\n"
"    def new_callback(self, action, parameter):\n"
"        print \"You clicked \\\"New\\\"\"\n"
"\n"
"    def quit_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Quit\\\"\"\n"
"        self.quit()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/menubutton.py.page:41(section/title)
msgid "Useful methods for a MenuButton widget"
msgstr ""

#: C/menubutton.py.page:42(section/p)
msgid ""
"In line 33 the signal <code>\"activate\"</code> from the action "
"<code>about_action</code> is connected to the callback function "
"<code>about_callback()</code> using <code><var>action</var>.connect"
"(<var>signal</var>, <var>callback function</var>)</code>. See <link xref="
"\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""

#: C/menubutton.py.page:44(section/p)
msgid ""
"The positioning of the menu is determined by the \"direction\" property of "
"the menu button and the \"halign\" or \"valign\" properties of the menu. For "
"example, when the direction is <code>Gtk.ArrowType.DOWN</code> (other option: "
"<code>UP</code>) and the horizontal alignment is <code>Gtk.Align.START</code> "
"(other options: <code>CENTER</code> and <code>END</code>), the menu will be "
"positioned below the button, with the starting edge (depending on the text "
"direction) of the menu aligned with the starting edge of the button. If there "
"is not enough space below the button, the menu is popped up above the button "
"instead. If the alignment would move part of the menu offscreen, it is "
"'pushed in'."
msgstr ""

#: C/menubutton.py.page:46(section/p)
msgid ""
"In the case of vertical alignment, the possible ArrowType directions are "
"<code>LEFT</code> and <code>RIGHT</code> and the vertical alignment is again "
"<code>START</code>, <code>CENTER</code> or <code>END</code>."
msgstr ""

#: C/menubutton.py.page:48(section/p)
msgid ""
"<code>set_align_widget(alignment)</code> and <code>set_direction(direction)</"
"code> can be used to set these properties."
msgstr ""

#: C/menubutton.py.page:55(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkMenuButton.html"
"\">MenuButton</link>"
msgstr ""

#: C/menubutton.vala.page:7(info/title)
msgctxt "text"
msgid "MenuButton (Vala)"
msgstr ""

#: C/menubutton.vala.page:27(page/code)
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"MenuButton Example\");\n"
"\t\tthis.set_default_size (600, 400);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\n"
"\t\tvar menubutton = new Gtk.MenuButton();\n"
"\t\tmenubutton.set_size_request (80, 35);\n"
"\n"
"\t\tvar menumodel = new Menu ();\n"
"\t\tmenumodel.append (\"New\", \"app.new\");\n"
"\t\tmenumodel.append (\"About\", \"win.about\");\n"
"\n"
"\t\t/* We create the last item as a MenuItem, so that\n"
"\t\t * a submenu can be appended to this menu item.\n"
"\t\t */\n"
"\t\tvar submenu = new Menu ();\n"
"\t\tmenumodel.append_submenu (\"Other\", submenu);\n"
"\t\tsubmenu.append (\"Quit\", \"app.quit\");\n"
"\t\tmenubutton.set_menu_model (menumodel);\n"
"\n"
"\t\tvar about_action = new SimpleAction (\"about\", null);\n"
"\t\tabout_action.activate.connect (this.about_cb);\n"
"\t\tthis.add_action (about_action);\n"
"\n"
"\t\tthis.add(grid);\n"
"\t\tgrid.attach(menubutton, 0, 0, 1, 1);\n"
"\t}\n"
"\n"
"\tvoid about_cb (SimpleAction simple, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"About\\\"\\n\");\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the 'startup' signal of GLib.Application. */\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\tvar new_action = new SimpleAction (\"new\", null);\n"
"\t\tnew_action.activate.connect (this.new_cb);\n"
"\t\tthis.add_action (new_action);\n"
"\n"
"\t\tvar quit_action = new SimpleAction (\"quit\", null);\n"
"\t\tquit_action.activate.connect (this.quit);\n"
"\t\tthis.add_action (quit_action);\n"
"\t}\n"
"\n"
"\tvoid new_cb (SimpleAction simple, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"New\\\"\\n\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/message-board.c.page:40(media)
msgctxt "_"
msgid ""
"external ref='media/message-board.ogv' md5='beb80c4538776dc2cdd26c95abea5027'"
msgstr ""
"external ref='media/message-board.ogv' md5='beb80c4538776dc2cdd26c95abea5027'"

#: C/message-board.c.page:7(info/title)
msgctxt "text"
msgid "Message board (C)"
msgstr ""

#: C/message-board.c.page:10(info/desc)
msgid "A simple program using WebKitGTK+ and the DOM."
msgstr ""

#: C/message-board.c.page:25(page/title)
msgid "Message board"
msgstr ""

#: C/message-board.c.page:30(item/p)
msgid "How to display a web page with WebKit."
msgstr ""

#: C/message-board.c.page:31(item/p)
msgid ""
"How to manipulate the contents of a web page using WebKit's DOM functions."
msgstr ""

#: C/message-board.c.page:34(synopsis/p)
msgid ""
"This tutorial assumes you are familiar with the C programming language and "
"have a basic understanding of GTK+, including how to create and place widgets "
"and how to connect callback functions to signals. See <link xref=\"image-"
"viewer.c\"/> to learn the basics of GTK+."
msgstr ""

#: C/message-board.c.page:47(section/p)
msgid ""
"The GNOME platform includes WebKitGTK+, built on top of the powerful WebKit "
"HTML framework. WebKit is used throughout GNOME, not just to view web pages "
"on the Internet, but also to create rich user interfaces that can be easily "
"styled with CSS."
msgstr ""

#: C/message-board.c.page:52(section/p)
msgid ""
"In this tutorial, you will create a simple message board using WebKit. The "
"message board will allow you to enter some text and have it added to a list "
"of messages in HTML. Before you begin, you need to set up a project in Anjuta."
msgstr ""

#: C/message-board.c.page:58(item/p)
msgid ""
"In Anjuta, click <guiseq><gui>File</gui><gui>New</gui> <gui>Project</gui></"
"guiseq> to open the new project assistant."
msgstr ""

#: C/message-board.c.page:60(item/p)
msgid ""
"Select <gui>GTK+ (simple)</gui> on the <gui>C</gui> tab, and click "
"<gui>Continue</gui>."
msgstr ""

#: C/message-board.c.page:62(item/p)
msgid ""
"Fill out your details on the <gui>Basic information</gui> page. Use "
"<input>message-board</input> for the project name. Click <gui>Continue</gui>."
msgstr ""

#: C/message-board.c.page:65(item/p)
msgid ""
"Disable the <gui>Use GtkBuilder for user interface</gui> option as this "
"tutorial builds the user-interface manually."
msgstr ""

#: C/message-board.c.page:68(item/p)
msgid ""
"You need to tell Anjuta you're using WebKitGTK+ on this project. On the "
"<gui>Project options</gui> page, select <gui>Configure external packages</"
"gui>. Click <gui>Continue</gui>. On the <gui>Configure external packages</"
"gui> page, check <gui>webkitgtk-3.0</gui>."
msgstr ""

#: C/message-board.c.page:74(section/p)
msgid ""
"After you finish the new project assistant, open the file <file>src/main.c</"
"file> from either the <gui>Project</gui> or the <gui>File</gui> tab. Anjuta "
"will have filled this in with some basic GTK+ code from its templates. Since "
"you are creating a WebKit project, you first need to include the WebKit "
"headers. After the line that includes <code>gtk/gtk.h</code>, add the "
"following line:"
msgstr ""

#: C/message-board.c.page:81(section/code)
#, no-wrap
msgid "#include &lt;webkit/webkit.h&gt;"
msgstr "#include &lt;webkit/webkit.h&gt;"

#: C/message-board.c.page:83(section/p)
msgid ""
"Verify that everything works by building what you have so far. Click "
"<guiseq><gui>Build</gui><gui>Build Project</gui></guiseq> or just press "
"<keyseq><key>Shift</key><key>F7</key></keyseq>. The first time you build, you "
"will be asked for some configure options. Just accept the defaults and click "
"<gui>Execute</gui>."
msgstr ""

#: C/message-board.c.page:89(section/p)
msgid ""
"You should now be able to run the program. Click <guiseq> <gui>Run</"
"gui><gui>Execute</gui></guiseq> or just press <key>F3</key>. You should see "
"an empty window appear."
msgstr ""

#: C/message-board.c.page:95(section/title)
msgid "Lay out your window and web view"
msgstr ""

#: C/message-board.c.page:97(section/p)
msgid ""
"Now that you can show a window, it's time to start working with WebKit. For "
"this tutorial, you'll create a text entry and a web view and pack them both "
"into a window. Find the function <code>create_window</code> and replace it "
"with the following:"
msgstr ""

#: C/message-board.c.page:102(section/code)
#, no-wrap
msgid ""
"\n"
"static GtkWidget*\n"
"create_window (void)\n"
"{\n"
"    GtkWidget *window, *box, *scroll, *view, *entry;\n"
"\n"
"    window = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n"
"    gtk_window_set_default_size (GTK_WINDOW (window), 400, 400);\n"
"    gtk_window_set_title (GTK_WINDOW (window), \"Message Board\");\n"
"    g_signal_connect (window, \"delete-event\", G_CALLBACK (gtk_main_quit), NULL);\n"
"\n"
"    box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 6);\n"
"    gtk_container_set_border_width (GTK_CONTAINER (box), 6);\n"
"    gtk_container_add (GTK_CONTAINER (window), box);\n"
"\n"
"    entry = gtk_entry_new ();\n"
"    gtk_box_pack_start (GTK_BOX (box), entry, FALSE, FALSE, 0);\n"
"\n"
"    scroll = gtk_scrolled_window_new (NULL, NULL);\n"
"    g_object_set (scroll, \"shadow-type\", GTK_SHADOW_IN, NULL);\n"
"    gtk_box_pack_start (GTK_BOX (box), scroll, TRUE, TRUE, 0);\n"
"\n"
"    view = webkit_web_view_new ();\n"
"    gtk_container_add (GTK_CONTAINER (scroll), view);\n"
"    webkit_web_view_load_string (WEBKIT_WEB_VIEW (view),\n"
"                                 \"&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\",\n"
"                                 \"text/html\",\n"
"                                 \"UTF-8\",\n"
"                                 NULL);\n"
"\n"
"    gtk_widget_show_all (GTK_WIDGET (box));\n"
"    return window;\n"
"}\n"
msgstr ""

#: C/message-board.c.page:137(section/p)
msgid ""
"You first create a <code>GtkWindow</code> object and set its title and "
"default size. You also connect the <code>gtk_main_quit</code> function to the "
"<code>delete-event</code> signal. The <code>delete-event</code> signal is "
"emitted when the window is closed. The <code>gtk_main_quit</code> function is "
"part of GTK, and it quits the application."
msgstr ""

#: C/message-board.c.page:143(section/p)
msgid ""
"You then create a vertical box and add it to the window. A window can only "
"hold a single child widget, so you need to use a box to add multiple widgets. "
"The second argument to <code>gtk_box_new</code> sets the amount of padding "
"(in pixels) between each child, and the next line puts a six-pixel border "
"around the entire thing."
msgstr ""

#: C/message-board.c.page:149(section/p)
msgid ""
"You next create a <code>GtkEntry</code> object and pack it into the box. The "
"third and fourth arguments to <code>gtk_box_pack_start</code> specify that "
"the entry shouldn't take up any extra space the box has available. The fourth "
"argument is the amount of padding you want around the entry. In this case, "
"you set the padding to zero, because you're allowing the box to handle all "
"the padding."
msgstr ""

#: C/message-board.c.page:156(section/p)
msgid ""
"Before you add a web view, you have to create a scrolled window to put it "
"inside of. The scrolled window will place scrollbars on the right and bottom "
"when necessary, and prevent your web view from filling your entire screen. "
"This time, you pass <code>TRUE</code> and <code>TRUE</code> to "
"<code>gtk_box_pack_start</code> to allow the scrolled window (and thus, the "
"web view) to use any extra space available in the box."
msgstr ""

#: C/message-board.c.page:163(section/p)
msgid ""
"Finally, you create a <code>WebKitWebView</code> and add it to the scrolled "
"window. Then load a very basic HTML page into the web view by calling "
"<code>webkit_web_view_load_string</code> with the following arguments:"
msgstr ""

#: C/message-board.c.page:169(item/title)
msgid "<code>WEBKIT_WEB_VIEW (view)</code>"
msgstr ""

#: C/message-board.c.page:170(item/p)
msgid ""
"The view itself. Because <code>view</code> is typed as a <code>GtkWidget*</"
"code>, you have to use <code>WEBKIT_WEB_VIEW</code> to safely cast the object."
msgstr ""

#: C/message-board.c.page:175(item/title)
msgid "<code>\"&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\"</code>"
msgstr "<code>\"&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\"</code>"

#: C/message-board.c.page:176(item/p)
msgid "The simplest HTML file you could possibly write."
msgstr ""

#: C/message-board.c.page:179(item/title)
msgid "<code>\"text/html\"</code>"
msgstr "<code>\"text/html\"</code>"

#: C/message-board.c.page:180(item/p)
msgid ""
"The MIME type of the content you provided. In this case, you're using plain "
"HTML."
msgstr ""

#: C/message-board.c.page:184(item/title)
msgid "<code>\"UTF-8\"</code>"
msgstr "<code>\"UTF-8\"</code>"

#: C/message-board.c.page:185(item/p)
msgid ""
"The character encoding of the content you provided. Although you only used "
"ASCII characters, it's a good idea to specify UTF-8. UTF-8 is used as the "
"default encoding throughout the GNOME platform."
msgstr ""

#: C/message-board.c.page:190(item/title)
msgid "<code>NULL</code>"
msgstr "<code>NULL</code>"

#: C/message-board.c.page:191(item/p)
msgid ""
"The base URI. You don't need it in this simple example, but you might want to "
"provide a <sys>file:</sys> URI if you add images or other features where you "
"want to use relative URI references."
msgstr ""

#: C/message-board.c.page:198(note/p)
msgid ""
"Every time you add a widget, you have to call <code>gtk_widget_show</code> on "
"it for it to be visible. If you call <code>gtk_widget_show_all</code> on a "
"container widget like a <code>GtkBox</code>, GTK+ will automatically show all "
"the widgets inside the container, to any depth. Sometimes you don't want to "
"call <code>gtk_widget_show_all</code>, such as when you want to dynamically "
"hide and show some widgets in response to events."
msgstr ""

#: C/message-board.c.page:206(section/p)
msgid ""
"Finally, you have to call <code>gtk_widget_show_all</code> on the box. "
"Otherwise, none of the widgets you created will be visible. (The window is "
"shown in the <code>main</code> function with <code>gtk_widget_show</code>.)"
msgstr ""

#: C/message-board.c.page:210(section/p)
msgid ""
"Build and run the message board again. You should see a window with a text "
"entry and a web view. It doesn't do anything yet because the text entry and "
"the web view don't know anything about each other."
msgstr ""

#: C/message-board.c.page:216(section/title)
msgid "Hook up signals"
msgstr ""

#: C/message-board.c.page:218(section/p)
msgid ""
"Now you want to make the message board actually <em>do</em> something when "
"you enter text into the text entry. To do this, connect a callback function "
"to the <code>activate</code> signal of <code>entry</code>. GTK+ emits the "
"<code>activate</code> signal whenever the user presses <key>Enter</key> in "
"the entry. Add the following into <code>create_window</code>, anywhere after "
"both <code>entry</code> and <code>view</code> have been defined:"
msgstr ""

#: C/message-board.c.page:225(section/code)
#, no-wrap
msgid ""
"\n"
"g_signal_connect (entry, \"activate\", G_CALLBACK (entry_activate_cb), view);\n"
msgstr ""

#: C/message-board.c.page:229(section/p)
msgid ""
"You then have to actually define <code>entry_activate_cb</code>. Define it as "
"follows, anywhere above <code>create_window</code>:"
msgstr ""

#: C/message-board.c.page:232(section/code)
#, no-wrap
msgid ""
"\n"
"static void\n"
"entry_activate_cb (GtkEntry *entry, WebKitWebView *view)\n"
"{\n"
"    WebKitDOMDocument *document;\n"
"    WebKitDOMElement *body, *div;\n"
"\n"
"    document = webkit_web_view_get_dom_document (view);\n"
"    body = webkit_dom_document_query_selector (document, \"body\", NULL);\n"
"    div = webkit_dom_document_create_element (document, \"div\", NULL);\n"
"    webkit_dom_node_set_text_content (WEBKIT_DOM_NODE (div),\n"
"                                      gtk_entry_get_text (entry),\n"
"                                      NULL);\n"
"    webkit_dom_node_append_child (WEBKIT_DOM_NODE (body),\n"
"                                  WEBKIT_DOM_NODE (div),\n"
"                                  NULL);\n"
"    gtk_entry_set_text (entry, \"\");\n"
"}\n"
msgstr ""

#: C/message-board.c.page:252(section/p)
msgid ""
"The first thing you do is get a <code>WebKitDOMDocument</code> object that "
"represents the HTML document displayed in <code>view</code>. The DOM classes "
"and methods in WebKit allow you to inspect and manipulate the HTML document, "
"and work very similarly to the DOM APIs you might already know from "
"JavaScript."
msgstr ""

#: C/message-board.c.page:258(section/p)
msgid ""
"Once you have the document, you want to get the <code>body</code> element so "
"that you can add <code>div</code> elements to it. The "
"<code>webkit_dom_document_query_selector</code> function lets you find an "
"element in the document using CSS selectors. This keeps you from having to "
"write tedious loops to traverse the document."
msgstr ""

#: C/message-board.c.page:269(section/p)
msgid ""
"Next, you create a new <code>div</code> element to hold the message. Every "
"element you create has to be attached to a document, so the function to "
"create an element takes the <code>WebKitDOMDocument</code> as its first "
"arguments. You then set the text content of the element to the contents of "
"the text entry. Because <code>gtk_entry_get_text</code> returns a <code>const "
"gchar*</code>, you don't have to free the result."
msgstr ""

#: C/message-board.c.page:282(section/p)
msgid ""
"Finally, you append the new <code>div</code> element to the body and clear "
"out the text entry so you can type something new. Build and run the program "
"again and test it for yourself."
msgstr ""

#: C/message-board.c.page:289(section/title)
msgid "Make it look better with CSS"
msgstr ""

#: C/message-board.c.page:291(section/p)
msgid ""
"At this point, your program is completely functional, but not very pretty. "
"You can style the message display with CSS, just like you can with any other "
"HTML page. There are many ways you could attach some CSS to the page: You "
"could add it in the initial HTML document. You could inline it in the "
"<code>style</code> attribute of the <code>div</code> elements. You could even "
"programmatically construct it using the DOM APIs."
msgstr ""

#: C/message-board.c.page:298(section/p)
msgid ""
"In this tutorial, you'll attach the CSS using the <code>user-stylesheet-uri</"
"code> property of the <code>WebKitWebSetting</code> object attached to your "
"web view. In a more complete application, you would want to save and load "
"your HTML file. Keeping the style information outside the actual HTML means "
"that you can change the styling completely within your application, without "
"having to change users' files. You would normally just install a file along "
"with your application, but just to keep everything in one file for this demo, "
"we'll use a trick called a data URI. First, define the CSS as a static string "
"near the top of your file."
msgstr ""

#: C/message-board.c.page:307(section/code)
#, no-wrap
msgid ""
"\n"
"static const guchar CSS[] =\n"
"\"body { margin: 0; padding: 0; }\\n\"\n"
"\"div { \"\n"
"\" -webkit-border-radius: 2px;\"\n"
"\" background: -webkit-gradient(linear, 0% 100%, 0% 0%,\"\n"
"\" from(#f1f1f1), to(white));\"\n"
"\" border: solid 1px #c6c6c6;\"\n"
"\" -webkit-box-shadow: 0px 0px 2px #c6c6c6;\"\n"
"\" margin: 12px; padding: 6px;\"\n"
"\"}\";\n"
msgstr ""

#: C/message-board.c.page:320(section/p)
msgid ""
"All you have in this example are <code>div</code> elements inside a "
"<code>body</code> element. If you created more complicated HTML, you could "
"use whatever CSS is necessary. In fact, if you're comfortable with CSS, you "
"should trying changing this to something you like better."
msgstr ""

#: C/message-board.c.page:325(section/p)
msgid ""
"To apply the CSS, you set the <code>user-stylesheet-uri</code> in the "
"<code>create_window</code> function, anywhere after <code>view</code> has "
"already been defined."
msgstr ""

#: C/message-board.c.page:331(section/code)
#, no-wrap
msgid ""
"\n"
"tmp = g_base64_encode (CSS, strlen((gchar *) CSS));\n"
"css = g_strconcat (\"data:text/css;charset=utf-8;base64,\",\n"
"                   tmp, NULL);\n"
"g_object_set (webkit_web_view_get_settings (WEBKIT_WEB_VIEW (view)),\n"
"              \"user-stylesheet-uri\", css, NULL);\n"
"g_free (css);\n"
"g_free (tmp);\n"
msgstr ""

#: C/message-board.c.page:341(section/p)
msgid ""
"Also, make sure to add variable declarations for <code>tmp</code> and "
"<code>css</code> to the top of <code>create_window</code>."
msgstr ""

#: C/message-board.c.page:344(section/code)
#, no-wrap
msgid ""
"\n"
"gchar *tmp, *css;\n"
msgstr ""
"\n"
"gchar *tmp, *css;\n"

#: C/message-board.c.page:348(section/p)
msgid ""
"A data URI starts with <sys>data:</sys> and some information about the "
"content type and how the data is encoded. The actual data follows after a "
"comma, in this case encoded in Base64. Unlike other URI schemes like "
"<sys>http:</sys>, <sys>ftp:</sys>, and <sys>file:</sys>, the <sys>data:</sys> "
"URI scheme doesn't specify where to find a file to load. Rather, it gives the "
"entire contents of the file."
msgstr ""

#: C/message-board.c.page:355(section/p)
msgid ""
"The code above first encodes your CSS definitions in Base64, then combines "
"that with a fixed string to create a data URI. The <code>g_strconcat</code> "
"function can take any number of string arguments and concatenate them all "
"together, so you have to pass <code>NULL</code> as the final argument so it "
"knows when to stop. And don't forget to free those temporary strings after "
"you set the stylesheet property."
msgstr ""

#: C/message-board.c.page:362(section/p)
msgid ""
"Build and run the program again. It should now work exactly the same as at "
"the end of the last section, except the messages will be nicely styled with a "
"border and a subtle background gradient."
msgstr ""

#: C/message-board.c.page:368(section/title)
msgid "Learn more"
msgstr "Mehr erfahren"

#: C/message-board.c.page:370(section/p)
msgid ""
"This tutorial showed you how to create a basic application using GTK+ and "
"WebKit, including showing a document and manipulating its contents. To create "
"a real application, you probably want to do a little bit more. Try adding "
"features on your own. Here are a few ideas:"
msgstr ""

#: C/message-board.c.page:376(item/p)
msgid ""
"If you're comfortable with CSS, try changing the style of the message "
"display. CSS is easy to get started with, but increasingly more powerful. "
"There is a wealth of CSS tutorials on the Internet, and just about everything "
"you can do on the web, you can do in this application."
msgstr ""

#: C/message-board.c.page:382(item/p)
msgid ""
"Right now, you lose all your messages whenever you close the message board. "
"Try saving the HTML contents after each post, and loading the saved file (if "
"it exists) on startup."
msgstr ""

#: C/message-board.c.page:390(item/p)
msgid ""
"If you keep your messages around for a long time, you'll start wondering when "
"you posted them. Add a timestamp to each message when it's posted. You'll "
"probably want to create some additional child <code>div</code> elements with "
"different classes that you can style in the CSS."
msgstr ""

#: C/message-board.c.page:397(item/p)
msgid ""
"This program keeps messages around forever. Think about ways you could allow "
"the user to delete messages. Perhaps you want messages to disappear "
"automatically after they're too old, or after there are a certain number of "
"messages before them. Or you could add a link in each message to delete it. "
"You could even override the context menu when you right-click on a message. "
"These features involve exploring WebKit's DOM API more."
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/messagedialog.c.page:23(media) C/messagedialog.js.page:24(media)
#: C/messagedialog.py.page:22(media) C/messagedialog.vala.page:21(media)
msgctxt "_"
msgid ""
"external ref='media/messagedialog.png' md5='1956288274018e2386d9cba96a2101de'"
msgstr ""
"external ref='media/messagedialog.png' md5='1956288274018e2386d9cba96a2101de'"

#: C/messagedialog.c.page:7(info/title)
msgctxt "text"
msgid "MessageDialog (C)"
msgstr ""

#: C/messagedialog.c.page:18(info/desc) C/messagedialog.py.page:18(info/desc)
#: C/messagedialog.vala.page:17(info/desc)
msgid "A message window"
msgstr ""

#: C/messagedialog.c.page:21(page/title) C/messagedialog.js.page:23(page/title)
#: C/messagedialog.py.page:21(page/title)
#: C/messagedialog.vala.page:20(page/title)
msgid "MessageDialog"
msgstr ""

#: C/messagedialog.c.page:24(page/p) C/messagedialog.vala.page:22(page/p)
msgid "A modal message dialog which can cause the world to explode."
msgstr ""

#: C/messagedialog.c.page:25(note/p)
msgid ""
"To test out the application once it has started running, you can click on the "
"\"Message Dialog\" tab that appears in the top menubar of the screen."
msgstr ""

#: C/messagedialog.c.page:29(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* Callback function in which reacts to the \"response\" signal from the user in\n"
" * the message dialog window.\n"
" * This function is used to interact with the user in the terminal.\n"
" */\n"
"static void\n"
"on_response (GtkDialog *dialog,\n"
"             gint       response_id,\n"
"             gpointer   user_data)\n"
"{\n"
"  /* If the button clicked gives response OK (response_id being -5) */\n"
"  if (response_id == GTK_RESPONSE_OK) \n"
"     g_print (\"*boom*\\n\");\n"
"\n"
"  /* If the button clicked gives response CANCEL (response_id being -6) */\n"
"  else if (response_id == GTK_RESPONSE_CANCEL)\n"
"     g_print (\"good choice\\n\");\n"
"\n"
"  /* If the message dialog is destroyed (for example by pressing escape) */\n"
"  else if (response_id == GTK_RESPONSE_DELETE_EVENT)\n"
"     g_print (\"dialog closed or cancelled\\n\");\n"
"\n"
"  /* Destroy the dialog after one of the above actions have taken place */\n"
"  gtk_widget_destroy (GTK_WIDGET (dialog));\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the response signal \"activate\" related to the SimpleAction\n"
" * message_action.\n"
" * This function is used to cause the message dialog window to popup.\n"
" */\n"
"static void\n"
"message_cb (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   /* the parent variable in this case represents the window */\n"
"   GtkWidget *message_dialog;\n"
"   GtkWindow *parent = user_data;\n"
"   \n"
"   /* Create a new message dialog, and set the parameters as follows:\n"
"    * Dialog Flags - make the constructed dialog modal \n"
"    * (modal windows prevent interaction with other windows in the application)\n"
"    * Message Type - nonfatal warning message\n"
"    * Buttons Type - use the ok and cancel buttons\n"
"    * message_format - text that you want the user to see in the window \n"
"    */\n"
"   message_dialog = gtk_message_dialog_new (parent, GTK_DIALOG_MODAL, \n"
"                                            GTK_MESSAGE_WARNING, \n"
"                                            GTK_BUTTONS_OK_CANCEL, \n"
"                                            \"This action will cause the universe to stop existing.\");\n"
"\n"
"   gtk_widget_show_all (message_dialog);\n"
"\n"
"   g_signal_connect (GTK_DIALOG (message_dialog), \"response\", \n"
"                    G_CALLBACK (on_response), NULL);\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"\n"
"  GSimpleAction *message_action;\n"
"\n"
"  /* Create a window with a title and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"GMenu Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 400, 200);\n"
"\n"
"  /* Create a label and add it to the window */\n"
"  label = gtk_label_new (\"This application goes boom!\");\n"
"  gtk_container_add (GTK_CONTAINER (window), label);\n"
"\n"
"  /* Create a new simple action, giving it a NULL parameter type. It will \n"
"   * always be NULL for actions invoked from a menu. (e.g clicking on an \"ok\" \n"
"   * or \"cancel\" button)\n"
"   */\n"
"  message_action = g_simple_action_new (\"message\", NULL); \n"
"\n"
"  /* Connect the \"activate\" signal to the appropriate callback function */\n"
"  g_signal_connect (message_action, \"activate\", G_CALLBACK (message_cb), \n"
"                    GTK_WINDOW (window));\n"
"\n"
"  /* Adds the message_action to the overall action map. An Action map is an \n"
"   * interface that contains a number of named GAction instances \n"
"   * (such as message_action) \n"
"   */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (message_action));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the response signal \"activate\" from the \"quit\" action \n"
" * in the function directly below.\n"
" */ \n"
"static void\n"
"quit_cb (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the menu we are creating in this sample */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GMenu *menu;\n"
"  GSimpleAction *quit_action;\n"
"\n"
"  /* Initialize the GMenu, and add a menu item with label \"Message\" and action \n"
"   * \"win.message\". Also add another menu item with label \"Quit\" and action \n"
"   * \"app.quit\" \n"
"   */\n"
"  menu = g_menu_new ();\n"
"  g_menu_append (menu, \"Message\", \"win.message\");\n"
"  g_menu_append (menu, \"Quit\", \"app.quit\");\n"
"\n"
"  /* Create a new simple action for the application. (In this case it is the \n"
"   * \"quit\" action.\n"
"   */\n"
"  quit_action = g_simple_action_new (\"quit\", NULL);\n"
"\n"
"  /* Ensure that the menu we have just created is set for the overall application */\n"
"  gtk_application_set_app_menu (GTK_APPLICATION (app), G_MENU_MODEL (menu));\n"
"\n"
"  g_signal_connect (quit_action, \n"
"                    \"activate\", \n"
"                    G_CALLBACK (quit_cb), \n"
"                    app);\n"
"\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (quit_action));\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the application */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""

#: C/messagedialog.c.page:36(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gio/stable/GApplication.html"
"\">GApplication</link>"
msgstr ""

#: C/messagedialog.c.page:38(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkMessageDialog.html"
"\">GtkMessageDialog</link>"
msgstr ""

#: C/messagedialog.c.page:39(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gio/stable/GSimpleAction.html#g-"
"simple-action-new\">GSimpleAction</link>"
msgstr ""

#: C/messagedialog.js.page:7(info/title)
#, fuzzy
#| msgid "Classes in JavaScript"
msgctxt "text"
msgid "MessageDialog (JavaScript)"
msgstr "Klassen in JavaScript"

#: C/messagedialog.js.page:20(info/desc)
msgid "A popup message attached to a window"
msgstr ""

#: C/messagedialog.js.page:25(page/p)
msgid ""
"A MessageDialog is a modal message dialog, which means a popup that you have "
"to respond to before you get back to what you were doing in the window that "
"it's attached to. This one can cause the world to explode (or at least it "
"says that it can). To make the popup appear when you run this sample, click "
"on \"Message\" inside of its application menu -- that's the menu that appears "
"when you click on an application's name in the upper-left screen corner, next "
"to Activities."
msgstr ""

#: C/messagedialog.js.page:26(note/p)
msgid ""
"The difference between a MessageDialog and a <link xref=\"dialog.js\">Dialog</"
"link> is that a Dialog can contain whatever widgets and content you want to "
"put in it, whereas a MessageDialog is just a convenient way to make popups "
"appear with a basic message and buttons."
msgstr ""

#: C/messagedialog.js.page:43(section/code)
#, no-wrap
msgid ""
"\n"
"const MessageDialogExample = new Lang.Class ({\n"
"    Name: 'MessageDialog Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jsmessagedialog',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._initMenus();\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""

#: C/messagedialog.js.page:70(note/p) C/switch.js.page:75(note/p)
msgid ""
"Before we call _buildUI to create the window and the widgets inside it, we "
"need to call _initMenus, which tells GNOME to create the menu. We can put the "
"actual code for _initMenus after the code for _buildUI, since it doesn't "
"matter what order we put them in so long as _initMenus is called first in "
"_onStartup."
msgstr ""

#: C/messagedialog.js.page:71(section/code)
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Gtk.MessageDialog Example\",\n"
"            default_height: 200,\n"
"            default_width: 400 });\n"
msgstr ""

#: C/messagedialog.js.page:85(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a silly warning message and add it to the window\n"
"        this.warningLabel = new Gtk.Label ({\n"
"            label: \"This application goes boom! (Not really.)\"});\n"
"        this._window.add (this.warningLabel);\n"
msgstr ""

#: C/messagedialog.js.page:91(section/p)
msgid ""
"For this example, all that we have in the window the popup comes out of is a "
"silly warning <link xref=\"label.js\">Label</link>."
msgstr ""

#: C/messagedialog.js.page:95(section/title)
msgid "Creating the application's menu"
msgstr "Entwurf des Anwendungsmenüs"

#: C/messagedialog.js.page:96(section/code)
#, no-wrap
msgid ""
"\n"
"    // Build the application menu, including the button that calls the dialog\n"
"    _initMenus: function() {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"Message\",'app.message');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // This pops up a MessageDialog when \"Message\" is clicked in the menu\n"
"        let messageAction = new Gio.SimpleAction ({ name: 'message' });\n"
"        messageAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showMessageDialog();\n"
"            }));\n"
"        this.application.add_action(messageAction);\n"
"\n"
"        // This closes the window when \"Quit\" is clicked in the menu\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
msgstr ""

#: C/messagedialog.js.page:121(section/p)
msgid ""
"Here, we build the <link xref=\"gmenu.js\">GMenu</link> where we'll be "
"putting the \"Message\" button which triggers the popup MessageDialog. The "
"GMenu is the menu that appears when you click the application's name in the "
"upper-left corner of the screen, next to the Activities menu. Our menu only "
"has two options in it: Message, and Quit."
msgstr ""

#: C/messagedialog.js.page:125(section/title)
#, fuzzy
#| msgid "Creating the user interface"
msgid "Creating the MessageDialog"
msgstr "Erstellen der Benutzeroberfläche"

#: C/messagedialog.js.page:126(section/code)
#, no-wrap
msgid ""
"\n"
"    _showMessageDialog: function () {\n"
"\n"
"        // Create a modal MessageDialog whose parent is the window\n"
"        this._messageDialog = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            buttons: Gtk.ButtonsType.OK_CANCEL,\n"
"            message_type: Gtk.MessageType.WARNING,\n"
"            text: \"This action will cause the universe to stop existing.\" });\n"
"\n"
"        this._messageDialog.connect ('response', Lang.bind(this, this._response_cb));\n"
"        this._messageDialog.show();\n"
"    },\n"
msgstr ""

#: C/messagedialog.js.page:141(section/p)
msgid ""
"To make our MessageDialog a popup attached to the main window, we set its "
"modal property to true and set it to be \"transient_for\" _window. After "
"that, we can set what kind of buttons it has and what kind of message it is "
"(which determines what icon appears next to the message), and write out the "
"text inside it, before connecting its \"response\" signal to the callback "
"function which handles it."
msgstr ""

#: C/messagedialog.js.page:142(note/p)
msgid "Here are some resources for making your own MessageDialogs:"
msgstr ""

#: C/messagedialog.js.page:144(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkMessageDialog."
"html#GtkButtonsType\">List of button types</link>"
msgstr ""

#: C/messagedialog.js.page:145(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkMessageDialog."
"html#GtkMessageType\">List of message types</link>"
msgstr ""

#: C/messagedialog.js.page:149(section/code)
#, no-wrap
msgid ""
"\n"
"    // Callback function (aka signal handler) for the response signal\n"
"    _response_cb: function (messagedialog, response_id) {\n"
"\n"
"        // A simple switch that changes the main window's label\n"
"        switch (response_id) {\n"
"            case Gtk.ResponseType.OK:\n"
"                this.warningLabel.set_label (\"*BOOM*\\n\");\n"
"                break;\n"
"            case Gtk.ResponseType.CANCEL:\n"
"                this.warningLabel.set_label (\"Good choice!\\n\");\n"
"                break;\n"
"            case Gtk.ResponseType.DELETE_EVENT:\n"
"                this.warningLabel.set_label (\"Dialog closed or cancelled.\\n\");\n"
"                break;\n"
"        }\n"
"\n"
"        this._messageDialog.destroy();\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""

#: C/messagedialog.js.page:172(section/p)
msgid ""
"This function takes two parameters, the MessageDialog and its response_id, "
"both of which are automatically supplied (you don't have to manually pass "
"them to it for it to work). Here we use a simple switch to change the "
"\"warning label\"'s text, depending on which option you select. The "
"DELETE_EVENT occurs if you press Escape to cancel the MessageDialog, instead "
"of clicking OK or Cancel. Whatever you select, the popup is destroyed "
"afterwards."
msgstr ""

#: C/messagedialog.js.page:174(section/code)
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new MessageDialogExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/messagedialog.js.page:179(section/p)
msgid ""
"Finally, we create a new instance of the finished MessageDialogExample class, "
"and set the application running."
msgstr ""

#: C/messagedialog.js.page:184(section/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const MessageDialogExample = new Lang.Class ({\n"
"    Name: 'MessageDialog Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jsmessagedialog',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._initMenus();\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Gtk.MessageDialog Example\",\n"
"            default_height: 200,\n"
"            default_width: 400 });\n"
"\n"
"        // Create a silly warning message and add it to the window\n"
"        this.warningLabel = new Gtk.Label ({\n"
"            label: \"This application goes boom! (Not really.)\"});\n"
"        this._window.add (this.warningLabel);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application menu, including the button that calls the dialog\n"
"    _initMenus: function() {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"Message\",'app.message');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // This pops up a MessageDialog when \"Message\" is clicked in the menu\n"
"        let messageAction = new Gio.SimpleAction ({ name: 'message' });\n"
"        messageAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showMessageDialog();\n"
"            }));\n"
"        this.application.add_action(messageAction);\n"
"\n"
"        // This closes the window when \"Quit\" is clicked in the menu\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"\n"
"\n"
"    _showMessageDialog: function () {\n"
"\n"
"        // Create a modal MessageDialog whose parent is the window\n"
"        this._messageDialog = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            buttons: Gtk.ButtonsType.OK_CANCEL,\n"
"            message_type: Gtk.MessageType.WARNING,\n"
"            text: \"This action will cause the universe to stop existing.\" });\n"
"\n"
"        this._messageDialog.connect ('response', Lang.bind(this, this._response_cb));\n"
"        this._messageDialog.show();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Callback function (aka signal handler) for the response signal\n"
"    _response_cb: function (messagedialog, response_id) {\n"
"\n"
"        // A simple switch that changes the main window's label\n"
"        switch (response_id) {\n"
"            case Gtk.ResponseType.OK:\n"
"                this.warningLabel.set_label (\"*BOOM*\\n\");\n"
"                break;\n"
"            case Gtk.ResponseType.CANCEL:\n"
"                this.warningLabel.set_label (\"Good choice!\\n\");\n"
"                break;\n"
"            case Gtk.ResponseType.DELETE_EVENT:\n"
"                this.warningLabel.set_label (\"Dialog closed or cancelled.\\n\");\n"
"                break;\n"
"        }\n"
"\n"
"        this._messageDialog.destroy();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new MessageDialogExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/messagedialog.py.page:7(info/title)
msgctxt "text"
msgid "MessageDialog (Python)"
msgstr ""

#: C/messagedialog.py.page:23(page/p)
msgid ""
"A message dialog which prints messages on the terminal, depending on your "
"choices."
msgstr ""

#: C/messagedialog.py.page:30(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"     # constructor for a window (the parent window) with a label\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GMenu Example\", application=app)\n"
"        self.set_default_size(400, 200)\n"
"        label = Gtk.Label()\n"
"        label.set_text(\"This application goes boom!\")\n"
"        self.add(label)\n"
"\n"
"        # create the message_action (a Gio.SimpleAction) - for the window\n"
"        message_action = Gio.SimpleAction.new(\"message\", None)\n"
"        # connect the signal from the action to the function message_cb()\n"
"        message_action.connect(\"activate\", self.message_cb)\n"
"        # add the action to the application\n"
"        app.add_action(message_action)\n"
"\n"
"    # callback function for the signal \"activate\" from the message_action\n"
"    # in the menu of the parent window\n"
"    def message_cb(self, action, parameter):\n"
"        # a Gtk.MessageDialog\n"
"        messagedialog = Gtk.MessageDialog(parent=self,\n"
"                                          flags=Gtk.DialogFlags.MODAL,\n"
"                                          type=Gtk.MessageType.WARNING,\n"
"                                          buttons=Gtk.ButtonsType.OK_CANCEL,\n"
"                                          message_format=\"This action will cause the universe to stop existing.\")\n"
"        # connect the response (of the button clicked) to the function\n"
"        # dialog_response()\n"
"        messagedialog.connect(\"response\", self.dialog_response)\n"
"        # show the messagedialog\n"
"        messagedialog.show()\n"
"\n"
"    def dialog_response(self, widget, response_id):\n"
"        # if the button clicked gives response OK (-5)\n"
"        if response_id == Gtk.ResponseType.OK:\n"
"\t\t    print \"*boom*\"\n"
"\t\t# if the button clicked gives response CANCEL (-6)\n"
"        elif response_id == Gtk.ResponseType.CANCEL:\n"
"            print \"good choice\"\n"
"        # if the messagedialog is destroyed (by pressing ESC)\n"
"        elif response_id == Gtk.ResponseType.DELETE_EVENT:\n"
"            print \"dialog closed or cancelled\"\n"
"        # finally, destroy the messagedialog\n"
"        widget.destroy()\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def quit_cb(self, action, parameter):\n"
"        self.quit()\n"
"\n"
"    def do_startup (self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # create a menu (a Gio.Menu)\n"
"        menu = Gio.Menu()\n"
"        # append a menu item with label \"Message\" and action \"app.message\"\n"
"        menu.append(\"Message\", \"app.message\")\n"
"        # append a menu item with label \"Quit\" and action \"app.quit\"\n"
"        menu.append(\"Quit\", \"app.quit\")\n"
"        # set menu as the menu for the application\n"
"        self.set_app_menu(menu)\n"
"\n"
"        # a new simpleaction - for the application\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_cb)\n"
"        self.add_action (quit_action)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/messagedialog.py.page:35(section/title)
msgid "Useful methods for a MessageDialog widget"
msgstr ""

#: C/messagedialog.py.page:36(section/p)
msgid ""
"In line 18 the signal <code>\"activate\"</code> is connected to the callback "
"function <code>message_cb()</code> using <code><var>widget</var>.connect"
"(<var>signal</var>, <var>callback function</var>)</code>. See <link xref="
"\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""

#: C/messagedialog.py.page:38(item/p)
msgid ""
"In the constructor of MessageDialog we could set flags as <code>Gtk."
"DialogFlags.DESTROY_WITH_PARENT</code> (to destroy the messagedialog window "
"when its parent window is destroyed) or as <code>Gtk.DialogFlags.MODAL</code> "
"(no interaction with other windows of the application)."
msgstr ""

#: C/messagedialog.py.page:39(item/p)
msgid ""
"In the constructor of MessageDialog we could set type as any of <code>Gtk."
"MessageType.INFO, Gtk.MessageType.WARNING, Gtk.MessageType.QUESTION, Gtk."
"MessageType.ERROR, Gtk.MessageType.OTHER</code> depending on what type of "
"message we want."
msgstr ""

#: C/messagedialog.py.page:40(item/p)
msgid ""
"In the constructor of MessageDialog we could set buttons as any of <code>Gtk."
"ButtonsType.NONE, Gtk.ButtonsType.OK, Gtk.ButtonsType.CLOSE, Gtk.ButtonsType."
"CANCEL, Gtk.ButtonsType.YES_NO, Gtk.ButtonsType.OK_CANCEL</code>, or any "
"button using <code>add_button()</code> as in Gtk.Dialog."
msgstr ""

#: C/messagedialog.py.page:41(item/p)
msgid ""
"We could substitute the default image of the MessageDialog with another image "
"using"
msgstr ""

#: C/messagedialog.py.page:42(item/code)
#, no-wrap
msgid ""
"\n"
"image = Gtk.Image()\n"
"image.set_from_stock(Gtk.STOCK_CAPS_LOCK_WARNING, Gtk.IconSize.DIALOG)\n"
"image.show()\n"
"messagedialog.set_image(image)"
msgstr ""

#: C/messagedialog.py.page:47(item/p)
msgid ""
"where <code>Gtk.STOCK_CAPS_LOCK_WARNING</code> is any image from <link href="
"\"http://developer.gnome.org/gtk3/unstable/gtk3-Stock-Items.html\">Stock "
"Items</link>. We could also set any image as in the Image widget, as "
"<code>image.set_from_file(\"filename.png\")</code>."
msgstr ""

#: C/messagedialog.py.page:48(item/p)
msgid ""
"<code>format_secondary_text(\"some secondary message\")</code> sets a "
"secondary message. The primary text becomes bold."
msgstr ""

#: C/messagedialog.py.page:58(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkMessageDialog.html"
"\">GtkMessageDialog</link>"
msgstr ""

#: C/messagedialog.py.page:62(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gio/unstable/GActionMap.html"
"\">GActionMap</link>"
msgstr ""

#: C/messagedialog.vala.page:7(info/title)
msgctxt "text"
msgid "MessageDialog (Vala)"
msgstr ""

#: C/messagedialog.vala.page:24(page/code)
#, no-wrap
msgid ""
"\n"
"//A window in the application\n"
"public class Window : Gtk.ApplicationWindow {\n"
"\tpublic Window (Application app) {\n"
"\t\tObject (application: app, title: \"Gtk.MessageDialog Example\");\n"
"\n"
"\t\tvar label = new Gtk.Label (\"This application goes boom!\");\n"
"\t\tthis.add (label);\n"
"\n"
"\t\tvar message_action = new SimpleAction (\"message\", null);\n"
"\t\tmessage_action.activate.connect (message);\n"
"\t\tthis.add_action (message_action);\n"
"\n"
"\t\tthis.set_default_size (400, 200);\n"
"\t\tthis.show_all ();\n"
"\t}\n"
"\n"
"\tvoid dialog_response (Gtk.Dialog dialog, int response_id) {\n"
"\t\tswitch (response_id) {\n"
"\t\t\tcase Gtk.ResponseType.OK:\n"
"\t\t\t\tprint (\"*boom*\\n\");\n"
"\t\t\t\tbreak;\n"
"\t\t\tcase Gtk.ResponseType.CANCEL:\n"
"\t\t\t\tprint (\"good choice\\n\");\n"
"\t\t\t\tbreak;\n"
"\t\t\tcase Gtk.ResponseType.DELETE_EVENT:\n"
"\t\t\t\tprint (\"dialog closed or cancelled\\n\");\n"
"\t\t\t\tbreak;\n"
"\t\t}\n"
"\t\t\tdialog.destroy();\n"
"\t}\n"
"\n"
"\tvoid message (SimpleAction simple, Variant? parameter) {\n"
"\t\tvar messagedialog = new Gtk.MessageDialog (this,\n"
"                            Gtk.DialogFlags.MODAL,\n"
"                            Gtk.MessageType.WARNING,\n"
"                            Gtk.ButtonsType.OK_CANCEL,\n"
"                            \"This action will cause the universe to stop existing.\");\n"
"\n"
"\t\tmessagedialog.response.connect (dialog_response);\n"
"\t\tmessagedialog.show ();\n"
"\t}\n"
"}\n"
"\n"
"//This is the Application\n"
"public class Application : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew Window (this);\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\tvar menu = new Menu ();\n"
"\t\tmenu.append (\"Message\", \"win.message\");\n"
"\t\tmenu.append (\"Quit\", \"app.quit\");\n"
"\t\tthis.app_menu = menu;\n"
"\n"
"\t\tvar quit_action = new SimpleAction (\"quit\", null);\n"
"\t\t//quit_action.activate.connect (this.quit);\n"
"\t\tthis.add_action (quit_action);\n"
"\t}\n"
"\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.application\");\n"
"\t}\n"
"}\n"
"\n"
"//main function creates Application and runs it\n"
"int main (string[] args) {\n"
"\treturn new Application ().run (args);\n"
"}\n"
msgstr ""

#: C/messagedialog.vala.page:30(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ResponseType.html\">Gtk."
"ResponseType</link>"
msgstr ""

#: C/messagedialog.vala.page:31(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.MessageDialog.html\">Gtk."
"MessageDialog</link>"
msgstr ""

#: C/messagedialog.vala.page:32(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.DialogFlags.html\">Gtk."
"DialogFlags</link>"
msgstr ""

#: C/messagedialog.vala.page:33(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.MessageType.html\">Gtk."
"MessageType</link>"
msgstr ""

#: C/messagedialog.vala.page:34(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ButtonsType.html\">Gtk."
"ButtonsType</link>"
msgstr ""

#: C/model-view-controller.py.page:8(info/title)
msgctxt "text"
msgid "The Model/View/Controller design (Python)"
msgstr ""

#: C/model-view-controller.py.page:13(info/desc)
#: C/model-view-controller.py.page:26(page/title)
msgid "The Model/View/Controller design"
msgstr ""

#: C/model-view-controller.py.page:31(section/title)
#: C/properties.py.page:31(section/title)
#: C/signals-callbacks.py.page:31(section/title)
msgid "Overview"
msgstr "Überblick"

#: C/model-view-controller.py.page:33(section/p)
msgid ""
"Both the <link xref=\"treeview_simple_liststore.py\">TreeView</link> and the "
"<link xref=\"combobox.py\">ComboBox</link> widgets are built on the <em>Model/"
"View/Controller</em> design. The <em>Model</em> (an implementation of "
"<code>Gtk.TreeModel</code>, usually <code>Gtk.TreeStore</code> or <code>Gtk."
"ListStore</code>) stores the data; the <em>View</em> (e.g. <code>Gtk."
"TreeView</code>, <code>Gtk.ComboBox</code>, or <code>Gtk.ComboBoxText</code>) "
"gets change notifications and displays the content of the model. The "
"<em>Controller</em>, finally, changes the state of the model (via some "
"methods in the model's implementation - such as <code>append()</code> or "
"<code>remove()</code>) and notifies the view of these changes (via signals "
"like <code>\"changed\"</code>)."
msgstr ""

#: C/model-view-controller.py.page:38(section/title)
msgid "The Model"
msgstr "Das Modell"

#: C/model-view-controller.py.page:40(section/p)
msgid ""
"The main difference between the two main implementations of <code>Gtk."
"TreeModel</code> is that <code>Gtk.ListStore</code> contains simple rows of "
"data without children, whereas <code>Gtk.TreeStore</code> also contains rows "
"of data, but each row may have child rows (which in turn can have child rows, "
"and so on)."
msgstr ""

#: C/model-view-controller.py.page:42(section/p)
msgid ""
"The data in the Model can be retrieved or modified using the tree iter and "
"column index, or <code>Gtk.TreeIter</code>, or <code>Gtk.TreePath</code>."
msgstr ""

#: C/model-view-controller.py.page:44(section/p)
msgid ""
"As with Python's built-in list object you can use <code>len()</code> to get "
"the number of rows and use slices to retrieve or set values. Otherwise, the "
"method <code>append()</code> returns a <code>Gtk.TreeIter</code> instance, "
"which points to the location of the newly inserted row. You can also retrieve "
"a <code>Gtk.TreeIter</code> by calling <code>get_iter()</code>."
msgstr ""

#: C/model-view-controller.py.page:46(section/p)
msgid ""
"As <code>Gtk.ListStore</code> contains only one level, i.e. nodes do not have "
"any child nodes, a path is essentially the index of the row you want to "
"access. In the case of <code>Gtk.TreeStore</code>, a path is a list of "
"indexes or a string. The string form is a list of numbers separated by a "
"colon. Each number refers to the offset at that level. Thus, the path <code>"
"\"0\"</code> refers to the root node and the path <code>\"2:4\"</code> refers "
"to the fifth child of the third node."
msgstr ""

#: C/model-view-controller.py.page:48(section/p)
msgid "Useful methods for a <code>Gtk.TreeModel</code>:"
msgstr ""

#: C/model-view-controller.py.page:50(item/p)
msgid ""
"<code>get_iter(path)</code> returns a <code>Gtk.TreeIter</code> instance "
"pointing to <code>path</code>. This is expected to be a colon-separated list "
"of numbers, or a tuple. For example, the string <code>\"10:4:0\"</code> is "
"equivalent to the tuple <code>(10, 4, 0)</code>, as both would create a path "
"of depth 3 pointing to the 11th child of the root node, the 5th child of that "
"11th child, and the 1st child of that 5th child."
msgstr ""

#: C/model-view-controller.py.page:51(item/p)
msgid ""
"<code>iter_next(treeiter)</code> returns a <code>Gtk.TreeIter</code> instance "
"pointing the node following treeiter at the current level or <code>None</"
"code> if there is no next iter."
msgstr ""

#: C/model-view-controller.py.page:52(item/p)
msgid ""
"<code>iter_has_child(treeiter)</code> returns <code>True</code> if "
"<code>treeiter</code> has children, <code>False</code> otherwise."
msgstr ""

#: C/model-view-controller.py.page:53(item/p)
msgid ""
"<code>iter_children(treeiter)</code> returns a <code>Gtk.TreeIter</code> "
"instance pointing to the first child of <code>treeiter</code> or <code>None</"
"code> if <code>treeiter</code> has no children."
msgstr ""

#: C/model-view-controller.py.page:54(item/p)
msgid ""
"<code>get_iter_first()</code> returns a <code>Gtk.TreeIter</code> instance "
"pointing to the first iterator in the tree (the one at the path <code>\"0\"</"
"code>) or <code>None</code> if the tree is empty."
msgstr ""

#: C/model-view-controller.py.page:57(section/p)
msgid "Useful methods for a <code>Gtk.ListStore</code>:"
msgstr ""

#: C/model-view-controller.py.page:59(item/p)
msgid ""
"<code>append(row)</code> appends a new row to this list store, where "
"<code>row</code> can be a list of values for each column; <code>row</code> "
"can also be omitted or <code>None</code>, and in that case an empty row will "
"be appended. The method returns a <code>Gtk.TreeIter</code> pointing to the "
"appended row."
msgstr ""

#: C/model-view-controller.py.page:60(item/p)
#: C/model-view-controller.py.page:66(item/p)
msgid ""
"<code>remove(iter)</code> removes <code>iter</code> from the <code>Gtk."
"ListStore</code>, and returns <code>True</code> if the iter is valid, and "
"<code>False</code> if the iter is not. After being removed, <code>iter</code> "
"is set to be the next valid row."
msgstr ""

#: C/model-view-controller.py.page:63(section/p)
msgid "Useful methods for a <code>Gtk.TreeStore</code>:"
msgstr ""

#: C/model-view-controller.py.page:65(item/p)
msgid ""
"<code>append(parent, row)</code> appends a new row to this tree store; "
"<code>parent</code> must be a valid Gtk.TreeIter. If parent is not "
"<code>None</code>, then it will append the new row after the last child of "
"parent, otherwise it will append a row to the top level; <code>row</code> can "
"be a list of values for each column, or it can be omitted or <code>None</"
"code>; in this latter case an empty row will be appended. The method returns "
"a <code>Gtk.TreeIter</code> pointing to the appended row."
msgstr ""

#: C/model-view-controller.py.page:72(section/title)
msgid "The View: the TreeView case"
msgstr ""

#: C/model-view-controller.py.page:74(section/p)
msgid ""
"A Treeview shows the structure of children and parent items as a tree. See "
"for instance <link xref=\"treeview_treestore.py\">this example</link>."
msgstr ""

#: C/model-view-controller.py.page:76(section/p)
msgid ""
"The <code>Gtk.TreeViewColumn</code> is used to organize the vertical columns."
msgstr ""

#: C/model-view-controller.py.page:78(section/p)
msgid "Useful methods for a <code>Gtk.TreeView</code>:"
msgstr ""

#: C/model-view-controller.py.page:80(item/p)
msgid ""
"<code>set_model(model)</code> sets the model for this tree view. If this tree "
"view already has a model set, it will remove it before setting the new model. "
"If model is <code>None</code>, then it will unset the old model."
msgstr ""

#: C/model-view-controller.py.page:81(item/p)
msgid ""
"<code>get_model()</code> returns the model this tree view is based on, "
"<code>None</code> if the model is unset."
msgstr ""

#: C/model-view-controller.py.page:82(item/p)
msgid ""
"<code>append_column(column)</code> appends <code>column</code> to the list of "
"columns."
msgstr ""

#: C/model-view-controller.py.page:83(item/p)
msgid ""
"<code>get_selection()</code> gets the <code>Gtk.TreeSelection</code> "
"associated with this tree view."
msgstr ""

#: C/model-view-controller.py.page:86(section/p)
msgid "Useful methods for a <code>Gtk.TreeViewColumn</code>:"
msgstr ""

#: C/model-view-controller.py.page:88(item/p)
msgid ""
"<code>add_attribute(renderer, attribute, value)</code> adds an attribute "
"mapping to this column. <code>attribute</code> is the parameter on "
"<code>renderer</code> to be set from the <code>value</code>"
msgstr ""

#: C/model-view-controller.py.page:89(item/p)
msgid ""
"<code>pack_start(renderer, expand)</code> packs <code>renderer</code> into "
"the beginning of this column. If <code>expand</code> is <code>False</code>, "
"then <code>renderer</code> is allocated no more space than it needs. Any "
"unused space is divided evenly between cells for which expand is <code>True</"
"code>."
msgstr ""

#: C/model-view-controller.py.page:90(item/p)
msgid ""
"<code>pack_end(renderer, expand)</code> adds <code>renderer</code> to end of "
"this column. If <code>expand</code> is <code>False</code>, then "
"<code>renderer</code> is allocated no more space than it needs. Any unused "
"space is divided evenly between cells for which <code>expand</code> is "
"<code>True</code>."
msgstr ""

#: C/model-view-controller.py.page:91(item/p)
msgid ""
"<code>set_sort_column_id(sort_column_id)</code> sets the column of the model "
"by which this column (of the view) should be sorted. This also makes the "
"column header clickable."
msgstr ""

#: C/model-view-controller.py.page:92(item/p)
msgid ""
"<code>set_sort_indicator(setting)</code> sets whether a little arrow is "
"displayed in the column header; <code>setting</code> can either be "
"<code>True</code> (indicator is shown) or <code>False</code>."
msgstr ""

#: C/model-view-controller.py.page:93(item/p)
msgid ""
"<code>set_sort_order(order)</code> changes the order by which the column is "
"sorted; <code>order</code> can either be <code>Gtk.SortType.ASCENDING</code> "
"or <code>Gtk.SortType.DESCENDING</code>."
msgstr ""

#: C/model-view-controller.py.page:99(section/title)
msgid "The View: the ComboBox case"
msgstr ""

#: C/model-view-controller.py.page:101(section/p)
msgid ""
"A <code>Gtk.ComboBox</code> allows for the selection of an item from a "
"dropdown menu, see for instance <link xref=\"combobox.py\">this example</"
"link>. For a list of textual choices, one can also use the simpler <code>Gtk."
"ComboBoxText</code>. Both <code>Gtk.ComboBox</code> and <code>Gtk."
"ComboBoxText</code> can contain an entry."
msgstr ""

#: C/model-view-controller.py.page:103(section/p)
msgid "Useful methods for a <code>Gtk.ComboBox</code>:"
msgstr ""

#: C/model-view-controller.py.page:105(item/p)
msgid ""
"The static method <code>new_with_entry()</code> creates a new empty <code>Gtk."
"ComboBox</code> with an entry; the static method <code>new_with_model(model)</"
"code> creates a new one with the model initialized to <code>model</code>; and "
"the static method <code>new_with_model_and_entry(model)</code> is a "
"combination of the two."
msgstr ""

#: C/model-view-controller.py.page:106(item/p)
msgid ""
"<code>get_active_iter()</code> returns a <code>Gtk.TreeIter</code> pointing "
"to the current active item. If no active item exists, <code>None</code> is "
"returned."
msgstr ""

#: C/model-view-controller.py.page:107(item/p)
msgid ""
"<code>set_model(model)</code> sets the model used by this combo box to be "
"<code>model</code>, and it will unset a previously set model (if there is "
"any). If <code>model</code> is <code>None</code>, then it will unset the "
"model. Note that this function does not clear the cell renderers."
msgstr ""

#: C/model-view-controller.py.page:108(item/p)
msgid ""
"<code>set_entry_text_column(text_column)</code> sets the model column which "
"this combo box should use to get strings from to be <code>text_column</code>. "
"The column <code>text_column</code> in the model of this combo box must be of "
"type <code>str</code> (this is only relevant if this combo box has been "
"created with the “has-entry” property set to True)."
msgstr ""

#: C/model-view-controller.py.page:109(item/p)
msgid ""
"<code>set_wrap_width(width)</code> sets the wrap width of this combo box to "
"be <code>width</code>. The wrap width is basically the preferred number of "
"columns when you want the popup to be layed out in a grid."
msgstr ""

#: C/model-view-controller.py.page:112(section/p)
msgid "Useful methods for a <code>Gtk.ComboBoxText</code>:"
msgstr ""

#: C/model-view-controller.py.page:114(item/p)
msgid ""
"The static method <code>new_with_entry()</code> creates a new empty <code>Gtk."
"ComboBoxText</code> with an entry."
msgstr ""

#: C/model-view-controller.py.page:115(item/p)
msgid ""
"<code>append_text(text)</code> appends <code>text</code> to the list of "
"strings stored in this combo box."
msgstr ""

#: C/model-view-controller.py.page:116(item/p)
msgid ""
"<code>get_active_text()</code> returns the currently active string in this "
"combo box, or <code>None</code> if none is selected. If this combo box "
"contains an entry, this function will return its contents (which will not "
"necessarily be an item from the list)."
msgstr ""

#: C/model-view-controller.py.page:122(section/title)
msgid "The View: the Cellrenderers"
msgstr ""

#: C/model-view-controller.py.page:124(section/p)
msgid ""
"The View makes use of <code>Gtk.CellRenderer</code>s of various types to draw "
"the data."
msgstr ""

#: C/model-view-controller.py.page:126(section/p)
msgid "Implementations of <code>Gtk.CellRenderer</code> and useful methods:"
msgstr ""

#: C/model-view-controller.py.page:128(item/p)
msgid "<code>Gtk.CellRendererText</code> - renders text in a cell"
msgstr ""

#: C/model-view-controller.py.page:129(item/p)
msgid ""
"<code>Gtk.CellRendererToggle</code> - renders a toggle or radio button in a "
"cell. Useful methods:"
msgstr ""

#: C/model-view-controller.py.page:131(item/p)
msgid ""
"<code>set_active(setting)</code> - activates or deactivates a cell renderer"
msgstr ""

#: C/model-view-controller.py.page:132(item/p)
msgid "<code>get_active()</code> - returns whether the cell renderer is active"
msgstr ""

#: C/model-view-controller.py.page:133(item/p)
msgid ""
"<code>set_radio(radio)</code> - if radio is <code>True</code>, the cell "
"renderer renders a radio toggle (i.e. a toggle in a group of mutually-"
"exclusive toggles); if <code>False</code>, it renders a check toggle (a "
"standalone boolean option)"
msgstr ""

#: C/model-view-controller.py.page:134(item/p)
msgid ""
"<code>get_radio()</code> - returns whether we are rendering radio toggles "
"rather than checkboxes."
msgstr ""

#: C/model-view-controller.py.page:137(item/p)
msgid "<code>Gtk.CellRendererPixbuf</code> - renders an image in a cell"
msgstr ""

#: C/model-view-controller.py.page:138(item/p)
msgid ""
"<code>Gtk.CellRendererCombo</code> - renders text in a cell; but while "
"<code>Gtk.CellRendererText</code> offers a simple entry to edit the text, "
"<code>Gtk.CellRendererCombo</code> offers a <code>Gtk.ComboBox</code> widget "
"to edit the text. It can be used with and without an associated Gtk.Entry "
"widget, depending on the value of the “has-entry” property."
msgstr ""

#: C/model-view-controller.py.page:139(item/p)
msgid ""
"<code>Gtk.CellRendererProgress</code> - renders a numeric value as a progress "
"bar in a cell; it can display a text on top of the progress bar"
msgstr ""

#: C/model-view-controller.py.page:140(item/p)
msgid ""
"<code>Gtk.CellRendererSpinner</code> - renders a spinning animation in a cell"
msgstr ""

#: C/model-view-controller.py.page:141(item/p)
msgid "<code>Gtk.CellRendererSpin</code> - renders a spin button in a cell"
msgstr ""

#: C/model-view-controller.py.page:142(item/p)
msgid ""
"<code>Gtk.CellRendererAccel</code> - renders a keyboard accelerator in a cell"
msgstr ""

#: C/model-view-controller.py.page:148(section/title)
msgid "The Controller: the Selection"
msgstr ""

#: C/model-view-controller.py.page:150(section/p)
msgid ""
"Most applications will need to not only deal with displaying data, but also "
"receiving input events from users. To do this, simply get a reference to a "
"selection object and connect to the <code>\"changed\"</code> signal."
msgstr ""

#: C/model-view-controller.py.page:152(section/code)
#, no-wrap
msgid ""
"\n"
"select = tree.get_selection()\n"
"select.connect(\"changed\", on_tree_selection_changed)\n"
msgstr ""

#: C/model-view-controller.py.page:157(section/p)
msgid "Then to retrieve data for the row selected:"
msgstr ""

#: C/model-view-controller.py.page:159(section/code)
#, no-wrap
msgid ""
"\n"
"def on_tree_selection_changed(selection):\n"
"    model, treeiter = selection.get_selected()\n"
"    if treeiter != None:\n"
"        print \"You selected\", model[treeiter][0]\n"
msgstr ""

#: C/model-view-controller.py.page:166(section/p)
msgid "Useful methods for a <code>Gtk.TreeSelection</code>:"
msgstr ""

#: C/model-view-controller.py.page:169(item/p)
msgid ""
"<code>set_mode(type)</code> sets the type of selection, where type is one of"
msgstr ""

#: C/model-view-controller.py.page:171(item/p)
msgid "<code>Gtk.SelectionMode.NONE</code> - no selection is possible"
msgstr ""

#: C/model-view-controller.py.page:172(item/p)
msgid ""
"<code>Gtk.SelectionMode.SINGLE</code> - zero or one element may be selected"
msgstr ""

#: C/model-view-controller.py.page:173(item/p)
msgid ""
"<code>Gtk.SelectionMode.BROWSE</code> - exactly one element is selected. In "
"some circumstances, such as initially or during a search operation, it’s "
"possible for no element to be selected. What is really enforced is that the "
"user can’t deselect a currently selected element except by selecting another "
"element."
msgstr ""

#: C/model-view-controller.py.page:174(item/p)
msgid ""
"<code>Gtk.SelectionMode.MULTIPLE</code> -any number of elements may be "
"selected. Clicks toggle the state of an item. The Ctrl key may be used to "
"enlarge the selection, and Shift key to select between the focus and the "
"child pointed to. Some widgets may also allow Click-drag to select a range of "
"elements."
msgstr ""

#: C/model-view-controller.py.page:177(item/p)
msgid ""
"<code>get_selected()</code> returns a tuple <code>(model, treeiter)</code>, "
"where <code>model</code> is the current model and <code>treeiter</code> a "
"<code>Gtk.TreeIter</code> pointing to the currently selected row, or None if "
"no rows are selected. The method does not work if the selection mode is set "
"to <code>Gtk.SelectionMode.MULTIPLE</code>; in that case, use "
"<code>get_selected_rows()</code> instead, which Returns a list of <code>Gtk."
"TreePath</code> instances of all selected rows."
msgstr ""

#: C/model-view-controller.py.page:183(section/title)
#: C/properties.py.page:50(section/title)
#: C/signals-callbacks.py.page:45(section/title)
#: C/strings.py.page:111(section/title)
msgid "References"
msgstr "Referenzen"

#: C/model-view-controller.py.page:186(item/p)
#: C/treeview_advanced_liststore.py.page:44(item/p)
#: C/treeview_cellrenderertoggle.py.page:44(item/p)
#: C/treeview_simple_liststore.py.page:45(item/p)
#: C/treeview_treestore.py.page:44(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeModel.html"
"\">GtkTreeModel</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeModel.html"
"\">GtkTreeModel</link>"

#: C/model-view-controller.py.page:187(item/p)
#: C/treeview_advanced_liststore.py.page:43(item/p)
#: C/treeview_cellrenderertoggle.py.page:43(item/p)
#: C/treeview_simple_liststore.py.page:44(item/p)
#: C/treeview_treestore.py.page:43(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeView.html"
"\">GtkTreeView</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeView.html"
"\">GtkTreeView</link>"

#: C/model-view-controller.py.page:188(item/p)
#: C/treeview_advanced_liststore.py.page:47(item/p)
#: C/treeview_cellrenderertoggle.py.page:48(item/p)
#: C/treeview_simple_liststore.py.page:48(item/p)
#: C/treeview_treestore.py.page:47(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeViewColumn.html"
"\">GtkTreeViewColumn</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeViewColumn.html"
"\">GtkTreeViewColumn</link>"

#: C/model-view-controller.py.page:190(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRenderer.html"
"\">GtkCellRenderer</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRenderer.html"
"\">GtkCellRenderer</link>"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/paned.py.page:22(media)
msgctxt "_"
msgid "external ref='media/paned.png' md5='01e36d8a51ee18313616d63d2e15d993'"
msgstr "external ref='media/paned.png' md5='01e36d8a51ee18313616d63d2e15d993'"

#: C/paned.py.page:7(info/title)
#, fuzzy
#| msgid "Python"
msgctxt "text"
msgid "Paned (Python)"
msgstr "Python"

#: C/paned.py.page:18(info/desc)
msgid "A widget with two adjustable panes"
msgstr ""

#: C/paned.py.page:21(page/title)
msgid "Paned"
msgstr ""

#: C/paned.py.page:23(page/p)
msgid "Two images in two adjustable panes, horizontally aligned."
msgstr ""

#: C/paned.py.page:29(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Paned Example\", application=app)\n"
"        self.set_default_size(450, 350)\n"
"\n"
"        # a new widget with two adjustable panes,\n"
"        # one on the left and one on the right\n"
"        paned = Gtk.Paned.new(Gtk.Orientation.HORIZONTAL)\n"
"\n"
"        # two images\n"
"        image1 = Gtk.Image()\n"
"        image1.set_from_file(\"gnome-image.png\")\n"
"        image2 = Gtk.Image()\n"
"        image2.set_from_file(\"tux.png\")\n"
"\n"
"        # add the first image to the left pane\n"
"        paned.add1(image1)\n"
"        # add the second image to the right pane\n"
"        paned.add2(image2)\n"
"\n"
"        # add the panes to the window\n"
"        self.add(paned)\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/paned.py.page:33(section/title)
msgid "Useful methods for a Paned widget"
msgstr ""

#: C/paned.py.page:34(section/p)
msgid ""
"To have two vertically aligned panes, use <code>Gtk.Orientation.VERTICAL</"
"code> instead of <code>Gtk.Orientation.HORIZONTAL</code>. The method "
"<code>add1(widget1)</code> will add the <code>widget1</code> to the top pane, "
"and <code>add2(widget2)</code> will add the <code>widget2</code> to the "
"bottom pane."
msgstr ""

#: C/paned.py.page:41(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkPaned.html\">GtkPaned</"
"link>"
msgstr ""

#: C/paned.py.page:42(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/gtk3-Standard-"
"Enumerations.html#GtkOrientation\">Standard Enumerations</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/photo-wall.c.page:83(media)
msgctxt "_"
msgid ""
"external ref='media/photo-wall.png' md5='f19590d97e8ec029cda3c44b769c11cd'"
msgstr "@@image: 'media/photo-wall.png'; md5=f19590d97e8ec029cda3c44b769c11cd"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/photo-wall.c.page:86(media)
msgctxt "_"
msgid ""
"external ref='media/photo-wall-focused.png' "
"md5='9f1ceecf3a28c1e468597b093a10cbae'"
msgstr ""
"@@image: 'media/photo-wall-focused.png'; md5=9f1ceecf3a28c1e468597b093a10cbae"

#: C/photo-wall.c.page:6(info/title)
msgctxt "text"
msgid "Photo wall (C)"
msgstr ""

#: C/photo-wall.c.page:9(info/desc)
msgid "A Clutter image viewer"
msgstr "Ein Clutter-Bildbetrachter"

#: C/photo-wall.c.page:13(credit/name)
msgid "Chris Kühl"
msgstr "Chris Kühl"

#: C/photo-wall.c.page:27(page/title)
msgid "Photo wall"
msgstr ""

#: C/photo-wall.c.page:30(synopsis/p)
msgid ""
"For this example we will build a simple image viewer using Clutter. You will "
"learn:"
msgstr ""

#: C/photo-wall.c.page:32(item/p)
msgid "How to size and position <code>ClutterActor</code>s"
msgstr ""

#: C/photo-wall.c.page:33(item/p)
msgid "How to place an image in a <code>ClutterActor</code>"
msgstr ""

#: C/photo-wall.c.page:34(item/p)
msgid "How to do simple transitions using Clutter's animation framework"
msgstr ""

#: C/photo-wall.c.page:35(item/p)
msgid "How to make <code>ClutterActor</code>s respond to mouse events"
msgstr ""

#: C/photo-wall.c.page:36(item/p)
msgid "How to get file names from a directory"
msgstr ""

#: C/photo-wall.c.page:41(section/title)
#: C/record-collection.js.page:39(section/title)
msgid "Introduction"
msgstr "Einführung"

#: C/photo-wall.c.page:42(section/p)
msgid ""
"Clutter is a library for creating dynamic user interfaces using OpenGL for "
"hardware acceleration. This example demonstates a small, but central, part of "
"the Clutter library to create a simple but attractive image viewing program."
msgstr ""

#: C/photo-wall.c.page:45(section/p)
msgid ""
"To help us reach our goal we will be utilising a few other common pieces of "
"GLib as well. Most importantly, we'll use one <code>GPtrArray</code>, a "
"dynamic array of pointers, to hold the file path names. We will also use "
"<code>GDir</code>, a utility for working with directories, to access our "
"image directory and gather file paths."
msgstr ""

#: C/photo-wall.c.page:58(item/p)
msgid ""
"Choose <gui>GTK+ (simple)</gui> from the <gui>C</gui> tab, click "
"<gui>Continue</gui>, and fill out your details on the next few pages. Use "
"<file>photo-wall</file> as project name and directory."
msgstr ""

#: C/photo-wall.c.page:61(item/p)
msgid ""
"Make sure that <gui>Use GtkBuilder for user interface</gui> is disabled as we "
"will create the UI manually in this tutorial. Check the <link xref=\"guitar-"
"tuner.c\">Guitar-Tuner</link> tutorial using the interface builder."
msgstr ""

#: C/photo-wall.c.page:66(item/p)
msgid ""
"Enable <gui>Configure external packages</gui>. On the next page, select "
"<em>clutter-1.0</em> from the list to include the Clutter library in your "
"project."
msgstr ""

#: C/photo-wall.c.page:79(section/title)
msgid "A look at Photo Wall"
msgstr ""

#: C/photo-wall.c.page:80(section/p)
msgid "Our image viewer presents the user with a wall of images."
msgstr ""

#: C/photo-wall.c.page:84(section/p)
msgid ""
"When an image is clicked, it is animated to fill the viewing area. When the "
"image having focus is clicked it is returned to its original position using "
"an animation with the same duration of 500 milliseconds."
msgstr ""

#: C/photo-wall.c.page:90(section/title)
msgid "Initial setup"
msgstr ""

#: C/photo-wall.c.page:91(section/p)
msgid ""
"The following code segment contains many of the defines and variables we will "
"be using in the following sections. Use this as a reference for later "
"sections. Copy this code to the beginning of <file>src/main.c</file>:"
msgstr ""

#: C/photo-wall.c.page:94(section/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gdk-pixbuf/gdk-pixbuf.h&gt;\n"
"#include &lt;clutter/clutter.h&gt;\n"
"\n"
"#define STAGE_WIDTH  800\n"
"#define STAGE_HEIGHT 600\n"
"\n"
"#define THUMBNAIL_SIZE 200\n"
"#define ROW_COUNT (STAGE_HEIGHT / THUMBNAIL_SIZE)\n"
"#define COL_COUNT (STAGE_WIDTH  / THUMBNAIL_SIZE)\n"
"#define THUMBNAIL_COUNT (ROW_COUNT * COL_COUNT)\n"
"\n"
"#define ANIMATION_DURATION_MS 500\n"
"\n"
"#define IMAGE_DIR_PATH \"./berlin_images/\"\n"
"\n"
"static GPtrArray *img_paths;\n"
"\n"
"static ClutterPoint unfocused_pos;\n"
"\n"
msgstr ""

#: C/photo-wall.c.page:118(section/title)
msgid "Jumping into the code"
msgstr ""

#: C/photo-wall.c.page:119(section/p)
msgid ""
"We will start by taking a look at the <code>main()</code> function as a "
"whole. Then we'll discuss the other code sections in detail. Change the "
"<file>src/main.c</file> to contain this <code>main()</code> function. You can "
"delete the <code>create_window()</code> function as we don't need it in this "
"example."
msgstr ""

#: C/photo-wall.c.page:122(section/code)
#, no-wrap
msgid ""
"\n"
"int\n"
"main(int argc, char *argv[])\n"
"{\n"
"    ClutterColor stage_color = { 16, 16, 16, 255 };\n"
"    ClutterActor *stage = NULL;\n"
"\n"
"    if (clutter_init (&amp;argc, &amp;argv) != CLUTTER_INIT_SUCCESS)\n"
"        return 1;\n"
"\n"
"    stage = clutter_stage_new();\n"
"    clutter_actor_set_size(stage, STAGE_WIDTH, STAGE_HEIGHT);\n"
"    clutter_actor_set_background_color(stage, &amp;stage_color);\n"
"    clutter_stage_set_title(CLUTTER_STAGE (stage), \"Photo Wall\");\n"
"    g_signal_connect(stage, \"destroy\", G_CALLBACK(clutter_main_quit), NULL);\n"
"\n"
"    load_image_path_names();\n"
"\n"
"    guint row = 0;\n"
"    guint col = 0;\n"
"    for(row=0; row &lt; ROW_COUNT; ++row)\n"
"    {\n"
"        for(col=0; col &lt; COL_COUNT; ++col)\n"
"        {\n"
"            const char *img_path = g_ptr_array_index(img_paths, (row * COL_COUNT) + col);\n"
"            GdkPixbuf *pixbuf = gdk_pixbuf_new_from_file_at_size(img_path, STAGE_HEIGHT, STAGE_HEIGHT, NULL);\n"
"            ClutterContent *image = clutter_image_new ();\n"
"            ClutterActor *actor = clutter_actor_new ();\n"
"\n"
"            if (pixbuf != NULL)\n"
"            {\n"
"                clutter_image_set_data(CLUTTER_IMAGE(image),\n"
"                                       gdk_pixbuf_get_pixels(pixbuf),\n"
"                                       gdk_pixbuf_get_has_alpha(pixbuf)\n"
"                                           ? COGL_PIXEL_FORMAT_RGBA_8888\n"
"                                           : COGL_PIXEL_FORMAT_RGB_888,\n"
"                                       gdk_pixbuf_get_width(pixbuf),\n"
"                                       gdk_pixbuf_get_height(pixbuf),\n"
"                                       gdk_pixbuf_get_rowstride(pixbuf),\n"
"                                       NULL);\n"
"            }\n"
"\n"
"            clutter_actor_set_content(actor, image);\n"
"            g_object_unref(image);\n"
"            g_object_unref(pixbuf);\n"
"\n"
"            initialize_actor(actor, row, col);\n"
"            clutter_actor_add_child(stage, actor);\n"
"        }\n"
"    }\n"
"\n"
"    /* Show the stage. */\n"
"    clutter_actor_show(stage);\n"
"\n"
"    /* Start the clutter main loop. */\n"
"    clutter_main();\n"
"\n"
"    g_ptr_array_unref(img_paths);\n"
"\n"
"    return 0;\n"
"}"
msgstr ""

#: C/photo-wall.c.page:184(item/p)
msgid ""
"Line 4: <code>ClutterColor</code> is defined by setting the red, green, blue "
"and transparency (alpha) values. The values range from 0-255. For "
"transparency a value of 255 is opaque."
msgstr ""

#: C/photo-wall.c.page:185(item/p)
msgid ""
"Line 7: You must initialize Clutter. If you forget to do this, you will get "
"very strange errors. Be warned."
msgstr ""

#: C/photo-wall.c.page:186(item/p)
msgid ""
"Lines 10‒14: Here we create a new <code>ClutterStage</code> . We then set the "
"size using the defines from the previous section and the address of the "
"<code>ClutterColor</code> we just defined."
msgstr ""

#: C/photo-wall.c.page:187(note/p)
msgid ""
"A <code>ClutterStage</code> is the top-level <code>ClutterActor</code> onto "
"which other <code>ClutterActor</code>s are placed."
msgstr ""

#: C/photo-wall.c.page:189(item/p)
msgid ""
"Line 16: Here we call our function for getting the image file paths. We'll "
"look at this in a bit."
msgstr ""

#: C/photo-wall.c.page:190(item/p)
msgid ""
"Lines 18‒49: This is where we set up the <code>ClutterActor</code>s, load the "
"images and place them into their spot in the image wall. We will look at this "
"in detail in the next section."
msgstr ""

#: C/photo-wall.c.page:191(item/p)
msgid ""
"Line 52: Show the stage and <em>all its children</em>, meaning our images."
msgstr ""

#: C/photo-wall.c.page:192(item/p)
msgid "Line 55: Start the Clutter main loop."
msgstr ""

#: C/photo-wall.c.page:197(section/title)
msgid "Setting up our image actors"
msgstr ""

#: C/photo-wall.c.page:198(note/p)
msgid ""
"In Clutter, an actor is the most basic visual element. Basically, everything "
"you see is an actor."
msgstr ""

#: C/photo-wall.c.page:199(section/p)
msgid ""
"In this section, we are going to take a closer look at the loop used for "
"setting up the <code>ClutterActor</code>s that will display our images."
msgstr ""

#: C/photo-wall.c.page:202(section/code)
#, no-wrap
msgid ""
"\n"
"guint row = 0;\n"
"guint col = 0;\n"
"for(row=0; row &lt; ROW_COUNT; ++row)\n"
"{\n"
"    for(col=0; col &lt; COL_COUNT; ++col)\n"
"    {\n"
"        const char *img_path = g_ptr_array_index(img_paths, (row * COL_COUNT) + col);\n"
"        GdkPixbuf *pixbuf = gdk_pixbuf_new_from_file_at_size(img_path, STAGE_HEIGHT, STAGE_HEIGHT, NULL);\n"
"        ClutterContent *image = clutter_image_new ();\n"
"        ClutterActor *actor = clutter_actor_new ();\n"
"\n"
"        if (pixbuf != NULL)\n"
"        {\n"
"            clutter_image_set_data(CLUTTER_IMAGE(image),\n"
"                                   gdk_pixbuf_get_pixels(pixbuf),\n"
"                                   gdk_pixbuf_get_has_alpha(pixbuf)\n"
"                                       ? COGL_PIXEL_FORMAT_RGBA_8888\n"
"                                       : COGL_PIXEL_FORMAT_RGB_888,\n"
"                                   gdk_pixbuf_get_width(pixbuf),\n"
"                                   gdk_pixbuf_get_height(pixbuf),\n"
"                                   gdk_pixbuf_get_rowstride(pixbuf),\n"
"                                   NULL);\n"
"        }\n"
"\n"
"        clutter_actor_set_content(actor, image);\n"
"        g_object_unref(image);\n"
"        g_object_unref(pixbuf);\n"
"\n"
"        initialize_actor(actor, row, col);\n"
"        clutter_actor_add_child(stage, actor);\n"
"    }\n"
"}\n"
"\n"
msgstr ""

#: C/photo-wall.c.page:238(item/p)
msgid ""
"Line 7: Here we want to get the path at the <var>n</var>th location in the "
"<code>GPtrArray</code> that is holding our image path names. The <var>n</"
"var>th position is calculated based on <code>row</code> and <code>col</code>."
msgstr ""

#: C/photo-wall.c.page:240(item/p)
msgid ""
"Line 8‒23: This is where we actually create the <code>ClutterActor</code> and "
"place the image into the actor. The first argument is the path which we "
"access through our <code>GSList</code> node. The second argument is for error "
"reporting but we are ignoring that to keep things short."
msgstr ""

#: C/photo-wall.c.page:242(item/p)
msgid ""
"Line 47: This adds the <code>ClutterActor</code> to the stage, which is a "
"container. It also assumes ownership of the <code>ClutterActor</code> which "
"is something you'll want to look into as you get deeper into GNOME "
"development. See the <link href=\"http://library.gnome.org/devel/gobject/"
"stable/gobject-memory.html\"><code>GObject</code> documentation</link> for "
"the gory details."
msgstr ""

#: C/photo-wall.c.page:248(section/title)
msgid "Loading the images"
msgstr "Laden der Bilder"

#: C/photo-wall.c.page:249(section/p)
msgid ""
"Let's take a short break from Clutter to see how we can get the file names "
"from our image directory."
msgstr ""

#: C/photo-wall.c.page:250(section/code)
#, no-wrap
msgid ""
"\n"
"static void\n"
"load_image_path_names()\n"
"{\n"
"    /* Ensure we can access the directory. */\n"
"    GError *error = NULL;\n"
"    GDir *dir = g_dir_open(IMAGE_DIR_PATH, 0, &amp;error);\n"
"    if(error)\n"
"    {\n"
"        g_warning(\"g_dir_open() failed with error: %s\\n\", error-&gt;message);\n"
"        g_clear_error(&amp;error);\n"
"        return;\n"
"    }\n"
"\n"
"    img_paths = g_ptr_array_new_with_free_func (g_free);\n"
"\n"
"    const gchar *filename = g_dir_read_name(dir);\n"
"    while(filename)\n"
"    {\n"
"        if(g_str_has_suffix(filename, \".jpg\") || g_str_has_suffix(filename, \".png\"))\n"
"        {\n"
"            gchar *path = g_build_filename(IMAGE_DIR_PATH, filename, NULL);\n"
"            g_ptr_array_add (img_paths, path);\n"
"        }\n"
"        filename = g_dir_read_name(dir);\n"
"    }\n"
"}"
msgstr ""

#: C/photo-wall.c.page:278(item/p)
msgid ""
"Lines 5 and 12: This opens our directory or, if an error occured, returns "
"after printing an error message."
msgstr ""

#: C/photo-wall.c.page:279(item/p)
msgid ""
"Lines 16‒25: The first line gets another file name from the <code>GDir</code> "
"we opened earlier. If there was an image file (which we check by looking at "
"its extension, \".png\" or \".jpg\") in the directory we proceed to prepend "
"the image directory path to the filename and prepend that to the list we set "
"up earlier. Lastly we attempt to get the next path name and reenter the loop "
"if another file was found."
msgstr ""

#: C/photo-wall.c.page:284(section/title)
msgid "Set up the actors"
msgstr ""

#: C/photo-wall.c.page:285(section/p)
msgid ""
"We now take a look at the sizing and positioning of <code>ClutterActor</"
"code>s and also readying the <code>ClutterActor</code> for user interaction."
msgstr ""

#: C/photo-wall.c.page:288(section/code)
#, no-wrap
msgid ""
"\n"
"/* This function handles setting up and placing the rectangles. */\n"
"static void\n"
"initialize_actor(ClutterActor *actor, guint row, guint col)\n"
"{\n"
"    clutter_actor_set_size(actor, THUMBNAIL_SIZE, THUMBNAIL_SIZE);\n"
"    clutter_actor_set_position(actor, col * THUMBNAIL_SIZE, row * THUMBNAIL_SIZE);\n"
"    clutter_actor_set_reactive(actor, TRUE);\n"
"\n"
"    g_signal_connect(actor,\n"
"                     \"button-press-event\",\n"
"                     G_CALLBACK(actor_clicked_cb),\n"
"                     NULL);\n"
"}"
msgstr ""

#: C/photo-wall.c.page:304(item/p)
msgid ""
"Line 7: Setting an actor reactive means that it reacts to events, such as "
"<code>button-press-event</code> in our case. For Photo Wall, all "
"<code>ClutterActor</code>s in the wall should initially be reactive."
msgstr ""

#: C/photo-wall.c.page:307(item/p)
msgid ""
"Line 9‒12: Now we connect the <code>button-press-event</code> to the "
"<code>actor_clicked_cb</code> callback which we will look at next."
msgstr ""

#: C/photo-wall.c.page:310(section/p)
msgid "At this point we've got a wall of images that are ready to be viewed."
msgstr ""

#: C/photo-wall.c.page:314(section/title)
msgid "Reacting to the clicks"
msgstr ""

#: C/photo-wall.c.page:318(section/code)
#, no-wrap
msgid ""
"\n"
"static gboolean\n"
"actor_clicked_cb(ClutterActor *actor,\n"
"                 ClutterEvent *event,\n"
"                 gpointer      user_data)\n"
"{\n"
"    /* Flag to keep track of our state. */\n"
"    static gboolean is_focused = FALSE;\n"
"    ClutterActorIter iter;\n"
"    ClutterActor *child;\n"
"\n"
"    /* Reset the focus state on all the images */\n"
"    clutter_actor_iter_init (&amp;iter, clutter_actor_get_parent(actor));\n"
"    while (clutter_actor_iter_next(&amp;iter, &amp;child))\n"
"      clutter_actor_set_reactive(child, is_focused);\n"
"\n"
"    clutter_actor_save_easing_state(actor);\n"
"    clutter_actor_set_easing_duration(actor, ANIMATION_DURATION_MS);\n"
"\n"
"    if(is_focused)\n"
"    {\n"
"        /* Restore the old location and size. */\n"
"        clutter_actor_set_position(actor, unfocused_pos.x, unfocused_pos.y);\n"
"        clutter_actor_set_size(actor, THUMBNAIL_SIZE, THUMBNAIL_SIZE);\n"
"    }\n"
"    else\n"
"    {\n"
"        /* Save the current location before animating. */\n"
"        clutter_actor_get_position(actor, &amp;unfocused_pos.x, &amp;unfocused_pos.y);\n"
"        /* Only the currently focused image should receive events. */\n"
"        clutter_actor_set_reactive(actor, TRUE);\n"
"\n"
"        /* Put the focused image on top. */\n"
"        clutter_actor_set_child_above_sibling(clutter_actor_get_parent(actor), actor, NULL);\n"
"\n"
"        clutter_actor_set_position(actor, (STAGE_WIDTH - STAGE_HEIGHT) / 2.0, 0);\n"
"        clutter_actor_set_size(actor, STAGE_HEIGHT, STAGE_HEIGHT);\n"
"    }\n"
"\n"
"    clutter_actor_restore_easing_state(actor);\n"
"\n"
"    /* Toggle our flag. */\n"
"    is_focused = !is_focused;\n"
"\n"
"    return TRUE;\n"
"}"
msgstr ""

#: C/photo-wall.c.page:365(item/p)
msgid ""
"Lines 1‒4: We have to make sure our callback function matches the signature "
"required for the <code>button_clicked_event</code> signal. For our example, "
"we will only use the first argument, the <code>ClutterActor</code> that is "
"actually clicked."
msgstr ""

#: C/photo-wall.c.page:367(note/p)
msgid ""
"A few words on the arguments we are not using in this example. The "
"<code>ClutterEvent</code> is different depending on what event is being "
"handled. For example, a key event produces a <code>ClutterKeyEvent</code> "
"from which you can get the key being pressed among other information. For "
"mouse click events you get a <code>ClutterButtonEvent</code> from which you "
"can get the <code>x</code> and <code>y</code> values. See the Clutter "
"documentation for other <code>ClutterEvent</code> types."
msgstr ""

#: C/photo-wall.c.page:368(note/p)
msgid ""
"The <code>user_data</code> is what one uses to pass data into the function. A "
"pointer to any data type can be passed in. If you need multiple data to be "
"passed into the callback, you can place the data into a struct and pass its "
"address in."
msgstr ""

#: C/photo-wall.c.page:372(item/p)
msgid ""
"Line 7: We set up a static flag to track which state we are in: wall mode or "
"focus mode. We start out in wall mode so no image has focus. Thus, we set the "
"flag to <code>FALSE</code> initially."
msgstr ""

#: C/photo-wall.c.page:373(item/p)
msgid ""
"Line 12‒14: These set the image actors to receive events if they are focused."
msgstr ""

#: C/photo-wall.c.page:374(item/p)
msgid ""
"Line 16‒17: Here we set the animation duration and save the current state."
msgstr ""

#: C/photo-wall.c.page:375(item/p)
msgid ""
"Lines 21‒23: Reaching this code means that one image currently has focus and "
"we want to return to wall mode. Setting a position on a <code>ClutterActor</"
"code> begins an animation with the duration that we set in line 17."
msgstr ""

#: C/photo-wall.c.page:377(item/p)
msgid ""
"Line 24: Reaching this line of code means we are currently in the wall state "
"and are about to give a <code>ClutterActor</code> focus. Here we save the "
"starting position so that we can return to it later."
msgstr ""

#: C/photo-wall.c.page:378(item/p)
msgid ""
"Line 25: Setting the <code>ClutterActor</code>'s <code>reactive</code> "
"property to <code>TRUE</code> makes this <code>ClutterActor</code> react to "
"events. In this focused state the only <code>ClutterActor</code> that we want "
"to receive events will be the <code>ClutterActor</code> being viewed. "
"Clicking on the <code>ClutterActor</code> will return it to its starting "
"position."
msgstr ""

#: C/photo-wall.c.page:379(item/p)
msgid ""
"Lines 27‒36: This is where we save the current position of the image, set it "
"to receive events and then make it appear above the other images and start "
"animating it to fill the stage."
msgstr ""

#: C/photo-wall.c.page:380(item/p)
msgid ""
"Line 39: Here we restore the easing state to what was set before we changed "
"it in line 16."
msgstr ""

#: C/photo-wall.c.page:381(item/p)
msgid ""
"Line 42: Here we toggle the <code>is_focused</code> flag to the current state."
msgstr ""

#: C/photo-wall.c.page:382(item/p)
msgid ""
"As mentioned previously, the <code>ClutterActor</code>s with higher "
"<code>depth</code> values receive events but can allow <code>ClutterActor</"
"code>s below them to also receive events. Returning <code>TRUE</code> will "
"stop events from being passed down, while <code>FALSE</code> will pass events "
"down."
msgstr ""

#: C/photo-wall.c.page:384(note/p)
msgid ""
"Remember, however, that to receive events the <code>ClutterActor</code>s must "
"be set <code>reactive</code>."
msgstr ""

#: C/photo-wall.c.page:392(section/p)
msgid ""
"All of the code should now be ready to go. All you need now is some pictures "
"to load. By default, the pictures are loaded from a <file>berlin_images</"
"file> directory. If you want, you can change the <code>#define "
"IMAGE_DIR_PATH</code> line near the top to refer to your photo directory, or "
"create a <file>berlin_images</file> directory by clicking "
"<guiseq><gui>Project</gui><gui>New Directory...</gui></guiseq> and creating a "
"<file>berlin_images</file> directory as a subdirectory of the <file>photo-"
"wall</file> directory. Make sure to put at least twelve images in the "
"directory!"
msgstr ""

#: C/photo-wall.c.page:394(section/p)
msgid ""
"When you have done that, click <guiseq><gui>Build</gui><gui>Build Project</"
"gui></guiseq> to build everything again, then <guiseq><gui>Run</"
"gui><gui>Execute</gui></guiseq> to start the application."
msgstr ""

#: C/photo-wall.c.page:395(section/p)
msgid ""
"If you haven't already done so, choose the <file>Debug/src/photo-wall</file> "
"application in the dialog that appears. Finally, hit <gui>Run</gui> and enjoy!"
msgstr ""

#: C/photo-wall.c.page:400(section/p)
msgid ""
"If you run into problems with the tutorial, compare your code with this <link "
"href=\"photo-wall/photo-wall.c\">reference code</link>."
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/progressbar.c.page:23(media) C/progressbar.vala.page:21(media)
msgctxt "_"
msgid ""
"external ref='media/progressbar_fill.ogv' "
"md5='287763d1d3f4a328212ea2243910f5e4'"
msgstr ""
"external ref='media/progressbar_fill.ogv' "
"md5='287763d1d3f4a328212ea2243910f5e4'"

#: C/progressbar.c.page:7(info/title)
msgctxt "text"
msgid "ProgressBar (C)"
msgstr ""

#: C/progressbar.c.page:18(info/desc) C/progressbar.vala.page:17(info/desc)
msgid "A widget which indicates progress visually"
msgstr ""

#: C/progressbar.c.page:21(page/title) C/progressbar.js.page:19(page/title)
#: C/progressbar.py.page:21(page/title) C/progressbar.vala.page:20(page/title)
msgid "ProgressBar"
msgstr ""

#: C/progressbar.c.page:24(page/p) C/progressbar.vala.page:22(page/p)
msgid "This ProgressBar \"fills in\" by a fraction of the bar until it is full."
msgstr ""

#: C/progressbar.c.page:26(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"static gboolean\n"
"fill (gpointer   user_data)\n"
"{\n"
"  GtkWidget *progress_bar = user_data;\n"
"\n"
"  /*Get the current progress*/\n"
"  gdouble fraction;\n"
"  fraction = gtk_progress_bar_get_fraction (GTK_PROGRESS_BAR (progress_bar));\n"
"\n"
"  /*Increase the bar by 10% each time this function is called*/\n"
"  fraction += 0.1;\n"
"\n"
"  /*Fill in the bar with the new fraction*/\n"
"  gtk_progress_bar_set_fraction (GTK_PROGRESS_BAR (progress_bar), fraction);\n"
"\n"
"  /*Ensures that the fraction stays below 1.0*/\n"
"  if (fraction &lt; 1.0) \n"
"    return TRUE;\n"
"  \n"
"  return FALSE;\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *progress_bar;\n"
"\n"
"  gdouble fraction = 0.0;\n"
"\n"
"  /*Create a window with a title, and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"ProgressBar Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 220, 20);\n"
" \n"
"  /*Create a progressbar and add it to the window*/\n"
"  progress_bar = gtk_progress_bar_new ();\n"
"  gtk_container_add (GTK_CONTAINER (window), progress_bar);\n"
"\n"
"  /*Fill in the given fraction of the bar. Has to be between 0.0-1.0 inclusive*/\n"
"  gtk_progress_bar_set_fraction (GTK_PROGRESS_BAR (progress_bar), fraction);\n"
"\n"
"  /*Use the created fill function every 500 milliseconds*/\n"
"  g_timeout_add (500, fill, GTK_PROGRESS_BAR (progress_bar));\n"
" \n"
"  gtk_widget_show_all (window);\n"
"}\n"
" \n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
" \n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
" \n"
"  return status;\n"
"}\n"
msgstr ""

#: C/progressbar.c.page:35(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop."
"html#g-timeout-add\">G_Timeout</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/progressbar.js.page:20(media) C/progressbar.py.page:22(media)
msgctxt "_"
msgid ""
"external ref='media/progressbar.ogv' md5='36deab3dd4b5be968828fa2ef416d612'"
msgstr ""
"external ref='media/progressbar.ogv' md5='36deab3dd4b5be968828fa2ef416d612'"

#: C/progressbar.js.page:6(info/title)
msgctxt "text"
msgid "ProgressBar (JavaScript)"
msgstr ""

#: C/progressbar.js.page:16(info/desc)
msgid "A bar which animates to indicate progress"
msgstr ""

#: C/progressbar.js.page:24(div/p) C/progressbar.py.page:26(div/p)
msgid "Pressing any key stops and starts this ProgressBar."
msgstr ""

#: C/progressbar.js.page:31(page/p) C/progressbar.py.page:33(page/p)
msgid "This ProgressBar is stopped and started by pressing any key."
msgstr ""

#: C/progressbar.js.page:33(page/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ProgressBarExample = new Lang.Class({\n"
"    Name: 'ProgressBar Example',\n"
"\n"
"    // Create the application itself\n"
"        _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsprogressbar',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                       window_position: Gtk.WindowPosition.CENTER,\n"
"                                                       default_height: 20,\n"
"                                                       default_width: 220,\n"
"                                                       title: \"ProgressBar Example\"});\n"
"\n"
"        // Create the progress bar\n"
"        this.progressBar = new Gtk.ProgressBar ();\n"
"        this._window.add(this.progressBar);\n"
"\n"
"        // Start the function that pulses the bar every 100 milliseconds\n"
"        this.sourceID = GLib.timeout_add(GLib.PRIORITY_DEFAULT, 100, Lang.bind(this, this._barPulse));\n"
"\n"
"        // Connect a keypress event to the function that toggles the bar to start or stop pulsing\n"
"        this._window.connect(\"key-press-event\", Lang.bind(this, this._onKeyPress));\n"
"\n"
"            // Show the window and all child widgets\n"
"            this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Pulse the progressbar (unless it has been disabled by a keypress)\n"
"    _barPulse: function() {\n"
"        this.progressBar.pulse();\n"
"        return true;\n"
"    },\n"
"\n"
"    // Start or stop the progressbar when a key is pressed\n"
"    _onKeyPress: function() {\n"
"        if (this.sourceID == 0)\n"
"            this.sourceID = GLib.timeout_add(GLib.PRIORITY_DEFAULT, 100, Lang.bind(this, this._barPulse));\n"
"        else {\n"
"            GLib.source_remove(this.sourceID);\n"
"            this.sourceID = 0;\n"
"        }\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ProgressBarExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/progressbar.js.page:38(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/GLib.html\">GLib</"
"link>"
msgstr ""

#: C/progressbar.py.page:7(info/title)
msgctxt "text"
msgid "ProgressBar (Python)"
msgstr ""

#: C/progressbar.py.page:18(info/desc)
msgid "A widget which indicates progress visually."
msgstr ""

#: C/progressbar.py.page:40(section/code)
#, no-wrap
msgid ""
"from gi.repository import GLib\n"
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"ProgressBar Example\", application=app)\n"
"        self.set_default_size(220, 20)\n"
"\n"
"        # a progressbar\n"
"        self.progress_bar = Gtk.ProgressBar()\n"
"        # add the progressbar to the window\n"
"        self.add(self.progress_bar)\n"
"\n"
"        # the method self.pulse is called each 100 milliseconds\n"
"        # and self.source_id is set to be the ID of the event source\n"
"        # (i.e. the bar changes position every 100 milliseconds)\n"
"        self.source_id = GLib.timeout_add(100, self.pulse)\n"
"\n"
"    # event handler\n"
"    # any signal from the keyboard controls if the progressbar stops/starts\n"
"    def do_key_press_event(self, event):\n"
"        # if the progressbar has been stopped (therefore source_id == 0 - see\n"
"        # \"else\" below), turn it back on\n"
"        if (self.source_id == 0):\n"
"            self.source_id = GLib.timeout_add(100, self.pulse)\n"
"        # if the bar is moving, remove the source with the ID of source_id\n"
"        # from the main context (stop the bar) and set the source_id to 0\n"
"        else:\n"
"            GLib.source_remove(self.source_id)\n"
"            self.source_id = 0\n"
"        # stop the signal emission\n"
"        return True\n"
"\n"
"    # source function\n"
"    # the progressbar is in \"activity mode\" when this method is called\n"
"    def pulse(self):\n"
"        self.progress_bar.pulse()\n"
"        # call the function again\n"
"        return True\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/progressbar.py.page:45(section/title)
msgid "Useful methods for a ProgressBar widget"
msgstr ""

#: C/progressbar.py.page:47(item/p)
msgid ""
"Instead of <code>pulse()</code>, that makes the bar go back and forth, if we "
"want the ProgressBar to \"fill in\" a fraction (a <code>float</code> between "
"<code>0.0</code> and <code>1.0</code> included) of the bar that has been "
"completed, use <code>set_fraction(fraction)</code>."
msgstr ""

#: C/progressbar.py.page:48(item/p)
msgid ""
"To set a text and show it (superimposed over the bar) use <code>set_text(<var>"
"\"text\"</var>)</code> and <code>set_show_text(True)</code>. If a text is not "
"set and <code>set_show_text(True)</code> the text will be the percentage of "
"the work that has been completed."
msgstr ""

#: C/progressbar.py.page:56(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkProgressBar.html"
"\">GtkProgressBar</link>"
msgstr ""

#: C/progressbar.py.page:57(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop."
"html\">GLib - The Main Event Loop</link>"
msgstr ""

#: C/progressbar.py.page:58(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gdk/stable/gdk-Keyboard-Handling"
"\">Gdk - Key Values</link>"
msgstr ""

#: C/progressbar.vala.page:7(info/title)
msgctxt "text"
msgid "ProgressBar (Vala)"
msgstr ""

#: C/progressbar.vala.page:24(page/code)
#, no-wrap
msgid ""
"public class MyApplication : Gtk.Application {\n"
"\n"
"\tGtk.ProgressBar progress_bar;\n"
"\n"
"\tprotected override void activate () {\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.set_title (\"ProgressBar Example\");\n"
"\t\twindow.set_default_size (220, 20);\n"
"\n"
"\t\tprogress_bar = new Gtk.ProgressBar ();\n"
"\t\twindow.add (progress_bar);\n"
"\t\twindow.show_all ();\n"
"\n"
"\t\tdouble fraction = 0.0;\n"
"\t\tprogress_bar.set_fraction (fraction);\n"
"\t\tGLib.Timeout.add (500, fill);\n"
"\t}\n"
"\n"
"\tbool fill () {\n"
"\t\tdouble fraction = progress_bar.get_fraction (); //get current progress\n"
"\t\tfraction += 0.1; //increase by 10% each time this function is called\n"
"\n"
"\t\tprogress_bar.set_fraction (fraction);\n"
"\n"
"\t\t/* This function is only called by GLib.Timeout.add while it returns true; */\n"
"\t\tif (fraction &lt; 1.0)\n"
"\t\t\treturn true;\n"
"\t\treturn false;\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\tvar progress_bar_application = new MyApplication ();\n"
"\tint status =  progress_bar_application.run (args);\n"
"\treturn status;\n"
"}\n"
msgstr ""

#: C/progressbar.vala.page:29(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ProgressBar.html\">Gtk."
"ProgressBar</link>"
msgstr ""

#: C/progressbar.vala.page:30(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/glib-2.0/GLib.Timeout.html\">GLib."
"Timeout</link>"
msgstr ""

#: C/properties.py.page:8(info/title)
msgctxt "text"
msgid "Properties (Python)"
msgstr ""

#: C/properties.py.page:13(info/desc)
msgid "An explanation of properties, getters and setters."
msgstr ""

#: C/properties.py.page:26(page/title)
msgid "Properties"
msgstr "Eigenschaften"

#: C/properties.py.page:33(section/p)
msgid ""
"<em>Properties</em> describe the configuration and state of widgets, and each "
"widget has its own particular set of properties. For example, a widget such "
"as a button or a label has the property <code>label</code> which contains the "
"text of the widget. You can specify the name and value of any number of "
"properties as keyword arguments when creating an instance of a widget: for "
"example, to create a label with the text “Hello World”, an angle of 25 "
"degrees, and aligned to the right, you can use:"
msgstr ""

#: C/properties.py.page:34(section/code)
#, no-wrap
msgid ""
"\n"
"label = Gtk.Label(label=\"Hello World\", angle=25, halign=Gtk.Align.END)"
msgstr ""

#: C/properties.py.page:37(section/p)
msgid "which is equivalent to using:"
msgstr ""

#: C/properties.py.page:38(section/code)
#, no-wrap
msgid ""
"\n"
"label = Gtk.Label()\n"
"label.set_label(\"Hello World\")\n"
"label.set_angle(25)\n"
"label.set_halign(Gtk.Align.END)"
msgstr ""

#: C/properties.py.page:44(section/p)
msgid ""
"Once you have created such a label, you can get the text of the label with "
"<code>label.get_label()</code>, and analogously for the other properties."
msgstr ""

#: C/properties.py.page:46(section/p)
msgid ""
"Instead of using getters and setters you can also get and set the properties "
"with <code>get_property(<var>\"prop-name\"</var>)</code> and "
"<code>set_property(<var>\"prop-name\"</var>, <var>value</var>)</code>, "
"respectively."
msgstr ""

#: C/properties.py.page:52(section/p)
msgid ""
"<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/basics."
"html\">Basics - Properties</link> in Python GTK+ 3 Tutorial"
msgstr ""

#: C/py.page:6(info/title)
msgctxt "link"
msgid "Python"
msgstr "Python"

#: C/py.page:20(page/title)
msgid "Tutorials, code samples and platform demos in Python"
msgstr ""

#: C/py.page:25(section/title) C/tutorial.py.page:30(page/title)
msgid "Tutorial for beginners"
msgstr "Tutorial für Einsteiger"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/radiobutton.c.page:24(media) C/radiobutton.py.page:23(media)
#: C/radiobutton.vala.page:24(media)
msgctxt "_"
msgid ""
"external ref='media/radiobutton.png' md5='d115460280d8e41493dd98054b5822a5'"
msgstr ""
"external ref='media/radiobutton.png' md5='d115460280d8e41493dd98054b5822a5'"

#: C/radiobutton.c.page:7(info/title)
msgctxt "text"
msgid "RadioButton (C)"
msgstr ""

#: C/radiobutton.c.page:19(info/desc)
msgid "A choice from multiple checkbuttons"
msgstr ""

#: C/radiobutton.c.page:22(page/title) C/radiobutton.js.page:20(page/title)
#: C/radiobutton.py.page:22(page/title) C/radiobutton.vala.page:23(page/title)
msgid "RadioButton"
msgstr ""

#: C/radiobutton.c.page:25(page/p)
msgid "These radiobuttons report their activity in the terminal."
msgstr ""

#: C/radiobutton.c.page:27(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Signal handler for the \"toggled\" signal of the RadioButton*/\n"
"static void\n"
"button_toggled_cb (GtkWidget *button,\n"
"                   gpointer   user_data)\n"
"{\n"
"  char *b_state;\n"
"  const char *button_label;\n"
"\n"
"  if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (button)))\n"
"          b_state = \"on\";\n"
"  else {\n"
"          b_state = \"off\";\n"
"          g_print (\"\\n\");\n"
"  }\n"
"\n"
"  button_label = gtk_button_get_label (GTK_BUTTON (button));\n"
"\n"
"  g_print (\"%s was turned %s\\n\", button_label, b_state);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"\n"
"  GtkWidget *button1;\n"
"  GtkWidget *button2;\n"
"  GtkWidget *button3;\n"
"\n"
"  /*Create a window with a set title and default size.\n"
"  Also, set a border width for the amount of space to leave\n"
"  inside the window*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"RadioButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 250, 100);\n"
"  gtk_container_set_border_width (GTK_CONTAINER(window), 20);\n"
"\n"
"\n"
"  /*Create an initial radio button*/\n"
"  button1 = gtk_radio_button_new_with_label (NULL, \"Button 1\");\n"
"\n"
"  /*Create a second radio button, and add it to the same group as Button 1*/\n"
"  button2 = gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (button1), \n"
"                                                         \"Button 2\");\n"
"\n"
"  /*Create a third button, and add it to the same group as Button 1*/\n"
"  button3 = gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (button1), \n"
"                                                         \"Button 3\");\n"
"\n"
"\n"
"  /*Create a grid, attach the buttons, and position them accordingly*/\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_attach (GTK_GRID (grid), button1, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), button2, 0, 1, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), button3, 0, 2, 1, 1);\n"
"\n"
"  /*Be sure to set the initial state of each button*/\n"
"  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button2), TRUE);\n"
"  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button1), FALSE);\n"
"  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button3), FALSE);\n"
"\n"
"  /*Connect the signal handlers (aka Callback functions) to the buttons*/\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (button1), \"toggled\", \n"
"                    G_CALLBACK (button_toggled_cb), window);\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (button2), \"toggled\", \n"
"                    G_CALLBACK (button_toggled_cb), window);\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (button3), \"toggled\", \n"
"                    G_CALLBACK (button_toggled_cb), window);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""

#: C/radiobutton.c.page:37(item/p) C/switch.c.page:35(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkSwitch.html"
"\">GtkSwitch</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/radiobutton.js.page:21(media)
msgctxt "_"
msgid ""
"external ref='media/radiobuttontravel.png' "
"md5='0c5f01ee160bb42716ccf5dccbd080c0'"
msgstr ""
"external ref='media/radiobuttontravel.png' "
"md5='0c5f01ee160bb42716ccf5dccbd080c0'"

#: C/radiobutton.js.page:7(info/title)
#, fuzzy
#| msgid "Classes in JavaScript"
msgctxt "text"
msgid "RadioButton (JavaScript)"
msgstr "Klassen in JavaScript"

#: C/radiobutton.js.page:17(info/desc)
msgid "Only one can be selected at a time"
msgstr ""

#: C/radiobutton.js.page:22(page/p)
msgid ""
"RadioButtons are named after old-style car radios, which had buttons for "
"switching between channel presets. Because the radio could only be tuned to "
"one station at a time, only one button could be pressed in at a time; if you "
"pressed a new one, the one that was already pressed in would pop back out. "
"That's how these buttons work, too."
msgstr ""

#: C/radiobutton.js.page:23(page/p)
msgid ""
"Each RadioButton needs a text label and a group. Only one button in a group "
"can be selected at a time. You don't name each group; you just set new "
"RadioButtons to be part of the same group as an existing one. If you create a "
"new one outside of a group, it automatically creates a new group for it to be "
"part of."
msgstr ""

#: C/radiobutton.js.page:40(section/code)
#, no-wrap
msgid ""
"\n"
"const RadioButtonExample = new Lang.Class({\n"
"    Name: 'RadioButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsradiobutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""

#: C/radiobutton.js.page:66(section/p) C/togglebutton.js.page:66(section/p)
msgid ""
"All the code for this sample goes in the RadioButtonExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"Application.html\">Gtk.Application</link> for our widgets and window to go in."
msgstr ""

#: C/radiobutton.js.page:67(section/code)
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Travel Planning\"});\n"
msgstr ""

#: C/radiobutton.js.page:82(section/title)
#, fuzzy
#| msgid "Creating the user interface"
msgid "Creating the radiobuttons"
msgstr "Erstellen der Benutzeroberfläche"

#: C/radiobutton.js.page:83(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a label for the first group of buttons\n"
"        this._placeLabel = new Gtk.Label ({label: \"Where would you like to travel to?\"});\n"
msgstr ""

#: C/radiobutton.js.page:88(section/p)
msgid ""
"We use a <link xref=\"label.js\">Gtk.Label</link> to set each group of "
"RadioButtons apart. Nothing will stop you from putting RadioButtons from all "
"different groups wherever you want, so if you want people to know which ones "
"go together you need to organize things accordingly."
msgstr ""

#: C/radiobutton.js.page:90(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create three radio buttons three different ways\n"
"        this._place1 = new Gtk.RadioButton ({label: \"The Beach\"});\n"
"\n"
"        this._place2 = Gtk.RadioButton.new_from_widget (this._place1);\n"
"        this._place2.set_label (\"The Moon\");\n"
"\n"
"        this._place3 = Gtk.RadioButton.new_with_label_from_widget (this._place1, \"Antarctica\");\n"
"        // this._place3.set_active (true);\n"
msgstr ""

#: C/radiobutton.js.page:101(section/p)
msgid ""
"Here are three different ways to create RadioButtons. The first is the usual "
"way, where we create a new Gtk.RadioButton and assign its properties at the "
"same time. The second and third use functions which automatically handle some "
"of the properties; new_from_widget takes a single argument, the RadioButton "
"that you want to put this new one in the same group as. Meanwhile, "
"new_with_label_from_widget takes that and the RadioButton's label at the same "
"time."
msgstr ""

#: C/radiobutton.js.page:102(section/p)
msgid ""
"The first RadioButton in a group is the one that's selected by default. Try "
"uncommenting the last line in this sample code to see how you can set a "
"different one to be the default selection."
msgstr ""

#: C/radiobutton.js.page:104(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a label for the second group of buttons\n"
"        this._thingLabel = new Gtk.Label ({label: \"And what would you like to bring?\" });\n"
"\n"
"        // Create three more radio buttons\n"
"        this._thing1 = new Gtk.RadioButton ({label: \"Penguins\" });\n"
"        this._thing2 = new Gtk.RadioButton ({label: \"Sunscreen\", group: this._thing1 });\n"
"        this._thing3 = new Gtk.RadioButton ({label: \"A spacesuit\", group: this._thing1 });\n"
msgstr ""

#: C/radiobutton.js.page:113(section/p)
msgid ""
"Here we create the label for the second group of buttons, and then create "
"them all the same way."
msgstr ""

#: C/radiobutton.js.page:117(section/title)
#: C/textview.js.page:131(section/title)
#, fuzzy
#| msgid "Creating the user interface"
msgid "Creating the rest of the user interface"
msgstr "Erstellen der Benutzeroberfläche"

#: C/radiobutton.js.page:119(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a stock OK button\n"
"        this._okButton = new Gtk.Button ({\n"
"            label: 'gtk-ok',\n"
"            use_stock: 'true',\n"
"            halign: Gtk.Align.END });\n"
"\n"
"        // Connect the button to the function which handles clicking it\n"
"        this._okButton.connect ('clicked', Lang.bind (this, this._okClicked));\n"
msgstr ""

#: C/radiobutton.js.page:129(section/p)
msgid ""
"This code creates a <link xref=\"button.js\">Gtk.Button</link> and binds it "
"to a function which will show people a silly message when they click OK, "
"depending on which RadioButtons were selected."
msgstr ""

#: C/radiobutton.js.page:130(section/p)
msgid ""
"To make sure the button's \"OK\" label shows up properly in every language "
"that GNOME is translated into, remember to use one of Gtk's <link href="
"\"http://developer.gnome.org/gtk/2.24/gtk-Stock-Items.html\">stock button "
"types</link>."
msgstr ""

#: C/radiobutton.js.page:132(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a grid to put the \"place\" items in\n"
"        this._places = new Gtk.Grid ();\n"
"\n"
"        // Attach the \"place\" items to the grid\n"
"        this._places.attach (this._placeLabel, 0, 0, 1, 1);\n"
"        this._places.attach (this._place1, 0, 1, 1, 1);\n"
"        this._places.attach (this._place2, 0, 2, 1, 1);\n"
"        this._places.attach (this._place3, 0, 3, 1, 1);\n"
"\n"
"        // Create a grid to put the \"thing\" items in\n"
"        this._things = new Gtk.Grid ({ margin_top: 50 });\n"
"\n"
"        // Attach the \"thing\" items to the grid\n"
"        this._things.attach (this._thingLabel, 0, 0, 1, 1);\n"
"        this._things.attach (this._thing1, 0, 1, 1, 1);\n"
"        this._things.attach (this._thing2, 0, 2, 1, 1);\n"
"        this._things.attach (this._thing3, 0, 3, 1, 1);\n"
"\n"
"        // Create a grid to put everything in\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_left: 40,\n"
"            margin_right: 50 });\n"
"\n"
"        // Attach everything to the grid\n"
"        this._grid.attach (this._places, 0, 0, 1, 1);\n"
"        this._grid.attach (this._things, 0, 1, 1, 1);\n"
"        this._grid.attach (this._okButton, 0, 2, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
msgstr ""

#: C/radiobutton.js.page:166(section/p)
msgid ""
"We use a separate <link xref=\"grid.js\">Gtk.Grid</link> to organize each "
"group of radio buttons. This way we can change the layout with less fuss "
"later on. The second Grid has a margin on top, to visually separate the two "
"sets of choices."
msgstr ""

#: C/radiobutton.js.page:167(section/p)
msgid ""
"After we've organized them, we put them into a third, master Grid, along with "
"the OK button. Then we attach that to the window."
msgstr ""

#: C/radiobutton.js.page:175(section/p)
msgid ""
"Finally, we tell the window and everything inside it to become visible when "
"the application is run."
msgstr ""

#: C/radiobutton.js.page:181(section/code)
#, no-wrap
msgid ""
"\n"
"    _okClicked: function () {\n"
"\n"
"        // Create a popup that shows a silly message\n"
"        this._travel = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            message_type: Gtk.MessageType.OTHER,\n"
"            buttons: Gtk.ButtonsType.OK,\n"
"            text: this._messageText() });\n"
"\n"
"        // Show the popup\n"
"        this._travel.show();\n"
"\n"
"        // Bind the OK button to the function that closes the popup\n"
"        this._travel.connect (\"response\", Lang.bind (this, this._clearTravelPopUp));\n"
"\n"
"    },\n"
msgstr ""

#: C/radiobutton.js.page:200(section/p)
msgid ""
"When you click OK, a <link xref=\"messagedialog.js\">Gtk.MessageDialog</link> "
"appears. This function creates and displays the popup window, then binds its "
"OK button to a function that closes it. What text appears in the popup "
"depends on the _messageText() function, which returns a different value "
"depending on which set of options you chose."
msgstr ""

#: C/radiobutton.js.page:202(section/code)
#, no-wrap
msgid ""
"\n"
"    _messageText: function() {\n"
"\n"
"        // Create a silly message for the popup depending on what you selected\n"
"        var stringMessage = \"\";\n"
"\n"
"        if (this._place1.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"Penguins love the beach, too!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"Make sure to put on that sunscreen!\";\n"
"\n"
"            else stringMessage = \"Are you going to the beach in space?\";\n"
"\n"
"        }\n"
"\n"
"        else if (this._place2.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"The penguins will take over the moon!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"A lack of sunscreen will be the least of your problems!\";\n"
"\n"
"            else stringMessage = \"You'll probably want a spaceship, too!\";\n"
"        }\n"
"\n"
"        else if (this._place3.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"The penguins will be happy to be back home!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"Antarctic sunbathing may be hazardous to your health!\";\n"
"\n"
"            else stringMessage = \"Try bringing a parka instead!\";\n"
"        }\n"
"\n"
"        return stringMessage;\n"
"\n"
"    },\n"
msgstr ""

#: C/radiobutton.js.page:246(section/p)
msgid ""
"The get_active() method is how we can tell which RadioButton's pressed in. "
"This function returns a different silly message depending on which set of "
"buttons was pressed. Its return value is used as the MessageDialog's text "
"property."
msgstr ""

#: C/radiobutton.js.page:248(section/code)
#, no-wrap
msgid ""
"\n"
"    _clearTravelPopUp: function () {\n"
"\n"
"        this._travel.destroy();\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""

#: C/radiobutton.js.page:257(section/p)
msgid ""
"This function is called when the MessageDialog's OK button is pressed. It "
"simply makes the popup go away."
msgstr ""

#: C/radiobutton.js.page:259(section/code)
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new RadioButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/radiobutton.js.page:264(section/p) C/togglebutton.js.page:143(section/p)
msgid ""
"Finally, we create a new instance of the finished RadioButtonExample class, "
"and set the application running."
msgstr ""

#: C/radiobutton.js.page:269(section/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const RadioButtonExample = new Lang.Class({\n"
"    Name: 'RadioButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsradiobutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Travel Planning\"});\n"
"\n"
"        // Create a label for the first group of buttons\n"
"        this._placeLabel = new Gtk.Label ({label: \"Where would you like to travel to?\"});\n"
"\n"
"        // Create three radio buttons three different ways\n"
"        this._place1 = new Gtk.RadioButton ({label: \"The Beach\"});\n"
"\n"
"        this._place2 = Gtk.RadioButton.new_from_widget (this._place1);\n"
"        this._place2.set_label (\"The Moon\");\n"
"\n"
"        this._place3 = Gtk.RadioButton.new_with_label_from_widget (this._place1, \"Antarctica\");\n"
"        // this._place3.set_active (true);\n"
"\n"
"        // Create a label for the second group of buttons\n"
"        this._thingLabel = new Gtk.Label ({label: \"And what would you like to bring?\" });\n"
"\n"
"        // Create three more radio buttons\n"
"        this._thing1 = new Gtk.RadioButton ({label: \"Penguins\" });\n"
"        this._thing2 = new Gtk.RadioButton ({label: \"Sunscreen\", group: this._thing1 });\n"
"        this._thing3 = new Gtk.RadioButton ({label: \"A spacesuit\", group: this._thing1 });\n"
"\n"
"        // Create a stock OK button\n"
"        this._okButton = new Gtk.Button ({\n"
"            label: 'gtk-ok',\n"
"            use_stock: 'true',\n"
"            halign: Gtk.Align.END });\n"
"\n"
"        // Connect the button to the function which handles clicking it\n"
"        this._okButton.connect ('clicked', Lang.bind (this, this._okClicked));\n"
"\n"
"        // Create a grid to put the \"place\" items in\n"
"        this._places = new Gtk.Grid ();\n"
"\n"
"        // Attach the \"place\" items to the grid\n"
"        this._places.attach (this._placeLabel, 0, 0, 1, 1);\n"
"        this._places.attach (this._place1, 0, 1, 1, 1);\n"
"        this._places.attach (this._place2, 0, 2, 1, 1);\n"
"        this._places.attach (this._place3, 0, 3, 1, 1);\n"
"\n"
"        // Create a grid to put the \"thing\" items in\n"
"        this._things = new Gtk.Grid ({ margin_top: 50 });\n"
"\n"
"        // Attach the \"thing\" items to the grid\n"
"        this._things.attach (this._thingLabel, 0, 0, 1, 1);\n"
"        this._things.attach (this._thing1, 0, 1, 1, 1);\n"
"        this._things.attach (this._thing2, 0, 2, 1, 1);\n"
"        this._things.attach (this._thing3, 0, 3, 1, 1);\n"
"\n"
"        // Create a grid to put everything in\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_left: 40,\n"
"            margin_right: 50 });\n"
"\n"
"        // Attach everything to the grid\n"
"        this._grid.attach (this._places, 0, 0, 1, 1);\n"
"        this._grid.attach (this._things, 0, 1, 1, 1);\n"
"        this._grid.attach (this._okButton, 0, 2, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _okClicked: function () {\n"
"\n"
"        // Create a popup that shows a silly message\n"
"        this._travel = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            message_type: Gtk.MessageType.OTHER,\n"
"            buttons: Gtk.ButtonsType.OK,\n"
"            text: this._messageText() });\n"
"\n"
"        // Show the popup\n"
"        this._travel.show();\n"
"\n"
"        // Bind the OK button to the function that closes the popup\n"
"        this._travel.connect (\"response\", Lang.bind (this, this._clearTravelPopUp));\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _messageText: function() {\n"
"\n"
"        // Create a silly message for the popup depending on what you selected\n"
"        var stringMessage = \"\";\n"
"\n"
"        if (this._place1.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"Penguins love the beach, too!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"Make sure to put on that sunscreen!\";\n"
"\n"
"            else stringMessage = \"Are you going to the beach in space?\";\n"
"\n"
"        }\n"
"\n"
"        else if (this._place2.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"The penguins will take over the moon!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"A lack of sunscreen will be the least of your problems!\";\n"
"\n"
"            else stringMessage = \"You'll probably want a spaceship, too!\";\n"
"        }\n"
"\n"
"        else if (this._place3.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"The penguins will be happy to be back home!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"Antarctic sunbathing may be hazardous to your health!\";\n"
"\n"
"            else stringMessage = \"Try bringing a parka instead!\";\n"
"        }\n"
"\n"
"        return stringMessage;\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"\n"
"    _clearTravelPopUp: function () {\n"
"\n"
"        this._travel.destroy();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new RadioButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/radiobutton.js.page:277(item/p) C/statusbar.js.page:224(item/p)
#: C/textview.js.page:251(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Button.html"
"\">Gtk.Button</link>"
msgstr ""

#: C/radiobutton.js.page:278(item/p) C/scale.js.page:212(item/p)
#: C/spinbutton.js.page:203(item/p) C/switch.js.page:269(item/p)
#: C/textview.js.page:252(item/p) C/togglebutton.js.page:156(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Grid.html"
"\">Gtk.Grid</link>"
msgstr ""

#: C/radiobutton.js.page:279(item/p) C/scale.js.page:213(item/p)
#: C/spinbutton.js.page:204(item/p) C/switch.js.page:271(item/p)
#: C/textview.js.page:253(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Label.html"
"\">Gtk.Label</link>"
msgstr ""

#: C/radiobutton.js.page:280(item/p) C/textview.js.page:254(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.RadioButton."
"html\">Gtk.RadioButton</link>"
msgstr ""

#: C/radiobutton.py.page:7(info/title)
msgctxt "text"
msgid "RadioButton (Python)"
msgstr ""

#: C/radiobutton.py.page:19(info/desc)
msgid "Mutually exclusive buttons."
msgstr ""

#: C/radiobutton.py.page:24(page/p)
msgid ""
"Three RadioButtons. You can see in the terminal if they are turned off or on."
msgstr ""

#: C/radiobutton.py.page:30(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"RadioButton Example\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(20)\n"
"\n"
"        # a new radiobutton with a label\n"
"        button1 = Gtk.RadioButton(label=\"Button 1\")\n"
"        # connect the signal \"toggled\" emitted by the radiobutton\n"
"        # with the callback function toggled_cb\n"
"        button1.connect(\"toggled\", self.toggled_cb)\n"
"\n"
"        # another radiobutton, in the same group as button1\n"
"        button2 = Gtk.RadioButton.new_from_widget(button1)\n"
"        # with label \"Button 2\"\n"
"        button2.set_label(\"Button 2\")\n"
"        # connect the signal \"toggled\" emitted by the radiobutton\n"
"        # with the callback function toggled_cb\n"
"        button2.connect(\"toggled\", self.toggled_cb)\n"
"        # set button2 not active by default\n"
"        button2.set_active(False)\n"
"\n"
"        # another radiobutton, in the same group as button1,\n"
"        # with label \"Button 3\"\n"
"        button3 = Gtk.RadioButton.new_with_label_from_widget(button1, \"Button 3\")\n"
"        # connect the signal \"toggled\" emitted by the radiobutton\n"
"        # with the callback function toggled_cb\n"
"        button3.connect(\"toggled\", self.toggled_cb)\n"
"        # set button3 not active by default\n"
"        button3.set_active(False)\n"
"\n"
"        # a grid to place the buttons\n"
"        grid = Gtk.Grid.new()\n"
"        grid.attach(button1, 0, 0, 1, 1);\n"
"        grid.attach(button2, 0, 1, 1, 1);\n"
"        grid.attach(button3, 0, 2, 1, 1);\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # callback function\n"
"    def toggled_cb(self, button):\n"
"        # a string to describe the state of the button\n"
"        state = \"unknown\"\n"
"        # whenever the button is turned on, state is on\n"
"        if button.get_active():\n"
"            state = \"on\"\n"
"        # else state is off\n"
"        else:\n"
"            state = \"off\"\n"
"        # whenever the function is called (a button is turned on or off)\n"
"        # print on the terminal which button was turned on/off\n"
"        print button.get_label() + \" was turned \" + state\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/radiobutton.py.page:34(section/title)
msgid "Useful methods for a RadioButton widget"
msgstr ""

#: C/radiobutton.py.page:35(section/p)
msgid ""
"In line 16 the signal <code>\"toggled\"</code> is connected to the callback "
"function <code>toggled_cb()</code> using <code><var>widget</var>.connect"
"(<var>signal</var>, <var>callback function</var>)</code>. See <link xref="
"\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""

#: C/radiobutton.py.page:37(section/p)
msgid ""
"As seen in <link xref=\"properties.py\"/>, instead of <code>button1 = Gtk."
"RadioButton(label=\"Button 1\")</code> we could create the button and label "
"it with"
msgstr ""

#: C/radiobutton.py.page:38(section/code)
#, no-wrap
msgid ""
"\n"
"button1 = Gtk.RadioButton()\n"
"button1.set_label(\"Button 1\")."
msgstr ""

#: C/radiobutton.py.page:41(section/p)
msgid ""
"Yet another way to create a new RadioButton with a label is <code>button1 = "
"Gtk.RadioButton.new_with_label(None, \"Button 1\")</code> (the first "
"arguement is the group of the radiobuttons, which we can get with "
"<code>get_group()</code>, the second argument is the label)."
msgstr ""

#: C/radiobutton.py.page:50(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkRadioButton.html"
"\">GtkRadioButton</link>"
msgstr ""

#: C/radiobutton.vala.page:7(info/title)
msgctxt "text"
msgid "RadioButton (Vala)"
msgstr ""

#: C/radiobutton.vala.page:20(info/desc)
msgid "A choice from multiple CheckButtons."
msgstr ""

#: C/radiobutton.vala.page:25(page/p)
msgid "These RadioButtons report their activity in the terminal."
msgstr ""

#: C/radiobutton.vala.page:27(page/code)
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"RadioButton Example\");\n"
"\n"
"\t\tthis.border_width = 20;\n"
"\t\tthis.set_default_size (250, 100);\n"
"\n"
"\t\t/* We demonstrate 3 different RadioButton creation methods */\n"
"\n"
"\t\t//Create a Radio Button\n"
"\t\tvar button1 = new Gtk.RadioButton (null);\n"
"\t\tbutton1.set_label (\"Button 1\");\n"
"\n"
"\t\t//Create a RadioButton with a label, and add it to the same group as button1.\n"
"\t\tvar button2 = new Gtk.RadioButton.with_label (button1.get_group(),\"Button 2\");\n"
"\n"
"\t\t//Create a RadioButton with a label, adding it to button1's group.\n"
"\t\tvar button3 = new Gtk.RadioButton.with_label_from_widget (button1, \"Button 3\");\n"
"\n"
"\t\t//Attach the buttons to a grid.\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.attach (button1, 0, 0, 1, 1);\n"
"\t\tgrid.attach (button2, 0, 1, 1, 1);\n"
"\t\tgrid.attach (button3, 0, 2, 1, 1);\n"
"\n"
"\t\t//Add the button to the window.\n"
"\t\tthis.add (grid);\n"
"\n"
"\t\t//Connect the signal handlers (aka. callback functions) to the buttons.\n"
"\t\tbutton1.toggled.connect (button_toggled_cb);\n"
"\t\tbutton2.toggled.connect (button_toggled_cb);\n"
"\t\tbutton3.toggled.connect (button_toggled_cb);\n"
"\t}\n"
"\n"
"\tvoid button_toggled_cb (Gtk.ToggleButton button)\n"
"\t{\n"
"\t\tvar state = \"unknown\";\n"
"\n"
"\t\tif (button.get_active ())\n"
"\t\t\tstate = \"on\";\n"
"\t\telse {\n"
"\t\t\tstate = \"off\";\n"
"\t\t\tprint (\"\\n\");\n"
"\t\t}\n"
"\t\tprint (button.get_label() + \" was turned \" + state + \"\\n\");\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t//Show all of the things.\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/radiobutton.vala.page:32(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.RadioButton.html\">Gtk."
"RadioButton</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/record-collection.js.page:69(media)
msgctxt "_"
msgid ""
"external ref='media/record-collection.png' "
"md5='2d645997687ed5aacd36aafafc16e072'"
msgstr ""
"@@image: 'media/record-collection.png'; md5=2d645997687ed5aacd36aafafc16e072"

#: C/record-collection.js.page:7(info/title)
msgctxt "text"
msgid "Record collection (JavaScript)"
msgstr ""

#: C/record-collection.js.page:10(info/desc)
msgid "Create a small database application for ordering your music collection"
msgstr ""
"Erstellung einer kleinen Datenbankanwendung zum Verwalten Ihrer Musiksammlung"

#: C/record-collection.js.page:28(page/title)
msgid "Record collection"
msgstr ""

#: C/record-collection.js.page:33(item/p)
msgid "How to connect to a database using libgda"
msgstr "eine Verbindung zu einer Datenbank mittels libgda erstellt wird"

#: C/record-collection.js.page:34(item/p)
msgid "How to insert and browse records in a database table"
msgstr ""
"Datensätze in eine Datenbanktabelle eingefügt werden oder wie die Tabelle "
"durchsucht werden kann"

#: C/record-collection.js.page:40(section/p)
msgid ""
"This demo uses the Javascript language. We are going to demonstrate how to "
"connect and use a database from a GTK program, by using the GDA (GNOME Data "
"Access) library. Thus you also need this library installed."
msgstr ""

#: C/record-collection.js.page:43(section/p)
msgid ""
"GNOME Data Access (GDA) is library whose purpose is to provide universal "
"access to different kinds and types of data sources. This goes from "
"traditional relational database systems, to any imaginable kind of data "
"source such as a mail server, a LDAP directory, etc. For more information, "
"and for a full API and documentation, visit the <link href=\"http://library."
"gnome.org/devel/libgda/stable/\">GDA website</link>."
msgstr ""

#: C/record-collection.js.page:46(section/p)
msgid ""
"Although a big part of the code is related to user interface (GUI), we are "
"going to focus our tutorial on the database parts (we might mention other "
"parts we think are relevant though). To know more about Javascript programs "
"in GNOME, see the <link xref=\"image-viewer.js\">Image Viewer program</link> "
"tutorial."
msgstr ""

#: C/record-collection.js.page:59(item/p)
msgid ""
"Choose <gui>Generic Javascript</gui> from the <gui>JS</gui> tab, click "
"<gui>Forward</gui>, and fill-out your details on the next few pages. Use "
"<file>record-collection</file> as project name and directory."
msgstr ""

#: C/record-collection.js.page:62(item/p)
msgid ""
"Click <gui>Finished</gui> and the project will be created for you. Open "
"<file>src/main.js</file> from the <gui>Project</gui> or <gui>File</gui> tabs. "
"It contains very basic example code."
msgstr ""

#: C/record-collection.js.page:68(section/title)
msgid "Program Structure"
msgstr "Programmstruktur"

#: C/record-collection.js.page:70(section/p)
msgid ""
"This demo is a simple GTK application (with a single window) capable of "
"inserting records into a database table as well as browsing all records of "
"the table. The table has two fields: <code>id</code>, an integer, and "
"<code>name</code>, a varchar. The first section (on the top) of the "
"application allows you to insert a record into the table. The last section "
"(bottom) allows you to see all the records of that table. Its content is "
"refreshed every time a new record is inserted and on the application startup."
msgstr ""

#: C/record-collection.js.page:75(section/title)
msgid "Starting the fun"
msgstr ""

#: C/record-collection.js.page:76(section/p)
msgid "Let's start by examining the skeleton of the program:"
msgstr ""

#: C/record-collection.js.page:77(section/code)
#, no-wrap
msgid ""
"\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Gda = imports.gi.Gda;\n"
"const Lang = imports.lang;\n"
"\n"
"function Demo () {\n"
"  this._init ();\n"
"}\n"
"\n"
"Demo.prototype = {\n"
"\n"
"  _init: function () {\n"
"    this.setupWindow ();\n"
"    this.setupDatabase ();\n"
"    this.selectData ();\n"
"  }\n"
"}\n"
"\n"
"Gtk.init (0, null);\n"
"\n"
"var demo = new Demo ();\n"
"\n"
"Gtk.main ();"
msgstr ""

#: C/record-collection.js.page:102(item/p)
msgid ""
"Lines 1‒4: Initial imports. Pay special attention to line 3, which tells "
"Javascript to import the GDA library, our focus in this tutorial."
msgstr ""

#: C/record-collection.js.page:103(item/p)
msgid ""
"Lines 6‒17: Define our <code>Demo</code> class. Pay special attention to "
"lines 13‒15, where we call 3 methods which will do the whole job. They will "
"be detailed below."
msgstr ""

#: C/record-collection.js.page:104(item/p)
msgid "Lines 19‒23: Start the application."
msgstr ""

#: C/record-collection.js.page:109(section/title)
msgid "Designing the application"
msgstr "Entwurf der Anwendung"

#: C/record-collection.js.page:110(section/p)
msgid ""
"Let's take a look at the <code>setupWindow</code> method. It is responsible "
"for creating the User Interface (UI). As UI is not our focus, we will explain "
"only the relevant parts."
msgstr ""

#: C/record-collection.js.page:111(section/code)
#, no-wrap
msgid ""
"\n"
"  setupWindow: function () {\n"
"    this.window = new Gtk.Window ({title: \"Data Access Demo\", height_request: 350});\n"
"    this.window.connect (\"delete-event\", function () {\n"
"      Gtk.main_quit();\n"
"      return true;\n"
"      });\n"
"\n"
"    // main box\n"
"    var main_box = new Gtk.Box ({orientation: Gtk.Orientation.VERTICAL, spacing: 5});\n"
"    this.window.add (main_box);\n"
"\n"
"    // first label\n"
"    var info1 = new Gtk.Label ({label: \"&lt;b&gt;Insert a record&lt;/b&gt;\", xalign: 0, use_markup: true});\n"
"    main_box.pack_start (info1, false, false, 5);\n"
"\n"
"    // \"insert a record\" horizontal box\n"
"    var insert_box = new Gtk.Box ({orientation: Gtk.Orientation.HORIZONTAL, spacing: 5});\n"
"    main_box.pack_start (insert_box, false, false, 5);\n"
"\n"
"    // ID field\n"
"    insert_box.pack_start (new Gtk.Label ({label: \"ID:\"}), false, false, 5);\n"
"    this.id_entry = new Gtk.Entry ();\n"
"    insert_box.pack_start (this.id_entry, false, false, 5);\n"
"\n"
"    // Name field\n"
"    insert_box.pack_start (new Gtk.Label ({label: \"Name:\"}), false, false, 5);\n"
"    this.name_entry = new Gtk.Entry ({activates_default: true});\n"
"    insert_box.pack_start (this.name_entry, true, true, 5);\n"
"\n"
"    // Insert button\n"
"    var insert_button = new Gtk.Button ({label: \"Insert\", can_default: true});\n"
"    insert_button.connect (\"clicked\", Lang.bind (this, this._insertClicked));\n"
"    insert_box.pack_start (insert_button, false, false, 5);\n"
"    insert_button.grab_default ();\n"
"\n"
"    // Browse textview\n"
"    var info2 = new Gtk.Label ({label: \"&lt;b&gt;Browse the table&lt;/b&gt;\", xalign: 0, use_markup: true});\n"
"    main_box.pack_start (info2, false, false, 5);\n"
"    this.text = new Gtk.TextView ({editable: false});\n"
"    var sw = new Gtk.ScrolledWindow ({shadow_type:Gtk.ShadowType.IN});\n"
"    sw.add (this.text);\n"
"    main_box.pack_start (sw, true, true, 5);\n"
"\n"
"    this.count_label = new Gtk.Label ({label: \"\", xalign: 0, use_markup: true});\n"
"    main_box.pack_start (this.count_label, false, false, 0);\n"
"\n"
"    this.window.show_all ();\n"
"  },"
msgstr ""

#: C/record-collection.js.page:161(item/p)
msgid ""
"Lines 22 and 27: Create the 2 entries (for the two fields) in which users "
"will type something to get inserted in the database."
msgstr ""

#: C/record-collection.js.page:162(item/p)
msgid ""
"Lines 31‒34: Create the Insert button. We connect its <code>clicked</code> "
"signal to the <code>_insertClicked</code> private method of the class. This "
"method is detailed below."
msgstr ""

#: C/record-collection.js.page:163(item/p)
msgid ""
"Line 39: Create the widget (<code>TextView</code>) where we will show the "
"contents of the table."
msgstr ""

#: C/record-collection.js.page:164(item/p)
msgid ""
"Line 44: Create the label where we will show the number of records in the "
"table. Initially it's empty, it will be updated later."
msgstr ""

#: C/record-collection.js.page:169(section/title)
msgid "Connecting to and initializing the database"
msgstr ""

#: C/record-collection.js.page:170(section/p)
msgid ""
"The code which makes the connection to the database is in the "
"<code>setupDatabase</code> method below:"
msgstr ""

#: C/record-collection.js.page:173(section/code)
#, no-wrap
msgid ""
"\n"
"  setupDatabase: function () {\n"
"    this.connection = new Gda.Connection ({provider: Gda.Config.get_provider(\"SQLite\"),\n"
"                                          cnc_string:\"DB_DIR=\" + GLib.get_home_dir () + \";DB_NAME=gnome_demo\"});\n"
"    this.connection.open ();\n"
"\n"
"    try {\n"
"      var dm = Gda.execute_select_command (this.connection, \"select * from demo\");\n"
"    } catch (e) {\n"
"      Gda.execute_non_select_command (this.connection, \"create table demo (id integer, name varchar(100))\");\n"
"    }\n"
"  },"
msgstr ""

#: C/record-collection.js.page:187(item/p)
msgid ""
"Lines 2‒3: Create the GDA's <code>Connection</code> object. We must supply to "
"its constructor some properties:"
msgstr ""

#: C/record-collection.js.page:190(item/p)
msgid ""
"<code>provider</code>: One of GDA's supported providers. GDA supports SQLite, "
"MySQL, PostgreSQL, Oracle and many others. For demo purposes we will use a "
"SQLite database, as it comes installed by default in most distributions and "
"it is simple to use (it just uses a file as a database)."
msgstr ""

#: C/record-collection.js.page:193(item/p)
msgid ""
"<code>cnc_string</code>: The connection string. It may change from provider "
"to provider. The syntax for SQLite is: <code>DB_DIR=<var>PATH</var>;"
"DB_NAME=<var>FILENAME</var></code>. In this demo we are accessing a database "
"called gnome_demo in the user home dir (note the call to GLib's "
"<code>get_home_dir</code> function)."
msgstr ""

#: C/record-collection.js.page:197(note/p)
msgid ""
"If the provider is not supported by GDA, or if the connection string is "
"missing some element, line 2 will raise an exception. So, in real life we "
"should handle it with JavaScript's statement <code>try</code>...<code>catch</"
"code>."
msgstr ""

#: C/record-collection.js.page:201(item/p)
msgid ""
"Line 4: Open the connection. In the SQLite provider, if the database does not "
"exist, it will be created in this step."
msgstr ""

#: C/record-collection.js.page:203(item/p)
msgid ""
"Lines 6‒10: Try to do a simple select to check if the table exists (line 7). "
"If it does not exist (because the database was just created), this command "
"will raise an exception, which is handled by the <code>try</code>..."
"<code>catch</code> block. If it is the case, we run the create table "
"statement (line 9)."
msgstr ""

#: C/record-collection.js.page:204(item/p)
msgid ""
"In order to run the SQL commands above we are using global GDA functions, "
"<code>execute_select_command</code> and <code>execute_non_select_command</"
"code>. They are simple to use, and just require two arguments: The "
"<code>Connection</code> object and the SQL command to be parsed."
msgstr ""

#: C/record-collection.js.page:208(section/p)
msgid "At this point we have the database set up, and are ready to use it."
msgstr ""

#: C/record-collection.js.page:212(section/title)
msgid "Selecting"
msgstr "Auswählen"

#: C/record-collection.js.page:213(section/p)
msgid ""
"After connecting to the database, our demo's constructor calls the "
"<code>selectData</code> method. It is responsible for getting all the records "
"in the table and showing them on the <code>TextView</code> widget. Let's take "
"a look at it:"
msgstr ""

#: C/record-collection.js.page:216(section/code)
#, no-wrap
msgid ""
"\n"
"  selectData: function () {\n"
"    var dm = Gda.execute_select_command (this.connection, \"select * from demo order by 1, 2\");\n"
"    var iter = dm.create_iter ();\n"
"\n"
"    var text = \"\";\n"
"\n"
"    while (iter.move_next ()) {\n"
"      var id_field = Gda.value_stringify (iter.get_value_at (0));\n"
"      var name_field = Gda.value_stringify (iter.get_value_at (1));\n"
"\n"
"      text += id_field + \"\\t=&gt;\\t\" + name_field + '\\n';\n"
"    }\n"
"\n"
"    this.text.buffer.text = text;\n"
"    this.count_label.label = \"&lt;i&gt;\" + dm.get_n_rows () + \" record(s)&lt;/i&gt;\";\n"
"  },"
msgstr ""

#: C/record-collection.js.page:234(item/p)
msgid ""
"Line 2: The <code>SELECT</code> command. We are using the global GDA's "
"function <code>execute_select_command</code> for that. It returns a "
"<code>DataModel</code> object, which is later used to retrieve the rows."
msgstr ""

#: C/record-collection.js.page:235(item/p)
msgid ""
"Line 3: Create an <code>Iter</code> object, which is used to iterate over the "
"<code>DataModel</code>'s records."
msgstr ""

#: C/record-collection.js.page:236(item/p)
msgid ""
"Line 7: Loop through all the records, fetching them with the help of the "
"<code>Iter</code> object. At this point, the <code>iter</code> variable "
"contains the actual, retrieved data. Its <code>move_next</code> method "
"returns <code>false</code> when it reaches the last record."
msgstr ""

#: C/record-collection.js.page:238(item/p)
msgid "Lines 8‒9: We do two things in each line:"
msgstr ""

#: C/record-collection.js.page:240(item/p)
msgid ""
"Use <code>Iter</code>'s method <code>get_value_at</code>, which requires only "
"one argument: the column number to retrieve, starting at 0. As our "
"<code>SELECT</code> command returns only two columns, we are retrieving "
"columns 0 and 1."
msgstr ""

#: C/record-collection.js.page:241(item/p)
msgid ""
"The method <code>get_value_at</code> returns the field in GLib's "
"<code>GValue</code> format. A simple way to convert this format to a string "
"is by using GDA's global function <code>value_stringify</code>. That's what "
"we are doing here, and we store the results in the variables <code>id_field</"
"code> and <code>name_field</code>."
msgstr ""

#: C/record-collection.js.page:244(item/p)
msgid ""
"Line 11: Concatenate the two fields to make one text line, separated by <code>"
"\"=&gt;\"</code>, and store it in the <code>text</code> variable."
msgstr ""

#: C/record-collection.js.page:245(item/p)
msgid ""
"Line 14: After the loop is finished, we have all the records formatted in the "
"<code>text</code> variable. In this line we just set the contents of the "
"<code>TextView</code> with that variable."
msgstr ""

#: C/record-collection.js.page:246(item/p)
msgid ""
"Line 15: Display the number of records in the table, making use of the "
"<code>DataModel</code>'s <code>get_n_rows</code> method."
msgstr ""

#: C/record-collection.js.page:251(section/title)
msgid "Inserting"
msgstr ""

#: C/record-collection.js.page:252(section/p)
msgid ""
"OK, we know how to connect to a database and how to select rows from a table. "
"Now it's time to do an <code>INSERT</code> on the table. Do you remember "
"above, in the method <code>setupWindow</code> we connected the <gui>Insert</"
"gui> button's <code>clicked</code> signal to the method <code>_insertClicked</"
"code>? Let's see the implementation of this method."
msgstr ""

#: C/record-collection.js.page:255(section/code)
#, no-wrap
msgid ""
"\n"
"  _insertClicked: function () {\n"
"    if (!this._validateFields ())\n"
"      return;\n"
"\n"
"    // Gda.execute_non_select_command (this.connection,\n"
"    //   \"insert into demo values ('\" + this.id_entry.text + \"', '\" + this.name_entry.text + \"')\");\n"
"\n"
"    var b = new Gda.SqlBuilder ({stmt_type:Gda.SqlStatementType.INSERT});\n"
"    b.set_table (\"demo\");\n"
"    b.add_field_value_as_gvalue (\"id\", this.id_entry.text);\n"
"    b.add_field_value_as_gvalue (\"name\", this.name_entry.text);\n"
"    var stmt = b.get_statement ();\n"
"    this.connection.statement_execute_non_select (stmt, null);\n"
"\n"
"    this._clearFields ();\n"
"    this.selectData ();\n"
"  },"
msgstr ""

#: C/record-collection.js.page:273(section/p)
msgid ""
"We have learned how to use GDA's convenience functions "
"<code>execute_select_command</code> and <code>execute_non_select_command</"
"code> to quickly execute SQL commands on the database. GDA allows one to "
"build a SQL statement indirectly, by using its <code>SqlBuilder</code> "
"object. What are the benefits of this? GDA will generate the SQL statement "
"dynamically, and it will be valid for the connection provider used (it will "
"use the same SQL dialect the provider uses). Let's study the code:"
msgstr ""

#: C/record-collection.js.page:277(item/p)
msgid ""
"Lines 2‒3: Check if the user filled all the fields. The code for the private "
"method <code>_validateFields</code> is really simple and you can read it in "
"the full demo source code."
msgstr ""

#: C/record-collection.js.page:278(item/p)
msgid ""
"Line 5: The faster way of doing the <code>INSERT</code>. It's commented out "
"as we want to show how to use the <code>SqlBuilder</code> object to build a "
"SQL statement portable across databases."
msgstr ""

#: C/record-collection.js.page:279(item/p)
msgid ""
"Line 7: Create the <code>SqlBuilder</code> object. We must pass the type of "
"statement we are going to build. It can be <code>SELECT</code>, <code>UPDATE</"
"code>, <code>INSERT</code> or <code>DELETE</code>."
msgstr ""

#: C/record-collection.js.page:280(item/p)
msgid ""
"Line 8: Set the name of the table on which the built statement will operate "
"(it will generate <code>INSERT INTO demo</code>)"
msgstr ""

#: C/record-collection.js.page:281(item/p)
msgid ""
"Lines 9‒10: Set the fields and its values that will be part of the statement. "
"The first argument is the field name (as in the table). The second one is the "
"value for that field."
msgstr ""

#: C/record-collection.js.page:282(item/p)
msgid ""
"Line 11: Get the dynamically generated <code>Statement</code> object, which "
"represents a SQL statement."
msgstr ""

#: C/record-collection.js.page:283(item/p)
msgid "Line 12: Finally, execute the SQL statement (<code>INSERT</code>)."
msgstr ""

#: C/record-collection.js.page:284(item/p)
msgid ""
"Line 14: Clear the id and name fields on the screen. The code for the private "
"method <code>_clearFields</code> is really simple and you can read it in the "
"full demo source code."
msgstr ""

#: C/record-collection.js.page:285(item/p)
msgid ""
"Line 15: Refresh the view on the screen by doing another <code>SELECT</code>."
msgstr ""

#: C/record-collection.js.page:287(note/p)
msgid ""
"You can also make use of parameters while building the statement. By using "
"the <code>SqlBuilder</code> objects and parameters you are less subject to "
"attacks like SQL injection. Check the <link href=\"http://library.gnome.org/"
"devel/libgda/stable/\">GDA documentation</link> for more information about "
"parameters."
msgstr ""

#: C/record-collection.js.page:292(section/p)
msgid ""
"All of the code you need should now be in place, so try running the code. You "
"now have a database for your record collection!"
msgstr ""

#: C/record-collection.js.page:297(section/p)
msgid ""
"If you run into problems with the tutorial, compare your code with this <link "
"href=\"record-collection/record-collection.js\">reference code</link>."
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/scale.c.page:24(media)
msgctxt "_"
msgid "external ref='media/scale2.png' md5='ae2ba0a6675f3d9cdcd961cdf32f1a5c'"
msgstr "external ref='media/scale2.png' md5='ae2ba0a6675f3d9cdcd961cdf32f1a5c'"

#: C/scale.c.page:7(info/title)
msgctxt "text"
msgid "Scale (C)"
msgstr ""

#: C/scale.c.page:19(info/desc) C/scale.py.page:19(info/desc)
#: C/scale.vala.page:19(info/desc)
msgid "A slider widget for selecting a value from a range"
msgstr ""

#: C/scale.c.page:22(page/title) C/scale.js.page:20(page/title)
#: C/scale.py.page:22(page/title) C/scale.vala.page:22(page/title)
msgid "Scale"
msgstr ""

#: C/scale.c.page:25(page/p) C/scale.py.page:24(page/p)
#: C/scale.vala.page:24(page/p)
msgid "Slide the scales!"
msgstr ""

#: C/scale.c.page:27(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* This is the callback function. \n"
" * It is a handler function which reacts to the signal. \n"
" * In this case, it will notify the user the value of their scale as a label.\n"
" */\n"
"static void\n"
"hscale_moved (GtkRange *range,\n"
"              gpointer  user_data)\n"
"{\n"
"   GtkWidget *label = user_data;\n"
"\n"
"   /* Get the value of the range, and convert it into a string which will be\n"
"    * used as a new label for the horizontal scale.\n"
"    * %.0f - stands for a double that will have 0 decimal places.\n"
"    */\n"
"   gdouble pos = gtk_range_get_value (range);\n"
"   /* Note: Using g_strdup_printf returns a string that must be freed. \n"
"    * (In which is done below)\n"
"    */\n"
"   gchar *str = g_strdup_printf (\"Horizontal scale is %.0f\", pos);\n"
"   gtk_label_set_text (GTK_LABEL (label), str);\n"
"\n"
"   g_free(str);\n"
"}\n"
"\n"
"\n"
"\n"
"/* This is the second callback function. It is a handler function which \n"
" * reacts to the signal. It does the same thing as the function above, except with\n"
" * the vertical scale.\n"
" */\n"
"vscale_moved (GtkRange *range,\n"
"              gpointer  user_data)\n"
"{\n"
"   GtkWidget *label = user_data;\n"
"   \n"
"   gdouble pos = gtk_range_get_value (range);\n"
"   /* %.1f - stands for a double that will have 1 decimal place */\n"
"   gchar *str = g_strdup_printf (\"Vertical scale is %.1f\", pos);\n"
"   gtk_label_set_text (GTK_LABEL (label), str);\n"
"\n"
"   \n"
"   g_free (str);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Declare variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *h_scale;\n"
"  GtkWidget *v_scale;\n"
"  GtkWidget *hlabel;\n"
"  GtkWidget *vlabel;\n"
"  GtkWidget *grid;\n"
"\n"
"  /* The Adjustment object represents a value \n"
"   * which has an associated lower and upper bound.\n"
"   */\n"
"  GtkAdjustment *hadjustment;\n"
"  GtkAdjustment *vadjustment;\n"
"\n"
"  /* Create a window with a title and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Scale Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 400, 300);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 5);\n"
"\n"
"  /* Two labels to be shown in the window */\n"
"  hlabel = gtk_label_new (\"Move the scale handle...\");\n"
"  vlabel = gtk_label_new (\"Move the scale handle...\");\n"
"\n"
"   \n"
"  /* gtk_adjustment_new takes six parameters, three of which \n"
"   * may be difficult to understand:\n"
"   * step increment- move the handle with the arrow keys on your keyboard to see.\n"
"   * page increment - move the handle by clicking away from it \n"
"   * on the scale to see.\n"
"   * page size - not used here.\n"
"   */\n"
"  hadjustment = gtk_adjustment_new (0, 0, 100, 5, 10, 0);\n"
"  vadjustment = gtk_adjustment_new (50, 0, 100, 5, 10, 0); \n"
"\n"
"  /* Create the Horizontal scale, making sure the \n"
"   * digits used have no decimals.\n"
"   */\n"
"  h_scale = gtk_scale_new (GTK_ORIENTATION_HORIZONTAL, hadjustment);\n"
"  gtk_scale_set_digits (GTK_SCALE (h_scale), 0); \n"
"\n"
"  /* Allow it to expand horizontally (if there's space), and \n"
"   * set the vertical alignment\n"
"   */\n"
"  gtk_widget_set_hexpand (h_scale, TRUE);\n"
"  gtk_widget_set_valign (h_scale, GTK_ALIGN_START);\n"
"  \n"
"  /* Connecting the \"value-changed\" signal for the horizontal scale \n"
"   * to the appropriate callback function. \n"
"   * take note that GtkRange is part of GtkScale's Object Hierarchy.\n"
"   */\n"
"  g_signal_connect (h_scale, \n"
"                    \"value-changed\", \n"
"                    G_CALLBACK (hscale_moved), \n"
"                    hlabel);\n"
"\n"
"\n"
"\n"
"  /* Create the Vertical scale. This time, we will see what happens \n"
"   * when the digits arent initially set.\n"
"   */\n"
"  v_scale = gtk_scale_new (GTK_ORIENTATION_VERTICAL, vadjustment);\n"
"  gtk_widget_set_vexpand (v_scale, TRUE);\n"
"\n"
"  /* Connecting the \"value-changed\" signal for the vertical scale to \n"
"   * the appropriate callback function.\n"
"   */\n"
"  g_signal_connect (v_scale, \n"
"                    \"value-changed\", \n"
"                    G_CALLBACK (vscale_moved), \n"
"                    vlabel);\n"
"\n"
"  /* Create a grid and arrange everything accordingly */\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_set_column_spacing (GTK_GRID (grid), 10);\n"
"  gtk_grid_set_column_homogeneous (GTK_GRID (grid), TRUE);\n"
"  gtk_grid_attach (GTK_GRID (grid), h_scale, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), v_scale, 1, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), hlabel, 0, 1, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), vlabel, 1, 1, 1, 1);\n"
"  \n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""

#: C/scale.c.page:35(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkScale.html\">GtkScale</"
"link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkScale.html\">GtkScale</"
"link>"

#: C/scale.c.page:36(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkRange.html\">GtkRange</"
"link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkRange.html\">GtkRange</"
"link>"

#: C/scale.c.page:37(item/p) C/spinbutton.c.page:38(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkAdjustment.html"
"\">GtkAdjustment</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkAdjustment.html"
"\">GtkAdjustment</link>"

#: C/scale.c.page:38(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-String-Utility-"
"Functions.html#g-strdup-printf\">String Utility Functions</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-String-Utility-"
"Functions.html#g-strdup-printf\">String Utility Functions</link>"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/scale.js.page:21(media)
msgctxt "_"
msgid ""
"external ref='media/scalepenguins.png' md5='2dbe6a833fec86fde71a5ddb421e2cd5'"
msgstr ""
"external ref='media/scalepenguins.png' md5='2dbe6a833fec86fde71a5ddb421e2cd5'"

#: C/scale.js.page:7(info/title)
#, fuzzy
#| msgid "JavaScript"
msgctxt "text"
msgid "Scale (JavaScript)"
msgstr "JavaScript"

#: C/scale.js.page:17(info/desc)
msgid "A slider which corresponds to a numerical value"
msgstr ""

#: C/scale.js.page:22(page/p)
msgid ""
"A Scale is a horizontal or vertical slider, that represents a value inside a "
"numerical range. When you create a new Scale, you set what its default "
"position is, what the numbers at the top and bottom of the range are, and "
"things like how much it moves up or down when you click on the Scale to "
"either side of the knob. To keep from having to type all that in every time "
"you create a new Scale, you can create an object called an Adjustment which "
"keeps track of all that, then tell each new Scale to use that Adjustment."
msgstr ""

#: C/scale.js.page:23(page/p)
msgid ""
"This scale is a simple widget that lets you adjust the size of an iceberg "
"that penguins live on. The number of penguins on the iceberg is the product "
"of the values of the two sliders. Try playing with them and seeing what "
"happens."
msgstr ""

#: C/scale.js.page:40(section/code)
#, no-wrap
msgid ""
"\n"
"const ScaleExample = new Lang.Class({\n"
"    Name: 'Scale Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsscale'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""

#: C/scale.js.page:65(section/p)
msgid ""
"All the code for this sample goes in the ScaleExample class. The above code "
"creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"Application.html\">Gtk.Application</link> for our widgets and window to go in."
msgstr ""

#: C/scale.js.page:66(section/code)
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Birds on a Floe\"});\n"
msgstr ""

#: C/scale.js.page:81(section/title)
#, fuzzy
#| msgid "Connecting the signals"
msgid "Creating the scales"
msgstr "Verbinden der Signale"

#: C/scale.js.page:82(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the horizontal scale\n"
"        this._hScale = Gtk.Scale.new_with_range (Gtk.Orientation.HORIZONTAL, 0.0, 100.0, 5.0);\n"
"        this._hScale.set_valign (Gtk.Align.START);\n"
"        this._hScale.set_value (50);\n"
"        this._hScale.set_digits (0);\n"
"        // this._hScale.set_draw_value (false);\n"
msgstr ""

#: C/scale.js.page:91(section/p)
msgid ""
"The new_with_range method is one way to create a new Scale widget. The "
"parameters it takes are a <link href=\"http://www.roojs.org/seed/gir-1.2-"
"gtk-3.0/gjs/Gtk.Orientation.html\">Gtk.Orientation</link>, the minimum value, "
"the maximum value, and the increment for a single step. After that we use the "
"Scale's methods to set its starting value, and how many decimal places it "
"runs to. We also set its vertical alignment in this case, to control where it "
"appears in the window."
msgstr ""

#: C/scale.js.page:92(section/p)
msgid ""
"We can use the set_draw_value method to tell it whether or not to show the "
"number next to the sliding scale. It's commented out in this example."
msgstr ""

#: C/scale.js.page:94(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a master adjustment to use for the vertical (or any other) scale\n"
"        this._adjustment = new Gtk.Adjustment ({\n"
"            value: 95,\n"
"            lower: 0,\n"
"            upper: 100,\n"
"            step_increment: 5,\n"
"            page_increment: 10 });\n"
msgstr ""

#: C/scale.js.page:104(section/p)
msgid ""
"An Adjustment is an object we can use to simplify things when creating a new "
"Scale. The Adjustment's \"value\" property is what the Scale's default value "
"is, while \"upper\" and \"lower\" make the high and low ends of the numerical "
"range. Meanwhile, the increment values show how much the slider moves when "
"you do things like click on it."
msgstr ""

#: C/scale.js.page:106(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a vertical scale using the adjustment we just made\n"
"        this._vScale = new Gtk.Scale ({\n"
"            orientation: Gtk.Orientation.VERTICAL,\n"
"            adjustment: this._adjustment,\n"
"            digits: 0,\n"
"            // draw_value: false,\n"
"            margin_left: 10 });\n"
msgstr ""

#: C/scale.js.page:116(section/p)
msgid ""
"Here we create a new Scale object using _adjustment as its \"adjustment\" "
"property. This is a great shortcut. We still have to tell it to round off the "
"decimal place, though. Note that the draw_value property is commented out; "
"this is how you tell it not to show the number next to the Scale when you're "
"creating one this way."
msgstr ""

#: C/scale.js.page:118(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the label that shows the product of the two values\n"
"        this._product = (this._hScale.get_value() * this._vScale.get_value());\n"
"        this._label = new Gtk.Label ({\n"
"            label: (String(this._product) + \" penguins on the iceberg.\"),\n"
"            height_request: 200,\n"
"            width_request: 200,\n"
"            wrap: true});\n"
"\n"
"        // Connect the two scales to functions which recalculate the label\n"
"        this._hScale.connect (\"value-changed\", Lang.bind (this, this._recalc));\n"
"        this._vScale.connect (\"value-changed\", Lang.bind (this, this._recalc));\n"
msgstr ""

#: C/scale.js.page:132(section/p)
msgid ""
"We can use the get_value method to find out the numerical value a Scale is "
"set at. We can then do whatever we want with it, including multiply the two "
"Scales' values together and have a <link xref=\"label.js\">Label</link> show "
"us the product. We set the label's text to wrap around, because we're having "
"it display a silly message too."
msgstr ""

#: C/scale.js.page:133(section/p)
msgid ""
"After we create the Label, we connect the two Scales' \"value-changed\" "
"signals to _recalc, a function that will recalculate the number of penguins "
"on the iceberg and come up with a new message."
msgstr ""

#: C/scale.js.page:135(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a grid to arrange things in\n"
"        this._UIGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_top: 20,\n"
"            margin_left: 20});\n"
"\n"
"        // Attach everything to the grid\n"
"        this._UIGrid.attach (this._label, 0, 0, 1, 1);\n"
"        this._UIGrid.attach (this._hScale, 0, 1, 1, 1);\n"
"        this._UIGrid.attach (this._vScale, 1, 0, 1, 1);\n"
msgstr ""

#: C/scale.js.page:148(section/p)
msgid ""
"Here we create a <link xref=\"grid.js\">Grid</link> to put everything in, "
"then attach all our widgets to it. Note that here and on some of the widgets "
"themselves we're using margins to keep things neatly spaced."
msgstr ""

#: C/scale.js.page:149(section/code)
#, no-wrap
msgid ""
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._UIGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""

#: C/scale.js.page:157(section/p)
msgid ""
"Finally, we add the Grid to the window, then tell the window to show itself "
"and all the widgets inside of it."
msgstr ""

#: C/scale.js.page:161(section/title)
msgid "Function which handles the scales' values changing"
msgstr ""

#: C/scale.js.page:163(section/code)
#, no-wrap
msgid ""
"\n"
"    _recalc: function() {\n"
"\n"
"        // Figure out what the product of the two scales' values is\n"
"        var product = (this._hScale.get_value() * this._vScale.get_value());\n"
"\n"
"        // Create a blank comment line in case there isn't a silly comment to make\n"
"        var comment = \"\";\n"
"\n"
"        // Make a silly comment based on the number of penguins\n"
"        if (product &gt; 9000) {\n"
"            comment = \"It's over 9000!\";\n"
"        }\n"
"        else if (product &lt; 1000 &amp;&amp; product &gt; 0) {\n"
"            comment = \"They're getting lonely.\";\n"
"        }\n"
"        else if (product == 0) {\n"
"            comment = \"They're all gone ...\";\n"
"        }\n"
"        else comment = \"\";\n"
"\n"
"        // Set ._label's new text\n"
"        this._label.set_label (String (product) + \" penguins on the iceberg. \" + comment);\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""

#: C/scale.js.page:191(section/p)
msgid ""
"Remember, we can get a Scale's value using its get_value method. Here we "
"simply recalculate what the product of the two values is after one of the "
"Scales is moved, add in a silly message depending on how many penguins are "
"left, and change the wording on _label to show the new number and message."
msgstr ""

#: C/scale.js.page:193(section/code)
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new ScaleExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/scale.js.page:198(section/p)
msgid ""
"Finally, we create a new instance of the finished ScaleExample class, and set "
"the application running."
msgstr ""

#: C/scale.js.page:203(section/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ScaleExample = new Lang.Class({\n"
"    Name: 'Scale Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsscale'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Birds on a Floe\"});\n"
"\n"
"        // Create the horizontal scale\n"
"        this._hScale = Gtk.Scale.new_with_range (Gtk.Orientation.HORIZONTAL, 0.0, 100.0, 5.0);\n"
"        this._hScale.set_valign (Gtk.Align.START);\n"
"        this._hScale.set_value (50);\n"
"        this._hScale.set_digits (0);\n"
"        // this._hScale.set_draw_value (false);\n"
"\n"
"        // Create a master adjustment to use for the vertical (or any other) scale\n"
"        this._adjustment = new Gtk.Adjustment ({\n"
"            value: 95,\n"
"            lower: 0,\n"
"            upper: 100,\n"
"            step_increment: 5,\n"
"            page_increment: 10 });\n"
"\n"
"        // Create a vertical scale using the adjustment we just made\n"
"        this._vScale = new Gtk.Scale ({\n"
"            orientation: Gtk.Orientation.VERTICAL,\n"
"            adjustment: this._adjustment,\n"
"            digits: 0,\n"
"            // draw_value: false,\n"
"            margin_left: 10 });\n"
"\n"
"        // Create the label that shows the product of the two values\n"
"        this._product = (this._hScale.get_value() * this._vScale.get_value());\n"
"        this._label = new Gtk.Label ({\n"
"            label: (String(this._product) + \" penguins on the iceberg.\"),\n"
"            height_request: 200,\n"
"            width_request: 200,\n"
"            wrap: true});\n"
"\n"
"        // Connect the two scales to functions which recalculate the label\n"
"        this._hScale.connect (\"value-changed\", Lang.bind (this, this._recalc));\n"
"        this._vScale.connect (\"value-changed\", Lang.bind (this, this._recalc));\n"
"\n"
"        // Create a grid to arrange things in\n"
"        this._UIGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_top: 20,\n"
"            margin_left: 20});\n"
"\n"
"        // Attach everything to the grid\n"
"        this._UIGrid.attach (this._label, 0, 0, 1, 1);\n"
"        this._UIGrid.attach (this._hScale, 0, 1, 1, 1);\n"
"        this._UIGrid.attach (this._vScale, 1, 0, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._UIGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _recalc: function() {\n"
"\n"
"        // Figure out what the product of the two scales' values is\n"
"        var product = (this._hScale.get_value() * this._vScale.get_value());\n"
"\n"
"        // Create a blank comment line in case there isn't a silly comment to make\n"
"        var comment = \"\";\n"
"\n"
"        // Make a silly comment based on the number of penguins\n"
"        if (product &gt; 9000) {\n"
"            comment = \"It's over 9000!\";\n"
"        }\n"
"        else if (product &lt; 1000 &amp;&amp; product &gt; 0) {\n"
"            comment = \"They're getting lonely.\";\n"
"        }\n"
"        else if (product == 0) {\n"
"            comment = \"They're all gone ...\";\n"
"        }\n"
"        else comment = \"\";\n"
"\n"
"        // Set ._label's new text\n"
"        this._label.set_label (String (product) + \" penguins on the iceberg. \" + comment);\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ScaleExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/scale.js.page:209(item/p) C/spinbutton.js.page:200(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Adjustment.html"
"\">Gtk.Adjustment</link>"
msgstr ""

#: C/scale.js.page:214(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Scale.html"
"\">Gtk.Scale</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/scale.py.page:23(media) C/scale.vala.page:23(media)
msgctxt "_"
msgid "external ref='media/scale.png' md5='462c52a53b773cb9e8c62c646bf88452'"
msgstr "external ref='media/scale.png' md5='462c52a53b773cb9e8c62c646bf88452'"

#: C/scale.py.page:7(info/title)
#, fuzzy
#| msgid "Python"
msgctxt "text"
msgid "Scale (Python)"
msgstr "Python"

#: C/scale.py.page:30(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Scale Example\", application=app)\n"
"        self.set_default_size(400, 300)\n"
"        self.set_border_width(5)\n"
"\n"
"        # two adjustments (initial value, min value, max value,\n"
"        # step increment - press cursor keys to see!,\n"
"        # page increment - click around the handle to see!,\n"
"        # page size - not used here)\n"
"        ad1 = Gtk.Adjustment(0, 0, 100, 5, 10, 0)\n"
"        ad2 = Gtk.Adjustment(50, 0, 100, 5, 10, 0)\n"
"\n"
"        # an horizontal scale\n"
"        self.h_scale = Gtk.Scale(orientation=Gtk.Orientation.HORIZONTAL, adjustment=ad1)\n"
"        # of integers (no digits)\n"
"        self.h_scale.set_digits(0)\n"
"        # that can expand horizontally if there is space in the grid (see below)\n"
"        self.h_scale.set_hexpand(True)\n"
"        # that is aligned at the top of the space allowed in the grid (see below)\n"
"        self.h_scale.set_valign(Gtk.Align.START)\n"
"\n"
"        # we connect the signal \"value-changed\" emitted by the scale with the callback\n"
"        # function scale_moved\n"
"        self.h_scale.connect(\"value-changed\", self.scale_moved)\n"
"\n"
"        # a vertical scale\n"
"        self.v_scale = Gtk.Scale(orientation=Gtk.Orientation.VERTICAL, adjustment=ad2)\n"
"        # that can expand vertically if there is space in the grid (see below)\n"
"        self.v_scale.set_vexpand(True)\n"
"\n"
"        # we connect the signal \"value-changed\" emitted by the scale with the callback\n"
"        # function scale_moved\n"
"        self.v_scale.connect(\"value-changed\", self.scale_moved)\n"
"\n"
"        # a label\n"
"        self.label = Gtk.Label()\n"
"        self.label.set_text(\"Move the scale handles...\")\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.set_column_spacing(10)\n"
"        grid.set_column_homogeneous(True)\n"
"        grid.attach(self.h_scale, 0, 0, 1, 1)\n"
"        grid.attach_next_to(self.v_scale, self.h_scale, Gtk.PositionType.RIGHT, 1, 1)\n"
"        grid.attach(self.label, 0, 1, 2, 1)\n"
"\n"
"        self.add(grid)\n"
"\n"
"    # any signal from the scales is signaled to the label the text of which is changed\n"
"    def scale_moved(self, event):\n"
"        self.label.set_text(\"Horizontal scale is \" + str(int(self.h_scale.get_value())) +\n"
"                            \"; vertical scale is \" + str(self.v_scale.get_value()) + \".\")\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/scale.py.page:34(section/title)
msgid "Useful methods for a Scale widget"
msgstr ""

#: C/scale.py.page:35(section/p)
msgid ""
"A Gtk.Adjustment is needed to construct the Gtk.Scale. This is the "
"representation of a value with a lower and upper bound, together with step "
"and page increments, and a page size, and it is constructed as <code>Gtk."
"Adjustment(value, lower, upper, step_increment, page_increment, page_size)</"
"code> where the fields are of type <code>float</code>; <code>step_increment</"
"code> is the increment/decrement that is obtained by using the cursor keys, "
"<code>page_increment</code> the one that is obtained clicking on the scale "
"itself. Note that <code>page_size</code> is not used in this case, it should "
"be set to <code>0</code>."
msgstr ""

#: C/scale.py.page:36(section/p)
msgid ""
"In line 28 the signal <code>\"value-changed\"</code> is connected to the "
"callback function <code>scale_moved()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""

#: C/scale.py.page:38(item/p)
msgid ""
"<code>get_value()</code> retrieves the current value of the scale; "
"<code>set_value(value)</code> sets it (if the <code>value</code>, of type "
"<code>float</code>, is outside the minimum or maximum range, it will be "
"clamped to fit inside them). These are methods of the class Gtk.Range."
msgstr ""

#: C/scale.py.page:39(item/p)
msgid ""
"Use <code>set_draw_value(False)</code> to avoid displaying the current value "
"as a string next to the slider."
msgstr ""

#: C/scale.py.page:40(item/p)
msgid ""
"To highlight the part of the scale between the origin and the current value:"
msgstr ""

#: C/scale.py.page:41(item/code)
#, no-wrap
msgid ""
"\n"
"self.h_scale.set_restrict_to_fill_level(False)\n"
"self.h_scale.set_fill_level(self.h_scale.get_value())\n"
"self.h_scale.set_show_fill_level(True)"
msgstr ""

#: C/scale.py.page:45(item/p)
msgid ""
"in the callback function of the \"value-changed\" signal, so to have the new "
"filling every time the value is changed. These are methods of the class Gtk."
"Range."
msgstr ""

#: C/scale.py.page:47(item/p)
msgid ""
"<code>add_mark(value, position, markup)</code> adds a mark at the "
"<code>value</code> (<code>float</code> or <code>int</code> if that is the "
"precision of the scale), in <code>position</code> (<code>Gtk.PositionType."
"LEFT, Gtk.PositionType.RIGHT, Gtk.PositionType.TOP, Gtk.PositionType.BOTTOM</"
"code>) with text <code>Null</code> or <code>markup</code> in the Pango Markup "
"Language. To clear marks, <code>clear_marks()</code>."
msgstr ""

#: C/scale.py.page:48(item/p)
msgid ""
"<code>set_digits(digits)</code> sets the precision of the scale at "
"<code>digits</code> digits."
msgstr ""

#: C/scale.py.page:56(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkScale.html"
"\">GtkScale</link>"
msgstr ""

#: C/scale.py.page:57(item/p) C/spinbutton.py.page:49(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkAdjustment.html"
"\">GtkAdjustment</link>"
msgstr ""

#: C/scale.py.page:58(item/p) C/scrolledwindow.py.page:45(item/p)
#: C/textview.py.page:99(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/gtk3-Standard-"
"Enumerations.html\">Standard Enumerations</link>"
msgstr ""

#: C/scale.vala.page:7(info/title)
msgctxt "text"
msgid "Scale (Vala)"
msgstr ""

#: C/scale.vala.page:26(page/code)
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\tGtk.Scale h_scale;\n"
"\tGtk.Scale v_scale;\n"
"\tGtk.Label label;\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"Scale Example\";\n"
"\t\twindow.set_default_size (400, 300);\n"
"\t\twindow.set_border_width (5);\n"
"\n"
"\t\th_scale = new Gtk.Scale.with_range (Gtk.Orientation.HORIZONTAL, 0.0, 100.0, 5.0);\n"
"\t\th_scale.set_digits (0); //number of decimal places displayed\n"
"\t\th_scale.set_valign (Gtk.Align.START); //horizontal alignment\n"
"\n"
"\t\tvar adjustment = new Gtk.Adjustment (42.0, 0.0, 100.0, 5.0, 10.0, 0.0);\n"
"\t\tv_scale = new Gtk.Scale (Gtk.Orientation.VERTICAL, adjustment);\n"
"\t\tv_scale.set_vexpand(true);\n"
"\n"
"\t\tlabel = new Gtk.Label (\"Move the scale handles...\");\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.set_column_spacing (10); //amount of space between columns\n"
"\t\tgrid.set_column_homogeneous (true); //all columns same width\n"
"\t\tgrid.attach (h_scale, 0, 0, 1, 1);\n"
"\t\tgrid.attach_next_to (v_scale, h_scale, Gtk.PositionType.RIGHT, 1, 1);\n"
"\t\tgrid.attach (label, 0, 1, 2, 1);\n"
"\n"
"\t\th_scale.value_changed.connect (scale_moved);\n"
"\t\tv_scale.value_changed.connect (scale_moved);\n"
"\n"
"\t\twindow.add (grid);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"\n"
"\t/* Callback function for \"value-changed\" signal.\n"
"\t * The paramter refers to the scale which emitted the signal.\n"
"\t * Since we are accessing the values of not one, but two scales,\n"
"\t * we made the ranges instance variables, and ignore the\n"
"\t * parameter.\n"
"\t */\n"
"\tvoid scale_moved (Gtk.Range range) {\n"
"\t\tlabel.set_text (\"Horizontal scale is %.1f; vertical scale is %.1f.\".printf (h_scale.get_value (), v_scale.get_value ()));\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/scale.vala.page:31(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Scale.html\">Gtk.Scale</link>"
msgstr ""

#: C/scale.vala.page:32(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Adjustment.html\">Gtk."
"Adjustment</link>"
msgstr ""

#: C/scale.vala.page:33(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.PositionType.html\">Gtk."
"PositionType</link>"
msgstr ""

#: C/scale.vala.page:34(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Orientation.html\">Gtk."
"Orientation</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/scrolledwindow.c.page:24(media) C/scrolledwindow.py.page:22(media)
#: C/scrolledwindow.vala.page:22(media)
msgctxt "_"
msgid ""
"external ref='media/scrolledwindow.png' md5='697bb3205d5c4fb0b4ea8db435843157'"
msgstr ""
"external ref='media/scrolledwindow.png' md5='697bb3205d5c4fb0b4ea8db435843157'"

#: C/scrolledwindow.c.page:7(info/title)
msgctxt "text"
msgid "ScrolledWindow (C)"
msgstr ""

#: C/scrolledwindow.c.page:19(info/desc) C/scrolledwindow.py.page:18(info/desc)
#: C/scrolledwindow.vala.page:18(info/desc)
msgid "Adds scrollbars to its child widget"
msgstr ""

#: C/scrolledwindow.c.page:22(page/title)
#: C/scrolledwindow.py.page:21(page/title)
#: C/scrolledwindow.vala.page:21(page/title)
msgid "ScrolledWindow"
msgstr ""

#: C/scrolledwindow.c.page:25(page/p) C/scrolledwindow.py.page:23(page/p)
#: C/scrolledwindow.vala.page:23(page/p)
msgid "An image in a scrolled window."
msgstr ""

#: C/scrolledwindow.c.page:27(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Declare variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *scrolled_window;\n"
"  GtkWidget *image;\n"
"\n"
"  /* Create a window with a title, and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"ScrolledWindow Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 220, 200);\n"
"\n"
"  /* Create the scrolled window. Usually NULL is passed for both parameters so\n"
"   * that it creates the horizontal/vertical adjustments automatically. Setting\n"
"   * the scrollbar policy to automatic allows the scrollbars to only show up\n"
"   * when needed.\n"
"   */\n"
"  scrolled_window = gtk_scrolled_window_new (NULL, NULL);\n"
"  /* Set the border width */\n"
"  gtk_container_set_border_width (GTK_CONTAINER (scrolled_window), 10);\n"
"  /* Extract our desired image from a file that we have */\n"
"  image = gtk_image_new_from_file (\"gnome-image.png\");\n"
"  /* And add it to the scrolled window */\n"
"  gtk_scrolled_window_add_with_viewport (GTK_SCROLLED_WINDOW (scrolled_window), image);\n"
"  /* Set the policy of the horizontal and vertical scrollbars to automatic.\n"
"   * What this means is that the scrollbars are only present if needed.\n"
"   */\n"
"  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window),\n"
"                                  GTK_POLICY_AUTOMATIC,\n"
"                                  GTK_POLICY_AUTOMATIC);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), scrolled_window);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""

#: C/scrolledwindow.c.page:36(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk/stable/gtk-Standard-Enumerations."
"html#GtkPolicyType\">GtkPolicyType</link>"
msgstr ""

#: C/scrolledwindow.py.page:7(info/title)
msgctxt "text"
msgid "ScrolledWindow (Python)"
msgstr ""

#: C/scrolledwindow.py.page:29(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"ScrolledWindow Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"\n"
"        # the scrolledwindow\n"
"        scrolled_window = Gtk.ScrolledWindow()\n"
"        scrolled_window.set_border_width(10)\n"
"        # there is always the scrollbar (otherwise: AUTOMATIC - only if needed - or NEVER)\n"
"        scrolled_window.set_policy(Gtk.PolicyType.ALWAYS, Gtk.PolicyType.ALWAYS)\n"
"\n"
"        # an image - slightly larger than the window...\n"
"        image = Gtk.Image()\n"
"        image.set_from_file(\"gnome-image.png\")\n"
"\n"
"        # add the image to the scrolledwindow\n"
"        scrolled_window.add_with_viewport(image)\n"
"\n"
"        # add the scrolledwindow to the window\n"
"        self.add(scrolled_window)\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/scrolledwindow.py.page:32(section/title)
msgid "Useful methods for a ScrolledWindow widget"
msgstr ""

#: C/scrolledwindow.py.page:34(item/p)
msgid ""
"<code>set_policy(hscrollbar_policy, vscrollbar_policy)</code> where each of "
"the arguments is one of <code>Gtk.Policy.AUTOMATIC, Gtk.Policy.ALWAYS, Gtk."
"Policy.NEVER</code> regulates whether the horizontal and vertical scrollbars "
"should appear: with <code>AUTOMATIC</code> they appear only if needed, "
"<code>ALWAYS</code> and <code>NEVER</code> are self-explanatory."
msgstr ""

#: C/scrolledwindow.py.page:35(item/p)
msgid ""
"<code>add_with_viewport(widget)</code> is used to add the Gtk.Widget "
"<code>widget</code> without native scrolling capabilities inside the window."
msgstr ""

#: C/scrolledwindow.py.page:36(item/p)
msgid ""
"<code>set_placement(window_placement)</code> sets the placement of the "
"contents with respect to the scrollbars for the scrolled window. The options "
"for the argument are <code>Gtk.CornerType.TOP_LEFT</code> (default: the "
"scrollbars are on the bottom and on the right of the window), <code>Gtk."
"CornerType.TOP_RIGHT, Gtk.CornerType.BOTTOM_LEFT, Gtk.CornerType."
"BOTTOM_RIGHT</code>."
msgstr ""

#: C/scrolledwindow.py.page:37(item/p)
msgid ""
"<code>set_hadjustment(adjustment)</code> and <code>set_vadjustment(adjustment)"
"</code> set the Gtk.Adjustment <code>adjustment</code>. This is the "
"representation of a value with a lower and upper bound, together with step "
"and page increments, and a page size, and it is constructed as <code>Gtk."
"Adjustment(value, lower, upper, step_increment, page_increment, page_size)</"
"code> where the fields are of type <code>float</code>. (Note that "
"<code>step_increment</code> is not used in this case, it can be set to "
"<code>0</code>.)"
msgstr ""

#: C/scrolledwindow.py.page:44(item/p) C/textview.py.page:98(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkScrolledWindow.html"
"\">GtkScrolledWindow</link>"
msgstr ""

#: C/scrolledwindow.vala.page:7(info/title)
msgctxt "text"
msgid "ScrolledWindow (Vala)"
msgstr ""

#: C/scrolledwindow.vala.page:25(page/code)
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\t/* Create the window of this application. */\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"ScrolledWindow Example\";\n"
"\t\twindow.set_default_size (200, 200);\n"
"\n"
"\t\tvar scrolled_window = new Gtk.ScrolledWindow (null, null);\n"
"\t\tscrolled_window.set_border_width (10);\n"
"\t\tscrolled_window.add_with_viewport (new Gtk.Image.from_file (\"gnome-image.png\"));\n"
"\t\tscrolled_window.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);\n"
"\n"
"\t\twindow.add (scrolled_window);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/scrolledwindow.vala.page:30(item/p) C/textview.vala.page:36(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ScrolledWindow.html\">Gtk."
"ScrolledWindow</link>"
msgstr ""

#: C/scrolledwindow.vala.page:31(item/p) C/textview.vala.page:38(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.PolicyType.html\">Gtk."
"PolicyType</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/separator.py.page:24(media)
msgctxt "_"
msgid ""
"external ref='media/separator.png' md5='8769b27662ce5c77f99e9ce33751a21a'"
msgstr ""
"external ref='media/separator.png' md5='8769b27662ce5c77f99e9ce33751a21a'"

#: C/separator.py.page:7(info/title)
msgctxt "text"
msgid "Seperator (Python)"
msgstr ""

#: C/separator.py.page:19(info/desc)
msgid "A separator widget"
msgstr ""

#: C/separator.py.page:22(page/title)
msgid "Separator"
msgstr ""

#: C/separator.py.page:25(page/p)
msgid "A horizontal and a vertical separator divide some labels."
msgstr ""

#: C/separator.py.page:31(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Separator Example\", application=app)\n"
"\n"
"        # three labels\n"
"        label1 = Gtk.Label()\n"
"        label1.set_text(\"Below, a horizontal separator.\")\n"
"\n"
"        label2 = Gtk.Label()\n"
"        label2.set_text(\"On the right, a vertical separator.\")\n"
"\n"
"        label3 = Gtk.Label()\n"
"        label3.set_text(\"On the left, a vertical separator.\")\n"
"\n"
"        # a horizontal separator\n"
"        hseparator = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)\n"
"        # a vertical separator\n"
"        vseparator = Gtk.Separator(orientation=Gtk.Orientation.VERTICAL)\n"
"\n"
"        # a grid to attach labels and separators\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(label1, 0, 0, 3, 1)\n"
"        grid.attach(hseparator, 0, 1, 3, 1)\n"
"        grid.attach(label2, 0, 2, 1, 1)\n"
"        grid.attach(vseparator, 1, 2, 1, 1)\n"
"        grid.attach(label3, 2, 2, 1, 1)\n"
"        grid.set_column_homogeneous(True)\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"\twin = MyWindow(self)\n"
"\twin.show_all()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/separator.py.page:35(section/title)
msgid "API Reference"
msgstr "API-Referenz"

#: C/separator.py.page:39(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkSeparator.html"
"\">GtkSeparator</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/set-up-gedit.js.page:24(media)
msgctxt "_"
msgid ""
"external ref='media/geditview.png' md5='f1438295662d95f56fcd1d8200efaaf2'"
msgstr ""
"external ref='media/geditview.png' md5='f1438295662d95f56fcd1d8200efaaf2'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/set-up-gedit.js.page:36(media)
msgctxt "_"
msgid ""
"external ref='media/gediteditor.png' md5='50db1ee8f2c545744879ee9fba5b4b24'"
msgstr ""
"external ref='media/gediteditor.png' md5='50db1ee8f2c545744879ee9fba5b4b24'"

#: C/set-up-gedit.js.page:18(page/title)
msgid "Set up gedit for JavaScript development"
msgstr ""

#: C/set-up-gedit.js.page:19(page/p)
msgid ""
"This tutorial will show you how to set up <link href=\"http://projects.gnome."
"org/gedit/\">gedit</link>, GNOME's basic text editor, so that it has a "
"handful of extra features which are useful for writing JavaScript code."
msgstr ""

#: C/set-up-gedit.js.page:22(section/title)
msgid "Making code clearer"
msgstr ""

#: C/set-up-gedit.js.page:23(section/p)
msgid ""
"Click on <gui>Edit</gui> in gedit's menu bar, then click on <gui>Preferences</"
"gui>. You should see something like this:"
msgstr ""

#: C/set-up-gedit.js.page:25(section/p)
msgid "Here are the options you want to make sure are turned on."
msgstr ""

#: C/set-up-gedit.js.page:27(item/p)
msgid ""
"<gui>Display line numbers</gui> will help you compare the code you type in "
"with the original, and make it easier to see which line is causing an error "
"if there is a bug."
msgstr ""

#: C/set-up-gedit.js.page:28(item/p)
msgid ""
"<gui>Highlight current line</gui> makes it easier to see which line you're "
"on, when you have to go back and forth a lot."
msgstr ""

#: C/set-up-gedit.js.page:29(item/p)
msgid ""
"<gui>Highlight matching brackets</gui> helps you make sure you didn't leave "
"out a bracket by accident."
msgstr ""

#: C/set-up-gedit.js.page:34(section/title)
msgid "Making editing easier"
msgstr ""

#: C/set-up-gedit.js.page:35(section/p)
msgid ""
"In gedit's <gui>Preferences</gui> dialog, click on the <gui>Editor</gui> tab. "
"You should see something like this:"
msgstr ""

#: C/set-up-gedit.js.page:37(section/p)
msgid ""
"Here, you want to have <gui>Enable automatic indentation</gui> turned on. "
"This means that when you hit <key>Enter</key> the cursor stays indented as "
"far as the last line was. This is extremely useful when writing JavaScript "
"code, since it uses indentation to make it clearer which parts do what."
msgstr ""

#: C/set-up-gedit.js.page:38(note/p)
msgid ""
"If you want to share code with other people who write GNOME JavaScript "
"applications, you'll also want to set <gui>Tab width</gui> to 4 and turn on "
"<gui>Insert spaces instead of tabs</gui>."
msgstr ""

#: C/signals-callbacks.py.page:8(info/title)
msgctxt "text"
msgid "Signals and callbacks (Python)"
msgstr ""

#: C/signals-callbacks.py.page:13(info/desc)
msgid "An explanation of signals and callbacks in GTK+."
msgstr ""

#: C/signals-callbacks.py.page:26(page/title)
msgid "Signals and callbacks"
msgstr "Signale und Callbacks"

#: C/signals-callbacks.py.page:33(section/p)
msgid ""
"Like most GUI toolkits, GTK+ uses an event-driven programming model. When the "
"user is doing nothing, GTK+ sits in the main loop and waits for input. If the "
"user performs some action - say, a mouse click - then the main loop \"wakes up"
"\" and delivers an event to GTK+."
msgstr ""

#: C/signals-callbacks.py.page:35(section/p)
msgid ""
"When widgets receive an event, they frequently emit one or more signals. "
"Signals notify your program that \"something interesting happened\" by "
"invoking functions you have connected to the signal. Such functions are "
"commonly known as callbacks. When your callbacks are invoked, you would "
"typically take some action. After a callback finishes, GTK+ will return to "
"the main loop and await more user input."
msgstr ""

#: C/signals-callbacks.py.page:37(section/p)
msgid ""
"A generic example is: <code>handler_id = widget.connect(\"event\", callback, "
"data)</code>. <code>widget</code> is an instance of a widget we created "
"earlier. Next, the <code>event</code> we are interested in. Each widget has "
"its own particular events which can occur. For instance, if you have a Gtk."
"Button you usually want to connect to the \"clicked\" event: this means that "
"when the button is clicked, the signal is issued. Another example is the "
"<code>notify::property</code> signal: whenever a <link xref=\"properties.py"
"\">property</link> is modified on a GObject, instead of just emitting the "
"<code>notify</code> signal, GObject associates as a detail to this signal "
"emission the name of the property modified. This allows clients who wish to "
"be notified of changes to only one property to filter most events before "
"receiving them. Thirdly, the callback argument is the name of the callback "
"function, which contains the code which runs when signals of the specified "
"type are issued. Finally, the optional data argument includes any data which "
"should be passed when the signal is issued."
msgstr ""

#: C/signals-callbacks.py.page:39(section/p)
msgid ""
"The function returns a number (the <code>handler_id</code>) that identifies "
"this particular signal-callback pair. This number is required to disconnect "
"from a signal such that the callback function will not be called during any "
"future or currently ongoing emissions of the signal it has been connected to, "
"as in <code>widget.disconnect(handler_id)</code>."
msgstr ""

#: C/signals-callbacks.py.page:46(section/p)
msgid ""
"<link href=\"http://developer.gnome.org/gobject/stable/signal.html\">Signals</"
"link> in GObject documentation"
msgstr ""

#: C/signals-callbacks.py.page:47(section/p)
msgid ""
"<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/basics."
"html\">Basics - Main loop and Signals</link> in Python GTK+ 3 Tutorial"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/spinbutton.c.page:25(media) C/spinbutton.py.page:23(media)
#: C/spinbutton.vala.page:23(media)
msgctxt "_"
msgid ""
"external ref='media/spinbutton.png' md5='993cbb7d9bd271a329727a926195712a'"
msgstr ""
"external ref='media/spinbutton.png' md5='993cbb7d9bd271a329727a926195712a'"

#: C/spinbutton.c.page:7(info/title)
msgctxt "text"
msgid "SpinButton (C)"
msgstr ""

#: C/spinbutton.c.page:20(info/desc)
msgid "Retrieve an integer or floating point number"
msgstr ""

#: C/spinbutton.c.page:23(page/title) C/spinbutton.js.page:23(page/title)
#: C/spinbutton.py.page:22(page/title) C/spinbutton.vala.page:22(page/title)
msgid "SpinButton"
msgstr ""

#: C/spinbutton.c.page:26(page/p) C/spinbutton.py.page:24(page/p)
#: C/spinbutton.vala.page:24(page/p)
msgid "Choose a number, by entering it or by clicking on the -/+ buttons!"
msgstr ""

#: C/spinbutton.c.page:28(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* This is the callback function. \n"
" * It is a handler function which reacts to the signal. \n"
" * In this case, it will notify the user the value of their spinbutton \n"
" * as a label.\n"
" */\n"
"static void\n"
"spin_clicked (GtkSpinButton *spinbutton,\n"
"              gpointer       user_data)\n"
"{\n"
"   GtkWidget *label = user_data;\n"
"   gint value = gtk_spin_button_get_value_as_int (spinbutton);\n"
"\n"
"   /* %d - Is used when printing integers.\n"
"    * Note: Using g_strdup_printf returns a string that must be freed. \n"
"    * (In which is done below)\n"
"    */\n"
"   gchar *str = g_strdup_printf (\"The number you selected is %d.\", value);\n"
"   gtk_label_set_text (GTK_LABEL (label), str);\n"
"\n"
"   g_free(str);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Declare variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"  GtkWidget *grid;\n"
"  GtkWidget *spin_button;\n"
"  GtkAdjustment *adjustment;\n"
"\n"
"\n"
"  /* Create a window with a title, a border width, and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"SpinButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 210, 70);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 5);\n"
"\n"
"  /* Create a label to be shown in the window */\n"
"  label = gtk_label_new (\"Choose a number\");\n"
"\n"
"  /* Create an adjustment representing an adjustable bounded value */\n"
"  adjustment = gtk_adjustment_new (0, 0, 100, 1, 0, 0);\n"
"\n"
"\n"
"  /* Create a spin button that is to be as wide as possible */\n"
"  spin_button = gtk_spin_button_new (adjustment, 1, 0);\n"
"  gtk_widget_set_hexpand (spin_button, TRUE);\n"
"  \n"
"  /* Connecting the \"value-changed\" signal for the spinbutton \n"
"   * to the appropriate callback function. \n"
"   */\n"
"  g_signal_connect (spin_button, \n"
"                    \"value-changed\", \n"
"                    G_CALLBACK (spin_clicked), \n"
"                    label);\n"
"\n"
"\n"
"  /* Create a grid and arrange everything accordingly */\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_set_column_spacing (GTK_GRID (grid), 10);\n"
"  gtk_grid_set_column_homogeneous (GTK_GRID (grid), TRUE);\n"
"  gtk_grid_attach (GTK_GRID (grid), spin_button, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), label, 0, 1, 1, 1);\n"
"  \n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""

#: C/spinbutton.c.page:36(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkSpinButton.html"
"\">GtkSpinButton</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/spinbutton.js.page:24(media)
msgctxt "_"
msgid ""
"external ref='media/spinbuttonkittens.png' "
"md5='577cce8a902140aacbab73fe8a76a010'"
msgstr ""
"external ref='media/spinbuttonkittens.png' "
"md5='577cce8a902140aacbab73fe8a76a010'"

#: C/spinbutton.js.page:7(info/title)
#, fuzzy
#| msgid "JavaScript"
msgctxt "text"
msgid "SpinButton (JavaScript)"
msgstr "JavaScript"

#: C/spinbutton.js.page:20(info/desc)
msgid "A number entry field that has + and - buttons"
msgstr ""

#: C/spinbutton.js.page:25(page/p)
msgid ""
"A SpinButton is not related to a <link xref=\"spinner.js\">Spinner</link>. "
"It's a text entry field which only accepts numbers, and which has plus and "
"minus buttons to let you change the value without having to type anything in."
msgstr ""

#: C/spinbutton.js.page:26(page/p)
msgid ""
"It's best used when it's obvious that only a number can be entered into it. "
"In this example, two SpinButtons are used for the number of kittens and "
"number of cans of tuna to give them."
msgstr ""

#: C/spinbutton.js.page:43(section/code)
#, no-wrap
msgid ""
"\n"
"const SpinButtonExample = new Lang.Class({\n"
"    Name: 'SpinButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsspinbutton'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""

#: C/spinbutton.js.page:68(section/p)
msgid ""
"All the code for this sample goes in the SpinButtonExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"Application.html\">Gtk.Application</link> for our widgets and window to go in."
msgstr ""

#: C/spinbutton.js.page:69(section/code)
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Kitten Feeder\"});\n"
msgstr ""

#: C/spinbutton.js.page:84(section/title)
#, fuzzy
#| msgid "Creating the user interface"
msgid "Creating the SpinButtons"
msgstr "Erstellen der Benutzeroberfläche"

#: C/spinbutton.js.page:85(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the first spinbutton using a function\n"
"        this._kittens = Gtk.SpinButton.new_with_range (1, 9001, 1);\n"
"        this._kittens.connect (\"value-changed\", Lang.bind (this, this._newValue));\n"
msgstr ""

#: C/spinbutton.js.page:91(section/p)
msgid ""
"We can use the new_with_range function to create a new SpinButton quickly. "
"Its first parameter is the SpinButton's starting value, its second is the "
"maximum value, and its third is how much to increment it when the plus or "
"minus buttons are pressed."
msgstr ""

#: C/spinbutton.js.page:92(section/p)
msgid ""
"After we create the first SpinButton, we connect its value-changed signal to "
"a function which handles what happens when the number inside either "
"SpinButton changes."
msgstr ""

#: C/spinbutton.js.page:94(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create an adjustment to use for the second spinbutton\n"
"        this._adjustment = new Gtk.Adjustment ({\n"
"            value: 1,\n"
"            lower: 0,\n"
"            upper: 9001,\n"
"            step_increment: 1,\n"
"            page_increment: 10 });\n"
"\n"
"        // Create the second spinbutton\n"
"        this._tuna = new Gtk.SpinButton ({ adjustment: this._adjustment });\n"
"        this._tuna.connect (\"value-changed\", Lang.bind (this, this._newValue));\n"
"\n"
"        // this._tuna.set_digits (1);\n"
"        // this._tuna.set_wrap (true);\n"
msgstr ""

#: C/spinbutton.js.page:111(section/p)
msgid ""
"If you want more fine-grained control over a SpinButton, or want to create a "
"bunch of SpinButtons which all use the same parameters, you can create an "
"object called an <link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.Adjustment.html\">Adjustment</link>. Then you can use that object as a "
"new SpinButton's adjustment property, and it sets all the values at once. "
"Afterwards, you can change all the SpinButtons which use that adjustment by "
"changing the Adjustment object's properties."
msgstr ""

#: C/spinbutton.js.page:112(section/p)
msgid ""
"The commented-out lines here show things you can do to customize your "
"SpinButton. You can set the number of digits which go after the decimal "
"point, for example, or tell it to wrap the number around if it goes past the "
"upper or lower bounds that you set."
msgstr ""

#: C/spinbutton.js.page:113(note/p)
msgid ""
"For the kitties' sake, please don't use set_digits to allow a decimal number "
"of kittens."
msgstr ""

#: C/spinbutton.js.page:117(section/title)
#, fuzzy
#| msgid "Creating the user interface"
msgid "Creating the rest of the UI"
msgstr "Erstellen der Benutzeroberfläche"

#: C/spinbutton.js.page:119(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the text labels to go with the spinbuttons\n"
"        this._startLabel = new Gtk.Label ({ label: \"There are \" });\n"
"        this._kittenLabel = new Gtk.Label ({ label: \" kitten(s), and \"});\n"
"        this._tunaLabel = new Gtk.Label ({ label: \" can(s) of tuna.\"});\n"
"        this.perKitten = Math.floor((this._tuna.get_value() / this._kittens.get_value()));\n"
"        this._lastLabel = new Gtk.Label ({\n"
"            label: \"That's \" + this.perKitten + \" can(s) of tuna per kitten.\" });\n"
msgstr ""

#: C/spinbutton.js.page:128(section/p)
msgid ""
"We create each <link xref=\"label.js\">Label</link> individually, and then "
"string them together along with the SpinButtons. The last label needs to show "
"the number of cans of tuna per kitten, so it has a variable in the middle, "
"which corresponds to an equation that uses the SpinButtons' get_value "
"functions to find out what they're set at. JavaScript's Math function's floor "
"method is used to round the number of cans of tuna per kitten down to the "
"nearest whole number."
msgstr ""

#: C/spinbutton.js.page:130(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a grid to put the spinbuttons and their labels in\n"
"        this._spinGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_bottom: 20 });\n"
"\n"
"        // Attach everything to the grid\n"
"        this._spinGrid.attach (this._startLabel, 0, 0, 1, 1);\n"
"        this._spinGrid.attach (this._kittens, 1, 0, 1, 1);\n"
"        this._spinGrid.attach (this._kittenLabel, 2, 0, 1, 1);\n"
"        this._spinGrid.attach (this._tuna, 3, 0, 1, 1);\n"
"        this._spinGrid.attach (this._tunaLabel, 4, 0, 1, 1);\n"
"\n"
"        // Create a main grid to hold it and the last label\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Attach the smaller grid and the last label to the main grid\n"
"        this._mainGrid.attach (this._spinGrid, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._lastLabel, 0, 1, 1, 1);\n"
msgstr ""

#: C/spinbutton.js.page:154(section/p)
msgid ""
"Here we use <link xref=\"grid.js\">Grid</link> widgets to keep everything "
"organized. One Grid holds the labels and SpinButtons in order, while the next "
"puts that Grid on top and the final Label on the bottom."
msgstr ""

#: C/spinbutton.js.page:155(section/p)
msgid ""
"There isn't a wrong way to organize things in Grids, so long as you like how "
"it turns out. In this case, the top Grid has a margin on the bottom to keep "
"it evenly spaced from the bottom Label, and the bottom Label is inside a "
"separate Grid so it will be centered relative to the Labels and SpinButtons "
"on the top."
msgstr ""

#: C/spinbutton.js.page:157(section/code)
#, no-wrap
msgid ""
"\n"
"        // Add the main grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""

#: C/spinbutton.js.page:165(section/p) C/switch.js.page:153(section/p)
msgid ""
"Finally, we add the larger Grid to the window, then tell the window to show "
"itself and all the widgets inside of it."
msgstr ""

#: C/spinbutton.js.page:169(section/title)
msgid "Function which handles the SpinButtons' numerical values being adjusted"
msgstr ""

#: C/spinbutton.js.page:171(section/code)
#, no-wrap
msgid ""
"\n"
"    _newValue: function () {\n"
"\n"
"        // Update the label which shows how many cans there are per kitten\n"
"        this.perKitten = Math.floor((this._tuna.get_value() / this._kittens.get_value()))\n"
"        this._lastLabel.set_label (\"That's \" + this.perKitten + \" can(s) of tuna per kitten.\");\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""

#: C/spinbutton.js.page:182(section/p)
msgid ""
"Here we update the perKitten variable based on the SpinButtons' new values, "
"and use the set_label property to refresh what _lastLabel shows. Since both "
"SpinButtons have their value-changed signal connected to this function, every "
"time either of the numbers changes this function will update the Label."
msgstr ""

#: C/spinbutton.js.page:184(section/code)
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new SpinButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/spinbutton.js.page:189(section/p)
msgid ""
"Finally, we create a new instance of the finished SpinButtonExample class, "
"and set the application running."
msgstr ""

#: C/spinbutton.js.page:194(section/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const SpinButtonExample = new Lang.Class({\n"
"    Name: 'SpinButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsspinbutton'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Kitten Feeder\"});\n"
"\n"
"        // Create the first spinbutton using a function\n"
"        this._kittens = Gtk.SpinButton.new_with_range (1, 9001, 1);\n"
"        this._kittens.connect (\"value-changed\", Lang.bind (this, this._newValue));\n"
"\n"
"        // Create an adjustment to use for the second spinbutton\n"
"        this._adjustment = new Gtk.Adjustment ({\n"
"            value: 1,\n"
"            lower: 0,\n"
"            upper: 9001,\n"
"            step_increment: 1,\n"
"            page_increment: 10 });\n"
"\n"
"        // Create the second spinbutton\n"
"        this._tuna = new Gtk.SpinButton ({ adjustment: this._adjustment });\n"
"        this._tuna.connect (\"value-changed\", Lang.bind (this, this._newValue));\n"
"\n"
"        // this._tuna.set_digits (1);\n"
"        // this._tuna.set_wrap (true);\n"
"\n"
"        // Create the text labels to go with the spinbuttons\n"
"        this._startLabel = new Gtk.Label ({ label: \"There are \" });\n"
"        this._kittenLabel = new Gtk.Label ({ label: \" kitten(s), and \"});\n"
"        this._tunaLabel = new Gtk.Label ({ label: \" can(s) of tuna.\"});\n"
"        this.perKitten = Math.floor((this._tuna.get_value() / this._kittens.get_value()));\n"
"        this._lastLabel = new Gtk.Label ({\n"
"            label: \"That's \" + this.perKitten + \" can(s) of tuna per kitten.\" });\n"
"\n"
"        // Create a grid to put the spinbuttons and their labels in\n"
"        this._spinGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_bottom: 20 });\n"
"\n"
"        // Attach everything to the grid\n"
"        this._spinGrid.attach (this._startLabel, 0, 0, 1, 1);\n"
"        this._spinGrid.attach (this._kittens, 1, 0, 1, 1);\n"
"        this._spinGrid.attach (this._kittenLabel, 2, 0, 1, 1);\n"
"        this._spinGrid.attach (this._tuna, 3, 0, 1, 1);\n"
"        this._spinGrid.attach (this._tunaLabel, 4, 0, 1, 1);\n"
"\n"
"        // Create a main grid to hold it and the last label\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Attach the smaller grid and the last label to the main grid\n"
"        this._mainGrid.attach (this._spinGrid, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._lastLabel, 0, 1, 1, 1);\n"
"\n"
"        // Add the main grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _newValue: function () {\n"
"\n"
"        // Update the label which shows how many cans there are per kitten\n"
"        this.perKitten = Math.floor((this._tuna.get_value() / this._kittens.get_value()))\n"
"        this._lastLabel.set_label (\"That's \" + this.perKitten + \" can(s) of tuna per kitten.\");\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new SpinButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/spinbutton.js.page:205(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.SpinButton.html"
"\">Gtk.SpinButton</link>"
msgstr ""

#: C/spinbutton.py.page:7(info/title)
msgctxt "text"
msgid "SpinButton (Python)"
msgstr ""

#: C/spinbutton.py.page:19(info/desc)
msgid "Retrieve an integer or floating-point number from the user."
msgstr ""

#: C/spinbutton.py.page:30(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"SpinButton Example\", application=app)\n"
"        self.set_default_size(210, 70)\n"
"        self.set_border_width(5)\n"
"\n"
"        # an adjustment (initial value, min value, max value,\n"
"        # step increment - press cursor keys or +/- buttons to see!,\n"
"        # page increment - not used here,\n"
"        # page size - not used here)\n"
"        ad = Gtk.Adjustment(0, 0, 100, 1, 0, 0)\n"
"\n"
"        # a spin button for integers (digits=0)\n"
"        self.spin = Gtk.SpinButton(adjustment=ad, climb_rate=1, digits=0)\n"
"        # as wide as possible\n"
"        self.spin.set_hexpand(True)\n"
"\n"
"        # we connect the signal \"value-changed\" emitted by the spinbutton with the callback\n"
"        # function spin_selected\n"
"        self.spin.connect(\"value-changed\", self.spin_selected)\n"
"\n"
"        # a label\n"
"        self.label = Gtk.Label()\n"
"        self.label.set_text(\"Choose a number\")\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(self.spin, 0, 0, 1, 1)\n"
"        grid.attach(self.label, 0, 1, 2, 1)\n"
"\n"
"        self.add(grid)\n"
"\n"
"    # callback function: the signal of the spinbutton is used to change the text of the label\n"
"    def spin_selected(self, event):\n"
"        self.label.set_text(\"The number you selected is \" + str(self.spin.get_value_as_int()) + \".\")\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/spinbutton.py.page:34(section/title)
msgid "Useful methods for a SpinButton widget"
msgstr ""

#: C/spinbutton.py.page:35(section/p)
msgid ""
"A Gtk.Adjustment is needed to construct the Gtk.SpinButton. This is the "
"representation of a value with a lower and upper bound, together with step "
"and page increments, and a page size, and it is constructed as <code>Gtk."
"Adjustment(value, lower, upper, step_increment, page_increment, page_size)</"
"code> where the fields are of type <code>float</code>; <code>step_increment</"
"code> is the increment/decrement that is obtained by using the cursor keys or "
"the buttons of the spinbutton. Note that <code>page_increment</code> and "
"<code>page_size</code> are not used in this case, and they should be set to "
"<code>0</code>."
msgstr ""

#: C/spinbutton.py.page:36(section/p)
msgid ""
"In line 23 the signal <code>\"value-changed\"</code> is connected to the "
"callback function <code>spin_selected()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""

#: C/spinbutton.py.page:38(item/p)
msgid ""
"If you want the value of the spinbutton to wrap around when they exceed the "
"maximum or the minimum, set <code>set_wrap(True)</code>. The <code>\"wrapped"
"\"</code> signal is emitted when this happens."
msgstr ""

#: C/spinbutton.py.page:39(item/p)
msgid ""
"<code>set_digits(digits)</code> sets the precision to be displayed by the "
"spinbutton, up to 20 digits."
msgstr ""

#: C/spinbutton.py.page:40(item/p)
msgid ""
"To get the value of the spinbutton as an integer, use <code>get_value_as_int()"
"</code>."
msgstr ""

#: C/spinbutton.py.page:48(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkSpinButton.html"
"\">GtkSpinButton</link>"
msgstr ""

#: C/spinbutton.vala.page:7(info/title)
msgctxt "text"
msgid "SpinButton (Vala)"
msgstr ""

#: C/spinbutton.vala.page:19(info/desc)
msgid "Retrieve an integer or floating point number."
msgstr ""

#: C/spinbutton.vala.page:26(page/code)
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\tGtk.Label label;\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"SpinButton Example\";\n"
"\t\twindow.set_default_size (210, 70);\n"
"\t\twindow.set_border_width (5);\n"
"\n"
"\t\tvar spinbutton = new Gtk.SpinButton.with_range (0, 100, 1);\n"
"\t\tspinbutton.set_hexpand (true);\n"
"\n"
"\t\tlabel = new Gtk.Label (\"Choose a number\");\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.attach (spinbutton, 0, 0, 1, 1);\n"
"\t\tgrid.attach (label, 0, 1, 1, 1);\n"
"\n"
"\t\tspinbutton.value_changed.connect (this.value_changed_cb);\n"
"\n"
"\t\twindow.add (grid);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"\n"
"\tvoid value_changed_cb (Gtk.SpinButton spin) {\n"
"\t\tlabel.set_text (\"The number you selected is %.0f.\".printf (spin.get_value()));\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/spinbutton.vala.page:31(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.SpinButton.html\">Gtk."
"SpinButton</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/spinner.c.page:23(media) C/spinner.js.page:21(media)
#: C/spinner.py.page:22(media) C/spinner.vala.page:21(media)
msgctxt "_"
msgid "external ref='media/spinner.png' md5='d04f2d81f1d72c6c2f97e8729947dfed'"
msgstr "external ref='media/spinner.png' md5='d04f2d81f1d72c6c2f97e8729947dfed'"

#: C/spinner.c.page:7(info/title)
msgctxt "text"
msgid "Spinner (C)"
msgstr ""

#: C/spinner.c.page:18(info/desc) C/spinner.js.page:17(info/desc)
#: C/spinner.py.page:18(info/desc) C/spinner.vala.page:17(info/desc)
msgid "A spinner animation"
msgstr ""

#: C/spinner.c.page:21(page/title) C/spinner.js.page:20(page/title)
#: C/spinner.py.page:21(page/title) C/spinner.vala.page:20(page/title)
msgid "Spinner"
msgstr ""

#: C/spinner.c.page:24(page/p) C/spinner.js.page:22(page/p)
#: C/spinner.py.page:23(page/p) C/spinner.vala.page:22(page/p)
msgid "This Spinner is stopped and started by pressing the spacebar."
msgstr ""

#: C/spinner.c.page:26(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
" \n"
"\n"
"\n"
" /*Global variable used to indicate active state of the\n"
"spinner. TRUE = active, FALSE = not-active. This is because \n"
"there isn't a current function for C that does this for us*/\n"
"gboolean active;  \n"
" \n"
"\n"
"\n"
"/*This is the callback function. It is a handler function \n"
"which reacts to the signal. In this case, it will cause the \n"
"spinner to start and stop according to how many times the user \n"
"presses the spacebar.*/ \n"
"static gboolean\n"
"key_pressed_event (GtkWidget *widget,\n"
"                   GdkEvent  *event,\n"
"                   gpointer   user_data)\n"
"{\n"
"  GtkWidget *spinner = user_data;\n"
"  guint keyval;\n"
"  \n"
"  /*Extracts the keyval from an event. And stores it in the  variable \n"
"  \"keyval\" (we give the function the address). In this case, the \n"
"  event is GdkEventKey, a key press event*/\n"
"  gdk_event_get_keyval (event, &amp;keyval);  \n"
"\n"
"  /*Grabbing the boolean value from the spinner*/\n"
"  g_object_get (GTK_SPINNER (spinner), \"active\", &amp;active, NULL);\n"
"  \n"
"  if (keyval == GDK_KEY_space) {\n"
"     if (active) {\n"
"         gtk_spinner_stop (GTK_SPINNER (spinner));\n"
"     }\n"
"     else {\n"
"         gtk_spinner_start (GTK_SPINNER (spinner));\n"
"     } \n"
"  }\n"
"  \n"
"return TRUE;\n"
"}\n"
" \n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *spinner;\n"
" \n"
"  /*Create a window with a title, border width and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
" \n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Spinner Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);\n"
"  gtk_container_set_border_width (GTK_CONTAINER(window), 30);\n"
" \n"
"  /*Create a spinner, with extra horizontal and vertical space*/\n"
"  spinner = gtk_spinner_new ();\n"
"  gtk_spinner_start (GTK_SPINNER (spinner));\n"
"  \n"
"  gtk_container_add (GTK_CONTAINER (window), spinner);\n"
" \n"
"  /*Connecting the key-press-event signal to the callback*/\n"
"  g_signal_connect (GTK_WINDOW (window), \"key-press-event\", \n"
"                    G_CALLBACK (key_pressed_event), spinner);\n"
" \n"
"  gtk_widget_show_all (window);\n"
"}\n"
" \n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
" \n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
" \n"
"  return status;\n"
"}\n"
msgstr ""

#: C/spinner.c.page:34(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gobject/stable/gobject-The-Base-"
"Object-Type.html#g-object-get\">GObject</link>"
msgstr ""

#: C/spinner.c.page:35(item/p) C/togglebutton.c.page:37(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkSpinner.html"
"\">GtkSpinner</link>"
msgstr ""

#: C/spinner.js.page:7(info/title)
#, fuzzy
#| msgid "JavaScript"
msgctxt "text"
msgid "Spinner (JavaScript)"
msgstr "JavaScript"

#: C/spinner.js.page:24(page/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Gdk = imports.gi.Gdk;\n"
"const Lang = imports.lang;\n"
"\n"
"const SpinnerExample = new Lang.Class ({\n"
"    Name: 'Spinner Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jsspinner',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Spinner Example\",\n"
"            default_height: 200,\n"
"            default_width: 200,\n"
"            border_width: 30 });\n"
"\n"
"        // Create a spinner which starts spinning automatically\n"
"        this._spinner = new Gtk.Spinner ({active: true});\n"
"        this._window.add (this._spinner);\n"
"\n"
"        // Connect a keypress event to the function that makes it start or stop spinning\n"
"        this._window.connect(\"key-press-event\", Lang.bind(this, this._onKeyPress));\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onKeyPress: function(widget, event) {\n"
"\n"
"        // Get the value of the key that was pressed\n"
"        let keyval = event.get_keyval()[1];\n"
"\n"
"        // If it was the spacebar, toggle the spinner to start or stop\n"
"        if (keyval == Gdk.KEY_space) {\n"
"            if (this._spinner.active == true)\n"
"                this._spinner.stop();\n"
"            else\n"
"                this._spinner.start();\n"
"        }\n"
"    }\n"
"\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new SpinnerExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/spinner.js.page:29(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gdk.html\">Gdk - "
"Key Values</link>"
msgstr ""

#: C/spinner.js.page:32(item/p) C/togglebutton.js.page:157(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Spinner.html"
"\">Gtk.Spinner</link>"
msgstr ""

#: C/spinner.py.page:7(info/title)
msgctxt "text"
msgid "Spinner (Python)"
msgstr ""

#: C/spinner.py.page:30(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Spinner Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"        self.set_border_width(30)\n"
"\n"
"        # a spinner\n"
"        self.spinner = Gtk.Spinner()\n"
"        # that by default spins\n"
"        self.spinner.start()\n"
"        # add the spinner to the window\n"
"        self.add(self.spinner)\n"
"\n"
"    # event handler\n"
"    # a signal from the keyboard (space) controls if the spinner stops/starts\n"
"    def do_key_press_event(self, event):\n"
"        # keyname is the symbolic name of the key value given by the event\n"
"        keyname = Gdk.keyval_name(event.keyval)\n"
"        # if it is \"space\"\n"
"        if keyname == \"space\":\n"
"            # and the spinner is active\n"
"            if self.spinner.get_property(\"active\"):\n"
"                # stop the spinner\n"
"                self.spinner.stop()\n"
"            # if the spinner is not active\n"
"            else:\n"
"                # start it again\n"
"                self.spinner.start()\n"
"        # stop the signal emission\n"
"        return True\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/spinner.py.page:32(note/p)
msgid ""
"<code>Gdk.keyval_name(event.keyval)</code> converts the key value <code>event."
"keyval</code> into a symbolic name. The names and corresponding key values "
"can be found <link href=\"http://git.gnome.org/browse/gtk+/tree/gdk/"
"gdkkeysyms.h\">here</link>,but for instance <code>GDK_KEY_BackSpace</code> "
"becomes the string <code>\"BackSpace\"</code>."
msgstr ""

#: C/spinner.py.page:41(item/p) C/togglebutton.py.page:45(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkSpinner.html"
"\">GtkSpinner</link>"
msgstr ""

#: C/spinner.py.page:42(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gdk/stable/gdk-Keyboard-Handling.html"
"\">Key Values</link>"
msgstr ""

#: C/spinner.vala.page:7(info/title)
msgctxt "text"
msgid "Spinner (Vala)"
msgstr ""

#: C/spinner.vala.page:24(page/code)
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Widget spinner;\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\n"
"\t\tObject (application: app, title: \"Spinner Example\");\n"
"\n"
"\t\tthis.set_default_size (200, 200);\n"
"\t\tthis.border_width = 30;\n"
"\n"
"\t\tspinner = new Gtk.Spinner ();\n"
"\n"
"\t\tthis.add (spinner);\n"
"\t\t(spinner as Gtk.Spinner).active = true;\n"
"\t\tspinner.show ();\n"
"\t}\n"
"\n"
"\tprotected override bool key_press_event (Gdk.EventKey event) {\n"
"\n"
"\t\t//print (Gdk.keyval_name(event.keyval) +\"\\n\");\n"
"\t\tif (Gdk.keyval_name(event.keyval) == \"space\") {\n"
"\n"
"\t\t\tif ((spinner as Gtk.Spinner).active) {\n"
"\t\t\t\t(spinner as Gtk.Spinner).stop ();\n"
"\t\t\t\t//spinner.visible = false;\n"
"\t\t\t}\n"
"\t\t\telse {\n"
"\t\t\t\t(spinner as Gtk.Spinner).start ();\n"
"\t\t\t\t//spinner.visible = true;\n"
"\t\t\t}\n"
"\t\t}\n"
"\t\treturn true;\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\n"
"\tprotected override void activate () {\n"
"\t\tMyWindow window = new MyWindow (this);\n"
"\t\twindow.show ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.spinner\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/spinner.vala.page:29(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Widget.html\">Gtk.Widget</"
"link>"
msgstr ""

#: C/spinner.vala.page:30(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Spinner.html\">Gtk.Spinner</"
"link>"
msgstr ""

#: C/spinner.vala.page:31(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gdk-3.0/Gdk.keyval_name.html\">Gdk."
"keyval_name</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/statusbar.c.page:26(media)
msgctxt "_"
msgid ""
"external ref='media/statusbar3.png' md5='60c71604fb44656237ee66dfb39a8689'"
msgstr ""
"external ref='media/statusbar3.png' md5='60c71604fb44656237ee66dfb39a8689'"

#: C/statusbar.c.page:7(info/title)
msgctxt "text"
msgid "Statusbar (C)"
msgstr "Statusleiste (C)"

#: C/statusbar.c.page:21(info/desc) C/statusbar.py.page:19(info/desc)
#: C/statusbar.vala.page:20(info/desc)
msgid "Report messages of minor importance to the user"
msgstr ""

#: C/statusbar.c.page:24(page/title) C/statusbar.js.page:20(page/title)
#: C/statusbar.py.page:22(page/title) C/statusbar.vala.page:23(page/title)
msgid "Statusbar"
msgstr "Statusleiste"

#: C/statusbar.c.page:27(page/p)
msgid ""
"This statusbar is used to demonstrate how messages are stacked in a last-in-"
"first-out order. The message at the top of the stack is always the one "
"displayed."
msgstr ""

#: C/statusbar.c.page:29(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Callback function in which pushes an item onto the statusbar*/\n"
"static void \n"
"push_item (GtkWidget *widget,\n"
"           gpointer   data)\n"
"{\n"
"  GtkWidget *status_bar = data;\n"
"\n"
"  /*Create a context id, which is used to uniquely identify \n"
"   *the source of a message*/\n"
"  guint context_id = gtk_statusbar_get_context_id (GTK_STATUSBAR (status_bar), \n"
"                                                   \"Statusbar example\");\n"
"\n"
"  /*Count is used to keep track of the amount of items \n"
"  the user is pushing/popping*/\n"
"  static int count = 1;\n"
"  char hold_output[20];\n"
"  \n"
"  /*This is a safer form of the standard sprintf () function. The output is \n"
"  gauranteed in this case to not exceed 20 characters, and the result is stored \n"
"  into the 'hold_output' variable*/\n"
"  g_snprintf (hold_output, 20, \"Item %d\", count++);\n"
"  gtk_statusbar_push (GTK_STATUSBAR (status_bar), \n"
"                     context_id, \n"
"                     hold_output);\n"
"}\n"
"\n"
"\n"
"\n"
"/*Callback function that is used to pop an item off the statusbar*/\n"
"static void \n"
"pop_item (GtkWidget *widget,\n"
"          gpointer   data )\n"
"{\n"
"  GtkWidget *status_bar = data;\n"
"  guint context_id = gtk_statusbar_get_context_id (GTK_STATUSBAR (status_bar), \n"
"                                                   \"Statusbar example\");\n"
"\n"
"  gtk_statusbar_pop (GTK_STATUSBAR (status_bar), context_id);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"    GtkWidget *grid;\n"
"    GtkWidget *window;\n"
"    GtkWidget *status_bar;\n"
"    GtkWidget *pop_button;\n"
"    GtkWidget *push_button;\n"
"\n"
"    /*Create a window with a title, border width, and a default size**/\n"
"    window = gtk_application_window_new (app);\n"
"    gtk_window_set_default_size (GTK_WINDOW (window), 220, 100);\n"
"    gtk_window_set_title (GTK_WINDOW (window), \"Statusbar Example\");\n"
"    gtk_container_set_border_width (GTK_CONTAINER(window), 10);\n"
"    \n"
"    /*Create the status bar, which is held in the global variable*/\n"
"    status_bar = gtk_statusbar_new ();      \n"
"    \n"
"    /*Create the buttons with labels*/\n"
"    push_button = gtk_button_new_with_label (\"push item\");\n"
"    pop_button = gtk_button_new_with_label (\"pop last item\");\n"
"    \n"
"    /*Create the grid, and attach the buttons/statusbar accordingly*/\n"
"    grid = gtk_grid_new ();\n"
"    gtk_grid_attach (GTK_GRID (grid), push_button, 0,1,1,1);\n"
"    gtk_grid_attach (GTK_GRID (grid), pop_button, 0,2,1,1);\n"
"    gtk_grid_attach (GTK_GRID (grid), status_bar, 0,3,1,1);\n"
"    \n"
"    /*Connecting the clicked signals to the corresponding callback functions*/\n"
"    g_signal_connect (GTK_BUTTON (push_button), \"clicked\", \n"
"                      G_CALLBACK (push_item), status_bar);\n"
"    g_signal_connect (GTK_BUTTON (pop_button), \"clicked\", \n"
"                      G_CALLBACK (pop_item), status_bar);\n"
"    \n"
"    /*Attach the grid holding the child widgets onto the window, and show all*/\n"
"    gtk_container_add (GTK_CONTAINER (window), grid);\n"
"    gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""

#: C/statusbar.c.page:37(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkStatusbar.htmll"
"\">GtkStatusBar</link>"
msgstr ""

#: C/statusbar.c.page:38(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-String-Utility-"
"Functions.html#g-snprintf\">String Utility Functions</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/statusbar.js.page:21(media)
msgctxt "_"
msgid ""
"external ref='media/statusbar2.png' md5='ff6f7e5b270827ca98b2d5f7087aa766'"
msgstr ""
"external ref='media/statusbar2.png' md5='ff6f7e5b270827ca98b2d5f7087aa766'"

#: C/statusbar.js.page:7(info/title)
#, fuzzy
#| msgid "JavaScript"
msgctxt "text"
msgid "Statusbar (JavaScript)"
msgstr "JavaScript"

#: C/statusbar.js.page:17(info/desc)
msgid "Show notifications in a dedicated statusbar"
msgstr ""

#: C/statusbar.js.page:22(page/p)
msgid ""
"This statusbar keeps track of how many times you've clicked a button. "
"Applications like <link href=\"http://projects.gnome.org/gedit/\">gedit</"
"link> use statusbars to display information at a glance, and show "
"notifications without interrupting the user."
msgstr ""

#: C/statusbar.js.page:23(page/p)
msgid ""
"Messages pushed to a statusbar go on top of its stack, and can be popped off "
"to show the next-most recent one. You can also clear away every message of a "
"specific type all at once. This sample application demonstrates these "
"functions."
msgstr ""

#: C/statusbar.js.page:40(section/code)
#, no-wrap
msgid ""
"\n"
"const StatusbarExample = new Lang.Class({\n"
"    Name: 'Statusbar Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsstatusbar',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""

#: C/statusbar.js.page:66(section/p)
msgid ""
"All the code for this sample goes in the StatusbarExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"Application.html\">Gtk.Application</link> for our widgets and window to go in."
msgstr ""

#: C/statusbar.js.page:67(section/code)
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 120,\n"
"            default_width: 300,\n"
"            title: \"Button Clicker\"});\n"
"\n"
"        // Create a paned interface\n"
"        this._panes = new Gtk.Paned ({\n"
"            orientation: Gtk.Orientation.VERTICAL });\n"
msgstr ""

#: C/statusbar.js.page:83(section/p)
msgid ""
"The _buildUI function is where we put all the code to create the "
"application's user interface. The first step is creating a new <link href="
"\"GtkApplicationWindow.js.page\">Gtk.ApplicationWindow</link> to put all our "
"widgets into. The next step is to create a vertically-oriented <link href="
"\"paned.js.page\">Gtk.Paned</link> interface, to divide the window up into "
"two sections. This way the statusbar looks like those used in other "
"applications, and it stays at the bottom of the window, even if the user "
"resizes it."
msgstr ""

#: C/statusbar.js.page:87(section/title)
msgid "Creating the buttons"
msgstr "Erstellen der Knöpfe"

#: C/statusbar.js.page:88(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the main button\n"
"        this._clickMe = new Gtk.Button ({\n"
"            label: \"Click Me!\" });\n"
"        this._clickMe.connect (\"clicked\", Lang.bind (this, this._clicked));\n"
"\n"
"        // Create the back button\n"
"        this._backButton = new Gtk.Button ({\n"
"            label: \"gtk-go-back\",\n"
"            use_stock: true });\n"
"        this._backButton.connect (\"clicked\", Lang.bind (this, this._back));\n"
"\n"
"        // Create the clear button\n"
"        this._clearButton = new Gtk.Button ({\n"
"            label: \"gtk-clear\",\n"
"            use_stock: true });\n"
"        this._clearButton.connect (\"clicked\", Lang.bind (this, this._clear));\n"
msgstr ""

#: C/statusbar.js.page:106(section/p)
msgid ""
"This code creates the three <link href=\"button.js.page\">Gtk.Buttons</link> "
"we'll use to push a new message to the statusbar, pop the last one off, and "
"clear all existing messages. The \"back\" and \"clear\" buttons are <link "
"href=\"http://developer.gnome.org/gtk/2.24/gtk-Stock-Items.html\">stock "
"buttons</link>, which are automatically translated into any language GNOME "
"supports."
msgstr ""

#: C/statusbar.js.page:108(section/code)
#, no-wrap
msgid ""
"\n"
"        // Put the buttons in a grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"        this._grid.attach (this._backButton, 0, 0, 1, 1);\n"
"        this._grid.attach_next_to (this._clickMe, this._backButton, Gtk.PositionType.RIGHT, 1, 1);\n"
"        this._grid.attach_next_to (this._clearButton, this._clickMe, Gtk.PositionType.RIGHT, 1, 1);\n"
"\n"
"        // Put the grid in a large frame that fills most of the window\n"
"        this._topFrame = new Gtk.Frame ({\n"
"            border_width: 20,\n"
"            height_request: 90,\n"
"            width_request: 300});\n"
"        this._topFrame.add (this._grid);\n"
msgstr ""

#: C/statusbar.js.page:124(section/p)
msgid ""
"This code creates the <link href=\"grid.js.page\">Gtk.Grid</link> that we'll "
"use to organize the buttons, and attaches the buttons to it in order. It then "
"creates a <link href=\"paned.js.page\">Gtk.Frame</link> which will take up "
"most of the window and has a large amount of padding around the buttons, and "
"adds the Grid to the Frame. Note that we still need to put the Frame into the "
"Paned interface, and then add it to the ApplicationWindow."
msgstr ""

#: C/statusbar.js.page:128(section/title)
msgid "Creating the statusbar"
msgstr "Erstellen der Statusleiste"

#: C/statusbar.js.page:129(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the statusbar\n"
"        this._statusbar = new Gtk.Statusbar();\n"
"\n"
"        // Keep track of the number of times the button has been clicked\n"
"        this.Clicks = 0;\n"
"        this.ContextID = this._statusbar.get_context_id (\"Number of Clicks\");\n"
"\n"
"        // Give the statusbar an initial message\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"        // Put the statusbar in its own frame at the bottom\n"
"        this._barFrame = new Gtk.Frame ({\n"
"            height_request: 30 });\n"
"        this._barFrame.add (this._statusbar);\n"
msgstr ""

#: C/statusbar.js.page:145(section/p)
msgid ""
"Here we create the Gtk.Statusbar, and push a message to it to start off with. "
"Then we give it its own narrow frame at the bottom of the window."
msgstr ""

#: C/statusbar.js.page:146(section/p)
msgid ""
"Every message needs to have a context id, which is an integer value you can "
"get from the statusbar with the get_context_id() function. Its only parameter "
"is the string value you use to describe that particular context id. Normally, "
"you'll get a new context id for different kinds of messages, so that you can "
"use the remove() function to remove a specific message and not just the most "
"recent one on the stack. This is a simple example with only one kind of "
"message, though, so we're just using one for everything."
msgstr ""

#: C/statusbar.js.page:147(section/p)
msgid ""
"We use the push() function to push a new message onto the stack. Its first "
"parameter is the context id, and its second is the message."
msgstr ""

#: C/statusbar.js.page:148(section/code)
#, no-wrap
msgid ""
"\n"
"        // Assemble the frames into the paned interface\n"
"        this._panes.pack1 (this._topFrame, true, false);\n"
"        this._panes.pack2 (this._barFrame, false, false);\n"
"\n"
"        // Put the panes into the window\n"
"        this._window.add (this._panes);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""

#: C/statusbar.js.page:160(section/p)
msgid ""
"This code finishes up creating the window, by packing the frames into the "
"pane, adding it to the window, and telling the window to show all child "
"widgets."
msgstr ""

#: C/statusbar.js.page:164(section/title)
msgid "Functions for interacting with the statusbar"
msgstr ""

#: C/statusbar.js.page:165(section/code)
#, no-wrap
msgid ""
"\n"
"    _clicked: function() {\n"
"\n"
"        // Increment the number of clicks by 1\n"
"        this.Clicks++;\n"
"\n"
"        // Update the statusbar with the new number of clicks\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _back: function () {\n"
"\n"
"        // If there have been any clicks, decrement by 1 and remove last statusbar update\n"
"        if (this.Clicks &gt; 0 ) {\n"
"            this.Clicks--;\n"
"            this._statusbar.pop (this.ContextID);\n"
"        };\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _clear: function () {\n"
"\n"
"        // Reset the number of clicks\n"
"        this.Clicks = 0;\n"
"\n"
"        // Wipe out all the messages pushed to the statusbar\n"
"        this._statusbar.remove_all (this.ContextID);\n"
"\n"
"        // Reset the statusbar's message\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""

#: C/statusbar.js.page:205(section/p)
msgid ""
"Here we have functions which demonstrate pushing a message onto the stack, "
"popping the top one off of it, and clearing all messages of a particular "
"context id. The pop() function just takes one parameter, which is the context "
"id for the type of message you want to pop off the most recent one of. The "
"remove_all() function works the same way, except it removes all messages of "
"that type from the stack."
msgstr ""

#: C/statusbar.js.page:206(section/code)
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new StatusbarExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/statusbar.js.page:211(section/p)
msgid ""
"Finally, we create a new instance of the finished StatusbarExample class, and "
"set the application running."
msgstr ""

#: C/statusbar.js.page:216(section/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const StatusbarExample = new Lang.Class({\n"
"    Name: 'Statusbar Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsstatusbar',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 120,\n"
"            default_width: 300,\n"
"            title: \"Button Clicker\"});\n"
"\n"
"        // Create a paned interface\n"
"        this._panes = new Gtk.Paned ({\n"
"            orientation: Gtk.Orientation.VERTICAL });\n"
"\n"
"        // Create the main button\n"
"        this._clickMe = new Gtk.Button ({\n"
"            label: \"Click Me!\" });\n"
"        this._clickMe.connect (\"clicked\", Lang.bind (this, this._clicked));\n"
"\n"
"        // Create the back button\n"
"        this._backButton = new Gtk.Button ({\n"
"            label: \"gtk-go-back\",\n"
"            use_stock: true });\n"
"        this._backButton.connect (\"clicked\", Lang.bind (this, this._back));\n"
"\n"
"        // Create the clear button\n"
"        this._clearButton = new Gtk.Button ({\n"
"            label: \"gtk-clear\",\n"
"            use_stock: true });\n"
"        this._clearButton.connect (\"clicked\", Lang.bind (this, this._clear));\n"
"\n"
"        // Put the buttons in a grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"        this._grid.attach (this._backButton, 0, 0, 1, 1);\n"
"        this._grid.attach_next_to (this._clickMe, this._backButton, Gtk.PositionType.RIGHT, 1, 1);\n"
"        this._grid.attach_next_to (this._clearButton, this._clickMe, Gtk.PositionType.RIGHT, 1, 1);\n"
"\n"
"        // Put the grid in a large frame that fills most of the window\n"
"        this._topFrame = new Gtk.Frame ({\n"
"            border_width: 20,\n"
"            height_request: 90,\n"
"            width_request: 300});\n"
"        this._topFrame.add (this._grid);\n"
"\n"
"        // Create the statusbar\n"
"        this._statusbar = new Gtk.Statusbar();\n"
"\n"
"        // Keep track of the number of times the button has been clicked\n"
"        this.Clicks = 0;\n"
"        this.ContextID = this._statusbar.get_context_id (\"Number of Clicks\");\n"
"\n"
"        // Give the statusbar an initial message\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"        // Put the statusbar in its own frame at the bottom\n"
"        this._barFrame = new Gtk.Frame ({\n"
"            height_request: 30 });\n"
"        this._barFrame.add (this._statusbar);\n"
"\n"
"        // Assemble the frames into the paned interface\n"
"        this._panes.pack1 (this._topFrame, true, false);\n"
"        this._panes.pack2 (this._barFrame, false, false);\n"
"\n"
"        // Put the panes into the window\n"
"        this._window.add (this._panes);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _clicked: function() {\n"
"\n"
"        // Increment the number of clicks by 1\n"
"        this.Clicks++;\n"
"\n"
"        // Update the statusbar with the new number of clicks\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _back: function () {\n"
"\n"
"        // If there have been any clicks, decrement by 1 and remove last statusbar update\n"
"        if (this.Clicks &gt; 0 ) {\n"
"            this.Clicks--;\n"
"            this._statusbar.pop (this.ContextID);\n"
"        };\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _clear: function () {\n"
"\n"
"        // Reset the number of clicks\n"
"        this.Clicks = 0;\n"
"\n"
"        // Wipe out all the messages pushed to the statusbar\n"
"        this._statusbar.remove_all (this.ContextID);\n"
"\n"
"        // Reset the statusbar's message\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new StatusbarExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/statusbar.js.page:225(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Frame.html"
"\">Gtk.Frame</link>"
msgstr ""

#: C/statusbar.js.page:226(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Paned.html"
"\">Gtk.Paned</link>"
msgstr ""

#: C/statusbar.js.page:227(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Statusbar.html"
"\">Gtk.Statusbar</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/statusbar.py.page:23(media) C/statusbar.vala.page:24(media)
msgctxt "_"
msgid ""
"external ref='media/statusbar.png' md5='eb1aca55315d6cda57b12a5f36058ba8'"
msgstr ""
"external ref='media/statusbar.png' md5='eb1aca55315d6cda57b12a5f36058ba8'"

#: C/statusbar.py.page:7(info/title)
msgctxt "text"
msgid "Statusbar (Python)"
msgstr "Statusleiste (Python)"

#: C/statusbar.py.page:24(page/p)
msgid ""
"This statusbar tells you if you click the button or if you press any key (and "
"which key)."
msgstr ""

#: C/statusbar.py.page:31(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"StatusBar Example\", application=app)\n"
"        self.set_default_size(200, 100)\n"
"\n"
"        # a label\n"
"        label = Gtk.Label(label=\"Press any key or \")\n"
"\n"
"        # a button\n"
"        button = Gtk.Button(label=\"click me.\")\n"
"        # connected to a callback\n"
"        button.connect(\"clicked\", self.button_clicked_cb)\n"
"\n"
"        # the statusbar\n"
"        self.statusbar = Gtk.Statusbar()\n"
"        # its context_id - not shown in the UI but needed to uniquely identify\n"
"        # the source of a message\n"
"        self.context_id = self.statusbar.get_context_id(\"example\")\n"
"        # we push a message onto the statusbar's stack\n"
"        self.statusbar.push(self.context_id, \"Waiting for you to do something...\")\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.set_column_spacing(5)\n"
"        grid.set_column_homogeneous(True)\n"
"        grid.set_row_homogeneous(True)\n"
"        grid.attach(label, 0, 0, 1, 1)\n"
"        grid.attach_next_to(button, label, Gtk.PositionType.RIGHT, 1, 1)\n"
"        grid.attach(self.statusbar, 0, 1, 2, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # callback function for the button clicked\n"
"    # if the button is clicked the event is signaled to the statusbar\n"
"    # onto which we push a new status\n"
"    def button_clicked_cb(self, button):\n"
"        self.statusbar.push(self.context_id, \"You clicked the button.\")\n"
"\n"
"    # event handler\n"
"    def do_key_press_event(self, event):\n"
"    # any signal from the keyboard is signaled to the statusbar\n"
"    # onto which we push a new status with the symbolic name\n"
"    # of the key pressed\n"
"        self.statusbar.push(self.context_id, Gdk.keyval_name(event.keyval) +\n"
"                                            \" key was pressed.\")\n"
"        # stop the signal emission\n"
"        return True\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/statusbar.py.page:33(note/p)
msgid ""
"<code>Gdk.keyval_name(event.keyval)</code> converts the key value <code>event."
"keyval</code> into a symbolic name. The names and corresponding key values "
"can be found <link href=\"http://git.gnome.org/browse/gtk+/tree/gdk/"
"gdkkeysyms.h\">here</link>, but for instance <code>GDK_KEY_BackSpace</code> "
"becomes the string <code>\"BackSpace\"</code>."
msgstr ""

#: C/statusbar.py.page:39(section/title)
msgid "Useful methods for a Statusbar widget"
msgstr ""

#: C/statusbar.py.page:40(section/p)
msgid ""
"In line 17 the signal <code>\"clicked\"</code> is connected to the callback "
"function <code>button_clicked_cb()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""

#: C/statusbar.py.page:42(item/p)
msgid ""
"<code>pop(context_id)</code> removes the first message in the statusbar stack "
"with the given <code>context_id</code>."
msgstr ""

#: C/statusbar.py.page:43(item/p)
msgid ""
"<code>remove_all(context_id)</code> removes all the messages in the statusbar "
"stack with the given <code>context_id</code>."
msgstr ""

#: C/statusbar.py.page:44(item/p)
msgid ""
"<code>remove(context_id, message_id)</code> removes the message with the "
"given <code>message_id</code> in the statusbar stack with the given "
"<code>context_id</code>. The <code>message_id</code> is returned by <code>push"
"(context_id, \"the message\")</code> when pushing the message on the "
"statusbar."
msgstr ""

#: C/statusbar.py.page:52(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkStatusbar.html"
"\">GtkStatusbar</link>"
msgstr ""

#: C/statusbar.py.page:53(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gdk/stable/gdk-Keyboard-Handling.html"
"\">Gdk - Key Values</link>"
msgstr ""

#: C/statusbar.vala.page:7(info/title)
msgctxt "text"
msgid "Statusbar (Vala)"
msgstr "Statusleiste (Vala)"

#: C/statusbar.vala.page:25(page/p)
msgid "This statusbar tells you what's going on."
msgstr ""

#: C/statusbar.vala.page:27(page/code)
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Statusbar statusbar;\n"
"\tuint context_id;\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Statusbar Example\");\n"
"\n"
"\t\tstatusbar = new Gtk.Statusbar ();\n"
"\t\tcontext_id = statusbar.get_context_id (\"example\");\n"
"\t\tstatusbar.push (context_id, \"Waiting for you to do something...\");\n"
"\n"
"\t\t//set the default size of the window\n"
"\t\tthis.set_default_size (200, 100);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tvar label = new Gtk.Label (\"Press any key or \");\n"
"\n"
"\t\tgrid.attach (label, 0, 0, 1, 1);\n"
"\t\tlabel.show ();\n"
"\n"
"\t\tvar button = new Gtk.Button.with_label (\"click me.\");\n"
"\t\tgrid.attach_next_to (button, label, Gtk.PositionType.RIGHT, 1, 1);\n"
"\t\tbutton.show ();\n"
"\n"
"\t\tgrid.attach (statusbar, 0, 1, 2, 1);\n"
"\t\tstatusbar.show ();\n"
"\n"
"\t\tgrid.set_column_spacing (5);\n"
"\t\tgrid.set_column_homogeneous (true);\n"
"\t\tgrid.set_row_homogeneous (true);\n"
"\n"
"\t\tthis.add (grid);\n"
"\t\tgrid.show ();\n"
"\n"
"\t\tbutton.clicked.connect(button_clicked_cb);\n"
"\t}\n"
"\n"
"\t/* Since the key-press-event is a signal received by the window, we don't need to connect\n"
"\tthe window to a callback function.  We can just override key_press_event. */\n"
"\tprotected override bool key_press_event (Gdk.EventKey event) {\n"
"\t\tstatusbar.push (context_id, Gdk.keyval_name(event.keyval) + \" key was pressed.\");\n"
"\t\treturn true;\n"
"\t}\n"
"\n"
"\tvoid button_clicked_cb (Gtk.Button button) {\n"
"\t\tstatusbar.push (context_id, \"You clicked the button.\");\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.status\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/statusbar.vala.page:32(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Statusbar.html\">Gtk."
"Statusbar</link>"
msgstr ""

#: C/strings.py.page:8(info/title)
msgctxt "text"
msgid "Strings (Python)"
msgstr ""

#: C/strings.py.page:13(info/desc)
msgid "An explanation of how to deal with strings in Python and GTK+."
msgstr ""

#: C/strings.py.page:26(page/title)
msgid "Strings"
msgstr "Strings"

#: C/strings.py.page:30(note/p)
msgid "GNOME strongly encourages the use of Python 3 for writing applications!"
msgstr ""

#: C/strings.py.page:33(section/title)
msgid "Strings in Python 2"
msgstr "Strings in Python 2"

#: C/strings.py.page:35(section/p)
msgid ""
"Python 2 comes with two different kinds of objects that can be used to "
"represent strings, <code>str</code> and <code>unicode</code>. Instances of "
"<code>unicode</code> are used to express Unicode strings, whereas instances "
"of the <code>str</code> type are byte representations (the encoded string). "
"Under the hood, Python represents Unicode strings as either 16- or 32-bit "
"integers, depending on how the Python interpreter was compiled."
msgstr ""

#: C/strings.py.page:37(section/code)
#, no-wrap
msgid ""
"\n"
"&gt;&gt;&gt; unicode_string = u\"Fu\\u00dfb\\u00e4lle\"\n"
"&gt;&gt;&gt; print unicode_string\n"
"Fußbälle\n"
msgstr ""

#: C/strings.py.page:43(section/p)
msgid ""
"Unicode strings can be converted to 8-bit strings with <code>unicode.encode()"
"</code>. Python’s 8-bit strings have a <code>str.decode()</code> method that "
"interprets the string using the given encoding (that is, it is the inverse of "
"the <code>unicode.encode()</code>):"
msgstr ""

#: C/strings.py.page:45(section/code)
#, no-wrap
msgid ""
"\n"
"&gt;&gt;&gt; type(unicode_string)\n"
"&lt;type 'unicode'&gt;\n"
"&gt;&gt;&gt; unicode_string.encode(\"utf-8\")\n"
"'Fu\\xc3\\x9fb\\xc3\\xa4lle'\n"
"&gt;&gt;&gt; utf8_string = unicode_string.encode(\"utf-8\")\n"
"&gt;&gt;&gt; type(utf8_string)\n"
"&lt;type 'str'&gt;\n"
"&gt;&gt;&gt; unicode_string == utf8_string.decode(\"utf-8\")\n"
"True"
msgstr ""

#: C/strings.py.page:56(section/p)
msgid ""
"Unfortunately, Python 2.x allows you to mix <code>unicode</code> and "
"<code>str</code> if the 8-bit string happened to contain only 7-bit (ASCII) "
"bytes, but would get <sys>UnicodeDecodeError</sys> if it contained non-ASCII "
"values."
msgstr ""

#: C/strings.py.page:61(section/title)
msgid "Strings in Python 3"
msgstr "Strings in Python 3"

#: C/strings.py.page:63(section/p)
msgid ""
"Since Python 3.0, all strings are stored as Unicode in an instance of the "
"<code>str</code> type. Encoded strings on the other hand are represented as "
"binary data in the form of instances of the bytes type. Conceptionally, "
"<code>str</code> refers to text, whereas bytes refers to data. Use "
"<code>encode()</code> to go from <code>str</code> to <code>bytes</code>, and "
"<code>decode()</code> to go from <code>bytes</code> to <code>str</code>."
msgstr ""

#: C/strings.py.page:65(section/p)
msgid ""
"In addition, it is no longer possible to mix Unicode strings with encoded "
"strings, because it will result in a <code>TypeError</code>:"
msgstr ""

#: C/strings.py.page:67(section/code)
#, no-wrap
msgid ""
"\n"
"&gt;&gt;&gt; text = \"Fu\\u00dfb\\u00e4lle\"\n"
"&gt;&gt;&gt; data = b\" sind rund\"\n"
"&gt;&gt;&gt; text + data\n"
"Traceback (most recent call last):\n"
"  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n"
"TypeError: Can't convert 'bytes' object to str implicitly\n"
"&gt;&gt;&gt; text + data.decode(\"utf-8\")\n"
"'Fußbälle sind rund'\n"
"&gt;&gt;&gt; text.encode(\"utf-8\") + data\n"
"b'Fu\\xc3\\x9fb\\xc3\\xa4lle sind rund'"
msgstr ""

#: C/strings.py.page:82(section/title)
msgid "Unicode in GTK+"
msgstr "Unicode in GTK+"

#: C/strings.py.page:84(section/p)
msgid ""
"GTK+ uses UTF-8 encoded strings for all text. This means that if you call a "
"method that returns a string you will always obtain an instance of the "
"<code>str</code> type. The same applies to methods that expect one or more "
"strings as parameter, they must be UTF-8 encoded. However, for convenience "
"PyGObject will automatically convert any unicode instance to str if supplied "
"as argument:"
msgstr ""

#: C/strings.py.page:86(section/code)
#, no-wrap
msgid ""
"\n"
"&gt;&gt;&gt; from gi.repository import Gtk\n"
"&gt;&gt;&gt; label = Gtk.Label()\n"
"&gt;&gt;&gt; unicode_string = u\"Fu\\u00dfb\\u00e4lle\"\n"
"&gt;&gt;&gt; label.set_text(unicode_string)\n"
"&gt;&gt;&gt; txt = label.get_text()\n"
"&gt;&gt;&gt; type(txt)\n"
"&lt;type 'str'&gt;"
msgstr ""

#: C/strings.py.page:95(section/p)
#, fuzzy
#| msgid "Further reading"
msgid "Furthermore:"
msgstr "Weitere Informationen"

#: C/strings.py.page:97(section/code)
#, no-wrap
msgid ""
"\n"
"&gt;&gt;&gt; txt == unicode_string"
msgstr ""

#: C/strings.py.page:100(section/p)
msgid ""
"would return <code>False</code>, with the warning <code>__main__:1: "
"UnicodeWarning: Unicode equal comparison failed to convert both arguments to "
"Unicode - interpreting them as being unequal</code> (<code>Gtk.Label.get_text"
"()</code> will always return a <code>str</code> instance; therefore, "
"<code>txt</code> and <code>unicode_string</code> are not equal)."
msgstr ""

#: C/strings.py.page:102(section/p)
msgid ""
"This is especially important if you want to internationalize your program "
"using <link href=\"http://docs.python.org/library/gettext.html"
"\"><code>gettext</code></link>. You have to make sure that <code>gettext</"
"code> will return UTF-8 encoded 8-bit strings for all languages."
msgstr ""

#: C/strings.py.page:104(section/p)
msgid ""
"In general it is recommended to not use <code>unicode</code> objects in GTK+ "
"applications at all, and only use UTF-8 encoded <code>str</code> objects "
"since GTK+ does not fully integrate with <code>unicode</code> objects."
msgstr ""

#: C/strings.py.page:106(section/p)
msgid ""
"With Python 3.x things are much more consistent, because PyGObject will "
"automatically encode/decode to/from UTF-8 if you pass a string to a method or "
"a method returns a string. Strings, or text, will always be represented as "
"instances of <code>str</code> only."
msgstr ""

#: C/strings.py.page:113(section/p)
msgid ""
"<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/unicode."
"html\">How To Deal With Strings - The Python GTK+ 3 Tutorial</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/switch.c.page:22(media) C/switch.py.page:22(media)
#: C/switch.vala.page:25(media)
msgctxt "_"
msgid ""
"external ref='media/switch_off.png' md5='211a2962708800697ad5373dcc86ad6d'"
msgstr ""
"external ref='media/switch_off.png' md5='211a2962708800697ad5373dcc86ad6d'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/switch.c.page:23(media) C/switch.py.page:23(media)
#: C/switch.vala.page:26(media)
msgctxt "_"
msgid ""
"external ref='media/switch_on.png' md5='95e8769f758c2d95ace0fa8ecf30b29d'"
msgstr ""
"external ref='media/switch_on.png' md5='95e8769f758c2d95ace0fa8ecf30b29d'"

#: C/switch.c.page:7(info/title)
msgctxt "text"
msgid "Switch (C)"
msgstr ""

#: C/switch.c.page:17(info/desc) C/switch.py.page:18(info/desc)
#: C/switch.vala.page:21(info/desc)
msgid "A \"light switch\" style toggle"
msgstr ""

#: C/switch.c.page:20(page/title) C/switch.js.page:20(page/title)
#: C/switch.py.page:21(page/title) C/switch.vala.page:24(page/title)
msgid "Switch"
msgstr ""

#: C/switch.c.page:24(page/p)
msgid "This switch toggles the title of the window."
msgstr ""

#: C/switch.c.page:26(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Signal handler for the \"active\" signal of the Switch*/\n"
"static void\n"
"activate_cb (GObject    *switcher,\n"
"             GParamSpec *pspec,\n"
"             gpointer    user_data)\n"
"{\n"
"  GtkWindow *window = user_data;\n"
"\n"
"  if (gtk_switch_get_active (GTK_SWITCH (switcher)))\n"
"    gtk_window_set_title (GTK_WINDOW (window), \"Switch Example\");\n"
"  else\n"
"    gtk_window_set_title (GTK_WINDOW (window), \"\");\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"  GtkWidget *switcher;\n"
"\n"
"  /*Create a window with a set title and default size.\n"
"  Also, set a border width for the amount of space to leave\n"
"  inside the window*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Switch Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 100);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 10);\n"
"\n"
"  /*Create a label*/\n"
"  label = gtk_label_new (\"Title\");\n"
"\n"
"  /*Create a switch with a default active state*/\n"
"  switcher = gtk_switch_new ();\n"
"  gtk_switch_set_active (GTK_SWITCH (switcher), TRUE);\n"
"\n"
"  /*Create a grid and set the column spacing, attach the label and\n"
"  switch onto the grid and position them accordingly*/\n"
"  grid = gtk_grid_new();\n"
"  gtk_grid_set_column_spacing (GTK_GRID (grid), 10);\n"
"  gtk_grid_attach (GTK_GRID (grid), label, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), switcher, 1, 0, 1, 1);\n"
"\n"
"  /*Connecting the clicked signal to the callback function*/\n"
"  g_signal_connect (GTK_SWITCH (switcher), \n"
"                    \"notify::active\", \n"
"                    G_CALLBACK (activate_cb), \n"
"                    window);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/switch.js.page:21(media)
msgctxt "_"
msgid ""
"external ref='media/switchanimals.png' md5='513ae15dcf68e15eef30b76420b8c714'"
msgstr ""
"external ref='media/switchanimals.png' md5='513ae15dcf68e15eef30b76420b8c714'"

#: C/switch.js.page:7(info/title)
#, fuzzy
#| msgid "JavaScript"
msgctxt "text"
msgid "Switch (JavaScript)"
msgstr "JavaScript"

#: C/switch.js.page:17(info/desc)
msgid "A sliding switch that can be flipped on and off"
msgstr ""

#: C/switch.js.page:22(page/p)
msgid ""
"A Switch has two positions, on and off. This example shows how you can use "
"multiple switches together to control which <link xref=\"image.js\">Image</"
"link> is shown in the window. The pictures used in this example <link href="
"\"https://live.gnome.org/TarynFox?action=AttachFile&amp;do=get&amp;"
"target=Animal+Photos.zip\">can be downloaded here</link>."
msgstr ""

#: C/switch.js.page:23(note/p)
msgid ""
"The window will contain a \"broken image\" icon instead of a picture if "
"picture files named <file>redfox.png</file>, <file>muteswan.png</file>, "
"<file>fruitbat.png</file>, and <file>gentoopenguin.png</file> aren't in the "
"same directory. You can change the code and the pictures around as you like, "
"but the Creative Commons-licensed photos used in this example were taken from "
"the following sources and cropped to 640x425:"
msgstr ""

#: C/switch.js.page:25(item/p)
msgid ""
"<link href=\"http://en.wikipedia.org/wiki/File:Fuzzy_Freddy.jpg\">Red fox "
"photo</link> by Rob Lee, licensed <link href=\"http://creativecommons.org/"
"licenses/by/2.0/deed.en\">CC-By</link>"
msgstr ""

#: C/switch.js.page:26(item/p)
msgid ""
"<link href=\"http://en.wikipedia.org/wiki/File:Pygoscelis_papua_-"
"Nagasaki_Penguin_Aquarium_-swimming_underwater-8a.jpg\">Gentoo penguin photo</"
"link> by Ken Funakoshi, licensed <link href=\"http://creativecommons.org/"
"licenses/by-sa/2.0/deed.en\">CC-By-SA</link>"
msgstr ""

#: C/switch.js.page:27(item/p)
msgid ""
"<link href=\"http://www.flickr.com/photos/shekgraham/127431519/in/photostream/"
"\">Fruit bat photo</link> by Shek Graham, licensed <link href=\"http://"
"creativecommons.org/licenses/by/2.0/deed.en\">CC-By</link>"
msgstr ""

#: C/switch.js.page:28(item/p)
msgid ""
"<link href=\"http://commons.wikimedia.org/wiki/File:Mute_Swan-"
"Mindaugas_Urbonas.jpg\">Mute swan photo</link> by Mindaugas Urbonas, licensed "
"<link href=\"http://creativecommons.org/licenses/by-sa/2.5/deed.en\">CC-By-"
"SA</link>"
msgstr ""

#: C/switch.js.page:30(note/p)
msgid ""
"Photo credits and licensing information are shown in the application's <link "
"xref=\"aboutdialog.js\">AboutDialog</link>. Always remember to credit the "
"original artist when using <link href=\"http://creativecommons.org\">Creative "
"Commons-licensed works!</link>"
msgstr ""

#: C/switch.js.page:47(section/code)
#, no-wrap
msgid ""
"\n"
"const SwitchExample = new Lang.Class({\n"
"    Name: 'Switch Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsswitch',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal creates the menu and builds the UI\n"
"    _onStartup: function() {\n"
"        this._initMenus();\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""

#: C/switch.js.page:74(section/p)
msgid ""
"All the code for this sample goes in the SwitchExample class. The above code "
"creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"Application.html\">Gtk.Application</link> for our widgets and window to go in."
msgstr ""

#: C/switch.js.page:76(section/code)
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Animal Creator\"});\n"
msgstr ""

#: C/switch.js.page:91(section/title)
#, fuzzy
#| msgid "Creating the user interface"
msgid "Creating the switches"
msgstr "Erstellen der Benutzeroberfläche"

#: C/switch.js.page:92(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the image widget and set its default picture\n"
"        this._image = new Gtk.Image ({file: \"redfox.png\"});\n"
msgstr ""

#: C/switch.js.page:97(section/p)
msgid ""
"We first create the <link xref=\"image.js\">Image</link> that the switches "
"will control. Remember that a file named <file>redfox.png</file> needs to be "
"in the same directory as this application."
msgstr ""

#: C/switch.js.page:99(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a label for the first switch\n"
"        this._flyLabel = new Gtk.Label ({\n"
"            label: \"Make it fly\",\n"
"            margin_right: 30});\n"
"\n"
"        // Create the first switch and set its default position\n"
"        this._flySwitch = new Gtk.Switch ({active: false});\n"
"        this._flySwitch.connect ('notify::active', Lang.bind (this, this._switchFlip));\n"
"\n"
"        // Create a label for the second switch\n"
"        this._birdLabel = new Gtk.Label ({\n"
"            label: \"Make it a bird\",\n"
"            margin_right: 30});\n"
"\n"
"        // Create the second switch\n"
"        this._birdSwitch = new Gtk.Switch ({active: false});\n"
"        this._birdSwitch.connect ('notify::active', Lang.bind (this, this._switchFlip));\n"
msgstr ""

#: C/switch.js.page:119(section/p)
msgid ""
"We use a <link xref=\"label.js\">Label</link> to mark each Switch, and give "
"them a bit of a margin on the right so that they aren't crammed right next to "
"the Switches. After that we create the Switches, and set them to be switched "
"off by default."
msgstr ""

#: C/switch.js.page:120(section/p)
msgid ""
"The signal a switch sends out when it's flipped on or off is called notify::"
"active. After we create each switch, we connect its notify::active signal to "
"a function called _switchFlip. If you have multiple switches that each do "
"something different, you might want to connect them to different functions, "
"but here they're both used for the same thing: To control what picture's "
"displayed by _image."
msgstr ""

#: C/switch.js.page:122(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a grid for the labels and switches beneath the picture\n"
"        this._UIGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_top: 20});\n"
"\n"
"        // Attach the labels and switches to that grid\n"
"        this._UIGrid.attach (this._flyLabel, 0, 0, 1, 1);\n"
"        this._UIGrid.attach (this._flySwitch, 1, 0, 1, 1);\n"
"        this._UIGrid.attach (this._birdLabel, 0, 1, 1, 1);\n"
"        this._UIGrid.attach (this._birdSwitch, 1, 1, 1, 1);\n"
"\n"
"        // Create a master grid to put both the UI and the picture into\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Attach the picture and the UI grid to the master grid\n"
"        this._mainGrid.attach (this._image, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._UIGrid, 0, 1, 1, 1);\n"
msgstr ""

#: C/switch.js.page:144(section/p)
msgid ""
"We create a <link xref=\"grid.js\">Grid</link> for the Labels and Switches "
"first, so that we can organize them in a 2x2 layout with a margin between it "
"and the Image. Then we put that Grid into a larger 2x1 Grid that has the "
"Image on top, and the Grid with the Labels and Switches on the bottom."
msgstr ""

#: C/switch.js.page:145(section/code)
#, no-wrap
msgid ""
"\n"
"        // Add the master grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""

#: C/switch.js.page:157(section/title)
msgid "Function which handles the switches being flipped"
msgstr ""

#: C/switch.js.page:159(section/code)
#, no-wrap
msgid ""
"\n"
"    _switchFlip: function() {\n"
"\n"
"        // Change the picture depending on which switches are flipped\n"
"        if (this._flySwitch.get_active()) {\n"
"\n"
"            if (this._birdSwitch.get_active()) this._image.set_from_file (\"muteswan.png\");\n"
"\n"
"            else this._image.set_from_file (\"fruitbat.png\");\n"
"        }\n"
"\n"
"        else {\n"
"\n"
"            if (this._birdSwitch.get_active()) this._image.set_from_file (\"gentoopenguin.png\");\n"
"\n"
"            else this._image.set_from_file (\"redfox.png\");\n"
"\n"
"        }\n"
"\n"
"    },\n"
msgstr ""

#: C/switch.js.page:180(section/p)
msgid ""
"Each time a Switch is flipped, this function checks to see which of the two "
"Switches are active afterwards, using the Switches' built-in get_active() "
"function. It then changes the Image accordingly. You can change the filenames "
"around as you like, so long as you have pictures to go with them."
msgstr ""

#: C/switch.js.page:184(section/title)
#, fuzzy
#| msgid "Creating the user interface"
msgid "Creating the AboutDialog"
msgstr "Erstellen der Benutzeroberfläche"

#: C/switch.js.page:185(section/code)
#, no-wrap
msgid ""
"\n"
"    _initMenus: function() {\n"
"\n"
"        // Build the application's menu so we can have an \"About\" button\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"About\", 'app.about');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // Bind the \"About\" button to the _showAbout() function\n"
"        let aboutAction = new Gio.SimpleAction ({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        // Bind the \"Quit\" button to the function that closes the window\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
msgstr ""

#: C/switch.js.page:211(section/p)
msgid ""
"The first step is building the <link xref=\"gmenu.js\">GMenu</link> that the "
"\"About\" button goes into. This is the menu that appears when you click the "
"application's name in the upper-left corner of the screen, next to the "
"Activities menu. Our menu only has two options in it: About, and Quit."
msgstr ""

#: C/switch.js.page:213(section/code)
#, no-wrap
msgid ""
"\n"
"    _showAbout: function () {\n"
"\n"
"        // String arrays of the names of the people involved in the project\n"
"        var artists = ['Rob Lee http://en.wikipedia.org/wiki/File:Fuzzy_Freddy.jpg', 'Ken Funakoshi http://en.wikipedia.org/wiki/File:Pygoscelis_papua_-Nagasaki_Penguin_Aquarium_-swimming_underwater-8a.jpg', 'Shek Graham http://www.flickr.com/photos/shekgraham/127431519/in/photostream/', 'Mindaugas Urbonas http://commons.wikimedia.org/wiki/File:Mute_Swan-Mindaugas_Urbonas.jpg'];\n"
"        var authors = [\"GNOME Documentation Team\"];\n"
"        var documenters = [\"GNOME Documentation Team\"];\n"
"\n"
"        // Create the About dialog\n"
"        let aboutDialog = new Gtk.AboutDialog({\n"
"            title: \"AboutDialog Example\",\n"
"            program_name: \"Animal Creator\",\n"
"            copyright: \"Copyright \\xa9 2012 GNOME Documentation Team\\n\\nRed fox photo licensed CC-By by Rob Lee\\nGentoo penguin photo licensed CC-By-SA by Ken Funakoshi\\nFruit bat photo licensed CC-By by Shek Graham\\nMute swan photo licensed CC-By-SA by Mindaugas Urbonas\\nLinks to the originals are available under Credits.\\n\\nHave you hugged a penguin today?\",\n"
"            artists: artists,\n"
"            authors: authors,\n"
"            documenters: documenters,\n"
"            website: \"http://developer.gnome.org\",\n"
"            website_label: \"GNOME Developer Website\" });\n"
"\n"
"        // Attach the About dialog to the window\n"
"        aboutDialog.modal = true;\n"
"        aboutDialog.transient_for = this._window;\n"
"\n"
"        // Show the About dialog\n"
"        aboutDialog.show();\n"
"\n"
"        // Connect the Close button to the destroy signal for the dialog\n"
"        aboutDialog.connect('response', function() {\n"
"            aboutDialog.destroy();\n"
"        });\n"
"    }\n"
"\n"
"});\n"
msgstr ""

#: C/switch.js.page:247(section/p)
msgid ""
"An <link xref=\"aboutdialog.js\">AboutDialog</link> has a lot of different "
"things you can set, to credit everyone who worked on the application and "
"leave a note to whomever reads it. In this case, the copyright section "
"contains our note and credits the original photographers, while the artists "
"section shows you a list of the photographers with links to the original "
"photos when you click the Credits button. The web URLs put after their names "
"in the array turn their names into clickable links in the Credits section."
msgstr ""

#: C/switch.js.page:249(section/code)
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new SwitchExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/switch.js.page:254(section/p)
msgid ""
"Finally, we create a new instance of the finished SwitchExample class, and "
"set the application running."
msgstr ""

#: C/switch.js.page:259(section/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const SwitchExample = new Lang.Class({\n"
"    Name: 'Switch Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsswitch'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal creates the menu and builds the UI\n"
"    _onStartup: function() {\n"
"        this._initMenus();\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Animal Creator\"});\n"
"\n"
"        // Create the image widget and set its default picture\n"
"        this._image = new Gtk.Image ({file: \"redfox.png\"});\n"
"\n"
"        // Create a label for the first switch\n"
"        this._flyLabel = new Gtk.Label ({\n"
"            label: \"Make it fly\",\n"
"            margin_right: 30});\n"
"\n"
"        // Create the first switch and set its default position\n"
"        this._flySwitch = new Gtk.Switch ({active: false});\n"
"        this._flySwitch.connect ('notify::active', Lang.bind (this, this._switchFlip));\n"
"\n"
"        // Create a label for the second switch\n"
"        this._birdLabel = new Gtk.Label ({\n"
"            label: \"Make it a bird\",\n"
"            margin_right: 30});\n"
"\n"
"        // Create the second switch\n"
"        this._birdSwitch = new Gtk.Switch ({active: false});\n"
"        this._birdSwitch.connect ('notify::active', Lang.bind (this, this._switchFlip));\n"
"\n"
"        // Create a grid for the labels and switches beneath the picture\n"
"        this._UIGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_top: 20});\n"
"\n"
"        // Attach the labels and switches to that grid\n"
"        this._UIGrid.attach (this._flyLabel, 0, 0, 1, 1);\n"
"        this._UIGrid.attach (this._flySwitch, 1, 0, 1, 1);\n"
"        this._UIGrid.attach (this._birdLabel, 0, 1, 1, 1);\n"
"        this._UIGrid.attach (this._birdSwitch, 1, 1, 1, 1);\n"
"\n"
"        // Create a master grid to put both the UI and the picture into\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Attach the picture and the UI grid to the master grid\n"
"        this._mainGrid.attach (this._image, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._UIGrid, 0, 1, 1, 1);\n"
"\n"
"        // Add the master grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _switchFlip: function() {\n"
"\n"
"        // Change the picture depending on which switches are flipped\n"
"        if (this._flySwitch.get_active()) {\n"
"\n"
"            if (this._birdSwitch.get_active()) this._image.set_from_file (\"muteswan.png\");\n"
"\n"
"            else this._image.set_from_file (\"fruitbat.png\");\n"
"        }\n"
"\n"
"        else {\n"
"\n"
"            if (this._birdSwitch.get_active()) this._image.set_from_file (\"gentoopenguin.png\");\n"
"\n"
"            else this._image.set_from_file (\"redfox.png\");\n"
"\n"
"        }\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _initMenus: function() {\n"
"\n"
"        // Build the application's menu so we can have an \"About\" button\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"About\", 'app.about');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // Bind the \"About\" button to the _showAbout() function\n"
"        let aboutAction = new Gio.SimpleAction ({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        // Bind the \"Quit\" button to the function that closes the window\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"\n"
"\n"
"    _showAbout: function () {\n"
"\n"
"        // String arrays of the names of the people involved in the project\n"
"        var artists = ['Rob Lee http://en.wikipedia.org/wiki/File:Fuzzy_Freddy.png', 'Ken Funakoshi http://en.wikipedia.org/wiki/File:Pygoscelis_papua_-Nagasaki_Penguin_Aquarium_-swimming_underwater-8a.png', 'Shek Graham http://www.flickr.com/photos/shekgraham/127431519/in/photostream/', 'Mindaugas Urbonas http://commons.wikimedia.org/wiki/File:Mute_Swan-Mindaugas_Urbonas.png'];\n"
"        var authors = [\"GNOME Documentation Team\"];\n"
"        var documenters = [\"GNOME Documentation Team\"];\n"
"\n"
"        // Create the About dialog\n"
"        let aboutDialog = new Gtk.AboutDialog({\n"
"            title: \"AboutDialog Example\",\n"
"            program_name: \"Animal Creator\",\n"
"            copyright: \"Copyright \\xa9 2012 GNOME Documentation Team\\n\\nRed fox photo licensed CC-By by Rob Lee\\nGentoo penguin photo licensed CC-By-SA by Ken Funakoshi\\nFruit bat photo licensed CC-By by Shek Graham\\nMute swan photo licensed CC-By-SA by Mindaugas Urbonas\\nLinks to the originals are available under Credits.\\n\\nHave you hugged a penguin today?\",\n"
"            artists: artists,\n"
"            authors: authors,\n"
"            documenters: documenters,\n"
"            website: \"http://developer.gnome.org\",\n"
"            website_label: \"GNOME Developer Website\" });\n"
"\n"
"        // Attach the About dialog to the window\n"
"        aboutDialog.modal = true;\n"
"        aboutDialog.transient_for = this._window;\n"
"\n"
"        // Show the About dialog\n"
"        aboutDialog.show();\n"
"\n"
"        // Connect the Close button to the destroy signal for the dialog\n"
"        aboutDialog.connect('response', function() {\n"
"            aboutDialog.destroy();\n"
"        });\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new SwitchExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/switch.js.page:270(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Image.html"
"\">Gtk.Image</link>"
msgstr ""

#: C/switch.js.page:272(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Switch.html"
"\">Gtk.Switch</link>"
msgstr ""

#: C/switch.py.page:7(info/title)
msgctxt "text"
msgid "Switch (Python)"
msgstr ""

#: C/switch.py.page:25(page/p)
msgid "This Switch makes the title appears and disappear."
msgstr ""

#: C/switch.py.page:32(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Switch Example\", application=app)\n"
"        self.set_default_size(300, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a switch\n"
"        switch = Gtk.Switch()\n"
"        # turned on by default\n"
"        switch.set_active(True)\n"
"        # connect the signal notify::active emitted by the switch\n"
"        # to the callback function activate_cb\n"
"        switch.connect(\"notify::active\", self.activate_cb)\n"
"\n"
"        # a label\n"
"        label = Gtk.Label()\n"
"        label.set_text(\"Title\")\n"
"\n"
"        # a grid to allocate the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.set_column_spacing (10);\n"
"        grid.attach (label, 0, 0, 1, 1);\n"
"        grid.attach (switch, 1, 0, 1, 1);\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # Callback function. Since the signal is notify::active\n"
"    # we need the argument 'active'\n"
"    def activate_cb(self, button, active):\n"
"        # if the button (i.e. the switch) is active, set the title\n"
"        # of the window to \"Switch Example\"\n"
"        if button.get_active():\n"
"            self.set_title(\"Switch Example\")\n"
"        # else, set it to \"\" (empty string)\n"
"        else:\n"
"            self.set_title(\"\")\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/switch.py.page:36(section/title)
msgid "Useful methods for a Switch widget"
msgstr ""

#: C/switch.py.page:37(section/p)
msgid ""
"In line 17 the signal <code>\"notify::active\"</code> is connected to the "
"callback function <code>activate_cb()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""

#: C/switch.py.page:44(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkSwitch.html"
"\">GtkSwitch</link>"
msgstr ""

#: C/switch.vala.page:7(info/title)
msgctxt "text"
msgid "Switch (Vala)"
msgstr ""

#: C/switch.vala.page:28(page/p)
msgid "This Switch toggles the title."
msgstr ""

#: C/switch.vala.page:30(page/code)
#, no-wrap
msgid ""
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Switch Example\");\n"
"\n"
"\t\tthis.set_default_size (300, 100);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tvar label = new Gtk.Label (\"Title\");\n"
"\t\tvar switcher = new Gtk.Switch ();\n"
"\n"
"\t\tswitcher.set_active (true);\n"
"\n"
"\t\tswitcher.notify[\"active\"].connect (switcher_cb);\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.set_column_spacing (10);\n"
"\t\tgrid.attach (label, 0, 0, 1, 1);\n"
"\t\tgrid.attach (switcher, 1, 0, 1, 1);\n"
"\n"
"\t\tthis.add (grid);\n"
"\t}\n"
"\n"
"\tvoid switcher_cb (Object switcher, ParamSpec pspec) {\n"
"\t\tif ((switcher as Gtk.Switch).get_active())\n"
"\t\t\tthis.set_title (\"Switch Example\");\n"
"\t\telse\n"
"\t\t\tthis.set_title (\"\");\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\n"
"\t\tvar window = new MyWindow (this);\n"
"\t\twindow.show_all (); //show all the things\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.checkbutton\");\n"
"\t}\n"
"}\n"
"\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/switch.vala.page:35(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Switch.html\">Gtk.Switch</"
"link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/textview.c.page:26(media) C/textview.py.page:38(media)
#: C/textview.vala.page:26(media)
msgctxt "_"
msgid "external ref='media/textview.png' md5='049e859ed1af2d7c93d8cb5cfd9f7792'"
msgstr ""
"external ref='media/textview.png' md5='049e859ed1af2d7c93d8cb5cfd9f7792'"

#: C/textview.c.page:7(info/title)
msgctxt "text"
msgid "TextView (C)"
msgstr ""

#: C/textview.c.page:17(info/desc) C/textview.vala.page:17(info/desc)
msgid "Widget which displays a GtkTextBuffer"
msgstr ""

#: C/textview.c.page:20(page/title) C/textview.vala.page:20(page/title)
msgid "TextView widget"
msgstr ""

#: C/textview.c.page:21(note/p) C/textview.py.page:32(note/p)
#: C/textview.vala.page:21(note/p)
msgid "If we press \"enter\", we have a new line."
msgstr ""

#: C/textview.c.page:22(note/p) C/textview.vala.page:22(note/p)
msgid ""
"If we press \"enter\" more times then there are lines in the default sized "
"window, then a vertical scrollbar appears."
msgstr ""

#: C/textview.c.page:23(note/p) C/textview.vala.page:23(note/p)
msgid ""
"If we write a long sentence, the text will wrap breaking lines between words."
msgstr ""

#: C/textview.c.page:24(note/p)
msgid ""
"If we have a loooooooooooooooooooooooooooooooooooong (that was long) word, a* "
"horizontal scrollbar will appear."
msgstr ""

#: C/textview.c.page:27(page/p) C/textview.vala.page:27(page/p)
msgid "This is an example of Gtk.TextView"
msgstr ""

#: C/textview.c.page:29(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Declare variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *text_view;\n"
"  GtkWidget *scrolled_window;\n"
"\n"
"  GtkTextBuffer *buffer;\n"
"\n"
"\n"
"  /* Create a window with a title, and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"TextView Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 220, 200);\n"
"\n"
"\n"
"  /* The text buffer represents the text being edited */\n"
"  buffer = gtk_text_buffer_new (NULL);\n"
"  \n"
"\n"
"  /* Text view is a widget in which can display the text buffer. \n"
"   * The line wrapping is set to break lines in between words.\n"
"   */\n"
"  text_view = gtk_text_view_new_with_buffer (buffer);\n"
"  gtk_text_view_set_wrap_mode (GTK_TEXT_VIEW (text_view), GTK_WRAP_WORD); \n"
"\n"
"\n"
"  /* Create the scrolled window. Usually NULL is passed for both parameters so \n"
"   * that it creates the horizontal/vertical adjustments automatically. Setting \n"
"   * the scrollbar policy to automatic allows the scrollbars to only show up \n"
"   * when needed. \n"
"   */\n"
"  scrolled_window = gtk_scrolled_window_new (NULL, NULL);\n"
"  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window), \n"
"                                  GTK_POLICY_AUTOMATIC, \n"
"                                  GTK_POLICY_AUTOMATIC); \n"
"  /* The function directly below is used to add children to the scrolled window \n"
"   * with scrolling capabilities (e.g text_view), otherwise, \n"
"   * gtk_scrolled_window_add_with_viewport() would have been used\n"
"   */\n"
"  gtk_container_add (GTK_CONTAINER (scrolled_window), \n"
"                                         text_view);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (scrolled_window), 5);\n"
" \n"
"  \n"
"  gtk_container_add (GTK_CONTAINER (window), scrolled_window);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""

#: C/textview.c.page:40(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkContainer.html"
"\">GtkContainer</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/textview.js.page:25(media)
msgctxt "_"
msgid ""
"external ref='media/textviewpenguinchat.png' "
"md5='0dd6f6aa44aaeab7901bd90162ed4c9a'"
msgstr ""
"external ref='media/textviewpenguinchat.png' "
"md5='0dd6f6aa44aaeab7901bd90162ed4c9a'"

#: C/textview.js.page:7(info/title)
#, fuzzy
#| msgid "JavaScript"
msgctxt "text"
msgid "TextView (JavaScript)"
msgstr "JavaScript"

#: C/textview.js.page:21(info/desc)
msgid "A multiline text editor"
msgstr "Ein mehrzeiliger Texteditor"

#: C/textview.js.page:24(page/title) C/textview.py.page:29(page/title)
msgid "TextView"
msgstr ""

#: C/textview.js.page:26(page/p)
msgid ""
"A TextView is really (or at least usually) a nested set of three objects."
msgstr ""

#: C/textview.js.page:28(item/p)
msgid ""
"At the bottom there is a <link href=\"http://www.roojs.org/seed/gir-1.2-"
"gtk-3.0/gjs/Gtk.TextBuffer.html\">TextBuffer</link>. This holds the text "
"itself."
msgstr ""

#: C/textview.js.page:29(item/p)
msgid ""
"In the middle there is the <link href=\"http://www.roojs.org/seed/gir-1.2-"
"gtk-3.0/gjs/Gtk.TextView.html\">TextView</link>, which is a widget that lets "
"you see and edit the text in the buffer. It automatically resizes itself "
"depending on how much text there is."
msgstr ""

#: C/textview.js.page:30(item/p)
msgid ""
"Since the automatic resizing can make a TextView unwieldy, you normally place "
"it inside of a <link xref=\"scrolledwindow.js\">ScrolledWindow</link>. "
"Despite the name, it's not an actual window in terms of having a title bar "
"and an X button; it's a widget you put on the application you're making, "
"which acts like a window onto a more manageable chunk of a TextView. If the "
"text in the buffer is too big to fit, scrollbars will appear."
msgstr ""

#: C/textview.js.page:32(page/p)
msgid ""
"If you want to change what text is displayed in the TextView, you act on the "
"TextBuffer, since it's what actually holds the text. The same goes for if you "
"want to see what text someone typed in. This sample application lets you talk "
"to a (make-believe) penguin, and checks the TextBuffer to see if you typed "
"the word \"fish\" anywhere in it."
msgstr ""

#: C/textview.js.page:33(note/p)
msgid ""
"Real-life penguin populations are declining fast, because climate change is "
"melting the ice that they live on and killing the fish that they eat. If "
"you'd like to play a (somewhat silly) GNOME game based on this premise, take "
"a look at <link href=\"http://pingus.seul.org/\">Pingus</link>."
msgstr ""

#: C/textview.js.page:49(section/code)
#, no-wrap
msgid ""
"\n"
"const TextViewExample = new Lang.Class ({\n"
"    Name: 'TextView Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jstextview' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""

#: C/textview.js.page:73(section/p)
msgid ""
"All the code for this sample goes in the TextViewExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"Application.html\">Gtk.Application</link> for our widgets and window to go in."
msgstr ""

#: C/textview.js.page:74(section/code)
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Talk to a Penguin\",\n"
"            default_height: 400,\n"
"            default_width: 440,\n"
"            border_width: 20 });\n"
msgstr ""

#: C/textview.js.page:91(section/title)
#, fuzzy
#| msgid "Creating the user interface"
msgid "Creating the TextView"
msgstr "Erstellen der Benutzeroberfläche"

#: C/textview.js.page:92(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a label for the penguin to talk to you\n"
"        this._penguin = new Gtk.Label ({\n"
"            height_request: 180,\n"
"            width_request: 400,\n"
"            label: \"Squaaaak?\",\n"
"            wrap: true });\n"
msgstr ""

#: C/textview.js.page:101(section/p)
msgid ""
"Our first step in this example is to create the <link xref=\"label.js"
"\">Label</link> that the penguin will use to talk to you. We set the text in "
"it to wrap by setting its wrap property to true, but we'll use a different "
"method on the TextView itself that allows for more fine-grained control."
msgstr ""

#: C/textview.js.page:103(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a textview for you to talk to the penguin\n"
"        this.buffer = new Gtk.TextBuffer();\n"
"        this._textView = new Gtk.TextView ({\n"
"            buffer: this.buffer,\n"
"            editable: true,\n"
"            wrap_mode: Gtk.WrapMode.WORD });\n"
msgstr ""

#: C/textview.js.page:112(section/p)
msgid ""
"Our first step is to create a TextBuffer to put the words into. After that we "
"create the TextView, and tell it to use the TextBuffer we created as its "
"buffer. We also set it to be editable, since we want to be able to type new "
"things in."
msgstr ""

#: C/textview.js.page:113(section/p)
msgid ""
"The wrap_mode property lets you select from four different <link href="
"\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.WrapMode.html"
"\">WrapModes</link>. Gtk.WrapMode.CHAR, for instance, starts wrapping around "
"in the middle of a word if you keep typing when it gets to the edge. Most "
"people are probably used to Gtk.WrapMode.WORD, which will automatically put "
"the word you're typing on the next line if it gets to be too long."
msgstr ""

#: C/textview.js.page:115(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a \"scrolled window\" to put your textview in so it will scroll\n"
"        this._scrolled = new Gtk.ScrolledWindow ({\n"
"            hscrollbar_policy: Gtk.PolicyType.AUTOMATIC,\n"
"            vscrollbar_policy: Gtk.PolicyType.AUTOMATIC,\n"
"            shadow_type: Gtk.ShadowType.ETCHED_IN,\n"
"            height_request: 180,\n"
"            width_request: 400, });\n"
"\n"
"        // Put the textview into the scrolled window\n"
"        this._scrolled.add_with_viewport (this._textView);\n"
msgstr ""

#: C/textview.js.page:127(section/p)
msgid ""
"Here we create a <link xref=\"scrolledwindow.js\">ScrolledWindow</link>, and "
"set it to automatically scroll if it gets to be too big horizontally or "
"vertically. We also give it a nice-looking ETCHED_IN border. After that, we "
"put our TextView inside, and tell the ScrolledWindow to give us a viewport "
"onto it."
msgstr ""

#: C/textview.js.page:133(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a grid to organize them in\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Put the label and textview in the grid one on top of the other\n"
"        this._grid.attach (this._penguin, 0, 0, 1, 1);\n"
"        this._grid.attach (this._scrolled, 0, 1, 1, 1);\n"
msgstr ""

#: C/textview.js.page:143(section/p)
msgid ""
"The first <link xref=\"grid.js\">Grid</link> we create only has the Label and "
"the ScrolledWindow inside it."
msgstr ""

#: C/textview.js.page:145(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a button to send your message to the penguin\n"
"        this._send = new Gtk.Button ({\n"
"            halign: Gtk.Align.END,\n"
"            margin_top: 20,\n"
"            label: \"Send\" });\n"
"        this._send.connect ('clicked', Lang.bind (this, this._chat));\n"
"\n"
"        // Create a grid that will have the other grid on top and the button on bottom\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Add the other grid and the button to the main grid\n"
"        this._mainGrid.attach (this._grid, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._send, 0, 1, 1, 1);\n"
msgstr ""

#: C/textview.js.page:162(section/p)
msgid ""
"We create a <link xref=\"button.js\">Button</link> to send your message to "
"the penguin, and a new Grid that has the other one on top and the Button on "
"the bottom. The Button has a margin on top, so that it isn't squished up "
"against the ScrolledWindow."
msgstr ""

#: C/textview.js.page:164(section/code)
#, no-wrap
msgid ""
"\n"
"        // Attach the main grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""

#: C/textview.js.page:173(section/p)
msgid ""
"Finally, we attach the main Grid to the window, then we tell the window and "
"everything inside it to become visible when the application is run."
msgstr ""

#: C/textview.js.page:178(section/title)
msgid "Function which handles the penguin's response"
msgstr ""

#: C/textview.js.page:179(section/code)
#, no-wrap
msgid ""
"\n"
"    _chat: function () {\n"
"\n"
"        // Create a random number to determine what the penguin says\n"
"        this.number = Math.floor ((Math.random() * 3) + 1);\n"
"\n"
"        // Did you actually say anything?\n"
"        if (this.buffer.text) {\n"
"\n"
"            // Did you mention fish?\n"
"            if (this.buffer.text.match (/fish/gi)) {\n"
"\n"
"                // Have the penguin squaak about fish\n"
"                if (this.number == 1)\n"
"                    this._penguin.set_label (\"FISH!\");\n"
"\n"
"                else if (this.number == 2)\n"
"                    this._penguin.set_label (\"Fish fish fish fish. Fish!\");\n"
"\n"
"                else\n"
"                    this._penguin.set_label (\"Fish? Fish fish fish. Fish fish. FISH!\");\n"
"\n"
"            }\n"
"\n"
"            // I guess you didn't mention fish\n"
"            else {\n"
"\n"
"                // Have the penguin talk about penguinny stuff\n"
"                if (this.number == 1)\n"
"                    this._penguin.set_label (\"SQUAAK!\");\n"
"\n"
"                else if (this.number == 2)\n"
"                    this._penguin.set_label (\"Ork ork ork ork squaak. Squaak squaak! *waves flippers*\");\n"
"\n"
"                else\n"
"                    this._penguin.set_label (\"Ork ork ork ork ork?\");\n"
"\n"
"            }\n"
"\n"
"        }\n"
"\n"
"        // Clear the buffer\n"
"        this.buffer.text = \"\";\n"
"\n"
"        // Give focus back to the textview so you don't have to click it again\n"
"        this._textView.has_focus = true;\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""

#: C/textview.js.page:230(section/p)
msgid ""
"Here we use some basic JavaScript functions to have the penguins say "
"something random. Penguins like fish, though, so if you mention fish we want "
"the penguin to respond to that. To do that, we use the JavaScript String "
"object's match method on <file>this.buffer.text</file>, which returns the "
"contents of our TextBuffer."
msgstr ""

#: C/textview.js.page:231(section/p)
msgid ""
"Since we want to clear out the TextBuffer after each time you click Send, we "
"set <file>this.buffer.text</file> to contain an empty string afterwards. Then "
"we return focus to our TextView, so that you can keep typing without having "
"to click on it beforehand."
msgstr ""

#: C/textview.js.page:233(section/code)
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new TextViewExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/textview.js.page:238(section/p)
msgid ""
"Finally, we create a new instance of the finished TextViewExample class, and "
"set the application running."
msgstr ""

#: C/textview.js.page:243(section/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const TextViewExample = new Lang.Class ({\n"
"    Name: 'TextView Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jstextview' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Talk to a Penguin\",\n"
"            default_height: 400,\n"
"            default_width: 440,\n"
"            border_width: 20 });\n"
"\n"
"        // Create a label for the penguin to talk to you\n"
"        this._penguin = new Gtk.Label ({\n"
"            height_request: 180,\n"
"            width_request: 400,\n"
"            label: \"Squaaaak?\",\n"
"            wrap: true });\n"
"\n"
"        // Create a textview for you to talk to the penguin\n"
"        this.buffer = new Gtk.TextBuffer();\n"
"        this._textView = new Gtk.TextView ({\n"
"            buffer: this.buffer,\n"
"            editable: true,\n"
"            wrap_mode: Gtk.WrapMode.WORD });\n"
"\n"
"        // Create a \"scrolled window\" to put your textview in so it will scroll\n"
"        this._scrolled = new Gtk.ScrolledWindow ({\n"
"            hscrollbar_policy: Gtk.PolicyType.AUTOMATIC,\n"
"            vscrollbar_policy: Gtk.PolicyType.AUTOMATIC,\n"
"            shadow_type: Gtk.ShadowType.ETCHED_IN,\n"
"            height_request: 180,\n"
"            width_request: 400, });\n"
"\n"
"        // Put the textview into the scrolled window\n"
"        this._scrolled.add_with_viewport (this._textView);\n"
"\n"
"        // Create a grid to organize them in\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Put the label and textview in the grid one on top of the other\n"
"        this._grid.attach (this._penguin, 0, 0, 1, 1);\n"
"        this._grid.attach (this._scrolled, 0, 1, 1, 1);\n"
"\n"
"        // Create a button to send your message to the penguin\n"
"        this._send = new Gtk.Button ({\n"
"            halign: Gtk.Align.END,\n"
"            margin_top: 20,\n"
"            label: \"Send\" });\n"
"        this._send.connect ('clicked', Lang.bind (this, this._chat));\n"
"\n"
"        // Create a grid that will have the other grid on top and the button on bottom\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Add the other grid and the button to the main grid\n"
"        this._mainGrid.attach (this._grid, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._send, 0, 1, 1, 1);\n"
"\n"
"        // Attach the main grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _chat: function () {\n"
"\n"
"        // Create a random number to determine what the penguin says\n"
"        this.number = Math.floor ((Math.random() * 3) + 1);\n"
"\n"
"        // Did you actually say anything?\n"
"        if (this.buffer.text) {\n"
"\n"
"            // Did you mention fish?\n"
"            if (this.buffer.text.match (/fish/gi)) {\n"
"\n"
"                // Have the penguin squaak about fish\n"
"                if (this.number == 1)\n"
"                    this._penguin.set_label (\"FISH!\");\n"
"\n"
"                else if (this.number == 2)\n"
"                    this._penguin.set_label (\"Fish fish fish fish. Fish!\");\n"
"\n"
"                else\n"
"                    this._penguin.set_label (\"Fish? Fish fish fish. Fish fish. FISH!\");\n"
"\n"
"            }\n"
"\n"
"            // I guess you didn't mention fish\n"
"            else {\n"
"\n"
"                // Have the penguin talk about penguinny stuff\n"
"                if (this.number == 1)\n"
"                    this._penguin.set_label (\"SQUAAK!\");\n"
"\n"
"                else if (this.number == 2)\n"
"                    this._penguin.set_label (\"Ork ork ork ork squaak. Squaak squaak! *waves flippers*\");\n"
"\n"
"                else\n"
"                    this._penguin.set_label (\"Ork ork ork ork ork?\");\n"
"\n"
"            }\n"
"\n"
"        }\n"
"\n"
"        // Clear the buffer\n"
"        this.buffer.text = \"\";\n"
"\n"
"        // Give focus back to the textview so you don't have to click it again\n"
"        this._textView.has_focus = true;\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new TextViewExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/textview.js.page:255(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ScrolledWindow."
"html\">Gtk.ScrolledWindow</link>"
msgstr ""

#: C/textview.js.page:256(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TextBuffer.html"
"\">Gtk.TextBuffer</link>"
msgstr ""

#: C/textview.js.page:257(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TextView.html"
"\">Gtk.TextView</link>"
msgstr ""

#: C/textview.py.page:7(info/title)
msgctxt "text"
msgid "TextView (Python)"
msgstr ""

#: C/textview.py.page:26(info/desc)
msgid "Widget that displays a GtkTextBuffer"
msgstr ""

#: C/textview.py.page:31(note/p)
msgid "This is an example of Gtk.TextView."
msgstr ""

#: C/textview.py.page:33(note/p)
msgid ""
"But we can also have a new line if we write a long sentence (the text will "
"wrap breaking lines between words)."
msgstr ""

#: C/textview.py.page:34(note/p)
msgid "If we have a loooooooooooooooooooooooooooooooooooong"
msgstr ""

#: C/textview.py.page:35(note/p)
msgid "(that was long)"
msgstr ""

#: C/textview.py.page:36(note/p)
msgid "word, an horizontal scrollbar will appear."
msgstr ""

#: C/textview.py.page:45(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"TextView Example\", application=app)\n"
"        self.set_default_size(300, 450)\n"
"\n"
"        # a scrollbar for the child widget (that is going to be the textview)\n"
"        scrolled_window = Gtk.ScrolledWindow()\n"
"        scrolled_window.set_border_width(5)\n"
"        # we scroll only if needed\n"
"        scrolled_window.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)\n"
"\n"
"        # a text buffer (stores text)\n"
"        buffer1 = Gtk.TextBuffer()\n"
"\n"
"        # a textview (displays the buffer)\n"
"        textview = Gtk.TextView(buffer=buffer1)\n"
"        # wrap the text, if needed, breaking lines in between words\n"
"        textview.set_wrap_mode(Gtk.WrapMode.WORD)\n"
"\n"
"        # textview is scrolled\n"
"        scrolled_window.add(textview)\n"
"\n"
"        self.add(scrolled_window)\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/textview.py.page:49(section/title)
msgid "Useful methods for a TextView widget"
msgstr ""

#: C/textview.py.page:50(section/p)
msgid ""
"A <code>Gtk.TextView</code> displays the text stored in a <code>Gtk."
"TextBuffer</code>. However, most text manipulation is accomplished with "
"iterators, represented by a <code>Gtk.TextIter</code> - a position between "
"two characters in the text buffer. Iterators are not valid indefinitely; "
"whenever the buffer is modified in a way that affects the contents of the "
"buffer, all outstanding iterators become invalid. Because of this, iterators "
"can’t be used to preserve positions across buffer modifications. To preserve "
"a position, we use a <code>Gtk.TextMark</code>, that can be set visible with "
"<code>visible(True)</code>. A text buffer contains two built-in marks; an "
"\"insert\" mark (the position of the cursor) and the \"selection_bound\" mark."
msgstr ""

#: C/textview.py.page:51(section/p)
msgid "Methods for a TextView widget:"
msgstr ""

#: C/textview.py.page:53(item/p)
msgid ""
"The TextView widget is by default editable. If you prefer otherwise, use "
"<code>set_editable(False)</code>. If the buffer has no editable text, it "
"might be a good idea to use <code>set_cursor_visible(False)</code> as well."
msgstr ""

#: C/textview.py.page:54(item/p)
msgid ""
"The justification of the text is set with <code>set_justification(Gtk."
"Justification.JUSTIFICATION)</code> where <code>JUSTIFICATION</code> is one "
"of <code>LEFT, RIGHT, CENTER, FILL</code>."
msgstr ""

#: C/textview.py.page:55(item/p)
msgid ""
"The line wrapping of the text is set with <code>set_wrap_mode(Gtk.WrapMode."
"WRAP)</code> where <code>WRAP</code> is one of <code>NONE</code> (the text "
"area is made wider), <code>CHAR</code> (break lines anywhere the cursor can "
"appear), <code>WORD</code> (break lines between words), <code>WORD_CHAR</"
"code> (break lines between words, but if that is not enough between "
"characters)."
msgstr ""

#: C/textview.py.page:57(section/p)
msgid "Methods for a TextBuffer widget:"
msgstr ""

#: C/textview.py.page:59(item/p)
msgid ""
"<code>get_insert()</code> returns the <code>Gtk.TextMark</code> that "
"represents the cursor, that is the insertion point."
msgstr ""

#: C/textview.py.page:60(item/p)
msgid ""
"<code>get_selection_bound()</code> returns the <code>Gtk.TextMark</code> that "
"represents the selection bound."
msgstr ""

#: C/textview.py.page:61(item/p)
msgid ""
"<code>set_text(\"some text\", length)</code> where <code>length</code> is a "
"positive integer or <code>-1</code>, sets the content of the buffer as the "
"first <code>length</code> characters of the <code>\"some text\"</code> text. "
"If <code>length</code> is omitted or <code>-1</code>, the text is inserted "
"completely. The content of the buffer, if there is any, is destroyed."
msgstr ""

#: C/textview.py.page:62(item/p)
msgid ""
"<code>insert(iter, \"some text\", length)</code> where <code>iter</code> is a "
"text iterator and <code>length</code> is a positive integer or <code>-1</"
"code>, inserts in the buffer at <code>iter</code> the first <code>length</"
"code> characters of the <code>\"some text\"</code> text. If <code>length</"
"code> is omitted or <code>-1</code>, the text is inserted completely."
msgstr ""

#: C/textview.py.page:63(item/p)
msgid ""
"<code>insert_at_cursor(\"some text\", length)</code> does the same as "
"<code>insert(iter, \"some text\", length)</code>, with the current cursor "
"taken as <code>iter</code>."
msgstr ""

#: C/textview.py.page:64(item/p)
msgid ""
"<code>create_mark(\"mark_name\", iter, left_gravity)</code> where <code>iter</"
"code> is a <code>Gtk.TextIter</code> and <code>left_gravity</code> is a "
"boolean, creates a <code>Gtk.TextMark</code> at the position of <code>iter</"
"code>. If <code>\"mark_name\"</code> is <code>None</code>, the mark is "
"anonymous; otherwise, the mark can be retrieved by name using <code>get_mark()"
"</code>. If a mark has left gravity, and text is inserted at the mark’s "
"current location, the mark will be moved to the left of the newly-inserted "
"text. If <code>left_gravity</code> is omitted, it defaults to <code>False</"
"code>."
msgstr ""

#: C/textview.py.page:66(item/p)
msgid ""
"To specify that some text in the buffer should have specific formatting, you "
"must define a tag to hold that formatting information, and then apply that "
"tag to the region of text using <code>create_tag(\"tag name\", property)</"
"code> and <code>apply_tag(tag, start_iter, end_iter)</code> as in, for "
"instance:"
msgstr ""

#: C/textview.py.page:67(item/code)
#, no-wrap
msgid ""
"\n"
"tag = textbuffer.create_tag(\"orange_bg\", background=\"orange\")\n"
"textbuffer.apply_tag(tag, start_iter, end_iter)"
msgstr ""

#: C/textview.py.page:70(item/p)
msgid "The following are some of the common styles applied to text:"
msgstr ""

#: C/textview.py.page:72(item/p)
msgid "Background colour (\"background\" property)"
msgstr ""

#: C/textview.py.page:73(item/p)
msgid "Foreground colour (\"foreground\" property)"
msgstr ""

#: C/textview.py.page:74(item/p)
msgid "Underline (\"underline\" property)"
msgstr ""

#: C/textview.py.page:75(item/p)
msgid "Bold (\"weight\" property)"
msgstr ""

#: C/textview.py.page:76(item/p)
msgid "Italics (\"style\" property)"
msgstr ""

#: C/textview.py.page:77(item/p)
msgid "Strikethrough (\"strikethrough\" property)"
msgstr ""

#: C/textview.py.page:78(item/p)
msgid "Justification (\"justification\" property)"
msgstr ""

#: C/textview.py.page:79(item/p)
msgid "Size (\"size\" and \"size-points\" properties)"
msgstr ""

#: C/textview.py.page:80(item/p)
msgid "Text wrapping (\"wrap-mode\" property)"
msgstr ""

#: C/textview.py.page:82(item/p)
msgid ""
"You can also delete particular tags later using <code>remove_tag()</code> or "
"delete all tags in a given region by calling <code>remove_all_tags()</code>."
msgstr ""

#: C/textview.py.page:84(section/p)
msgid "Methods for a TextIter widget"
msgstr ""

#: C/textview.py.page:86(item/p)
msgid ""
"<code>forward_search(needle, flags, limit)</code> searches forward for "
"<code>needle</code>. The search will not continue past the <code>Gtk."
"TextIter</code> limit. The <code>flags</code> can be set to one of the "
"following, or any combination of it by concatenating them with the bitwise-OR "
"operator <code>|</code>: <code>0</code> (the match must be exact); <code>Gtk."
"TextSearchFlags.VISIBLE_ONLY</code> (the match may have invisible text "
"interspersed in needle); <code>Gtk.TextSearchFlags.TEXT_ONLY</code> (the "
"match may have pixbufs or child widgets mixed inside the matched range); "
"<code>Gtk.TextSearchFlags.CASE_INSENSITIVE</code> (the text will be matched "
"regardless of what case it is in). The method returns a tuple containing a "
"<code>Gtk.TextIter</code> pointing to the start and to the first character "
"after the match; if no match is found, <code>None</code> is returned."
msgstr ""

#: C/textview.py.page:87(item/p)
msgid ""
"<code>backward_search(needle, flags, limit)</code> does the same as "
"<code>forward_search()</code>, but moving backwards."
msgstr ""

#: C/textview.py.page:95(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTextView.html"
"\">GtkTextView</link>"
msgstr ""

#: C/textview.py.page:96(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTextBuffer.html"
"\">GtkTextBuffer</link>"
msgstr ""

#: C/textview.py.page:97(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTextTag.html"
"\">GtkTextTag</link>"
msgstr ""

#: C/textview.vala.page:7(info/title)
msgctxt "text"
msgid "TextView (Vala)"
msgstr ""

#: C/textview.vala.page:24(note/p)
msgid ""
"If we have a loooooooooooooooooooooooooooooooooooong word, a horizontal "
"scrollbar will appear."
msgstr ""

#: C/textview.vala.page:29(page/code)
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\t/* Create the window of this applicationt. */\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* This is the window. */\n"
"class MyWindow: Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"TextView Example\");\n"
"\t\tthis.set_default_size (220, 200);\n"
"\n"
"\t\tvar buffer = new Gtk.TextBuffer (null); //stores text to be displayed\n"
"\t\tvar textview = new Gtk.TextView.with_buffer (buffer); //displays TextBuffer\n"
"\t\ttextview.set_wrap_mode (Gtk.WrapMode.WORD); //sets line wrapping\n"
"\n"
"\t\tvar scrolled_window = new Gtk.ScrolledWindow (null, null);\n"
"\t\tscrolled_window.set_policy (Gtk.PolicyType.AUTOMATIC,\n"
"\t\t                            Gtk.PolicyType.AUTOMATIC);\n"
"\n"
"\t\tscrolled_window.add (textview);\n"
"\t\tscrolled_window.set_border_width (5);\n"
"\n"
"\t\tthis.add (scrolled_window);\n"
"\t}\n"
"}\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/textview.vala.page:34(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.TextBuffer.html\">Gtk."
"TextBuffer</link>"
msgstr ""

#: C/textview.vala.page:35(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.TextView.html\">Gtk."
"TextView</link>"
msgstr ""

#: C/textview.vala.page:37(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.WrapMode.html\">Gtk."
"WrapMode</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/togglebutton.c.page:26(media) C/togglebutton.js.page:21(media)
#: C/togglebutton.py.page:22(media) C/togglebutton.vala.page:24(media)
msgctxt "_"
msgid ""
"external ref='media/togglebutton.png' md5='791e062613d4f9bd5936390b0aa18448'"
msgstr ""
"external ref='media/togglebutton.png' md5='791e062613d4f9bd5936390b0aa18448'"

#: C/togglebutton.c.page:7(info/title)
msgctxt "text"
msgid "ToggleButton (C)"
msgstr ""

#: C/togglebutton.c.page:21(info/desc) C/togglebutton.py.page:18(info/desc)
#: C/togglebutton.vala.page:20(info/desc)
msgid "A button which retains state"
msgstr ""

#: C/togglebutton.c.page:24(page/title) C/togglebutton.js.page:20(page/title)
#: C/togglebutton.py.page:21(page/title)
#: C/togglebutton.vala.page:23(page/title)
msgid "ToggleButton"
msgstr ""

#: C/togglebutton.c.page:27(page/p) C/togglebutton.py.page:23(page/p)
#: C/togglebutton.vala.page:25(page/p)
msgid "When this ToggleButton is in an active state, the spinner spins."
msgstr ""

#: C/togglebutton.c.page:29(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*This is the callback function. It is a handler function \n"
"which reacts to the signal. In this case, it will cause the \n"
"spinner to start and stop according to how many times the user \n"
"presses the button.*/\n"
"static void\n"
"button_toggled_cb (GtkWidget *button,\n"
"                   gpointer   user_data)\n"
"{\n"
"  GtkWidget *spinner = user_data;\n"
"\n"
"  if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON(button)))\n"
"          gtk_spinner_start (GTK_SPINNER (spinner));\n"
"  else {\n"
"          gtk_spinner_stop (GTK_SPINNER (spinner));\n"
"  }\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *button;\n"
"  GtkWidget *grid;\n"
"  GtkWidget *spinner;\n"
"\n"
"  /*Create a window with a title, border width and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"ToggleButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 300);\n"
"  gtk_container_set_border_width(GTK_CONTAINER(window), 30);\n"
"\n"
"  /*Create a togglebutton with a label*/\n"
"  button = gtk_toggle_button_new_with_label (\"Start/Stop\");\n"
"\n"
"  /*Create a spinner, with extra horizontal and vertical space*/\n"
"  spinner = gtk_spinner_new ();\n"
"  gtk_widget_set_hexpand (spinner, TRUE);\n"
"  gtk_widget_set_vexpand (spinner, TRUE);\n"
"\n"
"  /*Create a grid and set the row spacing, attach the togglebutton \n"
"  and spinner onto the grid and position them accordingly*/\n"
"  grid = gtk_grid_new();\n"
"  gtk_grid_set_row_homogeneous (GTK_GRID (grid), FALSE);\n"
"  gtk_grid_set_row_spacing (GTK_GRID (grid), 15);\n"
"  gtk_grid_attach (GTK_GRID (grid), spinner, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), button, 0, 1, 1, 1);\n"
"  \n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  /*Connecting the toggled signal to the callback*/\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (button), \"toggled\", \n"
"                    G_CALLBACK (button_toggled_cb), spinner);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""

#: C/togglebutton.c.page:38(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkToggleButton.html"
"\">GtkTogglebutton</link>"
msgstr ""

#: C/togglebutton.js.page:7(info/title)
#, fuzzy
#| msgid "Classes in JavaScript"
msgctxt "text"
msgid "ToggleButton (JavaScript)"
msgstr "Klassen in JavaScript"

#: C/togglebutton.js.page:17(info/desc)
msgid "Stays pressed until you click it again"
msgstr ""

#: C/togglebutton.js.page:22(page/p)
msgid ""
"A ToggleButton is like a normal <link xref=\"button.js\">Button</link>, "
"except that it stays pressed in when you click it. You can use it like an on/"
"off switch, to control things like the <link xref=\"spinner.js\">Spinner</"
"link> in this example."
msgstr ""

#: C/togglebutton.js.page:23(page/p)
msgid ""
"A ToggleButton's get_active method returns true if it's pressed in, and false "
"if it's not. Its set_active method is used if you want to change its state "
"without needing to click on it. When it changes state from pressed in to "
"popped out and vice-versa, it sends out the \"toggled\" signal, which you can "
"connect to a function to do something."
msgstr ""

#: C/togglebutton.js.page:40(section/code)
#, no-wrap
msgid ""
"\n"
"const ToggleButtonExample = new Lang.Class({\n"
"    Name: 'ToggleButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jstogglebutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""

#: C/togglebutton.js.page:67(section/code)
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 300,\n"
"            default_width: 300,\n"
"            border_width: 30,\n"
"            title: \"ToggleButton Example\"});\n"
msgstr ""

#: C/togglebutton.js.page:84(section/title)
msgid "Creating the ToggleButton and other widgets"
msgstr ""

#: C/togglebutton.js.page:85(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the spinner that the button stops and starts\n"
"        this._spinner = new Gtk.Spinner ({hexpand: true, vexpand: true});\n"
msgstr ""

#: C/togglebutton.js.page:90(section/p)
msgid ""
"We want this <link xref=\"spinner.js\">Spinner</link> to expand vertically "
"and horizontally, to take up as much space as possible inside the window."
msgstr ""

#: C/togglebutton.js.page:92(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the togglebutton that starts and stops the spinner\n"
"        this._toggleButton = new Gtk.ToggleButton ({label: \"Start/Stop\"});\n"
"        this._toggleButton.connect ('toggled', Lang.bind (this, this._onToggle));\n"
msgstr ""

#: C/togglebutton.js.page:98(section/p)
msgid ""
"Creating a ToggleButton is a lot like creating a normal <link xref=\"button.js"
"\">Button</link>. The biggest difference is that you're handling a \"toggled"
"\" signal instead of a \"clicked\" signal. This code binds the _onToggle "
"function to that signal, so that it's called whenever our ToggleButton is "
"toggled."
msgstr ""

#: C/togglebutton.js.page:100(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a grid and put everything in it\n"
"        this._grid = new Gtk.Grid ({\n"
"            row_homogeneous: false,\n"
"            row_spacing: 15});\n"
"        this._grid.attach (this._spinner, 0, 0, 1, 1);\n"
"        this._grid.attach (this._toggleButton, 0, 1, 1, 1);\n"
msgstr ""

#: C/togglebutton.js.page:108(section/p)
msgid ""
"Here we create a simple <link xref=\"grid.js\">Grid</link> to organize "
"everything in, then attach the Spinner and ToggleButton to it."
msgstr ""

#: C/togglebutton.js.page:110(section/code)
#, no-wrap
msgid ""
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""

#: C/togglebutton.js.page:118(section/p)
msgid ""
"Now we add the Grid to the Window, and tell the Window to show itself and its "
"child widgets when the application is started."
msgstr ""

#: C/togglebutton.js.page:122(section/title)
msgid "Making something happen when the ToggleButton is toggled"
msgstr ""

#: C/togglebutton.js.page:124(section/code)
#, no-wrap
msgid ""
"\n"
"    _onToggle: function() {\n"
"\n"
"        // Start or stop the spinner\n"
"        if (this._toggleButton.get_active ())\n"
"            this._spinner.start ();\n"
"        else this._spinner.stop ();\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""

#: C/togglebutton.js.page:136(section/p)
msgid ""
"Whenever someone toggles the button, this function checks what its state is "
"afterwards using get_active and starts or stops the spinner accordingly. We "
"want it to spin only while the button is pressed in, so if get_active returns "
"true we start the spinner. Otherwise, we tell it to stop."
msgstr ""

#: C/togglebutton.js.page:138(section/code)
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new ToggleButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/togglebutton.js.page:148(section/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ToggleButtonExample = new Lang.Class({\n"
"    Name: 'ToggleButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jstogglebutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 300,\n"
"            default_width: 300,\n"
"            border_width: 30,\n"
"            title: \"ToggleButton Example\"});\n"
"\n"
"        // Create the spinner that the button stops and starts\n"
"        this._spinner = new Gtk.Spinner ({hexpand: true, vexpand: true});\n"
"\n"
"        // Create the togglebutton that starts and stops the spinner\n"
"        this._toggleButton = new Gtk.ToggleButton ({label: \"Start/Stop\"});\n"
"        this._toggleButton.connect ('toggled', Lang.bind (this, this._onToggle));\n"
"\n"
"        // Create a grid and put everything in it\n"
"        this._grid = new Gtk.Grid ({\n"
"            row_homogeneous: false,\n"
"            row_spacing: 15});\n"
"        this._grid.attach (this._spinner, 0, 0, 1, 1);\n"
"        this._grid.attach (this._toggleButton, 0, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onToggle: function() {\n"
"\n"
"        // Start or stop the spinner\n"
"        if (this._toggleButton.get_active ())\n"
"            this._spinner.start ();\n"
"        else this._spinner.stop ();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ToggleButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/togglebutton.js.page:158(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ToggleButton."
"html\">Gtk.ToggleButton</link>"
msgstr ""

#: C/togglebutton.py.page:7(info/title)
msgctxt "text"
msgid "ToggleButton (Python)"
msgstr ""

#: C/togglebutton.py.page:30(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"ToggleButton Example\", application=app)\n"
"        self.set_default_size(300, 300)\n"
"        self.set_border_width(30)\n"
"\n"
"        # a spinner animation\n"
"        self.spinner = Gtk.Spinner()\n"
"        # with extra horizontal space\n"
"        self.spinner.set_hexpand(True)\n"
"        # with extra vertical space\n"
"        self.spinner.set_vexpand(True)\n"
"\n"
"        # a togglebutton\n"
"        button = Gtk.ToggleButton.new_with_label(\"Start/Stop\")\n"
"        # connect the signal \"toggled\" emitted by the togglebutton\n"
"        # when its state is changed to the callback function toggled_cb\n"
"        button.connect(\"toggled\", self.toggled_cb)\n"
"\n"
"        # a grid to allocate the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.set_row_homogeneous(False);\n"
"        grid.set_row_spacing(15);\n"
"        grid.attach(self.spinner, 0, 0, 1, 1);\n"
"        grid.attach(button, 0, 1, 1, 1);\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # callback function for the signal \"toggled\"\n"
"    def toggled_cb(self, button):\n"
"        # if the togglebutton is active, start the spinner\n"
"        if button.get_active():\n"
"            self.spinner.start()\n"
"        # else, stop it\n"
"        else:\n"
"            self.spinner.stop()\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/togglebutton.py.page:35(section/title)
msgid "Useful methods for a ToggleButton widget"
msgstr ""

#: C/togglebutton.py.page:36(section/p)
msgid ""
"In line 22 the signal <code>\"toggled\"</code> is connected to the callback "
"function <code>toggled_cb()</code> using <code><var>widget</var>.connect"
"(<var>signal</var>, <var>callback function</var>)</code>. See <link xref="
"\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""

#: C/togglebutton.py.page:44(item/p) C/toolbar.py.page:59(item/p)
#: C/toolbar_builder.py.page:197(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkWidget.html"
"\">GtkWidget</link>"
msgstr ""

#: C/togglebutton.vala.page:7(info/title)
msgctxt "text"
msgid "ToggleButton (Vala)"
msgstr ""

#: C/togglebutton.vala.page:27(page/code)
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Spinner spinner;\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"ToggleButton Example\");\n"
"\n"
"\t\tthis.set_default_size (300, 300);\n"
"\t\tthis.border_width = 30;\n"
"\n"
"\t\t/*Spinner*/\n"
"\t\tspinner = new Gtk.Spinner ();\n"
"\t\tspinner.set_hexpand (true);\n"
"\t\tspinner.set_vexpand (true);\n"
"\n"
"\t\t/*ToggleButton*/\n"
"\t\tvar togglebutton = new Gtk.ToggleButton.with_label (\"Start/Stop\");\n"
"\t\ttogglebutton.toggled.connect (toggled_cb);\n"
"\n"
"\t\t/*Grid*/\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.set_row_homogeneous (false);\n"
"\t\tgrid.set_row_spacing (15);\n"
"\t\tgrid.attach (spinner, 0, 0, 1, 1);\n"
"\t\tgrid.attach (togglebutton, 0, 1, 1, 1);\n"
"\n"
"\t\tthis.add (grid);\n"
"\t}\n"
"\n"
"\tvoid toggled_cb (Gtk.ToggleButton button) {\n"
"\t\tif (button.get_active()) {\n"
"\t\t\tspinner.start ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tspinner.stop ();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t//Show all the things\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.spinner\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/togglebutton.vala.page:32(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ToggleButton.html\">Gtk."
"ToggleButton</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar.c.page:24(media) C/toolbar.js.page:21(media)
#: C/toolbar.py.page:24(media) C/toolbar.vala.page:23(media)
#: C/toolbar_builder.py.page:37(media) C/toolbar_builder.vala.page:24(media)
msgctxt "_"
msgid "external ref='media/toolbar.png' md5='f0350855eedf6343952b72d6d906f738'"
msgstr "external ref='media/toolbar.png' md5='f0350855eedf6343952b72d6d906f738'"

#: C/toolbar.c.page:7(info/title)
msgctxt "text"
msgid "Toolbar (C)"
msgstr "Werkzeugleiste (C)"

#: C/toolbar.c.page:19(info/desc) C/toolbar.vala.page:18(info/desc)
#: C/toolbar_builder.vala.page:19(info/desc)
msgid "A bar of buttons"
msgstr "Eine Leiste mit Knöpfen"

#: C/toolbar.c.page:22(page/title) C/toolbar.js.page:20(page/title)
#: C/toolbar.py.page:22(page/title) C/toolbar.vala.page:21(page/title)
msgid "Toolbar"
msgstr "Werkzeugleiste"

#: C/toolbar.c.page:25(page/p) C/toolbar.js.page:22(page/p)
#: C/toolbar.vala.page:24(page/p)
msgid ""
"Toolbar can contain either text or stock icons. In this sample we use stock "
"icons. This example has fullscreen functionality."
msgstr ""

#: C/toolbar.c.page:26(page/p)
msgid ""
"This example uses SimpleActions (window and app). App actions can easily be "
"added to the app menu."
msgstr ""

#: C/toolbar.c.page:28(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"/* Declare these two Toolbuttons, as they will be used in both the fullscreen\n"
" * action callback as well as the activate function.\n"
" */\n"
"GtkToolItem *fullscreen_button;\n"
"GtkToolItem *leavefullscreen_button;\n"
"\n"
"\n"
"\n"
"/* Callback function for the undo action */\n"
"static void\n"
"undo_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"Undo\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the fullscreen action */\n"
"static void\n"
"fullscreen_callback (GSimpleAction *simple,\n"
"                     GVariant      *parameter,\n"
"                     gpointer       user_data)\n"
"{\n"
"  GdkWindow *window = gtk_widget_get_window (GTK_WIDGET (user_data));\n"
"\n"
"  GdkWindowState current_state = gdk_window_get_state (window);\n"
"\n"
"  /* If the window is currently in fullscreen mode */\n"
"  if ( (current_state &amp; GDK_WINDOW_STATE_FULLSCREEN) != 0)\n"
"    {\n"
"      /* Minimize the window and change to the fullscreen button */\n"
"      gdk_window_unfullscreen (window);\n"
"      gtk_widget_hide (GTK_WIDGET(leavefullscreen_button));\n"
"      gtk_widget_show (GTK_WIDGET(fullscreen_button));\n"
"    }\n"
"  else\n"
"    {\n"
"      /* Maximize the window, and change to the unfullscreen button */\n"
"      gdk_window_fullscreen (window);\n"
"      gtk_widget_hide (GTK_WIDGET (fullscreen_button));\n"
"      gtk_widget_show (GTK_WIDGET (leavefullscreen_button));\n"
"    }\n"
"}\n"
"\n"
"\n"
"\n"
"/* Our \"main\" function */\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Initialize variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *grid;\n"
"  GtkWidget *toolbar;\n"
"\n"
"  GtkToolItem *new_button;\n"
"  GtkToolItem *open_button;\n"
"  GtkToolItem *undo_button;\n"
"\n"
"  GtkStyleContext *style_context;\n"
"\n"
"  GSimpleAction *undo_action;\n"
"  GSimpleAction *fullscreen_action;\n"
"  GSimpleAction *leavefullscreen_action;\n"
"\n"
"  /* Create a window with a title and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Toolbar Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 400, 200);\n"
"\n"
"  /* Here we begin to create the toolbar */\n"
"  toolbar = gtk_toolbar_new ();\n"
"  /* Set the toolbar to be the primary toolbar of the application */\n"
"  style_context = gtk_widget_get_style_context (toolbar);\n"
"  gtk_style_context_add_class (style_context, GTK_STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"  /* Create a button for the \"new\" action, with a stock image */\n"
"  new_button = gtk_tool_button_new_from_stock (GTK_STOCK_NEW);\n"
"  /* Show the \"new\" button's label */\n"
"  gtk_tool_item_set_is_important (new_button, TRUE);\n"
"  /* Insert the button in the desired position within the toolbar */\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), new_button, 0);\n"
"  /* Show the button */\n"
"  gtk_widget_show (GTK_WIDGET (new_button));\n"
"  /* Set the action name for the \"new\" action. We use \"app.new\" to\n"
"   * indicate that the action controls the application.\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (new_button), \"app.new\");\n"
"\n"
"  /* Repeat the same steps for the \"open\" action */\n"
"  open_button = gtk_tool_button_new_from_stock (GTK_STOCK_OPEN);\n"
"  gtk_tool_item_set_is_important (open_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), open_button, 1);\n"
"  gtk_widget_show (GTK_WIDGET (open_button));\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (open_button), \"app.open\");\n"
"\n"
"  /* Repeat the same steps for the \"undo\" action */\n"
"  undo_button = gtk_tool_button_new_from_stock (GTK_STOCK_UNDO);\n"
"  gtk_tool_item_set_is_important (undo_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), undo_button, 2);\n"
"  gtk_widget_show (GTK_WIDGET (undo_button));\n"
"  /* In this case, we use \"win.undo\" to indicate that\n"
"   * the action controls only the window\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (undo_button), \"win.undo\");\n"
"\n"
"  /* Repeat the same steps for the \"fullscreen\" action */\n"
"  fullscreen_button = gtk_tool_button_new_from_stock (GTK_STOCK_FULLSCREEN);\n"
"  gtk_tool_item_set_is_important (fullscreen_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), fullscreen_button, 3);\n"
"  gtk_widget_show (GTK_WIDGET (fullscreen_button));\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (fullscreen_button),\n"
"                                  \"win.fullscreen\");\n"
"\n"
"  /*Repeat the same steps for the \"leavefullscreen\" action */\n"
"  leavefullscreen_button = gtk_tool_button_new_from_stock (GTK_STOCK_LEAVE_FULLSCREEN);\n"
"  gtk_tool_item_set_is_important (leavefullscreen_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), leavefullscreen_button, 3);\n"
"  /* The only difference here is that we don't show the leavefullscreen button,\n"
"   * as it will later replace the fullscreen button.\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (leavefullscreen_button),\n"
"                                  \"win.leavefullscreen\");\n"
"\n"
"  /* Once we've created the bare-bones of the toolbar, we make\n"
"   * sure it has enough horizontal space.\n"
"   */\n"
"  gtk_widget_set_hexpand (toolbar, TRUE);\n"
"  gtk_widget_show (toolbar);\n"
"\n"
"  /* Attach the toolbar to the grid and add it to the overall window */\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_attach (GTK_GRID (grid), toolbar, 0, 0, 1, 1);\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"  gtk_widget_show (GTK_WIDGET (grid));\n"
"\n"
"  /* Use the action names to create the actions that control the window, and\n"
"   * connect them to the appropriate callbackfunctions.\n"
"   */\n"
"  undo_action = g_simple_action_new (\"undo\", NULL);\n"
"  g_signal_connect (undo_action, \"activate\", G_CALLBACK (undo_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (undo_action));\n"
"\n"
"  fullscreen_action = g_simple_action_new (\"fullscreen\", NULL);\n"
"  g_signal_connect (fullscreen_action, \"activate\", G_CALLBACK (fullscreen_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (fullscreen_action));\n"
"\n"
"  leavefullscreen_action = g_simple_action_new (\"leavefullscreen\", NULL);\n"
"  g_signal_connect (leavefullscreen_action, \"activate\", G_CALLBACK (fullscreen_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (leavefullscreen_action));\n"
"\n"
"  gtk_widget_show (window);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the new action */\n"
"static void\n"
"new_callback (GSimpleAction *simple,\n"
"              GVariant      *parameter,\n"
"              gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"New\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the open action */\n"
"static void\n"
"open_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"Open\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* In this function, we create the actions in which control the window, and\n"
" * connect their signals to the appropriate callback function.\n"
" */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GSimpleAction *new_action;\n"
"  GSimpleAction *open_action;\n"
"\n"
"  new_action = g_simple_action_new (\"new\", NULL);\n"
"  g_signal_connect (new_action, \"activate\", G_CALLBACK (new_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (new_action));\n"
"\n"
"  open_action = g_simple_action_new (\"open\", NULL);\n"
"  g_signal_connect (open_action, \"activate\", G_CALLBACK (open_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (open_action));\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the application */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""

#: C/toolbar.c.page:34(item/p) C/tooltip.py.page:58(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkToolbar.html"
"\">GtkToolbar</link>"
msgstr ""

#: C/toolbar.c.page:35(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkToolButton.html"
"\">GtkToolbutton</link>"
msgstr ""

#: C/toolbar.js.page:7(info/title)
msgctxt "text"
msgid "Toolbar (JavaScript)"
msgstr "Werkzeugleiste (JavaScript)"

#: C/toolbar.js.page:17(info/desc)
msgid "A bar of tools"
msgstr ""

#: C/toolbar.js.page:23(page/p) C/toolbar.vala.page:25(page/p)
msgid ""
"This example uses SimpleActions (window and app). App actions can easily be "
"added the the app menu."
msgstr ""

#: C/toolbar.js.page:25(page/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gdk = imports.gi.Gdk;\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.myapp',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"       //connect to 'activate' and 'startup' signals to the callback functions\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI (in this case it's just the ApplicationWindow\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"Toolbar Example\",\n"
"                                                   default_height: 200,\n"
"                                                   default_width: 400 });\n"
"\n"
"        this._grid = new Gtk.Grid();\n"
"        this._window.add(this._grid);\n"
"        this._grid.show();\n"
"\n"
"        this._createToolbar();\n"
"        this._toolbar.set_hexpand(true);\n"
"        this._grid.attach(this._toolbar, 0, 0, 1, 1);\n"
"\n"
"        //show the  toolbar and window\n"
"        this._toolbar.show();\n"
"        this._window.show();\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    //callback function for 'startup' signal\n"
"    _onStartup: function() {\n"
"        this._initMenus();\n"
"        this._buildUI();\n"
"    },\n"
"\n"
"    //create the toolbar, its toolbuttons and their actions\n"
"    _createToolbar: function() {\n"
"\n"
"        this._toolbar = new Gtk.Toolbar();\n"
"        this._toolbar.get_style_context().add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"        //create the \"New\" ToolButton and its SimpleAction.\n"
"        //Using actions allows you to add them to the app menu\n"
"        //without duplicating code.\n"
"        let newAction = new Gio.SimpleAction({ name: 'new'});\n"
"        newAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._newCB();\n"
"            }));\n"
"        this.application.add_action(newAction);//note: this action is added to the app\n"
"\n"
"        this._newButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_NEW);\n"
"        this._newButton.is_important = true;\n"
"        this._toolbar.add(this._newButton);\n"
"        this._newButton.show();\n"
"        this._newButton.action_name = \"app.new\";\n"
"\n"
"        //create the \"Open\" ToolButton and its SimpleAction\n"
"        let openAction = new Gio.SimpleAction({ name: 'open'});\n"
"        openAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._openCB();\n"
"            }));\n"
"        this.application.add_action(openAction);\n"
"\n"
"        this._openButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_OPEN);\n"
"        this._openButton.is_important = true;\n"
"        this._toolbar.add(this._openButton);\n"
"        this._openButton.show();\n"
"        this._openButton.action_name = \"app.open\";\n"
"\n"
"        //create the \"Undo\" ToolButton and its SimpleAction\n"
"        let undoAction = new Gio.SimpleAction({ name: 'undo'});\n"
"        undoAction.connect('activate', Lang.bind (this,\n"
"            function() {\n"
"                this._undoCB();\n"
"            }));\n"
"        this._window.add_action(undoAction);//note this action is added to the window\n"
"\n"
"        this._undoButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_UNDO);\n"
"        this._undoButton.is_important = true;\n"
"        this._toolbar.add(this._undoButton);\n"
"        this._undoButton.show();\n"
"        this._undoButton.action_name = \"win.undo\";\n"
"\n"
"        //create the \"Fullscreen\" ToolButton and its SimpleAction\n"
"        let fullscreenToggleAction = new Gio.SimpleAction ({ name: 'fullscreenToggle' });\n"
"        fullscreenToggleAction.connect ('activate', Lang.bind (this,\n"
"            function () {\n"
"                this._fullscreenToggleCB();\n"
"            }));\n"
"        this._window.add_action(fullscreenToggleAction);\n"
"\n"
"        this._fullscreenButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_FULLSCREEN);\n"
"        this._fullscreenButton.is_important = true;\n"
"        this._toolbar.add(this._fullscreenButton);\n"
"        this._fullscreenButton.show();\n"
"        this._fullscreenButton.action_name = \"win.fullscreenToggle\";\n"
"\n"
"        //create the \"leaveFullscreen\" ToolButton, and set the action name to \"win.fullscreenToggle\"\n"
"        this._leaveFullscreenButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_LEAVE_FULLSCREEN);\n"
"        this._leaveFullscreenButton.is_important = true;\n"
"        this._toolbar.add(this._leaveFullscreenButton);\n"
"        this._leaveFullscreenButton.action_name = \"win.fullscreenToggle\";\n"
"    },\n"
"\n"
"    _initMenus: function () {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"New\", 'app.new');\n"
"        menu.append(\"Open\", 'app.open');\n"
"        menu.append(\"Quit\", 'app.quit');\n"
"\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        let quitAction = new Gio.SimpleAction({name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"    _newCB: function() {\n"
"        print(\"You clicked 'New'.\");\n"
"    },\n"
"\n"
"    _openCB: function() {\n"
"        print(\"You clicked 'Open'.\");\n"
"    },\n"
"\n"
"    _undoCB:function () {\n"
"        print (\"You clicked 'Undo'.\");\n"
"    },\n"
"\n"
"    _fullscreenToggleCB: function() {\n"
"        if ((this._window.get_window().get_state() &amp; Gdk.WindowState.FULLSCREEN) != 0 ) {\n"
"              this._window.unfullscreen();\n"
"              this._leaveFullscreenButton.hide();\n"
"              this._fullscreenButton.show();\n"
"        }\n"
"        else {\n"
"             this._window.fullscreen();\n"
"             this._fullscreenButton.hide();\n"
"             this._leaveFullscreenButton.show();\n"
"        }\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application();\n"
"app.application.run(ARGV);\n"
msgstr ""

#: C/toolbar.js.page:30(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Window.html"
"\">Gtk.Window</link>"
msgstr ""

#: C/toolbar.js.page:31(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Toolbar.html"
"\">Gtk.Toolbar</link>"
msgstr ""

#: C/toolbar.js.page:32(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ToolButton.html"
"\">Gtk.ToolButton</link>"
msgstr ""

#: C/toolbar.js.page:33(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.html\">Gtk "
"Stock items</link>"
msgstr ""

#: C/toolbar.js.page:34(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gdk.WindowState."
"html\">Gdk.WindowState</link>"
msgstr ""

#: C/toolbar.py.page:7(info/title)
msgctxt "text"
msgid "Toolbar (Python)"
msgstr "Werkzeugleiste (Python)"

#: C/toolbar.py.page:19(info/desc) C/toolbar_builder.py.page:32(info/desc)
msgid "A bar of buttons and other widgets"
msgstr ""

#: C/toolbar.py.page:25(page/p)
msgid "An example of toolbar with buttons (from stock icons)."
msgstr ""

#: C/toolbar.py.page:32(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Toolbar Example\", application=app)\n"
"        self.set_default_size(400, 200)\n"
"\n"
"        # a grid to attach the toolbar\n"
"        grid = Gtk.Grid()\n"
"\n"
"        # a toolbar created in the method create_toolbar (see below)\n"
"        toolbar = self.create_toolbar()\n"
"        # with extra horizontal space\n"
"        toolbar.set_hexpand(True)\n"
"        # show the toolbar\n"
"        toolbar.show()\n"
"\n"
"        # attach the toolbar to the grid\n"
"        grid.attach(toolbar, 0, 0, 1, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"        # create the actions that control the window and connect their signal to a\n"
"        # callback method (see below):\n"
"\n"
"        # undo\n"
"        undo_action = Gio.SimpleAction.new(\"undo\", None)\n"
"        undo_action.connect(\"activate\", self.undo_callback)\n"
"        self.add_action(undo_action)\n"
"\n"
"        # fullscreen\n"
"        fullscreen_action = Gio.SimpleAction.new(\"fullscreen\", None)\n"
"        fullscreen_action.connect(\"activate\", self.fullscreen_callback)\n"
"        self.add_action(fullscreen_action)\n"
"\n"
"    # a method to create the toolbar\n"
"    def create_toolbar(self):\n"
"        # a toolbar\n"
"        toolbar = Gtk.Toolbar()\n"
"\n"
"        # which is the primary toolbar of the application\n"
"        toolbar.get_style_context().add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"        # create a button for the \"new\" action, with a stock image\n"
"        new_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_NEW)\n"
"        # label is shown\n"
"        new_button.set_is_important(True)\n"
"        # insert the button at position in the toolbar\n"
"        toolbar.insert(new_button, 0)\n"
"        # show the button\n"
"        new_button.show()\n"
"        # set the name of the action associated with the button.\n"
"        # The action controls the application (app)\n"
"        new_button.set_action_name(\"app.new\")\n"
"\n"
"        # button for the \"open\" action\n"
"        open_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_OPEN)\n"
"        open_button.set_is_important(True)\n"
"        toolbar.insert(open_button, 1)\n"
"        open_button.show()\n"
"        open_button.set_action_name(\"app.open\")\n"
"\n"
"        # button for the \"undo\" action\n"
"        undo_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_UNDO)\n"
"        undo_button.set_is_important(True)\n"
"        toolbar.insert(undo_button, 2)\n"
"        undo_button.show()\n"
"        undo_button.set_action_name(\"win.undo\")\n"
"\n"
"        # button for the \"fullscreen/leave fullscreen\" action\n"
"        self.fullscreen_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_FULLSCREEN)\n"
"        self.fullscreen_button.set_is_important(True)\n"
"        toolbar.insert(self.fullscreen_button, 3)\n"
"        self.fullscreen_button.set_action_name(\"win.fullscreen\")\n"
"\n"
"        # return the complete toolbar\n"
"        return toolbar\n"
"\n"
"    # callback method for undo\n"
"    def undo_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Undo\\\".\"\n"
"\n"
"    # callback method for fullscreen / leave fullscreen\n"
"    def fullscreen_callback(self, action, parameter):\n"
"        # check if the state is the same as Gdk.WindowState.FULLSCREEN, which is a bit flag\n"
"        is_fullscreen = self.get_window().get_state() &amp; Gdk.WindowState.FULLSCREEN != 0\n"
"        if not is_fullscreen:\n"
"            self.fullscreen_button.set_stock_id(Gtk.STOCK_LEAVE_FULLSCREEN)\n"
"            self.fullscreen()\n"
"        else:\n"
"            self.fullscreen_button.set_stock_id(Gtk.STOCK_FULLSCREEN)\n"
"            self.unfullscreen()\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # create the actions that control the window and connect their signal to a\n"
"        # callback method (see below):\n"
"\n"
"        # new\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        app.add_action(new_action)\n"
"\n"
"        # open\n"
"        open_action = Gio.SimpleAction.new(\"open\", None)\n"
"        open_action.connect(\"activate\", self.open_callback)\n"
"        app.add_action(open_action)\n"
"\n"
"    # callback method for new\n"
"    def new_callback(self, action, parameter):\n"
"        print \"You clicked \\\"New\\\".\"\n"
"\n"
"    # callback method for open\n"
"    def open_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Open\\\".\"\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/toolbar.py.page:36(section/title)
msgid "Useful methods for a Toolbar widget"
msgstr ""

#: C/toolbar.py.page:37(section/p)
msgid ""
"In line 32 the signal <code>\"activate\"</code> from the action "
"<code>undo_action</code> is connected to the callback function "
"<code>undo_callback()</code> using <code><var>action</var>.connect"
"(<var>signal</var>, <var>callback function</var>)</code>. See <link xref="
"\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""

#: C/toolbar.py.page:40(item/p)
msgid ""
"Use <code>insert(tool_item, position)</code> to insert the <code>tool_item</"
"code> at <code>position</code>. If <code>position</code> is negative, the "
"item is appended at the end of the toolbar."
msgstr ""

#: C/toolbar.py.page:41(item/p)
msgid ""
"<code>get_item_index(tool_item)</code> retrieves the position of "
"<code>tool_item</code> on the toolbar."
msgstr ""

#: C/toolbar.py.page:42(item/p)
msgid ""
"<code>get_n_items()</code> returns the number of items on the toolbar; "
"<code>get_nth_item(position)</code> returns the item in position "
"<code>position</code>."
msgstr ""

#: C/toolbar.py.page:43(item/p)
msgid ""
"If the toolbar does not have room for all the menu items, and "
"<code>set_show_arrow(True)</code>, the items that do not have room are shown "
"through an overflow menu."
msgstr ""

#: C/toolbar.py.page:44(item/p)
msgid ""
"<code>set_icon_size(icon_size)</code> sets the size of icons in the toolbar; "
"<code>icon_size</code> can be one of <code>Gtk.IconSize.INVALID, Gtk.IconSize."
"MENU, Gtk.IconSize.SMALL_TOOLBAR, Gtk.IconSize.LARGE_TOOLBAR, Gtk.IconSize."
"BUTTON, Gtk.IconSize.DND, Gtk.IconSize.DIALOG</code>. This should be used "
"only for special-purpose toolbars, normal application toolbars should respect "
"user preferences for the size of icons. <code>unset_icon_size()</code> unsets "
"the preferences set with <code>set_icon_size(icon_size)</code>, so that user "
"preferences are used to determine the icon size."
msgstr ""

#: C/toolbar.py.page:45(item/p)
msgid ""
"<code>set_style(style)</code>, where <code>style</code> is one of <code>Gtk."
"ToolbarStyle.ICONS, Gtk.ToolbarStyle.TEXT, Gtk.ToolbarStyle.BOTH, Gtk."
"ToolbarStyle.BOTH_HORIZ</code>, sets if the toolbar shows only icons, only "
"text, or both (vertically stacked or alongside each other). To let user "
"preferences determine the toolbar style, and unset a toolbar style so set, "
"use <code>unset_style()</code>."
msgstr ""

#: C/toolbar.py.page:54(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkToolbar.html"
"\">GtkToolbar</link>"
msgstr ""

#: C/toolbar.py.page:55(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkToolButton.html"
"\">GtkToolButton</link>"
msgstr ""

#: C/toolbar.py.page:56(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkToolItem.html"
"\">GtkToolItem</link>"
msgstr ""

#: C/toolbar.py.page:58(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkActionable.html"
"\">GtkActionable</link>"
msgstr ""

#: C/toolbar.py.page:60(item/p) C/toolbar_builder.py.page:198(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gdk3/unstable/gdk3-Event-Structures."
"html#GdkEventWindowState\">Event Structures</link>"
msgstr ""

#: C/toolbar.vala.page:7(info/title)
msgctxt "text"
msgid "Toolbar (Vala)"
msgstr "Werkzeugleiste (Vala)"

#: C/toolbar.vala.page:27(page/code)
#, no-wrap
msgid ""
"/* This is the Window */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Instance variables belonging to the window */\n"
"\tGtk.Toolbar toolbar;\n"
"\tGtk.ToolButton new_button;\n"
"\tGtk.ToolButton open_button;\n"
"\tGtk.ToolButton undo_button;\n"
"\tGtk.ToolButton fullscreen_button;\n"
"\tGtk.ToolButton leave_fullscreen_button;\n"
"\n"
"\t/* Contstructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Toolbar Example\");\n"
"\n"
"\t\tthis.set_default_size (400, 200);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tthis.add (grid);\n"
"\t\tgrid.show ();\n"
"\n"
"\t\tcreate_toolbar ();\n"
"\t\ttoolbar.set_hexpand (true);\n"
"\t\tgrid.attach (toolbar, 0, 0, 1, 1);\n"
"\t\ttoolbar.show ();\n"
"\n"
"\t\t/* create the \"undo\" window action action */\n"
"\t\tvar undo_action = new SimpleAction (\"undo\", null);\n"
"\t\tundo_action.activate.connect (undo_callback);\n"
"\t\tthis.add_action (undo_action);\n"
"\n"
"\t\t/* create the \"fullscreen\" window action */\n"
"\t\tvar fullscreen_action = new SimpleAction (\"fullscreen\", null);\n"
"\t\tfullscreen_action.activate.connect (fullscreen_callback);\n"
"\t\tthis.add_action (fullscreen_action);\n"
"\t}\n"
"\n"
"\t/* This function creates the toolbar, its  ToolButtons,\n"
"\t * and assigns the actions names to the ToolButtons.*/\n"
"\tvoid create_toolbar () {\n"
"\t\ttoolbar = new Gtk.Toolbar ();\n"
"\t\ttoolbar.get_style_context ().add_class (Gtk.STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"\t\tnew_button = new Gtk.ToolButton.from_stock (Gtk.Stock.NEW);\n"
"\t\tnew_button.is_important = true; //decides whether to show the label\n"
"\t\ttoolbar.add (new_button);\n"
"\t\tnew_button.show ();\n"
"\t\tnew_button.action_name = \"app.new\";\n"
"\n"
"\t\topen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.OPEN);\n"
"\t\topen_button.is_important = true;\n"
"\t\ttoolbar.add (open_button);\n"
"\t\topen_button.show ();\n"
"\t\topen_button.action_name = \"app.open\";\n"
"\n"
"\t\tundo_button = new Gtk.ToolButton.from_stock (Gtk.Stock.UNDO);\n"
"\t\tundo_button.is_important = true;\n"
"\t\ttoolbar.add (undo_button);\n"
"\t\tundo_button.show ();\n"
"\t\tundo_button.action_name = \"win.undo\";\n"
"\n"
"\t\tfullscreen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.FULLSCREEN);\n"
"\t\tfullscreen_button.is_important = true;\n"
"\t\ttoolbar.add (fullscreen_button);\n"
"\t\tfullscreen_button.show ();\n"
"\t\tfullscreen_button.action_name = \"win.fullscreen\";\n"
"\n"
"\t\tleave_fullscreen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.LEAVE_FULLSCREEN)\n"
";\n"
"\t\tleave_fullscreen_button.is_important = true;\n"
"\t\ttoolbar.add (leave_fullscreen_button);\n"
"\n"
"\t\tleave_fullscreen_button.action_name = \"win.fullscreen\";\n"
"\t}\n"
"\n"
"\tvoid undo_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Undo\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid fullscreen_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\tif ((this.get_window ().get_state () &amp; Gdk.WindowState.FULLSCREEN) != 0) {\n"
"\t\t\tthis.unfullscreen ();\n"
"\t\t\tleave_fullscreen_button.hide ();\n"
"\t\t\tfullscreen_button.show ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tthis.fullscreen ();\n"
"\t\t\tfullscreen_button.hide ();\n"
"\t\t\tleave_fullscreen_button.show ();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Create the \"new\" action and add it to the app*/\n"
"\t\tvar new_action = new SimpleAction (\"new\", null);\n"
"\t\tnew_action.activate.connect (new_callback);\n"
"\t\tthis.add_action (new_action);\n"
"\n"
"\t\t/* Create the \"open\" action, and add it to the app */\n"
"\t\tvar open_action = new SimpleAction (\"open\", null);\n"
"\t\topen_action.activate.connect (open_callback);\n"
"\t\tthis.add_action (open_action);\n"
"\n"
"\t\t/* You could also add the action to the app menu\n"
"\t\t * if you wanted to.\n"
"\t\t */\n"
"\t\t//var menu = new Menu ();\n"
"\t\t//menu.append (\"New\", \"app.new\");\n"
"\t\t//this.app_menu = menu;\n"
"\t}\n"
"\n"
"\tvoid new_callback (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"New\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid open_callback (SimpleAction action, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Open\\\".\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates the application and runs it. */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/toolbar.vala.page:33(item/p) C/toolbar_builder.vala.page:150(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Toolbar.html\">Gtk.Toolbar</"
"link>"
msgstr ""

#: C/toolbar.vala.page:34(item/p) C/toolbar_builder.vala.page:151(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ToolButton.html\">Gtk."
"Toolbutton</link>"
msgstr ""

#: C/toolbar.vala.page:35(item/p) C/toolbar_builder.vala.page:152(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Stock.html\">Gtk.Stock</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:49(media) C/toolbar_builder.vala.page:32(media)
msgctxt "_"
msgid "external ref='media/glade_ui.png' md5='baea74fe213bc12ea934f64f6977215a'"
msgstr ""
"external ref='media/glade_ui.png' md5='baea74fe213bc12ea934f64f6977215a'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:55(media) C/toolbar_builder.vala.page:38(media)
msgctxt "_"
msgid ""
"external ref='media/glade_select_toolbar.png' "
"md5='f7b5b224050b2e387eb04362fc99df00'"
msgstr ""
"external ref='media/glade_select_toolbar.png' "
"md5='f7b5b224050b2e387eb04362fc99df00'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:61(media) C/toolbar_builder.vala.page:44(media)
msgctxt "_"
msgid ""
"external ref='media/glade_toolbar_general.png' "
"md5='e31daba6e8a3e526aca89d5f1622edaa'"
msgstr ""
"external ref='media/glade_toolbar_general.png' "
"md5='e31daba6e8a3e526aca89d5f1622edaa'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:67(media) C/toolbar_builder.vala.page:50(media)
msgctxt "_"
msgid ""
"external ref='media/glade_toolbar_common.png' "
"md5='d5ec6cc0218ca98e195dbd033feb9ac5'"
msgstr ""
"external ref='media/glade_toolbar_common.png' "
"md5='d5ec6cc0218ca98e195dbd033feb9ac5'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:73(media) C/toolbar_builder.vala.page:56(media)
msgctxt "_"
msgid ""
"external ref='media/glade_toolbar_edit.png' "
"md5='feb1e2b7040d24a4d030f94cf07c81fd'"
msgstr ""
"external ref='media/glade_toolbar_edit.png' "
"md5='feb1e2b7040d24a4d030f94cf07c81fd'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:132(media) C/toolbar_builder.vala.page:115(media)
msgctxt "_"
msgid ""
"external ref='media/glade_toolbar_editor.png' "
"md5='8af65241e5ca47d5494a7b36640e6f1c'"
msgstr ""
"external ref='media/glade_toolbar_editor.png' "
"md5='8af65241e5ca47d5494a7b36640e6f1c'"

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:141(media) C/toolbar_builder.vala.page:124(media)
msgctxt "_"
msgid ""
"external ref='media/glade_visible_no.png' "
"md5='dc6c025aa825f4d772fbd283d6330026'"
msgstr ""
"external ref='media/glade_visible_no.png' "
"md5='dc6c025aa825f4d772fbd283d6330026'"

#: C/toolbar_builder.py.page:7(info/title)
msgctxt "text"
msgid "Toolbar created using Glade (Python)"
msgstr "Mit Glade erstellte Werkzeugleiste (Python)"

#: C/toolbar_builder.py.page:35(page/title)
#: C/toolbar_builder.vala.page:22(page/title)
msgid "Toolbar created using Glade"
msgstr "Mit Glade erstellte Werkzeugleiste"

#: C/toolbar_builder.py.page:38(page/p)
msgid ""
"This example is similar to <link xref=\"toolbar.py\"/>, except we use Glade "
"to create the toolbar in an XML .ui file."
msgstr ""

#: C/toolbar_builder.py.page:43(section/title)
msgid "Creating the toolbar with Glade"
msgstr "Erstellen der Werkzeugleiste mit Glade"

#: C/toolbar_builder.py.page:44(section/p)
#: C/toolbar_builder.vala.page:27(page/p)
msgid ""
"To create the toolbar using the <link href=\"http://glade.gnome.org/\">Glade "
"Interface Designer</link>:"
msgstr ""

#: C/toolbar_builder.py.page:48(item/p) C/toolbar_builder.vala.page:31(item/p)
msgid "Open Glade, and save the file as <file>toolbar_builder.ui</file>"
msgstr ""

#: C/toolbar_builder.py.page:49(item/p) C/toolbar_builder.vala.page:32(item/p)
msgid ""
"<media type=\"image\" src=\"media/glade_ui.png\" width=\"900\"> Screenshot of "
"Glade ui </media>"
msgstr ""

#: C/toolbar_builder.py.page:54(item/p) C/toolbar_builder.vala.page:37(item/p)
msgid ""
"Under <gui>Containers</gui> on the left hand side, right click on the toolbar "
"icon and select <gui>Add widget as toplevel</gui>."
msgstr ""

#: C/toolbar_builder.py.page:55(item/p) C/toolbar_builder.vala.page:38(item/p)
msgid ""
"<media type=\"image\" src=\"media/glade_select_toolbar.png\"> Screenshot of "
"toolbar icon in Glade ui </media>"
msgstr ""

#: C/toolbar_builder.py.page:60(item/p) C/toolbar_builder.vala.page:43(item/p)
msgid ""
"Under the <gui>General</gui> tab on the bottom right, change the <gui>Name</"
"gui> to <input>toolbar</input> and <gui>Show Arrow</gui> to <gui>No</gui>."
msgstr ""

#: C/toolbar_builder.py.page:61(item/p) C/toolbar_builder.vala.page:44(item/p)
msgid ""
"<media type=\"image\" src=\"media/glade_toolbar_general.png\"> Screenshot of "
"General tab </media>"
msgstr ""

#: C/toolbar_builder.py.page:66(item/p) C/toolbar_builder.vala.page:49(item/p)
msgid ""
"Under the <gui>Common</gui> tab, set <gui>Horizontal Expand</gui> to "
"<gui>Yes</gui>."
msgstr ""

#: C/toolbar_builder.py.page:67(item/p) C/toolbar_builder.vala.page:50(item/p)
msgid ""
"<media type=\"image\" src=\"media/glade_toolbar_common.png\"> Screenshot of "
"Common tab </media>"
msgstr ""

#: C/toolbar_builder.py.page:72(item/p) C/toolbar_builder.vala.page:55(item/p)
msgid ""
"Right click on the toolbar in the top right and select <gui>Edit</gui>. The "
"<gui>Tool Bar Editor</gui> window will appear."
msgstr ""

#: C/toolbar_builder.py.page:73(item/p) C/toolbar_builder.vala.page:56(item/p)
msgid ""
"<media type=\"image\" src=\"media/glade_toolbar_edit.png\"> Screenshot of "
"where to right click to edit toolbar. </media>"
msgstr ""

#: C/toolbar_builder.py.page:78(item/p) C/toolbar_builder.vala.page:61(item/p)
msgid ""
"We want to add 5 ToolButtons: New, Open, Undo, Fullscreen and Leave "
"Fullscreen. First, we will add the New ToolButton."
msgstr ""

#: C/toolbar_builder.py.page:81(item/p) C/toolbar_builder.vala.page:64(item/p)
msgid "Under <gui>Hierarchy</gui> tab, click <gui>Add</gui>."
msgstr ""

#: C/toolbar_builder.py.page:82(item/p) C/toolbar_builder.vala.page:65(item/p)
msgid "Change the name of the ToolItem to <input>new_button</input>."
msgstr ""

#: C/toolbar_builder.py.page:83(item/p) C/toolbar_builder.vala.page:66(item/p)
msgid ""
"Scroll down and set <gui>Is important</gui> to <gui>Yes</gui>. This will "
"cause the label of the ToolButton to be shown, when you view the toolbar."
msgstr ""

#: C/toolbar_builder.py.page:84(item/p) C/toolbar_builder.vala.page:67(item/p)
msgid "Enter the <gui>action name</gui>: <input>app.new</input>."
msgstr ""

#: C/toolbar_builder.py.page:85(item/p) C/toolbar_builder.vala.page:68(item/p)
msgid "Change the <gui>Label</gui> to <input>New</input>."
msgstr ""

#: C/toolbar_builder.py.page:86(item/p) C/toolbar_builder.vala.page:69(item/p)
msgid ""
"Select the <gui>New</gui> Stock Id from the drop down menu, or type "
"<input>gtk-new</input>."
msgstr ""

#: C/toolbar_builder.py.page:88(item/p) C/toolbar_builder.vala.page:71(item/p)
msgid ""
"Repeat the above steps for the remaining ToolButtons, with the following "
"properties:"
msgstr ""

#: C/toolbar_builder.py.page:95(td/p) C/toolbar_builder.vala.page:78(td/p)
msgid "Is important"
msgstr ""

#: C/toolbar_builder.py.page:96(td/p) C/toolbar_builder.vala.page:79(td/p)
msgid "Action name"
msgstr ""

#: C/toolbar_builder.py.page:98(td/p) C/toolbar_builder.vala.page:81(td/p)
msgid "Stock Id"
msgstr ""

#: C/toolbar_builder.py.page:103(td/p) C/toolbar_builder.vala.page:86(td/p)
msgid "open_button"
msgstr "open_button"

#: C/toolbar_builder.py.page:104(td/p) C/toolbar_builder.py.page:111(td/p)
#: C/toolbar_builder.py.page:118(td/p) C/toolbar_builder.py.page:125(td/p)
#: C/toolbar_builder.vala.page:87(td/p) C/toolbar_builder.vala.page:94(td/p)
#: C/toolbar_builder.vala.page:101(td/p) C/toolbar_builder.vala.page:108(td/p)
msgid "Yes"
msgstr "Ja"

#: C/toolbar_builder.py.page:105(td/p) C/toolbar_builder.vala.page:88(td/p)
msgid "app.open"
msgstr "app.open"

#: C/toolbar_builder.py.page:106(td/p) C/toolbar_builder.vala.page:89(td/p)
msgid "Open"
msgstr "Öffnen"

#: C/toolbar_builder.py.page:107(td/p) C/toolbar_builder.vala.page:90(td/p)
msgid "gtk-open"
msgstr "gtk-open"

#: C/toolbar_builder.py.page:110(td/p) C/toolbar_builder.vala.page:93(td/p)
msgid "undo_button"
msgstr "undo_button"

#: C/toolbar_builder.py.page:112(td/p) C/toolbar_builder.vala.page:95(td/p)
msgid "win.undo"
msgstr "win.undo"

#: C/toolbar_builder.py.page:113(td/p) C/toolbar_builder.vala.page:96(td/p)
msgid "Undo"
msgstr ""

#: C/toolbar_builder.py.page:114(td/p) C/toolbar_builder.vala.page:97(td/p)
msgid "gtk-undo"
msgstr "gtk-undo"

#: C/toolbar_builder.py.page:117(td/p) C/toolbar_builder.vala.page:100(td/p)
msgid "fullscreen_button"
msgstr "fullscreen_button"

#: C/toolbar_builder.py.page:119(td/p) C/toolbar_builder.py.page:126(td/p)
#: C/toolbar_builder.vala.page:102(td/p) C/toolbar_builder.vala.page:109(td/p)
msgid "win.fullscreen"
msgstr "win.fullscreen"

#: C/toolbar_builder.py.page:120(td/p) C/toolbar_builder.vala.page:103(td/p)
msgid "Fullscreen"
msgstr "Vollbild"

#: C/toolbar_builder.py.page:121(td/p) C/toolbar_builder.vala.page:104(td/p)
msgid "gtk-fullscreen"
msgstr "gtk-fullscreen"

#: C/toolbar_builder.py.page:124(td/p) C/toolbar_builder.vala.page:107(td/p)
msgid "leave_fullscreen_button"
msgstr "leave_fullscreen_button"

#: C/toolbar_builder.py.page:127(td/p) C/toolbar_builder.vala.page:110(td/p)
msgid "Leave Fullscreen"
msgstr "Vollbild verlassen"

#: C/toolbar_builder.py.page:128(td/p) C/toolbar_builder.vala.page:111(td/p)
msgid "gtk-leave-fullscreen"
msgstr "gtk-leave-fullscreen"

#: C/toolbar_builder.py.page:137(item/p)
#: C/toolbar_builder.vala.page:120(item/p)
msgid "Close the <gui>Tool Bar Editor</gui>."
msgstr "Schließen Sie den <gui>Werkzeugleisteneditor</gui>."

#: C/toolbar_builder.py.page:140(item/p)
msgid ""
"When our program will first start, we do not want the <gui>Leave Fullscreen</"
"gui> ToolButton to be visible, since the application will not be in "
"fullscreen mode. You can set this in the <gui>Common</gui> tab, by clicking "
"the <gui>Visible</gui> property to <gui>No</gui>. The ToolButton will still "
"appear in the interface designer, but will behave correctly when the file is "
"loaded into your program code. Note that the method <code>show_all()</code> "
"would override this setting - so in the code we have to use <code>show()</"
"code> separately on all the elements."
msgstr ""

#: C/toolbar_builder.py.page:141(item/p)
#: C/toolbar_builder.vala.page:124(item/p)
msgid ""
"<media type=\"image\" src=\"media/glade_visible_no.png\"> Setting the visible "
"property to No </media>"
msgstr ""

#: C/toolbar_builder.py.page:146(item/p)
#: C/toolbar_builder.vala.page:129(item/p)
msgid "Save your work, and close Glade."
msgstr "Speichern Sie Ihre Arbeit und schließen Sie Glade."

#: C/toolbar_builder.py.page:149(item/p)
#: C/toolbar_builder.vala.page:132(item/p)
msgid ""
"The XML file created by Glade is shown below. This is the description of the "
"toolbar. At the time of this writing, the option to add the class Gtk."
"STYLE_CLASS_PRIMARY_TOOLBAR in the Glade Interface did not exist. We can "
"manually add this to the XML file. To do this, add the following XML code at "
"line 9 of <file>toolbar_builder.ui</file>:"
msgstr ""

#: C/toolbar_builder.py.page:150(item/code)
#: C/toolbar_builder.vala.page:133(item/code)
#, no-wrap
msgid ""
"\n"
"  &lt;style&gt;\n"
"     &lt;class name=\"primary-toolbar\"/&gt;\n"
"  &lt;/style&gt;\n"
"  "
msgstr ""

#: C/toolbar_builder.py.page:155(item/p)
#: C/toolbar_builder.vala.page:138(item/p)
msgid ""
"If you do not add this, the program will still work fine. The resulting "
"toolbar will however look slightly different then the screenshot at the top "
"of this page."
msgstr ""

#: C/toolbar_builder.py.page:158(section/code)
#: C/toolbar_builder.vala.page:141(page/code)
#, no-wrap
msgid ""
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;!-- interface-requires gtk+ 3.0 --&gt;\n"
"  &lt;object class=\"GtkToolbar\" id=\"toolbar\"&gt;\n"
"    &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"    &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"    &lt;property name=\"hexpand\"&gt;True&lt;/property&gt;\n"
"    &lt;property name=\"show_arrow\"&gt;False&lt;/property&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"new_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;app.new&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;New&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-new&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"open_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;app.open&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;Open&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-open&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"undo_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;win.undo&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;Undo&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-undo&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"fullscreen_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;win.fullscreen&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;Fullscreen&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-fullscreen&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"leave_fullscreen_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;win.fullscreen&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;Leave Fullscreen&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-leave-fullscreen&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"  &lt;/object&gt;\n"
"&lt;/interface&gt;\n"
msgstr ""

#: C/toolbar_builder.py.page:165(section/p)
#: C/toolbar_builder.vala.page:143(page/p)
msgid ""
"We now create the code below, which adds the toolbar from the file we just "
"created."
msgstr ""

#: C/toolbar_builder.py.page:166(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Toolbar Example\", application=app)\n"
"        self.set_default_size(400, 200)\n"
"\n"
"        # a grid to attach the toolbar (see below)\n"
"        grid = Gtk.Grid()\n"
"        self.add(grid)\n"
"        # we have to show the grid (and therefore the toolbar) with show(),\n"
"        # as show_all() would show also the buttons in the toolbar that we want to\n"
"        # be hidden (such as the leave_fullscreen button)\n"
"        grid.show()\n"
"\n"
"        # a builder to add the UI designed with Glade to the grid:\n"
"        builder = Gtk.Builder()\n"
"        # get the file (if it is there)\n"
"        try:\n"
"            builder.add_from_file(\"toolbar_builder.ui\")\n"
"        except:\n"
"            print \"file not found\"\n"
"            sys.exit()\n"
"        # and attach it to the grid\n"
"        grid.attach(builder.get_object(\"toolbar\"), 0, 0, 1, 1)\n"
"\n"
"        # two buttons that will be used later in a method\n"
"        self.fullscreen_button = builder.get_object(\"fullscreen_button\")\n"
"        self.leave_fullscreen_button = builder.get_object(\"leave_fullscreen_button\")\n"
"\n"
"        # create the actions that control the window, connect their signal to a\n"
"        # callback method (see below), add the action to the window:\n"
"\n"
"        # undo\n"
"        undo_action = Gio.SimpleAction.new(\"undo\", None)\n"
"        undo_action.connect(\"activate\", self.undo_callback)\n"
"        self.add_action(undo_action)\n"
"\n"
"        # and fullscreen\n"
"        fullscreen_action = Gio.SimpleAction.new(\"fullscreen\", None)\n"
"        fullscreen_action.connect(\"activate\", self.fullscreen_callback)\n"
"        self.add_action(fullscreen_action)\n"
"\n"
"    # callback for undo\n"
"    def undo_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Undo\\\".\"\n"
"\n"
"    # callback for fullscreen\n"
"    def fullscreen_callback(self, action, parameter):\n"
"        # check if the state is the same as Gdk.WindowState.FULLSCREEN, which is a bit flag\n"
"        is_fullscreen = self.get_window().get_state() &amp; Gdk.WindowState.FULLSCREEN != 0\n"
"        if is_fullscreen:\n"
"            self.unfullscreen()\n"
"            self.leave_fullscreen_button.hide()\n"
"            self.fullscreen_button.show()\n"
"        else:\n"
"            self.fullscreen()\n"
"            self.fullscreen_button.hide()\n"
"            self.leave_fullscreen_button.show()\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        # show the window - with show() not show_all() because that would show also\n"
"        # the leave_fullscreen button\n"
"        win.show()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # actions that control the application: create, connect their signal to a\n"
"        # callback method (see below), add the action to the application\n"
"\n"
"        # new\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        app.add_action(new_action)\n"
"\n"
"        # open\n"
"        open_action = Gio.SimpleAction.new(\"open\", None)\n"
"        open_action.connect(\"activate\", self.open_callback)\n"
"        app.add_action(open_action)\n"
"\n"
"    # callback for new\n"
"    def new_callback(self, action, parameter):\n"
"        print \"You clicked \\\"New\\\".\"\n"
"\n"
"    # callback for open\n"
"    def open_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Open\\\".\"\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/toolbar_builder.py.page:171(section/title)
msgid "Useful methods for Gtk.Builder"
msgstr ""

#: C/toolbar_builder.py.page:172(section/p)
msgid ""
"For the useful methods for a Toolbar widget, see <link xref=\"toolbar.py\"/>"
msgstr ""

#: C/toolbar_builder.py.page:174(section/p)
msgid "Gtk.Builder builds an interface from an XML UI definition."
msgstr ""

#: C/toolbar_builder.py.page:177(item/p)
msgid ""
"<code>add_from_file(filename)</code> loads and parses the given file and "
"merges it with the current contents of the Gtk.Builder."
msgstr ""

#: C/toolbar_builder.py.page:178(item/p)
msgid ""
"<code>add_from_string(string)</code> parses the given string and merges it "
"with the current contents of the Gtk.Builder."
msgstr ""

#: C/toolbar_builder.py.page:179(item/p)
msgid ""
"<code>add_objects_from_file(filename, object_ids)</code> is the same as "
"<code>add_from_file()</code>, but it loads only the objects with the ids "
"given in the <code>object_id</code>s list."
msgstr ""

#: C/toolbar_builder.py.page:180(item/p)
msgid ""
"<code>add_objects_from_string(filename, object_ids)</code> is the same as "
"<code>add_from_string()</code>, but it loads only the objects with the ids "
"given in the <code>object_id</code>s list."
msgstr ""

#: C/toolbar_builder.py.page:181(item/p)
msgid ""
"<code>get_object(object_id)</code> retrieves the widget with the id "
"<code>object_id</code> from the loaded objects in the builder."
msgstr ""

#: C/toolbar_builder.py.page:182(item/p)
msgid "<code>get_objects()</code> returns all loaded objects."
msgstr ""

#: C/toolbar_builder.py.page:183(item/p)
msgid ""
"<code>connect_signals(handler_object)</code> connects the signals to the "
"methods given in the <code>handler_object</code>. This can be any object "
"which contains keys or attributes that are called like the signal handler "
"names given in the interface description, e.g. a class or a dict. In line 39 "
"the signal <code>\"activate\"</code> from the action <code>undo_action</code> "
"is connected to the callback function <code>undo_callback()</code> using "
"<code><var>action</var>.connect(<var>signal</var>, <var>callback function</"
"var>)</code>. See <link xref=\"signals-callbacks.py\"/> for a more detailed "
"explanation."
msgstr ""

#: C/toolbar_builder.vala.page:7(info/title)
msgctxt "text"
msgid "Toolbar created using Glade (Vala)"
msgstr ""

#: C/toolbar_builder.vala.page:25(page/p)
msgid ""
"This example is similar to <link xref=\"toolbar.vala\"/>, except we use Glade "
"to create the toolbar in an XML ui file."
msgstr ""

#: C/toolbar_builder.vala.page:123(item/p)
msgid ""
"When our program will first start, we don't want the <gui>Leave Fullscreen</"
"gui> ToolButton to be visible, since the application will not be in "
"fullscreen mode. You can set this in the <gui>Common</gui> tab, by clicking "
"the <gui>Visible</gui> property to <gui>No</gui>. The ToolButton will still "
"appear in the interface designer, but will behave correctly when the file is "
"loaded into your program code."
msgstr ""

#: C/toolbar_builder.vala.page:144(page/code)
#, no-wrap
msgid ""
"/* This is the Window */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Declare these two ToolButtons, as we will get them\n"
"\t * from the ui file (see lines 32 and 33), so we can\n"
"\t * hide() and show() them as needed.*/\n"
"\tGtk.ToolButton fullscreen_button;\n"
"\tGtk.ToolButton leave_fullscreen_button;\n"
"\n"
"\t/* Contstructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Toolbar Example\");\n"
"\n"
"\t\tthis.set_default_size (400, 200);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tthis.add (grid);\n"
"\t\tgrid.show ();\n"
"\n"
"\t\t/* add the toolbar from the ui file */\n"
"\t\tvar builder = new Gtk.Builder ();\n"
"\t\ttry {\n"
"\t\t\tbuilder.add_from_file (\"toolbar_builder.ui\");\n"
"\t\t}\n"
"\t\t/* Handle the exception */\n"
"\t\tcatch (Error e) {\n"
"\t\t\terror (\"Unable to load file: %s\", e.message);\n"
"\t\t}\n"
"\n"
"\t\tgrid.attach (builder.get_object (\"toolbar\") as Gtk.Toolbar, 0, 0, 1, 1);\n"
"\n"
"\t\t/* get these objects from the ui file so we can toggle between them */\n"
"\t\tfullscreen_button = builder.get_object (\"fullscreen_button\") as Gtk.ToolButton;\n"
"\t\tleave_fullscreen_button = builder.get_object (\"leave_fullscreen_button\") as Gtk.ToolButton;\n"
"\n"
"\t\t/* create the \"undo\" window action action */\n"
"\t\tvar undo_action = new SimpleAction (\"undo\", null);\n"
"\t\tundo_action.activate.connect (undo_callback);\n"
"\t\tthis.add_action (undo_action);\n"
"\n"
"\t\t/* create the \"fullscreen\" window action */\n"
"\t\tvar fullscreen_action = new SimpleAction (\"fullscreen\", null);\n"
"\t\tfullscreen_action.activate.connect (fullscreen_callback);\n"
"\t\tthis.add_action (fullscreen_action);\n"
"\t}\n"
"\n"
"\tvoid undo_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Undo\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid fullscreen_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\tif ((this.get_window ().get_state () &amp; Gdk.WindowState.FULLSCREEN) != 0) {\n"
"\t\t\tthis.unfullscreen ();\n"
"\t\t\tleave_fullscreen_button.hide ();\n"
"\t\t\tfullscreen_button.show ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tthis.fullscreen ();\n"
"\t\t\tfullscreen_button.hide ();\n"
"\t\t\tleave_fullscreen_button.show ();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Create the \"new\" action and add it to the app*/\n"
"\t\tvar new_action = new SimpleAction (\"new\", null);\n"
"\t\tnew_action.activate.connect (new_callback);\n"
"\t\tthis.add_action (new_action);\n"
"\n"
"\t\t/* Create the \"open\" action, and add it to the app */\n"
"\t\tvar open_action = new SimpleAction (\"open\", null);\n"
"\t\topen_action.activate.connect (open_callback);\n"
"\t\tthis.add_action (open_action);\n"
"\n"
"\t\t/* You could also add the action to the app menu\n"
"\t\t * if you wanted to.\n"
"\t\t */\n"
"\t\t//var menu = new Menu ();\n"
"\t\t//menu.append (\"New\", \"app.new\");\n"
"\t\t//this.app_menu = menu;\n"
"\t}\n"
"\n"
"\tvoid new_callback (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"New\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid open_callback (SimpleAction action, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Open\\\".\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates the application and runs it. */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/tooltip.py.page:23(media)
msgctxt "_"
msgid "external ref='media/tooltip.png' md5='6950da5f4444aa941ecc2f0fc5951d52'"
msgstr ""

#: C/tooltip.py.page:7(info/title)
msgctxt "text"
msgid "Tooltip (Python)"
msgstr "Minihilfe (Python)"

#: C/tooltip.py.page:19(info/desc)
msgid "Add tips to your widgets"
msgstr ""

#: C/tooltip.py.page:22(page/title)
msgid "Tooltip"
msgstr "Minihilfe"

#: C/tooltip.py.page:24(page/p)
msgid "A toolbar with a tooltip (with an image) for a button."
msgstr ""

#: C/tooltip.py.page:30(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Toolbar with Tooltips Example\", application=app)\n"
"        self.set_default_size(400, 200)\n"
"\n"
"        grid = Gtk.Grid()\n"
"\n"
"        toolbar = self.create_toolbar()\n"
"        toolbar.set_hexpand(True)\n"
"        toolbar.show()\n"
"\n"
"        grid.attach(toolbar, 0, 0, 1, 1)\n"
"\n"
"        self.add(grid)\n"
"\n"
"        undo_action = Gio.SimpleAction.new(\"undo\", None)\n"
"        undo_action.connect(\"activate\", self.undo_callback)\n"
"        self.add_action(undo_action)\n"
"\n"
"        fullscreen_action = Gio.SimpleAction.new(\"fullscreen\", None)\n"
"        fullscreen_action.connect(\"activate\", self.fullscreen_callback)\n"
"        self.add_action(fullscreen_action)\n"
"\n"
"    def create_toolbar(self):\n"
"        toolbar = Gtk.Toolbar()\n"
"        toolbar.get_style_context().add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"        # button for the \"new\" action\n"
"        new_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_NEW)\n"
"        # with a tooltip with a given text        \n"
"        new_button.set_tooltip_text(\"Create a new file\")\n"
"        new_button.set_is_important(True)\n"
"        toolbar.insert(new_button, 0)\n"
"        new_button.show()\n"
"        new_button.set_action_name(\"app.new\")\n"
"\n"
"        # button for the \"open\" action\n"
"        open_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_OPEN)\n"
"        # with a tooltip with a given text in the Pango markup language        \n"
"        open_button.set_tooltip_markup(\"Open an &lt;i&gt;existing&lt;/i&gt; file\")\n"
"        open_button.set_is_important(True)\n"
"        toolbar.insert(open_button, 1)\n"
"        open_button.show()\n"
"        open_button.set_action_name(\"app.open\")\n"
"\n"
"        # button for the \"undo\" action\n"
"        undo_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_UNDO)\n"
"        # with a tooltip with an image\n"
"        # set True the property \"has-tooltip\"        \n"
"        undo_button.set_property(\"has-tooltip\", True)\n"
"        # connect to the callback function that for the tooltip\n"
"        # with the signal \"query-tooltip\"\n"
"        undo_button.connect(\"query-tooltip\", self.undo_tooltip_callback)\n"
"        undo_button.set_is_important(True)\n"
"        toolbar.insert(undo_button, 2)\n"
"        undo_button.show()\n"
"        undo_button.set_action_name(\"win.undo\")\n"
"\n"
"        # button for the \"fullscreen/leave fullscreen\" action\n"
"        self.fullscreen_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_FULLSCREEN)\n"
"        self.fullscreen_button.set_is_important(True)\n"
"        toolbar.insert(self.fullscreen_button, 3)\n"
"        self.fullscreen_button.set_action_name(\"win.fullscreen\")\n"
"\n"
"        return toolbar\n"
"\n"
"    # the callback function for the tooltip of the \"undo\" button\n"
"    def undo_tooltip_callback(self, widget, x, y, keyboard_mode, tooltip):\n"
"        # set the text for the tooltip\n"
"        tooltip.set_text(\"Undo your last action\")\n"
"        # set an icon fot the tooltip\n"
"        tooltip.set_icon_from_stock(\"gtk-undo\", Gtk.IconSize.MENU)\n"
"        # show the tooltip\n"
"        return True\n"
"\n"
"    def undo_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Undo\\\".\"\n"
"\n"
"    def fullscreen_callback(self, action, parameter):\n"
"        is_fullscreen = self.get_window().get_state() &amp; Gdk.WindowState.FULLSCREEN != 0\n"
"        if not is_fullscreen:\n"
"            self.fullscreen_button.set_stock_id(Gtk.STOCK_LEAVE_FULLSCREEN)\n"
"            self.fullscreen()\n"
"        else:\n"
"            self.fullscreen_button.set_stock_id(Gtk.STOCK_FULLSCREEN)\n"
"            self.unfullscreen()\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        app.add_action(new_action)\n"
"\n"
"        open_action = Gio.SimpleAction.new(\"open\", None)\n"
"        open_action.connect(\"activate\", self.open_callback)\n"
"        app.add_action(open_action)\n"
"\n"
"    def new_callback(self, action, parameter):\n"
"        print \"You clicked \\\"New\\\".\"\n"
"\n"
"    def open_callback(self, action, parameter):\n"
"        print \"You clicked \\\"Open\\\".\"\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/tooltip.py.page:34(section/title)
msgid "Useful methods for a Tooltip widget"
msgstr ""

#: C/tooltip.py.page:36(section/p)
msgid ""
"<code>set_tooltip_text(text)</code> and <code>set_tooltip_markup(text)</code> "
"can be used to add a tooltip of plain text (or text in the Pango Markup "
"Language) to a widget."
msgstr ""

#: C/tooltip.py.page:37(section/p)
msgid "For more complex tooltips, for instance for a tooltip with an image:"
msgstr ""

#: C/tooltip.py.page:39(item/p)
msgid ""
"Set the <code>\"has-tooltip\"</code> property of the widget to <code>True</"
"code>; this will make GTK+ monitor the widget for motion and related events "
"which are needed to determine when and where to show a tooltip."
msgstr ""

#: C/tooltip.py.page:40(item/p)
msgid ""
"Connect to the <code>\"query-tooltip\"</code> signal. This signal will be "
"emitted when a tooltip is supposed to be shown. One of the arguments passed "
"to the signal handler is a GtkTooltip object. This is the object that we are "
"about to display as a tooltip, and can be manipulated in your callback using "
"functions like <code>set_icon()</code>. There are functions for setting the "
"tooltip's markup (<code>set_markup(text)</code>), setting an image from a "
"stock icon (<code>set_icon_from_stock(stock_id, size)</code>), or even "
"putting in a custom widget (<code>set_custom(widget)</code>)."
msgstr ""

#: C/tooltip.py.page:41(item/p)
msgid ""
"Return <code>True</code> from your query-tooltip handler. This causes the "
"tooltip to be show. If you return <code>False</code>, it will not be shown."
msgstr ""

#: C/tooltip.py.page:44(section/p)
msgid ""
"In the probably rare case where you want to have even more control over the "
"tooltip that is about to be shown, you can set your own GtkWindow which will "
"be used as tooltip window. This works as follows:"
msgstr ""

#: C/tooltip.py.page:46(item/p)
msgid ""
"Set <code>\"has-tooltip\"</code> and connect to <code>\"query-tooltip\"</"
"code> as before."
msgstr ""

#: C/tooltip.py.page:47(item/p)
msgid ""
"Use <code>set_tooltip_window()</code> on the widget to set a GtkWindow "
"created by you as tooltip window."
msgstr ""

#: C/tooltip.py.page:48(item/p)
msgid ""
"In the <code>\"query-tooltip\"</code> callback you can access your window "
"using <code>get_tooltip_window()</code> and manipulate as you wish. The "
"semantics of the return value are exactly as before, return <code>True</code> "
"to show the window, <code>False</code> to not show it."
msgstr ""

#: C/tooltip.py.page:57(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkTooltip.html"
"\">GtkTooltip</link>"
msgstr ""

#: C/tooltip.py.page:59(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkWidget.html"
"\">GtkWidget</link>"
msgstr ""

#: C/tooltip.py.page:60(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/gtk3-Stock-Items.html"
"\">Stock Items</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/treeview_advanced_liststore.py.page:22(media)
msgctxt "_"
msgid ""
"external ref='media/treeview_advanced_liststore.png' "
"md5='102b512197fb9aa4ed9a16462f6af911'"
msgstr ""

#: C/treeview_advanced_liststore.py.page:7(info/title)
msgctxt "text"
msgid "Simple Treeview with ListStore (Python)"
msgstr ""

#: C/treeview_advanced_liststore.py.page:18(info/desc)
msgid "A TreeView displaying a ListStore (more complex example)"
msgstr ""

#: C/treeview_advanced_liststore.py.page:21(page/title)
msgid "More Complex Treeview with ListStore"
msgstr ""

#: C/treeview_advanced_liststore.py.page:23(page/p)
#: C/treeview_simple_liststore.py.page:24(page/p)
msgid ""
"This TreeView displays a simple ListStore with the selection \"changed\" "
"signal connected."
msgstr ""

#: C/treeview_advanced_liststore.py.page:30(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Pango\n"
"import sys\n"
"\n"
"list_of_dvd = [[\"The Usual Suspects\"],\n"
"               [\"Gilda\"],\n"
"               [\"The Godfather\"],\n"
"               [\"Pulp Fiction\"],\n"
"               [\"Once Upon a Time in the West\"],\n"
"               [\"Rear Window\"]]\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"My DVDs\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data are stored in the model\n"
"        # create a liststore with one column\n"
"        self.listmodel = Gtk.ListStore(str)\n"
"        for i in range(len(list_of_dvd)):\n"
"            self.listmodel.append(list_of_dvd[i])\n"
"\n"
"        # a treeview to see the data stored in the model\n"
"        view = Gtk.TreeView(model=self.listmodel)\n"
"\n"
"        # cellrenderer for the first column\n"
"        cell = Gtk.CellRendererText()\n"
"        # the first column is created\n"
"        col = Gtk.TreeViewColumn(\"Title\", cell, text=0)\n"
"        # and it is appended to the treeview\n"
"        view.append_column(col)\n"
"\n"
"        # when a row of the treeview is selected, it emits a signal\n"
"        self.selection = view.get_selection()\n"
"        self.selection.connect(\"changed\", self.on_changed)\n"
"\n"
"        # the label we use to show the selection\n"
"        self.label = Gtk.Label()\n"
"        self.label.set_text(\"\")\n"
"\n"
"        # a button to add new titles, connected to a callback function\n"
"        self.button_add = Gtk.Button(label=\"Add\")\n"
"        self.button_add.connect(\"clicked\", self.add_cb)\n"
"\n"
"        # an entry to enter titles\n"
"        self.entry = Gtk.Entry()\n"
"\n"
"        # a button to remove titles, connected to a callback function\n"
"        self.button_remove = Gtk.Button(label=\"Remove\")\n"
"        self.button_remove.connect(\"clicked\", self.remove_cb)\n"
"\n"
"        # a button to remove all titles, connected to a callback function\n"
"        self.button_remove_all = Gtk.Button(label=\"Remove All\")\n"
"        self.button_remove_all.connect(\"clicked\", self.remove_all_cb)\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(view, 0, 0, 4, 1)\n"
"        grid.attach(self.label, 0, 1, 4, 1)\n"
"        grid.attach(self.button_add, 0, 2, 1, 1)\n"
"        grid.attach_next_to(self.entry, self.button_add, Gtk.PositionType.RIGHT, 1, 1)\n"
"        grid.attach_next_to(self.button_remove, self.entry, Gtk.PositionType.RIGHT, 1, 1)\n"
"        grid.attach_next_to(self.button_remove_all, self.button_remove, Gtk.PositionType.RIGHT, 1, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    def on_changed(self, selection):\n"
"        # get the model and the iterator that points at the data in the model\n"
"        (model, iter) = selection.get_selected()\n"
"        # set the label to a new value depending on the selection, if there is one\n"
"        if iter is not None:\n"
"            self.label.set_text(\"\\n %s\" %(model[iter][0]))\n"
"        else:\n"
"            self.label.set_text(\"\")\n"
"        return True\n"
"\n"
"    # callback function for the \"Add\" button\n"
"    def add_cb(self, button):\n"
"        # append to the model the title that is in the entry\n"
"        title = self.entry.get_text()\n"
"        self.listmodel.append([title])\n"
"        # and print a message in the terminal\n"
"        print \"%s has been added\" %(title)\n"
"\n"
"    def remove_cb(self, button):\n"
"        # if there is still an entry in the model\n"
"        if len(self.listmodel) != 0:\n"
"            # get the selection\n"
"            (model, iter) = self.selection.get_selected()\n"
"            # if there is a selection, print a message in the terminal\n"
"            # and remove it from the model\n"
"            if iter is not None:\n"
"                print \"%s has been removed\" %(model[iter][0])\n"
"                self.listmodel.remove(iter)\n"
"            # otherwise, ask the user to select something to remove\n"
"            else:\n"
"                print \"Select a title to remove\"\n"
"        # else, if there are no entries in the model, print \"Empty list\"\n"
"        # in the terminal\n"
"        else:\n"
"            print \"Empty list\"\n"
"\n"
"    def remove_all_cb(self, button):\n"
"        # if there is still an entry in the model\n"
"        if len(self.listmodel) != 0:\n"
"            # remove all the entries in the model\n"
"            for i in range(len(self.listmodel)):\n"
"                iter = self.listmodel.get_iter(0)\n"
"                self.listmodel.remove(iter)\n"
"        # print a message in the terminal alerting that the model is empty\n"
"        print \"Empty list\"\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/treeview_advanced_liststore.py.page:34(section/title)
#: C/treeview_cellrenderertoggle.py.page:34(section/title)
#: C/treeview_simple_liststore.py.page:35(section/title)
#: C/treeview_treestore.py.page:35(section/title)
msgid "Useful methods for a TreeView widget"
msgstr ""

#: C/treeview_advanced_liststore.py.page:35(section/p)
#: C/treeview_cellrenderertoggle.py.page:35(section/p)
#: C/treeview_treestore.py.page:36(section/p)
msgid ""
"The TreeView widget is designed around a <em>Model/View/Controller</em> "
"design: the <em>Model</em> stores the data; the <em>View</em> gets change "
"notifications and displays the content of the model; the <em>Controller</em>, "
"finally, changes the state of the model and notifies the view of these "
"changes. For more information and for a list of useful methods for TreeModel "
"see <link xref=\"model-view-controller.py\"/>."
msgstr ""

#: C/treeview_advanced_liststore.py.page:36(section/p)
msgid ""
"In line 36 the <code>\"changed\"</code> signal is connected to the callback "
"function <code>on_changed()</code> using <code><var>widget</var>.connect"
"(<var>signal</var>, <var>callback function</var>)</code>. See <link xref="
"\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/treeview_cellrenderertoggle.py.page:22(media)
msgctxt "_"
msgid ""
"external ref='media/treeview_cellrenderertoggle.png' "
"md5='ade9b9437f8f83150acf37610dab834d'"
msgstr ""

#: C/treeview_cellrenderertoggle.py.page:7(info/title)
#: C/treeview_treestore.py.page:7(info/title)
msgctxt "text"
msgid "TreeView with TreeStore (Python)"
msgstr ""

#: C/treeview_cellrenderertoggle.py.page:18(info/desc)
msgid ""
"A TreeView displaying a TreeStore (more complex example, with "
"CellRendererToggle)"
msgstr ""

#: C/treeview_cellrenderertoggle.py.page:21(page/title)
msgid "More Complex TreeView with TreeStore"
msgstr ""

#: C/treeview_cellrenderertoggle.py.page:23(page/p)
msgid ""
"This TreeView displays a TreeStore with two columns, one of which is rendered "
"as a toggle."
msgstr ""

#: C/treeview_cellrenderertoggle.py.page:30(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Pango\n"
"import sys\n"
"\n"
"books = [[\"Tolstoy, Leo\", [\"War and Peace\", True], [\"Anna Karenina\", False]],\n"
"         [\"Shakespeare, William\", [\"Hamlet\", False], [\"Macbeth\", True], [\"Othello\", False]],\n"
"         [\"Tolkien, J.R.R.\", [\"The Lord of the Rings\", False]]]\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Library\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data are stored in the model\n"
"        # create a treestore with two columns\n"
"        self.store = Gtk.TreeStore(str, bool)\n"
"        # fill in the model\n"
"        for i in range(len(books)):\n"
"            # the iter piter is returned when appending the author in the first column\n"
"            # and False in the second\n"
"            piter = self.store.append(None, [books[i][0], False])\n"
"            # append the books and the associated boolean value as children of the author\n"
"            j = 1\n"
"            while j &lt; len(books[i]):\n"
"                self.store.append(piter, books[i][j])\n"
"                j += 1\n"
"\n"
"        # the treeview shows the model\n"
"        # create a treeview on the model self.store\n"
"        view = Gtk.TreeView()\n"
"        view.set_model(self.store)\n"
"\n"
"        # the cellrenderer for the first column - text\n"
"        renderer_books = Gtk.CellRendererText()\n"
"        # the first column is created\n"
"        column_books = Gtk.TreeViewColumn(\"Books\", renderer_books, text=0)\n"
"        # and it is appended to the treeview\n"
"        view.append_column(column_books)\n"
"\n"
"        # the cellrenderer for the second column - boolean rendered as a toggle\n"
"        renderer_in_out = Gtk.CellRendererToggle()\n"
"        # the second column is created\n"
"        column_in_out = Gtk.TreeViewColumn(\"Out?\", renderer_in_out, active=1)\n"
"        # and it is appended to the treeview\n"
"        view.append_column(column_in_out)\n"
"        # connect the cellrenderertoggle with a callback function\n"
"        renderer_in_out.connect(\"toggled\", self.on_toggled)\n"
"\n"
"        # add the treeview to the window\n"
"        self.add(view)\n"
"\n"
"    # callback function for the signal emitted by the cellrenderertoggle\n"
"    def on_toggled(self, widget, path):\n"
"        # the boolean value of the selected row\n"
"        current_value = self.store[path][1]\n"
"        # change the boolean value of the selected row in the model\n"
"        self.store[path][1] = not current_value\n"
"        # new current value!\n"
"        current_value = not current_value\n"
"        # if length of the path is 1 (that is, if we are selecting an author)\n"
"        if len(path) == 1:\n"
"            # get the iter associated with the path\n"
"            piter = self.store.get_iter(path)\n"
"            # get the iter associated with its first child\n"
"            citer = self.store.iter_children(piter)\n"
"            # while there are children, change the state of their boolean value\n"
"            # to the value of the author\n"
"            while citer is not None:\n"
"                self.store[citer][1] = current_value\n"
"                citer = self.store.iter_next(citer)\n"
"        # if the length of the path is not 1 (that is, if we are selecting a book)\n"
"        elif len(path) != 1:\n"
"            # get the first child of the parent of the book (the first book of the author)\n"
"            citer = self.store.get_iter(path)\n"
"            piter = self.store.iter_parent(citer)\n"
"            citer = self.store.iter_children(piter)\n"
"            # check if all the children are selected\n"
"            all_selected = True\n"
"            while citer is not None:\n"
"                if self.store[citer][1] == False:\n"
"                    all_selected = False\n"
"                    break\n"
"                citer = self.store.iter_next(citer)\n"
"            # if they do, the author as well is selected; otherwise it is not\n"
"            self.store[piter][1] = all_selected\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/treeview_cellrenderertoggle.py.page:36(section/p)
msgid ""
"In line 48 the <code>\"toggled\"</code> signal is connected to the callback "
"function <code>on_toggled()</code> using <code><var>widget</var>.connect"
"(<var>signal</var>, <var>callback function</var>)</code>. See <link xref="
"\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""

#: C/treeview_cellrenderertoggle.py.page:45(item/p)
#: C/treeview_treestore.py.page:45(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeStore.html"
"\">GtkTreeStore</link>"
msgstr ""

#: C/treeview_cellrenderertoggle.py.page:47(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRendererToggle."
"html\">GtkCellRendererToggle</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/treeview_simple_liststore.js.page:24(media)
msgctxt "_"
msgid ""
"external ref='media/treeview_simple_liststore_penguins.png' "
"md5='d750a0b9fddf8e508753cc639839871d'"
msgstr ""

#: C/treeview_simple_liststore.js.page:7(info/title)
msgctxt "text"
msgid "TreeView with ListStore (JavaScript)"
msgstr ""

#: C/treeview_simple_liststore.js.page:20(info/desc)
msgid "A widget that shows a separate list of items"
msgstr ""

#: C/treeview_simple_liststore.js.page:23(page/title)
msgid "TreeView with ListStore"
msgstr ""

#: C/treeview_simple_liststore.js.page:25(page/p)
msgid ""
"A TreeView is like a window onto the contents of either a ListStore or a "
"TreeStore. A ListStore is like a spreadsheet: a \"flat\", two-dimensional "
"list of things broken up into rows and columns. A TreeStore, meanwhile, can "
"branch out in different directions like a tree can. In this example, we "
"create a TreeView that shows the contents of a ListStore with (fictitious) "
"names and phone numbers in it, and set it so that the <link xref=\"label.js"
"\">Label</link> at the bottom of the window shows more information about "
"whichever name you click on."
msgstr ""

#: C/treeview_simple_liststore.js.page:26(page/p)
msgid ""
"The TreeView is not just a single widget, but contains a number of smaller "
"ones:"
msgstr ""

#: C/treeview_simple_liststore.js.page:28(item/p)
msgid ""
"TreeViewColumn widgets show each (vertical) column of information from the "
"ListStore. Each one has a title which can be shown at the top of the column, "
"like in the screenshot."
msgstr ""

#: C/treeview_simple_liststore.js.page:29(item/p)
msgid ""
"CellRenderer widgets are \"packed\" into each TreeViewColumn, and contain the "
"instructions for how to display each individual \"cell\", or item from the "
"ListStore. There are multiple different types, including the CellRendererText "
"used here and the CellRendererPixbuf, which displays a picture (\"pixel buffer"
"\")."
msgstr ""

#: C/treeview_simple_liststore.js.page:31(page/p)
msgid ""
"Finally, we're going to use an object called a TreeIter, which isn't a widget "
"so much as an invisible cursor which points to a (horizontal) row in the "
"ListStore. Whenever you click on a name in the phonebook, for instance, we "
"create a TreeIter pointing to the row that's selected, and then use that to "
"tell the ListStore which entry we want the Label to show more information "
"about."
msgstr ""

#: C/treeview_simple_liststore.js.page:32(note/p)
msgid ""
"The TreeView is probably the most complicated Gtk widget, because of how many "
"parts it has and how they all have to work together. Give yourself time to "
"learn how it works and experiment with it, or try something easier first if "
"you're having trouble."
msgstr ""

#: C/treeview_simple_liststore.js.page:37(section/code)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"const Pango = imports.gi.Pango;\n"
msgstr ""

#: C/treeview_simple_liststore.js.page:50(section/code)
#, no-wrap
msgid ""
"\n"
"const TreeViewExample = new Lang.Class({\n"
"    Name: 'TreeView Example with Simple ListStore',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jstreeviewsimpleliststore'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""

#: C/treeview_simple_liststore.js.page:75(section/p)
msgid ""
"All the code for this sample goes in the TreeViewExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"Application.html\">Gtk.Application</link> for our widgets and window to go in."
msgstr ""

#: C/treeview_simple_liststore.js.page:76(section/code)
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 250,\n"
"            default_width: 100,\n"
"            border_width: 20,\n"
"            title: \"My Phone Book\"});\n"
msgstr ""

#: C/treeview_simple_liststore.js.page:94(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the underlying liststore for the phonebook\n"
"        this._listStore = new Gtk.ListStore ();\n"
"        this._listStore.set_column_types ([\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING]);\n"
msgstr ""

#: C/treeview_simple_liststore.js.page:103(section/p)
msgid ""
"We first create the ListStore like we would any widget. Then we call its "
"set_column_types method, and pass it an array of GObject data types. (We "
"could have put the types all on one line, but here we are breaking them up to "
"make it easier to read.)"
msgstr ""

#: C/treeview_simple_liststore.js.page:104(section/p)
msgid "The GObject data types you can use include:"
msgstr ""

#: C/treeview_simple_liststore.js.page:109(item/p)
msgid "<file>gtk.gdk.Pixbuf</file> -- A picture"
msgstr ""

#: C/treeview_simple_liststore.js.page:111(section/p)
msgid ""
"In this case, we're making a ListStore of four columns, each one containing "
"string values."
msgstr ""

#: C/treeview_simple_liststore.js.page:114(section/code)
#, no-wrap
msgid ""
"\n"
"        // Data to go in the phonebook\n"
"        this.phonebook =\n"
"        let phonebook =\n"
"            [{ name: \"Jurg\", surname: \"Billeter\", phone: \"555-0123\",\n"
"                description: \"A friendly person.\"},\n"
"             { name: \"Johannes\", surname: \"Schmid\", phone: \"555-1234\",\n"
"                description: \"Easy phone number to remember.\"},\n"
"             { name: \"Julita\", surname: \"Inca\", phone: \"555-2345\",\n"
"                description: \"Another friendly person.\"},\n"
"             { name: \"Javier\", surname: \"Jardon\", phone: \"555-3456\",\n"
"                description: \"Bring fish for his penguins.\"},\n"
"             { name: \"Jason\", surname: \"Clinton\", phone: \"555-4567\",\n"
"                description: \"His cake's not a lie.\"},\n"
"             { name: \"Random J.\", surname: \"Hacker\", phone: \"555-5678\",\n"
"                description: \"Very random!\"}];\n"
msgstr ""

#: C/treeview_simple_liststore.js.page:131(section/p)
msgid ""
"Here we have the information to go in the ListStore. It's an array of "
"objects, each one corresponding to a single entry in our phone book."
msgstr ""

#: C/treeview_simple_liststore.js.page:132(section/p)
msgid ""
"Note that the TreeView in the screenshot doesn't actually show the data from "
"the \"description\" properties. Instead, that information's shown in the "
"Label beneath it, for whichever row that you click on. That's because the "
"TreeView and ListStore are two separate things, and a TreeView can show all "
"or part of a ListStore, and display what's in it in different ways. You can "
"even have multiple widgets show things from the same ListStore, like the "
"Label in our example or even a second TreeView."
msgstr ""

#: C/treeview_simple_liststore.js.page:134(section/code)
#, no-wrap
msgid ""
"\n"
"        for (i = 0; i &lt; phonebook.length; i++ ) {\n"
"            let contact = phonebook [i];\n"
"            this._listStore.set (this._listStore.append(), [0, 1, 2, 3],\n"
"                [contact.name, contact.surname, contact.phone, contact.description]);\n"
"        }\n"
msgstr ""

#: C/treeview_simple_liststore.js.page:141(section/p)
msgid ""
"This <file>for</file> loop puts the strings from our phonebook into our "
"ListStore in order. In order, we pass the ListStore's set method the iter "
"that points to the correct row, an array which says which columns we want to "
"set, and an array which contains the data we want to put into those columns."
msgstr ""

#: C/treeview_simple_liststore.js.page:142(section/p)
msgid ""
"A ListStore's <file>append</file> method adds a horizontal row onto it (it "
"starts out with none), and returns a TreeIter pointing to that row like a "
"cursor. So by passing <file>this._listStore.append()</file> to the ListStore "
"as a property, we're creating a new row and telling the <file>set</file> "
"method which row to set data for at the same time."
msgstr ""

#: C/treeview_simple_liststore.js.page:147(section/title)
#, fuzzy
#| msgid "Creating the user interface"
msgid "Creating the TreeView"
msgstr "Erstellen der Benutzeroberfläche"

#: C/treeview_simple_liststore.js.page:148(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the treeview\n"
"        this._treeView = new Gtk.TreeView ({\n"
"            expand: true,\n"
"            model: this._listStore });\n"
msgstr ""

#: C/treeview_simple_liststore.js.page:154(section/p)
msgid ""
"Here we create a basic TreeView widget, that expands both horizontally and "
"vertically to use as much space as needed. We set it to use the ListStore we "
"created as its \"model\", or the thing it'll show us stuff from."
msgstr ""

#: C/treeview_simple_liststore.js.page:156(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the columns for the address book\n"
"        let firstName = new Gtk.TreeViewColumn ({ title: \"First Name\" });\n"
"        let lastName = new Gtk.TreeViewColumn ({ title: \"Last Name\" });\n"
"        let phone = new Gtk.TreeViewColumn ({ title: \"Phone Number\" });\n"
msgstr ""

#: C/treeview_simple_liststore.js.page:162(section/p)
msgid ""
"Now we create each of the vertical TreeViewColumns we'll see in the TreeView. "
"The title for each one goes at the top, as you can see in the screenshot."
msgstr ""

#: C/treeview_simple_liststore.js.page:164(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a cell renderer for when bold text is needed\n"
"        let bold = new Gtk.CellRendererText ({\n"
"            weight: Pango.Weight.BOLD });\n"
"\n"
"        // Create a cell renderer for normal text\n"
"        let normal = new Gtk.CellRendererText ();\n"
"\n"
"        // Pack the cell renderers into the columns\n"
"        firstName.pack_start (bold, true);\n"
"        lastName.pack_start (normal, true);\n"
"        phone.pack_start (normal, true);\n"
msgstr ""

#: C/treeview_simple_liststore.js.page:177(section/p)
msgid ""
"Here we create the CellRenderers that we'll use to display the text from our "
"ListStore, and pack them into the TreeViewColumns. Each CellRendererText is "
"used for all the entries in that column. Our normal CellRendererText just "
"creates plain text, while our bold one uses heavier-weight text. We put it "
"into the first name column, and tell the other two to use copies of the "
"normal one. The \"true\" used as the second parameter for the "
"<file>pack_start</file> method tells it to expand the cells when possible, "
"instead of keeping them compact."
msgstr ""

#: C/treeview_simple_liststore.js.page:178(note/p)
msgid ""
"<link href=\"http://www.pygtk.org/docs/pygtk/pango-constants.html\">Here is a "
"list</link> of other text properties you can use. In order to use these Pango "
"constants, make sure to put the line <file>const Pango = imports.gi.Pango;</"
"file> at the beginning of your code like we did."
msgstr ""

#: C/treeview_simple_liststore.js.page:180(section/code)
#, no-wrap
msgid ""
"\n"
"        firstName.add_attribute (bold, \"text\", 0);\n"
"        lastName.add_attribute (normal, \"text\", 1);\n"
"        phone.add_attribute (normal, \"text\", 2);\n"
"\n"
"        // Insert the columns into the treeview\n"
"        this._treeView.insert_column (firstName, 0);\n"
"        this._treeView.insert_column (lastName, 1);\n"
"        this._treeView.insert_column (phone, 2);\n"
msgstr ""

#: C/treeview_simple_liststore.js.page:190(section/p)
msgid ""
"Now that we've put the CellRenderers into the TreeViewColumns, we use the "
"<file>add_attribute</file> method to tell each column to pull in text from "
"the model our TreeView is set to use; in this case, the ListStore with the "
"phonebook."
msgstr ""

#: C/treeview_simple_liststore.js.page:192(item/p)
msgid ""
"The first parameter is which CellRenderer we're going to use to render what "
"we're pulling in."
msgstr ""

#: C/treeview_simple_liststore.js.page:193(item/p)
msgid ""
"The second parameter is what kind of information we're going to pull in. In "
"this case, we're letting it know that we're rendering text."
msgstr ""

#: C/treeview_simple_liststore.js.page:194(item/p)
msgid ""
"The third parameter is which of the ListStore's columns we're pulling that "
"information in from."
msgstr ""

#: C/treeview_simple_liststore.js.page:196(section/p)
msgid ""
"After we've set that up, we use the TreeView's <file>insert_column</file> "
"method to put our TreeViewColumns inside it in order. Our TreeView is now "
"complete."
msgstr ""

#: C/treeview_simple_liststore.js.page:197(note/p)
msgid ""
"Normally, you might want to use a loop to initialize your TreeView, but in "
"this example we're spelling things out step by step for the sake of making it "
"easier to understand."
msgstr ""

#: C/treeview_simple_liststore.js.page:201(section/title)
msgid "Building the rest of the UI"
msgstr ""

#: C/treeview_simple_liststore.js.page:202(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create the label that shows details for the name you select\n"
"        this._label = new Gtk.Label ({ label: \"\" });\n"
"\n"
"        // Get which item is selected\n"
"        this.selection = this._treeView.get_selection();\n"
"\n"
"        // When something new is selected, call _on_changed\n"
"        this.selection.connect ('changed', Lang.bind (this, this._onSelectionChanged));\n"
msgstr ""

#: C/treeview_simple_liststore.js.page:212(section/p)
msgid ""
"The TreeView's <file>get_selection</file> method returns an object called a "
"TreeSelection. A TreeSelection is like a TreeIter in that it's basically a "
"cursor that points at a particular row, except that the one it points to is "
"the one that's visibly highlighted as selected."
msgstr ""

#: C/treeview_simple_liststore.js.page:213(section/p)
msgid ""
"After we get the TreeSelection that goes with our TreeView, we ask it to tell "
"us when it changes which row it's pointing to. We do this by connecting its "
"<file>changed</file> signal to the _onSelectionChanged function we wrote. "
"This function changes the text displayed by the Label we just made."
msgstr ""

#: C/treeview_simple_liststore.js.page:215(section/code)
#, no-wrap
msgid ""
"\n"
"        // Create a grid to organize everything in\n"
"        this._grid = new Gtk.Grid;\n"
"\n"
"        // Attach the treeview and label to the grid\n"
"        this._grid.attach (this._treeView, 0, 0, 1, 1);\n"
"        this._grid.attach (this._label, 0, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""

#: C/treeview_simple_liststore.js.page:230(section/p)
msgid ""
"After we've gotten that out of the way, we create a <link xref=\"grid.js"
"\">Grid</link> to put everything in, then add it to our window and tell the "
"window to show itself and its contents."
msgstr ""

#: C/treeview_simple_liststore.js.page:234(section/title)
msgid "Function which handles a changed selection"
msgstr ""

#: C/treeview_simple_liststore.js.page:236(section/code)
#, no-wrap
msgid ""
"\n"
"    _onSelectionChanged: function () {\n"
"\n"
"        // Grab a treeiter pointing to the current selection\n"
"        let [ isSelected, model, iter ] = this.selection.get_selected();\n"
"\n"
"        // Set the label to read off the values stored in the current selection\n"
"        this._label.set_label (\"\\n\" +\n"
"            this._listStore.get_value (iter, 0) + \" \" +\n"
"            this._listStore.get_value (iter, 1) + \" \" +\n"
"            this._listStore.get_value (iter, 2) + \"\\n\" +\n"
"            this._listStore.get_value (iter, 3));\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""

#: C/treeview_simple_liststore.js.page:253(section/p)
msgid ""
"The line of code with the let statement is a little convoluted, but it's "
"nonetheless the best way to get a TreeIter pointing to the same row as our "
"TreeSelection. It has to create a couple of other object references, but "
"<file>iter</file> is the only one we need."
msgstr ""

#: C/treeview_simple_liststore.js.page:254(section/p)
msgid ""
"After we've done that, we call the Label's <file>set_label</file> function, "
"and use the ListStore's <file>get_value</file> function a handful of times to "
"fill in the data we want to put in it. Its parameters are a TreeIter pointing "
"to the row we want to get data from, and the column."
msgstr ""

#: C/treeview_simple_liststore.js.page:255(section/p)
msgid ""
"Here, we want to get data from all four columns, including the \"hidden\" one "
"that's not part of the TreeView. This way, we can use our Label to show "
"strings that are too large to fit in the TreeView, and that we don't need to "
"see at a glance."
msgstr ""

#: C/treeview_simple_liststore.js.page:257(section/code)
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new TreeViewExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/treeview_simple_liststore.js.page:262(section/p)
msgid ""
"Finally, we create a new instance of the finished TreeViewExample class, and "
"set the application running."
msgstr ""

#: C/treeview_simple_liststore.js.page:267(section/code)
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"const Pango = imports.gi.Pango;\n"
"\n"
"const TreeViewExample = new Lang.Class({\n"
"    Name: 'TreeView Example with Simple ListStore',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jstreeviewsimpleliststore'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 250,\n"
"            default_width: 100,\n"
"            border_width: 20,\n"
"            title: \"My Phone Book\"});\n"
"\n"
"        // Create the underlying liststore for the phonebook\n"
"        this._listStore = new Gtk.ListStore ();\n"
"        this._listStore.set_column_types ([\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING]);\n"
"\n"
"        // Data to go in the phonebook\n"
"        let phonebook =\n"
"            [{ name: \"Jurg\", surname: \"Billeter\", phone: \"555-0123\",\n"
"                description: \"A friendly person.\"},\n"
"             { name: \"Johannes\", surname: \"Schmid\", phone: \"555-1234\",\n"
"                description: \"Easy phone number to remember.\"},\n"
"             { name: \"Julita\", surname: \"Inca\", phone: \"555-2345\",\n"
"                description: \"Another friendly person.\"},\n"
"             { name: \"Javier\", surname: \"Jardon\", phone: \"555-3456\",\n"
"                description: \"Bring fish for his penguins.\"},\n"
"             { name: \"Jason\", surname: \"Clinton\", phone: \"555-4567\",\n"
"                description: \"His cake's not a lie.\"},\n"
"             { name: \"Random J.\", surname: \"Hacker\", phone: \"555-5678\",\n"
"                description: \"Very random!\"}];\n"
"\n"
"        // Put the data in the phonebook\n"
"        for (let i = 0; i &lt; phonebook.length; i++ ) {\n"
"            let contact = phonebook [i];\n"
"            this._listStore.set (this._listStore.append(), [0, 1, 2, 3],\n"
"                [contact.name, contact.surname, contact.phone, contact.description]);\n"
"        }\n"
"\n"
"        // Create the treeview\n"
"        this._treeView = new Gtk.TreeView ({\n"
"            expand: true,\n"
"            model: this._listStore });\n"
"\n"
"        // Create the columns for the address book\n"
"        let firstName = new Gtk.TreeViewColumn ({ title: \"First Name\" });\n"
"        let lastName = new Gtk.TreeViewColumn ({ title: \"Last Name\" });\n"
"        let phone = new Gtk.TreeViewColumn ({ title: \"Phone Number\" });\n"
"\n"
"        // Create a cell renderer for when bold text is needed\n"
"        let bold = new Gtk.CellRendererText ({\n"
"            weight: Pango.Weight.BOLD });\n"
"\n"
"        // Create a cell renderer for normal text\n"
"        let normal = new Gtk.CellRendererText ();\n"
"\n"
"        // Pack the cell renderers into the columns\n"
"        firstName.pack_start (bold, true);\n"
"        lastName.pack_start (normal, true);\n"
"        phone.pack_start (normal, true);\n"
"\n"
"        // Set each column to pull text from the TreeView's model\n"
"        firstName.add_attribute (bold, \"text\", 0);\n"
"        lastName.add_attribute (normal, \"text\", 1);\n"
"        phone.add_attribute (normal, \"text\", 2);\n"
"\n"
"        // Insert the columns into the treeview\n"
"        this._treeView.insert_column (firstName, 0);\n"
"        this._treeView.insert_column (lastName, 1);\n"
"        this._treeView.insert_column (phone, 2);\n"
"\n"
"        // Create the label that shows details for the name you select\n"
"        this._label = new Gtk.Label ({ label: \"\" });\n"
"\n"
"        // Get which item is selected\n"
"        this.selection = this._treeView.get_selection();\n"
"\n"
"        // When something new is selected, call _on_changed\n"
"        this.selection.connect ('changed', Lang.bind (this, this._onSelectionChanged));\n"
"\n"
"        // Create a grid to organize everything in\n"
"        this._grid = new Gtk.Grid;\n"
"\n"
"        // Attach the treeview and label to the grid\n"
"        this._grid.attach (this._treeView, 0, 0, 1, 1);\n"
"        this._grid.attach (this._label, 0, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onSelectionChanged: function () {\n"
"\n"
"        // Grab a treeiter pointing to the current selection\n"
"        let [ isSelected, model, iter ] = this.selection.get_selected();\n"
"\n"
"        // Set the label to read off the values stored in the current selection\n"
"        this._label.set_label (\"\\n\" +\n"
"            this._listStore.get_value (iter, 0) + \" \" +\n"
"            this._listStore.get_value (iter, 1) + \" \" +\n"
"            this._listStore.get_value (iter, 2) + \"\\n\" +\n"
"            this._listStore.get_value (iter, 3));\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new TreeViewExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/treeview_simple_liststore.js.page:281(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TreeSelection."
"html\">Gtk.TreeSelection</link>"
msgstr ""

#: C/treeview_simple_liststore.js.page:282(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TreeView.html"
"\">Gtk.TreeView</link>"
msgstr ""

#: C/treeview_simple_liststore.js.page:283(item/p)
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TreeViewColumn."
"html\">Gtk.TreeViewColumn</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#.
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/treeview_simple_liststore.py.page:23(media)
#: C/treeview_simple_liststore.vala.page:23(media)
msgctxt "_"
msgid ""
"external ref='media/treeview_simple_liststore.png' "
"md5='2dc501a2b95b094da985d37b66aee90c'"
msgstr ""

#: C/treeview_simple_liststore.py.page:7(info/title)
msgctxt "text"
msgid "Simple TreeView with ListStore (Python)"
msgstr ""

#: C/treeview_simple_liststore.py.page:19(info/desc)
msgid "A TreeView displaying a ListStore (simpler example)"
msgstr ""

#: C/treeview_simple_liststore.py.page:22(page/title)
msgid "Simple TreeView with ListStore"
msgstr ""

#: C/treeview_simple_liststore.py.page:31(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Pango\n"
"import sys\n"
"\n"
"columns = [\"First Name\",\n"
"           \"Last Name\",\n"
"           \"Phone Number\"]\n"
"\n"
"phonebook = [[\"Jurg\", \"Billeter\", \"555-0123\"],\n"
"             [\"Johannes\", \"Schmid\", \"555-1234\"],\n"
"             [\"Julita\", \"Inca\", \"555-2345\"],\n"
"             [\"Javier\", \"Jardon\", \"555-3456\"],\n"
"             [\"Jason\", \"Clinton\", \"555-4567\"],\n"
"             [\"Random J.\", \"Hacker\", \"555-5678\"]]\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"My Phone Book\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data in the model (three strings for each row, one for each column)\n"
"        listmodel = Gtk.ListStore(str, str, str)\n"
"        # append the values in the model\n"
"        for i in range(len(phonebook)):\n"
"            listmodel.append(phonebook[i])\n"
"\n"
"        # a treeview to see the data stored in the model\n"
"        view = Gtk.TreeView(model=listmodel)\n"
"        # for each column\n"
"        for i in range(len(columns)):\n"
"            # cellrenderer to render the text\n"
"            cell = Gtk.CellRendererText()\n"
"            # the text in the first column should be in boldface\n"
"            if i == 0:\n"
"                cell.props.weight_set=True\n"
"                cell.props.weight=Pango.Weight.BOLD\n"
"            # the column is created\n"
"            col = Gtk.TreeViewColumn(columns[i], cell, text=i)\n"
"            # and it is appended to the treeview\n"
"            view.append_column(col)\n"
"\n"
"        # when a row is selected, it emits a signal\n"
"        view.get_selection().connect(\"changed\", self.on_changed)\n"
"\n"
"        # the label we use to show the selection\n"
"        self.label = Gtk.Label()\n"
"        self.label.set_text(\"\")\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(view, 0, 0, 1, 1)\n"
"        grid.attach(self.label, 0, 1, 1, 1)\n"
"\n"
"        # attach the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    def on_changed(self, selection):\n"
"        # get the model and the iterator that points at the data in the model\n"
"        (model, iter) = selection.get_selected()\n"
"        # set the label to a new value depending on the selection\n"
"        self.label.set_text(\"\\n %s %s %s\" %(model[iter][0],  model[iter][1], model[iter][2]))\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/treeview_simple_liststore.py.page:36(section/p)
msgid ""
"The TreeView widget is designed around a <em>Model/View/Controller</em> "
"design: the <em>Model</em> stores the data; the <em>View</em> gets change "
"notifications and displays the content of the model; the <em>Controller</em>, "
"finally, changes the state of the model and notifies the view of these "
"changes. For more information, and for a list of useful methods for "
"TreeModel, see <link xref=\"model-view-controller.py\"/>."
msgstr ""

#: C/treeview_simple_liststore.py.page:37(section/p)
msgid ""
"In line 44 the <code>\"changed\"</code> signal is connected to the callback "
"function <code>on_changed()</code> using <code><var>widget</var>.connect"
"(<var>signal</var>, <var>callback function</var>)</code>. See <link xref="
"\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""

#: C/treeview_simple_liststore.py.page:50(item/p)
msgid ""
"<link href=\"http://developer.gnome.org/pango/stable/pango-Fonts.html"
"\">Fonts</link>"
msgstr ""

#: C/treeview_simple_liststore.vala.page:7(info/title)
msgctxt "text"
msgid "Simple Treeview with ListStore (Vala)"
msgstr ""

#: C/treeview_simple_liststore.vala.page:19(info/desc)
msgid "A widget can display any TreeModel implementation (lists and trees)"
msgstr ""

#: C/treeview_simple_liststore.vala.page:22(page/title)
msgid "Simple Treeview with ListStore"
msgstr ""

#: C/treeview_simple_liststore.vala.page:24(page/p)
msgid ""
"This TreeView displays a simple ListStore with the Selection \"changed\" "
"signal connected."
msgstr ""

#: C/treeview_simple_liststore.vala.page:26(page/code)
#, no-wrap
msgid ""
"public class PhoneBookEntry {\n"
"\tpublic string firstname;\n"
"\tpublic string lastname;\n"
"\tpublic string phone;\n"
"\n"
"\tpublic PhoneBookEntry (string f, string l, string p) {\n"
"\t\tthis.firstname = f;\n"
"\t\tthis.lastname = l;\n"
"\t\tthis.phone = p;\n"
"\t}\n"
"}\n"
"\n"
"class TreeViewSimpleListStore : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Label label;\n"
"\n"
"\tPhoneBookEntry[] phonebook = {\n"
"\t\tnew PhoneBookEntry (\"Jurg\", \"Billeter\", \"555-0123\"),\n"
"\t\tnew PhoneBookEntry (\"Johannes\", \"Schmid\", \"555-1234\"),\n"
"\t\tnew PhoneBookEntry (\"Julita\", \"Inca\", \"555-2345\"),\n"
"\t\tnew PhoneBookEntry (\"Javier\", \"Jardon\", \"555-3456\"),\n"
"\t\tnew PhoneBookEntry (\"Jason\", \"Clinton\", \"555-4567\"),\n"
"\t\tnew PhoneBookEntry (\"Random J.\", \"Hacker\", \"555-5678\")\n"
"\t};\n"
"\n"
"\tenum Column {\n"
"\t\tFIRSTNAME,\n"
"\t\tLASTNAME,\n"
"\t\tPHONE\n"
"\t}\n"
"\n"
"\tinternal TreeViewSimpleListStore (MyApplication app) {\n"
"\t\tObject (application: app, title: \"My Phone Book\");\n"
"\n"
"\t\tthis.set_default_size (250, 100);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tvar view = new Gtk.TreeView ();\n"
"\t\tthis.setup_treeview (view);\n"
"\t\tview.expand = true;\n"
"\n"
"\t\tlabel = new Gtk.Label (\"\");\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\n"
"\t\tgrid.attach (view, 0, 0, 1, 1);\n"
"\t\tgrid.attach (label, 0, 1, 1, 1);\n"
"\t\tthis.add (grid);\n"
"\n"
"\t\tvar selection = view.get_selection ();\n"
"\t\tselection.changed.connect (this.on_changed);\n"
"\t}\n"
"\n"
"\tvoid setup_treeview (Gtk.TreeView view) {\n"
"\t\tvar listmodel = new Gtk.ListStore (3, typeof (string),\n"
"                                              typeof (string),\n"
"                                              typeof (string));\n"
"\t\tview.set_model (listmodel);\n"
"\n"
"\t\tvar cell = new Gtk.CellRendererText ();\n"
"\n"
"\t\t/* 'weight' refers to font boldness.\n"
"\t\t *  400 is normal.\n"
"\t\t *  700 is bold.\n"
"\t\t */\n"
"\t\tcell.set (\"weight_set\", true);\n"
"\t\tcell.set (\"weight\", 700);\n"
"\n"
"\t\t/*columns*/\n"
"\t\tview.insert_column_with_attributes (-1, \"First Name\",\n"
"                                                cell, \"text\",\n"
"                                                Column.FIRSTNAME);\n"
"\n"
"\t\tview.insert_column_with_attributes (-1, \"Last Name\",\n"
"                                                new Gtk.CellRendererText (),\n"
"                                                \"text\", Column.LASTNAME);\n"
"\n"
"\t\tview.insert_column_with_attributes (-1, \"Phone Number\",\n"
"                                                new Gtk.CellRendererText (),\n"
"                                                \"text\", Column.PHONE);\n"
"\n"
"\t\t/* Insert the phonebook into the ListStore */\n"
"\t\tGtk.TreeIter iter;\n"
"\t\tfor (int i = 0; i &lt; phonebook.length; i++) {\n"
"\t\t\tlistmodel.append (out iter);\n"
"\t\t\tlistmodel.set (iter, Column.FIRSTNAME,\n"
"                                 phonebook[i].firstname,\n"
"                                 Column.LASTNAME, phonebook[i].lastname,\n"
"                                 Column.PHONE, phonebook[i].phone);\n"
"\t\t}\n"
"\t}\n"
"\n"
"\tvoid on_changed (Gtk.TreeSelection selection) {\n"
"\t\tGtk.TreeModel model;\n"
"\t\tGtk.TreeIter iter;\n"
"\t\tstring name;\n"
"\t\tstring lastname;\n"
"\t\tstring phone;\n"
"\n"
"\t\tif (selection.get_selected (out model, out iter)) {\n"
"\t\t\tmodel.get (iter,\n"
"                                   Column.FIRSTNAME, out name,\n"
"                                   Column.LASTNAME, out lastname,\n"
"                                   Column.PHONE, out phone);\n"
"\n"
"\t\t\tlabel.set_text (\"\\n\" + name + \" \" + lastname + \" \" + phone);\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create new Window and show all the things. */\n"
"\t\tnew TreeViewSimpleListStore (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"example.liststore.simple.treeview\");\n"
"\t}\n"
"}\n"
"\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""

#: C/treeview_simple_liststore.vala.page:31(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.TreeView.html\">Gtk."
"TreeView</link>"
msgstr ""

#: C/treeview_simple_liststore.vala.page:33(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.TreeSelection.html\">Gtk."
"TreeSelection</link>"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/treeview_treestore.py.page:23(media)
msgctxt "_"
msgid ""
"external ref='media/treeview_treestore.png' "
"md5='5ca87bc4acd55c527b3fb5fd46779d85'"
msgstr ""

#: C/treeview_treestore.py.page:19(info/desc)
msgid "A TreeView displaying a TreeStore (simpler example)"
msgstr ""

#: C/treeview_treestore.py.page:22(page/title)
msgid "Simpler TreeView with TreeStore"
msgstr ""

#: C/treeview_treestore.py.page:24(page/p)
msgid "This TreeView displays a TreeStore."
msgstr ""

#: C/treeview_treestore.py.page:31(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Pango\n"
"import sys\n"
"\n"
"books = [[\"Tolstoy, Leo\", \"War and Peace\", \"Anna Karenina\"],\n"
"         [\"Shakespeare, William\", \"Hamlet\", \"Macbeth\", \"Othello\"],\n"
"         [\"Tolkien, J.R.R.\", \"The Lord of the Rings\"]]\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Library\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data are stored in the model\n"
"        # create a treestore with one column\n"
"        store = Gtk.TreeStore(str)\n"
"        for i in range(len(books)):\n"
"            # the iter piter is returned when appending the author\n"
"            piter = store.append(None, [books[i][0]])\n"
"            # append the books as children of the author\n"
"            j = 1\n"
"            while j &lt; len(books[i]):\n"
"                store.append(piter, [books[i][j]])\n"
"                j += 1\n"
"\n"
"        # the treeview shows the model\n"
"        # create a treeview on the model store\n"
"        view = Gtk.TreeView()\n"
"        view.set_model(store)\n"
"\n"
"        # the cellrenderer for the column - text\n"
"        renderer_books = Gtk.CellRendererText()\n"
"        # the column is created\n"
"        column_books = Gtk.TreeViewColumn(\"Books by Author\", renderer_books, text=0)\n"
"        # and it is appended to the treeview\n"
"        view.append_column(column_books)\n"
"\n"
"        # the books are sortable by author\n"
"        column_books.set_sort_column_id(0)\n"
"\n"
"        # add the treeview to the window\n"
"        self.add(view)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/translate.page:15(credit/name)
msgid "Michael Hill"
msgstr "Michael Hill"

#: C/translate.page:23(page/title)
msgid "Help translate"
msgstr "Beim Übersetzen helfen"

#: C/translate.page:24(page/p)
msgid ""
"The <app>Tutorial Demos</app> are being translated by a world-wide volunteer "
"community. You are welcome to participate."
msgstr ""

#: C/translate.page:27(page/p)
msgid ""
"There are <link href=\"http://l10n.gnome.org/module/gnome-devel-docs/\">many "
"languages</link> for which translations are still needed."
msgstr ""

#: C/translate.page:30(page/p)
msgid ""
"To start translating you will need to <link href=\"http://l10n.gnome.org"
"\">create an account</link> and join the <link href=\"http://l10n.gnome.org/"
"teams/\">translation team</link> for your language. This will give you the "
"ability to upload new translations."
msgstr ""

#: C/translate.page:34(page/p)
msgid ""
"You can chat with GNOME translators using <link href=\"https://cbe003.chat."
"mibbit.com/?url=irc%3A%2F%2Firc.gnome.org%2Fi18n\">irc</link>. People on the "
"channel are located worldwide, so you may not get an immediate response as a "
"result of timezone differences."
msgstr ""

#: C/translate.page:37(page/p)
msgid ""
"Alternatively, you can contact the Internationalization Team using their "
"<link href=\"http://mail.gnome.org/mailman/listinfo/gnome-i18n\">mailing "
"list</link>."
msgstr ""

#: C/tutorial.py.page:8(info/title)
msgctxt "text"
msgid "Tutorial for beginners (Python)"
msgstr "Tutorial für Einsteiger (Python)"

#: C/tutorial.py.page:12(info/desc)
msgid ""
"A tutorial for beginners who want to learn how to program GUIs using GTK+ in "
"Python."
msgstr ""

#: C/tutorial.py.page:21(credit/years)
msgid "2012 2013"
msgstr "2012 2013"

#: C/tutorial.py.page:24(credit/name)
msgid "Jim Campbell"
msgstr "Jim Campbell"

#: C/tutorial.py.page:33(synopsis/p)
msgid ""
"By following these tutorials you will learn the basics of GUI programming "
"using GTK+ in Python."
msgstr ""

#: C/tutorial.py.page:35(synopsis/p)
msgid ""
"If you have never programmed before, or are not familiar with the concepts of "
"object oriented programming, you may need to learn a few basics first. The "
"book <link href=\"http://learnpythonthehardway.org/book/\">Learn Python the "
"Hard Way</link> or <link href=\"http://docs.python.org/tutorial/index.html"
"\">The Python Tutorial</link> may be a better place for you to start. You may "
"also be interested in <link href=\"http://python-gtk-3-tutorial.readthedocs."
"org/en/latest/index.html\">The Python GTK+ 3 Tutorial</link>. Once you master "
"the basics, be sure to come back and check out these tutorials."
msgstr ""

#: C/tutorial.py.page:41(section/title)
msgid "To run the code samples"
msgstr ""

#: C/tutorial.py.page:43(section/p)
msgid "To run the code samples in the tutorial:"
msgstr ""

#: C/tutorial.py.page:45(item/p)
msgid ""
"Type or copy and paste the code into a file, and save the file with a name "
"like <var>filename</var>.py"
msgstr ""

#: C/tutorial.py.page:46(item/p)
msgid "To execute the code, type in the terminal:"
msgstr ""

#: C/tutorial.py.page:47(item/screen)
#, no-wrap
msgid "python <var>filename</var>.py"
msgstr "python <var>dateiname</var>.py"

#: C/tutorial.py.page:50(section/p)
msgid ""
"After executing the code, you will either see the widget on your screen, or "
"(if you have mistyped some of the code) you will see an error message that "
"will help you identify the problem."
msgstr ""

#: C/tutorial.py.page:54(section/title)
msgid "A path through the widgets (with some theory)"
msgstr ""

#: C/tutorial.py.page:55(section/p)
msgid ""
"The tutorial will walk you through increasingly complex examples and "
"programming theory, but you can also feel free to just go directly to the "
"tutorial that is most helpful to you."
msgstr ""

#: C/tutorial.py.page:57(steps/title)
msgid "Tutorial"
msgstr "Tutorial"

#: C/tutorial.py.page:59(steps/title)
msgid "Basic windows"
msgstr "Einfache Fenster"

#: C/tutorial.py.page:64(steps/title)
msgid "Images and labels"
msgstr ""

#: C/tutorial.py.page:70(steps/title)
#, fuzzy
#| msgid "Introduction"
msgid "Introduction to properties"
msgstr "Einführung"

#: C/tutorial.py.page:74(steps/title)
msgid "Grid, separator and scrolling"
msgstr ""

#: C/tutorial.py.page:81(steps/title)
msgid "Signals, callbacks and buttons"
msgstr ""

#: C/tutorial.py.page:95(steps/title)
msgid "Other display widgets"
msgstr ""

#: C/tutorial.py.page:101(steps/title)
msgid "Entry widgets"
msgstr ""

#: C/tutorial.py.page:107(steps/title)
msgid "A widget to write and display text"
msgstr ""

#: C/tutorial.py.page:111(steps/title)
msgid "Dialogs"
msgstr "Dialoge"

#: C/tutorial.py.page:117(steps/title)
msgid "Menus, Toolbars and Tooltips (also: using Glade and GtkBuilder)"
msgstr ""

#: C/tutorial.py.page:132(steps/title)
msgid "TreeViews and ComboBoxes (using the M/V/C design)"
msgstr ""

#: C/tutorial.py.page:142(steps/title)
msgid "Custom widget"
msgstr ""

#: C/vala.page:6(info/title)
msgctxt "link"
msgid "Vala"
msgstr "Vala"

#: C/vala.page:20(page/title)
msgid "Tutorials, code samples and platform demos in Vala"
msgstr ""

#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/weatherApp.js.page:40(media)
msgctxt "_"
msgid ""
"external ref='media/weatherAppJs.png' md5='1fe859ac4854273d72ea8fc9203639b2'"
msgstr ""

#: C/weatherApp.js.page:6(info/title)
#, fuzzy
#| msgid "Classes in JavaScript"
msgctxt "text"
msgid "Weather application (JavaScript)"
msgstr "Klassen in JavaScript"

#: C/weatherApp.js.page:21(info/desc)
msgid ""
"How to plan an application that uses asynchronous calls. Asynchronous calls "
"will be presented through a weather application."
msgstr ""

#: C/weatherApp.js.page:26(page/title)
#, fuzzy
#| msgid "Run the application"
msgid "Weather application"
msgstr "Anwendung ausführen"

#: C/weatherApp.js.page:28(synopsis/p)
msgid ""
"In this guide well construct a weather application using asynchronous calls. "
"Weather information in this example is fetched from geonames.org and the "
"application is using the <link href=\"http://en.wikipedia.org/wiki/"
"List_of_airports_by_ICAO_code:_E\">ICAO codes </link> to place your weather "
"request. To write and run all the code examples yourself, you need an editor "
"to write code in, Terminal and GNOME 3 or higher installed into your "
"computer. In this guide we we'll go through the following parts:"
msgstr ""

#: C/weatherApp.js.page:31(item/p)
msgid "<link xref=\"#planningUi\">Planning the graphical user interface</link>"
msgstr ""

#: C/weatherApp.js.page:32(item/p)
msgid "<link xref=\"#asynchronous\">Asynchronous calls</link>"
msgstr ""

#: C/weatherApp.js.page:33(item/p)
msgid "<link xref=\"#main\">The main program file</link>"
msgstr ""

#: C/weatherApp.js.page:34(item/p)
msgid "<link xref=\"#main\">Local library GeoNames</link>"
msgstr ""

#: C/weatherApp.js.page:35(item/p)
msgid "<link xref=\"#main\">Autotools and Icons</link>"
msgstr "<link xref=\"#main\">Autotools und Symbole</link>"

#: C/weatherApp.js.page:43(section/title)
msgid "Planning the graphical user interface"
msgstr "Planung der grafischen Benutzeroberfläche"

#: C/weatherApp.js.page:44(section/p)
msgid ""
"Structuring an application for GNOME 3 means you will be using <link href="
"\"http://developer.gnome.org/platform-overview/stable/gtk\">GTK+</link>. The "
"most important thing is to remember that the main window will only accept one "
"widget. You must plan your structure accordingly (this example is using Gtk."
"Grid). A useful method is to draw out the main window and place every widget "
"needed inside that box. By looking at an image of your future application it "
"is easier to tell what are the relations between widgets. For example Gtk."
"Grid places your widgets in relation to other widgets, so after the first "
"widget is in place, placing widgets can be done in relation to any widget on "
"the grid."
msgstr ""

#: C/weatherApp.js.page:47(section/title)
msgid "Asynchronous calls"
msgstr "Asynchrone Aufrufe"

#: C/weatherApp.js.page:48(section/p)
msgid ""
"With many programming languages, all operations are run synchronously - you "
"tell the program to do something, and it will wait until that action "
"completes before proceeding. This is however bad for graphical user "
"interfaces, as then the whole application will be frozen while the program "
"waits for the operation. Going asynchronous (async) helps here. With async "
"calls, your UI won't be blocked with any requests. Async calls make your "
"application more flexible and better equipped to handle situations when calls "
"take more time than expected or for some reason get jammed. Async calls can "
"be used for example file system I/O and for slower calculations in the "
"background."
msgstr ""

#: C/weatherApp.js.page:51(section/p)
msgid ""
"In this example we have to get data from geonames.org. While we do that we "
"want the rest of our program to continue. If we wouldn't get any information "
"from geonames.org for the lack of internet connection and this would be a "
"synchronous application we would never get to the point where our main_quit() "
"is processed correctly and the application would have to killed from Terminal."
msgstr ""

#: C/weatherApp.js.page:54(section/title)
msgid "The different parts of the program"
msgstr "Die verschiedenen Teile des Programms"

#: C/weatherAppMain.js.page:18(page/title)
msgid "The main program file"
msgstr ""

#: C/weatherAppMain.js.page:20(synopsis/p)
msgid ""
"In this part of the guide well construct the main program file of the weather "
"application. To write and run all the code examples yourself, you need an "
"editor to write code in, Terminal and GNOME 3 or higher installed into your "
"computer. In this part we we'll go through the following parts:"
msgstr ""

#: C/weatherAppMain.js.page:25(item/p)
msgid ""
"<link xref=\"#widgets\">Adding a grid and all the necessary widgets to it</"
"link>"
msgstr ""

#: C/weatherAppMain.js.page:26(item/p)
msgid ""
"<link xref=\"#asynccall\">Requesting the weather information asynchronously</"
"link>"
msgstr ""

#: C/weatherAppMain.js.page:27(item/p)
msgid ""
"<link xref=\"#connectingbuttons\">Connecting signals to button and entry</"
"link>."
msgstr ""

#: C/weatherAppMain.js.page:28(item/p)
msgid "<link xref=\"#weatherapp.js\">weatherapp.js</link>"
msgstr ""

#: C/weatherAppMain.js.page:35(section/p)
msgid ""
"This line tells how to run the script. It needs to be the first line of the "
"code and it needs to be executable. To get the execution rights go to "
"Terminal and run in right folder: chmod +x scriptname. Or you can use the "
"graphical filemanager. Just go to the right folder where your code is, right "
"click you code file, choose properties, click the permissions tab and check "
"the box for allow executing file as a program"
msgstr ""

#: C/weatherAppMain.js.page:41(section/code)
#, no-wrap
msgid ""
"\n"
"var Gtk = imports.gi.Gtk;\n"
"const WeatherService = imports.geonames;"
msgstr ""

#: C/weatherAppMain.js.page:44(section/p)
msgid ""
"In order to have a working program we need to import a GObject Introspection -"
"library to our use. For working UI, we need Gtk. Gtk is imported in the "
"beginning so we have it in our use everywhere. We also import our own local "
"JavaScript library geonames to our use here."
msgstr ""

#: C/weatherAppMain.js.page:49(section/code)
#, no-wrap
msgid ""
"\n"
"// Initialize the gtk\n"
"Gtk.init(null, 0);\n"
"//create your window, name it and connect the x to quit function. Remember that window is a taken word\n"
"var weatherwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL});\n"
"weatherwindow.title = \"Todays weather\";\n"
"//Window only accepts one widget and a title. Further structure with Gtk.boxes of similar\n"
"weatherwindow.connect(\"destroy\", function(){Gtk.main_quit()});\n"
"\n"
"weatherwindow.show_all();\n"
"//and run it\n"
"Gtk.main();"
msgstr ""

#: C/weatherAppMain.js.page:63(section/title)
msgid "Adding a grid and all the necessary widgets to it"
msgstr ""

#: C/weatherAppMain.js.page:64(section/code)
#, no-wrap
msgid ""
"\n"
"var grid = new Gtk.Grid();\n"
"weatherwindow.add(grid);\n"
"\n"
"//We initialize the icon here, but deside the file later in geonames.js.\n"
"var weatherIcon = new Gtk.Image();\n"
"\n"
"//Set some labels to your window\n"
"var label1 = new Gtk.Label({label: \"\"});\n"
"var label2 = new Gtk.Label({label: \"Looking in the sky...\"});\n"
"var label3 = new Gtk.Label({label: \"\"});\n"
"\n"
"var entry = new Gtk.Entry();\n"
"entry.set_width_chars(4);\n"
"entry.set_max_length(4);\n"
"var label4 = new Gtk.Label({label: \"Enter ICAO station for weather: \"});\n"
"var button1 = new Gtk.Button({label: \"search!\"});\n"
"\n"
"grid.attach(label4, 2, 1, 1, 1);\n"
"grid.attach_next_to(label1,label4,3,1,1);\n"
"grid.attach_next_to(label2,label1,3,1,1);\n"
"grid.attach_next_to(label3,label2,3,1,1);\n"
"grid.attach_next_to(entry,label4,1,1,1);\n"
"grid.attach_next_to(button1,entry,1,1,1);\n"
"grid.attach_next_to(weatherIcon,label2,1,1,1)\n"
msgstr ""

#: C/weatherAppMain.js.page:90(section/p)
msgid ""
"In this section we create the grid we are going to use for positioning the "
"widgets. All the buttons, labels and entrys are initialized and placed on the "
"grid. As seen from the placing of the different widgets, they don't need to "
"be related only to one widget. At this point some of the labels don't have "
"any content. The content for those widgets is applied later. If you run the "
"application at this stage, you have the UI ready, but the widgets are not "
"connected to anything. For this we need to first build the weather searching "
"local library, and then get the information we need asynchronously. When we "
"have our local library ready we can connect it to the necessary widgets."
msgstr ""

#: C/weatherAppMain.js.page:94(section/title)
msgid "Requesting the weather information asynchronously"
msgstr ""

#: C/weatherAppMain.js.page:95(section/code)
#, no-wrap
msgid ""
"\n"
"function getWeatherForStation() {\n"
"  var station = entry.get_text();\n"
"\n"
"  var GeoNames = new WeatherService.GeoNames(station); //\"EFHF\";\n"
"\n"
"  GeoNames.getWeather(function(error, weather) {\n"
"    //this here works bit like signals. This code will be run when we have weather.\n"
"    if (error) {\n"
"      label2.set_text(\"Suggested ICAO station does not exist Try EFHF\");\n"
"    return; }\n"
"    weatherIcon.file = GeoNames.getIcon(weather);\n"
"\n"
"    label1.set_text(\"Temperature is \" + weather.weatherObservation.temperature + \" degrees.\");\n"
"    if (weather.weatherObservation.weatherCondition !== \"n/a\"){\n"
"      label2.set_text(\"Looks like there is \" + weather.weatherObservation.weatherCondition + \" in the sky.\");\n"
"      }\n"
"    else {\n"
"      label2.set_text(\"Looks like there is \" + weather.weatherObservation.clouds + \" in the sky.\");\n"
"    }\n"
"    label3.set_text(\"Windspeed is \" + weather.weatherObservation.windSpeed + \" m/s\")\n"
"    // ...\n"
"  });\n"
"}\n"
msgstr ""

#: C/weatherAppMain.js.page:120(section/p)
msgid ""
"This function is dedicated for calling for the weather information and "
"updating labels and icons accordingly. In the beginning of the function we "
"get the user input for the search. So here for the first time we use our own "
"library and assign it to variable GeoNames. While assigning WeatherService we "
"give it the station. The firs thing we do with GeoNames is to request "
"weather. Everything after GeoNames.getWeather(function(error, weather) "
"happens only if we either get an error message or weather information. If "
"either doesn't come, the rest of the program works as normal, so main_Quit "
"works."
msgstr ""

#: C/weatherAppMain.js.page:124(section/title)
msgid "Connecting signals to button and entry."
msgstr ""

#: C/weatherAppMain.js.page:125(section/code)
#, no-wrap
msgid ""
"\n"
"entry.connect(\"key_press_event\", function(widget, event) {\n"
"  if (entry.get_text().length === 4) {\n"
"    // Enough is enough\n"
"    getWeatherForStation();\n"
"  }\n"
"  return false;\n"
"});\n"
"\n"
"button1.connect(\"clicked\", function(){\n"
"  getWeatherForStation();\n"
"});"
msgstr ""

#: C/weatherAppMain.js.page:137(section/p)
msgid ""
"And finally we have the connections that make the whole application run as it "
"should. We connect both the entry and the button to do the same thing, "
"getting the weather. So it doesn't matter weather you press enter of click "
"the search button."
msgstr ""

#: C/weatherAppMain.js.page:141(section/title)
msgid "Weatherapp.js"
msgstr "Weatherapp.js"

#: C/weatherAppMain.js.page:142(section/p)
msgid "Weatherapp.js file looks like this:"
msgstr ""

#: C/weatherAppMain.js.page:143(section/code)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"//The previous line is a hash bang tells how to run the script.\n"
"// Note that the script has to be executable (run in terminal in the right folder: chmod +x scriptname)\n"
"\n"
"var Gtk = imports.gi.Gtk;\n"
"\n"
"const WeatherService = imports.geonames;\n"
"//Bring your own library from same folder (as set in GJS_PATH). If using autotools .desktop will take care of this\n"
"\n"
"// Initialize the gtk\n"
"Gtk.init(null, 0);\n"
"//create your window, name it and connect the x to quit function. Remember that window is a taken word\n"
"var weatherwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL});\n"
"weatherwindow.title = \"Todays weather\";\n"
"//Window only accepts one widget and a title. Further structure with Gtk.boxes of similar\n"
"weatherwindow.connect(\"destroy\", function(){Gtk.main_quit()});\n"
"//We initialize the icon here, but deside the file later in geonames.js.\n"
"\n"
"var weatherIcon = new Gtk.Image();\n"
"\n"
"//Set some labels to your window\n"
"var label1 = new Gtk.Label({label: \"\"});\n"
"var label2 = new Gtk.Label({label: \"Looking in the sky...\"});\n"
"var label3 = new Gtk.Label({label: \"\"});\n"
"\n"
"var grid = new Gtk.Grid();\n"
"weatherwindow.add(grid);\n"
"\n"
"var entry = new Gtk.Entry();\n"
"entry.set_width_chars(4);\n"
"entry.set_max_length(4);\n"
"var label4 = new Gtk.Label({label: \"Enter ICAO station for weather: \"});\n"
"var button1 = new Gtk.Button({label: \"search!\"});\n"
"\n"
"//some weather\n"
"\n"
"entry.connect(\"key_press_event\", function(widget, event) {\n"
"  // FIXME: Get weather on enter (key 13)\n"
"  if (entry.get_text().length === 4) {\n"
"    // Enough is enough\n"
"    getWeatherForStation();\n"
"  }\n"
"  return false;\n"
"});\n"
"\n"
"button1.connect(\"clicked\", function(){\n"
"  getWeatherForStation();\n"
"});\n"
"\n"
"function getWeatherForStation() {\n"
"  var station = entry.get_text();\n"
"\n"
"  var GeoNames = new WeatherService.GeoNames(station); //\"EFHF\";\n"
"\n"
"  GeoNames.getWeather(function(error, weather) {\n"
"    //this here works bit like signals. This code will be run when we have weather.\n"
"    if (error) {\n"
"      label2.set_text(\"Suggested ICAO station does not exist Try EFHF\");\n"
"    return; }\n"
"    weatherIcon.file = GeoNames.getIcon(weather);\n"
"\n"
"    label1.set_text(\"Temperature is \" + weather.weatherObservation.temperature + \" degrees.\");\n"
"    if (weather.weatherObservation.weatherCondition !== \"n/a\"){\n"
"      label2.set_text(\"Looks like there is \" + weather.weatherObservation.weatherCondition + \" in the sky.\");\n"
"      }\n"
"    else {\n"
"      label2.set_text(\"Looks like there is \" + weather.weatherObservation.clouds + \" in the sky.\");\n"
"    }\n"
"    label3.set_text(\"Windspeed is \" + weather.weatherObservation.windSpeed + \" m/s\")\n"
"    // ...\n"
"  });\n"
"}\n"
"\n"
"grid.attach(label4, 2, 1, 1, 1);\n"
"grid.attach_next_to(label1,label4,3,1,1);\n"
"grid.attach_next_to(label2,label1,3,1,1);\n"
"grid.attach_next_to(label3,label2,3,1,1);\n"
"grid.attach_next_to(entry,label4,1,1,1);\n"
"grid.attach_next_to(button1,entry,1,1,1);\n"
"grid.attach_next_to(weatherIcon,label2,1,1,1)\n"
"weatherwindow.show_all();\n"
"//and run it\n"
"Gtk.main();\n"
msgstr ""

#: C/weatherAppMain.js.page:228(section/p)
msgid "Running until you have all the autotools files ready. :"
msgstr ""

#: C/weatherAppMain.js.page:230(section/screen)
#, no-wrap
msgid " <output style=\"prompt\">$ </output><input> GJS_PATH=`pwd` gjs weatherapp.js</input>"
msgstr ""

#: C/weatherAppMain.js.page:231(section/p)
msgid ""
"Use this command on terminal while developing your modules. When calling your "
"program in this manner it knows where to find your custom JSlibraries, in "
"this case geonames.js."
msgstr ""

#: C/weatherAutotools.js.page:18(page/title)
msgid "Autotools and Icons"
msgstr "Autotools und Symbole"

#: C/weatherAutotools.js.page:20(synopsis/p)
msgid ""
"In this part of the guide well construct the autotools and custom icons "
"needed for weather application to be a seamless part of your desktop. To "
"write and run all the code examples yourself, you need an editor to write "
"code in, Terminal and GNOME 3 or higher installed into your computer. In this "
"guide we we'll go through the following parts:"
msgstr ""

#: C/weatherAutotools.js.page:23(item/p)
msgid "<link xref=\"#autotools\"> Autotools</link>"
msgstr ""

#: C/weatherAutotools.js.page:24(item/p)
msgid "<link xref=\"#icons\">Custom icons for your application</link>"
msgstr ""

#: C/weatherAutotools.js.page:31(section/title)
msgid "Autotools and necessary files"
msgstr "Autotools und erforderliche Dateien"

#: C/weatherAutotools.js.page:32(section/p)
msgid ""
"Having more than one file in your folder makes using autotools a bit tricky. "
"You need the .desktop file, autogen.sh, Makefile.am, configure.ac and as a "
"new file: myapp.sh.in file. Hacking the autotools file is a complicated "
"field. More information can be found in many different sources, <link href="
"\"http://en.wikipedia.org/wiki/GNU_build_system\">the wikipedia article</"
"link> provides a good overwiev on the subject."
msgstr ""

#: C/weatherAutotools.js.page:35(item/p)
#: C/weatherAutotools.js.page:41(section/p)
msgid "weatherapp.desktop"
msgstr "weatherapp.desktop"

#: C/weatherAutotools.js.page:36(item/p)
#: C/weatherAutotools.js.page:56(section/p)
msgid "weatherapp.sh.in"
msgstr "weatherapp.sh.in"

#: C/weatherAutotools.js.page:42(section/code)
#, no-wrap
msgid ""
"\n"
"[Desktop Entry]\n"
"Version=1.0\n"
"Encoding=UTF-8\n"
"Name=Weather app\n"
"Comment=Weather showing application\n"
"Exec=weatherapp.sh\n"
"Icon=application-default-icon\n"
"Terminal=false\n"
"Type=Application\n"
"StartupNotify=true\n"
"Categories=GNOME;GTK;Utility;"
msgstr ""

#: C/weatherAutotools.js.page:54(section/p)
msgid ""
"The thing to notice in this file is that the Exec line will make this ."
"desktop file work only after running all the other makefiles. Weatherapp.sh "
"is a small shell script created with the weatherapp.sh.in."
msgstr ""

#: C/weatherAutotools.js.page:57(section/code)
#, no-wrap
msgid ""
"\n"
"#!/bin/sh\n"
"export GJS_PATH=@bindir@\n"
"gjs @bindir@/weatherapp.js"
msgstr ""

#: C/weatherAutotools.js.page:61(section/p)
msgid ""
"This file is a template to the file Makefile will do to be run from .desktop."
msgstr ""

#: C/weatherAutotools.js.page:64(section/code)
#, no-wrap
msgid ""
"\n"
"# The actual runnable program is set to the SCRIPTS primitive. Prefix bin_ tells where to copy this\n"
"bin_SCRIPTS = weatherapp.js geonames.js weatherapp.sh\n"
"# List of files to be distributed\n"
"EXTRA_DIST=  \\\n"
"    $(bin_SCRIPTS) \\\n"
"    $(private_icons)\t\\\n"
"\t  $(NULL)\n"
"\n"
"CLEANFILES =\n"
"\n"
"# The desktop files\n"
"desktopdir = $(datadir)/applications\n"
"desktop_DATA =weatherapp.desktop\n"
"\n"
"# convenience command for doing Makefile variable substitutions in non-Makefile\n"
"# files (scripts, service files, etc.)\n"
"do_subst = sed -e 's|@abs_top_srcdir[@]|$(abs_top_srcdir)|g' \\\n"
"               -e 's|@abs_top_builddir[@]|$(abs_top_builddir)|g' \\\n"
"               -e 's|@localedir[@]|$(localedir)|g' \\\n"
"               -e 's|@bindir[@]|$(bindir)|g' \\\n"
"               -e 's|@libexecdir[@]|$(libexecdir)|g' \\\n"
"\t       -e 's|@pkglibdir[@]|$(pkglibdir)|g' \\\n"
"\t       -e 's|@pkgdatadir[@]|$(pkgdatadir)|g' \\\n"
"\t       -e 's|@have_libnotify[@]|$(HAVE_LIBNOTIFY)|g' \\\n"
"\t       -e 's|@have_libsoup[@]|$(HAVE_LIBSOUP)|g' \\\n"
"\t       -e 's|@have_cheese[@]|$(HAVE_CHEESE)|g'\n"
"\n"
"weatherapp.sh: weatherapp.sh.in\n"
"\t$(AM_V_GEN) $(do_subst) $&lt; &gt; $@\n"
"\tchmod +x $@\n"
"\n"
"CLEANFILES += weatherapp.sh\n"
"EXTRA_DIST += weatherapp.sh.in\n"
"\n"
"#the application icon\n"
"appicondir=$(datadir)/icons/hicolor/scalable/apps\n"
"appicon_DATA=weather-icon.svg\n"
"\n"
"#icons in the application\n"
"NULL =\n"
"\n"
"private_icons = \\\n"
"\tweather-clear.svg \\\n"
"  weather-few-clouds.svg \\\n"
"  weather-fog.svg \\\n"
"  weather-icon.svg \\\n"
"  weather-overcast.svg \\\n"
"  weather-showers.svg \\\n"
"  weather-showers-scattered.svg \\\n"
"  weather-snow.svg \\\n"
"  $(NULL)\n"
"\n"
"install-icons:\n"
"\tfor icon in $(private_icons); do \\\n"
"\t\tmkdir -p $(DESTDIR)$(pkgdatadir)/icons/; \\\n"
"\t\t$(INSTALL_DATA) $(srcdir)/$$icon $(DESTDIR)$(pkgdatadir)/icons/; \\\n"
"\tdone\n"
"\n"
"install-data-local: install-icons"
msgstr ""

#: C/weatherAutotools.js.page:124(section/p)
msgid ""
"This needs a bit more explaining. Compared to the HelloWorld Makefile.am this "
"has changed quite a bit. Lets go through all the new blocks:"
msgstr ""

#: C/weatherAutotools.js.page:125(section/p)
msgid ""
"bin_scripts are the files that are needed to run your application. In thin "
"case they are the first two files are the program itself and the third is the "
"script that launches the application."
msgstr ""

#: C/weatherAutotools.js.page:126(section/p)
msgid "EXTRA_DIST are the files that are to be distributed"
msgstr ""

#: C/weatherAutotools.js.page:127(section/p)
msgid "do_subst block is bits and pieces that need to be where they are"
msgstr ""

#: C/weatherAutotools.js.page:128(section/p)
msgid ""
"after the comment #icons in the application there are all the icons that are "
"used by the program. For them to be useful you need to install the icons in "
"correct places and that is done byt the install-icons: bit"
msgstr ""

#: C/weatherAutotools.js.page:131(section/code)
#, no-wrap
msgid ""
"\n"
"dnl This file is processed by autoconf to create a configure script\n"
"AC_INIT([Weather App], 1.0)\n"
"AM_INIT_AUTOMAKE([1.10 no-define foreign])\n"
"AC_CONFIG_FILES(Makefile)\n"
"AC_OUTPUT"
msgstr ""

#: C/weatherAutotools.js.page:137(section/p)
msgid "autohen.sh"
msgstr "autohen.sh"

#: C/weatherAutotools.js.page:138(section/code)
#, no-wrap
msgid ""
"\n"
"#!/bin/sh\n"
"# This will run autoconf, automake, etc. for us\n"
"autoreconf --force --install"
msgstr ""

#: C/weatherAutotools.js.page:144(section/title)
msgid "Custom icons for your application"
msgstr ""

#: C/weatherAutotools.js.page:145(section/p)
msgid ""
"When thinking about custom icons a good rule of thumb is: do you expect to "
"see that icon used elsewhere or is it private to your app? If the first (e.g. "
"the icons in the desktop file that are shown by the shell) then you need /usr/"
"share/hicolor, otherwise (e.g. the weather icons of your app) /usr/share/"
"$application/bla/bla"
msgstr ""

#: C/weatherAutotools.js.page:146(section/p)
msgid ""
"Using autotools you have to make some changes to your .desktop and Makefile."
"am files. In the desktop file you change the Icon's name Icon=weather-icon. "
"In the Makefile.am file you add these two lines to the end of your "
"application #the application icon"
msgstr ""

#: C/weatherAutotools.js.page:147(section/p)
msgid "appicondir=$(datadir)/icons/hicolor/scalable/apps"
msgstr ""

#: C/weatherAutotools.js.page:148(section/p)
msgid "appicon_DATA=weather-icon.svg"
msgstr ""

#: C/weatherGeonames.js.page:18(page/title)
msgid "Local library geoNames"
msgstr ""

#: C/weatherGeonames.js.page:20(synopsis/p)
msgid ""
"In this part of the guide we'll construct the local library geoNames using "
"asynchronous calls. Weather information in this example is fetched from "
"geonames.org and the application is using the <link href=\"http://en."
"wikipedia.org/wiki/List_of_airports_by_ICAO_code:_E\">ICAO codes </link> to "
"place your weather request. To write and run all the code examples yourself, "
"you need an editor to write code in, Terminal and GNOME 3 or higher installed "
"into your computer. In this guide we'll go through the following parts:"
msgstr ""

#: C/weatherGeonames.js.page:23(item/p)
msgid ""
"<link xref=\"#geonamesimports\">Local library for getting the weather</link>"
msgstr ""

#: C/weatherGeonames.js.page:24(item/p)
msgid "<link xref=\"#geonamesfunction\">Creating function geoNames</link>"
msgstr ""

#: C/weatherGeonames.js.page:25(item/p)
msgid "<link xref=\"#geonamesmethods\">Methods for geoNames</link>"
msgstr ""

#: C/weatherGeonames.js.page:26(item/p)
msgid "<link xref=\"#geonames.js\">geonames.js </link>"
msgstr ""

#: C/weatherGeonames.js.page:31(section/title)
msgid "Local library for getting the weather"
msgstr ""

#: C/weatherGeonames.js.page:32(section/p)
msgid "For this we need a new file that will be our local library."
msgstr ""

#: C/weatherGeonames.js.page:33(section/code)
#, no-wrap
msgid ""
"\n"
"const Soup = imports.gi.Soup;\n"
"const _httpSession = new Soup.SessionAsync();\n"
"Soup.Session.prototype.add_feature.call(_httpSession, new Soup.ProxyResolverDefault());\n"
msgstr ""

#: C/weatherGeonames.js.page:38(section/p)
msgid ""
"In the first lines we'll import and initialize the libraries we need to use "
"in this local library. Soup handles all the requests we have to make with "
"http."
msgstr ""

#: C/weatherGeonames.js.page:42(section/title)
msgid "Creating function GeoNames"
msgstr ""

#: C/weatherGeonames.js.page:43(section/code)
#, no-wrap
msgid ""
"\n"
"function GeoNames(station) {\n"
"  this.station = station;\n"
"}\n"
"\n"
"GeoNames.prototype = {\n"
"\n"
"}\n"
msgstr ""

#: C/weatherGeonames.js.page:52(section/p)
msgid ""
"Here we create the function GeoNames that will handle getting weather for us. "
"JavaScript allows us to create functions that have little inside at first and "
"later expand them. This will be done inside the GeoNames.prototype curly "
"braces{}"
msgstr ""

#: C/weatherGeonames.js.page:56(section/title)
msgid "Methods for GeoNames"
msgstr ""

#: C/weatherGeonames.js.page:57(section/code)
#, no-wrap
msgid ""
"\n"
"getWeather: function(callback) {\n"
"    var request = Soup.Message.new('GET', 'http://api.geonames.org/weatherIcaoJSON?ICAO=' + this.station + '&amp;username=demo');\n"
"    _httpSession.queue_message(request, function(_httpSession, message) {\n"
"      if (message.status_code !== 200) {\n"
"        callback(message.status_code, null);\n"
"        return;\n"
"      }\n"
"      var weatherJSON = request.response_body.data;\n"
"      var weather = JSON.parse(weatherJSON);\n"
"      callback(null, weather);\n"
"      });\n"
"},\n"
"\n"
"getIcon: function(weather){\n"
"    switch (weather.weatherObservation.weatherCondition){\n"
"    case \"drizzle\":\n"
"    case \"light showers rain\":\n"
"    case \"light rain\":\n"
"      return \"weather-showers-scattered.svg\";\n"
"    case \"rain\":\n"
"      return \"weather-showers.svg\";\n"
"    case \"light snow\":\n"
"    case \"snow grains\":\n"
"      return \"weather-snow.svg\";\n"
"    }\n"
"    switch (weather.weatherObservation.clouds){\n"
"      case \"few clouds\":\n"
"      case \"scattered clouds\":\n"
"        return \"weather-few-clouds.svg\";\n"
"      case \"clear sky\":\n"
"        return \"weather-clear.svg\"\n"
"      case \"broken clouds\":\n"
"      case \"overcast\":\n"
"        return \"weather-overcast.svg\";\n"
"    }\n"
"    return \"weather-fog.svg\";\n"
"}\n"
msgstr ""

#: C/weatherGeonames.js.page:96(section/p)
msgid ""
"The first method for GeoNames is getWeather and the second getIcon. In "
"getWeather we make a http request with soup, handle errors and then parse the "
"information from the request to form we can use it. In getIcon we simply "
"compare the results we got from getWeather to the switch we have in order to "
"get the icon matching current weather. Now that we have our local library "
"ready, it's time to make use of it."
msgstr ""

#: C/weatherGeonames.js.page:101(section/title)
msgid "geonames.js"
msgstr "geonames.js"

#: C/weatherGeonames.js.page:102(section/p)
msgid ""
"Here is the entire code for our local library. The main program file calls "
"this asynchronously."
msgstr ""

#: C/weatherGeonames.js.page:103(section/code)
#, no-wrap
msgid ""
"\n"
"const Soup = imports.gi.Soup;\n"
"const _httpSession = new Soup.SessionAsync();\n"
"Soup.Session.prototype.add_feature.call(_httpSession, new Soup.ProxyResolverDefault());\n"
"\n"
"function GeoNames(station) {\n"
"  this.station = station;\n"
"}\n"
"\n"
"GeoNames.prototype = {\n"
"  getWeather: function(callback) {\n"
"    var request = Soup.Message.new('GET', 'http://api.geonames.org/weatherIcaoJSON?ICAO=' + this.station + '&amp;username=demo');\n"
"    _httpSession.queue_message(request, function(_httpSession, message) {\n"
"      if (message.status_code !== 200) {\n"
"        callback(message.status_code, null);\n"
"        return;\n"
"      }\n"
"      var weatherJSON = request.response_body.data;\n"
"      var weather = JSON.parse(weatherJSON);\n"
"      callback(null, weather);\n"
"      });\n"
"    },\n"
"\n"
"  getIcon: function(weather){\n"
"    switch (weather.weatherObservation.weatherCondition){\n"
"    case \"drizzle\":\n"
"    case \"light showers rain\":\n"
"    case \"light rain\":\n"
"      return \"weather-showers-scattered.svg\";\n"
"    case \"rain\":\n"
"      return \"weather-showers.svg\";\n"
"    case \"light snow\":\n"
"    case \"snow grains\":\n"
"      return \"weather-snow.svg\";\n"
"    }\n"
"    switch (weather.weatherObservation.clouds){\n"
"      case \"few clouds\":\n"
"      case \"scattered clouds\":\n"
"        return \"weather-few-clouds.svg\";\n"
"      case \"clear sky\":\n"
"        return \"weather-clear.svg\"\n"
"      case \"broken clouds\":\n"
"      case \"overcast\":\n"
"        return \"weather-overcast.svg\";\n"
"    }\n"
"    return \"weather-fog.svg\";\n"
"    }\n"
"}\n"
"}  "
msgstr ""

#: C/window.c.page:7(info/title)
msgctxt "text"
msgid "Window (C)"
msgstr "Fenster (C)"

#: C/window.c.page:17(info/desc) C/window.py.page:24(info/desc)
#: C/window.vala.page:17(info/desc)
msgid "A toplevel window which can contain other widgets"
msgstr ""

#: C/window.c.page:20(page/title) C/window.js.page:20(page/title)
#: C/window.py.page:27(page/title) C/window.vala.page:20(page/title)
msgid "Window"
msgstr "Fenster"

#: C/window.c.page:23(page/p)
msgid ""
"A minimal GtkApplication. Use <link xref=\"GtkApplicationWindow.c"
"\">Application Window</link> if you need GMenu support."
msgstr ""

#: C/window.c.page:27(page/code)
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  window = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n"
"\n"
"  gtk_window_set_application (GTK_WINDOW (window), GTK_APPLICATION (app));\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Hello GNOME\");\n"
"\n"
"  gtk_widget_show_all (GTK_WIDGET (window));\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\",G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""

#: C/window.js.page:7(info/title)
msgctxt "text"
msgid "Window (JavaScript)"
msgstr "Fenster (JavaScript)"

#: C/window.js.page:17(info/desc)
msgid "A basic window which can contain other widgets"
msgstr "Ein einfaches Fenster, welches weitere Widgets enthalten kann."

#: C/window.js.page:25(td/p)
msgid "A minimal GtkApplication"
msgstr "Eine minimale GtkApplication"

#: C/window.js.page:28(td/p)
msgid ""
"Use <link xref=\"GtkApplicationWindow.js\">ApplicationWindow</link> if you "
"need GMenu support."
msgstr ""

#: C/window.js.page:32(page/code)
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class ({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.myapp',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function () {\n"
"\n"
"        MyWindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL});\n"
"        MyWindow.title = \"Welcome to GNOME\";\n"
"\n"
"       /* Here are a few ways we can customize our window.\n"
"       Try uncommenting them or changing their values! */\n"
"        //MyWindow.set_default_size (400,200);\n"
"        //MyWindow.set_has_resize_grip (false);\n"
"        //MyWindow.set_opacity (0.5);\n"
"        //MyWindow.maximize ();\n"
"\n"
"        //show the window and all child widgets (none in this case)\n"
"        MyWindow.show_all();\n"
"        this.application.add_window(MyWindow);\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application ();\n"
"app.application.run (ARGV);\n"
msgstr ""

#: C/window.js.page:34(page/p)
msgid "In this example we used the following:"
msgstr "In diesem Beispiel verwenden wir Folgendes:"

#: C/window.js.page:39(item/p)
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Window.html"
"\">Gtk.Window</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Window.html"
"\">Gtk.Window</link>"

#: C/window.py.page:7(info/title)
msgctxt "text"
msgid "Window (Python)"
msgstr "Fenster (Python)"

#: C/window.py.page:33(td/p)
msgid "A minimal GTK+ Application: a window with a title."
msgstr "Eine minimale GTK+-Anwendung: ein Fenster mit einem Titel."

#: C/window.py.page:36(td/p)
msgid ""
"Use <link xref=\"GtkApplicationWindow.py\"/> if you need <link xref=\"gmenu.py"
"\"/> support."
msgstr ""

#: C/window.py.page:46(section/code)
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def do_activate(self):\n"
"        # create a Gtk Window belonging to the application itself\n"
"        window = Gtk.Window(application=self)\n"
"        # set the title\n"
"        window.set_title(\"Welcome to GNOME\")\n"
"        # show the window\n"
"        window.show_all()\n"
"\n"
"# create and run the application, exit with the value returned by\n"
"# running the program\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""

#: C/window.py.page:51(section/title)
msgid "Useful methods for a Window widget"
msgstr ""

#: C/window.vala.page:7(info/title)
msgctxt "text"
msgid "Window (Vala)"
msgstr "Fenster (Vala)"

#: C/window.vala.page:25(td/p)
msgid "The simplest Gtk.Application"
msgstr "Die einfachste Gtk.Application"

#: C/window.vala.page:28(td/p)
msgid ""
"Use <link xref=\"GtkApplicationWindow.vala\">Application Window</link> if you "
"need GMenu support."
msgstr ""

#: C/window.vala.page:32(page/code)
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class Application : Gtk.Application {\n"
"\n"
"\t/* Constructor */\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.window\");\n"
"\t}\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application,\n"
"\t * which is inherited by Gtk.Application. */\n"
"\tpublic override void activate () {\n"
"\n"
"\t\tvar window = new Gtk.Window ();\n"
"\t\twindow.title = \"Welcome to GNOME\";\n"
"\n"
"\t\t/* The following 3 lines are included here to introduce\n"
"\t\t * you to ways you can adjust the toplevel window to suit\n"
"\t\t * your needs.  Uncomment them to see what they do.\n"
"\t\t */\n"
"\n"
"\t\t//window.border_width = 10;\n"
"\t\t//window.set_default_size (350, 70);\n"
"\t\t//window.window_position = Gtk.WindowPosition.CENTER;\n"
"\n"
"\t\t/* Add the window to this application. */\n"
"\t\tthis.add_window (window);\n"
"\n"
"\t\t/* Show the window. */\n"
"\t\twindow.show ();\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates the application and runs it.*/\n"
"int main (string[] args) {\n"
"\tvar app = new Application ();\n"
"\treturn app.run (args);\n"
"}\n"
msgstr ""

#: C/window.vala.page:38(item/p)
msgid ""
"The widget <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window.html\">Gtk."
"Window</link>"
msgstr ""

#: C/window.vala.page:40(item/p)
msgid ""
"The enum <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.WindowPosition.html"
"\">Gtk.WindowPosition</link>"
msgstr ""

#: C/window.vala.page:42(item/p)
msgid ""
"The method <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window."
"set_default_size.html\">set_default_size</link>"
msgstr ""

#: C/window.vala.page:44(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Container.border_width.html"
"\">border_width</link>"
msgstr ""

#: C/window.vala.page:46(item/p)
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window.window_position.html"
"\">window_position</link>"
msgstr ""

#~ msgid "gnome-doc-list@gnome.org"
#~ msgstr "gnome-doc-list@gnome.org"

#~ msgid "shaunm@gnome.org"
#~ msgstr "shaunm@gnome.org"

#~ msgid "<placeholder-1/><placeholder-2/><placeholder-3/>i"
#~ msgstr "<placeholder-1/><placeholder-2/><placeholder-3/>i"

#~ msgid "jhs@gnome.org"
#~ msgstr "jhs@gnome.org"

#~ msgid "chrisk@openismus.com"
#~ msgstr "chrisk@openismus.com"

#~ msgid "\"UTF-8\""
#~ msgstr "\"UTF-8\""

#~ msgid "NULL"
#~ msgstr "NULL"

#~ msgid "shaunm"
#~ msgstr "shaunm"

#~ msgid "dgsiegel@gnome.org"
#~ msgstr "dgsiegel@gnome.org"

#~ msgid "jwendell@gnome.org"
#~ msgstr "jwendell@gnome.org"

#~ msgid ""
#~ "@@image: 'media/guitar-tuner.png'; md5=f0b7ed4cdc2729d2d0f4d38b829db61e"
#~ msgstr ""
#~ "@@image: 'media/guitar-tuner.png'; md5=f0b7ed4cdc2729d2d0f4d38b829db61e"

#~ msgid "<placeholder-1/><placeholder-2/>."
#~ msgstr "<placeholder-1/><placeholder-2/>."

#~ msgid "Ubuntu"
#~ msgstr "Ubuntu"

#~ msgid "Fedora"
#~ msgstr "Fedora"

#~ msgid "Others"
#~ msgstr "Weitere"
