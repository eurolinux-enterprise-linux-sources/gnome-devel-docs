<?xml version="1.0" encoding="utf-8"?>
<page xmlns="http://projectmallard.org/1.0/" xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" type="guide" style="task" id="image.js" xml:lang="gl">
  <info>
  <title type="text">Image (JavaScript)</title>
    <link type="guide" xref="beginner.js#display-widgets"/>
    <revision version="0.1" date="2012-05-24" status="draft"/>

    <credit type="author copyright">
      <name>Taryn Fox</name>
      <email its:translate="no">jewelfox@fursona.net</email>
      <years>2012</years>
    </credit>

    <desc>A widget displaying an image</desc>
  
    <mal:credit xmlns:mal="http://projectmallard.org/1.0/" type="translator copyright">
      <mal:name>Fran Dieguez</mal:name>
      <mal:email>frandieguez@gnome.org</mal:email>
      <mal:years>2012-2013.</mal:years>
    </mal:credit>
  </info>

  <title>Image</title>
  <media type="image" mime="image/png" src="media/image.png"/>
  <p>This GtkApplication displays an image file from the current directory.</p>
  <note><p>
    If the image file isn't loaded successfully, the image will contain a "broken image" icon.  The <file>filename.png</file> needs to be in the current directory for this code to work.  Use your favorite picture!
  </p></note>

<code mime="application/javascript" style="numbered">#!/usr/bin/gjs

const Gio = imports.gi.Gio;
const GLib = imports.gi.GLib;
const Gtk = imports.gi.Gtk;
const Lang = imports.lang;

const ImageExample = new Lang.Class ({
	Name: 'Image Example',

	/* Create the application itself
	   This boilerplate code is needed to build any GTK+ application. */
        _init: function () {
   	     this.application = new Gtk.Application ({
  	          application_id: 'org.example.jsimage',
  	          flags: Gio.ApplicationFlags.FLAGS_NONE
   	     });

	// Connect 'activate' and 'startup' signals to the callback functions
	this.application.connect('activate', Lang.bind(this, this._onActivate));
	this.application.connect('startup', Lang.bind(this, this._onStartup));
	},

	// Callback function for 'activate' signal presents windows when active
	_onActivate: function () {
		this._window.present ();
	},

	// Callback function for 'startup' signal initializes menus and builds the UI
	_onStartup: function () {
		this._buildUI ();
	},




	// Build the application's UI
	_buildUI: function () {

		// Create the application window
        	this._window = new Gtk.ApplicationWindow  ({ application: this.application,
                                                     	     window_position: Gtk.WindowPosition.CENTER,
                                                     	     title: "Welcome to GNOME",
                                                     	     default_height: 300,
                                                     	     default_width: 300 });

		// Create the label
		this.jsimage = new Gtk.Image ({file: "gnome-image.png"});
		this._window.add (this.jsimage);

       	 	// Show the window and all child widgets
       	 	this._window.show_all();
	}


});

// Run the application
let app = new ImageExample ();
app.application.run (ARGV);
</code>
<p>Neste exemplo empregaremos o seguinte:</p>
<list>
  <item><p><link href="http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Application.html">Gtk.Application</link></p></item>
  <item><p><link href="http://developer.gnome.org/gtk3/stable/GtkApplicationWindow.html">Gtk.ApplicationWindow</link></p></item>
  <item><p><link href="http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Image.html">Gtk.Image</link></p></item>
</list>
</page>
