# Korean translation for gnome-devel-docs.
# Copyright (C) 2016 gnome-devel-docs's COPYRIGHT HOLDER
# This file is distributed under the same license as the gnome-devel-docs package.
# Seong-ho Cho <shcho@gnome.org>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: gnome-devel-docs master\n"
"POT-Creation-Date: 2017-03-13 06:40+0000\n"
"PO-Revision-Date: 2017-03-19 18:03+0900\n"
"Last-Translator: Seong-ho Cho <shcho@gnome.org>\n"
"Language-Team: Korean <gnome-kr@googlegroups.com>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 1.8.7\n"

#. Put one translator per line, in the form NAME <EMAIL>, YEAR1, YEAR2
msgctxt "_"
msgid "translator-credits"
msgstr "조성호 <shcho@gnome.org>, 2017"

#. (itstool) path: credit/name
#: C/02_welcome_to_the_grid.js.page:15 C/03_getting_the_signal.js.page:16
#: C/aboutdialog.js.page:12 C/button.js.page:13 C/checkbutton.js.page:13
#: C/comboboxtext.js.page:15 C/combobox.js.page:17 C/dialog.js.page:13
#: C/entry.js.page:13 C/grid.js.page:18 C/hellognome.js.page:12
#: C/image.js.page:12 C/label.js.page:13 C/linkbutton.js.page:13
#: C/messagedialog.js.page:16 C/progressbar.js.page:12 C/radiobutton.js.page:13
#: C/scale.js.page:13 C/set-up-gedit.js.page:12 C/spinbutton.js.page:16
#: C/spinner.js.page:13 C/statusbar.js.page:13 C/switch.js.page:13
#: C/textview.js.page:17 C/togglebutton.js.page:13
#: C/treeview_simple_liststore.js.page:16 C/window.js.page:13
msgid "Taryn Fox"
msgstr "Taryn Fox"

#. (itstool) path: credit/years
#: C/02_welcome_to_the_grid.js.page:17 C/03_getting_the_signal.js.page:18
#: C/aboutdialog.c.page:17 C/aboutdialog.js.page:14 C/aboutdialog.py.page:16
#: C/aboutdialog.vala.page:17 C/beginner.js.page:13 C/button.c.page:17
#: C/button.js.page:15 C/button.py.page:17 C/button.vala.page:16
#: C/buttonbox.py.page:17 C/checkbutton.c.page:15 C/checkbutton.js.page:15
#: C/checkbutton.py.page:16 C/checkbutton.vala.page:15 C/colorbutton.py.page:16
#: C/colorbutton.vala.page:17 C/comboboxtext.js.page:17 C/combobox.c.page:15
#: C/combobox.js.page:19 C/combobox.py.page:17 C/combobox.vala.page:15
#: C/combobox_multicolumn.py.page:16 C/dialog.c.page:17 C/dialog.js.page:15
#: C/dialog.py.page:17 C/dialog.vala.page:15 C/entry.c.page:15
#: C/entry.js.page:15 C/entry.py.page:17 C/entry.vala.page:15
#: C/filechooserdialog.py.page:19 C/filechooserdialog.vala.page:18
#: C/fontchooserwidget.py.page:17 C/gmenu.c.page:15 C/gmenu.js.page:15
#: C/gmenu.py.page:17 C/gmenu.py.page:23 C/gmenu.vala.page:16 C/grid.c.page:15
#: C/grid.js.page:15 C/grid.py.page:17 C/grid.py.page:23 C/grid.vala.page:17
#: C/GtkApplicationWindow.c.page:15 C/GtkApplicationWindow.js.page:15
#: C/GtkApplicationWindow.py.page:17 C/GtkApplicationWindow.py.page:22
#: C/GtkApplicationWindow.vala.page:15 C/guitar-tuner.js.page:14
#: C/hellognome.js.page:14 C/hello-world.c.page:17 C/hello-world.js.page:17
#: C/hello-world.py.page:17 C/hello-world.vala.page:17 C/image.c.page:15
#: C/image.js.page:14 C/image.py.page:17 C/image.vala.page:15 C/label.c.page:16
#: C/label.js.page:15 C/label.py.page:19 C/label.py.page:24
#: C/label.vala.page:15 C/linkbutton.c.page:15 C/linkbutton.js.page:15
#: C/linkbutton.py.page:16 C/linkbutton.vala.page:15 C/menubar.c.page:17
#: C/menubar.py.page:17 C/menubar.py.page:22 C/menubar.vala.page:17
#: C/menubutton.js.page:15 C/menubutton.py.page:16 C/menubutton.py.page:22
#: C/menubutton.vala.page:15 C/messagedialog.c.page:16
#: C/messagedialog.js.page:18 C/messagedialog.py.page:16
#: C/messagedialog.vala.page:15 C/model-view-controller.py.page:23
#: C/paned.c.page:15 C/paned.py.page:16 C/progressbar.c.page:16
#: C/progressbar.js.page:14 C/progressbar.py.page:16 C/progressbar.vala.page:15
#: C/properties.py.page:23 C/radiobutton.c.page:17 C/radiobutton.js.page:15
#: C/radiobutton.py.page:17 C/radiobutton.vala.page:18 C/response-type.page:11
#: C/scale.c.page:17 C/scale.js.page:15 C/scale.py.page:17 C/scale.vala.page:17
#: C/scrolledwindow.c.page:17 C/scrolledwindow.py.page:16
#: C/scrolledwindow.vala.page:16 C/separator.py.page:17
#: C/set-up-gedit.js.page:14 C/signals-callbacks.py.page:23
#: C/spinbutton.c.page:18 C/spinbutton.js.page:18 C/spinbutton.py.page:17
#: C/spinbutton.vala.page:17 C/spinner.c.page:16 C/spinner.js.page:15
#: C/spinner.py.page:16 C/spinner.vala.page:15 C/statusbar.c.page:19
#: C/statusbar.js.page:15 C/statusbar.py.page:17 C/statusbar.vala.page:18
#: C/strings.py.page:23 C/switch.c.page:15 C/switch.js.page:15
#: C/switch.py.page:16 C/switch.vala.page:19 C/textview.c.page:15
#: C/textview.js.page:19 C/textview.py.page:24 C/textview.vala.page:15
#: C/togglebutton.c.page:19 C/togglebutton.js.page:15 C/togglebutton.py.page:16
#: C/togglebutton.vala.page:18 C/toolbar.c.page:17 C/toolbar.js.page:15
#: C/toolbar.py.page:17 C/toolbar.vala.page:16 C/toolbar_builder.py.page:18
#: C/toolbar_builder.py.page:24 C/toolbar_builder.vala.page:17
#: C/tooltip.py.page:17 C/treeview_advanced_liststore.py.page:16
#: C/treeview_cellrenderertoggle.py.page:16
#: C/treeview_simple_liststore.js.page:18
#: C/treeview_simple_liststore.py.page:17
#: C/treeview_simple_liststore.vala.page:17 C/treeview_treestore.py.page:17
#: C/tutorial.py.page:17 C/weatherApp.js.page:14 C/weatherAppMain.js.page:13
#: C/weatherAutotools.js.page:13 C/weatherGeonames.js.page:13
#: C/window.c.page:15 C/window.js.page:15 C/window.py.page:17
#: C/window.py.page:22 C/window.vala.page:15
msgid "2012"
msgstr "2012"

#. (itstool) path: info/desc
#: C/02_welcome_to_the_grid.js.page:20
msgid "Learn how to lay out UI components, like Images and Labels."
msgstr ""
"그림과 레이블 같은 사용자 인터페이스 구성요소를 어떻게 배치하는지 알아보겠습"
"니다."

#. (itstool) path: page/title
#: C/02_welcome_to_the_grid.js.page:23
msgid "2. Welcome to the Grid"
msgstr "2. Grid를 쓰러 오셨어요?"

#. (itstool) path: synopsis/p
#: C/02_welcome_to_the_grid.js.page:25
msgid ""
"This tutorial will show you how to create basic widgets, or parts of the "
"GNOME user interface, like Images and Labels. You'll then learn how to "
"arrange them all in a Grid, which lets you put widgets exactly where you "
"want them."
msgstr ""
"이 따라하기 지침서에서는 기본 위젯 또는 그림 및 레이블 같은 그놈 사용자 인터"
"페이스 일부를 만드는 방법을 보여드리겠습니다. 그 다음, 해당 위젯을 놓고 싶은 "
"곳에 정확히 놓게 하는 그리드로 정돈하는 방법을 알아보겠습니다."

#. (itstool) path: note/p
#: C/02_welcome_to_the_grid.js.page:26
msgid ""
"Have you taken <link xref=\"hellognome.js\">the first tutorial in this "
"series</link> already? You'll want to do so before continuing."
msgstr ""
"<link xref=\"hellognome.js\">이 시리즈의 따라하기 첫번째</link>를 해보셨쥬? "
"계속 진행하기전에 해보는게 좋아요."

#. (itstool) path: section/title
#: C/02_welcome_to_the_grid.js.page:32
msgid "Going native"
msgstr "네이티브로 갑시다"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:34
msgid ""
"In the last tutorial, we created what was basically a GNOME window frame for "
"a web app. All the GNOME-specific code we needed to learn revolved around "
"putting the WebView -- the widget containing our application -- into an "
"ApplicationWindow, and telling it to display. The application itself was "
"written in HTML and JavaScript, just like most pages on the web."
msgstr ""
"이전 따라하기에서, 웹 앱용 그놈 기본 창 프레임을 만들었습니다. 우리가 배울 모"
"든 그놈 코드는 ApplicationWindow의 WebView 주변에 두고 표시하게 했습니다. 프"
"로그램 자체는 웹의 대부분 페이지처럼 HTML과 JavaScript로 작성했습니다."

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:35
msgid ""
"This time, we're going to use only native GNOME widgets. A widget is just a "
"thing, like a checkbox or picture, and GNOME has a wide variety of them to "
"choose from. We call them \"native\" widgets to distinguish them from things "
"like the button and header in the web app we wrote. Because instead of using "
"web code, these are going to be 100 percent GNOME, using GTK+."
msgstr ""
"이제 자체 그놈 위젯을 사용하겠습니다. 위젯은 그냥 확인 상자 또는 그림 같은거"
"고, 그놈에는 선택해 볼 수 있는 다양한 위젯이 있습니다. 우리가 작성했던 웹 앱"
"의 단추 및 헤더 같은걸 따로 구분할 목적으로 \"자체\" 위젯이라고 하겠습니다. "
"웹 코드를 사용하는 대신, GTK+로 완전한 그놈 프로그램을 이루기 때문입니다."

#. (itstool) path: note/p
#: C/02_welcome_to_the_grid.js.page:36
msgid ""
"GTK+ stands for \"GIMP Toolkit\". It's like a toolbox of widgets that you "
"can reach into, while building your applications. It was originally written "
"for <link href=\"http://www.gimp.org/\">the GIMP</link>, which is a free "
"software image editor."
msgstr ""
"GTK+는 \"GIMP Toolkit\"입니다. 프로그램을 구성하는 동안 여러분이 접근할 수 있"
"는 위젯의 도구함 같은 존재입니다. 원래는 자유 소프트웨어 그림 편집기 <link "
"href=\"http://www.gimp.org/\">김프</link>를 작성하려고 만들었었죠."

#. (itstool) path: section/title
#: C/02_welcome_to_the_grid.js.page:40
msgid "Setting up our application"
msgstr "프로그램 구성"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:42
msgid ""
"Before we dig out any widgets from the GTK+ toolbox, we first need to write "
"the basic boilerplate code that our application requires."
msgstr ""
"GTK+ 도구함의 위젯을 찾아보기 전에, 우선 프로그램에서 필요한 기본 준비 코드"
"를 작성해야합니다."

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:43 C/comboboxtext.js.page:31
#: C/textview.js.page:39
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
msgstr ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:49
msgid ""
"This part always goes at the start of your code. Depending on what you'll be "
"doing with it, you may want to declare more imports here. What we're writing "
"today is pretty basic, so these are all we need; Gtk for the widgets, and "
"Lang so we can use Lang.bind to connect our application's activate and "
"startup signals to the requisite functions."
msgstr ""
"이 부분은 항상 코드의 시작 부분입니다. 이 코드로 어떤 프로그램을 작성하느냐"
"에 따라 여기에 더 가져올 항목을 선언할 수도 있습니다. 지금 작성하는건 좀 기본"
"적이기에, 하여간 우리가 필요한건 다 갖추었습니다. 위젯에 필요한 GTK와 Lang이"
"죠. 그래서 프로그램의 activate 시그널과 startup 시그널을 필요한 함수에 연결"
"할 때 Lang.bind를 사용할 수 있습니다."

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:50
msgid "Speaking of which:"
msgstr "말 나온 김에:"

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:51
#, no-wrap
msgid ""
"\n"
"const WelcomeToTheGrid = new Lang.Class({\n"
"    Name: 'Welcome to the Grid',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const WelcomeToTheGrid = new Lang.Class({\n"
"    Name: 'Welcome to the Grid',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:74
msgid ""
"This is the start of the application itself, and the _init function which "
"creates it. It tells _buildUI to create an ApplicationWindow, which we're "
"going to call _window, and it tells our window to present itself whenever "
"needed."
msgstr ""
"프로그램 자체를 시작하는 부분이고 _init 함수에서 프로그램을 구성합니다. "
"_buildUI에서 _window를 호출할 ApplicationWindow 객체를 만들게 하고, 필요할 "
"때 창을 나타내게 합니다."

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:75
msgid ""
"This part, again, is pretty much copy-and-paste, but you always want to give "
"your application a unique name."
msgstr ""
"다시 말해, 이 부분을 막 갖다 붙여넣긴 했지만, 이 프로그램에 언제든 고유한 이"
"름을 줄 수 있습니다."

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:77
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 10,\n"
"            title: \"Welcome to the Grid\"});\n"
msgstr ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 10,\n"
"            title: \"Welcome to the Grid\"});\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:88
msgid ""
"Finally, we start off the _buildUI function by creating a new "
"ApplicationWindow. We specify that it goes with this application, that it "
"should appear in the center of the screen, and that there should be at least "
"10 pixels between the outside edge and any widgets inside of it. We also "
"give it a title, which will appear at the top of the window."
msgstr ""
"마지막으로 _buildUI 함수로 새 ApplicationWindow 객체를 만들겠습니다. 이 프로"
"그램에서 창을 화면 가운데에서 나타나게 하고 바깥 가장자리는 최소한 10 픽셀의 "
"간격을 두고 어떤 위젯이든 이 안에 두도록 하겠습니다. 또한 창 상단에 뜨는 제목"
"도 넣겠습니다."

#. (itstool) path: section/title
#: C/02_welcome_to_the_grid.js.page:92
msgid "Reaching into the GTK+ toolbox"
msgstr "GTK+ 도구함 찾아가기"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:93
msgid ""
"What widgets should we use? Well, let's say we want to write an application "
"that looks like this:"
msgstr ""
"어떤 위젯을 사용할까요? 일단 다음과 같은 프로그램을 작성한다고 가정하겠습니"
"다:"

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:95
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_01.png' md5='3fdc22d361cf801f71557fdc76ae5b49'"
msgstr ""

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:97
msgid ""
"We're going to need, at the very least, a picture and a text label to go "
"with it. Let's start with the picture:"
msgstr ""
"최소한, 필요한걸 그림과 텍스트 레이블이라고 하죠. 그림 놓기로 시작해보겠습니"
"다:"

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:98
#, no-wrap
msgid ""
"\n"
"        // Create an image\n"
"        this._image = new Gtk.Image ({ file: \"gnome-image.png\" });\n"
msgstr ""
"\n"
"        // Create an image\n"
"        this._image = new Gtk.Image ({ file: \"gnome-image.png\" });\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:103
msgid ""
"You can download the image file used in this example <link href=\"https://"
"live.gnome.org/TarynFox?action=AttachFile&amp;do=get&amp;target=gnome-image."
"png\">here</link>. Be sure to put it in the same directory as the code "
"you're writing."
msgstr ""
"이 예제에서 사용하는 그림 파일은 <link href=\"https://live.gnome.org/"
"TarynFox?action=AttachFile&amp;do=get&amp;target=gnome-image.png\">여기</"
"link>에서 받을 수 있습니다. 작성 중인 코드대로 동일한 디렉터리에 그림을 두었"
"는지 확인해보십시오."

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:105
#, no-wrap
msgid ""
"\n"
"        // Create a label\n"
"        this._label = new Gtk.Label ({ label: \"Welcome to GNOME, too!\" });\n"
msgstr ""
"\n"
"        // Create a label\n"
"        this._label = new Gtk.Label ({ label: \"Welcome to GNOME, too!\" });\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:109
msgid ""
"That code adds in the label beneath. You can see how we create widgets, "
"here; each one is a part of Gtk, and we can give it properties that "
"customize how it behaves. In this case, we set the Image's file property to "
"be the filename of the picture we want, and the Label's label property to be "
"the sentence that we want beneath the picture."
msgstr ""
"이 코드에서 그림 하단에 레이블을 추가합니다. 위젯을 만드는 방법을 볼 수가 있"
"지요. GTK의 일부분이고, 바꿀 모양으로 속성 값을 줄 수 있습니다. 여기서는 그림"
"의 file 속성을 우리가 원하는 그림의 파일 이름으로 넣었고 레이블의 label 속성"
"은 그림 아래에 표시할 문장을 넣었습니다."

#. (itstool) path: note/p
#: C/02_welcome_to_the_grid.js.page:110
msgid ""
"Yes, it sounds redundant for a Label to have a label property, but it's not. "
"Other widgets that contain text have a label property, so it's "
"<em>consistent</em> for the Label widget to have one too."
msgstr ""
"예 레이블의 label 속성은 뭔가 반복된 것 같죠. 하지만 그렇진 않습니다. 텍스트"
"를 가진 다른 위젯에도 label 속성이 있어서, 문장을 가진 레이블 위젯에 대해 "
"<em>일관된</em> 양상을 취하고 있죠."

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:111
msgid ""
"We can't just add these widgets to our window in order, though, the same way "
"HTML elements appear in the order you write them. That's because an "
"ApplicationWindow can only contain one widget."
msgstr ""
"창에 위젯을 추가할 때 이렇게 만 할 수 있는게 아니라, 위젯을 작성할 때 HTML 구"
"성 요소로 동일한 방식으로 작성하여 나타낼 수 있습니다. ApplicationWindow에서 "
"위젯 하나만 넣을 수 있는 이유가 됩니다."

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:112
msgid ""
"How do we get around that? By making that one widget a container widget, "
"which can hold more than one widget and organize them inside it. Behold: The "
"Grid."
msgstr ""
"어떻게 할까요? 이 위젯을 컨테이너 위젯으로 만들면, 위젯에 다른 위젯을 하나 이"
"상 더 넣을 수 있습니다. 이걸 그리드라 하죠."

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:113
#, no-wrap
msgid ""
"\n"
"        // Create the Grid\n"
"        this._grid = new Gtk.Grid ();\n"
msgstr ""
"\n"
"        // Create the Grid\n"
"        this._grid = new Gtk.Grid ();\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:118
msgid ""
"We're not giving it any properties yet. Those will come later, as we learn "
"how to use the Grid's powers. First, let's attach the Image and Label we "
"made to our Grid."
msgstr ""
"아직은 속성 값을 넣지 않았습니다. 일단 그리드의 막강한 기능을 사용하는 법을 "
"배우고 나서 속성 값을 넣겠구요. 우선, 앞에서 구성한 그림과 레이블을 그리드에 "
"넣어보겠습니다."

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:119
#, no-wrap
msgid ""
"\n"
"        // Attach the image and label to the grid\n"
"        this._grid.attach (this._image, 0, 0, 1, 1);\n"
"        this._grid.attach (this._label, 0, 1, 1, 1);\n"
msgstr ""
"\n"
"        // Attach the image and label to the grid\n"
"        this._grid.attach (this._image, 0, 0, 1, 1);\n"
"        this._grid.attach (this._label, 0, 1, 1, 1);\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:125
msgid ""
"This code looks awfully complicated, but it's not. Here's what those numbers "
"mean:"
msgstr ""
"이 코드는 억수로 복잡해보이지만, 그렇지가 않아요읭? 여기 나타난 숫자는:"

#. (itstool) path: item/p
#: C/02_welcome_to_the_grid.js.page:127
msgid ""
"The <em>first</em> number is what left-to-right position to put things in, "
"starting from 0. Any widget that uses a 0 here goes all the way to the left."
msgstr ""
"<em>첫번째</em> 숫자는 왼쪽에서 오른쪽으로 어떤 위치에 둘거냐를 말하는데, 0부"
"터 시작합니다. 여기에 0 값이 들어가면 왼쪽에 넣겠다는 의미죠."

#. (itstool) path: item/p
#: C/02_welcome_to_the_grid.js.page:128
msgid ""
"The <em>second</em> number is what top-to-bottom position to put a given "
"widget in, starting from 0. The Label goes beneath the Image, so we give the "
"Image a 0 and the Label a 1 here."
msgstr ""
"<em>두번째</em> 숫자는 위에서 아래로 어떤 위치에 둘거냐를 말하는데, 역시 0부"
"터 시작합니다. 레이블이 그림 아래로 가니까, 그림에는 이 자리에 0 값을 주고, "
"레이블은 1 값을 줍니다."

#. (itstool) path: item/p
#: C/02_welcome_to_the_grid.js.page:129
msgid ""
"The <em>third</em> and <em>fourth</em> numbers are how many columns and rows "
"a widget should take up. We'll see how these work in a minute."
msgstr ""
"<em>세번째</em>와 <em>네번째</em> 숫자는 행열(열-행 순) 위젯 갯수를 몇개로 둘"
"지 나타냅니다. 조금 이따가 어떻게 동작하는지 보겠습니다."

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:132
#, no-wrap
msgid ""
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new WelcomeToTheGrid ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new WelcomeToTheGrid ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:146
msgid ""
"Now that we've created the Grid and attached all our widgets to it, we add "
"it to the window and tell the window to show itself, as the last part of the "
"_buildUI function. As always, to finish up we create a new instance of the "
"application's class and tell it to run."
msgstr ""
"이제 모든 위젯을 넣은 그리드를 만들어서 창에 추가했고, _buildUI 함수의 마지"
"막 부분에서 창에서 그동안 추가한 위젯을 표시하도록 했습니다. 언제든지 마무리"
"할 때는 프로그램 클래스의 새 인스턴스를 만들고 실행을 지시합니다."

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:147
msgid ""
"Save your application as welcome_to_the_grid.js. Then, to run your "
"application just open a terminal, go to the directory where your application "
"is at, and type"
msgstr ""
"프로그램을 welcome_to_the_grid.js로 저장하시고요. 프로그램을 실행하려면 그냥 "
"터미널을 여시고, 프로그램이 있는 디렉터리로 가셔서 다음 명령을 쳐 넣으세요"

#. (itstool) path: section/screen
#: C/02_welcome_to_the_grid.js.page:148
#, no-wrap
msgid " <output style=\"prompt\">$ </output>gjs welcome_to_the_grid.js "
msgstr " <output style=\"prompt\">$ </output>gjs welcome_to_the_grid.js "

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:150
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_02.png' md5='07db86b0043ba5c3c24a90d7322bd81e'"
msgstr ""

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:152
msgid ""
"There we go! But wait. That doesn't look right. Why is the Label crammed up "
"next to the Image like that? That doesn't look as nice, and it makes it "
"harder to read. What can we do about this?"
msgstr ""
"아 돌아가네요! 어 근데 잠깐만요? 제대로 나타나질 않네요. 왜 레이블이 그림 옆"
"으로 쑤셔들어갔을까요? 별로 좋아보이지 않고, 알아보기가 어렵네요. 이걸 어떻"
"게 할 수 있을까요?"

#. (itstool) path: section/title
#: C/02_welcome_to_the_grid.js.page:156
msgid "Tweaking the Grid"
msgstr "그리드 조절"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:158
msgid ""
"One thing we can do, is we can give the Label a margin_top property when we "
"create it. This works sort of like setting a margin for an HTML element "
"using inline CSS styling."
msgstr ""
"여기서 우리는 우리가 레이블을 만들 때 margin_top 속성 값을 줄 수 있습니다. 인"
"라인 CSS 스타일로 HTML 구성 요소에 여백 값을 주는 일과 비슷하죠."

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:159
#, no-wrap
msgid ""
"\n"
"        // Create a label\n"
"        this._label = new Gtk.Label ({\n"
"            label: \"Welcome to GNOME, too!\",\n"
"            margin_top: 20 });\n"
msgstr ""
"\n"
"        // Create a label\n"
"        this._label = new Gtk.Label ({\n"
"            label: \"Welcome to GNOME, too!\",\n"
"            margin_top: 20 });\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:166
msgid ""
"Of course, if we do that then if we replace the Label with something else -- "
"or add in another widget -- then we have to repeat the margin_top on it too. "
"Otherwise we end up with something like this:"
msgstr ""
"물론, 이렇게 하고 나면 레이블을 다른 모양새로, 또는 다른 위젯으로 바꿀 때 "
"margin_top 속성 값 설정을 반복해야합니다. 아니면 다음과 같이 끝냅니다:"

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:167
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_03.png' md5='817351e73c687d47253c56ed06b6629f'"
msgstr ""

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:169
msgid ""
"We could give the Image a margin_bottom property, but that won't work when "
"the new Label is in a separate column. So how about we try this instead:"
msgstr ""
"그림에 margin_bottom 속성 값을 줄 수 있지만, 새 레이블을 개별 칸에 넣을 경우 "
"동작하지 않습니다. 그래서 대신, 다음과 같이 해보겠습니다:"

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:170
#, no-wrap
msgid ""
"\n"
"        // Create the Grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            row_spacing: 20 });\n"
msgstr ""
"\n"
"        // Create the Grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            row_spacing: 20 });\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:176
msgid ""
"That makes it so that there are always 20 pixels of space in between each "
"horizontal row."
msgstr "수평행에 배치했을 때 사이 여백을 항상 20 픽셀로 두도록합니다."

#. (itstool) path: note/p
#: C/02_welcome_to_the_grid.js.page:177
msgid ""
"Yes, you can also set the column_spacing property on a Grid, or the "
"margin_left and margin_right properties on any widget. Try them out, if you "
"like!"
msgstr ""
"예, 그리드에서 column_spacing 속성 값을 설정하든지 각 위젯의 margin_left, "
"margin_right 값을 설정할 수도 있습니다. 원하면 해보세요!"

#. (itstool) path: section/title
#: C/02_welcome_to_the_grid.js.page:181
msgid "Adding more widgets"
msgstr "위젯 또 추가하기"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:183
msgid ""
"If we did want to add a second Label, how would we do it so that it actually "
"looked like it belonged there? One way is to center the Image on top, so "
"that it's above both Labels instead of just the one on the left. That's "
"where those other numbers in the Grid's attach method come in:"
msgstr ""
"두번째 레이블을 또 추가하고 싶다면 말이죠. 우리가 그리드에 어떻게 넣어서 그렇"
"게 보이게 했을까요? 방법은 상단 그림을 가운데로 두어서 레이블의 왼편으로 가"
"는 대신 두 레이블의 위로 가게 했습니다. 다음 내용은 그리드에 레이블을 또 넣"
"는 방법을 나타냅니다:"

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:184
#, no-wrap
msgid ""
"\n"
"        // Create a second label\n"
"        this._labelTwo = new Gtk.Label ({\n"
"            label: \"The cake is a pie.\" });\n"
"\n"
"        // Attach the image and labels to the grid\n"
"        this._grid.attach (this._image, 0, 0, 2, 1);\n"
"        this._grid.attach (this._label, 0, 1, 1, 1);\n"
"        this._grid.attach (this._labelTwo, 1, 1, 1, 1);\n"
msgstr ""
"\n"
"        // Create a second label\n"
"        this._labelTwo = new Gtk.Label ({\n"
"            label: \"The cake is a pie.\" });\n"
"\n"
"        // Attach the image and labels to the grid\n"
"        this._grid.attach (this._image, 0, 0, 2, 1);\n"
"        this._grid.attach (this._label, 0, 1, 1, 1);\n"
"        this._grid.attach (this._labelTwo, 1, 1, 1, 1);\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:195
msgid ""
"After we create the second Label, we attach it to the Grid to the right of "
"the first Label. Remember, the first two numbers count columns and rows from "
"left to right and top to bottom, starting with 0. So if the first Label is "
"in column 0 and row 1, we can put the second in column 1 and row 1 to put it "
"to the right of the first Label."
msgstr ""
"두번째 레이블을 만들고 나면 처음 레이블의 오른쪽으로 가도록 그리드에 붙여넣습"
"니다. 처음 숫자 두개는 열-행 숫자를 각각 왼쪽에서 오른쪽순으로 그리고 위에서 "
"아래 순으로 0번부터 센다는 점을 기억하시죠. 그러니까 첫번째 레이블이 0번째 "
"칸, 1번째 줄(첫번째 칸, 두번째 줄)에서 시작하면, 두번째 레이블은 처음 레이블"
"의 오른쪽에 가도록 1번째 칸, 1번째 줄(두번째 칸, 두번째 줄)에 둘 수 있습니다."

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:196
msgid ""
"Note the number 2 in the attach statement for the Image. That's what does "
"the trick here. That number is how many columns the Image spans, remember? "
"So when we put it together, we get something like this:"
msgstr ""
"여기서 붙여넣기 구분의 숫자 2는 그림에 해당합니다. 여기서 사용하는 꼼수에서 "
"할 일입니다. 해당 숫자 값은 그림이 칸을 얼마나 차지하겠느냐는 의미입니다. 그"
"래서 이걸 같이 두면, 다음과 같이 나타납니다:"

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:197
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_04.png' md5='eeaead27cee2851877fc3cfe66177f07'"
msgstr ""

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:199
msgid "There are two things you should take note of, here."
msgstr "알아둘 게 두가지가 있는데요."

#. (itstool) path: item/p
#: C/02_welcome_to_the_grid.js.page:201
msgid ""
"Setting the Image to span two columns doesn't stretch the picture itself "
"horizontally. Instead, it stretches the invisible box taken up by the Image "
"widget to fill both columns, then places the Image in the center of that box."
msgstr ""
"그림에 두칸을 차지하도록 설정한다고 해서 그림 자체가 수평으로 쭉 늘어나진 않"
"아요. 대신 그림 위젯 뒤의 보이지 않는 상자가 늘어나서 두 칸을 채우고, 그림은 "
"상자 한가운데로 갑니다."

#. (itstool) path: item/p
#: C/02_welcome_to_the_grid.js.page:202
msgid ""
"Even though we've set the Grid's row_spacing and the ApplicationWindow's "
"border_width properties, we haven't yet set anything that puts a border in "
"between the two Labels. They were separate earlier when the Image was in "
"only one column, but now that it spans both GNOME doesn't see a reason to "
"keep them apart."
msgstr ""
"그리드 row_spacing 속성 값과 ApplicationWindow의 border_width 속성 값을 설정"
"하긴 했지만, 레이블 둘 사이의 테두리에 대한 그 어떤 값도 설정하지 않았습니"
"다. 그림이 한 칸만 차지했을 때는 따로 나뉘어져있었지만, 그놈 그림이 두 칸을 "
"차지한 이후로는 두 레이블이 따로 떨어져 보일 이유를 찾아볼 수가 없죠."

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:205
msgid ""
"There are at least three ways we can get around that last one. First, we can "
"set a margin_left or margin_right on one of the Labels:"
msgstr ""
"마지막 문제를 해결할 수 있는데는 최소한 세가지 방법이 있습니다. 우선 레이블 "
"중 하나에 margin_left 또는 margin_right 값을 설정할 수 있습니다:"

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:206
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_05.png' md5='a3ad12f432d5977fc1f66302ad5b7498'"
msgstr ""

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:208
msgid "Second, we can set the Grid's column_homogeneous property to true."
msgstr ""
"두번째로, 그리드의 column_homogeneous 속성 값을 true로 설정할 수 있고요."

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:209
#, no-wrap
msgid ""
"\n"
"        // Create the Grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            column_homogeneous: true,\n"
"            row_spacing: 20 });\n"
msgstr ""
"\n"
"        // Create the Grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            column_homogeneous: true,\n"
"            row_spacing: 20 });\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:216
msgid "That makes it look something like this:"
msgstr "이렇게 하면 다음과 같이 나타납니다:"

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:217
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_06.png' md5='450e48dbf6b8f5ce1c208e4812e1714b'"
msgstr ""

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:219
msgid ""
"And third, we can set the Grid's column_spacing property, the same way we "
"set its row_spacing."
msgstr ""
"그리고 세번째로는, 그리드의 column_spacing 속성 값을 설정하는데요. "
"row_spacing 속성 값 설정 방식과 동일합니다."

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:220
#, no-wrap
msgid ""
"\n"
"        // Create the Grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            column_spacing: 20,\n"
"            row_spacing: 20 });\n"
msgstr ""
"\n"
"        // Create the Grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            column_spacing: 20,\n"
"            row_spacing: 20 });\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:226
msgid "That makes it look like this:"
msgstr "이렇게 하면 다음과 같이 나타나죠:"

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:227
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_07.png' md5='0b304d70728903fbb2601d55bf00fdb9'"
msgstr ""

#. (itstool) path: section/title
#: C/02_welcome_to_the_grid.js.page:231
msgid "Using stock images"
msgstr "스톡 그림 사용"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:233
msgid ""
"GNOME has a lot of stock images on hand already, that we can use if we don't "
"feel like creating our own or if we want a universally-recognized icon. "
"Here's how we create a stock image, compared to how we create a normal one:"
msgstr ""
"그놈에는 그림을 만들고 싶지 않거나 전세계적으로 통용하는 아이콘을 사용하고 싶"
"을 때 쓸 수 있는 여러가지 스톡 그림이 이미 있습니다. 여기서 그냥 그림을 만드"
"는 방법과 비교하여, 스톡 그림을 만드는 방법을 알아보도록 하겠습니다:"

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:234
#, no-wrap
msgid ""
"\n"
"        // Create an image\n"
"        this._image = new Gtk.Image ({ file: \"gnome-image.png\" });\n"
"\n"
"        // Create a second image using a stock icon\n"
"        this._icon = new Gtk.Image ({ stock: 'gtk-about' });\n"
msgstr ""
"\n"
"        // Create an image\n"
"        this._image = new Gtk.Image ({ file: \"gnome-image.png\" });\n"
"\n"
"        // Create a second image using a stock icon\n"
"        this._icon = new Gtk.Image ({ stock: 'gtk-about' });\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:241
msgid ""
"After that, we attach it to the Grid to the left of the first Label. (We "
"aren't using the second one for this example.)"
msgstr ""
"그 다음 그리드에 붙인 처음 레이블의 왼편에 붙여넣어보겠습니다(이 예제에는 두"
"번째 레이블이 없어요~)."

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:242
#, no-wrap
msgid ""
"\n"
"        // Attach the images and label to the grid\n"
"        this._grid.attach (this._image, 0, 0, 2, 1);\n"
"        this._grid.attach (this._icon,  0, 1, 1, 1);\n"
"        this._grid.attach (this._label, 1, 1, 1, 1);\n"
msgstr ""
"\n"
"        // Attach the images and label to the grid\n"
"        this._grid.attach (this._image, 0, 0, 2, 1);\n"
"        this._grid.attach (this._icon,  0, 1, 1, 1);\n"
"        this._grid.attach (this._label, 1, 1, 1, 1);\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:248
msgid "That gives us this, when we run it:"
msgstr "실행하면 다음 화면이 나타납니다:"

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/02_welcome_to_the_grid.js.page:249
msgctxt "_"
msgid ""
"external ref='media/02_jsgrid_08.png' md5='78890beb47bd11360154b8ca4d50d1ff'"
msgstr ""

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:251
msgid ""
"That's what the stock \"About\" icon looks like. You can see a list of all "
"the stock items starting with gtk-about in <link href=\"https://developer."
"gnome.org/gtk3/3.4/gtk3-Stock-Items.html#GTK-STOCK-ABOUT:CAPS\">GNOME's "
"developer documentation</link>. It was written for C programmers, but you "
"don't need to know C to use it; just look at the part in quotation marks, "
"like \"gtk-about\", and copy that part to use the icon next to it."
msgstr ""
"이게 \"정보\" 스톡 아이콘 같은 그림입니다. gtk-about부터 시작하는 모든 스톡 "
"항목은 <link href=\"https://developer.gnome.org/gtk3/3.4/gtk3-Stock-Items."
"html#GTK-STOCK-ABOUT:CAPS\">그놈 개발자 문서</link>에서 볼 수 있습니다. C 프"
"로그래머에 해당하는 내용으로 작성했지만, 스톡 항목을 사용하는데 C 언어를 알 "
"필요는 없습니다. 그냥 \"gtk-about\" 처럼 큰 따옴표에 둘러싸인 부분만 보시고, "
"아이콘 옆에 있는 부분을 복사해서 쓰십시오."

#. (itstool) path: note/p
#: C/02_welcome_to_the_grid.js.page:252
msgid ""
"We put single quotes around 'gtk-about' here because, unlike text strings "
"that have double quotes around them, that part will never need to be "
"translated into another language. In fact, if it <em>were</em> translated "
"it'd break the icon, because its name is still \"gtk-about\" no matter which "
"language you speak."
msgstr ""
"큰 따옴표를 붙여넣은 텍스트 문자열과는 달리 'gtk-about'에 작은 따옴표를 붙여"
"넣었는데, 이 부분은 다른 언어로 굳이 번역할 필요가 전혀 없습니다. 사실, 어떤 "
"언어를 사용하든 스톡 그림 이름이 \"gtk-about\"이기 때문에, 이 부분을 번역<em>"
"하면</em> 아이콘이 깨집니다."

#. (itstool) path: section/title
#: C/02_welcome_to_the_grid.js.page:257 C/03_getting_the_signal.js.page:338
#: C/hellognome.js.page:187
msgid "What's next?"
msgstr "다음은요?"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:258
msgid ""
"Before we go on to the next tutorial, let's try something a little different:"
msgstr "다음 따라하기 내용으로 넘어가기 전에, 좀 다른걸 해보겠습니다:"

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:259
#, no-wrap
msgid ""
"\n"
"        // Create a button\n"
"        this._button = new Gtk.Button ({\n"
"            label: \"Welcome to GNOME, too!\"});\n"
"\n"
"        // Attach the images and button to the grid\n"
"        this._grid.attach (this._image,  0, 0, 2, 1);\n"
"        this._grid.attach (this._icon,   0, 1, 1, 1);\n"
"        this._grid.attach (this._button, 1, 1, 1, 1);\n"
msgstr ""
"\n"
"        // Create a button\n"
"        this._button = new Gtk.Button ({\n"
"            label: \"Welcome to GNOME, too!\"});\n"
"\n"
"        // Attach the images and button to the grid\n"
"        this._grid.attach (this._image,  0, 0, 2, 1);\n"
"        this._grid.attach (this._icon,   0, 1, 1, 1);\n"
"        this._grid.attach (this._button, 1, 1, 1, 1);\n"

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:270
msgid ""
"That's right, we turned the Label into a Button just by changing the name! "
"If you run the application and click on it, though, you'll find that it "
"doesn't do anything. How do we make our Button do something? That's what "
"we'll find out, in <link xref=\"03_getting_the_signal.js\">our next "
"tutorial</link>."
msgstr ""
"예, 됐구요~ 레이블을 이름만 바꿔서 단추로 만들었습니다! 프로그램을 실행하고 "
"나서 눌러보면 아무동작도 하지 않습니다. 단추를 눌렀을 때 어떤 동작을 하게 하"
"려면 어떻게 할까요? <link xref=\"03_getting_the_signal.js\">다음 따라하기</"
"link>에서 찾아볼 수 있습니다."

#. (itstool) path: section/p
#: C/02_welcome_to_the_grid.js.page:271
msgid ""
"If you like, feel free to spend some time experimenting with Grids, Labels, "
"and Images, including stock images."
msgstr ""
"원한다면 그리드, 레이블, 그림, 스톡 그림으로 자유롭게 무언가를 해보세요."

#. (itstool) path: note/p
#: C/02_welcome_to_the_grid.js.page:272
msgid ""
"One trick you can use to make more complex layouts is to nest Grids inside "
"of each other. This lets you group together related widgets, and rearrange "
"them easily. Take a look at the <link xref=\"radiobutton.js\">RadioButton</"
"link> code sample if you'd like to see how this is done."
msgstr ""
"더 복잡하게 배치하는 방법은 그리드 안에 그리드를 넣는 방법입니다. 위젯에 상대"
"적인 위치에 모아둘 수 있고 쉽게 재정돈할 수 있습니다. 어떻게 하는지 보고 싶으"
"면 <link xref=\"radiobutton.js\">RadioButton</link> 예제 코드를 살펴보시지요."

#. (itstool) path: section/title
#: C/02_welcome_to_the_grid.js.page:276 C/checkbutton.js.page:131
#: C/comboboxtext.js.page:171 C/combobox.js.page:228 C/hellognome.js.page:194
#: C/messagedialog.js.page:184 C/radiobutton.js.page:269 C/scale.js.page:203
#: C/spinbutton.js.page:194 C/statusbar.js.page:216 C/switch.js.page:259
#: C/textview.js.page:243 C/togglebutton.js.page:148
#: C/treeview_simple_liststore.js.page:267
msgid "Complete code sample"
msgstr "완전한 코드 예제"

#. (itstool) path: section/code
#: C/02_welcome_to_the_grid.js.page:277
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const WelcomeToTheGrid = new Lang.Class({\n"
"    Name: 'Welcome to the Grid',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 10,\n"
"            title: \"Welcome to the Grid\"});\n"
"\n"
"        // Create the Grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            // column_homogeneous: true,\n"
"            // column_spacing: 20,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Create an image\n"
"        this._image = new Gtk.Image ({ file: \"gnome-image.png\" });\n"
"\n"
"        // Create a second image using a stock icon\n"
"        this._icon = new Gtk.Image ({ stock: 'gtk-about' });\n"
"\n"
"        // Create a label\n"
"        this._label = new Gtk.Label ({\n"
"            label: \"Welcome to GNOME, too!\",\n"
"            /* margin_top: 20 */ });\n"
"\n"
"        /* Create a second label\n"
"        this._labelTwo = new Gtk.Label ({\n"
"            label: \"The cake is a pie.\" }); */\n"
"\n"
"        /* Create a button\n"
"        this._button = new Gtk.Button ({\n"
"            label: \"Welcome to GNOME, too!\"}); */\n"
"\n"
"        // Attach the images and button to the grid\n"
"        this._grid.attach (this._image,  0, 0, 2, 1);\n"
"        this._grid.attach (this._icon,   0, 1, 1, 1);\n"
"        this._grid.attach (this._label,  1, 1, 1, 1);\n"
"\n"
"        // this._grid.attach (this._label, 0, 1, 1, 1);\n"
"        // this._grid.attach (this._labelTwo, 1, 1, 1, 1);\n"
"\n"
"        // this._grid.attach (this._button, 1, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new WelcomeToTheGrid ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const WelcomeToTheGrid = new Lang.Class({\n"
"    Name: 'Welcome to the Grid',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 10,\n"
"            title: \"Welcome to the Grid\"});\n"
"\n"
"        // Create the Grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            // column_homogeneous: true,\n"
"            // column_spacing: 20,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Create an image\n"
"        this._image = new Gtk.Image ({ file: \"gnome-image.png\" });\n"
"\n"
"        // Create a second image using a stock icon\n"
"        this._icon = new Gtk.Image ({ stock: 'gtk-about' });\n"
"\n"
"        // Create a label\n"
"        this._label = new Gtk.Label ({\n"
"            label: \"Welcome to GNOME, too!\",\n"
"            /* margin_top: 20 */ });\n"
"\n"
"        /* Create a second label\n"
"        this._labelTwo = new Gtk.Label ({\n"
"            label: \"The cake is a pie.\" }); */\n"
"\n"
"        /* Create a button\n"
"        this._button = new Gtk.Button ({\n"
"            label: \"Welcome to GNOME, too!\"}); */\n"
"\n"
"        // Attach the images and button to the grid\n"
"        this._grid.attach (this._image,  0, 0, 2, 1);\n"
"        this._grid.attach (this._icon,   0, 1, 1, 1);\n"
"        this._grid.attach (this._label,  1, 1, 1, 1);\n"
"\n"
"        // this._grid.attach (this._label, 0, 1, 1, 1);\n"
"        // this._grid.attach (this._labelTwo, 1, 1, 1, 1);\n"
"\n"
"        // this._grid.attach (this._button, 1, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new WelcomeToTheGrid ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: info/desc
#: C/03_getting_the_signal.js.page:21
msgid "Create Buttons and other widgets that do things when you click on them."
msgstr "단추와 단추를 누르면 동작하는 다른 위젯을 만듭니다."

#. (itstool) path: page/title
#: C/03_getting_the_signal.js.page:24
msgid "3. Getting the Signal"
msgstr "3. 시그널 취하기"

#. (itstool) path: synopsis/p
#: C/03_getting_the_signal.js.page:26
msgid ""
"In the last tutorial, we learned how to create widgets like Labels, Images, "
"and Buttons. Here, we'll learn how to make Buttons and other input widgets "
"actually do things, by writing functions which handle the signals they send "
"when they are clicked on or interacted with."
msgstr ""
"이전 따라하기 과정에서 레이블, 그림, 단추 위젯을 만드는 방법을 알아보았습니"
"다. 여기서는 단추를 누르거나 어떤 반응을 받았을 때 보내는 시그널을 처리할 함"
"수를 작성하여 단추와 기타 입력 위젯을 만드는 방법을 알아보겠습니다."

#. (itstool) path: section/title
#: C/03_getting_the_signal.js.page:32
msgid "A basic application"
msgstr "기본 프로그램"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:33
msgid ""
"In GNOME, widgets that you can interact with, like Buttons and Switches, "
"send out signals when they are clicked on or activated. A Button, for "
"instance, sends out the \"clicked\" signal when somebody clicks on it. When "
"this happens, GNOME looks for the part in your code that says what to do."
msgstr ""
"그놈에서 단추, 스위치 같이 다룰 수 있는 위젯은 누르거나 마우스 커서를 올려두"
"는 식으로 활성화하면 시그널을 내보냅니다. 예를 들어, 단추라면 누군가가 단추"
"를 누르면 \"clicked\" 시그널을 내보냅니다. 시그널이 나오면, 그놈에서는 여러분"
"이 작성한 코드에서 시그널에 반응하는 부분을 찾습니다."

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:34
msgid ""
"How do we write that code? By connecting that Button's \"clicked\" signal to "
"a callback function, which is a function you write just to handle that "
"signal. So whenever it gives off that signal, the function connected to that "
"signal is run."
msgstr ""
"코드를 어떻게 작성할까요? 단추의 \"clicked\" 시그널을 콜백 함수에 연결하면, "
"해당 함수에서 시그널을 처리합니다. 따라서 시그널을 줄 때마다 시그널에 연결한 "
"함수가 동작하죠."

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:35
msgid "Here is an extremely basic example:"
msgstr "매우 기본적인 예제입니다:"

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/03_getting_the_signal.js.page:37 C/03_getting_the_signal.js.page:351
msgctxt "_"
msgid ""
"external ref='media/03_jssignal_01.png' "
"md5='8d6ecab185f4af4534cc255d62b58b8e'"
msgstr ""

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:39
msgid ""
"This ApplicationWindow has a Button and a Label inside it, arranged in a "
"Grid. Whenever the Button is clicked, a variable that holds the number of "
"cookies is increased by 1, and the Label that shows how many cookies there "
"are is updated."
msgstr ""
"ApplicationWindow에는 단추와 레이블이 있는데 이걸 그리드로 정렬했습니다. 단추"
"를 클릭할 때마다 과자 갯수 값을 가진 변수 값이 하나씩 늘어나고, 과자 갯수를 "
"보여주는 레이블이 바뀝니다."

#. (itstool) path: note/p
#: C/03_getting_the_signal.js.page:40
msgid ""
"The cookies in this example are not the same as the cookies that you get "
"from websites, which store your login information and may keep track of "
"which sites you've visited. They're just imaginary treats. You may bake some "
"real ones if you like."
msgstr ""
"이 예제의 과자는 웹사이트에서 로그인 정보를 저장하고 방문 사이트 상태를 보관"
"하는 그런 과자가 아닙니다. 그냥 상상속의 무언가일 뿐이죠. 원하면 실제로 구워"
"드세요."

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:41
msgid ""
"Here is the basic, boilerplate code that goes at the start of the "
"application, before we start creating the window and widgets. Besides the "
"application having a unique name, the biggest change from the usual "
"boilerplate is that we create a global variable right near the beginning, to "
"hold the number of cookies."
msgstr ""
"하여간, 윈도우와 위젯 만들기를 시작하기 전 프로그램을 시작하는 기본 기반 코드"
"를 작성하겠습니다. 프로그램에 고유 이름을 붙이고, 기반 코드에서 확 바뀌는 부"
"분은 과자 갯수 값을 보관하는 코드 시작 부분의 전역 변수 추가입니다."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:42
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// We start out with 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// We start out with 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:73
msgid ""
"Take a look at the part that uses our application's connect method and Lang."
"bind, to connect its activate and startup signals to the functions that "
"present the window and build the UI. We're going to do the same thing with "
"our Button when we get to it, except that we're going to connect its "
"\"clicked\" signal instead."
msgstr ""
"프로그램의 connect 메서드와 Lang.bind 부분을 보시죠. activate시그널과 "
"startup 시그널을 창을 나타내고 사용자 인터페이스를 구성하는 함수에 연결하죠. "
"단추에도 \"clicked\" 시그널에 연결한다는 점만 빼고는 똑같은 방식을 취합니다."

#. (itstool) path: section/title
#: C/03_getting_the_signal.js.page:77
msgid "Click the button"
msgstr "단추 누르기"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:79
msgid ""
"As usual, we'll put all the code to create our Button and other widgets "
"inside the _buildUI function, which is called when the application starts up."
msgstr ""
"보통 때와 같이, 프로그램을 시작할 때 호출하는 _buildUI 함수에, 단추와 다른 위"
"젯을 만드는 모든 코드를 넣겠습니다."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:80
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
msgstr ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:85
msgid "First, we create the window itself:"
msgstr "우선, 창을 만들고요:"

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:86
#, no-wrap
msgid ""
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            title: \"Click the button to get a cookie!\"});\n"
msgstr ""
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            title: \"Click the button to get a cookie!\"});\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:95
msgid ""
"Note that we've set its default_height and default_width properties. These "
"let us control how tall and wide the ApplicationWindow will be, in pixels."
msgstr ""
"여기서 default_height, default_width 속성을 설정한 걸 보시죠. "
"ApplicationWindow의 너비 높이를 픽셀 단위로 설정합니다."

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:96
msgid ""
"Next, we'll create the Label that shows us the number of cookies. We can use "
"the cookies variable as part of the Label's label property."
msgstr ""
"다음, 과자 갯수를 보여줄 레이블을 만들겠습니다. 레이블의 label 속성 일부로 "
"cookies 변수를 사용할 수 있습니다."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:97
#, no-wrap
msgid ""
"\n"
"        // Create the label\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
msgstr ""
"\n"
"        // Create the label\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:103
msgid ""
"Now we'll create the Button. We set its label property to show the text that "
"we want on the Button, and we connect its \"clicked\" signal to a function "
"called _getACookie, which we'll write after we're done building our "
"application's UI."
msgstr ""
"다음, 단추를 만들겠습니다. 단추에 표시할 텍스트를 보여줄 때 label 속성 값을 "
"설정할 수 있고, 프로그램 사용자 인터페이스를 구성하고 나서 작성할 "
"_getACookie 함수에 \"clicked\" 시그널을 연결하겠습니다."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:104
#, no-wrap
msgid ""
"\n"
"        // Create the cookie button\n"
"        this._cookieButton = new Gtk.Button ({ label: \"Get a cookie\" });\n"
"\n"
"        // Connect the cookie button to the function that handles clicking it\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
msgstr ""
"\n"
"        // Create the cookie button\n"
"        this._cookieButton = new Gtk.Button ({ label: \"Get a cookie\" });\n"
"\n"
"        // Connect the cookie button to the function that handles clicking it\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:111
msgid ""
"Finally, we create a Grid, attach the Label and Button to it, add it to the "
"window and tell the window to show itself and its contents. That's all we "
"need inside the _buildUI function, so we close it with a bracket, as well as "
"a comma that tells GNOME to go on to the next function. Note that even "
"though we wrote the code for the Label first, we can still attach it to the "
"Grid in a way that will put it on the bottom."
msgstr ""
"마지막으로, 그리드를 만들어 레이블과 단추를 붙여넣은 후, 그리드에 붙여넣은 위"
"젯을 창 위에 표시하도록 창에 추가하겠습니다. 이게 _buildUI 함수에서 작성할 모"
"든 내용이니, 중괄호로 닫으세요. 쉼표를 입력해서 다음 함수로 넘어간다는걸 그놈"
"에 알려주시고요. 레이블 코드를 먼저 작성하겠지만, 해당 코드 아래에서 그리드"
"에 붙여넣을 수 있습니다."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:112
#, no-wrap
msgid ""
"\n"
"        // Create a grid to arrange everything inside\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._cookieButton, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
msgstr ""
"\n"
"        // Create a grid to arrange everything inside\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._cookieButton, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"\n"
"    },\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:131
msgid ""
"Now, we write the _getACookie function. Whenever our Button sends out its "
"\"clicked\" signal, the code in this function will run. In this case, all it "
"does is increase the number of cookies by 1, and update the Label to show "
"the new number of cookies. We do this using the Label's set_label method."
msgstr ""
"이제 _getACookie 함수를 작성하겠습니다. 단추에서 \"clicked\" 시그널을 보낼 따"
"마다 이 함수의 코드를 실행합니다. 이 때 과자 갯수가 하나씩 늘어나며, 레이블"
"에 새 과자 갯수 값이 들어가서 바뀝니다. 이 동작은 레이블의 set_label 메서드"
"로 처리하겠습니다."

#. (itstool) path: note/p
#: C/03_getting_the_signal.js.page:132
msgid ""
"Many widgets have the same properties and methods. Both Labels and Buttons, "
"for instance, have a label property that says what text is inside them, and "
"get_label and set_label methods that let you check what that text is and "
"change it, respectively. So if you learn how one widget works, you'll also "
"know how others like it work."
msgstr ""
"여러 위젯에 동일한 속성과 메서드가 있습니다. 레이블 및 단추에도 어떤 텍스트"
"를 넣는지 나타내는 lable 속성이 있고, 어떤 텍스트가 있는지 확인하는 get_label"
"과 텍스트를 바꾸는 set_label 메서드가 있습니다. 따라서 위젯 동작 방식을 알면 "
"다른 위젯 동작 방식도 알게 되는거죠??."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:133
#, no-wrap
msgid ""
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Increase the number of cookies by 1 and update the label\n"
"        cookies++;\n"
"        this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Increase the number of cookies by 1 and update the label\n"
"        cookies++;\n"
"        this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:145
msgid ""
"Finally, we run the application, using the same kind of code as in our last "
"tutorial."
msgstr ""
"마지막으로, 이전 따라하기 예제에서 코드를 실행했던 방식으로 프로그램을 실행하"
"겠습니다."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:146
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Run the application\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/title
#: C/03_getting_the_signal.js.page:154
msgid "Flip the switch"
msgstr "스위치 젖히기"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:155
msgid ""
"Buttons aren't the only input widgets in our GTK+ toolbox. We can also use "
"switches, like the one in this example. Switches don't have a label "
"property, so we have to create a separate Label that says what it does to go "
"next to it."
msgstr ""
"GTK+ 도구함에는 단추만 있는게 아닙니다. 이 예제에서와 같이 스위치도 있구요~. "
"스위치는 레이블 속성이 없어서 스위치가 어떤 역할을 하는지 레이블을 옆에 따로 "
"만들어야합니다."

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/03_getting_the_signal.js.page:157 C/03_getting_the_signal.js.page:357
msgctxt "_"
msgid ""
"external ref='media/03_jssignal_02.png' "
"md5='ba941390fbafc4a0f653c8f70bca92c0'"
msgstr ""

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:159
msgid ""
"A Switch has two positions, Off and On. When a Switch is turned on, its text "
"and background color change, so you can tell which position it's in."
msgstr ""
"스위치 단추의 위치는, 끔 아니면 켬 두가지가 있죠. 스위치를 켠 상태로 두면 텍"
"스트와 배경 색이 바뀌어서 어떤 상태인지 확인할 수 있습니다."

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:161
msgid ""
"You may have seen Switches like these in GNOME's accessibility menu, which "
"let you turn features like large text and the on-screen keyboard on and off. "
"In this case, the Switch controls our imaginary cookie dispenser. If the "
"Switch is turned on, you can get cookies by clicking the \"Get a cookie\" "
"Button. If it's turned off, clicking the Button won't do anything."
msgstr ""
"큰 글씨를 표시하고 화면 키보드를 켜고 끄는 기능을 갖춘 그놈 접근성 메뉴 같은"
"데서 이런 스위치를 볼 수 있죠. 여기서 스위치로 가상의 과자 뽑기 기계 동작 여"
"부를 다루겠습니다. 스위치를 켜두면 \"Get a cookie\" 단추를 눌렀을 때 과자를 "
"받을 수 있습니다. 스위치를 끄면 단추를 눌렀을 때 반응하지 않고요."

#. (itstool) path: note/p
#: C/03_getting_the_signal.js.page:162
msgid ""
"You can get to the accessibility menu by clicking on the outline of a human, "
"near your name in the upper-right corner of the screen."
msgstr ""
"화면의 우측 상단에 사용자 이름이 있는 사람 모양 아이콘을 누르면 접근성 메뉴"
"로 들어갈 수 있습니다."

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:163
msgid "Here's how we create the Switch:"
msgstr "이제 스위치를 어떻게 만드는지 알아보죠:"

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:164
#, no-wrap
msgid ""
"\n"
"        // Create the switch that controls whether or not you can win\n"
"        this._cookieSwitch = new Gtk.Switch ();\n"
msgstr ""
"\n"
"        // Create the switch that controls whether or not you can win\n"
"        this._cookieSwitch = new Gtk.Switch ();\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:169
msgid ""
"We don't actually need to connect the Switch to anything. All we need to do "
"is write an if statement in our _getACookie function, to check to see if the "
"Switch is turned on. If we wanted to make something happen as soon as you "
"flip the Switch, though, we would connect its notify::active signal, like so:"
msgstr ""
"스위치에서 뭘 할지는 실제로 연결할 필요가 없습니다. 우리가 할 일은 "
"_getACookie 함수에서 if 구문을 작성해서 스위치가 켜졌는지 여부만 확인하면 됩"
"니다. 스위치를 젖혔을 때 바로 무언가를 하려면 notify::active 시그널을 다음처"
"럼 연결하면 됩니다:"

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:170
#, no-wrap
msgid ""
"\n"
"        // Connect the switch to the function that handles it\n"
"        this._cookieSwitch.connect ('notify::active', Lang.bind (this, this._cookieDispenser));\n"
msgstr ""
"\n"
"        // Connect the switch to the function that handles it\n"
"        this._cookieSwitch.connect ('notify::active', Lang.bind (this, this._cookieDispenser));\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:175
msgid ""
"A Switch is set to the off position by default. If we wanted the Switch to "
"start out turned on, we would set the value of its active property to true "
"when we create it."
msgstr ""
"스위치는 기본적으로 끔 위치로 설정해둡니다. 켠 상태로 시작하게 하려면, 스위치"
"를 만들 때 active 속성을 true로 설정하면 됩니다."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:176
#, no-wrap
msgid ""
"\n"
"        this._cookieSwitch = new Gtk.Switch ({ active: true });\n"
msgstr ""
"\n"
"        this._cookieSwitch = new Gtk.Switch ({ active: true });\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:180
msgid ""
"Let's just create it normally, though, and then create the Label that goes "
"with it. We want the Switch and the Label to be kept right next to each "
"other, so we'll create a Grid just for them, then put that Grid in our "
"larger Grid that holds all the widgets inside it. Here's what the code looks "
"like to create all that:"
msgstr ""
"그럼 평범하게 만들어보고 옆에 레이블을 붙여두죠. 스위치와 레이블은 오른편에 "
"두는걸로 하겠습니다. 그렇게 해서, 이 위젯에 맞는 그리드를 만들고 이 그리드를 "
"큰 그리드에 넣겠습니다. 다 만들고 나면 코드가 다음과 같이 되겠죠:"

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:181
#, no-wrap
msgid ""
"\n"
"        // Create the switch that controls whether or not you can win\n"
"        this._cookieSwitch = new Gtk.Switch ();\n"
"\n"
"        // Create the label to go with the switch\n"
"        this._switchLabel = new Gtk.Label ({\n"
"            label: \"Cookie dispenser\" });\n"
"\n"
"        // Create a grid for the switch and its label\n"
"        this._switchGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Put the switch and its label inside that grid\n"
"        this._switchGrid.attach (this._switchLabel, 0, 0, 1, 1);\n"
"        this._switchGrid.attach (this._cookieSwitch, 1, 0, 1, 1);\n"
msgstr ""
"\n"
"        // Create the switch that controls whether or not you can win\n"
"        this._cookieSwitch = new Gtk.Switch ();\n"
"\n"
"        // Create the label to go with the switch\n"
"        this._switchLabel = new Gtk.Label ({\n"
"            label: \"Cookie dispenser\" });\n"
"\n"
"        // Create a grid for the switch and its label\n"
"        this._switchGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Put the switch and its label inside that grid\n"
"        this._switchGrid.attach (this._switchLabel, 0, 0, 1, 1);\n"
"        this._switchGrid.attach (this._cookieSwitch, 1, 0, 1, 1);\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:199
msgid "And now we arrange everything in the larger Grid like so."
msgstr "마찬가지로 이제 더 큰 그리드에 몽땅 정리하겠습니다."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:200
#, no-wrap
msgid ""
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._cookieButton, 0, 0, 1, 1);\n"
"        this._grid.attach (this._switchGrid, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
msgstr ""
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._cookieButton, 0, 0, 1, 1);\n"
"        this._grid.attach (this._switchGrid, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:207
msgid ""
"Now we change the _getACookie function so that it checks to see if the "
"cookie dispenser is turned on. We do that by using the Switch's get_active "
"method. It returns true if the Switch is turned on, and false if the Switch "
"is turned off."
msgstr ""
"이제 _getACookie 함수 코드를 바꿔서 과자 뽑기가 켜졌는지 확인하겠습니다. 스위"
"치의 get_active 메서드를 사용하겠습니다. 스위치가 켜져있으면 true, 꺼져있으"
"면 false를 반환합니다."

#. (itstool) path: note/p
#: C/03_getting_the_signal.js.page:208
msgid ""
"When a method is used in an if statement like this, the code inside the if "
"statement is executed if the method returns true."
msgstr ""
"if 구문에서 다음과 같이 메서드를 사용하면, 메서드에서 true를 반환했을 때 if "
"구문 안에 있는 코드를 실행합니다."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:209
#, no-wrap
msgid ""
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Is the cookie dispenser turned on?\n"
"        if (this._cookieSwitch.get_active()) {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
msgstr ""
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Is the cookie dispenser turned on?\n"
"        if (this._cookieSwitch.get_active()) {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"

#. (itstool) path: section/title
#: C/03_getting_the_signal.js.page:227
msgid "Tuning the radio"
msgstr "라디오 튜닝"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:229
msgid ""
"Another type of input widget we can use is called the RadioButton. You "
"create them in groups, and then only one RadioButton in a group can be "
"selected at a time. They're called RadioButtons because they work like the "
"channel preset button in old-style car radios. The radio could only be tuned "
"to one station at a time, so whenever you pressed one button in, another "
"would pop back out."
msgstr ""
"우리가 쓸 수 있는 다른 입력 위젯으로 RadioButton이 있습니다. 한 모임 단위로 "
"만들 수 있고, 모임 안에 있는 RadioButton은 한번에 하나만 선택할 수 있습니다. "
"구식 카 라디오의 프리셋 단추 처럼 동작하기 때문에 RadioButton으로 부릅니다. "
"라디오는 한번에 방송국 하나만 선택할 수 있기에, 어떤 단추를 누르면 다른 단추"
"는 도로 튀어나옵니다."

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/03_getting_the_signal.js.page:231 C/03_getting_the_signal.js.page:363
msgctxt "_"
msgid ""
"external ref='media/03_jssignal_03.png' "
"md5='49ecf251b0bf57543c8d79a77b6f306d'"
msgstr ""

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:233
msgid ""
"First off, let's change our ApplicationWindow's name and increase its "
"border_width property, so that our widgets aren't packed in too tightly. The "
"border_width is the number of pixels between any widget and the edge of the "
"window."
msgstr ""
"우선 ApplicationWindow의 이름을 바꾸고 border_width 속성 값을 늘려서, 위젯이 "
"답답하게 붙어있지 않게 하겠습니다. border_width는 위젯과 창 가장자리 사이의 "
"픽셀 단위 간격입니다."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:234
#, no-wrap
msgid ""
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            border_width: 20,\n"
"            title: \"Choose the one that says 'cookie'!\"});\n"
msgstr ""
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            border_width: 20,\n"
"            title: \"Choose the one that says 'cookie'!\"});\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:245
msgid ""
"After that, we create the RadioButtons. Remember how they're created in "
"groups? The way we do that, is we set each new RadioButton's group property "
"to the name of another RadioButton."
msgstr ""
"그 다음 RadioButton을 만들겠습니다. 근데 그룹안에 어떻게 만들었죠? 우리가 할 "
"일은 각 RadioButton의 그룹 속성에 다른 RadioButton 이름을 넣는 일입니다."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:246
#, no-wrap
msgid ""
"\n"
"        // Create the radio buttons\n"
"        this._cookieRadio = new Gtk.RadioButton ({ label: \"Cookie\" });\n"
"        this._notCookieOne = new Gtk.RadioButton ({ label: \"Not cookie\",\n"
"            group: this._cookieRadio });\n"
"        this._notCookieTwo = new Gtk.RadioButton ({ label: \"Not cookie\",\n"
"            group: this._cookieRadio });\n"
msgstr ""
"\n"
"        // Create the radio buttons\n"
"        this._cookieRadio = new Gtk.RadioButton ({ label: \"Cookie\" });\n"
"        this._notCookieOne = new Gtk.RadioButton ({ label: \"Not cookie\",\n"
"            group: this._cookieRadio });\n"
"        this._notCookieTwo = new Gtk.RadioButton ({ label: \"Not cookie\",\n"
"            group: this._cookieRadio });\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:255
msgid ""
"Next, we create a Grid for the RadioButtons. Remember, we don't have to "
"arrange things in Grids in the same order that we create them in."
msgstr ""
"다음 RadioButton의 그리드를 만들겠습니다. 만든 순서대로 그리드에 똑같이 정렬"
"할 필요는 없습니다."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:256
#, no-wrap
msgid ""
"\n"
"        // Arrange the radio buttons in their own grid\n"
"        this._radioGrid = new Gtk.Grid ();\n"
"        this._radioGrid.attach (this._notCookieOne, 0, 0, 1, 1);\n"
"        this._radioGrid.attach (this._cookieRadio, 0, 1, 1, 1);\n"
"        this._radioGrid.attach (this._notCookieTwo, 0, 2, 1, 1);\n"
msgstr ""
"\n"
"        // Arrange the radio buttons in their own grid\n"
"        this._radioGrid = new Gtk.Grid ();\n"
"        this._radioGrid.attach (this._notCookieOne, 0, 0, 1, 1);\n"
"        this._radioGrid.attach (this._cookieRadio, 0, 1, 1, 1);\n"
"        this._radioGrid.attach (this._notCookieTwo, 0, 2, 1, 1);\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:264
msgid ""
"Normally, the RadioButton that's selected by default is the one that's the "
"name of the group. We want the first \"Not cookie\" button to be selected by "
"default, though, so we use its set_active method."
msgstr ""
"보통 기본으로 선택한 RadioButton은 그룹 이름으로 설정한 RadioButton입니다. 우"
"선은 기본적으로 \"Not cookie\" 단추를 선택한 상태로 두려고 합니다. 그러니까 "
"set_active 메서드를 쓰겠습니다."

#. (itstool) path: note/p
#: C/03_getting_the_signal.js.page:265
msgid "We could also set its active property to true when we create it."
msgstr "RadioButton을 만들 때 active 속성을 설정할 수도 있습니다."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:266
#, no-wrap
msgid ""
"\n"
"        // Set the button that will be at the top to be active by default\n"
"        this._notCookieOne.set_active (true);\n"
msgstr ""
"\n"
"        // Set the button that will be at the top to be active by default\n"
"        this._notCookieOne.set_active (true);\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:271
msgid "Now we arrange everything in our main Grid like usual ..."
msgstr "이제 흔히 하던대로 메인 그리드에 모든 위젯을 정리하겠습니다 ..."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:272
#, no-wrap
msgid ""
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._radioGrid, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
msgstr ""
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._radioGrid, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:279
msgid ""
"And then we change our _getACookie function to test to see if the cookie "
"button is the one that's selected."
msgstr ""
"그리고 과자 단추를 선택했는지 확인하도록 _getACookie 함수 코드를 바꾸겠습니"
"다."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:280
#, no-wrap
msgid ""
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Did you select \"cookie\" instead of \"not cookie\"?\n"
"        if (this._cookieRadio.get_active()) {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
msgstr ""
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Did you select \"cookie\" instead of \"not cookie\"?\n"
"        if (this._cookieRadio.get_active()) {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"

#. (itstool) path: section/title
#: C/03_getting_the_signal.js.page:298
msgid "Can you spell \"cookie\"?"
msgstr "\"cookie\" 쓸 수 있죠?"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:300
msgid ""
"The last input widget we're going to cover is the Entry widget, which is "
"used for single-line text entry."
msgstr ""
"우리가 다룰 마지막 위젯은 단일 행 텍스트 항목을 다루는 Entry 위젯입니다."

#. (itstool) path: note/p
#: C/03_getting_the_signal.js.page:301
msgid ""
"If you need to be able to enter in a whole paragraph or more, like if you "
"are building a text editor, you'll want to look at the much more "
"customizable <link xref=\"textview.js\">TextView</link> widget."
msgstr ""
"텍스트 편집기를 만들 때 처럼 한 문당 이상을 입력할 수 있는게 필요하다면, 개별"
"적으로 이리저리 자유롭게 바꿀 수 있는 <link xref=\"textview.js\">TextView</"
"link> 위젯을 찾으시려는 지도 모르겠습니다."

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/03_getting_the_signal.js.page:302 C/03_getting_the_signal.js.page:369
msgctxt "_"
msgid ""
"external ref='media/03_jssignal_04.png' "
"md5='dfc5221ca15ca9fba7d3c76a73804e2d'"
msgstr ""

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:304
msgid "After we change the window's name, we create the Entry widget."
msgstr "창 이름을 바꾸고 나서 Entry 위젯을 만들겠습니다."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:305
#, no-wrap
msgid ""
"\n"
"        // Create the text entry field\n"
"        this._spellCookie = new Gtk.Entry ();\n"
msgstr ""
"\n"
"        // Create the text entry field\n"
"        this._spellCookie = new Gtk.Entry ();\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:310
msgid "Next, we arrange everything in the Grid ..."
msgstr "그 다음, 그리드에 모두 정리하고요 ..."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:311
#, no-wrap
msgid ""
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._spellCookie, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
msgstr ""
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._spellCookie, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:318
msgid ""
"And now we modify _getACookie's if statement again, using the Entry's "
"get_text method to retrieve the text that you entered into it and see if you "
"spelled \"cookie\" right. We don't care whether you capitalize \"cookie\" or "
"not, so we use JavaScript's built-in toLowerCase method to change the "
"Entry's text to all lower case inside the if statement."
msgstr ""
"Entry의 get_text 메서드로 텍스트를 가져와서 \"cookie\" 문자열이 맞는지 확인하"
"도록 _getACookie의 if 구문을 수정하겠습니다. \"cookie\"의 어디가 대문자인지"
"는 상관하지 않을거기에 if 구문 안에서 Entry의 모든 텍스트 문자를 소문자로 바"
"꾸는 JavaScript 내장 함수 toLowerCase를 사용하겠습니다."

#. (itstool) path: note/p
#: C/03_getting_the_signal.js.page:319
msgid ""
"An Entry widget doesn't have a label property, which is a set text string "
"that the user can't change. (You can't normally change the label on a "
"Button, for instance.) Instead, it has a text property, which changes to "
"match what the user types in."
msgstr ""
"Entry 위젯은 사용자가 못바꾸는 텍스트 문자열을 설정하는 label 속성이 없습니다"
"(심지어 단추에도 보통은 레이블의 문자열을 바꿀 수 없습니다). 대신 사용자가 입"
"력한 내용이 일치하는지 여부를 바꾸는 text 속성이 있습니다."

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:320
#, no-wrap
msgid ""
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Did you spell \"cookie\" correctly?\n"
"        if ((this._spellCookie.get_text()).toLowerCase() == \"cookie\") {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
msgstr ""
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Did you spell \"cookie\" correctly?\n"
"        if ((this._spellCookie.get_text()).toLowerCase() == \"cookie\") {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"

#. (itstool) path: section/p
#: C/03_getting_the_signal.js.page:339
msgid ""
"Keep reading, if you'd like to see the complete code for each version of our "
"cookie maker application."
msgstr ""
"과자 만들기 프로그램의 여러가지  각 버전에 해당하는 완전한 코드를 보려면 계"
"속 읽어나가십시오."

#. (itstool) path: note/p
#: C/03_getting_the_signal.js.page:340
msgid ""
"The main JavaScript tutorials page has <link xref=\"beginner.js#buttons"
"\">more detailed code samples</link> for each input widget, including "
"several not covered here."
msgstr ""
"메인 JavaScript 지침서 페이지에는 여기서 다루지 못한 여러가지 입력 위젯을 다"
"룬 <link xref=\"beginner.js#buttons\">상세 예제 코드</link>가 있습니다."

#. (itstool) path: section/title
#: C/03_getting_the_signal.js.page:345
msgid "Complete code samples"
msgstr "완전한 예제 코드"

#. (itstool) path: section/title
#: C/03_getting_the_signal.js.page:350
msgid "Code sample with Button"
msgstr "단추 코드 예제"

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:352
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// We start out with 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            title: \"Click the button to get a cookie!\"});\n"
"\n"
"        // Create the label\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
"\n"
"        // Create the cookie button\n"
"        this._cookieButton = new Gtk.Button ({ label: \"Get a cookie\" });\n"
"\n"
"        // Connect the cookie button to the function that handles clicking it\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
"\n"
"        // Create a grid to arrange everything inside\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._cookieButton, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Increase the number of cookies by 1 and update the label\n"
"        cookies++;\n"
"        this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// We start out with 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            title: \"Click the button to get a cookie!\"});\n"
"\n"
"        // Create the label\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
"\n"
"        // Create the cookie button\n"
"        this._cookieButton = new Gtk.Button ({ label: \"Get a cookie\" });\n"
"\n"
"        // Connect the cookie button to the function that handles clicking it\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
"\n"
"        // Create a grid to arrange everything inside\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._cookieButton, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Increase the number of cookies by 1 and update the label\n"
"        cookies++;\n"
"        this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/title
#: C/03_getting_the_signal.js.page:356
msgid "Code sample with Switch"
msgstr "스위치 코드 예제"

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:358
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// We start out with 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            title: \"Click the button to get a cookie!\"});\n"
"\n"
"        // Create the label\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
"\n"
"        // Create the cookie button\n"
"        this._cookieButton = new Gtk.Button ({\n"
"            label: \"Get a cookie\" });\n"
"\n"
"        // Connect the cookie button to the function that handles clicking it\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
"\n"
"        // Create the switch that controls whether or not you can win\n"
"        this._cookieSwitch = new Gtk.Switch ();\n"
"\n"
"        // Create the label to go with the switch\n"
"        this._switchLabel = new Gtk.Label ({\n"
"            label: \"Cookie dispenser\" });\n"
"\n"
"        // Create a grid for the switch and its label\n"
"        this._switchGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Put the switch and its label inside that grid\n"
"        this._switchGrid.attach (this._switchLabel, 0, 0, 1, 1);\n"
"        this._switchGrid.attach (this._cookieSwitch, 1, 0, 1, 1);\n"
"\n"
"        // Create a grid to arrange everything else inside\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._cookieButton, 0, 0, 1, 1);\n"
"        this._grid.attach (this._switchGrid, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Is the cookie dispenser turned on?\n"
"        if (this._cookieSwitch.get_active()) {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// We start out with 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            title: \"Click the button to get a cookie!\"});\n"
"\n"
"        // Create the label\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
"\n"
"        // Create the cookie button\n"
"        this._cookieButton = new Gtk.Button ({\n"
"            label: \"Get a cookie\" });\n"
"\n"
"        // Connect the cookie button to the function that handles clicking it\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
"\n"
"        // Create the switch that controls whether or not you can win\n"
"        this._cookieSwitch = new Gtk.Switch ();\n"
"\n"
"        // Create the label to go with the switch\n"
"        this._switchLabel = new Gtk.Label ({\n"
"            label: \"Cookie dispenser\" });\n"
"\n"
"        // Create a grid for the switch and its label\n"
"        this._switchGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Put the switch and its label inside that grid\n"
"        this._switchGrid.attach (this._switchLabel, 0, 0, 1, 1);\n"
"        this._switchGrid.attach (this._cookieSwitch, 1, 0, 1, 1);\n"
"\n"
"        // Create a grid to arrange everything else inside\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._cookieButton, 0, 0, 1, 1);\n"
"        this._grid.attach (this._switchGrid, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Is the cookie dispenser turned on?\n"
"        if (this._cookieSwitch.get_active()) {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/title
#: C/03_getting_the_signal.js.page:362
msgid "Code sample with RadioButton"
msgstr "RadioButton 코드 예제"

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:364
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// We start out with 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            border_width: 20,\n"
"            title: \"Choose the one that says 'cookie'!\"});\n"
"\n"
"        // Create the radio buttons\n"
"        this._cookieRadio = new Gtk.RadioButton ({ label: \"Cookie\" });\n"
"        this._notCookieOne = new Gtk.RadioButton ({ label: \"Not cookie\",\n"
"            group: this._cookieRadio });\n"
"        this._notCookieTwo = new Gtk.RadioButton ({ label: \"Not cookie\",\n"
"            group: this._cookieRadio });\n"
"\n"
"        // Arrange the radio buttons in their own grid\n"
"        this._radioGrid = new Gtk.Grid ();\n"
"        this._radioGrid.attach (this._notCookieOne, 0, 0, 1, 1);\n"
"        this._radioGrid.attach (this._cookieRadio, 0, 1, 1, 1);\n"
"        this._radioGrid.attach (this._notCookieTwo, 0, 2, 1, 1);\n"
"\n"
"        // Set the button that will be at the top to be active by default\n"
"        this._notCookieOne.set_active (true);\n"
"\n"
"        // Create the cookie button\n"
"        this._cookieButton = new Gtk.Button ({\n"
"            label: \"Get a cookie\" });\n"
"\n"
"        // Connect the cookie button to the function that handles clicking it\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
"\n"
"        // Create the label\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
"\n"
"        // Create a grid to arrange everything inside\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._radioGrid, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Did you select \"cookie\" instead of \"not cookie\"?\n"
"        if (this._cookieRadio.get_active()) {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// We start out with 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            border_width: 20,\n"
"            title: \"Choose the one that says 'cookie'!\"});\n"
"\n"
"        // Create the radio buttons\n"
"        this._cookieRadio = new Gtk.RadioButton ({ label: \"Cookie\" });\n"
"        this._notCookieOne = new Gtk.RadioButton ({ label: \"Not cookie\",\n"
"            group: this._cookieRadio });\n"
"        this._notCookieTwo = new Gtk.RadioButton ({ label: \"Not cookie\",\n"
"            group: this._cookieRadio });\n"
"\n"
"        // Arrange the radio buttons in their own grid\n"
"        this._radioGrid = new Gtk.Grid ();\n"
"        this._radioGrid.attach (this._notCookieOne, 0, 0, 1, 1);\n"
"        this._radioGrid.attach (this._cookieRadio, 0, 1, 1, 1);\n"
"        this._radioGrid.attach (this._notCookieTwo, 0, 2, 1, 1);\n"
"\n"
"        // Set the button that will be at the top to be active by default\n"
"        this._notCookieOne.set_active (true);\n"
"\n"
"        // Create the cookie button\n"
"        this._cookieButton = new Gtk.Button ({\n"
"            label: \"Get a cookie\" });\n"
"\n"
"        // Connect the cookie button to the function that handles clicking it\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
"\n"
"        // Create the label\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
"\n"
"        // Create a grid to arrange everything inside\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._radioGrid, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Did you select \"cookie\" instead of \"not cookie\"?\n"
"        if (this._cookieRadio.get_active()) {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/title
#: C/03_getting_the_signal.js.page:368
msgid "Code sample with Entry"
msgstr "Entry 코드 예제"

#. (itstool) path: section/code
#: C/03_getting_the_signal.js.page:370
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// We start out with 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            border_width: 20,\n"
"            title: \"Spell 'cookie' to get a cookie!\"});\n"
"\n"
"        // Create the text entry field\n"
"        this._spellCookie = new Gtk.Entry ();\n"
"\n"
"        // Create the cookie button\n"
"        this._cookieButton = new Gtk.Button ({\n"
"            label: \"Get a cookie\" });\n"
"\n"
"        // Connect the cookie button to the function that handles clicking it\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
"\n"
"        // Create the label\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
"\n"
"        // Create a grid to arrange everything inside\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._spellCookie, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Did you spell \"cookie\" correctly?\n"
"        if ((this._spellCookie.get_text()).toLowerCase() == \"cookie\") {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"// We start out with 0 cookies\n"
"var cookies = 0;\n"
"\n"
"const GettingTheSignal = new Lang.Class({\n"
"    Name: 'Getting the Signal',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            border_width: 20,\n"
"            title: \"Spell 'cookie' to get a cookie!\"});\n"
"\n"
"        // Create the text entry field\n"
"        this._spellCookie = new Gtk.Entry ();\n"
"\n"
"        // Create the cookie button\n"
"        this._cookieButton = new Gtk.Button ({\n"
"            label: \"Get a cookie\" });\n"
"\n"
"        // Connect the cookie button to the function that handles clicking it\n"
"        this._cookieButton.connect ('clicked', Lang.bind (this, this._getACookie));\n"
"\n"
"        // Create the label\n"
"        this._cookieLabel = new Gtk.Label ({\n"
"            label: \"Number of cookies: \" + cookies });\n"
"\n"
"        // Create a grid to arrange everything inside\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            row_spacing: 20 });\n"
"\n"
"        // Put everything inside the grid\n"
"        this._grid.attach (this._spellCookie, 0, 0, 1, 1);\n"
"        this._grid.attach (this._cookieButton, 0, 1, 1, 1);\n"
"        this._grid.attach (this._cookieLabel, 0, 2, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _getACookie: function() {\n"
"\n"
"        // Did you spell \"cookie\" correctly?\n"
"        if ((this._spellCookie.get_text()).toLowerCase() == \"cookie\") {\n"
"\n"
"            // Increase the number of cookies by 1 and update the label\n"
"            cookies++;\n"
"            this._cookieLabel.set_label (\"Number of cookies: \" + cookies);\n"
"\n"
"        }\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GettingTheSignal ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: info/title
#: C/aboutdialog.c.page:8
msgctxt "text"
msgid "AboutDialog (C)"
msgstr "AboutDialog(C)"

#. (itstool) path: credit/name
#: C/aboutdialog.c.page:15 C/button.c.page:15 C/combobox.c.page:13
#: C/dialog.c.page:15 C/entry.c.page:13 C/grid.c.page:13 C/image.c.page:13
#: C/label.c.page:14 C/linkbutton.c.page:13 C/menubar.c.page:15
#: C/messagedialog.c.page:14 C/progressbar.c.page:14 C/radiobutton.c.page:15
#: C/scale.c.page:15 C/scrolledwindow.c.page:15 C/spinbutton.c.page:16
#: C/spinner.c.page:14 C/statusbar.c.page:17 C/switch.c.page:13
#: C/textview.c.page:13 C/togglebutton.c.page:17 C/toolbar.c.page:15
msgid "Monica Kochofar"
msgstr "Monica Kochofar"

#. (itstool) path: info/desc
#: C/aboutdialog.c.page:20 C/aboutdialog.js.page:17 C/aboutdialog.vala.page:26
msgid "Display information about an application"
msgstr "프로그램 정보를 나타냅니다"

#. (itstool) path: page/title
#: C/aboutdialog.c.page:23 C/aboutdialog.js.page:20 C/aboutdialog.py.page:22
#: C/aboutdialog.vala.page:29
msgid "AboutDialog"
msgstr "AboutDialog"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/aboutdialog.c.page:25 C/aboutdialog.js.page:21 C/aboutdialog.py.page:23
#: C/aboutdialog.vala.page:30
msgctxt "_"
msgid ""
"external ref='media/aboutdialog_GMenu.png' "
"md5='a36117a559fa98e25e2f6b3db593639f'"
msgstr ""

#. (itstool) path: page/p
#: C/aboutdialog.c.page:26 C/aboutdialog.vala.page:31
msgid "An AboutDialog example using Gtk.ApplicationWindow and Menu"
msgstr "AboutDialog 예제에서는 GtkApplicationWindow와 Menu를 다룹니다"

#. (itstool) path: note/p
#: C/aboutdialog.c.page:27 C/aboutdialog.vala.page:32 C/gmenu.c.page:24
msgid ""
"<em style=\"bold\">You need to be running Gtk3.4 or later for this to work</"
"em>"
msgstr "<em style=\"bold\">이 코드를 동작하려면 Gtk 3.4 이상이 필요합니다</em>"

#. (itstool) path: page/code
#: C/aboutdialog.c.page:29
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"/* Callback function in which reacts to the \"response\" signal from the user in\n"
" * the message dialog window.\n"
" * This function is used to destroy the dialog window.\n"
" */\n"
"static void\n"
"on_close (GtkDialog *dialog,\n"
"          gint       response_id,\n"
"          gpointer   user_data)\n"
"{\n"
"  /* This will cause the dialog to be destroyed */\n"
"  gtk_widget_destroy (GTK_WIDGET (dialog));\n"
"}\n"
"\n"
"/* Callback function for the response signal \"activate\" related to the SimpleAction\n"
" * \"about_action\".\n"
" * This function is used to cause the about dialog window to popup.\n"
" */\n"
"static void\n"
"about_cb (GSimpleAction *simple,\n"
"          GVariant      *parameter,\n"
"          gpointer       user_data)\n"
"{\n"
"  GtkWidget *about_dialog;\n"
"\n"
"  about_dialog = gtk_about_dialog_new ();\n"
"\n"
"  /* Lists of authors/ documentators to be used later, they must be initialized\n"
"   * in a null terminated array of strings.\n"
"   */\n"
"  const gchar *authors[] = {\"GNOME Documentation Team\", NULL};\n"
"  const gchar *documenters[] = {\"GNOME Documentation Team\", NULL};\n"
"\n"
"  /* We fill in the information for the about dialog */\n"
"  gtk_about_dialog_set_program_name (GTK_ABOUT_DIALOG (about_dialog), \"AboutDialog Example\");\n"
"  gtk_about_dialog_set_copyright (GTK_ABOUT_DIALOG (about_dialog), \"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\");\n"
"  gtk_about_dialog_set_authors (GTK_ABOUT_DIALOG (about_dialog), authors);\n"
"  gtk_about_dialog_set_documenters (GTK_ABOUT_DIALOG (about_dialog), documenters);\n"
"  gtk_about_dialog_set_website_label (GTK_ABOUT_DIALOG (about_dialog), \"GNOME Developer Website\");\n"
"  gtk_about_dialog_set_website (GTK_ABOUT_DIALOG (about_dialog), \"http://developer.gnome.org\");\n"
"\n"
"  /* We do not wish to show the title, which in this case would be\n"
"   * \"AboutDialog Example\". We have to reset the title of the messagedialog\n"
"   * window after setting the program name.\n"
"   */\n"
"  gtk_window_set_title (GTK_WINDOW (about_dialog), \"\");\n"
"\n"
"  /* To close the aboutdialog when \"close\" is clicked we connect the response\n"
"   * signal to on_close\n"
"   */\n"
"  g_signal_connect (GTK_DIALOG (about_dialog), \"response\",\n"
"                    G_CALLBACK (on_close), NULL);\n"
"\n"
"  /* Show the about dialog */\n"
"  gtk_widget_show (about_dialog);\n"
"}\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  GSimpleAction *about_action;\n"
"\n"
"  /* Create a window with a title and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"AboutDialog Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);\n"
"\n"
"  /* Create a new simple action, giving it a NULL parameter type. It will\n"
"   * always be NULL for actions invoked from a menu. (e.g clicking on an \"ok\"\n"
"   * or \"cancel\" button)\n"
"   */\n"
"  about_action = g_simple_action_new (\"about\", NULL);\n"
"\n"
"  /* Connect the \"activate\" signal to the appropriate callback function.\n"
"   * It will indicate that the action was just activated.\n"
"   */\n"
"  g_signal_connect (about_action, \"activate\", G_CALLBACK (about_cb),\n"
"                    GTK_WINDOW (window));\n"
"\n"
"  /* Adds the about_action to the overall action map. An Action map is an\n"
"   * interface that contains a number of named GAction instances\n"
"   * (such as about_action)\n"
"   */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (about_action));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"/* Callback function for the response signal \"activate\" from the \"quit\" action\n"
" * found in the function directly below.\n"
" */\n"
"static void\n"
"quit_cb (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"/* Startup function for the menu we are creating in this sample */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GMenu *menu;\n"
"  GSimpleAction *quit_action;\n"
"\n"
"  /* Initialize the GMenu, and add a menu item with label \"About\" and action\n"
"   * \"win.about\". Also add another menu item with label \"Quit\" and action\n"
"   * \"app.quit\"\n"
"   */\n"
"  menu = g_menu_new ();\n"
"  g_menu_append (menu, \"About\", \"win.about\");\n"
"  g_menu_append (menu, \"Quit\", \"app.quit\");\n"
"\n"
"  /* Create a new simple action for the application. (In this case it is the\n"
"   * \"quit\" action.\n"
"   */\n"
"  quit_action = g_simple_action_new (\"quit\", NULL);\n"
"\n"
"  /* Ensure that the menu we have just created is set for the overall application */\n"
"  gtk_application_set_app_menu (GTK_APPLICATION (app), G_MENU_MODEL (menu));\n"
"\n"
"  g_signal_connect (quit_action,\n"
"                    \"activate\",\n"
"                    G_CALLBACK (quit_cb),\n"
"                    app);\n"
"\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (quit_action));\n"
"}\n"
"\n"
"/* Startup function for the application */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"/* Callback function in which reacts to the \"response\" signal from the user in\n"
" * the message dialog window.\n"
" * This function is used to destroy the dialog window.\n"
" */\n"
"static void\n"
"on_close (GtkDialog *dialog,\n"
"          gint       response_id,\n"
"          gpointer   user_data)\n"
"{\n"
"  /* This will cause the dialog to be destroyed */\n"
"  gtk_widget_destroy (GTK_WIDGET (dialog));\n"
"}\n"
"\n"
"/* Callback function for the response signal \"activate\" related to the SimpleAction\n"
" * \"about_action\".\n"
" * This function is used to cause the about dialog window to popup.\n"
" */\n"
"static void\n"
"about_cb (GSimpleAction *simple,\n"
"          GVariant      *parameter,\n"
"          gpointer       user_data)\n"
"{\n"
"  GtkWidget *about_dialog;\n"
"\n"
"  about_dialog = gtk_about_dialog_new ();\n"
"\n"
"  /* Lists of authors/ documentators to be used later, they must be initialized\n"
"   * in a null terminated array of strings.\n"
"   */\n"
"  const gchar *authors[] = {\"GNOME Documentation Team\", NULL};\n"
"  const gchar *documenters[] = {\"GNOME Documentation Team\", NULL};\n"
"\n"
"  /* We fill in the information for the about dialog */\n"
"  gtk_about_dialog_set_program_name (GTK_ABOUT_DIALOG (about_dialog), \"AboutDialog Example\");\n"
"  gtk_about_dialog_set_copyright (GTK_ABOUT_DIALOG (about_dialog), \"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\");\n"
"  gtk_about_dialog_set_authors (GTK_ABOUT_DIALOG (about_dialog), authors);\n"
"  gtk_about_dialog_set_documenters (GTK_ABOUT_DIALOG (about_dialog), documenters);\n"
"  gtk_about_dialog_set_website_label (GTK_ABOUT_DIALOG (about_dialog), \"GNOME Developer Website\");\n"
"  gtk_about_dialog_set_website (GTK_ABOUT_DIALOG (about_dialog), \"http://developer.gnome.org\");\n"
"\n"
"  /* We do not wish to show the title, which in this case would be\n"
"   * \"AboutDialog Example\". We have to reset the title of the messagedialog\n"
"   * window after setting the program name.\n"
"   */\n"
"  gtk_window_set_title (GTK_WINDOW (about_dialog), \"\");\n"
"\n"
"  /* To close the aboutdialog when \"close\" is clicked we connect the response\n"
"   * signal to on_close\n"
"   */\n"
"  g_signal_connect (GTK_DIALOG (about_dialog), \"response\",\n"
"                    G_CALLBACK (on_close), NULL);\n"
"\n"
"  /* Show the about dialog */\n"
"  gtk_widget_show (about_dialog);\n"
"}\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  GSimpleAction *about_action;\n"
"\n"
"  /* Create a window with a title and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"AboutDialog Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);\n"
"\n"
"  /* Create a new simple action, giving it a NULL parameter type. It will\n"
"   * always be NULL for actions invoked from a menu. (e.g clicking on an \"ok\"\n"
"   * or \"cancel\" button)\n"
"   */\n"
"  about_action = g_simple_action_new (\"about\", NULL);\n"
"\n"
"  /* Connect the \"activate\" signal to the appropriate callback function.\n"
"   * It will indicate that the action was just activated.\n"
"   */\n"
"  g_signal_connect (about_action, \"activate\", G_CALLBACK (about_cb),\n"
"                    GTK_WINDOW (window));\n"
"\n"
"  /* Adds the about_action to the overall action map. An Action map is an\n"
"   * interface that contains a number of named GAction instances\n"
"   * (such as about_action)\n"
"   */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (about_action));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"/* Callback function for the response signal \"activate\" from the \"quit\" action\n"
" * found in the function directly below.\n"
" */\n"
"static void\n"
"quit_cb (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"/* Startup function for the menu we are creating in this sample */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GMenu *menu;\n"
"  GSimpleAction *quit_action;\n"
"\n"
"  /* Initialize the GMenu, and add a menu item with label \"About\" and action\n"
"   * \"win.about\". Also add another menu item with label \"Quit\" and action\n"
"   * \"app.quit\"\n"
"   */\n"
"  menu = g_menu_new ();\n"
"  g_menu_append (menu, \"About\", \"win.about\");\n"
"  g_menu_append (menu, \"Quit\", \"app.quit\");\n"
"\n"
"  /* Create a new simple action for the application. (In this case it is the\n"
"   * \"quit\" action.\n"
"   */\n"
"  quit_action = g_simple_action_new (\"quit\", NULL);\n"
"\n"
"  /* Ensure that the menu we have just created is set for the overall application */\n"
"  gtk_application_set_app_menu (GTK_APPLICATION (app), G_MENU_MODEL (menu));\n"
"\n"
"  g_signal_connect (quit_action,\n"
"                    \"activate\",\n"
"                    G_CALLBACK (quit_cb),\n"
"                    app);\n"
"\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (quit_action));\n"
"}\n"
"\n"
"/* Startup function for the application */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: page/p
#. (itstool) path: section/p
#: C/aboutdialog.c.page:31 C/aboutdialog.js.page:25 C/aboutdialog.py.page:42
#: C/aboutdialog.vala.page:35 C/button.c.page:30 C/button.js.page:27
#: C/button.py.page:53 C/buttonbox.js.page:36 C/buttonbox.py.page:47
#: C/checkbutton.c.page:26 C/checkbutton.py.page:43 C/checkbutton.vala.page:26
#: C/colorbutton.js.page:34 C/colorbutton.py.page:41 C/colorbutton.vala.page:28
#: C/comboboxtext.js.page:177 C/combobox.c.page:31 C/combobox.js.page:234
#: C/combobox.py.page:43 C/combobox.vala.page:26
#: C/combobox_multicolumn.py.page:42 C/combobox_multicolumn.vala.page:36
#: C/dialog.c.page:30 C/dialog.js.page:26 C/dialog.py.page:47
#: C/dialog.vala.page:28 C/entry.c.page:28 C/entry.js.page:26
#: C/entry.py.page:62 C/entry.vala.page:26 C/filechooserdialog.py.page:71
#: C/filechooserdialog.vala.page:36 C/fontchooserwidget.js.page:35
#: C/fontchooserwidget.py.page:45 C/fontchooserwidget.vala.page:35
#: C/gmenu.c.page:28 C/gmenu.js.page:26 C/gmenu.py.page:78 C/gmenu.vala.page:35
#: C/grid.c.page:28 C/grid.js.page:30 C/grid.py.page:55 C/grid.vala.page:28
#: C/GtkApplicationWindow.c.page:26 C/GtkApplicationWindow.js.page:27
#: C/GtkApplicationWindow.py.page:51 C/GtkApplicationWindow.vala.page:27
#: C/image.c.page:29 C/image.js.page:28 C/image.py.page:128
#: C/image.vala.page:28 C/label.c.page:33 C/label.js.page:26
#: C/label.py.page:103 C/label.vala.page:27 C/linkbutton.c.page:28
#: C/linkbutton.js.page:26 C/linkbutton.py.page:45 C/linkbutton.vala.page:26
#: C/menubar.c.page:33 C/menubar.py.page:184 C/menubar.vala.page:188
#: C/menubutton.c.page:36 C/menubutton.js.page:29 C/menubutton.py.page:54
#: C/menubutton.vala.page:29 C/messagedialog.c.page:32
#: C/messagedialog.js.page:190 C/messagedialog.py.page:55
#: C/messagedialog.vala.page:27 C/paned.c.page:34 C/paned.js.page:34
#: C/paned.py.page:40 C/paned.vala.page:34 C/progressbar.c.page:29
#: C/progressbar.js.page:35 C/progressbar.py.page:55 C/progressbar.vala.page:26
#: C/radiobutton.c.page:30 C/radiobutton.py.page:47 C/radiobutton.vala.page:29
#: C/scale.c.page:30 C/scale.py.page:55 C/scale.vala.page:28
#: C/scrolledwindow.c.page:30 C/scrolledwindow.js.page:34
#: C/scrolledwindow.py.page:43 C/scrolledwindow.vala.page:27
#: C/separator.c.page:36 C/separator.py.page:37 C/separator.vala.page:38
#: C/spinbutton.c.page:31 C/spinbutton.py.page:47 C/spinbutton.vala.page:28
#: C/spinner.c.page:29 C/spinner.js.page:26 C/spinner.py.page:40
#: C/spinner.vala.page:26 C/statusbar.c.page:32 C/statusbar.py.page:51
#: C/statusbar.vala.page:29 C/switch.c.page:29 C/switch.py.page:43
#: C/switch.vala.page:32 C/textview.c.page:32 C/textview.py.page:94
#: C/textview.vala.page:31 C/togglebutton.c.page:32 C/togglebutton.py.page:42
#: C/togglebutton.vala.page:29 C/toolbar.c.page:31 C/toolbar.js.page:27
#: C/toolbar.py.page:53 C/toolbar.vala.page:30 C/toolbar_builder.py.page:192
#: C/toolbar_builder.vala.page:147 C/tooltip.c.page:36 C/tooltip.js.page:35
#: C/tooltip.py.page:57 C/tooltip.vala.page:36
#: C/treeview_advanced_liststore.py.page:42
#: C/treeview_cellrenderertoggle.py.page:42
#: C/treeview_simple_liststore.js.page:273
#: C/treeview_simple_liststore.py.page:43
#: C/treeview_simple_liststore.vala.page:28 C/treeview_treestore.py.page:42
#: C/widget_drawing.py.page:36 C/window.c.page:30 C/window.py.page:62
#: C/window.vala.page:34
msgid "In this sample we used the following:"
msgstr "이 예제는 다음 참고자료가 필요합니다:"

#. (itstool) path: item/p
#: C/aboutdialog.c.page:35 C/button.c.page:34 C/combobox.c.page:35
#: C/dialog.c.page:34 C/entry.c.page:32 C/grid.c.page:32
#: C/GtkApplicationWindow.c.page:30 C/image.c.page:33 C/label.c.page:37
#: C/linkbutton.c.page:32 C/messagedialog.c.page:36 C/progressbar.c.page:33
#: C/radiobutton.c.page:34 C/scale.c.page:34 C/spinbutton.c.page:35
#: C/spinner.c.page:33 C/statusbar.c.page:36 C/switch.c.page:33
#: C/textview.c.page:36 C/togglebutton.c.page:36 C/window.c.page:34
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/3.4/GtkApplication.html"
"\">GtkApplication</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/3.4/GtkApplication.html"
"\">GtkApplication</link>"

#. (itstool) path: item/p
#: C/aboutdialog.c.page:36 C/button.c.page:35 C/combobox.c.page:36
#: C/dialog.c.page:35 C/entry.c.page:33 C/grid.c.page:33 C/linkbutton.c.page:33
#: C/messagedialog.c.page:38 C/progressbar.c.page:34 C/radiobutton.c.page:35
#: C/scale.c.page:35 C/spinbutton.c.page:36 C/spinner.c.page:34
#: C/statusbar.c.page:37 C/switch.c.page:34 C/textview.c.page:37
#: C/togglebutton.c.page:37 C/window.c.page:35
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/3.4/GtkWindow.html\">GtkWindow</"
"link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/3.4/GtkWindow.html\">GtkWindow</"
"link>"

#. (itstool) path: item/p
#: C/aboutdialog.c.page:37
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkAboutDialog.html"
"\">GtkAboutDialog</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkAboutDialog.html"
"\">GtkAboutDialog</link>"

#. (itstool) path: item/p
#: C/aboutdialog.c.page:38 C/aboutdialog.py.page:48 C/messagedialog.c.page:42
#: C/messagedialog.py.page:64
msgid ""
"<link href=\"http://developer.gnome.org/gio/stable/GMenu.html\">GMenu</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gio/stable/GMenu.html\">GMenu</link>"

#. (itstool) path: item/p
#: C/aboutdialog.c.page:39 C/messagedialog.c.page:41
msgid ""
"<link href=\"http://developer.gnome.org/gio/stable/GActionMap.html"
"\">GActionMap</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gio/stable/GActionMap.html"
"\">GActionMap</link>"

#. (itstool) path: info/title
#: C/aboutdialog.js.page:7
msgctxt "text"
msgid "AboutDialog (JavaScript)"
msgstr "AboutDialog(JavaScript)"

#. (itstool) path: page/p
#: C/aboutdialog.js.page:22
msgid ""
"A modal dialog window which shows information about an application and its "
"creators. This one is triggered by clicking \"About\" in the application's "
"menu, which is normally a good place to put it."
msgstr ""
"프로그램과 만든 사람 정보를 나타내는 모달 대화상자 창입니다. \"정보\" 항목을 "
"두기 딱 좋은 프로그램 메뉴에서 \"정보\"를 누르면 정보 모달 대화상자 창이 뜹니"
"다."

#. (itstool) path: page/code
#: C/aboutdialog.js.page:24
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const AboutDialogExample = new Lang.Class({\n"
"    Name: 'AboutDialog Example',\n"
"\n"
"    // Create the application itself\n"
"        _init: function() {\n"
"            this.application = new Gtk.Application({\n"
"                application_id: 'org.example.jsaboutdialog',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal creates the menu and builds the UI\n"
"    _onStartup: function() {\n"
"        this._initMenus();\n"
"        this._buildUI();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function(){\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"AboutDialog Example\",\n"
"                                                   default_height: 250,\n"
"                                                   default_width: 350 });\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    // Create the application menu\n"
"    _initMenus: function() {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"About\", 'app.about');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // Create the \"About\" menu option and have it call the _showAbout() function\n"
"        let aboutAction = new Gio.SimpleAction({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        // Create the \"Quit\" menu option and have it close the window\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"    _showAbout: function() {\n"
"\n"
"        // String arrays of the names of the people involved in the project\n"
"        var authors = [\"GNOME Documentation Team\"];\n"
"        var documenters = [\"GNOME Documentation Team\"];\n"
"\n"
"        // Create the About dialog\n"
"        let aboutDialog = new Gtk.AboutDialog({ title: \"AboutDialog Example\",\n"
"                                                program_name: \"GtkApplication Example\",\n"
"                                                copyright: \"Copyright \\xa9 2012 GNOME Documentation Team\",\n"
"                                                authors: authors,\n"
"                                                documenters: documenters,\n"
"                                                website: \"http://developer.gnome.org\",\n"
"                                                website_label: \"GNOME Developer Website\" });\n"
"\n"
"        // Attach the About dialog to the window\n"
"        aboutDialog.modal = true;\n"
"        aboutDialog.transient_for = this._window;\n"
"\n"
"        // Show the About dialog\n"
"        aboutDialog.show();\n"
"\n"
"        // Connect the Close button to the destroy signal for the dialog\n"
"        aboutDialog.connect('response', function() {\n"
"            aboutDialog.destroy();\n"
"        });\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new AboutDialogExample();\n"
"app.application.run(ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const AboutDialogExample = new Lang.Class({\n"
"    Name: 'AboutDialog Example',\n"
"\n"
"    // Create the application itself\n"
"        _init: function() {\n"
"            this.application = new Gtk.Application({\n"
"                application_id: 'org.example.jsaboutdialog',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal creates the menu and builds the UI\n"
"    _onStartup: function() {\n"
"        this._initMenus();\n"
"        this._buildUI();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function(){\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"AboutDialog Example\",\n"
"                                                   default_height: 250,\n"
"                                                   default_width: 350 });\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    // Create the application menu\n"
"    _initMenus: function() {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"About\", 'app.about');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // Create the \"About\" menu option and have it call the _showAbout() function\n"
"        let aboutAction = new Gio.SimpleAction({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        // Create the \"Quit\" menu option and have it close the window\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"    _showAbout: function() {\n"
"\n"
"        // String arrays of the names of the people involved in the project\n"
"        var authors = [\"GNOME Documentation Team\"];\n"
"        var documenters = [\"GNOME Documentation Team\"];\n"
"\n"
"        // Create the About dialog\n"
"        let aboutDialog = new Gtk.AboutDialog({ title: \"AboutDialog Example\",\n"
"                                                program_name: \"GtkApplication Example\",\n"
"                                                copyright: \"Copyright \\xa9 2012 GNOME Documentation Team\",\n"
"                                                authors: authors,\n"
"                                                documenters: documenters,\n"
"                                                website: \"http://developer.gnome.org\",\n"
"                                                website_label: \"GNOME Developer Website\" });\n"
"\n"
"        // Attach the About dialog to the window\n"
"        aboutDialog.modal = true;\n"
"        aboutDialog.transient_for = this._window;\n"
"\n"
"        // Show the About dialog\n"
"        aboutDialog.show();\n"
"\n"
"        // Connect the Close button to the destroy signal for the dialog\n"
"        aboutDialog.connect('response', function() {\n"
"            aboutDialog.destroy();\n"
"        });\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new AboutDialogExample();\n"
"app.application.run(ARGV);\n"

#. (itstool) path: item/p
#: C/aboutdialog.js.page:29 C/gmenu.c.page:32 C/gmenu.js.page:30
#: C/gmenu.py.page:80 C/messagedialog.js.page:194 C/switch.js.page:266
msgid ""
"<link href=\"http://developer.gnome.org/gio/unstable/GMenu.html\">GMenu</"
"link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gio/unstable/GMenu.html\">GMenu</"
"link>"

#. (itstool) path: item/p
#: C/aboutdialog.js.page:30 C/filechooserdialog.py.page:80 C/gmenu.c.page:33
#: C/gmenu.js.page:31 C/gmenu.py.page:81 C/menubar.c.page:39
#: C/messagedialog.js.page:195 C/messagedialog.py.page:62 C/switch.js.page:267
msgid ""
"<link href=\"http://developer.gnome.org/gio/stable/GSimpleAction.html"
"\">GSimpleAction</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gio/stable/GSimpleAction.html"
"\">GSimpleAction</link>"

#. (itstool) path: item/p
#: C/aboutdialog.js.page:31
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.AboutDialog."
"html\">Gtk.AboutDialog</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.AboutDialog."
"html\">Gtk.AboutDialog</link>"

#. (itstool) path: item/p
#: C/aboutdialog.js.page:32 C/button.js.page:31 C/checkbutton.js.page:138
#: C/comboboxtext.js.page:181 C/combobox.js.page:238 C/dialog.js.page:30
#: C/entry.js.page:30 C/grid.js.page:34 C/GtkApplicationWindow.js.page:31
#: C/image.js.page:32 C/label.js.page:30 C/linkbutton.js.page:30
#: C/messagedialog.js.page:196 C/progressbar.js.page:40
#: C/radiobutton.js.page:276 C/scale.js.page:211 C/spinbutton.js.page:202
#: C/spinner.js.page:31 C/statusbar.js.page:223 C/switch.js.page:268
#: C/textview.js.page:250 C/togglebutton.js.page:155
#: C/treeview_simple_liststore.js.page:277 C/window.js.page:39
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Application."
"html\">Gtk.Application</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Application."
"html\">Gtk.Application</link>"

#. (itstool) path: item/p
#: C/aboutdialog.js.page:33 C/button.js.page:32 C/checkbutton.js.page:139
#: C/comboboxtext.js.page:182 C/combobox.js.page:239 C/dialog.js.page:31
#: C/entry.js.page:31 C/grid.js.page:35 C/GtkApplicationWindow.js.page:32
#: C/image.js.page:33 C/label.js.page:31 C/linkbutton.js.page:31
#: C/messagedialog.js.page:197 C/progressbar.js.page:41
#: C/radiobutton.js.page:277 C/scale.js.page:212 C/spinbutton.js.page:203
#: C/spinner.js.page:32 C/statusbar.js.page:224 C/switch.js.page:269
#: C/textview.js.page:251 C/togglebutton.js.page:156
#: C/treeview_simple_liststore.js.page:278
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkApplicationWindow.html"
"\">Gtk.ApplicationWindow</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkApplicationWindow.html"
"\">Gtk.ApplicationWindow</link>"

#. (itstool) path: info/title
#: C/aboutdialog.py.page:8
msgctxt "text"
msgid "AboutDialog (Python)"
msgstr "AboutDialog(Python)"

#. (itstool) path: credit/name
#: C/aboutdialog.py.page:14 C/beginner.js.page:16 C/beginner.py.page:19
#: C/beginner.vala.page:19 C/button.py.page:15 C/buttonbox.py.page:15
#: C/checkbutton.py.page:14 C/colorbutton.py.page:14 C/combobox.py.page:15
#: C/combobox_multicolumn.py.page:14 C/dialog.py.page:15 C/entry.py.page:15
#: C/filechooserdialog.py.page:17 C/fontchooserwidget.py.page:15
#: C/gmenu.py.page:21 C/grid.py.page:21 C/GtkApplicationWindow.py.page:20
#: C/guitar-tuner.c.page:23 C/guitar-tuner.cpp.page:21
#: C/guitar-tuner.py.page:23 C/guitar-tuner.py.page:28
#: C/guitar-tuner.vala.page:26 C/image.py.page:15 C/image-viewer.c.page:23
#: C/image-viewer.cpp.page:21 C/image-viewer.js.page:23
#: C/image-viewer.py.page:23 C/image-viewer.vala.page:31 C/js.page:16
#: C/label.py.page:17 C/linkbutton.py.page:14 C/magic-mirror.vala.page:23
#: C/menubar.py.page:20 C/menubutton.py.page:20 C/message-board.c.page:20
#: C/messagedialog.py.page:14 C/model-view-controller.py.page:21
#: C/paned.py.page:14 C/photo-wall.c.page:22 C/progressbar.py.page:14
#: C/properties.py.page:21 C/py.page:15 C/radiobutton.py.page:15
#: C/record-collection.js.page:23 C/scale.py.page:15
#: C/scrolledwindow.py.page:14 C/separator.py.page:15
#: C/signals-callbacks.py.page:21 C/spinbutton.py.page:15 C/spinner.py.page:14
#: C/statusbar.py.page:15 C/strings.py.page:21 C/switch.py.page:14
#: C/textview.py.page:22 C/togglebutton.py.page:14 C/toolbar.py.page:15
#: C/toolbar_builder.py.page:22 C/tooltip.py.page:15
#: C/treeview_advanced_liststore.py.page:14
#: C/treeview_cellrenderertoggle.py.page:14
#: C/treeview_simple_liststore.py.page:15 C/treeview_treestore.py.page:15
#: C/tutorial.py.page:20 C/vala.page:15 C/weatherApp.js.page:17
#: C/widget_drawing.py.page:13 C/window.py.page:20
msgid "Marta Maria Casetti"
msgstr "Marta Maria Casetti"

#. (itstool) path: info/desc
#: C/aboutdialog.py.page:19
msgid "A window that displays information about an application"
msgstr "프로그램 정보를 표시하는 창입니다"

#. (itstool) path: page/p
#: C/aboutdialog.py.page:24
msgid ""
"An AboutDialog example using Gtk.ApplicationWindow and Menu (the \"about\" "
"is displayed if \"About\" in the menu is selected)."
msgstr "AboutDialog 예제에서는 Gtk.ApplicationWindow와 Menu를 다룹니다"

#. (itstool) path: section/title
#: C/aboutdialog.py.page:29 C/button.py.page:31 C/buttonbox.js.page:30
#: C/buttonbox.py.page:31 C/checkbutton.py.page:29 C/colorbutton.js.page:28
#: C/colorbutton.py.page:29 C/combobox.py.page:30
#: C/combobox_multicolumn.py.page:29 C/combobox_multicolumn.vala.page:29
#: C/dialog.py.page:30 C/entry.py.page:35 C/filechooserdialog.py.page:53
#: C/fontchooserwidget.js.page:29 C/fontchooserwidget.py.page:31
#: C/fontchooserwidget.vala.page:29 C/gmenu.py.page:36 C/grid.py.page:37
#: C/GtkApplicationWindow.py.page:35 C/image.py.page:41 C/label.py.page:37
#: C/linkbutton.py.page:30 C/menubutton.c.page:30 C/menubutton.py.page:37
#: C/messagedialog.py.page:29 C/paned.c.page:28 C/paned.js.page:28
#: C/paned.py.page:29 C/paned.vala.page:28 C/progressbar.py.page:39
#: C/radiobutton.py.page:30 C/scale.py.page:30 C/scrolledwindow.js.page:28
#: C/scrolledwindow.py.page:29 C/separator.c.page:30 C/separator.py.page:31
#: C/separator.vala.page:32 C/spinbutton.py.page:30 C/spinner.py.page:29
#: C/statusbar.py.page:30 C/switch.py.page:31 C/textview.py.page:44
#: C/togglebutton.py.page:29 C/toolbar.py.page:31 C/toolbar_builder.py.page:164
#: C/tooltip.c.page:30 C/tooltip.js.page:29 C/tooltip.py.page:31
#: C/tooltip.vala.page:30 C/treeview_advanced_liststore.py.page:29
#: C/treeview_cellrenderertoggle.py.page:29
#: C/treeview_simple_liststore.py.page:30 C/treeview_treestore.py.page:30
#: C/widget_drawing.py.page:28 C/window.py.page:45
msgid "Code used to generate this example"
msgstr "예제 결과를 만드는 코드"

#. (itstool) path: section/code
#: C/aboutdialog.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"     # constructor for a window (the parent window)\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"AboutDialog Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"\n"
"        # create the about_action (a Gio.SimpleAction)\n"
"        about_action = Gio.SimpleAction.new(\"about\", None)\n"
"        # connect the signal from the action to the function about_cb()\n"
"        about_action.connect(\"activate\", self.about_cb)\n"
"        # add the action to the application\n"
"        app.add_action(about_action)\n"
"\n"
"    # callback function for the about_action's \"activate\" signal\n"
"    def about_cb(self, action, parameter):\n"
"        # a  Gtk.AboutDialog\n"
"        aboutdialog = Gtk.AboutDialog()\n"
"\n"
"        # lists of authors and documenters (will be used later)\n"
"        authors = [\"GNOME Documentation Team\"]\n"
"        documenters = [\"GNOME Documentation Team\"]\n"
"\n"
"        # we fill in the aboutdialog\n"
"        aboutdialog.set_program_name(\"AboutDialog Example\")\n"
"        aboutdialog.set_copyright(\n"
"            \"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\")\n"
"        aboutdialog.set_authors(authors)\n"
"        aboutdialog.set_documenters(documenters)\n"
"        aboutdialog.set_website(\"http://developer.gnome.org\")\n"
"        aboutdialog.set_website_label(\"GNOME Developer Website\")\n"
"\n"
"        # we do not want to show the title, which by default would be \"About AboutDialog Example\"\n"
"        # we have to reset the title of the messagedialog window after setting\n"
"        # the program name\n"
"        aboutdialog.set_title(\"\")\n"
"\n"
"        # to close the aboutdialog when \"close\" is clicked we connect the\n"
"        # \"response\" signal to on_close\n"
"        aboutdialog.connect(\"response\", self.on_close)\n"
"        # show the aboutdialog\n"
"        aboutdialog.show()\n"
"\n"
"    # destroy the aboutdialog\n"
"    def on_close(self, action, parameter):\n"
"        action.destroy()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def quit_cb(self, action, parameter):\n"
"        self.quit()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # create a menu (a Gio.Menu)\n"
"        menu = Gio.Menu()\n"
"        # append a menu item with label \"About\" and action \"app.about\"\n"
"        menu.append(\"About\", \"app.about\")\n"
"        # append a menu item with label \"Quit\" and action \"app.quit\"\n"
"        menu.append(\"Quit\", \"app.quit\")\n"
"        # set menu as the menu for the application\n"
"        self.set_app_menu(menu)\n"
"\n"
"        # a new simpleaction - for the application\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_cb)\n"
"        self.add_action(quit_action)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"     # constructor for a window (the parent window)\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"AboutDialog Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"\n"
"        # create the about_action (a Gio.SimpleAction)\n"
"        about_action = Gio.SimpleAction.new(\"about\", None)\n"
"        # connect the signal from the action to the function about_cb()\n"
"        about_action.connect(\"activate\", self.about_cb)\n"
"        # add the action to the application\n"
"        app.add_action(about_action)\n"
"\n"
"    # callback function for the about_action's \"activate\" signal\n"
"    def about_cb(self, action, parameter):\n"
"        # a  Gtk.AboutDialog\n"
"        aboutdialog = Gtk.AboutDialog()\n"
"\n"
"        # lists of authors and documenters (will be used later)\n"
"        authors = [\"GNOME Documentation Team\"]\n"
"        documenters = [\"GNOME Documentation Team\"]\n"
"\n"
"        # we fill in the aboutdialog\n"
"        aboutdialog.set_program_name(\"AboutDialog Example\")\n"
"        aboutdialog.set_copyright(\n"
"            \"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\")\n"
"        aboutdialog.set_authors(authors)\n"
"        aboutdialog.set_documenters(documenters)\n"
"        aboutdialog.set_website(\"http://developer.gnome.org\")\n"
"        aboutdialog.set_website_label(\"GNOME Developer Website\")\n"
"\n"
"        # we do not want to show the title, which by default would be \"About AboutDialog Example\"\n"
"        # we have to reset the title of the messagedialog window after setting\n"
"        # the program name\n"
"        aboutdialog.set_title(\"\")\n"
"\n"
"        # to close the aboutdialog when \"close\" is clicked we connect the\n"
"        # \"response\" signal to on_close\n"
"        aboutdialog.connect(\"response\", self.on_close)\n"
"        # show the aboutdialog\n"
"        aboutdialog.show()\n"
"\n"
"    # destroy the aboutdialog\n"
"    def on_close(self, action, parameter):\n"
"        action.destroy()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def quit_cb(self, action, parameter):\n"
"        self.quit()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # create a menu (a Gio.Menu)\n"
"        menu = Gio.Menu()\n"
"        # append a menu item with label \"About\" and action \"app.about\"\n"
"        menu.append(\"About\", \"app.about\")\n"
"        # append a menu item with label \"Quit\" and action \"app.quit\"\n"
"        menu.append(\"Quit\", \"app.quit\")\n"
"        # set menu as the menu for the application\n"
"        self.set_app_menu(menu)\n"
"\n"
"        # a new simpleaction - for the application\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_cb)\n"
"        self.add_action(quit_action)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/aboutdialog.py.page:36
msgid "Useful methods for an AboutDialog widget"
msgstr "AboutDialog 위젯에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/aboutdialog.py.page:37
msgid ""
"In line 15 the signal <code>\"activate\"</code> is connected to the callback "
"function <code>about_cb()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"15번째 줄에서, <code><var>widget</var>.connect(<var>signal</var>, "
"<var>callback function</var>)</code> 코드로 <code>\"activate\"</code> 시그널"
"을 <code>about_cb()</code> 콜백 함수에 연결했습니다. 더 자세한 설명은 <link "
"xref=\"signals-callbacks.py\"/>를 참조하십시오."

#. (itstool) path: section/title
#: C/aboutdialog.py.page:41 C/button.py.page:52 C/buttonbox.js.page:35
#: C/buttonbox.py.page:46 C/checkbutton.py.page:42 C/colorbutton.js.page:33
#: C/colorbutton.py.page:40 C/combobox.py.page:42
#: C/combobox_multicolumn.py.page:41 C/combobox_multicolumn.vala.page:35
#: C/dialog.py.page:46 C/entry.py.page:61 C/filechooserdialog.py.page:70
#: C/fontchooserwidget.js.page:34 C/fontchooserwidget.py.page:44
#: C/fontchooserwidget.vala.page:34 C/gmenu.py.page:77 C/grid.py.page:54
#: C/GtkApplicationWindow.py.page:50 C/image.py.page:126 C/label.py.page:102
#: C/linkbutton.py.page:44 C/menubar.py.page:183 C/menubutton.c.page:35
#: C/menubutton.py.page:53 C/messagedialog.py.page:54 C/paned.c.page:33
#: C/paned.js.page:33 C/paned.py.page:39 C/paned.vala.page:33
#: C/progressbar.py.page:54 C/radiobutton.py.page:46 C/scale.py.page:54
#: C/scrolledwindow.js.page:33 C/scrolledwindow.py.page:42
#: C/spinbutton.py.page:46 C/spinner.py.page:39 C/statusbar.py.page:50
#: C/switch.py.page:42 C/textview.py.page:93 C/togglebutton.py.page:41
#: C/toolbar.py.page:52 C/toolbar_builder.py.page:191 C/tooltip.c.page:35
#: C/tooltip.js.page:34 C/tooltip.py.page:56 C/tooltip.vala.page:35
#: C/treeview_advanced_liststore.py.page:41
#: C/treeview_cellrenderertoggle.py.page:41
#: C/treeview_simple_liststore.py.page:42 C/treeview_treestore.py.page:41
#: C/widget_drawing.py.page:35 C/window.py.page:60
msgid "API References"
msgstr "API 참고서"

#. (itstool) path: item/p
#: C/aboutdialog.py.page:46
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkAboutDialog.html"
"\">GtkAboutDialog</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkAboutDialog.html"
"\">GtkAboutDialog</link>"

#. (itstool) path: item/p
#: C/aboutdialog.py.page:47 C/checkbutton.py.page:46 C/grid.py.page:58
#: C/GtkApplicationWindow.py.page:56 C/separator.c.page:38
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkApplicationWindow."
"html\">GtkApplicationWindow</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkApplicationWindow."
"html\">GtkApplicationWindow</link>"

#. (itstool) path: item/p
#: C/aboutdialog.py.page:49 C/checkbutton.py.page:45 C/grid.py.page:57
#: C/GtkApplicationWindow.py.page:55 C/messagedialog.py.page:65
#: C/window.py.page:64
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkApplication.html"
"\">GtkApplication</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkApplication.html"
"\">GtkApplication</link>"

#. (itstool) path: info/title
#: C/aboutdialog.vala.page:8
msgctxt "text"
msgid "AboutDialog (Vala)"
msgstr "AboutDialog(Vala)"

#. (itstool) path: credit/name
#: C/aboutdialog.vala.page:15 C/gmenu.vala.page:14
msgid "Ryan Lortie"
msgstr "Ryan Lortie"

#. (itstool) path: credit/name
#: C/aboutdialog.vala.page:21 C/beginner.py.page:15 C/beginner.vala.page:15
#: C/button.vala.page:14 C/c.page:14 C/checkbutton.c.page:13
#: C/checkbutton.vala.page:13 C/colorbutton.vala.page:15 C/combobox.c.page:18
#: C/combobox.vala.page:13 C/combobox_multicolumn.vala.page:14 C/cpp.page:11
#: C/dialog.vala.page:13 C/entry.vala.page:13 C/filechooserdialog.vala.page:16
#: C/gmenu.c.page:13 C/gmenu.js.page:13 C/gmenu.py.page:15 C/gmenu.vala.page:20
#: C/grid.py.page:15 C/grid.vala.page:15 C/GtkApplicationWindow.c.page:13
#: C/GtkApplicationWindow.js.page:13 C/GtkApplicationWindow.py.page:15
#: C/GtkApplicationWindow.vala.page:13 C/guitar-tuner.vala.page:22
#: C/hello-world.c.page:20 C/hello-world.js.page:20 C/hello-world.py.page:20
#: C/hello-world.vala.page:20 C/image.vala.page:13 C/image-viewer.vala.page:27
#: C/index.page:23 C/js.page:12 C/label.vala.page:13 C/linkbutton.vala.page:13
#: C/menubar.py.page:15 C/menubar.vala.page:15 C/menubutton.c.page:13
#: C/menubutton.py.page:14 C/menubutton.vala.page:13
#: C/messagedialog.vala.page:13 C/paned.c.page:13 C/paned.vala.page:13
#: C/progressbar.vala.page:13 C/py.page:11 C/radiobutton.vala.page:16
#: C/response-type.page:9 C/scale.vala.page:15 C/scrolledwindow.vala.page:14
#: C/separator.c.page:14 C/separator.vala.page:16 C/spinbutton.vala.page:15
#: C/spinner.vala.page:13 C/statusbar.vala.page:16 C/switch.vala.page:17
#: C/textview.vala.page:13 C/togglebutton.vala.page:16 C/toolbar.js.page:13
#: C/toolbar.vala.page:14 C/toolbar_builder.py.page:16
#: C/toolbar_builder.vala.page:15 C/tooltip.c.page:14 C/tooltip.vala.page:14
#: C/treeview_simple_liststore.vala.page:15 C/tutorial.py.page:15
#: C/vala.page:11 C/window.c.page:13 C/window.py.page:15 C/window.vala.page:13
msgid "Tiffany Antopolski"
msgstr "Tiffany Antopolski"

#. (itstool) path: page/code
#: C/aboutdialog.vala.page:34
#, no-wrap
msgid ""
"/* A window in the application */\n"
"public class Window : Gtk.ApplicationWindow {\n"
"\n"
"\t/* The constructor */\n"
"\tpublic Window (Application app) {\n"
"\t\tObject (application: app, title: \"AboutDialog Example\");\n"
"\n"
"\t\tvar about_action = new SimpleAction (\"about\", null);\n"
"\n"
"\t\tabout_action.activate.connect (this.about_cb);\n"
"\t\tthis.add_action (about_action);\n"
"\t\tthis.show_all ();\n"
"\t}\n"
"\n"
"\t/* This is the callback function connected to the 'activate' signal\n"
"\t * of the SimpleAction about_action.\n"
"\t */\n"
"\tvoid about_cb (SimpleAction simple, Variant? parameter) {\n"
"\t\tstring[] authors = { \"GNOME Documentation Team\", null };\n"
"\t\tstring[] documenters = { \"GNOME Documentation Team\", null };\n"
"\n"
"\t\tGtk.show_about_dialog (this,\n"
"                               \"program-name\", (\"GtkApplication Example\"),\n"
"                               \"copyright\", (\"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\"),\n"
"                               \"authors\", authors,\n"
"                               \"documenters\", documenters,\n"
"                               \"website\", \"http://developer.gnome.org\",\n"
"                               \"website-label\", (\"GNOME Developer Website\"),\n"
"                               null);\n"
"\t}\n"
"}\n"
"\n"
"/* This is the Application */\n"
"public class Application : Gtk.Application {\n"
"\n"
"\t/* Here we override the activate signal of GLib.Application */\n"
"\tprotected override void activate () {\n"
"\t\tnew Window (this);\n"
"\t}\n"
"\n"
"\t/* Here we override the startup signal of GLib.Application */\n"
"\tprotected override void startup () {\n"
"\n"
"\t\tbase.startup ();\n"
"\n"
"\t\tvar menu = new Menu ();\n"
"\t\tmenu.append (\"About\", \"win.about\");\n"
"\t\tmenu.append (\"Quit\", \"app.quit\");\n"
"\t\tthis.app_menu = menu;\n"
"\n"
"\t\tvar quit_action = new SimpleAction (\"quit\", null);\n"
"\t\t//quit_action.activate.connect (this.quit);\n"
"\t\tthis.add_action (quit_action);\n"
"\t}\n"
"\n"
"\t/* The constructor */\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.application\");\n"
"\t}\n"
"}\n"
"\n"
"/* main function creates Application and runs it */\n"
"int main (string[] args) {\n"
"\treturn new Application ().run (args);\n"
"}\n"
msgstr ""
"/* A window in the application */\n"
"public class Window : Gtk.ApplicationWindow {\n"
"\n"
"\t/* The constructor */\n"
"\tpublic Window (Application app) {\n"
"\t\tObject (application: app, title: \"AboutDialog Example\");\n"
"\n"
"\t\tvar about_action = new SimpleAction (\"about\", null);\n"
"\n"
"\t\tabout_action.activate.connect (this.about_cb);\n"
"\t\tthis.add_action (about_action);\n"
"\t\tthis.show_all ();\n"
"\t}\n"
"\n"
"\t/* This is the callback function connected to the 'activate' signal\n"
"\t * of the SimpleAction about_action.\n"
"\t */\n"
"\tvoid about_cb (SimpleAction simple, Variant? parameter) {\n"
"\t\tstring[] authors = { \"GNOME Documentation Team\", null };\n"
"\t\tstring[] documenters = { \"GNOME Documentation Team\", null };\n"
"\n"
"\t\tGtk.show_about_dialog (this,\n"
"                               \"program-name\", (\"GtkApplication Example\"),\n"
"                               \"copyright\", (\"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\"),\n"
"                               \"authors\", authors,\n"
"                               \"documenters\", documenters,\n"
"                               \"website\", \"http://developer.gnome.org\",\n"
"                               \"website-label\", (\"GNOME Developer Website\"),\n"
"                               null);\n"
"\t}\n"
"}\n"
"\n"
"/* This is the Application */\n"
"public class Application : Gtk.Application {\n"
"\n"
"\t/* Here we override the activate signal of GLib.Application */\n"
"\tprotected override void activate () {\n"
"\t\tnew Window (this);\n"
"\t}\n"
"\n"
"\t/* Here we override the startup signal of GLib.Application */\n"
"\tprotected override void startup () {\n"
"\n"
"\t\tbase.startup ();\n"
"\n"
"\t\tvar menu = new Menu ();\n"
"\t\tmenu.append (\"About\", \"win.about\");\n"
"\t\tmenu.append (\"Quit\", \"app.quit\");\n"
"\t\tthis.app_menu = menu;\n"
"\n"
"\t\tvar quit_action = new SimpleAction (\"quit\", null);\n"
"\t\t//quit_action.activate.connect (this.quit);\n"
"\t\tthis.add_action (quit_action);\n"
"\t}\n"
"\n"
"\t/* The constructor */\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.application\");\n"
"\t}\n"
"}\n"
"\n"
"/* main function creates Application and runs it */\n"
"int main (string[] args) {\n"
"\treturn new Application ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/aboutdialog.vala.page:39 C/gmenu.vala.page:39 C/window.vala.page:38
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Application.html\">Gtk."
"Application</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Application.html\">Gtk."
"Application</link>"

#. (itstool) path: item/p
#: C/aboutdialog.vala.page:40 C/gmenu.vala.page:40
#: C/GtkApplicationWindow.vala.page:32 C/label.vala.page:32
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ApplicationWindow.html"
"\">Gtk.ApplicationWindow</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ApplicationWindow.html"
"\">Gtk.ApplicationWindow</link>"

#. (itstool) path: item/p
#: C/aboutdialog.vala.page:41
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window.set_default_size.html"
"\">set_default_size</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window.set_default_size.html"
"\">set_default_size</link>"

#. (itstool) path: info/desc
#: C/audio-player.vala.page:10
msgid "Coming soon..."
msgstr "곧 계속됩니다..."

#. (itstool) path: credit/name
#: C/audio-player.vala.page:14 C/guitar-tuner.c.page:15
#: C/guitar-tuner.cpp.page:13 C/guitar-tuner.py.page:15
#: C/guitar-tuner.vala.page:14 C/image-viewer.c.page:15
#: C/image-viewer.cpp.page:13 C/image-viewer.vala.page:15
#: C/record-collection.js.page:15
msgid "GNOME Documentation Project"
msgstr "그놈 문서 프로젝트"

#. (itstool) path: page/title
#: C/audio-player.vala.page:19
msgid "Audio player"
msgstr "오디오 재생기"

#. (itstool) path: credit/name
#: C/beginner.js.page:11 C/grid.js.page:13 C/guitar-tuner.js.page:12
#: C/hello-world.c.page:15 C/hello-world.js.page:15 C/hello-world.py.page:15
#: C/hello-world.vala.page:15 C/weatherApp.js.page:12
#: C/weatherAppMain.js.page:11 C/weatherAutotools.js.page:11
#: C/weatherGeonames.js.page:11
msgid "Susanna Huhtanen"
msgstr "Susanna Huhtanen"

#. (itstool) path: credit/years
#: C/beginner.js.page:18 C/beginner.py.page:21 C/beginner.vala.page:21
#: C/buttonbox.js.page:16 C/colorbutton.js.page:15
#: C/combobox_multicolumn.vala.page:16 C/fontchooserwidget.js.page:15
#: C/fontchooserwidget.vala.page:15 C/guitar-tuner.c.page:25
#: C/guitar-tuner.cpp.page:23 C/guitar-tuner.py.page:25
#: C/guitar-tuner.py.page:30 C/guitar-tuner.vala.page:28
#: C/image-viewer.c.page:25 C/image-viewer.cpp.page:23
#: C/image-viewer.js.page:25 C/image-viewer.py.page:25
#: C/image-viewer.vala.page:33 C/js.page:18 C/magic-mirror.vala.page:25
#: C/menubutton.c.page:15 C/message-board.c.page:22 C/paned.js.page:15
#: C/paned.vala.page:15 C/photo-wall.c.page:24 C/py.page:17
#: C/record-collection.js.page:25 C/scrolledwindow.js.page:15
#: C/separator.c.page:16 C/separator.vala.page:18 C/tooltip.c.page:16
#: C/tooltip.js.page:16 C/tooltip.vala.page:16 C/tutorial.py.page:27
#: C/vala.page:17 C/weatherApp.js.page:19 C/widget_drawing.py.page:15
msgid "2013"
msgstr "2013"

#. (itstool) path: info/desc
#: C/beginner.js.page:21
msgid ""
"A beginner's guide to writing GNOME applications in JavaScript, including "
"code samples and practice exercises."
msgstr ""
"코드 예제와 실제 연습 예제가 들어있는 JavaScript 그놈 프로그램 작성용 초보자 "
"안내서입니다."

#. (itstool) path: page/title
#: C/beginner.js.page:24 C/beginner.vala.page:25
msgid "Tutorial for beginners and code samples"
msgstr "초보자 지침서 및 예제 코드"

#. (itstool) path: synopsis/p
#: C/beginner.js.page:26
msgid ""
"JavaScript is one of the most popular programming languages on the web. It's "
"not just for the web, though. If you have even a basic understanding of "
"JavaScript, you can write full-fledged applications for GNOME. <link href="
"\"https://wiki.gnome.org/Apps/Documents\">GNOME Documents</link> is written "
"in JavaScript, and so is <link href=\"https://live.gnome.org/GnomeShell/Tour"
"\">GNOME Shell</link>, the most basic part of GNOME."
msgstr ""
"JavaScript는 웹에서 가장 인기있는 프로그래밍 언어 중 하나입니다. 단지 웹에서 "
"뿐만이 아닙니다. JavaScript 기본을 잘 이해하면 완전한 격을 갖춘 그놈 프로그램"
"을 작성할 수 있습니다. <link href=\"https://wiki.gnome.org/Apps/Documents\">"
"그놈 문서</link>는 JavaScript로 작성했으며, 그놈의 가장 근본적인 부분 <link "
"href=\"https://live.gnome.org/GnomeShell/Tour\">그놈 셸</link> 도 마찬가지입"
"니다."

#. (itstool) path: note/p
#: C/beginner.js.page:27
msgid ""
"GNOME Shell is what you see when you click on \"Activities\" in the top-left "
"corner of your screen. It also controls the clock and the rest of the top "
"panel. Besides showing how you to write GNOME applications, these tutorials "
"will also show you how to use JavaScript to write GNOME Shell extensions, "
"which give it new features or change the way it does things."
msgstr ""
"그놈 셸은 화면의 좌측 상단에 있는 \"현재 활동\"을 눌렀을 때 볼 수 있습니다. "
"시계와 상단 패널 나머지를 다룹니다. 그놈 프로그램 작성 방법을 알려드리기 전"
"에 다음 따라하기 내용을 통해, 그놈 셸에 새 기능을 붙이거나 동작 방식을 바꾸"
"는 그놈 셸 확장 기능을 작성할 때 JavaScript를 사용하는 방법을 보여드리겠습니"
"다."

#. (itstool) path: section/title
#: C/beginner.js.page:31
msgid "Getting Started"
msgstr "시작하기"

#. (itstool) path: section/p
#: C/beginner.js.page:32
msgid ""
"These tutorials are designed for people who already know how to write in "
"JavaScript, and who have GNOME installed on their computers already, but who "
"are new to developing GNOME applications. If you don't already know "
"JavaScript, or if you need help getting GNOME set up, take a look at these "
"resources first:"
msgstr ""
"이 따라하기 참고서는 JavaScript 코드 작성법을 이미 알고 있는 사람, 이미 컴퓨"
"터에 그놈을 설치한 사람, 하지만 그놈 프로그램 개발에 처음인 사람이 쉽게 읽을 "
"수 있게 기획했습니다. 이미 JavaScript 코드 작성법을 아는 사람이 아니거나 그"
"놈 설정에 도움이 필요하다면 다음 참고 자료를 우선 살펴보십시오:"

#. (itstool) path: item/p
#: C/beginner.js.page:34
msgid ""
"<link href=\"http://eloquentjavascript.net/contents.html\">Eloquent "
"JavaScript</link> is a free, Creative Commons-licensed book, which explains "
"the basics of JavaScript programming. Since you won't be writing JavaScript "
"for the web, you only need to read up to chapter 10 or so."
msgstr ""
"<link href=\"http://eloquentjavascript.net/contents.html\">Eloquent "
"JavaScript</link>는 크리에이티브 커먼즈 라이선스를 부여한 무료 책이며, "
"JavaScript 프로그래밍 기본을 설명합니다. 웹용 JavaScript 프로그램을 작성하지 "
"않을 것이기에 10장까지만 읽으시면 됩니다."

#. (itstool) path: item/p
#: C/beginner.js.page:35
msgid ""
"<link href=\"http://www.gnome.org/getting-gnome/\">Download GNOME</link> as "
"part of a distribution, like Fedora, openSUSE, or Ubuntu. Each distribution "
"has its own instructions for how to get GNOME."
msgstr ""
"페도라, 오픈수세, 우분투 배포판의 일부로 <link href=\"http://www.gnome.org/"
"getting-gnome/\">그놈을 다운로드</link> 하십시오. 각 배포판에는 그놈을 설치하"
"는 자체 방식이 있습니다."

#. (itstool) path: item/p
#: C/beginner.js.page:36
msgid ""
"<link xref=\"set-up-gedit.js\">Set up gedit</link> for writing applications. "
"GNOME's text editor, gedit, is sometimes just called \"text editor\"."
msgstr ""
"프로그램을 작성할 <link xref=\"set-up-gedit.js\">지에디트를 설정</link> 하십"
"시오. 그놈 텍스트 편집기 지에디트는 그냥 \"텍스트 편집기\"라고도 합니다."

#. (itstool) path: section/title
#: C/beginner.js.page:42 C/beginner.vala.page:42 C/c.page:113
msgid "Tutorials"
msgstr "지침서"

#. (itstool) path: section/title
#: C/beginner.js.page:46 C/beginner.vala.page:46 C/py.page:32
msgid "Code samples"
msgstr "예제 코드"

#. (itstool) path: section/p
#: C/beginner.js.page:47
msgid ""
"These samples show how to use widgets in your GNOME applications. Each one "
"demonstrates a complete application which showcases the featured widget. At "
"the end of each sample, you will find links to more detailed reference "
"material."
msgstr ""
"이 예제에서는 그놈 프로그램에서 위젯을 사용하는 방법을 보여줍니다. 각 예제 코"
"드에서는 기능을 갖춘 위젯을 모아서 보여주는 완전한 프로그램으로 실험적으로 동"
"작합니다. 각 예제 끝에는 더욱 자세한 참고 자료 링크를 보실 수 있습니다."

#. (itstool) path: section/p
#: C/beginner.js.page:48 C/beginner.vala.page:47 C/c.page:91
msgid "To run the code samples:"
msgstr "예제 코드를 실행하려면:"

#. (itstool) path: item/p
#: C/beginner.js.page:50
msgid "Copy and paste the code into <var>filename</var>.js"
msgstr "<var>filename</var>.js에 코드를 복사하여 붙여넣으십시오"

#. (itstool) path: item/p
#: C/beginner.js.page:51
msgid "In the terminal, type:"
msgstr "터미널에서 다음 명령을 입력하십시오:"

#. (itstool) path: item/screen
#: C/beginner.js.page:52
#, no-wrap
msgid "gjs <var>filename</var>.js"
msgstr "gjs <var>filename</var>.js"

#. (itstool) path: section/title
#: C/beginner.js.page:55 C/beginner.py.page:32 C/beginner.vala.page:58
#: C/c.page:118
msgid "Windows"
msgstr "창"

#. (itstool) path: section/title
#: C/beginner.js.page:57 C/beginner.py.page:34 C/beginner.vala.page:61
#: C/c.page:121
msgid "Display widgets"
msgstr "위젯 표시"

#. (itstool) path: section/title
#: C/beginner.js.page:59 C/beginner.py.page:36 C/beginner.vala.page:63
#: C/c.page:123
msgid "Buttons and toggles"
msgstr "단추 및 토글"

#. (itstool) path: section/title
#: C/beginner.js.page:61 C/beginner.py.page:38 C/beginner.vala.page:65
#: C/c.page:125
msgid "Numeric and text data entry"
msgstr "숫자, 텍스트 데이터 항목"

#. (itstool) path: section/title
#: C/beginner.js.page:63 C/beginner.py.page:40 C/beginner.vala.page:67
#: C/c.page:127
msgid "Multiline text editor"
msgstr "다중라인 텍스트 편집기"

#. (itstool) path: section/title
#: C/beginner.js.page:65 C/beginner.py.page:42 C/beginner.vala.page:69
#: C/c.page:129
msgid "Menu, combo box and toolbar widgets"
msgstr "메뉴, 콤보상자, 도구모음 위젯"

#. (itstool) path: section/title
#: C/beginner.js.page:67 C/beginner.py.page:44 C/beginner.vala.page:71
#: C/c.page:131
msgid "TreeView widget"
msgstr "TreeView 위젯"

#. (itstool) path: section/title
#. (itstool) path: steps/title
#: C/beginner.js.page:69 C/beginner.py.page:46 C/beginner.vala.page:73
#: C/c.page:133 C/tutorial.py.page:127
msgid "Selectors"
msgstr "선택 상자"

#. (itstool) path: section/title
#: C/beginner.js.page:70 C/beginner.py.page:47 C/beginner.vala.page:74
#: C/c.page:134
msgid "File selectors"
msgstr "파일 선택 상자"

#. (itstool) path: section/title
#: C/beginner.js.page:72 C/beginner.py.page:49 C/beginner.vala.page:76
#: C/c.page:136
msgid "Font selectors"
msgstr "글꼴 선택 상자"

#. (itstool) path: section/title
#: C/beginner.js.page:74 C/beginner.py.page:51 C/beginner.vala.page:78
#: C/c.page:138
msgid "Color Selectors"
msgstr "색상 선택 상자"

#. (itstool) path: section/title
#: C/beginner.js.page:77 C/beginner.py.page:54 C/beginner.vala.page:81
#: C/c.page:141
msgid "Layout containers"
msgstr "배치 컨테이너"

#. (itstool) path: section/title
#: C/beginner.js.page:79 C/beginner.py.page:56 C/beginner.vala.page:83
#: C/c.page:143
msgid "Ornaments"
msgstr "장식"

#. (itstool) path: section/title
#: C/beginner.js.page:81 C/beginner.py.page:58 C/beginner.vala.page:85
#: C/c.page:145
msgid "Scrolling"
msgstr "스크롤"

#. (itstool) path: section/title
#: C/beginner.js.page:83 C/beginner.py.page:60 C/beginner.vala.page:87
#: C/c.page:147
msgid "Miscellaneous"
msgstr "기타"

#. (itstool) path: section/title
#: C/beginner.js.page:88 C/beginner.vala.page:92 C/menubar.vala.page:198
msgid "Exercises"
msgstr "연습 예제"

#. (itstool) path: info/title
#: C/beginner.py.page:9
msgctxt "text"
msgid "GTK+ widgets sample code (Python)"
msgstr "GTK+ 위젯 예제 코드(Python)"

#. (itstool) path: info/desc
#: C/beginner.py.page:13
msgid ""
"A guide to GUI programming using GTK+, including code samples and practice "
"exercises."
msgstr ""
"예제 코드와 실제 연습 예제가 들어있는 GTK+ GUI 프로그래밍 안내서입니다."

#. (itstool) path: page/title
#: C/beginner.py.page:25
msgid "GTK+ widgets sample code"
msgstr "GTK+ 위젯 예제 코드"

#. (itstool) path: synopsis/p
#: C/beginner.py.page:27
msgid ""
"If you are a beginner and you would like a tutorial to guide you step by "
"step in an exploration of what you can do with GTK+ 3, you should go to the "
"<link xref=\"tutorial.py\"/> page. If you are looking for a specific widget, "
"you can find it in the sections below."
msgstr ""
"GTK+ 3으로 뭘 할 수 있는지 단계별로 살펴볼 수 있는 지침서를 찾는 초보자라면 "
"<link xref=\"tutorial.py\"/> 페이지로 이동하십시오. 개별 위젯을 찾는다면 아"
"래 섹션에서 찾아볼 수 있습니다."

#. (itstool) path: section/title
#: C/beginner.py.page:64
msgid "Theory pages"
msgstr "이론 페이지"

#. (itstool) path: info/title
#: C/beginner.vala.page:9
msgctxt "text"
msgid "Tutorial for beginners (Vala)"
msgstr "초보자용 지침서(Vala)"

#. (itstool) path: info/desc
#: C/beginner.vala.page:13
msgid ""
"A beginner's guide to GUI programming using GTK+, including code samples and "
"practice exercises."
msgstr ""
"예제 코드와 실제 연습 예제가 들어있는 GTK+ GUI 프로그래밍 초보자 안내서입니"
"다."

#. (itstool) path: synopsis/p
#: C/beginner.vala.page:27
msgid ""
"Although these tutorials are designed for beginners, we can't cover all the "
"basics. Before attempting to follow these tutorials, you are expected to be "
"familiar with the following concepts:"
msgstr ""
"이 안내서는 초보자에 맞게 구성했지만 모든 기본적인 내용을 다루지는 못했습니"
"다. 이 안내서를 따라가기 전에 다음 개념에 익숙한 상황임을 가정하겠습니다:"

#. (itstool) path: item/p
#: C/beginner.vala.page:29
msgid "Object oriented programming"
msgstr "객체 지향 프로그래밍"

#. (itstool) path: item/p
#: C/beginner.vala.page:30
msgid "The Vala programming language:"
msgstr "Vala 프로그래밍 언어:"

#. (itstool) path: item/p
#: C/beginner.vala.page:32
msgid ""
"<link href=\"https://live.gnome.org/Vala/Tutorial\">The Vala Tutorial</link>"
msgstr ""
"<link href=\"https://live.gnome.org/Vala/Tutorial\">Vala 따라하기 지침서</"
"link>"

#. (itstool) path: item/p
#: C/beginner.vala.page:33
msgid ""
"<link href=\"https://live.gnome.org/Vala/Documentation#Sample_Code\">Sample "
"Vala code</link>"
msgstr ""
"<link href=\"https://live.gnome.org/Vala/Documentation#Sample_Code\">Vala 예"
"제 코드</link>"

#. (itstool) path: synopsis/p
#: C/beginner.vala.page:38
msgid ""
"By following these tutorials you will learn the basics of GUI programming "
"using GTK+."
msgstr "이 안내서를 따라가면 GTK+ GUI 프로그래밍의 기본 내용을 배웁니다."

#. (itstool) path: item/p
#: C/beginner.vala.page:51
msgid "Copy and paste the code into <var>filename</var>.vala"
msgstr "<var>filename</var>.vala에 코드를 복사하여 붙여넣으십시오"

#. (itstool) path: item/p
#: C/beginner.vala.page:52 C/c.page:98
msgid "In the terminal type:"
msgstr "터미널에 다음 명령을 입력하십시오:"

#. (itstool) path: item/screen
#: C/beginner.vala.page:53
#, no-wrap
msgid "valac --pkg gtk+-3.0 <var>filename</var>.vala"
msgstr "valac --pkg gtk+-3.0 <var>filename</var>.vala"

#. (itstool) path: item/screen
#: C/beginner.vala.page:54 C/c.page:100
#, no-wrap
msgid "./<var>filename</var>"
msgstr "./<var>filename</var>"

#. (itstool) path: info/title
#: C/button.c.page:8
msgctxt "text"
msgid "Button (C)"
msgstr "Button(C)"

#. (itstool) path: info/desc
#: C/button.c.page:20 C/button.py.page:20 C/button.vala.page:19
msgid "A button widget which emits a signal when clicked"
msgstr "눌렀을 때 시그널을 내보내는 단추 위젯입니다"

#. (itstool) path: page/title
#: C/button.c.page:23 C/button.js.page:21 C/button.py.page:23
msgid "Button"
msgstr "Button"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/button.c.page:25 C/button.js.page:22 C/button.py.page:25
#: C/button.vala.page:24
msgctxt "_"
msgid "external ref='media/button.png' md5='8d69efbb3a0d3e043af6139b6492171c'"
msgstr ""

#. (itstool) path: page/p
#: C/button.c.page:26
msgid ""
"A button widget connected to a callback function that reverses its label "
"when clicked."
msgstr "눌렀을 때 레이블을 반전하는 콜백 함수에 연결한 단추 위젯입니다."

#. (itstool) path: page/code
#: C/button.c.page:28
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*This is the callback function. It is a handler function which \n"
"reacts to the signal. In this case, it will cause the button label's \n"
"string to reverse.*/\n"
"static void\n"
"button_clicked (GtkButton *button,\n"
"                gpointer   user_data)\n"
"{\n"
"  const char *old_label;\n"
"  char *new_label;\n"
"\n"
"  old_label = gtk_button_get_label (button);\n"
"  new_label = g_utf8_strreverse (old_label, -1);\n"
"\n"
"  gtk_button_set_label (button, new_label);\n"
"  g_free (new_label);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *button;\n"
"\n"
"  /*Create a window with a title and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"GNOME Button\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 250, 50);\n"
"\n"
"  /*Create a button with a label, and add it to the window*/\n"
"  button = gtk_button_new_with_label (\"Click Me\");\n"
"  gtk_container_add (GTK_CONTAINER (window), button);\n"
"\n"
"  /*Connecting the clicked signal to the callback function*/\n"
"  g_signal_connect (GTK_BUTTON (button),\n"
"                    \"clicked\", \n"
"                    G_CALLBACK (button_clicked), \n"
"                    G_OBJECT (window));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*This is the callback function. It is a handler function which \n"
"reacts to the signal. In this case, it will cause the button label's \n"
"string to reverse.*/\n"
"static void\n"
"button_clicked (GtkButton *button,\n"
"                gpointer   user_data)\n"
"{\n"
"  const char *old_label;\n"
"  char *new_label;\n"
"\n"
"  old_label = gtk_button_get_label (button);\n"
"  new_label = g_utf8_strreverse (old_label, -1);\n"
"\n"
"  gtk_button_set_label (button, new_label);\n"
"  g_free (new_label);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *button;\n"
"\n"
"  /*Create a window with a title and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"GNOME Button\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 250, 50);\n"
"\n"
"  /*Create a button with a label, and add it to the window*/\n"
"  button = gtk_button_new_with_label (\"Click Me\");\n"
"  gtk_container_add (GTK_CONTAINER (window), button);\n"
"\n"
"  /*Connecting the clicked signal to the callback function*/\n"
"  g_signal_connect (GTK_BUTTON (button),\n"
"                    \"clicked\", \n"
"                    G_CALLBACK (button_clicked), \n"
"                    G_OBJECT (window));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/button.c.page:36 C/buttonbox.py.page:51 C/grid.c.page:35
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkButton.html"
"\">GtkButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkButton.html"
"\">GtkButton</link>"

#. (itstool) path: item/p
#: C/button.c.page:37
msgid ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-Unicode-"
"Manipulation.html#g-utf8-strreverse\">Unicode Manipulation</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-Unicode-"
"Manipulation.html#g-utf8-strreverse\">Unicode Manipulation</link>"

#. (itstool) path: info/title
#: C/button.js.page:8
msgctxt "text"
msgid "Button (JavaScript)"
msgstr "Button(JavaScript)"

#. (itstool) path: info/desc
#: C/button.js.page:18
msgid "A button which can be connected to other widgets"
msgstr "다른 위젯에 연결할 수 있는 단추입니다"

#. (itstool) path: page/p
#: C/button.js.page:23
msgid "A button widget that changes its label when you click it."
msgstr "단추를 누르면 레이블을 바꾸는 단추 위젯입니다."

#. (itstool) path: page/code
#: C/button.js.page:25
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ButtonExample = new Lang.Class ({\n"
"    Name: 'Button Example',\n"
"\n"
"    /* Create the application itself\n"
"       This boilerplate code is needed to build any GTK+ application. */\n"
"        _init: function () {\n"
"            this.application = new Gtk.Application ({\n"
"                application_id: 'org.example.jsbutton',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                              window_position: Gtk.WindowPosition.CENTER,\n"
"                                                              title: \"GNOME Button\",\n"
"                                                              default_height: 50,\n"
"                                                              default_width: 250 });\n"
"\n"
"        // Create the button\n"
"        this.Button = new Gtk.Button ({label: \"Click Me\"});\n"
"        this._window.add (this.Button);\n"
"\n"
"        // Bind it to a function that says what to do when the button is clicked\n"
"        this.Button.connect (\"clicked\", Lang.bind(this, this._clickHandler));\n"
"\n"
"                // Show the window and all child widgets\n"
"                this._window.show_all();\n"
"    },\n"
"\n"
"    // Here's the function that says what happens when the button is clicked\n"
"    _clickHandler: function () {\n"
"        this.Button.set_label (\"Clicked!\");\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ButtonExample = new Lang.Class ({\n"
"    Name: 'Button Example',\n"
"\n"
"    /* Create the application itself\n"
"       This boilerplate code is needed to build any GTK+ application. */\n"
"        _init: function () {\n"
"            this.application = new Gtk.Application ({\n"
"                application_id: 'org.example.jsbutton',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                              window_position: Gtk.WindowPosition.CENTER,\n"
"                                                              title: \"GNOME Button\",\n"
"                                                              default_height: 50,\n"
"                                                              default_width: 250 });\n"
"\n"
"        // Create the button\n"
"        this.Button = new Gtk.Button ({label: \"Click Me\"});\n"
"        this._window.add (this.Button);\n"
"\n"
"        // Bind it to a function that says what to do when the button is clicked\n"
"        this.Button.connect (\"clicked\", Lang.bind(this, this._clickHandler));\n"
"\n"
"                // Show the window and all child widgets\n"
"                this._window.show_all();\n"
"    },\n"
"\n"
"    // Here's the function that says what happens when the button is clicked\n"
"    _clickHandler: function () {\n"
"        this.Button.set_label (\"Clicked!\");\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ButtonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/button.js.page:33 C/grid.js.page:36
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Button.html"
"\">Gtk.Button</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Button.html"
"\">Gtk.Button</link>"

#. (itstool) path: info/title
#: C/button.py.page:8
msgctxt "text"
msgid "Button (Python)"
msgstr "Button (Python)"

#. (itstool) path: page/p
#: C/button.py.page:26 C/button.vala.page:25
msgid "A button widget connected to a simple callback function."
msgstr "간단한 콜백 함수에 연결한 단추 위젯입니다."

#. (itstool) path: section/code
#: C/button.py.page:32
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GNOME Button\", application=app)\n"
"        self.set_default_size(250, 50)\n"
"\n"
"        # a button\n"
"        button = Gtk.Button()\n"
"        # with a label\n"
"        button.set_label(\"Click me\")\n"
"        # connect the signal \"clicked\" emitted by the button\n"
"        # to the callback function do_clicked\n"
"        button.connect(\"clicked\", self.do_clicked)\n"
"        # add the button to the window\n"
"        self.add(button)\n"
"\n"
"    # callback function connected to the signal \"clicked\" of the button\n"
"    def do_clicked(self, button):\n"
"        print(\"You clicked me!\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GNOME Button\", application=app)\n"
"        self.set_default_size(250, 50)\n"
"\n"
"        # a button\n"
"        button = Gtk.Button()\n"
"        # with a label\n"
"        button.set_label(\"Click me\")\n"
"        # connect the signal \"clicked\" emitted by the button\n"
"        # to the callback function do_clicked\n"
"        button.connect(\"clicked\", self.do_clicked)\n"
"        # add the button to the window\n"
"        self.add(button)\n"
"\n"
"    # callback function connected to the signal \"clicked\" of the button\n"
"    def do_clicked(self, button):\n"
"        print(\"You clicked me!\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/button.py.page:36
msgid "Useful methods for a Button widget"
msgstr "Button 위젯에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/button.py.page:37
msgid ""
"In line 16 the <code>\"clicked\"</code> signal from the button is connected "
"to the callback function <code>do_clicked()</code> using <code><var>widget</"
"var>.connect(<var>signal</var>, <var>callback function</var>)</code>. See "
"<link xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"16번째 줄에서, <code><var>widget</var>.connect(<var>signal</var>, "
"<var>callback function</var>)</code> 코드로 <code>\"clicked\"</code> 시그널"
"을 <code>do_clicked()</code> 콜백 함수에 연결했습니다. 더 자세한 설명은 "
"<link xref=\"signals-callbacks.py\"/>를 참조하십시오."

#. (itstool) path: item/p
#: C/button.py.page:39
msgid ""
"<code>set_relief(Gtk.ReliefStyle.NONE)</code> sets to none the relief style "
"of the edges of the Gtk.Button - as opposed to <code>Gtk.ReliefStyle.NORMAL</"
"code>."
msgstr ""
"<code>set_relief(Gtk.ReliefStyle.NONE)</code> 함수는 Gtk.Button의 가장자리의 "
"두드러진 모양새를 없음으로 설정합니다. <code>Gtk.ReliefStyle.NORMAL</code>과"
"는 반대죠."

#. (itstool) path: item/p
#: C/button.py.page:40
msgid ""
"If the label of the button is a <link href=\"http://developer.gnome.org/gtk3/"
"unstable/gtk3-Stock-Items.html\">stock icon</link>, "
"<code>set_use_stock(True)</code> sets the label as the name of the "
"corresponding stock icon."
msgstr ""
"단추 레이블에 <link href=\"http://developer.gnome.org/gtk3/unstable/gtk3-"
"Stock-Items.html\">스톡 아이콘</link>이라면, <code>set_use_stock(True)</"
"code> 함수로 스톡 아이콘 이름을 레이블로 설정합니다."

#. (itstool) path: item/p
#: C/button.py.page:41
msgid ""
"To set an image (e.g. a stock image) for the button <code>button</code>:"
msgstr "<code>button</code> 단추 레이블에 그림(예: 스톡 그림)을 설정하려면:"

#. (itstool) path: item/code
#: C/button.py.page:42
#, no-wrap
msgid ""
"\n"
"image = Gtk.Image()\n"
"image.set_from_stock(Gtk.STOCK_ABOUT, Gtk.IconSize.BUTTON)\n"
"button.set_image(image)"
msgstr ""
"\n"
"image = Gtk.Image()\n"
"image.set_from_stock(Gtk.STOCK_ABOUT, Gtk.IconSize.BUTTON)\n"
"button.set_image(image)"

#. (itstool) path: item/p
#: C/button.py.page:46
msgid ""
"You should not set a label for the button after this, otherwise it will show "
"the label and not the image."
msgstr ""
"이 코드 다음에 단추에 레이블 문자열을 설정하면, 그림 대신 텍스트 레이블이 나"
"타납니다."

#. (itstool) path: item/p
#: C/button.py.page:47
msgid ""
"If we use <code>set_focus_on_click(False)</code> the button will not grab "
"focus when it is clicked by the mouse. This could be useful in places like "
"toolbars, so that the keyboard focus is not removed from the main area of "
"the application."
msgstr ""
"<code>set_focus_on_click(False)</code> 함수를 사용하면 단추를 마우스로 눌렀"
"을 때 포커스를 주지 않습니다. 도구 모음 같은 곳에 쓸만해서 키보드 포커스를 프"
"로그램의 주 영역에서 없애지 않을 때 씁니다."

#. (itstool) path: item/p
#: C/button.py.page:55
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkButton.html"
"\">GtkButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkButton.html"
"\">GtkButton</link>"

#. (itstool) path: item/p
#: C/button.py.page:56 C/dialog.py.page:52 C/label.py.page:106
#: C/linkbutton.py.page:47 C/messagedialog.py.page:61 C/radiobutton.py.page:49
#: C/separator.py.page:39 C/window.py.page:65
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkWindow.html"
"\">GtkWindow</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkWindow.html"
"\">GtkWindow</link>"

#. (itstool) path: info/title
#: C/button.vala.page:8
msgctxt "text"
msgid "Button (Vala)"
msgstr "Button (Vala)"

#. (itstool) path: page/title
#: C/button.vala.page:22
msgid "Button widget"
msgstr "단추 위젯"

#. (itstool) path: page/code
#: C/button.vala.page:27
#, no-wrap
msgid ""
"\n"
"/* A window in the application */\n"
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* The constructor of the window */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"GNOME Button\");\n"
"\n"
"\t\tvar button = new Gtk.Button.with_label (\"Click Me\");\n"
"\t\tbutton.clicked.connect (this.reverse_label);\n"
"\t\tbutton.show ();\n"
"\n"
"\t\tthis.window_position = Gtk.WindowPosition.CENTER;\n"
"\t\tthis.set_default_size (250,50);\n"
"\t\tthis.add (button);\n"
"\t}\n"
"\n"
"\t/* The callback function connected to the\n"
"\t * 'clicked' signal of the button.\n"
"\t */\n"
"\tvoid reverse_label (Gtk.Button button) {\n"
"\t\tbutton.label = button.label.reverse ();\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\n"
"\t/* This is the constructor */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the activate signal of GLib.Application */\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"\n"
"/* A window in the application */\n"
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* The constructor of the window */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"GNOME Button\");\n"
"\n"
"\t\tvar button = new Gtk.Button.with_label (\"Click Me\");\n"
"\t\tbutton.clicked.connect (this.reverse_label);\n"
"\t\tbutton.show ();\n"
"\n"
"\t\tthis.window_position = Gtk.WindowPosition.CENTER;\n"
"\t\tthis.set_default_size (250,50);\n"
"\t\tthis.add (button);\n"
"\t}\n"
"\n"
"\t/* The callback function connected to the\n"
"\t * 'clicked' signal of the button.\n"
"\t */\n"
"\tvoid reverse_label (Gtk.Button button) {\n"
"\t\tbutton.label = button.label.reverse ();\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\n"
"\t/* This is the constructor */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the activate signal of GLib.Application */\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: page/p
#: C/button.vala.page:29
msgid ""
"In this sample we used the following: <link href=\"http://www.valadoc.org/gtk"
"+-3.0/Gtk.Button.html\">Gtk.Button</link>"
msgstr ""
"이 예제에서 <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Button.html"
"\">Gtk.Button</link>을 사용하겠습니다"

#. (itstool) path: info/title
#: C/buttonbox.js.page:8
msgctxt "text"
msgid "ButtonBox (JavaScript)"
msgstr "ButtonBox (JavaScript)"

#. (itstool) path: credit/name
#: C/buttonbox.js.page:14 C/colorbutton.js.page:13
#: C/fontchooserwidget.js.page:13 C/paned.js.page:13
#: C/scrolledwindow.js.page:13 C/tooltip.js.page:14
msgid "Meg Ford"
msgstr "Meg Ford"

#. (itstool) path: info/desc
#: C/buttonbox.js.page:19 C/buttonbox.py.page:20
msgid "A container for arranging buttons"
msgstr "단추를 정렬하는 컨테이너"

#. (itstool) path: page/title
#. (itstool) path: steps/title
#: C/buttonbox.js.page:22 C/buttonbox.py.page:23 C/tutorial.py.page:92
msgid "ButtonBox"
msgstr "ButtonBox"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/buttonbox.js.page:24 C/buttonbox.py.page:25
msgctxt "_"
msgid ""
"external ref='media/buttonbox_calculator.png' "
"md5='ce0de08b7ac66f517290e33e6d33d508'"
msgstr ""

#. (itstool) path: page/p
#: C/buttonbox.js.page:25 C/buttonbox.py.page:26
msgid "A calculator - the buttons are enclosed in horizontal ButtonBoxes."
msgstr "계산기 - 단추는 수평 ButtonBox에 둘러싸여있습니다."

#. (itstool) path: section/code
#: C/buttonbox.js.page:31
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ButtonBoxExample = new Lang.Class ({\n"
"    Name: 'ButtonBox Example',\n"
"\n"
"    // Create the application itthis\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application({ application_id: 'org.example.jsbuttonbox' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"        // Create the application window\n"
"        this.window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                    window_position: Gtk.WindowPosition.CENTER,\n"
"                                                    title: \"Calculator\",\n"
"                                                    default_width: 350,\n"
"                                                    default_height: 200,\n"
"                                                    border_width: 10 });\n"
"        this.entry = new Gtk.Entry();\n"
"        this.entry.set_text('0');\n"
"        // text aligned on the right\n"
"        this.entry.set_alignment(1);\n"
"        // the text in the entry cannot be modified by writing in it\n"
"        this.entry.set_can_focus(false);\n"
"\n"
"        // a grid\n"
"        this.grid = new Gtk.Grid();\n"
"        this.grid.set_row_spacing(5);\n"
"        \n"
"        // to attach the entry\n"
"        this.grid.attach(this.entry, 0, 0, 1, 1);\n"
"        \n"
"        // the labels for the buttons\n"
"        this.buttons = [ 7, 8, 9, '/', 4, 5, 6, '*', 1, 2, 3, '-', 'C', 0, '=', '+' ];\n"
"        \n"
"        // each row is a ButtonBox, attached to the grid            \n"
"        for (i = 0; i &lt; 4; i++) {\n"
"            this.hbox = Gtk.ButtonBox.new(Gtk.Orientation.HORIZONTAL);\n"
"            this.hbox.set_spacing(5);\n"
"            this.grid.attach(this.hbox, 0, i + 1, 1, 1);\n"
"            // each ButtonBox has 4 buttons, connected to the callback function\n"
"            for (j= 0; j &lt; 4; j++) {\n"
"                this.button = new Gtk.Button();\n"
"                this.buttonLabel = (this.buttons[i * 4 + j].toString());\n"
"                this.button.set_label(this.buttonLabel);\n"
"                this.button.set_can_focus(false);\n"
"                this.button.connect(\"clicked\", Lang.bind(this, this._buttonClicked, this.button));\n"
"                this.hbox.add(this.button);\n"
"            }\n"
"        }\n"
"            \n"
"        // some variables for the calculations\n"
"        this.firstNumber = 0;\n"
"        this.secondNumber = 0;\n"
"        this.counter = 0;\n"
"        this.operation = \"\";\n"
"\n"
"        // add the grid to the window\n"
"        this.window.add(this.grid);\n"
"        this.window.show_all();\n"
"    },\n"
"\n"
"    // callback function for all the buttons\n"
"    _buttonClicked: function(button) {\n"
"        this.button = button;\n"
"        // for the operations\n"
"        if (this.button.get_label() == '+') {\n"
"            this.counter += 1 \n"
"            if (this.counter &gt; 1)\n"
"                this._doOperation();\n"
"            this.entry.set_text('0');\n"
"            this.operation = \"plus\";\n"
"        }\n"
"\n"
"        else if (this.button.get_label() == '-') {\n"
"            this.counter += 1;\n"
"            if (this.counter &gt; 1)\n"
"                this._doOperation();\n"
"            this.entry.set_text('0');\n"
"            this.operation = \"minus\";\n"
"        }\n"
"\n"
"        else if (this.button.get_label() == '*') {\n"
"            this.counter += 1; \n"
"            if (this.counter &gt; 1)\n"
"                this._doOperation();\n"
"            this.entry.set_text('0');\n"
"            this.operation = \"multiplication\";\n"
"        }\n"
"\n"
"        else if (this.button.get_label() == '/') {\n"
"            this.counter += 1 \n"
"            if (this.counter &gt; 1)\n"
"                this._doOperation();\n"
"            this.entry.set_text('0');\n"
"            this.operation = \"division\";\n"
"        }\n"
"\n"
"        // for =\n"
"        else if (this.button.get_label() == '=') {\n"
"            this._doOperation();\n"
"            this.entry.set_text(this.firstNumber.toString());\n"
"            this.counter = 1;\n"
"        }\n"
"\n"
"        // for Cancel\n"
"        else if (this.button.get_label() == 'C') {\n"
"            this.firstNumber = 0;\n"
"            this.secondNumber = 0;\n"
"            this.counter = 0;\n"
"            this.entry.set_text('0');\n"
"            this.operation = \"\";\n"
"        }\n"
"\n"
"        // for a digit button\n"
"        else {\n"
"            this.newDigit = parseInt(this.button.get_label());\n"
"            if (this.entry.get_text() == \"error\")\n"
"                this.number = 0;\n"
"            else\n"
"                this.number = parseInt(this.entry.get_text());\n"
"            this.number = this.number * 10 + this.newDigit;            \n"
"            if (this.counter == 0)\n"
"                this.firstNumber = this.number;\n"
"            else\n"
"                this.secondNumber = this.number;\n"
"            this.entry.set_text(this.number.toString());\n"
"        }\n"
"     },\n"
"\n"
"     _doOperation: function() {\n"
"        if (this.operation == \"plus\") {\n"
"           this.firstNumber += this.secondNumber;\n"
"        } else if (this.operation == \"minus\") {\n"
"            this.firstNumber -= this.secondNumber;\n"
"        } else if (this.operation == \"multiplication\") {\n"
"            this.firstNumber *= this.secondNumber;\n"
"        } else if (this.operation == \"division\") {\n"
"            if (this.secondNumber != 0) {\n"
"                this.firstNumber /= this.secondNumber;\n"
"            } else {\n"
"                this.firstNumber = 0; \n"
"                this.secondNumber = 0;\n"
"                this.counter = 0; \n"
"                this.entry.set_text(\"error\");\n"
"                this.operation = \"\";\n"
"\n"
"                return\n"
"            }\n"
"        } else {\n"
"            this.firstNumber = 0;\n"
"            this.secondNumber = 0;\n"
"            this.counter = 0;\n"
"            this.entry.set_text(\"error\");\n"
"        }\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ButtonBoxExample();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ButtonBoxExample = new Lang.Class ({\n"
"    Name: 'ButtonBox Example',\n"
"\n"
"    // Create the application itthis\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application({ application_id: 'org.example.jsbuttonbox' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"        // Create the application window\n"
"        this.window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                    window_position: Gtk.WindowPosition.CENTER,\n"
"                                                    title: \"Calculator\",\n"
"                                                    default_width: 350,\n"
"                                                    default_height: 200,\n"
"                                                    border_width: 10 });\n"
"        this.entry = new Gtk.Entry();\n"
"        this.entry.set_text('0');\n"
"        // text aligned on the right\n"
"        this.entry.set_alignment(1);\n"
"        // the text in the entry cannot be modified by writing in it\n"
"        this.entry.set_can_focus(false);\n"
"\n"
"        // a grid\n"
"        this.grid = new Gtk.Grid();\n"
"        this.grid.set_row_spacing(5);\n"
"        \n"
"        // to attach the entry\n"
"        this.grid.attach(this.entry, 0, 0, 1, 1);\n"
"        \n"
"        // the labels for the buttons\n"
"        this.buttons = [ 7, 8, 9, '/', 4, 5, 6, '*', 1, 2, 3, '-', 'C', 0, '=', '+' ];\n"
"        \n"
"        // each row is a ButtonBox, attached to the grid            \n"
"        for (i = 0; i &lt; 4; i++) {\n"
"            this.hbox = Gtk.ButtonBox.new(Gtk.Orientation.HORIZONTAL);\n"
"            this.hbox.set_spacing(5);\n"
"            this.grid.attach(this.hbox, 0, i + 1, 1, 1);\n"
"            // each ButtonBox has 4 buttons, connected to the callback function\n"
"            for (j= 0; j &lt; 4; j++) {\n"
"                this.button = new Gtk.Button();\n"
"                this.buttonLabel = (this.buttons[i * 4 + j].toString());\n"
"                this.button.set_label(this.buttonLabel);\n"
"                this.button.set_can_focus(false);\n"
"                this.button.connect(\"clicked\", Lang.bind(this, this._buttonClicked, this.button));\n"
"                this.hbox.add(this.button);\n"
"            }\n"
"        }\n"
"            \n"
"        // some variables for the calculations\n"
"        this.firstNumber = 0;\n"
"        this.secondNumber = 0;\n"
"        this.counter = 0;\n"
"        this.operation = \"\";\n"
"\n"
"        // add the grid to the window\n"
"        this.window.add(this.grid);\n"
"        this.window.show_all();\n"
"    },\n"
"\n"
"    // callback function for all the buttons\n"
"    _buttonClicked: function(button) {\n"
"        this.button = button;\n"
"        // for the operations\n"
"        if (this.button.get_label() == '+') {\n"
"            this.counter += 1 \n"
"            if (this.counter &gt; 1)\n"
"                this._doOperation();\n"
"            this.entry.set_text('0');\n"
"            this.operation = \"plus\";\n"
"        }\n"
"\n"
"        else if (this.button.get_label() == '-') {\n"
"            this.counter += 1;\n"
"            if (this.counter &gt; 1)\n"
"                this._doOperation();\n"
"            this.entry.set_text('0');\n"
"            this.operation = \"minus\";\n"
"        }\n"
"\n"
"        else if (this.button.get_label() == '*') {\n"
"            this.counter += 1; \n"
"            if (this.counter &gt; 1)\n"
"                this._doOperation();\n"
"            this.entry.set_text('0');\n"
"            this.operation = \"multiplication\";\n"
"        }\n"
"\n"
"        else if (this.button.get_label() == '/') {\n"
"            this.counter += 1 \n"
"            if (this.counter &gt; 1)\n"
"                this._doOperation();\n"
"            this.entry.set_text('0');\n"
"            this.operation = \"division\";\n"
"        }\n"
"\n"
"        // for =\n"
"        else if (this.button.get_label() == '=') {\n"
"            this._doOperation();\n"
"            this.entry.set_text(this.firstNumber.toString());\n"
"            this.counter = 1;\n"
"        }\n"
"\n"
"        // for Cancel\n"
"        else if (this.button.get_label() == 'C') {\n"
"            this.firstNumber = 0;\n"
"            this.secondNumber = 0;\n"
"            this.counter = 0;\n"
"            this.entry.set_text('0');\n"
"            this.operation = \"\";\n"
"        }\n"
"\n"
"        // for a digit button\n"
"        else {\n"
"            this.newDigit = parseInt(this.button.get_label());\n"
"            if (this.entry.get_text() == \"error\")\n"
"                this.number = 0;\n"
"            else\n"
"                this.number = parseInt(this.entry.get_text());\n"
"            this.number = this.number * 10 + this.newDigit;            \n"
"            if (this.counter == 0)\n"
"                this.firstNumber = this.number;\n"
"            else\n"
"                this.secondNumber = this.number;\n"
"            this.entry.set_text(this.number.toString());\n"
"        }\n"
"     },\n"
"\n"
"     _doOperation: function() {\n"
"        if (this.operation == \"plus\") {\n"
"           this.firstNumber += this.secondNumber;\n"
"        } else if (this.operation == \"minus\") {\n"
"            this.firstNumber -= this.secondNumber;\n"
"        } else if (this.operation == \"multiplication\") {\n"
"            this.firstNumber *= this.secondNumber;\n"
"        } else if (this.operation == \"division\") {\n"
"            if (this.secondNumber != 0) {\n"
"                this.firstNumber /= this.secondNumber;\n"
"            } else {\n"
"                this.firstNumber = 0; \n"
"                this.secondNumber = 0;\n"
"                this.counter = 0; \n"
"                this.entry.set_text(\"error\");\n"
"                this.operation = \"\";\n"
"\n"
"                return\n"
"            }\n"
"        } else {\n"
"            this.firstNumber = 0;\n"
"            this.secondNumber = 0;\n"
"            this.counter = 0;\n"
"            this.entry.set_text(\"error\");\n"
"        }\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ButtonBoxExample();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/buttonbox.js.page:38
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.ButtonBox.html"
"\">GtkButtonBox</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.ButtonBox.html"
"\">GtkButtonBox</link>"

#. (itstool) path: item/p
#: C/buttonbox.js.page:39
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Box.html"
"\">GtkBox</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Box.html"
"\">GtkBox</link>"

#. (itstool) path: item/p
#: C/buttonbox.js.page:40
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Button.html"
"\">GtkButton</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Button.html"
"\">GtkButton</link>"

#. (itstool) path: item/p
#: C/buttonbox.js.page:41
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Entry.html"
"\">GtkEntry</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Entry.html"
"\">GtkEntry</link>"

#. (itstool) path: item/p
#: C/buttonbox.js.page:42
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Grid.html"
"\">GtkGrid</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Grid.html"
"\">GtkGrid</link>"

#. (itstool) path: info/title
#: C/buttonbox.py.page:8
msgctxt "text"
msgid "ButtonBox (Python)"
msgstr "ButtonBox (Python)"

#. (itstool) path: section/code
#: C/buttonbox.py.page:32
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Calculator\", application=app)\n"
"        self.set_default_size(350, 200)\n"
"        self.set_border_width(10)\n"
"\n"
"        # an entry\n"
"        self.entry = Gtk.Entry()\n"
"        # with an initial text\n"
"        self.entry.set_text('0')\n"
"        # text aligned on the right\n"
"        self.entry.set_alignment(1)\n"
"        # the text in the entry cannot be modified writing in it\n"
"        self.entry.set_can_focus(False)\n"
"\n"
"        # a grid\n"
"        grid = Gtk.Grid()\n"
"        grid.set_row_spacing(5)\n"
"\n"
"        # to attach the entry\n"
"        grid.attach(self.entry, 0, 0, 1, 1)\n"
"\n"
"        # the labels for the buttons\n"
"        buttons = [7, 8, 9, '/',\n"
"                   4, 5, 6, '*',\n"
"                   1, 2, 3, '-',\n"
"                   'C', 0, '=', '+']\n"
"\n"
"        # each row is a ButtonBox, attached to the grid\n"
"        for i in range(4):\n"
"            hbox = Gtk.ButtonBox.new(Gtk.Orientation.HORIZONTAL)\n"
"            hbox.set_spacing(5)\n"
"            grid.attach(hbox, 0, i + 1, 1, 1)\n"
"            # each ButtonBox has 4 buttons, connected to the callback function\n"
"            for j in range(4):\n"
"                button = Gtk.Button(label=buttons[i * 4 + j])\n"
"                button.set_can_focus(False)\n"
"                button.connect(\"clicked\", self.button_clicked)\n"
"                hbox.add(button)\n"
"\n"
"        # some variables for the calculations\n"
"        self.first_number = 0\n"
"        self.second_number = 0\n"
"        self.counter = 0\n"
"        self.operation = \"\"\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # callback function for all the buttons\n"
"    def button_clicked(self, button):\n"
"        # for the operations\n"
"        if button.get_label() == '+':\n"
"            self.counter += 1\n"
"            if self.counter &gt; 1:\n"
"                self.do_operation()\n"
"            self.entry.set_text('0')\n"
"            self.operation = \"plus\"\n"
"        elif button.get_label() == '-':\n"
"            self.counter += 1\n"
"            if self.counter &gt; 1:\n"
"                self.do_operation()\n"
"            self.entry.set_text('0')\n"
"            self.operation = \"minus\"\n"
"        elif button.get_label() == '*':\n"
"            self.counter += 1\n"
"            if self.counter &gt; 1:\n"
"                self.do_operation()\n"
"            self.entry.set_text('0')\n"
"            self.operation = \"multiplication\"\n"
"        elif button.get_label() == '/':\n"
"            self.counter += 1\n"
"            if self.counter &gt; 1:\n"
"                self.do_operation()\n"
"            self.entry.set_text('0')\n"
"            self.operation = \"division\"\n"
"        # for =\n"
"        elif button.get_label() == '=':\n"
"            self.do_operation()\n"
"            self.entry.set_text(str(self.first_number))\n"
"            self.counter = 1\n"
"        # for Cancel\n"
"        elif button.get_label() == 'C':\n"
"            self.first_number = 0\n"
"            self.second_number = 0\n"
"            self.counter = 0\n"
"            self.entry.set_text('')\n"
"            self.operation = \"\"\n"
"        # for a digit button\n"
"        else:\n"
"            new_digit = int(button.get_label())\n"
"            if self.entry.get_text() == 'error':\n"
"                number = 0\n"
"            else:\n"
"                number = int(self.entry.get_text())\n"
"            number = number * 10 + new_digit\n"
"            if self.counter == 0:\n"
"                self.first_number = number\n"
"            else:\n"
"                self.second_number = number\n"
"            self.entry.set_text(str(number))\n"
"\n"
"    def do_operation(self):\n"
"        if self.operation == \"plus\":\n"
"            self.first_number += self.second_number\n"
"        elif self.operation == \"minus\":\n"
"            self.first_number -= self.second_number\n"
"        elif self.operation == \"multiplication\":\n"
"            self.first_number *= self.second_number\n"
"        elif self.operation == \"division\":\n"
"            try:\n"
"                self.first_number /= self.second_number\n"
"            except ZeroDivisionError:\n"
"                self.first_number = 0\n"
"                self.second_number = 0\n"
"                self.counter = 0\n"
"                self.entry.set_text('error')\n"
"                self.operation = \"\"\n"
"                return\n"
"        else:\n"
"            self.first_number = 0\n"
"            self.second_number = 0\n"
"            self.counter = 0\n"
"            self.entry.set_text('error')\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Calculator\", application=app)\n"
"        self.set_default_size(350, 200)\n"
"        self.set_border_width(10)\n"
"\n"
"        # an entry\n"
"        self.entry = Gtk.Entry()\n"
"        # with an initial text\n"
"        self.entry.set_text('0')\n"
"        # text aligned on the right\n"
"        self.entry.set_alignment(1)\n"
"        # the text in the entry cannot be modified writing in it\n"
"        self.entry.set_can_focus(False)\n"
"\n"
"        # a grid\n"
"        grid = Gtk.Grid()\n"
"        grid.set_row_spacing(5)\n"
"\n"
"        # to attach the entry\n"
"        grid.attach(self.entry, 0, 0, 1, 1)\n"
"\n"
"        # the labels for the buttons\n"
"        buttons = [7, 8, 9, '/',\n"
"                   4, 5, 6, '*',\n"
"                   1, 2, 3, '-',\n"
"                   'C', 0, '=', '+']\n"
"\n"
"        # each row is a ButtonBox, attached to the grid\n"
"        for i in range(4):\n"
"            hbox = Gtk.ButtonBox.new(Gtk.Orientation.HORIZONTAL)\n"
"            hbox.set_spacing(5)\n"
"            grid.attach(hbox, 0, i + 1, 1, 1)\n"
"            # each ButtonBox has 4 buttons, connected to the callback function\n"
"            for j in range(4):\n"
"                button = Gtk.Button(label=buttons[i * 4 + j])\n"
"                button.set_can_focus(False)\n"
"                button.connect(\"clicked\", self.button_clicked)\n"
"                hbox.add(button)\n"
"\n"
"        # some variables for the calculations\n"
"        self.first_number = 0\n"
"        self.second_number = 0\n"
"        self.counter = 0\n"
"        self.operation = \"\"\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # callback function for all the buttons\n"
"    def button_clicked(self, button):\n"
"        # for the operations\n"
"        if button.get_label() == '+':\n"
"            self.counter += 1\n"
"            if self.counter &gt; 1:\n"
"                self.do_operation()\n"
"            self.entry.set_text('0')\n"
"            self.operation = \"plus\"\n"
"        elif button.get_label() == '-':\n"
"            self.counter += 1\n"
"            if self.counter &gt; 1:\n"
"                self.do_operation()\n"
"            self.entry.set_text('0')\n"
"            self.operation = \"minus\"\n"
"        elif button.get_label() == '*':\n"
"            self.counter += 1\n"
"            if self.counter &gt; 1:\n"
"                self.do_operation()\n"
"            self.entry.set_text('0')\n"
"            self.operation = \"multiplication\"\n"
"        elif button.get_label() == '/':\n"
"            self.counter += 1\n"
"            if self.counter &gt; 1:\n"
"                self.do_operation()\n"
"            self.entry.set_text('0')\n"
"            self.operation = \"division\"\n"
"        # for =\n"
"        elif button.get_label() == '=':\n"
"            self.do_operation()\n"
"            self.entry.set_text(str(self.first_number))\n"
"            self.counter = 1\n"
"        # for Cancel\n"
"        elif button.get_label() == 'C':\n"
"            self.first_number = 0\n"
"            self.second_number = 0\n"
"            self.counter = 0\n"
"            self.entry.set_text('')\n"
"            self.operation = \"\"\n"
"        # for a digit button\n"
"        else:\n"
"            new_digit = int(button.get_label())\n"
"            if self.entry.get_text() == 'error':\n"
"                number = 0\n"
"            else:\n"
"                number = int(self.entry.get_text())\n"
"            number = number * 10 + new_digit\n"
"            if self.counter == 0:\n"
"                self.first_number = number\n"
"            else:\n"
"                self.second_number = number\n"
"            self.entry.set_text(str(number))\n"
"\n"
"    def do_operation(self):\n"
"        if self.operation == \"plus\":\n"
"            self.first_number += self.second_number\n"
"        elif self.operation == \"minus\":\n"
"            self.first_number -= self.second_number\n"
"        elif self.operation == \"multiplication\":\n"
"            self.first_number *= self.second_number\n"
"        elif self.operation == \"division\":\n"
"            try:\n"
"                self.first_number /= self.second_number\n"
"            except ZeroDivisionError:\n"
"                self.first_number = 0\n"
"                self.second_number = 0\n"
"                self.counter = 0\n"
"                self.entry.set_text('error')\n"
"                self.operation = \"\"\n"
"                return\n"
"        else:\n"
"            self.first_number = 0\n"
"            self.second_number = 0\n"
"            self.counter = 0\n"
"            self.entry.set_text('error')\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/buttonbox.py.page:36
msgid "Useful methods for a ButtonBox widget"
msgstr "ButtonBox 위젯에 쓸만한 메서드"

#. (itstool) path: item/p
#: C/buttonbox.py.page:38
msgid ""
"The layout of the ButtonBox are set with <code>set_layout(layout)</code>, "
"where <code>layout</code> can be <code>Gtk.ButtonBoxStyle.SPREAD</code> "
"(buttons are evenly spread across the box), <code>Gtk.ButtonBoxStyle.EDGE</"
"code> (buttons are placed at the edges of the box), <code>Gtk.ButtonBoxStyle."
"START</code> (buttons are grouped towards the start of the box), <code>Gtk."
"ButtonBoxStyle.END</code> (buttons are grouped towards the end of the box), "
"<code>Gtk.ButtonBoxStyle.CENTER</code> (buttons are centered in the box)."
msgstr ""
"ButtonBox 배치는 <code>set_layout(layout)</code> 함수로 설정하며, "
"<code>layout</code>에 들어갈 값은 <code>Gtk.ButtonBoxStyle.SPREAD</code>(단추"
"가 상자 크기만큼 늘어남), <code>Gtk.ButtonBoxStyle.EDGE</code>(단추가 상자 가"
"장자리에 붙음), <code>Gtk.ButtonBoxStyle.START</code>(단추가 상자 시작 부분"
"에 모임), <code>Gtk.ButtonBoxStyle.END</code>(단추가 상자 끝부분에 모임), "
"<code>Gtk.ButtonBoxStyle.CENTER</code>(단추가 상자 한가운데로 모임)가 될 수 "
"있습니다."

#. (itstool) path: item/p
#: C/buttonbox.py.page:39
msgid ""
"<code>set_child_secondary(button, is_secondary)</code> sets whether "
"<code>button</code> should appear in a secondary group of children. A "
"typical use of a secondary child is the help button in a dialog. This group "
"appears after the other children if the style is <code>START</code>, "
"<code>SPREAD</code> or <code>EDGE</code>, and before the other children if "
"the style is <code>END</code>. If the style is <code>START</code> or "
"<code>END</code>, then the secondary children are aligned at the other end "
"of the button box from the main children. For the other styles, they appear "
"immediately next to the main children."
msgstr ""
"<code>set_child_secondary(button, is_secondary)</code> 함수로 <code>button</"
"code> 이 하위 두번째 모임으로 나타날지 여부를 설정합니다. 2차 하위요소는 대화"
"상자의 도움말 단추가 될 수 있습니다. 이 모임은 모양새가 <code>START</code>, "
"<code>SPREAD</code>, <code>EDGE</code> 중 하나고, 그 이전 하위 요소의 모양새"
"가 <code>END</code>일 때, 다른 하위 요소의 전에 나타납니다. 모양새가 "
"<code>START</code>, <code>END</code> 중 하나면, 주 하위 요소의 단추 상자 다"
"른 끝부분에 두번째 하위 요소를 정렬합니다. 다른 모양새로 설정하면, 주 하위 요"
"소 바로 다음에 나타냅니다."

#. (itstool) path: item/p
#: C/buttonbox.py.page:40
msgid ""
"<code>set_child_non_homogeneous(button, is_non_homogeneous)</code> sets "
"whether the child is exempted from homogeneous sizing. Default value is "
"<code>False</code>."
msgstr ""
"<code>set_child_non_homogeneous(button, is_non_homogeneous)</code> 함수로 하"
"위 요소에 대한 동일 크기 조절 방식 비적용 여부를 설정합니다. 기본 값은 "
"<code>false</code>입니다."

#. (itstool) path: item/p
#: C/buttonbox.py.page:41
msgid ""
"<code>set_spacing(spacing)</code> sets the spacing, in pixels, between the "
"buttons of the box."
msgstr ""
"<code>set_spacing(spacing)</code> 함수는 상자안의 단추 사이 간격을 픽셀 단위"
"로 설정합니다."

#. (itstool) path: item/p
#: C/buttonbox.py.page:49
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkButtonBox.html"
"\">GtkButtonBox</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkButtonBox.html"
"\">GtkButtonBox</link>"

#. (itstool) path: item/p
#: C/buttonbox.py.page:50
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkBox.html\">GtkBox</"
"link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkBox.html\">GtkBox</"
"link>"

#. (itstool) path: item/p
#: C/buttonbox.py.page:52 C/entry.c.page:34
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkEntry.html"
"\">GtkEntry</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkEntry.html"
"\">GtkEntry</link>"

#. (itstool) path: item/p
#: C/buttonbox.py.page:53 C/grid.c.page:36 C/radiobutton.c.page:37
#: C/spinbutton.c.page:40 C/statusbar.c.page:40 C/switch.c.page:37
#: C/togglebutton.c.page:40
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkGrid.html\">GtkGrid</"
"link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkGrid.html\">GtkGrid</"
"link>"

#. (itstool) path: info/title
#: C/c.page:9
msgctxt "link"
msgid "C"
msgstr "C"

#. (itstool) path: credit/name
#: C/c.page:18
msgid "Bastian Ilso"
msgstr "Bastian Ilso"

#. (itstool) path: info/desc
#: C/c.page:24
msgid "Tutorials and code samples in C."
msgstr "C언어 기반 지침 및 예제 코드입니다."

#. (itstool) path: page/title
#: C/c.page:27
msgid "Platform Demos in C"
msgstr "C언어 기반 플랫폼 데모"

#. (itstool) path: section/title
#: C/c.page:31
msgid "Prerequisites"
msgstr "준비요건"

#. (itstool) path: section/p
#: C/c.page:33
msgid ""
"To compile these platform demos you will need a C compiler, for example "
"<link href=\"https://gcc.gnu.org/\">gcc</link>. You will also need GTK+ 3 "
"including headers and pkg-config files. Linux distributions usually abstract "
"GTK+ 3 headers and pkg-config files into separate packages called <em>gtk3-"
"devel</em>, <em>gtk3-dev</em> or similar."
msgstr ""
"플랫폼 데모를 컴파일하려면 <link href=\"https://gcc.gnu.org/\">gcc</link> 같"
"은 C 컴파일러가 필요합니다. 또한 헤더와 pkg-config 파일이 있는 GTK+ 3가 필요"
"합니다. 보통, 리눅스 배포판에서는 추상 GTK+ 3 헤더와 pkg-config 파일을 "
"<em>gtk3-devel</em>, <em>gtk3-dev</em> 같은 식으로 별개 패키지로 배포합니다."

#. (itstool) path: section/title
#: C/c.page:44
msgid "Guidelines for new developers"
msgstr "새 개발자 지침서"

#. (itstool) path: section/p
#: C/c.page:46
msgid ""
"Beyond the prerequisites mentioned above, several tools has been developed "
"to assist you further in developing your GNOME application. GNOME also "
"recommends a specific coding style and conventions which this section will "
"elaborate further upon."
msgstr ""
"이전에 언급했던 준비사항 이전에, 그놈 프로그램 개발을 도와주려 개발한 몇가지 "
"도구가 있습니다. 그놈에서는 지정 코드 작성 방식과 앞으로 이 장에서 계속 따라"
"갈 관례를 추천합니다."

#. (itstool) path: section/title
#: C/c.page:52
msgid "Recommended tools"
msgstr "추천 도구"

#. (itstool) path: item/p
#: C/c.page:56
msgid ""
"<link href=\"https://wiki.gnome.org/Apps/Devhelp\">DevHelp</link>: An API "
"documentation browser for GNOME."
msgstr ""
"<link href=\"https://wiki.gnome.org/Apps/Devhelp\">DevHelp</link>: 그놈 API "
"문서 탐색기."

#. (itstool) path: item/p
#: C/c.page:60
msgid ""
"A GNOME IDE (Integrated Development Environment). An IDE can assist you in "
"writing and debugging C code, for example <link href=\"https://wiki.gnome."
"org/Apps/Builder\">Builder</link> or <link href=\"https://wiki.gnome.org/"
"Apps/Anjuta\">Anjuta</link>."
msgstr ""
"그놈 IDE(통합 개발 환경). <link href=\"https://wiki.gnome.org/Apps/Builder\">"
"빌더</link>나 <link href=\"https://wiki.gnome.org/Apps/Anjuta\">안주타</"
"link> 같은 IDE에서 C 코드를 작성하고 디버깅하는 과정을 도와줄 수 있습니다."

#. (itstool) path: item/p
#: C/c.page:66
msgid ""
"<link href=\"http://glade.gnome.org/\">Glade</link>: A user interface "
"designer for GTK+ Applications."
msgstr ""
"<link href=\"http://glade.gnome.org/\">글레이드</link>: GTK+ 프로그램용 사용"
"자 인터페이스 디자이너."

#. (itstool) path: item/p
#: C/c.page:70
msgid ""
"An IRC Client, for example <link href=\"https://wiki.gnome.org/Apps/Polari"
"\">Polari</link> or <link href=\"https://wiki.gnome.org/Apps/Empathy"
"\">Empathy</link>. If you run into problems while following the beginner "
"tutorials, join #gnome on <em>irc.gnome.org</em>."
msgstr ""
"<link href=\"https://wiki.gnome.org/Apps/Polari\">폴라리</link>나 <link href="
"\"https://wiki.gnome.org/Apps/Empathy\">엠퍼시</link> 같은 IRC 클라이언트. 초"
"보자 지침서를 따라가다 문제에 봉착하면 <em>irc.gnome.org</em>의 #gnome으로 오"
"세요."

#. (itstool) path: section/title
#: C/c.page:80
msgid "Coding Style"
msgstr "코드 작성 방식"

#. (itstool) path: section/p
#: C/c.page:82
msgid ""
"Most applications in the GNOME project is written in the <link href=\"http://"
"en.wikipedia.org/wiki/Indent_style#GNU_style\">GNU style</link> of "
"indentation. The tutorials and code examples presented are following this "
"convention and you are recommended to do so too."
msgstr ""
"그놈 프로젝트의 대부분 프로그램은 <link href=\"http://en.wikipedia.org/wiki/"
"Indent_style#GNU_style\">GNU 방식</link> 들여쓰기로 작성했습니다. 지침서와 예"
"제 코드는 이 관례를 따랐으며,  여러분도 이 방식을 따르는게 좋습니다."

#. (itstool) path: section/title
#: C/c.page:89
msgid "Executing Code"
msgstr "코드 실행"

#. (itstool) path: item/p
#: C/c.page:95
msgid "Copy and paste the code into <var>filename</var>.c"
msgstr "<var>filename</var>.c 파일에 코드를 복사하여 붙여넣으십시오"

#. (itstool) path: item/screen
#: C/c.page:99
#, no-wrap
msgid "gcc <var>filename</var>.c `pkg-config --cflags --libs gtk+-3.0` -o <var>filename</var>"
msgstr "gcc <var>filename</var>.c `pkg-config --cflags --libs gtk+-3.0` -o <var>filename</var>"

#. (itstool) path: note/p
#: C/c.page:105
msgid ""
"For more information about compiling GTK+ programs see <link href=\"http://"
"developer.gnome.org/gtk3/3.4/gtk-compiling.html\">Compiling GTK+ "
"Applications on UNIX</link>."
msgstr ""
"GTK+ 프로그램 컴파일에 대해 더 알아보시려면 <link href=\"http://developer."
"gnome.org/gtk3/3.4/gtk-compiling.html\">유닉스 GTK+ 프로그램 컴파일</link>을 "
"살펴보십시오."

#. (itstool) path: section/title
#: C/c.page:117
msgid "Widget Code Examples"
msgstr "위젯 예제 코드"

#. (itstool) path: info/title
#: C/checkbutton.c.page:8
msgctxt "text"
msgid "CheckButton (C)"
msgstr "CheckButton(C)"

#. (itstool) path: info/desc
#: C/checkbutton.c.page:18
msgid "Create widgets with a discrete ToggleButton"
msgstr "개별 ToggleButton으로 위젯을 만듭니다"

#. (itstool) path: page/title
#: C/checkbutton.c.page:21 C/checkbutton.js.page:21 C/checkbutton.py.page:22
#: C/checkbutton.vala.page:21
msgid "CheckButton"
msgstr "CheckButton"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/checkbutton.c.page:22 C/checkbutton.js.page:22 C/checkbutton.py.page:23
#: C/checkbutton.vala.page:22
msgctxt "_"
msgid ""
"external ref='media/checkbutton.png' md5='7921a6812c87dd2b3781f4fad241e858'"
msgstr ""

#. (itstool) path: page/p
#: C/checkbutton.c.page:23 C/checkbutton.py.page:24 C/checkbutton.vala.page:23
msgid "This CheckButton toggles the title."
msgstr "CheckButton으로 제목 표시 여부를 전환합니다."

#. (itstool) path: page/code
#: C/checkbutton.c.page:25
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"/* signal handler for \"toggled\" signal of the CheckButton */\n"
"static void\n"
"toggled_cb (GtkToggleButton *toggle_button,\n"
"            gpointer         user_data)\n"
"{\n"
"  GtkWindow *window = user_data;\n"
"\n"
"  if (gtk_toggle_button_get_active (toggle_button))\n"
"      gtk_window_set_title (window, \"CheckButton Example\");\n"
"  else\n"
"      gtk_window_set_title (window, \"\");\n"
"}\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *checkbutton;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"CheckButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 100);\n"
"\n"
"  checkbutton = gtk_check_button_new_with_label (\"Show Title\");\n"
"  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (checkbutton), TRUE);\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (checkbutton), \"toggled\", G_CALLBACK (toggled_cb), window);\n"
"  gtk_container_add (GTK_CONTAINER (window), checkbutton);\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.example.checkbutton\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"/* signal handler for \"toggled\" signal of the CheckButton */\n"
"static void\n"
"toggled_cb (GtkToggleButton *toggle_button,\n"
"            gpointer         user_data)\n"
"{\n"
"  GtkWindow *window = user_data;\n"
"\n"
"  if (gtk_toggle_button_get_active (toggle_button))\n"
"      gtk_window_set_title (window, \"CheckButton Example\");\n"
"  else\n"
"      gtk_window_set_title (window, \"\");\n"
"}\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *checkbutton;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"CheckButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 100);\n"
"\n"
"  checkbutton = gtk_check_button_new_with_label (\"Show Title\");\n"
"  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (checkbutton), TRUE);\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (checkbutton), \"toggled\", G_CALLBACK (toggled_cb), window);\n"
"  gtk_container_add (GTK_CONTAINER (window), checkbutton);\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.example.checkbutton\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/checkbutton.c.page:30
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/3.2/GtkCheckButton.html"
"\">GtkCheckButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/3.2/GtkCheckButton.html"
"\">GtkCheckButton</link>"

#. (itstool) path: info/title
#: C/checkbutton.js.page:8
msgctxt "text"
msgid "CheckButton (JavaScript)"
msgstr "CheckButton(JavaScript)"

#. (itstool) path: info/desc
#: C/checkbutton.js.page:18
msgid "A box which can be checked or unchecked"
msgstr "표시를 하거나 지울 수 있는 상자입니다"

#. (itstool) path: page/p
#: C/checkbutton.js.page:23
msgid ""
"This application has a CheckButton. Whether the box is checked dictates "
"whether the window's title bar shows anything."
msgstr ""
"이 프로그램에는 CheckButton이 있습니다. 이 확인 상자의 표시 여부에 따라 창 제"
"목 표시줄에 무언가를 나타냅니다."

#. (itstool) path: page/p
#: C/checkbutton.js.page:24
msgid ""
"A CheckButton sends the \"toggled\" signal when it's checked or unchecked. "
"While it's checked, the \"active\" property is true. While it's not, \"active"
"\" tests as false."
msgstr ""
"CheckButton에 표시하거나 지울 때, \"toggled\" 시그널을 보냅니다. 표시해두면 "
"\"active\" 속성 값이 true가 되고, 그렇지 않으면 false가 됩니다."

#. (itstool) path: section/title
#: C/checkbutton.js.page:28 C/comboboxtext.js.page:30 C/combobox.js.page:33
#: C/guitar-tuner.js.page:55 C/hello-world.js.page:53 C/hello-world.py.page:46
#: C/messagedialog.js.page:31 C/radiobutton.js.page:28 C/scale.js.page:28
#: C/spinbutton.js.page:31 C/statusbar.js.page:28 C/switch.js.page:35
#: C/textview.js.page:38 C/togglebutton.js.page:28
#: C/treeview_simple_liststore.js.page:37 C/weatherAppMain.js.page:41
msgid "Libraries to import"
msgstr "가져올 라이브러리"

#. (itstool) path: section/code
#: C/checkbutton.js.page:29 C/messagedialog.js.page:32 C/radiobutton.js.page:29
#: C/scale.js.page:29 C/spinbutton.js.page:32 C/statusbar.js.page:29
#: C/switch.js.page:36 C/togglebutton.js.page:29
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
msgstr ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"

#. (itstool) path: section/p
#: C/checkbutton.js.page:36 C/comboboxtext.js.page:37 C/combobox.js.page:41
#: C/messagedialog.js.page:39 C/radiobutton.js.page:36 C/scale.js.page:36
#: C/spinbutton.js.page:39 C/statusbar.js.page:36 C/switch.js.page:43
#: C/textview.js.page:45 C/togglebutton.js.page:36
#: C/treeview_simple_liststore.js.page:46
msgid ""
"These are the libraries we need to import for this application to run. "
"Remember that the line which tells GNOME that we're using Gjs always needs "
"to go at the start."
msgstr ""
"이 프로그램을 실행할 때 가져올 라이브러리입니다. 시작 부분에 항상 gjs가 필요"
"함을 알리는 줄을 작성해야 함을 기억하십시오."

#. (itstool) path: section/title
#: C/checkbutton.js.page:40 C/comboboxtext.js.page:41 C/combobox.js.page:45
#: C/messagedialog.js.page:43 C/radiobutton.js.page:40 C/scale.js.page:40
#: C/spinbutton.js.page:43 C/statusbar.js.page:40 C/switch.js.page:47
#: C/textview.js.page:49 C/togglebutton.js.page:40
#: C/treeview_simple_liststore.js.page:50
msgid "Creating the application window"
msgstr "프로그램 창 만들기"

#. (itstool) path: section/code
#: C/checkbutton.js.page:41
#, no-wrap
msgid ""
"\n"
"const CheckButtonExample = new Lang.Class({\n"
"    Name: 'CheckButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jscheckbutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const CheckButtonExample = new Lang.Class({\n"
"    Name: 'CheckButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jscheckbutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/checkbutton.js.page:67
msgid ""
"All the code for this sample goes in the CheckButtonExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.Application.html\">Gtk.Application</link> for our widgets and window to "
"go in."
msgstr ""
"이 예제의 모든 코드는 CheckButtonExample 클래스에 들어갑니다. 위 코드에서는 "
"위젯과 창이 들어가는 <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/"
"gjs/Gtk.Application.html\">Gtk.Application</link>을 만듭니다."

#. (itstool) path: section/code
#: C/checkbutton.js.page:68
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 100,\n"
"            default_width: 300,\n"
"            border_width: 10,\n"
"            title: \"CheckButton Example\"});\n"
msgstr ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 100,\n"
"            default_width: 300,\n"
"            border_width: 10,\n"
"            title: \"CheckButton Example\"});\n"

#. (itstool) path: section/p
#: C/checkbutton.js.page:81
msgid ""
"The _buildUI function is where we put all the code to create the "
"application's user interface. The first step is creating a new <link href="
"\"GtkApplicationWindow.js.page\">Gtk.ApplicationWindow</link> to put all our "
"widgets into."
msgstr ""
" _buildUI 함수는 프로그램 사용자 인터페이스를 구성하는 모든 코드를 넣는 곳입"
"니다. 우선 모든 위젯을 넣을 새 <link href=\"GtkApplicationWindow.js.page"
"\">Gtk.ApplicationWindow</link> 를 만들겠습니다."

#. (itstool) path: section/title
#: C/checkbutton.js.page:85
msgid "Creating the checkbutton"
msgstr "확인 단추 만들기"

#. (itstool) path: section/code
#: C/checkbutton.js.page:86
#, no-wrap
msgid ""
"\n"
"        // Create the check button\n"
"        this._button = new Gtk.CheckButton ({label: \"Show Title\"});\n"
"        this._window.add (this._button);\n"
"\n"
"        // Have the check button be checked by default\n"
"        this._button.set_active (true);\n"
"\n"
"        // Connect the button to a function that does something when it's toggled\n"
"        this._button.connect (\"toggled\", Lang.bind (this, this._toggledCB));\n"
msgstr ""
"\n"
"        // Create the check button\n"
"        this._button = new Gtk.CheckButton ({label: \"Show Title\"});\n"
"        this._window.add (this._button);\n"
"\n"
"        // Have the check button be checked by default\n"
"        this._button.set_active (true);\n"
"\n"
"        // Connect the button to a function that does something when it's toggled\n"
"        this._button.connect (\"toggled\", Lang.bind (this, this._toggledCB));\n"

#. (itstool) path: section/p
#: C/checkbutton.js.page:97
msgid ""
"This code creates the checkbutton itself. The label next to the checkbutton "
"is created by giving the checkbutton the \"label\" property and assigning a "
"string value to it. Since this checkbutton toggles whether the window title "
"is on or off, and the window title will be on to start with, we want the box "
"to be checked by default. Whenever the user checks or unchecks the box, we "
"call the _toggledCB function."
msgstr ""
"이 코드로 자체 확인 단추를 만듭니다. 확인 단추 옆 레이블은 확인 단추의 "
"\"label\" 속성에 문자열 값을 넣어 만듭니다. 이 확인 단추는 창 제목을 나타내거"
"나 숨긴 상태를 전환하고 프로그램을 시작할 때 창 제목이 들어온 상태여야 하기 "
"때문에, 기본적으로 확인 상자를 표시한 상태로 두려 합니다. 사용자가 상자에 표"
"시했다 지울 때마다 _toggledCB 함수를 호출하겠습니다."

#. (itstool) path: section/code
#: C/checkbutton.js.page:98 C/radiobutton.js.page:170
#, no-wrap
msgid ""
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"

#. (itstool) path: section/p
#: C/checkbutton.js.page:103
msgid ""
"This code finishes up creating the UI, by telling the window to show itself "
"and all child widgets (which is just the checkbutton in this case)."
msgstr ""
"이 코드는 창 자체와 모든 하위 위젯의 표시를 지시하여 사용자 인터페이스 구성"
"을 끝냅니다(이 경우 확인 단추만 해당)."

#. (itstool) path: section/title
#: C/checkbutton.js.page:107
msgid "Function which handles the checkbutton's toggling"
msgstr "확인 단추 상태 전환을 처리하는 함수입니다"

#. (itstool) path: section/code
#: C/checkbutton.js.page:108
#, no-wrap
msgid ""
"\n"
"    _toggledCB: function () {\n"
"\n"
"        // Make the window title appear or disappear when the checkbox is toggled\n"
"        if (this._button.get_active() == true)\n"
"            this._window.set_title (\"CheckButton Example\");\n"
"        else\n"
"            this._window.set_title (\"\");\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _toggledCB: function () {\n"
"\n"
"        // Make the window title appear or disappear when the checkbox is toggled\n"
"        if (this._button.get_active() == true)\n"
"            this._window.set_title (\"CheckButton Example\");\n"
"        else\n"
"            this._window.set_title (\"\");\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/checkbutton.js.page:121
msgid ""
"If the checkbutton is toggled from on to off, we want the window title to "
"disappear. If it's toggled from off to on, we want it to reappear. We can "
"tell which way it was toggled by testing to see whether it's active "
"(checked) or not afterwards. A simple if / else statement which calls the "
"checkbutton's get_active() method will work for this."
msgstr ""
"CheckButton 표시를 지운 상태로 바꿀 때 창 제목을 사라지게 하려고 합니다. 다"
"시 이걸 표시해두면 창 제목을 다시 나타나게 하려고 합니다. 단추가 활성(표시) "
"상태인지 여부를 나중에 확인하는 방식으로 처리할 수 있습니다. 이 과정에서 "
"CheckButton의 get_active() 메서드를 호출하는 간단한 if/else 구문을 사용하겠습"
"니다."

#. (itstool) path: section/code
#: C/checkbutton.js.page:122
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new CheckButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Run the application\n"
"let app = new CheckButtonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/checkbutton.js.page:127
msgid ""
"Finally, we create a new instance of the finished CheckButtonExample class, "
"and set the application running."
msgstr ""
"마지막으로 완성본 CheckButtonExample 클래스의 새 인스턴스를 만들고 프로그램 "
"실행을 설정하겠습니다."

#. (itstool) path: section/code
#: C/checkbutton.js.page:132
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const CheckButtonExample = new Lang.Class({\n"
"    Name: 'CheckButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jscheckbutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 100,\n"
"            default_width: 300,\n"
"            border_width: 10,\n"
"            title: \"CheckButton Example\"});\n"
"\n"
"        // Create the check button\n"
"        this._button = new Gtk.CheckButton ({label: \"Show Title\"});\n"
"        this._window.add (this._button);\n"
"\n"
"        // Have the check button be checked by default\n"
"        this._button.set_active (true);\n"
"\n"
"        // Connect the button to a function that does something when it's toggled\n"
"        this._button.connect (\"toggled\", Lang.bind (this, this._toggledCB));\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _toggledCB: function () {\n"
"\n"
"        // Make the window title appear or disappear when the checkbox is toggled\n"
"        if (this._button.get_active() == true)\n"
"            this._window.set_title (\"CheckButton Example\");\n"
"        else\n"
"            this._window.set_title (\"\");\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new CheckButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const CheckButtonExample = new Lang.Class({\n"
"    Name: 'CheckButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jscheckbutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 100,\n"
"            default_width: 300,\n"
"            border_width: 10,\n"
"            title: \"CheckButton Example\"});\n"
"\n"
"        // Create the check button\n"
"        this._button = new Gtk.CheckButton ({label: \"Show Title\"});\n"
"        this._window.add (this._button);\n"
"\n"
"        // Have the check button be checked by default\n"
"        this._button.set_active (true);\n"
"\n"
"        // Connect the button to a function that does something when it's toggled\n"
"        this._button.connect (\"toggled\", Lang.bind (this, this._toggledCB));\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _toggledCB: function () {\n"
"\n"
"        // Make the window title appear or disappear when the checkbox is toggled\n"
"        if (this._button.get_active() == true)\n"
"            this._window.set_title (\"CheckButton Example\");\n"
"        else\n"
"            this._window.set_title (\"\");\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new CheckButtonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/title
#: C/checkbutton.js.page:136 C/comboboxtext.js.page:176 C/combobox.js.page:233
#: C/messagedialog.js.page:189 C/radiobutton.js.page:274 C/scale.js.page:208
#: C/spinbutton.js.page:199 C/statusbar.js.page:221 C/switch.js.page:264
#: C/textview.js.page:248 C/togglebutton.js.page:153
#: C/treeview_simple_liststore.js.page:272
msgid "In-depth documentation"
msgstr "자세한 문서"

#. (itstool) path: item/p
#: C/checkbutton.js.page:140
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.CheckButton."
"html\">Gtk.CheckButton</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.CheckButton."
"html\">Gtk.CheckButton</link>"

#. (itstool) path: info/title
#: C/checkbutton.py.page:8
msgctxt "text"
msgid "CheckButton (Python)"
msgstr "CheckButton (Python)"

#. (itstool) path: info/desc
#: C/checkbutton.py.page:19
msgid "A toggle button in a window"
msgstr "창의 토글 단추"

#. (itstool) path: section/code
#: C/checkbutton.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"CheckButton Example\", application=app)\n"
"        self.set_default_size(300, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a new checkbutton\n"
"        button = Gtk.CheckButton()\n"
"        #  with a label\n"
"        button.set_label(\"Show Title\")\n"
"        # connect the signal \"toggled\" emitted by the checkbutton\n"
"        # with the callback function toggled_cb\n"
"        button.connect(\"toggled\", self.toggled_cb)\n"
"        # by default, the checkbutton is active\n"
"        button.set_active(True)\n"
"\n"
"        # add the checkbutton to the window\n"
"        self.add(button)\n"
"\n"
"    # callback function\n"
"    def toggled_cb(self, button):\n"
"        # if the togglebutton is active, set the title of the window\n"
"        # as \"Checkbutton Example\"\n"
"        if button.get_active():\n"
"            self.set_title(\"CheckButton Example\")\n"
"        # else, set it as \"\" (empty string)\n"
"        else:\n"
"            self.set_title(\"\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"CheckButton Example\", application=app)\n"
"        self.set_default_size(300, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a new checkbutton\n"
"        button = Gtk.CheckButton()\n"
"        #  with a label\n"
"        button.set_label(\"Show Title\")\n"
"        # connect the signal \"toggled\" emitted by the checkbutton\n"
"        # with the callback function toggled_cb\n"
"        button.connect(\"toggled\", self.toggled_cb)\n"
"        # by default, the checkbutton is active\n"
"        button.set_active(True)\n"
"\n"
"        # add the checkbutton to the window\n"
"        self.add(button)\n"
"\n"
"    # callback function\n"
"    def toggled_cb(self, button):\n"
"        # if the togglebutton is active, set the title of the window\n"
"        # as \"Checkbutton Example\"\n"
"        if button.get_active():\n"
"            self.set_title(\"CheckButton Example\")\n"
"        # else, set it as \"\" (empty string)\n"
"        else:\n"
"            self.set_title(\"\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/checkbutton.py.page:36
msgid "Useful methods for a CheckButton widget"
msgstr "CheckButton 위젯의 쓸만한 메서드"

#. (itstool) path: section/p
#: C/checkbutton.py.page:37
msgid ""
"In line 17 the <code>\"toggled\"</code> signal is connected to the callback "
"function <code>toggled_cb()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"17번째 줄에서, <code><var>widget</var>.connect(<var>signal</var>, "
"<var>callback function</var>)</code> 코드로 <code>\"toggled\"</code> 시그널"
"을 <code>toggled_cb()</code> 콜백 함수에 연결했습니다. 더 자세한 설명은 "
"<link xref=\"signals-callbacks.py\"/>를 참조하십시오."

#. (itstool) path: item/p
#: C/checkbutton.py.page:47 C/togglebutton.py.page:44
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkToggleButton.html"
"\">GtkToggleButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkToggleButton.html"
"\">GtkToggleButton</link>"

#. (itstool) path: item/p
#: C/checkbutton.py.page:48
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCheckButton.html"
"\">GtkCheckButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCheckButton.html"
"\">GtkCheckButton</link>"

#. (itstool) path: info/title
#: C/checkbutton.vala.page:8
msgctxt "text"
msgid "CheckButton (Vala)"
msgstr "CheckButton(Vala)"

#. (itstool) path: info/desc
#: C/checkbutton.vala.page:18
msgid "Create widgets with a discrete toggle button"
msgstr "개별 토글 단추로 위젯을 만듭니다"

#. (itstool) path: page/code
#: C/checkbutton.vala.page:25
#, no-wrap
msgid ""
"/* A window in the application */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* The constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"CheckButton Example\");\n"
"\n"
"\t\tthis.set_default_size (300, 100);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tvar checkbutton = new Gtk.CheckButton.with_label (\"Show Title\");\n"
"\n"
"\t\t/* Connect the checkbutton to the\n"
"\t\t * callback function (aka. signal handler).\n"
"\t\t */\n"
"\t\tcheckbutton.toggled.connect (this.toggled_cb);\n"
"\n"
"\t\t/* Add the button to the this window */\n"
"\t\tthis.add (checkbutton);\n"
"\n"
"\t\tcheckbutton.set_active (true);\n"
"\t\tcheckbutton.show ();\n"
"\t}\n"
"\n"
"\t/* The signal handler for the 'toggled' signal of the checkbutton. */\n"
"\tvoid toggled_cb (Gtk.ToggleButton checkbutton) {\n"
"\t\tif (checkbutton.get_active())\n"
"\t\t\tthis.set_title (\"CheckButton Example\");\n"
"\t\telse\n"
"\t\t\tthis.set_title (\"\");\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication : Gtk.Application {\n"
"\n"
"\t/* The constructor */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.checkbutton\");\n"
"\t}\n"
"\n"
"\t/* Override the activate signal of GLib.Application */\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"}\n"
"\n"
"/* main creates and runs the application */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* A window in the application */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* The constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"CheckButton Example\");\n"
"\n"
"\t\tthis.set_default_size (300, 100);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tvar checkbutton = new Gtk.CheckButton.with_label (\"Show Title\");\n"
"\n"
"\t\t/* Connect the checkbutton to the\n"
"\t\t * callback function (aka. signal handler).\n"
"\t\t */\n"
"\t\tcheckbutton.toggled.connect (this.toggled_cb);\n"
"\n"
"\t\t/* Add the button to the this window */\n"
"\t\tthis.add (checkbutton);\n"
"\n"
"\t\tcheckbutton.set_active (true);\n"
"\t\tcheckbutton.show ();\n"
"\t}\n"
"\n"
"\t/* The signal handler for the 'toggled' signal of the checkbutton. */\n"
"\tvoid toggled_cb (Gtk.ToggleButton checkbutton) {\n"
"\t\tif (checkbutton.get_active())\n"
"\t\t\tthis.set_title (\"CheckButton Example\");\n"
"\t\telse\n"
"\t\t\tthis.set_title (\"\");\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication : Gtk.Application {\n"
"\n"
"\t/* The constructor */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.checkbutton\");\n"
"\t}\n"
"\n"
"\t/* Override the activate signal of GLib.Application */\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"}\n"
"\n"
"/* main creates and runs the application */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/checkbutton.vala.page:30
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CheckButton.html\">Gtk."
"CheckButton</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CheckButton.html\">Gtk."
"CheckButton</link>"

#. (itstool) path: info/title
#: C/colorbutton.js.page:8
msgctxt "text"
msgid "ColorButton (JavaScript)"
msgstr "ColorButton(JavaScript)"

#. (itstool) path: info/desc
#: C/colorbutton.js.page:18 C/colorbutton.py.page:19 C/colorbutton.vala.page:20
msgid "A button to launch a color selection dialog"
msgstr "색상 선택 상자를 실행하는 단추입니다"

#. (itstool) path: page/title
#: C/colorbutton.js.page:21 C/colorbutton.py.page:22 C/colorbutton.vala.page:23
msgid "ColorButton"
msgstr "ColorButton"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/colorbutton.js.page:22 C/colorbutton.py.page:23 C/colorbutton.vala.page:24
msgctxt "_"
msgid ""
"external ref='media/colorbutton.png' md5='904539d26fe367bf99f9a0961cfc9a03'"
msgstr ""

#. (itstool) path: page/p
#: C/colorbutton.js.page:23 C/colorbutton.py.page:24
msgid ""
"This ColorButton launches a color selection dialog and prints in the "
"terminal the RGB values of the color selected."
msgstr ""
"ColorButton은 색상 선택 대화 상자를 실행하고 선택한 색의 RGB 값을 터미널에 나"
"타냅니다."

#. (itstool) path: section/code
#: C/colorbutton.js.page:29
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gdk = imports.gi.Gdk;\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ColorbuttonExample = new Lang.Class ({\n"
"    Name: 'Colorbutton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({ application_id: 'org.example.jscolorbutton' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this.window = new Gtk.ApplicationWindow ({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"ColorButton\",\n"
"                                                   default_width: 150,\n"
"                                                   default_height: 50,\n"
"                                                   border_width: 10 });\n"
"\n"
"        this.button = new Gtk.ColorButton();\n"
"        this.color = new Gdk.RGBA();\n"
"        this.color.red = 0.0;\n"
"        this.color.green = 0.0;\n"
"        this.color.blue = 1.0;\n"
"        this.color.alpha = 0.5;\n"
"        this.button.set_rgba(this.color);\n"
"        this.button.connect(\"color-set\", Lang.bind(this, this.onColorChosen));\n"
"        this.label = new Gtk.Label();\n"
"        this.label.set_text(\"Click to choose a color\");\n"
"\n"
"        let grid = new Gtk.Grid();\n"
"        grid.attach(this.button, 0, 0, 2, 1);\n"
"        grid.attach(this.label, 0, 1, 2, 1);\n"
"        this.window.add(grid);\n"
"        this.window.show_all();\n"
"    },\n"
"\n"
"    onColorChosen: function() {\n"
"    let colorName = this.color.to_string();\n"
"    this.label.set_text(\"You chose the color \" + colorName);\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ColorbuttonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gdk = imports.gi.Gdk;\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ColorbuttonExample = new Lang.Class ({\n"
"    Name: 'Colorbutton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({ application_id: 'org.example.jscolorbutton' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this.window = new Gtk.ApplicationWindow ({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"ColorButton\",\n"
"                                                   default_width: 150,\n"
"                                                   default_height: 50,\n"
"                                                   border_width: 10 });\n"
"\n"
"        this.button = new Gtk.ColorButton();\n"
"        this.color = new Gdk.RGBA();\n"
"        this.color.red = 0.0;\n"
"        this.color.green = 0.0;\n"
"        this.color.blue = 1.0;\n"
"        this.color.alpha = 0.5;\n"
"        this.button.set_rgba(this.color);\n"
"        this.button.connect(\"color-set\", Lang.bind(this, this.onColorChosen));\n"
"        this.label = new Gtk.Label();\n"
"        this.label.set_text(\"Click to choose a color\");\n"
"\n"
"        let grid = new Gtk.Grid();\n"
"        grid.attach(this.button, 0, 0, 2, 1);\n"
"        grid.attach(this.label, 0, 1, 2, 1);\n"
"        this.window.add(grid);\n"
"        this.window.show_all();\n"
"    },\n"
"\n"
"    onColorChosen: function() {\n"
"    let colorName = this.color.to_string();\n"
"    this.label.set_text(\"You chose the color \" + colorName);\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ColorbuttonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/colorbutton.js.page:36
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.ColorButton."
"html\">GtkColorButton</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.ColorButton."
"html\">GtkColorButton</link>"

#. (itstool) path: item/p
#: C/colorbutton.js.page:37 C/colorbutton.py.page:45
msgid ""
"<link href=\"http://developer.gnome.org/gdk3/stable/gdk3-RGBA-Colors.html"
"\">RGBA Colors</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gdk3/stable/gdk3-RGBA-Colors.html"
"\">RGBA Colors</link>"

#. (itstool) path: info/title
#: C/colorbutton.py.page:8
msgctxt "text"
msgid "ColorButton (Python)"
msgstr "ColorButton(Python)"

#. (itstool) path: section/code
#: C/colorbutton.py.page:30
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"ColorButton\", application=app)\n"
"        self.set_default_size(150, 50)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a colorbutton (which opens a dialogue window in\n"
"        # which we choose a color)\n"
"        self.button = Gtk.ColorButton()\n"
"        # with a default color (blue, in this instance)\n"
"        color = Gdk.RGBA()\n"
"        color.red = 0.0\n"
"        color.green = 0.0\n"
"        color.blue = 1.0\n"
"        color.alpha = 0.5\n"
"        self.button.set_rgba(color)\n"
"\n"
"        # choosing a color in the dialogue window emits a signal\n"
"        self.button.connect(\"color-set\", self.on_color_chosen)\n"
"\n"
"        # a label\n"
"        label = Gtk.Label()\n"
"        label.set_text(\"Click to choose a color\")\n"
"\n"
"        # a grid to attach button and label\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(self.button, 0, 0, 2, 1)\n"
"        grid.attach(label, 0, 1, 2, 1)\n"
"        self.add(grid)\n"
"\n"
"    # if a new color is chosen, we print it as rgb(r,g,b) in the terminal\n"
"    def on_color_chosen(self, user_data):\n"
"        print(\"You chose the color: \" + self.button.get_rgba().to_string())\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"ColorButton\", application=app)\n"
"        self.set_default_size(150, 50)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a colorbutton (which opens a dialogue window in\n"
"        # which we choose a color)\n"
"        self.button = Gtk.ColorButton()\n"
"        # with a default color (blue, in this instance)\n"
"        color = Gdk.RGBA()\n"
"        color.red = 0.0\n"
"        color.green = 0.0\n"
"        color.blue = 1.0\n"
"        color.alpha = 0.5\n"
"        self.button.set_rgba(color)\n"
"\n"
"        # choosing a color in the dialogue window emits a signal\n"
"        self.button.connect(\"color-set\", self.on_color_chosen)\n"
"\n"
"        # a label\n"
"        label = Gtk.Label()\n"
"        label.set_text(\"Click to choose a color\")\n"
"\n"
"        # a grid to attach button and label\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(self.button, 0, 0, 2, 1)\n"
"        grid.attach(label, 0, 1, 2, 1)\n"
"        self.add(grid)\n"
"\n"
"    # if a new color is chosen, we print it as rgb(r,g,b) in the terminal\n"
"    def on_color_chosen(self, user_data):\n"
"        print(\"You chose the color: \" + self.button.get_rgba().to_string())\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/colorbutton.py.page:34
msgid "Useful methods for a ColorButton widget"
msgstr "ColorButton 위젯에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/colorbutton.py.page:35
msgid ""
"<code>set_color(color)</code>, where the <code>color</code> is defined as in "
"the example, sets the color of the ColorButton, which by default is black. "
"<code>get_color()</code> returns the color."
msgstr ""
"예제에서 <code>color</code>를 지정하는 <code>set_color(color)</code> 함수는 "
"ColorButton의 색상을 설정하며, 기본값은 검정색입니다. <code>get_color()</"
"code> 함수에서 색상 값을 반환합니다."

#. (itstool) path: section/p
#: C/colorbutton.py.page:36
msgid ""
"In line 23 the <code>\"color-set\"</code> signal is connected to the "
"callback function <code>on_color_chosen()</code> using <code><var>widget</"
"var>.connect(<var>signal</var>, <var>callback function</var>)</code>. See "
"<link xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"23번째 줄에서, <code><var>widget</var>.connect(<var>signal</var>, "
"<var>callback function</var>)</code> 코드로 <code>\"color-set\"</code> 시그널"
"을 <code>on_color_chosen()</code> 콜백 함수에 연결했습니다. 더 자세한 설명은 "
"<link xref=\"signals-callbacks.py\"/>를 참조하십시오."

#. (itstool) path: item/p
#: C/colorbutton.py.page:43
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkColorButton.html"
"\">GtkColorButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkColorButton.html"
"\">GtkColorButton</link>"

#. (itstool) path: item/p
#: C/colorbutton.py.page:44
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkColorChooser.html"
"\">GtkColorChooser</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkColorChooser.html"
"\">GtkColorChooser</link>"

#. (itstool) path: info/title
#: C/colorbutton.vala.page:8
msgctxt "text"
msgid "ColorButton (Vala)"
msgstr "ColorButton(Vala)"

#. (itstool) path: page/p
#: C/colorbutton.vala.page:25
msgid "RGB values of the selected color are shown in the label."
msgstr "레이블에 선택한 색의 RGB 값을 나타냅니다."

#. (itstool) path: page/code
#: C/colorbutton.vala.page:27
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\tGtk.Label label;\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\t/* Create the window of this application and show it. */\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"ColorButton\";\n"
"\t\twindow.set_default_size (150, 50);\n"
"\t\twindow.set_border_width (10);\n"
"\n"
"\t\t/* Create a new ColorButton with default blue. */\n"
"\t\tvar blue = Gdk.RGBA ();\n"
"\t\tblue.parse (\"blue\");\n"
"\t\tvar colorbutton = new Gtk.ColorButton.with_rgba (blue);\n"
"\n"
"\t\tlabel = new Gtk.Label (\"Click to choose a color\");\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.attach (colorbutton, 0, 0, 1, 1);\n"
"\t\tgrid.attach_next_to (label, colorbutton, Gtk.PositionType.BOTTOM, 1, 1);\n"
"\n"
"\t\tcolorbutton.color_set.connect (this.on_color_set);\n"
"\n"
"\t\twindow.add (grid);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"\n"
"\tvoid on_color_set (Gtk.ColorButton button) {\n"
"\t\tvar color =  button.get_rgba ();\n"
"\t\tlabel.set_text (\"RGBA: \" + color.to_string());\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\tGtk.Label label;\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\t/* Create the window of this application and show it. */\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"ColorButton\";\n"
"\t\twindow.set_default_size (150, 50);\n"
"\t\twindow.set_border_width (10);\n"
"\n"
"\t\t/* Create a new ColorButton with default blue. */\n"
"\t\tvar blue = Gdk.RGBA ();\n"
"\t\tblue.parse (\"blue\");\n"
"\t\tvar colorbutton = new Gtk.ColorButton.with_rgba (blue);\n"
"\n"
"\t\tlabel = new Gtk.Label (\"Click to choose a color\");\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.attach (colorbutton, 0, 0, 1, 1);\n"
"\t\tgrid.attach_next_to (label, colorbutton, Gtk.PositionType.BOTTOM, 1, 1);\n"
"\n"
"\t\tcolorbutton.color_set.connect (this.on_color_set);\n"
"\n"
"\t\twindow.add (grid);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"\n"
"\tvoid on_color_set (Gtk.ColorButton button) {\n"
"\t\tvar color =  button.get_rgba ();\n"
"\t\tlabel.set_text (\"RGBA: \" + color.to_string());\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/colorbutton.vala.page:32
msgid ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.ColorButton.html\">Gtk."
"ColorButton</link>"
msgstr ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.ColorButton.html\">Gtk."
"ColorButton</link>"

#. (itstool) path: item/p
#: C/colorbutton.vala.page:33
msgid "<link href=\"http://valadoc.org/gdk-3.0/Gdk.RGBA.html\">Gdk.RGBA</link>"
msgstr ""
"<link href=\"http://valadoc.org/gdk-3.0/Gdk.RGBA.html\">Gdk.RGBA</link>"

#. (itstool) path: info/title
#: C/comboboxtext.js.page:8
msgctxt "text"
msgid "ComboBoxText (JavaScript)"
msgstr "ComboBoxText(JavaScript)"

#. (itstool) path: info/desc
#: C/comboboxtext.js.page:20
msgid "A text-only drop-down menu"
msgstr "텍스트 전용 드롭 다운 메뉴"

#. (itstool) path: page/title
#: C/comboboxtext.js.page:23
msgid "ComboBoxText"
msgstr "ComboBoxText"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/comboboxtext.js.page:24 C/combobox.c.page:26 C/combobox.py.page:24
#: C/combobox.vala.page:22
msgctxt "_"
msgid ""
"external ref='media/combobox.png' md5='ab9e91bc1a58fe866cb00dd52159251d'"
msgstr ""

#. (itstool) path: page/p
#: C/comboboxtext.js.page:25
msgid ""
"A ComboBox is a drop-down menu. The difference between a <link xref="
"\"combobox.js\">ComboBox</link> and a ComboBoxText is that a ComboBoxText "
"just has basic text options, while a full ComboBox uses a ListStore or "
"TreeStore (which are basically spreadsheets) to show things like branching "
"options, or pictures to go alongside each choice."
msgstr ""
"콤보박스는 드롭 다운 메뉴입니다. <link xref=\"combobox.js\">ComboBox</link>"
"와 ComboBoxText의 차이점이라면 ComboBoxText는 텍스트만 있는 위젯이고, 완전한 "
"ComboBox는 분기 옵션이나, 각 선택 항목의 그림을 보여주는 ListStore나 "
"TreeStore(기본적으로 스프레드 시트 같음)를 사용하는 위젯입니다."

#. (itstool) path: note/p
#: C/comboboxtext.js.page:26
msgid ""
"Unless you need the added features of a full ComboBox, or are comfortable "
"working with ListStores and TreeStores, you may find it a lot simpler to use "
"a ComboBoxText whenever possible."
msgstr ""
"완전한 기능을 갖춘 ComboBox가 필요하거나, ListStore와 TreeStore를 사용하지 않"
"은 이상 가능하다면 ComboBoxText를 사용하는게 훨씬 간단합니다."

#. (itstool) path: section/code
#: C/comboboxtext.js.page:42
#, no-wrap
msgid ""
"\n"
"const ComboBoxTextExample = new Lang.Class ({\n"
"    Name: 'ComboBoxText Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jscomboboxtext'});\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const ComboBoxTextExample = new Lang.Class ({\n"
"    Name: 'ComboBoxText Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jscomboboxtext'});\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/comboboxtext.js.page:66 C/messagedialog.js.page:70
msgid ""
"All the code for this sample goes in the MessageDialogExample class. The "
"above code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/"
"gjs/Gtk.Application.html\">Gtk.Application</link> for our widgets and window "
"to go in."
msgstr ""
"이 예제의 모든 코드는 MessageDialogExample 클래스에 넣었습니다. 위 코드에서"
"는 위젯과 창을 담아둘 <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/"
"gjs/Gtk.Application.html\">Gtk.Application</link>을 만들었습니다."

#. (itstool) path: section/code
#: C/comboboxtext.js.page:67 C/combobox.js.page:71
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_width: 200,\n"
"            border_width: 10 });\n"
msgstr ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_width: 200,\n"
"            border_width: 10 });\n"

#. (itstool) path: section/p
#: C/comboboxtext.js.page:79 C/combobox.js.page:83 C/messagedialog.js.page:84
#: C/radiobutton.js.page:79 C/scale.js.page:78 C/spinbutton.js.page:81
#: C/switch.js.page:88 C/textview.js.page:88 C/togglebutton.js.page:81
#: C/treeview_simple_liststore.js.page:90
msgid ""
"The _buildUI function is where we put all the code to create the "
"application's user interface. The first step is creating a new <link xref="
"\"GtkApplicationWindow.js\">Gtk.ApplicationWindow</link> to put all our "
"widgets into."
msgstr ""
"_buildUI 함수는 프로그램 사용자 인터페이스를 만드는 모든 코드를 넣는 곳입니"
"다. 첫 단계에서는 모든 위젯을 우겨넣을 새 <link xref=\"GtkApplicationWindow."
"js\">Gtk.ApplicationWindow</link>를 만듭니다."

#. (itstool) path: section/title
#: C/comboboxtext.js.page:83
msgid "Creating the ComboBoxText"
msgstr "ComboBoxText 만들기"

#. (itstool) path: section/code
#: C/comboboxtext.js.page:84
#, no-wrap
msgid ""
"\n"
"        // Create the combobox\n"
"        this._comboBoxText = new Gtk.ComboBoxText();\n"
"\n"
"        // Populate the combobox\n"
"        let distros = [\"Select distribution\", \"Fedora\", \"Mint\", \"Suse\"];\n"
"        for (let i = 0; i &lt; distros.length; i++)\n"
"            this._comboBoxText.append_text (distros[i]);\n"
"        this._comboBoxText.set_active (0);\n"
"\n"
"        // Connect the combobox's 'changed' signal to our callback function\n"
"        this._comboBoxText.connect ('changed', Lang.bind (this, this._onComboChanged));\n"
msgstr ""
"\n"
"        // Create the combobox\n"
"        this._comboBoxText = new Gtk.ComboBoxText();\n"
"\n"
"        // Populate the combobox\n"
"        let distros = [\"Select distribution\", \"Fedora\", \"Mint\", \"Suse\"];\n"
"        for (let i = 0; i &lt; distros.length; i++)\n"
"            this._comboBoxText.append_text (distros[i]);\n"
"        this._comboBoxText.set_active (0);\n"
"\n"
"        // Connect the combobox's 'changed' signal to our callback function\n"
"        this._comboBoxText.connect ('changed', Lang.bind (this, this._onComboChanged));\n"

#. (itstool) path: section/p
#: C/comboboxtext.js.page:97
msgid ""
"After we create the ComboBoxText, we use its <file>append_text</file> method "
"to add text strings to it. Like the entries in an array, they each have a "
"number for an ID, starting with 0. To make things simpler, you can actually "
"create an array for your ComboBoxText entries, then use a for loop to append "
"them in order, like we did here."
msgstr ""
"ComboBoxText를 만들고 나서 <file>append_text</file> 메서드를 사용하여 텍스트 "
"스트링을 0번부터 시작하는 숫자 ID를 가진 배열에 추가하겠습니다. 단순하게 갖"
"출 목적으로 ComboBoxText 항목을 실제로 배열로 만든 다음에 순서대로 넣고, 넣"
"은 방식대로 for 반복문으로 붙여넣겠습니다."

#. (itstool) path: section/p
#: C/comboboxtext.js.page:98
msgid ""
"After we populate the ComboBoxText, we set its first entry to be active, so "
"that we'll see the \"Select distribution\" line before we click on it. Then "
"we connect its <file>changed</file> signal to the _onComboChanged function, "
"so that it's called whenever you make a new selection from the drop-down "
"menu."
msgstr ""
"ComboBoxText를 갖추고 나서 첫번째 항목을 표시하여 ComboBoxText를 누르기 전에 "
"\"Select distribution\" 줄이 나타나게 하겠습니다. 그 다음 <file>changed</"
"file> 시그널을 _onComboChanged  함수에 연결하여 드롭 다운 메뉴에서 새 항목을 "
"선택할 때마다 호출하도록 하겠습니다."

#. (itstool) path: note/p
#: C/comboboxtext.js.page:99
msgid ""
"If you'd like to add an entry to a ComboBoxText, you can use the "
"<file>insert_text</file> method. And if you'd rather use a text string as an "
"ID for each entry than rely on numbers alone, you can use the <file>append</"
"file> and <file>insert</file> methods. See the links at the bottom of this "
"tutorial for the details of how to use them."
msgstr ""
"ComboBoxText에 항목을 추가하려면  <file>insert_text</file> 메서드를 사용할 "
"수 있습니다. 각 항목의 ID를 숫자만이 아닌 텍스트 문자열을 사용하려한다면 "
"<file>append</file> 메서드와 <file>insert</file> 메서드를 사용할 수 있습니"
"다. 활용 방안에 대한 자세한 지침서 내용은 하단 링크를 살펴보시지요."

#. (itstool) path: section/code
#: C/comboboxtext.js.page:101
#, no-wrap
msgid ""
"\n"
"        // Add the combobox to the window\n"
"        this._window.add (this._comboBoxText);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""
"\n"
"        // Add the combobox to the window\n"
"        this._window.add (this._comboBoxText);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"

#. (itstool) path: section/p
#: C/comboboxtext.js.page:109
msgid ""
"Finally, we add the ComboBoxText to the window, and tell the window to show "
"itself and the widget inside it."
msgstr ""
"마지막으로 ComboBoxText를 창에 추가하고, 창 자신과 위젯을 나타내게 하겠습니"
"다."

#. (itstool) path: section/title
#: C/comboboxtext.js.page:113 C/combobox.js.page:170 C/radiobutton.js.page:181
msgid "Function which handles your selection"
msgstr "선택을 처리하는 함수"

#. (itstool) path: section/code
#: C/comboboxtext.js.page:114
#, no-wrap
msgid ""
"\n"
"    _onComboChanged: function () {\n"
"\n"
"        // The responses we'll use for our messagedialog\n"
"        let responses = [\"\",\n"
"            \"Fedora is a community distro sponsored by Red Hat.\",\n"
"            \"Mint is a popular distro based on Ubuntu.\",\n"
"            \"SUSE is a name shared by two separate distros.\"];\n"
msgstr ""
"\n"
"    _onComboChanged: function () {\n"
"\n"
"        // The responses we'll use for our messagedialog\n"
"        let responses = [\"\",\n"
"            \"Fedora is a community distro sponsored by Red Hat.\",\n"
"            \"Mint is a popular distro based on Ubuntu.\",\n"
"            \"SUSE is a name shared by two separate distros.\"];\n"

#. (itstool) path: section/p
#: C/comboboxtext.js.page:123
msgid ""
"We're going to create a pop-up <link xref=\"messagedialog.js"
"\">MessageDialog</link>, which shows you a message based on which distro you "
"select. First, we create the array of responses to use. Since the first "
"string in our ComboBoxText is just the \"Select distribution\" message, we "
"make the first string in our array blank."
msgstr ""
"배포판 선택 기반으로 메시지를 보여주는 <link xref=\"messagedialog.js"
"\">MessageDialog</link> 팝업을 만들려고 합니다. 우선, 사용할 응답 배열을 만들"
"겠습니다. ComboBoxText의 첫 문자열은 그냥 \"Select distribution\" 메시지니"
"까, 배열의 첫번째 문자열은 비워두겠습니다."

#. (itstool) path: section/code
#: C/comboboxtext.js.page:125
#, no-wrap
msgid ""
"\n"
"        // Which combobox item is active?\n"
"        let activeItem = this._comboBoxText.get_active();\n"
"\n"
"        // No messagedialog if you chose \"Select distribution\"\n"
"        if (activeItem != 0) {\n"
"            this._popUp = new Gtk.MessageDialog ({\n"
"                transient_for: this._window,\n"
"                modal: true,\n"
"                buttons: Gtk.ButtonsType.OK,\n"
"                message_type: Gtk.MessageType.INFO,\n"
"                text: responses[activeItem]});\n"
"\n"
"            // Connect the OK button to a handler function\n"
"            this._popUp.connect ('response', Lang.bind (this, this._onDialogResponse));\n"
"\n"
"            // Show the messagedialog\n"
"            this._popUp.show();\n"
"        }\n"
"\n"
"    },\n"
msgstr ""
"\n"
"        // Which combobox item is active?\n"
"        let activeItem = this._comboBoxText.get_active();\n"
"\n"
"        // No messagedialog if you chose \"Select distribution\"\n"
"        if (activeItem != 0) {\n"
"            this._popUp = new Gtk.MessageDialog ({\n"
"                transient_for: this._window,\n"
"                modal: true,\n"
"                buttons: Gtk.ButtonsType.OK,\n"
"                message_type: Gtk.MessageType.INFO,\n"
"                text: responses[activeItem]});\n"
"\n"
"            // Connect the OK button to a handler function\n"
"            this._popUp.connect ('response', Lang.bind (this, this._onDialogResponse));\n"
"\n"
"            // Show the messagedialog\n"
"            this._popUp.show();\n"
"        }\n"
"\n"
"    },\n"

#. (itstool) path: section/p
#: C/comboboxtext.js.page:147
msgid ""
"Before showing a MessageDialog, we first test to make sure you didn't choose "
"the \"Select distribution\" message. After that, we set its text to be the "
"entry in the array that corresponds to the active entry in our ComboBoxText. "
"We do that using the <file>get_active</file> method, which returns the "
"number ID of your selection."
msgstr ""
"MessageDialog를 나타내기 전, \"Select distribution\" 메시지를 선택하지 않았는"
"지 우선 확인해야 합니다. 확인하고 나면 ComboBoxText의 선택 항목과 관련하여 배"
"열의 항목 텍스트를 설정합니다. 선택 항목의 숫자 ID를 반환하는 "
"<file>get_active</file> 메서드를 사용하겠습니다."

#. (itstool) path: note/p
#: C/comboboxtext.js.page:148
msgid ""
"Other methods you can use include <file>get_active_id,</file> which returns "
"the text ID assigned by <file>append,</file> and <file>get_active_text,</"
"file> which returns the full text of the string you selected."
msgstr ""
"<file>append</file>로 할당한 텍스트 ID를 반환하는 <file>get_active_id</file> "
"메서드 말고도, 선택한 항목의 완전한 텍스트를 반환하는 <file>get_active_text</"
"file> 메서드가 있습니다."

#. (itstool) path: section/p
#: C/comboboxtext.js.page:149 C/combobox.js.page:206
msgid ""
"After we create the MessageDialog, we connect its response signal to the "
"_onDialogResponse function, then tell it to show itself."
msgstr ""
"MessageDialog를 만들고 나면, _onDialogResponse 함수에 반응 시그널을 연결하고 "
"MessageDialog를 나타내게 하겠습니다."

#. (itstool) path: section/code
#: C/comboboxtext.js.page:151 C/combobox.js.page:208
#, no-wrap
msgid ""
"\n"
"    _onDialogResponse: function () {\n"
"\n"
"        this._popUp.destroy ();\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _onDialogResponse: function () {\n"
"\n"
"        this._popUp.destroy ();\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/comboboxtext.js.page:160 C/combobox.js.page:217
msgid ""
"Since the only button the MessageDialog has is an OK button, we don't need "
"to test its response_id to see which button was clicked. All we do here is "
"destroy the popup."
msgstr ""
"MessageDialog에는 확인 단추만 있기 때문에 response_id에서 어떤 단추를 눌렀는"
"지 굳이 확인할 필요가 없습니다. 그냥 띄운 창을 닫기만 하면 됩니다."

#. (itstool) path: section/code
#: C/comboboxtext.js.page:162
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new ComboBoxTextExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Run the application\n"
"let app = new ComboBoxTextExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/comboboxtext.js.page:167
msgid ""
"Finally, we create a new instance of the finished ComboBoxTextExample class, "
"and set the application running."
msgstr ""
"마지막으로, 코드 작성을 마무리한 ComboBoxTextExample 클래스의 새 인스턴스를 "
"만들고, 프로그램 실행을 구성하겠습니다."

#. (itstool) path: section/code
#: C/comboboxtext.js.page:172
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ComboBoxTextExample = new Lang.Class ({\n"
"    Name: 'ComboBoxText Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jscomboboxtext'});\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_width: 200,\n"
"            border_width: 10 });\n"
"\n"
"        // Create the combobox\n"
"        this._comboBoxText = new Gtk.ComboBoxText();\n"
"\n"
"        // Populate the combobox\n"
"        let distros = [\"Select distribution\", \"Fedora\", \"Mint\", \"Suse\"];\n"
"        for (let i = 0; i &lt; distros.length; i++)\n"
"            this._comboBoxText.append_text (distros[i]);\n"
"        this._comboBoxText.set_active (0);\n"
"\n"
"        // Connect the combobox's 'changed' signal to our callback function\n"
"        this._comboBoxText.connect ('changed', Lang.bind (this, this._onComboChanged));\n"
"\n"
"        // Add the combobox to the window\n"
"        this._window.add (this._comboBoxText);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onComboChanged: function () {\n"
"\n"
"        // The responses we'll use for our messagedialog\n"
"        let responses = [\"\",\n"
"            \"Fedora is a community distro sponsored by Red Hat.\",\n"
"            \"Mint is a popular distro based on Ubuntu.\",\n"
"            \"SUSE is a name shared by two separate distros.\"];\n"
"\n"
"        // Which combobox item is active?\n"
"        let activeItem = this._comboBoxText.get_active();\n"
"\n"
"        // No messagedialog if you chose \"Select distribution\"\n"
"        if (activeItem != 0) {\n"
"            this._popUp = new Gtk.MessageDialog ({\n"
"                transient_for: this._window,\n"
"                modal: true,\n"
"                buttons: Gtk.ButtonsType.OK,\n"
"                message_type: Gtk.MessageType.INFO,\n"
"                text: responses[activeItem]});\n"
"\n"
"            // Connect the OK button to a handler function\n"
"            this._popUp.connect ('response', Lang.bind (this, this._onDialogResponse));\n"
"\n"
"            // Show the messagedialog\n"
"            this._popUp.show();\n"
"        }\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onDialogResponse: function () {\n"
"\n"
"        this._popUp.destroy ();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ComboBoxTextExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ComboBoxTextExample = new Lang.Class ({\n"
"    Name: 'ComboBoxText Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jscomboboxtext'});\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_width: 200,\n"
"            border_width: 10 });\n"
"\n"
"        // Create the combobox\n"
"        this._comboBoxText = new Gtk.ComboBoxText();\n"
"\n"
"        // Populate the combobox\n"
"        let distros = [\"Select distribution\", \"Fedora\", \"Mint\", \"Suse\"];\n"
"        for (let i = 0; i &lt; distros.length; i++)\n"
"            this._comboBoxText.append_text (distros[i]);\n"
"        this._comboBoxText.set_active (0);\n"
"\n"
"        // Connect the combobox's 'changed' signal to our callback function\n"
"        this._comboBoxText.connect ('changed', Lang.bind (this, this._onComboChanged));\n"
"\n"
"        // Add the combobox to the window\n"
"        this._window.add (this._comboBoxText);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onComboChanged: function () {\n"
"\n"
"        // The responses we'll use for our messagedialog\n"
"        let responses = [\"\",\n"
"            \"Fedora is a community distro sponsored by Red Hat.\",\n"
"            \"Mint is a popular distro based on Ubuntu.\",\n"
"            \"SUSE is a name shared by two separate distros.\"];\n"
"\n"
"        // Which combobox item is active?\n"
"        let activeItem = this._comboBoxText.get_active();\n"
"\n"
"        // No messagedialog if you chose \"Select distribution\"\n"
"        if (activeItem != 0) {\n"
"            this._popUp = new Gtk.MessageDialog ({\n"
"                transient_for: this._window,\n"
"                modal: true,\n"
"                buttons: Gtk.ButtonsType.OK,\n"
"                message_type: Gtk.MessageType.INFO,\n"
"                text: responses[activeItem]});\n"
"\n"
"            // Connect the OK button to a handler function\n"
"            this._popUp.connect ('response', Lang.bind (this, this._onDialogResponse));\n"
"\n"
"            // Show the messagedialog\n"
"            this._popUp.show();\n"
"        }\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onDialogResponse: function () {\n"
"\n"
"        this._popUp.destroy ();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ComboBoxTextExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/comboboxtext.js.page:183
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ComboBoxText."
"html\">Gtk.ComboBoxText</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ComboBoxText."
"html\">Gtk.ComboBoxText</link>"

#. (itstool) path: item/p
#: C/comboboxtext.js.page:184 C/combobox.js.page:244 C/entry.js.page:33
#: C/messagedialog.js.page:198
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.MessageDialog."
"html\">Gtk.MessageDialog</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.MessageDialog."
"html\">Gtk.MessageDialog</link>"

#. (itstool) path: info/title
#: C/combobox.c.page:8
msgctxt "text"
msgid "ComboBox (C)"
msgstr "ComboBox(C)"

#. (itstool) path: info/desc
#: C/combobox.c.page:22 C/combobox.py.page:20 C/combobox.vala.page:18
#: C/combobox_multicolumn.py.page:19 C/combobox_multicolumn.vala.page:19
msgid "A widget used to choose from a list of items"
msgstr "항목 목록을 선택할 때 사용하는 위젯"

#. (itstool) path: page/title
#: C/combobox.c.page:25 C/combobox.js.page:25 C/combobox.vala.page:21
msgid "ComboBox"
msgstr "ComboBox"

#. (itstool) path: page/p
#: C/combobox.c.page:27 C/combobox.vala.page:23
msgid "This ComboBox prints to the terminal when you change your selection."
msgstr "이 ComboBox는 여러분이 바꿔서 선택한 내용을 터미널에 나타냅니다."

#. (itstool) path: page/code
#: C/combobox.c.page:29
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"/* This is the callback function. It is a handler function which reacts to the\n"
" * signal. In this case, if the row selected is not the first one of the\n"
" * ComboBox, we write its value in the terminal for the user.\n"
" */\n"
"static void\n"
"on_changed (GtkComboBox *widget,\n"
"            gpointer   user_data)\n"
"{\n"
"  GtkComboBox *combo_box = widget;\n"
"\n"
"  if (gtk_combo_box_get_active (combo_box) != 0) {\n"
"    gchar *distro = gtk_combo_box_text_get_active_text (GTK_COMBO_BOX_TEXT(combo_box));\n"
"    g_print (\"You chose %s\\n\", distro);\n"
"    g_free (distro);\n"
"  }\n"
"\n"
"}\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  gint i;\n"
"  GtkWidget *view;\n"
"  GtkWidget *window;\n"
"  GtkWidget *combo_box;\n"
"\n"
"  /* Create a window with a title, border width, and a default size. Setting the\n"
"   * size to -1 means to use the \"natural\" default size.\n"
"   * (the size request of the window)\n"
"   */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Welcome to GNOME\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, -1);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 10);\n"
"\n"
"\n"
"  /* Create the combo box and append your string values to it. */\n"
"  combo_box = gtk_combo_box_text_new ();\n"
"  const char *distros[] = {\"Select distribution\", \"Fedora\", \"Mint\", \"Suse\"};\n"
"\n"
" \n"
"  /* G_N_ELEMENTS is a macro which determines the number of elements in an array.*/ \n"
"  for (i = 0; i &lt; G_N_ELEMENTS (distros); i++){\n"
"  \tgtk_combo_box_text_append_text (GTK_COMBO_BOX_TEXT (combo_box), distros[i]);\n"
"  }\n"
"\n"
"  /* Choose to set the first row as the active one by default, from the beginning */\n"
"  gtk_combo_box_set_active (GTK_COMBO_BOX (combo_box), 0);\n"
"\n"
"  /* Connect the signal emitted when a row is selected to the appropriate\n"
"   * callback function.\n"
"   */\n"
"  g_signal_connect (combo_box,\n"
"                    \"changed\",\n"
"                    G_CALLBACK (on_changed),\n"
"                    NULL);\n"
"\n"
"  /* Add it to the window */\n"
"  gtk_container_add (GTK_CONTAINER (window), combo_box);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"/* This is the callback function. It is a handler function which reacts to the\n"
" * signal. In this case, if the row selected is not the first one of the\n"
" * ComboBox, we write its value in the terminal for the user.\n"
" */\n"
"static void\n"
"on_changed (GtkComboBox *widget,\n"
"            gpointer   user_data)\n"
"{\n"
"  GtkComboBox *combo_box = widget;\n"
"\n"
"  if (gtk_combo_box_get_active (combo_box) != 0) {\n"
"    gchar *distro = gtk_combo_box_text_get_active_text (GTK_COMBO_BOX_TEXT(combo_box));\n"
"    g_print (\"You chose %s\\n\", distro);\n"
"    g_free (distro);\n"
"  }\n"
"\n"
"}\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  gint i;\n"
"  GtkWidget *view;\n"
"  GtkWidget *window;\n"
"  GtkWidget *combo_box;\n"
"\n"
"  /* Create a window with a title, border width, and a default size. Setting the\n"
"   * size to -1 means to use the \"natural\" default size.\n"
"   * (the size request of the window)\n"
"   */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Welcome to GNOME\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, -1);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 10);\n"
"\n"
"\n"
"  /* Create the combo box and append your string values to it. */\n"
"  combo_box = gtk_combo_box_text_new ();\n"
"  const char *distros[] = {\"Select distribution\", \"Fedora\", \"Mint\", \"Suse\"};\n"
"\n"
" \n"
"  /* G_N_ELEMENTS is a macro which determines the number of elements in an array.*/ \n"
"  for (i = 0; i &lt; G_N_ELEMENTS (distros); i++){\n"
"  \tgtk_combo_box_text_append_text (GTK_COMBO_BOX_TEXT (combo_box), distros[i]);\n"
"  }\n"
"\n"
"  /* Choose to set the first row as the active one by default, from the beginning */\n"
"  gtk_combo_box_set_active (GTK_COMBO_BOX (combo_box), 0);\n"
"\n"
"  /* Connect the signal emitted when a row is selected to the appropriate\n"
"   * callback function.\n"
"   */\n"
"  g_signal_connect (combo_box,\n"
"                    \"changed\",\n"
"                    G_CALLBACK (on_changed),\n"
"                    NULL);\n"
"\n"
"  /* Add it to the window */\n"
"  gtk_container_add (GTK_CONTAINER (window), combo_box);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/combobox.c.page:37
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkComboBoxText.html"
"\">GtkComboBoxText</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkComboBoxText.html"
"\">GtkComboBoxText</link>"

#. (itstool) path: info/title
#: C/combobox.js.page:8
msgctxt "text"
msgid "ComboBox (JavaScript)"
msgstr "ComboBox(JavaScript)"

#. (itstool) path: info/desc
#: C/combobox.js.page:22
msgid "A customizable drop-down menu"
msgstr "개별 설정 가능한 드롭 다운 메뉴"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/combobox.js.page:26 C/combobox_multicolumn.py.page:23
#: C/combobox_multicolumn.vala.page:23
msgctxt "_"
msgid ""
"external ref='media/combobox_multicolumn.png' "
"md5='43f16648fb11ebc7d2f70825ed0f63b3'"
msgstr ""

#. (itstool) path: page/p
#: C/combobox.js.page:27
msgid ""
"A ComboBox is an extremely customizable drop-down menu. It holds the "
"equivalent of a <link xref=\"treeview_simple_liststore.js\">TreeView</link> "
"widget that appears when you click on it, complete with a ListStore "
"(basically a spreadsheet) that says what's in the rows and columns. In this "
"example, our ListStore has the name of each option in one column, and the "
"name of a stock icon in the other, which the ComboBox then turns into an "
"icon for each option."
msgstr ""
"ComboBox는 완전 지멋대로 고칠 수 있는 드롭다운 메뉴입니다. 드롭다운 메뉴를 누"
"르면 <link xref=\"treeview_simple_liststore.js\">TreeView</link> 위젯을 나타"
"내고, 행열에 무엇이 들어있는지 알려주는 ListStore(기본적인 스프레드시트) 위젯"
"으로 끝내는 것과 동일한 구조를 지닙니다. 이 예제에서 ListStore에는 한 칸에 "
"각 옵션의 이름을 넣고 스톡 아이콘 이름을 다른 곳에 넣으며, 각 콤보박스에서 "
"각 옵션의 아이콘을 나타내게 하겠습니다."

#. (itstool) path: page/p
#: C/combobox.js.page:28
msgid ""
"You select a whole horizontal row at a time, so the icons aren't treated as "
"separate options. They and the text beside them make up each option you can "
"click on."
msgstr ""
"우선 한번에 수평 줄 하나를 선택하기에 아이콘은 개별 옵션으로 취급하지 않습니"
"다. 아이콘과 텍스트 한 묶음이 여러분이 누를 수 있는 옵션 하나를 이룹니다."

#. (itstool) path: note/p
#: C/combobox.js.page:29
msgid ""
"Working with a ListStore can be time-consuming. If you just want a simple "
"text-only drop-down menu, take a look at the <link xref=\"comboboxtext.js"
"\">ComboBoxText</link>. It doesn't take as much time to set up, and is "
"easier to work with."
msgstr ""
"ListStrore를 다루는 과정은 시간이 좀 걸릴 수 있습니다. 간단하게 텍스트만 있"
"는 드롭다운 메뉴를 원하면 <link xref=\"comboboxtext.js\">ComboBoxText</link> "
"사용을 고려하십시오. 구성에 시간이 별로 오래 걸리지 않을 뿐더러 다루기도 쉽습"
"니다."

#. (itstool) path: section/code
#: C/combobox.js.page:34
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
msgstr ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"

#. (itstool) path: section/code
#: C/combobox.js.page:46
#, no-wrap
msgid ""
"\n"
"const ComboBoxExample = new Lang.Class ({\n"
"    Name: 'ComboBox Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jscombobox'});\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const ComboBoxExample = new Lang.Class ({\n"
"    Name: 'ComboBox Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jscombobox'});\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/combobox.js.page:70
msgid ""
"All the code for this sample goes in the ComboBoxExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.Application.html\">Gtk.Application</link> for our widgets and window to "
"go in."
msgstr ""
"이 예제의 모든 코드는 ComboBoxExample 클래스에 넣었습니다. 위 코드에서는 위젯"
"과 창을 담아둘 <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.Application.html\">Gtk.Application</link>을 만들었습니다."

#. (itstool) path: section/title
#: C/combobox.js.page:87 C/treeview_simple_liststore.js.page:94
msgid "Creating the ListStore"
msgstr "ListStore 만들기"

#. (itstool) path: section/code
#: C/combobox.js.page:88
#, no-wrap
msgid ""
"\n"
"        // Create the liststore to put our options in\n"
"        this._listStore = new Gtk.ListStore();\n"
"        this._listStore.set_column_types ([\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING]);\n"
msgstr ""
"\n"
"        // Create the liststore to put our options in\n"
"        this._listStore = new Gtk.ListStore();\n"
"        this._listStore.set_column_types ([\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING]);\n"

#. (itstool) path: section/p
#: C/combobox.js.page:95
msgid ""
"This ListStore works like the one used in the <link xref="
"\"treeview_simple_liststore.js\">TreeView</link> example. We're giving it "
"two columns, both strings, because one of them will contain the names of "
"<link href=\"https://developer.gnome.org/gtk3/3.4/gtk3-Stock-Items.html"
"\">stock Gtk icons</link>."
msgstr ""
"ListStore는 <link xref=\"treeview_simple_liststore.js\">TreeView</link> 예제"
"에서 사용했던 것과 비슷하게 동작합니다. ListStore에 문자열을 저장하는 두 칸"
"을 확보했는데요, 이 중 하나는 <link href=\"https://developer.gnome.org/"
"gtk3/3.4/gtk3-Stock-Items.html\">스톡 gtk 아이콘</link> 이름이 들어갑니다."

#. (itstool) path: section/p
#: C/combobox.js.page:96
msgid ""
"If we'd wanted to use our own icons that weren't already built in to GNOME, "
"we'd have needed to use the <file>gtk.gdk.Pixbuf</file> type instead. Here "
"are a few other types you can use:"
msgstr ""
"그놈에 내장하지 않은 자체 보유 아이콘을 사용한다면, 대신 <file>gtk.gdk."
"Pixbuf</file> 형식을 사용해야합니다. 여러분이 사용할 수 있는 몇가지 기타 형식"
"을 알려드리겠습니다:"

#. (itstool) path: item/p
#: C/combobox.js.page:98 C/treeview_simple_liststore.js.page:107
msgid "<file>GObject.TYPE_BOOLEAN</file> -- True or false"
msgstr "<file>GObject.TYPE_BOOLEAN</file> -- 참/거짓"

#. (itstool) path: item/p
#: C/combobox.js.page:99 C/treeview_simple_liststore.js.page:108
msgid ""
"<file>GObject.TYPE_FLOAT</file> -- A floating point number (one with a "
"decimal point)"
msgstr "<file>GObject.TYPE_FLOAT</file> -- 소수(소수점 하나 들어감)"

#. (itstool) path: item/p
#: C/combobox.js.page:100 C/treeview_simple_liststore.js.page:109
msgid "<file>GObject.TYPE_STRING</file> -- A string of letters and numbers"
msgstr "<file>GObject.TYPE_STRING</file> -- 문자, 숫자로 이루어진 문장"

#. (itstool) path: note/p
#: C/combobox.js.page:102 C/treeview_simple_liststore.js.page:113
msgid ""
"You need to put the line <file>const GObject = imports.gi.GObject;</file> at "
"the start of your application's code, like we did in this example, if you "
"want to be able to use GObject types."
msgstr ""
"GObject 형식을 사용할 수 있게 하려면, 우리가 예제에서 했던 것처럼 프로그램 코"
"드 시작 부분에 <file>const GObject = imports.gi.GObject;</file> 를 넣으세요."

#. (itstool) path: section/code
#: C/combobox.js.page:104
#, no-wrap
msgid ""
"\n"
"        // This array holds our list of options and their icons\n"
"        let options = [{ name: \"Select\" },\n"
"            { name: \"New\", icon: Gtk.STOCK_NEW },\n"
"            { name: \"Open\", icon: Gtk.STOCK_OPEN },\n"
"            { name: \"Save\", icon: Gtk.STOCK_SAVE }];\n"
"\n"
"        // Put the options in the liststore\n"
"        for (let i = 0; i &lt; options.length; i++ ) {\n"
"            let option = options[i];\n"
"            let iter = this._listStore.append();\n"
"            this._listStore.set (iter, [0], [option.name]);\n"
"            if ('icon' in option)\n"
"                this._listStore.set (iter, [1], [option.icon]);\n"
"        }\n"
msgstr ""
"\n"
"        // This array holds our list of options and their icons\n"
"        let options = [{ name: \"Select\" },\n"
"            { name: \"New\", icon: Gtk.STOCK_NEW },\n"
"            { name: \"Open\", icon: Gtk.STOCK_OPEN },\n"
"            { name: \"Save\", icon: Gtk.STOCK_SAVE }];\n"
"\n"
"        // Put the options in the liststore\n"
"        for (let i = 0; i &lt; options.length; i++ ) {\n"
"            let option = options[i];\n"
"            let iter = this._listStore.append();\n"
"            this._listStore.set (iter, [0], [option.name]);\n"
"            if ('icon' in option)\n"
"                this._listStore.set (iter, [1], [option.icon]);\n"
"        }\n"

#. (itstool) path: section/p
#: C/combobox.js.page:120
msgid ""
"Here we create an array of the text options and their corresponding icons, "
"then put them into the ListStore in much the same way we would for a <link "
"xref=\"treeview_simple_liststore.js\">TreeView's</link> ListStore. We only "
"want to put an icon in if there's actually an icon in the options array, so "
"we make sure to check for that first."
msgstr ""
"여기서 각각의 아이콘과 텍스트 옵션에 대한 배열을 만들고, <link xref="
"\"treeview_simple_liststore.js\">TreeView</link>  ListStore와 매우 동일한 방"
"식으로 ListStore에 배열을 넣겠습니다. 옵션 배열에 실제로 아이콘이 있을 경우에"
"만 아이콘을 넣을테니 우선 확인부터 해보겠습니다."

#. (itstool) path: note/p
#: C/combobox.js.page:121
msgid ""
"\"Select\" isn't really an option so much as an invitation to click on our "
"ComboBox, so it doesn't need an icon."
msgstr ""
"\"선택\"은 ComboBox에서 마우스로 누르게 하는 것인 만큼 진짜 옵션은 아니니까, "
"아이콘이 필요가 없습니다."

#. (itstool) path: section/title
#: C/combobox.js.page:125
msgid "Creating the ComboBox"
msgstr "ComboBox 만들기"

#. (itstool) path: section/code
#: C/combobox.js.page:126
#, no-wrap
msgid ""
"\n"
"        // Create the combobox\n"
"        this._comboBox = new Gtk.ComboBox({\n"
"            model: this._listStore});\n"
msgstr ""
"\n"
"        // Create the combobox\n"
"        this._comboBox = new Gtk.ComboBox({\n"
"            model: this._listStore});\n"

#. (itstool) path: section/p
#: C/combobox.js.page:131
msgid ""
"Each ComboBox has an underlying \"model\" it takes all its options from. You "
"can use a TreeStore if you want to have a ComboBox with branching options. "
"In this case, we're just using the ListStore we already created."
msgstr ""
"각 ComboBox에는 자체 옵션을 가진 기반 \"모델\"이 있습니다. ComboBox에 별개 분"
"기 옵션을 넣고 싶다면 TreeStore를 사용할 수 있죠. 지금 같은 경우는, 그냥 이"
"미 만든 ListStore를 사용하겠습니다."

#. (itstool) path: section/code
#: C/combobox.js.page:132
#, no-wrap
msgid ""
"\n"
"        // Create some cellrenderers for the items in each column\n"
"        let rendererPixbuf = new Gtk.CellRendererPixbuf();\n"
"        let rendererText = new Gtk.CellRendererText();\n"
"\n"
"        // Pack the renderers into the combobox in the order we want to see\n"
"        this._comboBox.pack_start (rendererPixbuf, false);\n"
"        this._comboBox.pack_start (rendererText, false);\n"
"\n"
"        // Set the renderers to use the information from our liststore\n"
"        this._comboBox.add_attribute (rendererText, \"text\", 0);\n"
"        this._comboBox.add_attribute (rendererPixbuf, \"stock_id\", 1);\n"
msgstr ""
"\n"
"        // Create some cellrenderers for the items in each column\n"
"        let rendererPixbuf = new Gtk.CellRendererPixbuf();\n"
"        let rendererText = new Gtk.CellRendererText();\n"
"\n"
"        // Pack the renderers into the combobox in the order we want to see\n"
"        this._comboBox.pack_start (rendererPixbuf, false);\n"
"        this._comboBox.pack_start (rendererText, false);\n"
"\n"
"        // Set the renderers to use the information from our liststore\n"
"        this._comboBox.add_attribute (rendererText, \"text\", 0);\n"
"        this._comboBox.add_attribute (rendererPixbuf, \"stock_id\", 1);\n"
"에\n"

#. (itstool) path: section/p
#: C/combobox.js.page:145
msgid ""
"This part, again, works much like creating CellRenderers and packing them "
"into the columns of a <link xref=\"treeview_simple_liststore.js\">TreeView</"
"link>. The biggest difference is that we don't need to create the ComboBox's "
"columns as separate objects. We just pack the CellRenderers into it in the "
"order we want them to show up, then tell them to pull information from the "
"ListStore (and what type of information we want them to expect)."
msgstr ""
"이 부분에서는 다시 말하지만, CellRenderer를 만들고 <link xref="
"\"treeview_simple_liststore.js\">TreeView</link>의 칸에 넣는 식으로 손이 많"
"이 가고 있죠. 큰 차이점이 있다면 ComboBox의 칸을 별개 객체로 만들 필요가 없다"
"는겁니다. 그냥 CellRenderer를 보여주고 싶은 대로 감싸넣고, ListStore에서 정보"
"를 가져오게 하는거죠(그리고 기대하던 정보 형식도요)."

#. (itstool) path: section/p
#: C/combobox.js.page:146
msgid ""
"We use a CellRendererText to show the text, and a CellRendererPixbuf to show "
"the icons. We can store the names of the icons' stock types as strings, but "
"when we display them we need a CellRenderer that's designed for pictures."
msgstr ""
"텍스트를 보여줄 때 CellRendererText를 사용하고, CellRendererPixbuf로 아이콘"
"을 보여주겠습니다. 아이콘 스톡 이름은 문자열로 입력하여 저장할 수 있지만은, "
"화면에 표시할 때는 그림을 보여주도록 설계한 CellRenderer가 필요합니다."

#. (itstool) path: note/p
#: C/combobox.js.page:147
msgid ""
"Just like with a TreeView, the \"model\" (in this case a ListStore) and the "
"\"view\" (in this case our ComboBox) are separate. Because of that, we can "
"do things like have the columns in one order in the ListStore, and then pack "
"the CellRenderers that correspond to those columns into the ComboBox in a "
"different order. We can even create a TreeView or other widget that shows "
"the information in the ListStore in a different way, without it affecting "
"our ComboBox."
msgstr ""
"TreeView처럼, \"모델\"(이 경우, ListStore)과 \"뷰\"(이 경우, ComboBox)를 따"
"로 분리합니다. ListStore에서 한가지 순서를 갖춘 열으로 뭔가를 할 수 있고, "
"ComboBox에 다른 순서로 넣은 각각의 열을  CellRenderer에 감싸두기 때문입니다. "
"ListStore에 정보를 저장해서 보여줄 때 ComboBox에 영향을 주지 않고도 TreeView"
"를 만들거나 다른 위젯을 만들 수 있습니다."

#. (itstool) path: section/code
#: C/combobox.js.page:149
#, no-wrap
msgid ""
"\n"
"        // Set the first row in the combobox to be active on startup\n"
"        this._comboBox.set_active (0);\n"
"\n"
"        // Connect the combobox's 'changed' signal to our callback function\n"
"        this._comboBox.connect ('changed', Lang.bind (this, this._onComboChanged));\n"
msgstr ""
"\n"
"        // Set the first row in the combobox to be active on startup\n"
"        this._comboBox.set_active (0);\n"
"\n"
"        // Connect the combobox's 'changed' signal to our callback function\n"
"        this._comboBox.connect ('changed', Lang.bind (this, this._onComboChanged));\n"

#. (itstool) path: section/p
#: C/combobox.js.page:156
msgid ""
"We want the \"Select\" text to be the part people see at first, that gets "
"them to click on the ComboBox. So we set it to be the active entry. We also "
"connect the ComboBox's <file>changed</file> signal to a callback function, "
"so that any time someone clicks on a new option something happens. In this "
"case, we're just going to show a popup with a little haiku."
msgstr ""
"우선 여러 사람이 \"선택\" 텍스트를 먼저 보게한 후 ComboBox를 누르게 하려고 합"
"니다. 그렇게 해서 \"선택\"을 활성 항목으로 설정했습니다. 또한 ComboBox의 "
"<file>changed</file> 시그널을 콜백 함수에 연결해서 누군가가 새 옵션을 누를 "
"때, 어떤 일이 일어나게 했습니다. 지금 같은 경우, 간단한 시구를 보여주겠습니"
"다."

#. (itstool) path: section/code
#: C/combobox.js.page:158
#, no-wrap
msgid ""
"\n"
"        // Add the combobox to the window\n"
"        this._window.add (this._comboBox);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""
"\n"
"        // Add the combobox to the window\n"
"        this._window.add (this._comboBox);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"

#. (itstool) path: section/p
#: C/combobox.js.page:166
msgid ""
"Finally, we add the ComboBox to the window, and tell the window to show "
"itself and everything inside it."
msgstr ""
"마지막으로 ComboBox를 창에 추가하고, 창에 창 자신과 창에 들어간 위젯을 보여주"
"게 했습니다."

#. (itstool) path: section/code
#: C/combobox.js.page:171
#, no-wrap
msgid ""
"\n"
"    _selected: function () {\n"
"\n"
"        // The silly pseudohaiku that we'll use for our messagedialog\n"
"        let haiku = [\"\",\n"
"            \"You ask for the new\\nwith no thought for the aged\\nlike fallen leaves trod.\",\n"
"            \"Like a simple clam\\nrevealing a lustrous pearl\\nit opens for you.\",\n"
"            \"A moment in time\\na memory on the breeze\\nthese things can't be saved.\"];\n"
msgstr ""
"\n"
"    _selected: function () {\n"
"\n"
"        // The silly pseudohaiku that we'll use for our messagedialog\n"
"        let haiku = [\"\",\n"
"            \"You ask for the new\\nwith no thought for the aged\\nlike fallen leaves trod.\",\n"
"            \"Like a simple clam\\nrevealing a lustrous pearl\\nit opens for you.\",\n"
"            \"A moment in time\\na memory on the breeze\\nthese things can't be saved.\"];\n"

#. (itstool) path: section/p
#: C/combobox.js.page:180
msgid ""
"We're going to create a pop-up <link xref=\"messagedialog.js"
"\">MessageDialog</link>, which shows you a silly haiku based on which distro "
"you select. First, we create the array of haiku to use. Since the first "
"string in our ComboBox is just the \"Select\" message, we make the first "
"string in our array blank."
msgstr ""
"선택한 배포판 이름에 따라 시구 아무거나 보여주는 <link xref=\"messagedialog."
"js\">MessageDialog</link> 팝업을 만들고 있죠. 우선, 사용할 시구의 배열을 만들"
"고. ComboBox에 처음 나타날 문자열은 \"선택\" 메시지니, 배열의 첫번째 문자열"
"은 비워두겠습니다."

#. (itstool) path: section/code
#: C/combobox.js.page:182
#, no-wrap
msgid ""
"\n"
"        // Which combobox item is active?\n"
"        let activeItem = this._comboBox.get_active();\n"
"\n"
"        // No messagedialog if you choose \"Select\"\n"
"        if (activeItem != 0) {\n"
"            this._popUp = new Gtk.MessageDialog ({\n"
"                transient_for: this._window,\n"
"                modal: true,\n"
"                buttons: Gtk.ButtonsType.OK,\n"
"                message_type: Gtk.MessageType.INFO,\n"
"                text: haiku[activeItem]});\n"
"\n"
"            // Connect the OK button to a handler function\n"
"            this._popUp.connect ('response', Lang.bind (this, this._onDialogResponse));\n"
"\n"
"            // Show the messagedialog\n"
"            this._popUp.show();\n"
"        }\n"
"\n"
"    },\n"
msgstr ""
"\n"
"        // Which combobox item is active?\n"
"        let activeItem = this._comboBox.get_active();\n"
"\n"
"        // No messagedialog if you choose \"Select\"\n"
"        if (activeItem != 0) {\n"
"            this._popUp = new Gtk.MessageDialog ({\n"
"                transient_for: this._window,\n"
"                modal: true,\n"
"                buttons: Gtk.ButtonsType.OK,\n"
"                message_type: Gtk.MessageType.INFO,\n"
"                text: haiku[activeItem]});\n"
"\n"
"            // Connect the OK button to a handler function\n"
"            this._popUp.connect ('response', Lang.bind (this, this._onDialogResponse));\n"
"\n"
"            // Show the messagedialog\n"
"            this._popUp.show();\n"
"        }\n"
"\n"
"    },\n"

#. (itstool) path: section/p
#: C/combobox.js.page:204
msgid ""
"Before showing a MessageDialog, we first test to make sure you didn't choose "
"the \"Select\" message. After that, we set its text to be the haiku in the "
"array that corresponds to the active entry in our ComboBoxText. We do that "
"using the <file>get_active</file> method, which returns the number ID of "
"your selection."
msgstr ""
"MessageDialog를 보여주기 전에요, \"선택\" 메시지를 선택하지 못하게 했는지 일"
"단 확인하겠습니다. 그 다음 ComboBoxText의 활성 항목에 따른 배열에 시구 텍스트"
"를 넣겠습니다. 선택 항목의 숫자 ID를 반환하는 <file>get_active</file> 메서드"
"를 사용하여 처리할거구요."

#. (itstool) path: note/p
#: C/combobox.js.page:205
msgid ""
"Other methods you can use include <file>get_active_id</file>, which returns "
"the text ID assigned by <file>append</file>, and <file>get_active_text</"
"file>, which returns the full text of the string you selected."
msgstr ""
"사용할 수 있는 또다른 메서드는 <file>append</file>로 할당한 텍스트 ID를 반환"
"하는 <file>get_active_id</file> 메서드하고, 선택 항목 텍스트 전체를 반환하는 "
"<file>get_active_text</file> 메서드가 있습니다."

#. (itstool) path: section/code
#: C/combobox.js.page:219
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new ComboBoxExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Run the application\n"
"let app = new ComboBoxExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/combobox.js.page:224
msgid ""
"Finally, we create a new instance of the finished ComboBoxExample class, and "
"set the application running."
msgstr ""
"끝으로, ComboBoxExample 클래스의 새 인스턴스를 만들고요, 프로그램 실행을 구성"
"하겠습니다."

#. (itstool) path: section/code
#: C/combobox.js.page:229
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ComboBoxExample = new Lang.Class ({\n"
"    Name: 'ComboBox Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jscombobox'});\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_width: 200,\n"
"            border_width: 10 });\n"
"\n"
"        // Create the liststore to put our options in\n"
"        this._listStore = new Gtk.ListStore();\n"
"        this._listStore.set_column_types ([\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING]);\n"
"\n"
"        // This array holds our list of options and their icons\n"
"        let options = [{ name: \"Select\" },\n"
"            { name: \"New\", icon: Gtk.STOCK_NEW },\n"
"            { name: \"Open\", icon: Gtk.STOCK_OPEN },\n"
"            { name: \"Save\", icon: Gtk.STOCK_SAVE }];\n"
"\n"
"        // Put the options in the liststore\n"
"        for (let i = 0; i &lt; options.length; i++ ) {\n"
"            let option = options[i];\n"
"            let iter = this._listStore.append();\n"
"            this._listStore.set (iter, [0], [option.name]);\n"
"            if ('icon' in option)\n"
"                this._listStore.set (iter, [1], [option.icon]);\n"
"        }\n"
"\n"
"        // Create the combobox\n"
"        this._comboBox = new Gtk.ComboBox({\n"
"            model: this._listStore});\n"
"\n"
"        // Create some cellrenderers for the items in each column\n"
"        let rendererPixbuf = new Gtk.CellRendererPixbuf();\n"
"        let rendererText = new Gtk.CellRendererText();\n"
"\n"
"        // Pack the renderers into the combobox in the order we want to see\n"
"        this._comboBox.pack_start (rendererPixbuf, false);\n"
"        this._comboBox.pack_start (rendererText, false);\n"
"\n"
"        // Set the renderers to use the information from our liststore\n"
"        this._comboBox.add_attribute (rendererText, \"text\", 0);\n"
"        this._comboBox.add_attribute (rendererPixbuf, \"stock_id\", 1);\n"
"\n"
"        // Set the first row in the combobox to be active on startup\n"
"        this._comboBox.set_active (0);\n"
"\n"
"        // Connect the combobox's 'changed' signal to our callback function\n"
"        this._comboBox.connect ('changed', Lang.bind (this, this._onComboChanged));\n"
"\n"
"        // Add the combobox to the window\n"
"        this._window.add (this._comboBox);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onComboChanged: function () {\n"
"\n"
"        // The silly pseudohaiku that we'll use for our messagedialog\n"
"        let haiku = [\"\",\n"
"            \"You ask for the new\\nwith no thought for the aged\\nlike fallen leaves trod.\",\n"
"            \"Like a simple clam\\nrevealing a lustrous pearl\\nit opens for you.\",\n"
"            \"A moment in time\\na memory on the breeze\\nthese things can't be saved.\"];\n"
"\n"
"        // Which combobox item is active?\n"
"        let activeItem = this._comboBox.get_active();\n"
"\n"
"        // No messagedialog if you choose \"Select\"\n"
"        if (activeItem != 0) {\n"
"            this._popUp = new Gtk.MessageDialog ({\n"
"                transient_for: this._window,\n"
"                modal: true,\n"
"                buttons: Gtk.ButtonsType.OK,\n"
"                message_type: Gtk.MessageType.INFO,\n"
"                text: haiku[activeItem]});\n"
"\n"
"            // Connect the OK button to a handler function\n"
"            this._popUp.connect ('response', Lang.bind (this, this._onDialogResponse));\n"
"\n"
"            // Show the messagedialog\n"
"            this._popUp.show();\n"
"        }\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onDialogResponse: function () {\n"
"\n"
"        this._popUp.destroy ();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ComboBoxExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ComboBoxExample = new Lang.Class ({\n"
"    Name: 'ComboBox Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jscombobox'});\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_width: 200,\n"
"            border_width: 10 });\n"
"\n"
"        // Create the liststore to put our options in\n"
"        this._listStore = new Gtk.ListStore();\n"
"        this._listStore.set_column_types ([\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING]);\n"
"\n"
"        // This array holds our list of options and their icons\n"
"        let options = [{ name: \"Select\" },\n"
"            { name: \"New\", icon: Gtk.STOCK_NEW },\n"
"            { name: \"Open\", icon: Gtk.STOCK_OPEN },\n"
"            { name: \"Save\", icon: Gtk.STOCK_SAVE }];\n"
"\n"
"        // Put the options in the liststore\n"
"        for (let i = 0; i &lt; options.length; i++ ) {\n"
"            let option = options[i];\n"
"            let iter = this._listStore.append();\n"
"            this._listStore.set (iter, [0], [option.name]);\n"
"            if ('icon' in option)\n"
"                this._listStore.set (iter, [1], [option.icon]);\n"
"        }\n"
"\n"
"        // Create the combobox\n"
"        this._comboBox = new Gtk.ComboBox({\n"
"            model: this._listStore});\n"
"\n"
"        // Create some cellrenderers for the items in each column\n"
"        let rendererPixbuf = new Gtk.CellRendererPixbuf();\n"
"        let rendererText = new Gtk.CellRendererText();\n"
"\n"
"        // Pack the renderers into the combobox in the order we want to see\n"
"        this._comboBox.pack_start (rendererPixbuf, false);\n"
"        this._comboBox.pack_start (rendererText, false);\n"
"\n"
"        // Set the renderers to use the information from our liststore\n"
"        this._comboBox.add_attribute (rendererText, \"text\", 0);\n"
"        this._comboBox.add_attribute (rendererPixbuf, \"stock_id\", 1);\n"
"\n"
"        // Set the first row in the combobox to be active on startup\n"
"        this._comboBox.set_active (0);\n"
"\n"
"        // Connect the combobox's 'changed' signal to our callback function\n"
"        this._comboBox.connect ('changed', Lang.bind (this, this._onComboChanged));\n"
"\n"
"        // Add the combobox to the window\n"
"        this._window.add (this._comboBox);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onComboChanged: function () {\n"
"\n"
"        // The silly pseudohaiku that we'll use for our messagedialog\n"
"        let haiku = [\"\",\n"
"            \"You ask for the new\\nwith no thought for the aged\\nlike fallen leaves trod.\",\n"
"            \"Like a simple clam\\nrevealing a lustrous pearl\\nit opens for you.\",\n"
"            \"A moment in time\\na memory on the breeze\\nthese things can't be saved.\"];\n"
"\n"
"        // Which combobox item is active?\n"
"        let activeItem = this._comboBox.get_active();\n"
"\n"
"        // No messagedialog if you choose \"Select\"\n"
"        if (activeItem != 0) {\n"
"            this._popUp = new Gtk.MessageDialog ({\n"
"                transient_for: this._window,\n"
"                modal: true,\n"
"                buttons: Gtk.ButtonsType.OK,\n"
"                message_type: Gtk.MessageType.INFO,\n"
"                text: haiku[activeItem]});\n"
"\n"
"            // Connect the OK button to a handler function\n"
"            this._popUp.connect ('response', Lang.bind (this, this._onDialogResponse));\n"
"\n"
"            // Show the messagedialog\n"
"            this._popUp.show();\n"
"        }\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onDialogResponse: function () {\n"
"\n"
"        this._popUp.destroy ();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ComboBoxExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/combobox.js.page:240
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"CellRendererPixbuf.html\">Gtk.CellRendererPixbuf</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"CellRendererPixbuf.html\">Gtk.CellRendererPixbuf</link>"

#. (itstool) path: item/p
#: C/combobox.js.page:241 C/treeview_simple_liststore.js.page:279
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"CellRendererText.html\">Gtk.CellRendererText</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"CellRendererText.html\">Gtk.CellRendererText</link>"

#. (itstool) path: item/p
#: C/combobox.js.page:242
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ComboBox.html"
"\">Gtk.ComboBox</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ComboBox.html"
"\">Gtk.ComboBox</link>"

#. (itstool) path: item/p
#: C/combobox.js.page:243 C/treeview_simple_liststore.js.page:280
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ListStore.html"
"\">Gtk.ListStore</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ListStore.html"
"\">Gtk.ListStore</link>"

#. (itstool) path: item/p
#: C/combobox.js.page:245 C/treeview_simple_liststore.js.page:281
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TreeIter.html"
"\">Gtk.TreeIter</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TreeIter.html"
"\">Gtk.TreeIter</link>"

#. (itstool) path: info/title
#: C/combobox.py.page:8 C/combobox_multicolumn.py.page:8
msgctxt "text"
msgid "ComboBox (Python)"
msgstr "ComboBox(Python)"

#. (itstool) path: page/title
#: C/combobox.py.page:23
msgid "ComboBox (one column)"
msgstr "ComboBox(한 칸 짜리)"

#. (itstool) path: page/p
#: C/combobox.py.page:25 C/combobox_multicolumn.py.page:24
#: C/combobox_multicolumn.vala.page:24
msgid "This ComboBox prints to the terminal your selection when you change it."
msgstr "이 ComboBox는 여러분이 바꿔서 선택한 내용을 터미널에 나타냅니다."

#. (itstool) path: section/code
#: C/combobox.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"distros = [[\"Select distribution\"], [\"Fedora\"], [\"Mint\"], [\"Suse\"]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(200, -1)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data in the model, of type string\n"
"        listmodel = Gtk.ListStore(str)\n"
"        # append the data in the model\n"
"        for i in range(len(distros)):\n"
"            listmodel.append(distros[i])\n"
"\n"
"        # a combobox to see the data stored in the model\n"
"        combobox = Gtk.ComboBox(model=listmodel)\n"
"\n"
"        # a cellrenderer to render the text\n"
"        cell = Gtk.CellRendererText()\n"
"\n"
"        # pack the cell into the beginning of the combobox, allocating\n"
"        # no more space than needed\n"
"        combobox.pack_start(cell, False)\n"
"        # associate a property (\"text\") of the cellrenderer (cell) to a column (column 0)\n"
"        # in the model used by the combobox\n"
"        combobox.add_attribute(cell, \"text\", 0)\n"
"\n"
"        # the first row is the active one by default at the beginning\n"
"        combobox.set_active(0)\n"
"\n"
"        # connect the signal emitted when a row is selected to the callback\n"
"        # function\n"
"        combobox.connect(\"changed\", self.on_changed)\n"
"\n"
"        # add the combobox to the window\n"
"        self.add(combobox)\n"
"\n"
"    def on_changed(self, combo):\n"
"        # if the row selected is not the first one, write its value on the\n"
"        # terminal\n"
"        if combo.get_active() != 0:\n"
"            print(\"You chose \" + str(distros[combo.get_active()][0]) + \".\")\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"distros = [[\"Select distribution\"], [\"Fedora\"], [\"Mint\"], [\"Suse\"]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(200, -1)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data in the model, of type string\n"
"        listmodel = Gtk.ListStore(str)\n"
"        # append the data in the model\n"
"        for i in range(len(distros)):\n"
"            listmodel.append(distros[i])\n"
"\n"
"        # a combobox to see the data stored in the model\n"
"        combobox = Gtk.ComboBox(model=listmodel)\n"
"\n"
"        # a cellrenderer to render the text\n"
"        cell = Gtk.CellRendererText()\n"
"\n"
"        # pack the cell into the beginning of the combobox, allocating\n"
"        # no more space than needed\n"
"        combobox.pack_start(cell, False)\n"
"        # associate a property (\"text\") of the cellrenderer (cell) to a column (column 0)\n"
"        # in the model used by the combobox\n"
"        combobox.add_attribute(cell, \"text\", 0)\n"
"\n"
"        # the first row is the active one by default at the beginning\n"
"        combobox.set_active(0)\n"
"\n"
"        # connect the signal emitted when a row is selected to the callback\n"
"        # function\n"
"        combobox.connect(\"changed\", self.on_changed)\n"
"\n"
"        # add the combobox to the window\n"
"        self.add(combobox)\n"
"\n"
"    def on_changed(self, combo):\n"
"        # if the row selected is not the first one, write its value on the\n"
"        # terminal\n"
"        if combo.get_active() != 0:\n"
"            print(\"You chose \" + str(distros[combo.get_active()][0]) + \".\")\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/combobox.py.page:35 C/combobox_multicolumn.py.page:35
msgid "Useful methods for a ComboBox widget"
msgstr "ComboBox 위젯에 쓸만한 함수"

#. (itstool) path: section/p
#: C/combobox.py.page:36 C/combobox_multicolumn.py.page:36
msgid ""
"The ComboBox widget is designed around a <em>Model/View/Controller</em> "
"design: the <em>Model</em> stores the data; the <em>View</em> gets change "
"notifications and displays the content of the model; the <em>Controller</"
"em>, finally, changes the state of the model and notifies the view of these "
"changes. For more information and for a list of useful methods for ComboBox "
"see <link xref=\"model-view-controller.py\"/>."
msgstr ""
"ComboBox 위젯은 <em>모델/뷰/컨트롤러</em> 설계 방식따라 설계했습니다. <em>모"
"델</em>에는 데이터가 들어가고요, <em>View</em>에는 바뀜 알림을 받아서 모델의 "
"내용을 표시합니다. 마지막으로, <em>컨트롤러</em>에서는, 모델의 상태를 바꾸고 "
"뷰가 바뀌었다는걸 알리죠. ComboBox에서 쓸만한 메서드 목록 내용은 <link xref="
"\"model-view-controller.py\"/>를 확인해보시죠."

#. (itstool) path: section/p
#: C/combobox.py.page:37
msgid ""
"In line 35 the <code>\"changed\"</code> signal is connected to the callback "
"function <code>on_changed()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"35번째 줄에서, <code><var>widget</var>.connect(<var>signal</var>, "
"<var>callback function</var>)</code> 코드로  <code>\"changed\"</code> 시그널"
"을 <code>on_changed()</code> 콜백 함수에 연결했습니다. 더 자세한 설명은 "
"<link xref=\"signals-callbacks.py\"/>를 참조하십시오."

#. (itstool) path: item/p
#: C/combobox.py.page:45 C/combobox_multicolumn.py.page:44
#: C/model-view-controller.py.page:190
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkComboBox.html"
"\">GtkComboBox</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkComboBox.html"
"\">GtkComboBox</link>"

#. (itstool) path: item/p
#: C/combobox.py.page:46 C/combobox_multicolumn.py.page:45
#: C/treeview_advanced_liststore.py.page:46
#: C/treeview_simple_liststore.py.page:47
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkListStore.html"
"\">GtkListStore</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkListStore.html"
"\">GtkListStore</link>"

#. (itstool) path: item/p
#: C/combobox.py.page:47 C/combobox_multicolumn.py.page:46
#: C/treeview_advanced_liststore.py.page:47
#: C/treeview_cellrenderertoggle.py.page:47
#: C/treeview_simple_liststore.py.page:48 C/treeview_treestore.py.page:47
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRendererText."
"html\">GtkCellRendererText</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRendererText."
"html\">GtkCellRendererText</link>"

#. (itstool) path: item/p
#: C/combobox.py.page:48
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellLayout.html"
"\">GtkCellLayout</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellLayout.html"
"\">GtkCellLayout</link>"

#. (itstool) path: item/p
#: C/combobox.py.page:49 C/combobox_multicolumn.py.page:49
#: C/treeview_advanced_liststore.py.page:49
#: C/treeview_simple_liststore.py.page:50
msgid ""
"<link href=\"http://git.gnome.org/browse/pygobject/tree/gi/overrides/Gtk.py"
"\">pygobject - Python bindings for GObject Introspection</link>"
msgstr ""
"<link href=\"http://git.gnome.org/browse/pygobject/tree/gi/overrides/Gtk.py"
"\">pygobject - GObject 인트로스펙션 파이썬 바인딩</link>"

#. (itstool) path: info/title
#: C/combobox.vala.page:8 C/combobox_multicolumn.vala.page:8
msgctxt "text"
msgid "ComboBox (Vala)"
msgstr "ComboBox(Vala)"

#. (itstool) path: page/code
#: C/combobox.vala.page:25
#, no-wrap
msgid ""
"/* A window in the application */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* An instance array of linux distributions belonging to this window. */\n"
"\tstring[] distros = {\"Select distribution\", \"Fedora\", \"Mint\", \"Suse\"};\n"
"\n"
"\t/* This enum makes the code more readable when we refer to\n"
"\t * the column as Column.DISTRO, instead of just 0.\n"
"\t */\n"
"\tenum Column {\n"
"\t\tDISTRO\n"
"\t}\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Welcome to GNOME\");\n"
"\n"
"\t\tthis.set_default_size (200, -1);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tGtk.ListStore liststore = new Gtk.ListStore (1, typeof (string));\n"
"\n"
"\t\tfor (int i = 0; i &lt; distros.length; i++){\n"
"\t\t\tGtk.TreeIter iter;\n"
"\t\t\tliststore.append (out iter);\n"
"\t\t\tliststore.set (iter, Column.DISTRO, distros[i]);\n"
"\t\t}\n"
"\n"
"\t\tGtk.ComboBox combobox = new Gtk.ComboBox.with_model (liststore);\n"
"\t\tGtk.CellRendererText cell = new Gtk.CellRendererText ();\n"
"\t\tcombobox.pack_start (cell, false);\n"
"\n"
"\t\tcombobox.set_attributes (cell, \"text\", Column.DISTRO);\n"
"\n"
"\t\t/* Set the first item in the list to be selected (active). */\n"
"\t\tcombobox.set_active (0);\n"
"\n"
"\t\t/* Connect the 'changed' signal of the combobox\n"
"\t\t * to the signal handler (aka. callback function).\n"
"\t\t */\n"
"\t\tcombobox.changed.connect (this.item_changed);\n"
"\n"
"\t\t/* Add the combobox to this window */\n"
"\t\tthis.add (combobox);\n"
"\t\tcombobox.show ();\n"
"\t}\n"
"\n"
"\t/* Signal handler for the 'changed' signal of the combobox. */\n"
"\tvoid item_changed (Gtk.ComboBox combo) {\n"
"\t\tif (combo.get_active () !=0) {\n"
"\t\t\tprint (\"You chose \" + distros [combo.get_active ()] +\"\\n\");\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication : Gtk.Application {\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the activate signal of GLib.Application,\n"
"\t * which is inherited by Gtk.Application.\n"
"\t */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create the window of this application\n"
"\t\t * and show it.\n"
"\t\t */\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* A window in the application */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* An instance array of linux distributions belonging to this window. */\n"
"\tstring[] distros = {\"Select distribution\", \"Fedora\", \"Mint\", \"Suse\"};\n"
"\n"
"\t/* This enum makes the code more readable when we refer to\n"
"\t * the column as Column.DISTRO, instead of just 0.\n"
"\t */\n"
"\tenum Column {\n"
"\t\tDISTRO\n"
"\t}\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Welcome to GNOME\");\n"
"\n"
"\t\tthis.set_default_size (200, -1);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tGtk.ListStore liststore = new Gtk.ListStore (1, typeof (string));\n"
"\n"
"\t\tfor (int i = 0; i &lt; distros.length; i++){\n"
"\t\t\tGtk.TreeIter iter;\n"
"\t\t\tliststore.append (out iter);\n"
"\t\t\tliststore.set (iter, Column.DISTRO, distros[i]);\n"
"\t\t}\n"
"\n"
"\t\tGtk.ComboBox combobox = new Gtk.ComboBox.with_model (liststore);\n"
"\t\tGtk.CellRendererText cell = new Gtk.CellRendererText ();\n"
"\t\tcombobox.pack_start (cell, false);\n"
"\n"
"\t\tcombobox.set_attributes (cell, \"text\", Column.DISTRO);\n"
"\n"
"\t\t/* Set the first item in the list to be selected (active). */\n"
"\t\tcombobox.set_active (0);\n"
"\n"
"\t\t/* Connect the 'changed' signal of the combobox\n"
"\t\t * to the signal handler (aka. callback function).\n"
"\t\t */\n"
"\t\tcombobox.changed.connect (this.item_changed);\n"
"\n"
"\t\t/* Add the combobox to this window */\n"
"\t\tthis.add (combobox);\n"
"\t\tcombobox.show ();\n"
"\t}\n"
"\n"
"\t/* Signal handler for the 'changed' signal of the combobox. */\n"
"\tvoid item_changed (Gtk.ComboBox combo) {\n"
"\t\tif (combo.get_active () !=0) {\n"
"\t\t\tprint (\"You chose \" + distros [combo.get_active ()] +\"\\n\");\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication : Gtk.Application {\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the activate signal of GLib.Application,\n"
"\t * which is inherited by Gtk.Application.\n"
"\t */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create the window of this application\n"
"\t\t * and show it.\n"
"\t\t */\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/combobox.vala.page:30 C/treeview_simple_liststore.vala.page:33
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ListStore.html\">Gtk."
"ListStore</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ListStore.html\">Gtk."
"ListStore</link>"

#. (itstool) path: item/p
#: C/combobox.vala.page:31
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ComboBox.html\">Gtk."
"ComboBox</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ComboBox.html\">Gtk."
"ComboBox</link>"

#. (itstool) path: item/p
#: C/combobox.vala.page:32
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CellRendererText.html\">Gtk."
"CellRendererText</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CellRendererText.html\">Gtk."
"CellRendererText</link>"

#. (itstool) path: item/p
#: C/combobox.vala.page:33
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CellLayout.set_attributes."
"html\">set_attributes</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CellLayout.set_attributes."
"html\">set_attributes</link>"

#. (itstool) path: page/title
#: C/combobox_multicolumn.py.page:22 C/combobox_multicolumn.vala.page:22
msgid "ComboBox (two columns)"
msgstr "ComboBox(두 칸 짜리)"

#. (itstool) path: section/code
#: C/combobox_multicolumn.py.page:30
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"actions = [[\"Select\", None],\n"
"           [\"New\", Gtk.STOCK_NEW],\n"
"           [\"Open\", Gtk.STOCK_OPEN],\n"
"           [\"Save\", Gtk.STOCK_SAVE]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(200, -1)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data in the model, of type string on two columns\n"
"        listmodel = Gtk.ListStore(str, str)\n"
"        # append the data\n"
"        for i in range(len(actions)):\n"
"            listmodel.append(actions[i])\n"
"\n"
"        # a combobox to see the data stored in the model\n"
"        combobox = Gtk.ComboBox(model=listmodel)\n"
"\n"
"        # cellrenderers to render the data\n"
"        renderer_pixbuf = Gtk.CellRendererPixbuf()\n"
"        renderer_text = Gtk.CellRendererText()\n"
"\n"
"        # we pack the cell into the beginning of the combobox, allocating\n"
"        # no more space than needed;\n"
"        # first the image, then the text;\n"
"        # note that it does not matter in which order they are in the model,\n"
"        # the visualization is decided by the order of the cellrenderers\n"
"        combobox.pack_start(renderer_pixbuf, False)\n"
"        combobox.pack_start(renderer_text, False)\n"
"\n"
"        # associate a property of the cellrenderer to a column in the model\n"
"        # used by the combobox\n"
"        combobox.add_attribute(renderer_text, \"text\", 0)\n"
"        combobox.add_attribute(renderer_pixbuf, \"stock_id\", 1)\n"
"\n"
"        # the first row is the active one at the beginning\n"
"        combobox.set_active(0)\n"
"\n"
"        # connect the signal emitted when a row is selected to the callback\n"
"        # function\n"
"        combobox.connect(\"changed\", self.on_changed)\n"
"\n"
"        # add the combobox to the window\n"
"        self.add(combobox)\n"
"\n"
"    def on_changed(self, combo):\n"
"        # if the row selected is not the first one, write on the terminal\n"
"        # the value of the first column in the model\n"
"        if combo.get_active() != 0:\n"
"            print(\"You chose \" + str(actions[combo.get_active()][0]) + \"\\n\")\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"actions = [[\"Select\", None],\n"
"           [\"New\", Gtk.STOCK_NEW],\n"
"           [\"Open\", Gtk.STOCK_OPEN],\n"
"           [\"Save\", Gtk.STOCK_SAVE]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(200, -1)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data in the model, of type string on two columns\n"
"        listmodel = Gtk.ListStore(str, str)\n"
"        # append the data\n"
"        for i in range(len(actions)):\n"
"            listmodel.append(actions[i])\n"
"\n"
"        # a combobox to see the data stored in the model\n"
"        combobox = Gtk.ComboBox(model=listmodel)\n"
"\n"
"        # cellrenderers to render the data\n"
"        renderer_pixbuf = Gtk.CellRendererPixbuf()\n"
"        renderer_text = Gtk.CellRendererText()\n"
"\n"
"        # we pack the cell into the beginning of the combobox, allocating\n"
"        # no more space than needed;\n"
"        # first the image, then the text;\n"
"        # note that it does not matter in which order they are in the model,\n"
"        # the visualization is decided by the order of the cellrenderers\n"
"        combobox.pack_start(renderer_pixbuf, False)\n"
"        combobox.pack_start(renderer_text, False)\n"
"\n"
"        # associate a property of the cellrenderer to a column in the model\n"
"        # used by the combobox\n"
"        combobox.add_attribute(renderer_text, \"text\", 0)\n"
"        combobox.add_attribute(renderer_pixbuf, \"stock_id\", 1)\n"
"\n"
"        # the first row is the active one at the beginning\n"
"        combobox.set_active(0)\n"
"\n"
"        # connect the signal emitted when a row is selected to the callback\n"
"        # function\n"
"        combobox.connect(\"changed\", self.on_changed)\n"
"\n"
"        # add the combobox to the window\n"
"        self.add(combobox)\n"
"\n"
"    def on_changed(self, combo):\n"
"        # if the row selected is not the first one, write on the terminal\n"
"        # the value of the first column in the model\n"
"        if combo.get_active() != 0:\n"
"            print(\"You chose \" + str(actions[combo.get_active()][0]) + \"\\n\")\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/p
#: C/combobox_multicolumn.py.page:37
msgid ""
"In line 45 the <code>\"changed\"</code> signal is connected to the callback "
"function <code>on_changed()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"45번째 줄에서, <code><var>widget</var>.connect(<var>signal</var>, "
"<var>callback function</var>)</code> 코드로  <code>\"changed\"</code> 시그널"
"을 <code>on_changed()</code> 콜백 함수에 연결했습니다. 더 자세한 설명은 "
"<link xref=\"signals-callbacks.py\"/>를 참조하십시오."

#. (itstool) path: item/p
#: C/combobox_multicolumn.py.page:47
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRendererPixbuf."
"html\">GtkCellRendererPixbuf</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRendererPixbuf."
"html\">GtkCellRendererPixbuf</link>"

#. (itstool) path: item/p
#: C/combobox_multicolumn.py.page:48 C/combobox_multicolumn.vala.page:42
#: C/toolbar.py.page:58
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/gtk3-Stock-Items.html"
"\">Stock Items</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/gtk3-Stock-Items.html"
"\">스톡 항목</link>"

#. (itstool) path: section/code
#: C/combobox_multicolumn.vala.page:30
#, no-wrap
msgid ""
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tstring[] file = {\"Select\", \"New\", \"Open\", \"Save\"};\n"
"\tstring[] stock_item = {\"\",\"gtk-new\", \"gtk-open\", \"gtk-save\"};\n"
"\n"
"\tenum Column {\n"
"\t\tFILE,\n"
"\t\tSTOCK_ITEM\t\n"
"\t}\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Welcome to GNOME\");\n"
"\n"
"\t\tthis.set_default_size (200, -1);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tGtk.ListStore liststore = new Gtk.ListStore (2, typeof (string), typeof (string));\n"
"\n"
"\t\tfor (int i = 0; i &lt; file.length; i++){\n"
"\t\t\tGtk.TreeIter iter;\n"
"\t\t\tliststore.append (out iter);\n"
"\t\t\tliststore.set (iter, Column.FILE, file[i]);\n"
"\t\t\tliststore.set (iter, Column.STOCK_ITEM, stock_item[i]);\n"
"\t\t}\n"
"\n"
"\t\tGtk.ComboBox combobox = new Gtk.ComboBox.with_model (liststore);\n"
"\n"
"\t\t/* CellRenderers render the data. */\n"
"\t\tGtk.CellRendererText cell = new Gtk.CellRendererText ();\n"
"\t\tGtk.CellRendererPixbuf cell_pb = new Gtk.CellRendererPixbuf ();\n"
"\t\t\n"
"                /* we pack the cell into the beginning of the combobox, allocating\n"
"\t\t * no more space than needed;\n"
"\t\t * first the image, then the text;\n"
"\t\t * note that it does not matter in which order they are in the model,\n"
"\t\t * the visualization is decided by the order of the cellrenderers\n"
"\t\t */\n"
"\t\tcombobox.pack_start (cell_pb, false);\n"
"\t\tcombobox.pack_start (cell, false);\n"
"\n"
"\t\t/* associate a property of the cellrenderer to a column in the model\n"
"\t\t * used by the combobox\n"
"\t\t */\n"
"\t\tcombobox.set_attributes (cell_pb, \"stock_id\", Column.STOCK_ITEM);\n"
"\t\tcombobox.set_attributes (cell, \"text\", Column.FILE);\n"
"\n"
"\t\t/* Set the first item in the list to be selected (active). */\n"
"\t\tcombobox.set_active (0);\n"
"\n"
"\t\t/* Connect the 'changed' signal of the combobox\n"
"\t\t * to the signal handler (aka. callback function).\n"
"\t\t */\n"
"\t\tcombobox.changed.connect (this.item_changed);\n"
"\n"
"\t\t/* Add the combobox to this window */\n"
"\t\tthis.add (combobox);\n"
"\t\tcombobox.show ();\n"
"\t}\n"
"\n"
"\tvoid item_changed (Gtk.ComboBox combo) {\n"
"\t\tif (combo.get_active () !=0) {\n"
"\t\t\tprint (\"You chose \" + file [combo.get_active ()] +\"\\n\");\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication : Gtk.Application {\n"
"        protected override void activate () {\n"
"                new MyWindow (this).show ();\n"
"        }\n"
"}\n"
"\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tstring[] file = {\"Select\", \"New\", \"Open\", \"Save\"};\n"
"\tstring[] stock_item = {\"\",\"gtk-new\", \"gtk-open\", \"gtk-save\"};\n"
"\n"
"\tenum Column {\n"
"\t\tFILE,\n"
"\t\tSTOCK_ITEM\t\n"
"\t}\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Welcome to GNOME\");\n"
"\n"
"\t\tthis.set_default_size (200, -1);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tGtk.ListStore liststore = new Gtk.ListStore (2, typeof (string), typeof (string));\n"
"\n"
"\t\tfor (int i = 0; i &lt; file.length; i++){\n"
"\t\t\tGtk.TreeIter iter;\n"
"\t\t\tliststore.append (out iter);\n"
"\t\t\tliststore.set (iter, Column.FILE, file[i]);\n"
"\t\t\tliststore.set (iter, Column.STOCK_ITEM, stock_item[i]);\n"
"\t\t}\n"
"\n"
"\t\tGtk.ComboBox combobox = new Gtk.ComboBox.with_model (liststore);\n"
"\n"
"\t\t/* CellRenderers render the data. */\n"
"\t\tGtk.CellRendererText cell = new Gtk.CellRendererText ();\n"
"\t\tGtk.CellRendererPixbuf cell_pb = new Gtk.CellRendererPixbuf ();\n"
"\t\t\n"
"                /* we pack the cell into the beginning of the combobox, allocating\n"
"\t\t * no more space than needed;\n"
"\t\t * first the image, then the text;\n"
"\t\t * note that it does not matter in which order they are in the model,\n"
"\t\t * the visualization is decided by the order of the cellrenderers\n"
"\t\t */\n"
"\t\tcombobox.pack_start (cell_pb, false);\n"
"\t\tcombobox.pack_start (cell, false);\n"
"\n"
"\t\t/* associate a property of the cellrenderer to a column in the model\n"
"\t\t * used by the combobox\n"
"\t\t */\n"
"\t\tcombobox.set_attributes (cell_pb, \"stock_id\", Column.STOCK_ITEM);\n"
"\t\tcombobox.set_attributes (cell, \"text\", Column.FILE);\n"
"\n"
"\t\t/* Set the first item in the list to be selected (active). */\n"
"\t\tcombobox.set_active (0);\n"
"\n"
"\t\t/* Connect the 'changed' signal of the combobox\n"
"\t\t * to the signal handler (aka. callback function).\n"
"\t\t */\n"
"\t\tcombobox.changed.connect (this.item_changed);\n"
"\n"
"\t\t/* Add the combobox to this window */\n"
"\t\tthis.add (combobox);\n"
"\t\tcombobox.show ();\n"
"\t}\n"
"\n"
"\tvoid item_changed (Gtk.ComboBox combo) {\n"
"\t\tif (combo.get_active () !=0) {\n"
"\t\t\tprint (\"You chose \" + file [combo.get_active ()] +\"\\n\");\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication : Gtk.Application {\n"
"        protected override void activate () {\n"
"                new MyWindow (this).show ();\n"
"        }\n"
"}\n"
"\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/combobox_multicolumn.vala.page:38
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ComboBox.html"
"\">GtkComboBox</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ComboBox.html"
"\">GtkComboBox</link>"

#. (itstool) path: item/p
#: C/combobox_multicolumn.vala.page:39
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ListStore.html"
"\">GtkListStore</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ListStore.html"
"\">GtkListStore</link>"

#. (itstool) path: item/p
#: C/combobox_multicolumn.vala.page:40
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CellRendererText.html"
"\">GtkCellRendererText</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CellRendererText.html"
"\">GtkCellRendererText</link>"

#. (itstool) path: item/p
#: C/combobox_multicolumn.vala.page:41
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CellRendererPixbuf.html"
"\">GtkCellRendererPixbuf</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.CellRendererPixbuf.html"
"\">GtkCellRendererPixbuf</link>"

#. (itstool) path: info/title
#: C/cpp.page:7
msgctxt "link"
msgid "C++"
msgstr "C++"

#. (itstool) path: page/title
#: C/cpp.page:16
msgid "Code samples and platform demos in C++"
msgstr "C++ 예제 코드 및 플랫폼 데모"

#. (itstool) path: section/title
#: C/cpp.page:21 C/js.page:36 C/py.page:39 C/vala.page:30
msgid "Examples of applications"
msgstr "프로그램 예제"

#. (itstool) path: info/title
#: C/dialog.c.page:8
msgctxt "text"
msgid "Dialog (C)"
msgstr "Dialog(C)"

#. (itstool) path: info/desc
#: C/dialog.c.page:20 C/dialog.js.page:18 C/dialog.py.page:20
#: C/dialog.vala.page:18
msgid "A popup window"
msgstr "뜨는 창"

#. (itstool) path: page/title
#: C/dialog.c.page:23 C/dialog.js.page:21 C/dialog.py.page:23
#: C/dialog.vala.page:21
msgid "Dialog"
msgstr "Dialog"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/dialog.c.page:25 C/dialog.js.page:22 C/dialog.py.page:24
#: C/dialog.vala.page:22
msgctxt "_"
msgid "external ref='media/dialog.png' md5='c90a33386a600e892fe623d4072c8c38'"
msgstr ""

#. (itstool) path: page/p
#: C/dialog.c.page:26
msgid "A dialog window that pops up when a button is pressed."
msgstr "단추를 누르면 튀어나오는 대화상자 창입니다."

#. (itstool) path: page/code
#: C/dialog.c.page:28
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
" \n"
"\n"
"/*Callback function in which reacts to the \"response\" signal. Be sure to place \n"
"it before the function it is called in*/\n"
"static void\n"
"on_response (GtkDialog *dialog,\n"
"             gint       response_id,\n"
"             gpointer   user_data)\n"
"{\n"
"  /*For demonstration purposes, this will show the int value \n"
"  of the response type*/\n"
"  g_print (\"response is %d\\n\", response_id);\n"
"  \n"
"  /*This will cause the dialog to be destroyed*/\n"
"  gtk_widget_destroy (GTK_WIDGET (dialog));\n"
"}\n"
"\n"
"\n"
"\n"
"/*Callback function in which reacts to the \"clicked\" signal*/\n"
"static void\n"
"show_dialog (GtkButton *button,\n"
"             gpointer   user_data)\n"
"{\n"
"  GtkWindow *window = user_data;\n"
"  GtkWidget *dialog;\n"
"  GtkWidget *content_area;\n"
"  GtkWidget *label;\n"
"\n"
"  gint response_id;\n"
"\n"
"  /*Create the dialog window. Modal windows prevent interaction with other \n"
"  windows in the same application*/\n"
"  dialog = gtk_dialog_new_with_buttons (\"A Gtk+ Dialog\", \n"
"                                        window, \n"
"                                        GTK_DIALOG_MODAL, \n"
"                                        GTK_STOCK_OK, \n"
"                                        GTK_RESPONSE_OK, \n"
"                                        NULL);\n"
"\n"
"  /*Create a label and attach it to the content area of the dialog*/\n"
"  content_area = gtk_dialog_get_content_area (GTK_DIALOG (dialog));\n"
"  label = gtk_label_new (\"This demonstrates a dialog with a label\");\n"
"  gtk_container_add (GTK_CONTAINER (content_area), label);\n"
"\n"
"  /*The main purpose of this is to show dialog's child widget, label*/\n"
"  gtk_widget_show_all (dialog);\n"
"  \n"
"  /*Connecting the \"response\" signal from the user to the associated\n"
"  callback function*/\n"
"  g_signal_connect (GTK_DIALOG (dialog), \n"
"                    \"response\", \n"
"                    G_CALLBACK (on_response), \n"
"                    NULL);\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *button;\n"
" \n"
"  /*Create a window with a title and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"GNOME Button\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 250, 50);\n"
"\n"
"  /*Create a button with a label, and add it to the window*/\n"
"  button = gtk_button_new_with_label (\"Click Me\");\n"
"  gtk_container_add (GTK_CONTAINER (window), button);\n"
" \n"
"  /*Connecting the clicked signal to the callback*/\n"
"  g_signal_connect (GTK_BUTTON (button), \n"
"                    \"clicked\", \n"
"                    G_CALLBACK (show_dialog), \n"
"                    GTK_WINDOW (window));\n"
" \n"
"  gtk_widget_show_all (window);\n"
"}\n"
" \n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
" \n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
" \n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
" \n"
"\n"
"/*Callback function in which reacts to the \"response\" signal. Be sure to place \n"
"it before the function it is called in*/\n"
"static void\n"
"on_response (GtkDialog *dialog,\n"
"             gint       response_id,\n"
"             gpointer   user_data)\n"
"{\n"
"  /*For demonstration purposes, this will show the int value \n"
"  of the response type*/\n"
"  g_print (\"response is %d\\n\", response_id);\n"
"  \n"
"  /*This will cause the dialog to be destroyed*/\n"
"  gtk_widget_destroy (GTK_WIDGET (dialog));\n"
"}\n"
"\n"
"\n"
"\n"
"/*Callback function in which reacts to the \"clicked\" signal*/\n"
"static void\n"
"show_dialog (GtkButton *button,\n"
"             gpointer   user_data)\n"
"{\n"
"  GtkWindow *window = user_data;\n"
"  GtkWidget *dialog;\n"
"  GtkWidget *content_area;\n"
"  GtkWidget *label;\n"
"\n"
"  gint response_id;\n"
"\n"
"  /*Create the dialog window. Modal windows prevent interaction with other \n"
"  windows in the same application*/\n"
"  dialog = gtk_dialog_new_with_buttons (\"A Gtk+ Dialog\", \n"
"                                        window, \n"
"                                        GTK_DIALOG_MODAL, \n"
"                                        GTK_STOCK_OK, \n"
"                                        GTK_RESPONSE_OK, \n"
"                                        NULL);\n"
"\n"
"  /*Create a label and attach it to the content area of the dialog*/\n"
"  content_area = gtk_dialog_get_content_area (GTK_DIALOG (dialog));\n"
"  label = gtk_label_new (\"This demonstrates a dialog with a label\");\n"
"  gtk_container_add (GTK_CONTAINER (content_area), label);\n"
"\n"
"  /*The main purpose of this is to show dialog's child widget, label*/\n"
"  gtk_widget_show_all (dialog);\n"
"  \n"
"  /*Connecting the \"response\" signal from the user to the associated\n"
"  callback function*/\n"
"  g_signal_connect (GTK_DIALOG (dialog), \n"
"                    \"response\", \n"
"                    G_CALLBACK (on_response), \n"
"                    NULL);\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *button;\n"
" \n"
"  /*Create a window with a title and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"GNOME Button\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 250, 50);\n"
"\n"
"  /*Create a button with a label, and add it to the window*/\n"
"  button = gtk_button_new_with_label (\"Click Me\");\n"
"  gtk_container_add (GTK_CONTAINER (window), button);\n"
" \n"
"  /*Connecting the clicked signal to the callback*/\n"
"  g_signal_connect (GTK_BUTTON (button), \n"
"                    \"clicked\", \n"
"                    G_CALLBACK (show_dialog), \n"
"                    GTK_WINDOW (window));\n"
" \n"
"  gtk_widget_show_all (window);\n"
"}\n"
" \n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
" \n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
" \n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/dialog.c.page:36
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkDialog.html"
"\">GtkDialog</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkDialog.html"
"\">GtkDialog</link>"

#. (itstool) path: item/p
#: C/dialog.c.page:37 C/radiobutton.c.page:36 C/spinbutton.c.page:38
#: C/switch.c.page:35
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkLabel.html"
"\">GtkLabel</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkLabel.html"
"\">GtkLabel</link>"

#. (itstool) path: info/title
#: C/dialog.js.page:8
msgctxt "text"
msgid "Dialog (JavaScript)"
msgstr "Dialog(JavaScript)"

#. (itstool) path: page/p
#: C/dialog.js.page:23
msgid ""
"A customizable popup window, which has a content area and an action area. "
"This example dialog's content area contains a short message, and its action "
"area contains a button which dismisses the dialog."
msgstr ""
"개별적으로 이리저리 바꿀 수 있는 팝업 대화상자에는 내용 영역과 동작 영역이 있"
"습니다. 이 예제 대화상자의 내용 영역에는 간단한 문구가 있으며 동작 영역에는 "
"대화상자를 닫는 단추가 있습니다."

#. (itstool) path: page/code
#: C/dialog.js.page:25
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const DialogExample = new Lang.Class ({\n"
"    Name: 'Dialog Example',\n"
"\n"
"    // Create the application itself\n"
"        _init: function () {\n"
"            this.application = new Gtk.Application ({\n"
"                application_id: 'org.example.jsdialog',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                         window_position: Gtk.WindowPosition.CENTER,\n"
"                                                         title: \"Gtk.Dialog Example\",\n"
"                                                         default_height: 50,\n"
"                                                         default_width: 250 });\n"
"\n"
"        // Create a button\n"
"        this._button = new Gtk.Button ({label: \"Click Me\"});\n"
"        this._window.add (this._button);\n"
"\n"
"        // Bind it to the function that creates the dialog\n"
"        this._button.connect (\"clicked\", Lang.bind(this, this._createDialog));\n"
"\n"
"                // Show the window and all child widgets\n"
"                this._window.show_all();\n"
"    },\n"
"\n"
"    _createDialog: function () {\n"
"\n"
"        // Create the dialog\n"
"        this._dialog = new Gtk.Dialog ({ transient_for: this._window,\n"
"                         modal: true,\n"
"                         title: \"A Gtk+ dialog\" });\n"
"\n"
"        // Create the dialog's content area, which contains a message\n"
"        this._contentArea = this._dialog.get_content_area();\n"
"        this._message = new Gtk.Label ({label: \"This demonstrates a dialog with a label\"});\n"
"        this._contentArea.add (this._message);\n"
"\n"
"        // Create the dialog's action area, which contains a stock OK button\n"
"        this._actionArea = this._dialog.get_action_area();\n"
"        this._OKButton = Gtk.Button.new_from_stock (Gtk.STOCK_OK);\n"
"        this._actionArea.add (this._OKButton);\n"
"\n"
"        // Connect the button to the function that handles what it does\n"
"        this._OKButton.connect (\"clicked\", Lang.bind (this, this._OKHandler));\n"
"\n"
"        this._dialog.show_all();\n"
"    },\n"
"\n"
"    _OKHandler: function (dialog, response_id) {\n"
"\n"
"        // Destroy the dialog\n"
"        this._dialog.destroy();\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new DialogExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const DialogExample = new Lang.Class ({\n"
"    Name: 'Dialog Example',\n"
"\n"
"    // Create the application itself\n"
"        _init: function () {\n"
"            this.application = new Gtk.Application ({\n"
"                application_id: 'org.example.jsdialog',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                         window_position: Gtk.WindowPosition.CENTER,\n"
"                                                         title: \"Gtk.Dialog Example\",\n"
"                                                         default_height: 50,\n"
"                                                         default_width: 250 });\n"
"\n"
"        // Create a button\n"
"        this._button = new Gtk.Button ({label: \"Click Me\"});\n"
"        this._window.add (this._button);\n"
"\n"
"        // Bind it to the function that creates the dialog\n"
"        this._button.connect (\"clicked\", Lang.bind(this, this._createDialog));\n"
"\n"
"                // Show the window and all child widgets\n"
"                this._window.show_all();\n"
"    },\n"
"\n"
"    _createDialog: function () {\n"
"\n"
"        // Create the dialog\n"
"        this._dialog = new Gtk.Dialog ({ transient_for: this._window,\n"
"                         modal: true,\n"
"                         title: \"A Gtk+ dialog\" });\n"
"\n"
"        // Create the dialog's content area, which contains a message\n"
"        this._contentArea = this._dialog.get_content_area();\n"
"        this._message = new Gtk.Label ({label: \"This demonstrates a dialog with a label\"});\n"
"        this._contentArea.add (this._message);\n"
"\n"
"        // Create the dialog's action area, which contains a stock OK button\n"
"        this._actionArea = this._dialog.get_action_area();\n"
"        this._OKButton = Gtk.Button.new_from_stock (Gtk.STOCK_OK);\n"
"        this._actionArea.add (this._OKButton);\n"
"\n"
"        // Connect the button to the function that handles what it does\n"
"        this._OKButton.connect (\"clicked\", Lang.bind (this, this._OKHandler));\n"
"\n"
"        this._dialog.show_all();\n"
"    },\n"
"\n"
"    _OKHandler: function (dialog, response_id) {\n"
"\n"
"        // Destroy the dialog\n"
"        this._dialog.destroy();\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new DialogExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/dialog.js.page:32
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Dialog.html"
"\">Gtk.Dialog</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Dialog.html"
"\">Gtk.Dialog</link>"

#. (itstool) path: info/title
#: C/dialog.py.page:8
msgctxt "text"
msgid "Dialog (Python)"
msgstr "Dialog(Python)"

#. (itstool) path: page/p
#: C/dialog.py.page:25
msgid "A dialog with the response signal connected to a callback function."
msgstr "콜백 함수에 응답 시그널을 연결한 대화상자입니다."

#. (itstool) path: section/code
#: C/dialog.py.page:32
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # construct a window (the parent window)\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GNOME Button\", application=app)\n"
"        self.set_default_size(250, 50)\n"
"\n"
"        # a button on the parent window\n"
"        button = Gtk.Button(\"Click me\")\n"
"        # connect the signal \"clicked\" of the button with the function\n"
"        # on_button_click()\n"
"        button.connect(\"clicked\", self.on_button_click)\n"
"        # add the button to the window\n"
"        self.add(button)\n"
"\n"
"    # callback function for the signal \"clicked\" of the button in the parent\n"
"    # window\n"
"    def on_button_click(self, widget):\n"
"        # create a Gtk.Dialog\n"
"        dialog = Gtk.Dialog()\n"
"        dialog.set_title(\"A Gtk+ Dialog\")\n"
"        # The window defined in the constructor (self) is the parent of the dialog.\n"
"        # Furthermore, the dialog is on top of the parent window\n"
"        dialog.set_transient_for(self)\n"
"        # set modal true: no interaction with other windows of the application\n"
"        dialog.set_modal(True)\n"
"        # add a button to the dialog window\n"
"        dialog.add_button(button_text=\"OK\", response_id=Gtk.ResponseType.OK)\n"
"        # connect the \"response\" signal (the button has been clicked) to the\n"
"        # function on_response()\n"
"        dialog.connect(\"response\", self.on_response)\n"
"\n"
"        # get the content area of the dialog, add a label to it\n"
"        content_area = dialog.get_content_area()\n"
"        label = Gtk.Label(\"This demonstrates a dialog with a label\")\n"
"        content_area.add(label)\n"
"        # show the dialog\n"
"        dialog.show_all()\n"
"\n"
"    def on_response(self, widget, response_id):\n"
"        print(\"response_id is\", response_id)\n"
"        # destroy the widget (the dialog) when the function on_response() is called\n"
"        # (that is, when the button of the dialog has been clicked)\n"
"        widget.destroy()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # construct a window (the parent window)\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GNOME Button\", application=app)\n"
"        self.set_default_size(250, 50)\n"
"\n"
"        # a button on the parent window\n"
"        button = Gtk.Button(\"Click me\")\n"
"        # connect the signal \"clicked\" of the button with the function\n"
"        # on_button_click()\n"
"        button.connect(\"clicked\", self.on_button_click)\n"
"        # add the button to the window\n"
"        self.add(button)\n"
"\n"
"    # callback function for the signal \"clicked\" of the button in the parent\n"
"    # window\n"
"    def on_button_click(self, widget):\n"
"        # create a Gtk.Dialog\n"
"        dialog = Gtk.Dialog()\n"
"        dialog.set_title(\"A Gtk+ Dialog\")\n"
"        # The window defined in the constructor (self) is the parent of the dialog.\n"
"        # Furthermore, the dialog is on top of the parent window\n"
"        dialog.set_transient_for(self)\n"
"        # set modal true: no interaction with other windows of the application\n"
"        dialog.set_modal(True)\n"
"        # add a button to the dialog window\n"
"        dialog.add_button(button_text=\"OK\", response_id=Gtk.ResponseType.OK)\n"
"        # connect the \"response\" signal (the button has been clicked) to the\n"
"        # function on_response()\n"
"        dialog.connect(\"response\", self.on_response)\n"
"\n"
"        # get the content area of the dialog, add a label to it\n"
"        content_area = dialog.get_content_area()\n"
"        label = Gtk.Label(\"This demonstrates a dialog with a label\")\n"
"        content_area.add(label)\n"
"        # show the dialog\n"
"        dialog.show_all()\n"
"\n"
"    def on_response(self, widget, response_id):\n"
"        print(\"response_id is\", response_id)\n"
"        # destroy the widget (the dialog) when the function on_response() is called\n"
"        # (that is, when the button of the dialog has been clicked)\n"
"        widget.destroy()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/dialog.py.page:37
msgid "Useful methods for a Dialog widget"
msgstr "Dialog 위젯에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/dialog.py.page:38
msgid ""
"In line 16 the signal <code>\"clicked\"</code> is connected to the callback "
"function <code>on_button_click()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"16번째 줄에서, <code><var>widget</var>.connect(<var>signal</var>, "
"<var>callback function</var>)</code> 코드로  <code>\"clicked\"</code> 시그널"
"을 <code>on_button_click()</code> 콜백 함수에 연결했습니다. 더 자세한 설명은 "
"<link xref=\"signals-callbacks.py\"/>를 참조하십시오."

#. (itstool) path: item/p
#: C/dialog.py.page:40
msgid ""
"Instead of <code>set_modal(True)</code> we could have "
"<code>set_modal(False)</code> followed by "
"<code>set_destroy_with_parent(True)</code> that would destroy the dialog "
"window if the main window is closed."
msgstr ""
"<code>set_modal(True)</code> 대신 <code>set_modal(False)</code>로 호출하고, "
"그 뒤에 <code>set_destroy_with_parent(True)</code> 함수를 호출해서 메인 창을 "
"닫으면 대화상자 창을 닫을 수 있게 할 수 있습니다."

#. (itstool) path: item/p
#: C/dialog.py.page:41
msgid ""
"<code>add_button(button_text=\"The Answer\", response_id=42)</code>, where "
"<code>42</code> is any integer, is an alternative to "
"<code>add_button(button_text=\"text\", response_id=Gtk.ResponseType."
"RESPONSE)</code>, where <code>RESPONSE</code> could be one of <code>OK, "
"CANCEL, CLOSE, YES, NO, APPLY, HELP</code>, which in turn correspond to the "
"integers <code>-5, -6,..., -11</code>."
msgstr ""
"임의의 정수 값 <code>42</code>를 갖는 <code>add_button(button_text=\"The "
"Answer\", response_id=42)</code> 대신, <code>RESPONSE</code> 자리에 "
"<code>-5, -6,..., -11</code> 정수형 값에 해당하는 <code>OK, CANCEL, CLOSE, "
"YES, NO, APPLY, HELP</code>중 하나가 오는 <code>add_button(button_text=\"text"
"\", response_id=Gtk.ResponseType.RESPONSE)</code> 호출 방식을 쓸 수 있습니다."

#. (itstool) path: item/p
#: C/dialog.py.page:51 C/messagedialog.py.page:60
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkDialog.html"
"\">GtkDialog</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkDialog.html"
"\">GtkDialog</link>"

#. (itstool) path: info/title
#: C/dialog.vala.page:8
msgctxt "text"
msgid "Dialog (Vala)"
msgstr "Dialog(Vala)"

#. (itstool) path: page/p
#: C/dialog.vala.page:23
msgid "A dialog with the response signal hooked up to a callback function."
msgstr "콜백 함수에 응답 시그널을 걸어두는 대화상자입니다."

#. (itstool) path: page/code
#: C/dialog.vala.page:25
#, no-wrap
msgid ""
"\n"
"/* A window in the application. */\n"
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"GNOME Button\");\n"
"\n"
"\t\tthis.window_position = Gtk.WindowPosition.CENTER;\n"
"\t\tthis.set_default_size (250,50);\n"
"\n"
"\t\tvar button = new Gtk.Button.with_label (\"Click Me\");\n"
"\n"
"\t\t/* Connect the button's \"clicked\" signal to\n"
"\t\t * the signal handler (aka. this.callback function).\n"
"\t\t */\n"
"\t\tbutton.clicked.connect (this.on_button_click);\n"
"\n"
"\t\t/* Add the button to this window and show it. */\n"
"\t\tthis.add (button);\n"
"\t\tbutton.show ();\n"
"\t}\n"
"\n"
"\t/* The signal handler for the buttons 'clicked' signal. */\n"
"\tvoid on_button_click (Gtk.Button button) {\n"
"\t\tvar dialog = new Gtk.Dialog.with_buttons (\"A Gtk+ Dialog\", this,\n"
"                                                          Gtk.DialogFlags.MODAL,\n"
"                                                          Gtk.Stock.OK,\n"
"                                                          Gtk.ResponseType.OK, null);\n"
"\n"
"\t\tvar content_area = dialog.get_content_area ();\n"
"\t\tvar label = new Gtk.Label (\"This demonstrates a dialog with a label\");\n"
"\n"
"\t\tcontent_area.add (label);\n"
"\n"
"\t\t/* Connect the 'response' signal of the dialog\n"
"\t\t * the signal handler.  It is emitted when the dialog's\n"
"\t\t * OK button is clicked.\n"
"\t\t */\n"
"\t\tdialog.response.connect (on_response);\n"
"\n"
"\t\t/* Show the dialog and all the widgets. */\n"
"\t\tdialog.show_all ();\n"
"\t}\n"
"\n"
"\t/* Signal handler for the 'response' signal of the dialog. */\n"
"        void on_response (Gtk.Dialog dialog, int response_id) {\n"
"\n"
"                /* To see the int value of the ResponseType. This is only\n"
"\t\t * for demonstration purposes.*/\n"
"                print (\"response is %d\\n\", response_id);\n"
"\n"
"\t\t/* This causes the dialog to be destroyed. */\n"
"                dialog.destroy ();\n"
"        }\n"
"\n"
"}\n"
"\n"
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\n"
"\t/* The constructor of the application. */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create a window for the this application and show it. */\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"\n"
"/* A window in the application. */\n"
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"GNOME Button\");\n"
"\n"
"\t\tthis.window_position = Gtk.WindowPosition.CENTER;\n"
"\t\tthis.set_default_size (250,50);\n"
"\n"
"\t\tvar button = new Gtk.Button.with_label (\"Click Me\");\n"
"\n"
"\t\t/* Connect the button's \"clicked\" signal to\n"
"\t\t * the signal handler (aka. this.callback function).\n"
"\t\t */\n"
"\t\tbutton.clicked.connect (this.on_button_click);\n"
"\n"
"\t\t/* Add the button to this window and show it. */\n"
"\t\tthis.add (button);\n"
"\t\tbutton.show ();\n"
"\t}\n"
"\n"
"\t/* The signal handler for the buttons 'clicked' signal. */\n"
"\tvoid on_button_click (Gtk.Button button) {\n"
"\t\tvar dialog = new Gtk.Dialog.with_buttons (\"A Gtk+ Dialog\", this,\n"
"                                                          Gtk.DialogFlags.MODAL,\n"
"                                                          Gtk.Stock.OK,\n"
"                                                          Gtk.ResponseType.OK, null);\n"
"\n"
"\t\tvar content_area = dialog.get_content_area ();\n"
"\t\tvar label = new Gtk.Label (\"This demonstrates a dialog with a label\");\n"
"\n"
"\t\tcontent_area.add (label);\n"
"\n"
"\t\t/* Connect the 'response' signal of the dialog\n"
"\t\t * the signal handler.  It is emitted when the dialog's\n"
"\t\t * OK button is clicked.\n"
"\t\t */\n"
"\t\tdialog.response.connect (on_response);\n"
"\n"
"\t\t/* Show the dialog and all the widgets. */\n"
"\t\tdialog.show_all ();\n"
"\t}\n"
"\n"
"\t/* Signal handler for the 'response' signal of the dialog. */\n"
"        void on_response (Gtk.Dialog dialog, int response_id) {\n"
"\n"
"                /* To see the int value of the ResponseType. This is only\n"
"\t\t * for demonstration purposes.*/\n"
"                print (\"response is %d\\n\", response_id);\n"
"\n"
"\t\t/* This causes the dialog to be destroyed. */\n"
"                dialog.destroy ();\n"
"        }\n"
"\n"
"}\n"
"\n"
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\n"
"\t/* The constructor of the application. */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create a window for the this application and show it. */\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/dialog.vala.page:32
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Dialog.html\">Gtk.Dialog</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Dialog.html\">Gtk.Dialog</"
"link>"

#. (itstool) path: item/p
#: C/dialog.vala.page:33
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Dialog.Dialog.with_buttons."
"html\">Gtk.Dialog.with_buttons</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Dialog.Dialog.with_buttons."
"html\">Gtk.Dialog.with_buttons</link>"

#. (itstool) path: item/p
#: C/dialog.vala.page:34 C/label.vala.page:33
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Label.html\">Gtk.Label</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Label.html\">Gtk.Label</"
"link>"

#. (itstool) path: item/p
#: C/dialog.vala.page:35
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Dialog.get_content_area.html"
"\">get_content_area</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Dialog.get_content_area.html"
"\">get_content_area</link>"

#. (itstool) path: info/title
#: C/entry.c.page:8
msgctxt "text"
msgid "Entry (C)"
msgstr "Entry(C)"

#. (itstool) path: info/desc
#: C/entry.c.page:18 C/entry.py.page:25 C/entry.vala.page:18
msgid "A single line text entry field"
msgstr "단일 행 텍스트 항목 필드"

#. (itstool) path: page/title
#: C/entry.c.page:21 C/entry.js.page:21 C/entry.py.page:28 C/entry.vala.page:21
msgid "Entry"
msgstr "Entry"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/entry.c.page:23 C/entry.js.page:22 C/entry.py.page:29 C/entry.vala.page:22
msgctxt "_"
msgid "external ref='media/entry.png' md5='8a828cffdcbaa4bad83342e109f28cc8'"
msgstr ""

#. (itstool) path: page/p
#: C/entry.c.page:24 C/entry.vala.page:23
msgid "This application greets you in the terminal."
msgstr "이 프로그램은 터미널에 인사말을 남깁니다."

#. (itstool) path: page/code
#: C/entry.c.page:26
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*This is the callback function. It is a handler function \n"
"which reacts to the signal. In this case, it will grab the \n"
"text input from the entry box and print out a line to the user.*/\n"
"static void\n"
"on_activate (GtkEntry *entry,\n"
"             gpointer  user_data)\n"
"{\n"
"  const char *name;\n"
"  name = gtk_entry_get_text (entry);\n"
"\n"
"  g_print (\"\\nHello %s!\\n\\n\", name);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *entry_box;\n"
"\n"
"  /*Create a window with a title, a default size, \n"
"  and a set border width*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"What is your name?\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 100);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 10);\n"
"\n"
"  /*Create a new entry box, and add it to the window*/\n"
"  entry_box = gtk_entry_new ();\n"
"  gtk_container_add (GTK_CONTAINER (window), entry_box);\n"
"\n"
"  /*Connecting the activate signal to the callback*/\n"
"  g_signal_connect (GTK_ENTRY (entry_box), \"activate\", \n"
"                    G_CALLBACK (on_activate), NULL);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*This is the callback function. It is a handler function \n"
"which reacts to the signal. In this case, it will grab the \n"
"text input from the entry box and print out a line to the user.*/\n"
"static void\n"
"on_activate (GtkEntry *entry,\n"
"             gpointer  user_data)\n"
"{\n"
"  const char *name;\n"
"  name = gtk_entry_get_text (entry);\n"
"\n"
"  g_print (\"\\nHello %s!\\n\\n\", name);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *entry_box;\n"
"\n"
"  /*Create a window with a title, a default size, \n"
"  and a set border width*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"What is your name?\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 100);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 10);\n"
"\n"
"  /*Create a new entry box, and add it to the window*/\n"
"  entry_box = gtk_entry_new ();\n"
"  gtk_container_add (GTK_CONTAINER (window), entry_box);\n"
"\n"
"  /*Connecting the activate signal to the callback*/\n"
"  g_signal_connect (GTK_ENTRY (entry_box), \"activate\", \n"
"                    G_CALLBACK (on_activate), NULL);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: info/title
#: C/entry.js.page:8
msgctxt "text"
msgid "Entry (JavaScript)"
msgstr "Entry(JavaScript)"

#. (itstool) path: info/desc
#: C/entry.js.page:18
msgid "A single-line text entry field"
msgstr "단일 행 텍스트 항목 필드"

#. (itstool) path: page/p
#: C/entry.js.page:23
msgid "This application greets you by name through a pop-up window."
msgstr "이 프로그램은 별도로 띄우는 창에 이름을 붙여 인사말을 남깁니다."

#. (itstool) path: page/code
#: C/entry.js.page:25
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const EntryExample = new Lang.Class({\n"
"    Name: 'Entry Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsentry',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 100,\n"
"            default_width: 300,\n"
"            border_width: 10,\n"
"            title: \"What is your name?\"});\n"
"\n"
"        // Create the text entry box\n"
"        this.entry = new Gtk.Entry ();\n"
"        this._window.add(this.entry);\n"
"\n"
"        // Connect the text entry box to a function that responds to what you type in\n"
"        this.entry.connect(\"activate\", Lang.bind (this, this._hello));\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _hello: function() {\n"
"\n"
"        // Create a popup dialog to greet the person who types in their name\n"
"        this._greeter = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            text: \"Hello, \" + this.entry.get_text() + \"!\",\n"
"            message_type: Gtk.MessageType.OTHER,\n"
"            buttons: Gtk.ButtonsType.OK,\n"
"        });\n"
"\n"
"        // Show the popup dialog\n"
"        this._greeter.show();\n"
"\n"
"        // Bind the OK button to the function that closes the popup\n"
"        this._greeter.connect (\"response\", Lang.bind(this, this._okClicked));\n"
"    },\n"
"\n"
"    _okClicked: function () {\n"
"        this._greeter.destroy();\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new EntryExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const EntryExample = new Lang.Class({\n"
"    Name: 'Entry Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsentry',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 100,\n"
"            default_width: 300,\n"
"            border_width: 10,\n"
"            title: \"What is your name?\"});\n"
"\n"
"        // Create the text entry box\n"
"        this.entry = new Gtk.Entry ();\n"
"        this._window.add(this.entry);\n"
"\n"
"        // Connect the text entry box to a function that responds to what you type in\n"
"        this.entry.connect(\"activate\", Lang.bind (this, this._hello));\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _hello: function() {\n"
"\n"
"        // Create a popup dialog to greet the person who types in their name\n"
"        this._greeter = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            text: \"Hello, \" + this.entry.get_text() + \"!\",\n"
"            message_type: Gtk.MessageType.OTHER,\n"
"            buttons: Gtk.ButtonsType.OK,\n"
"        });\n"
"\n"
"        // Show the popup dialog\n"
"        this._greeter.show();\n"
"\n"
"        // Bind the OK button to the function that closes the popup\n"
"        this._greeter.connect (\"response\", Lang.bind(this, this._okClicked));\n"
"    },\n"
"\n"
"    _okClicked: function () {\n"
"        this._greeter.destroy();\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new EntryExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/entry.js.page:32
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Entry.html"
"\">Gtk.Entry</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Entry.html"
"\">Gtk.Entry</link>"

#. (itstool) path: info/title
#: C/entry.py.page:8
msgctxt "text"
msgid "Entry (Python)"
msgstr "Entry(Python)"

#. (itstool) path: credit/name
#: C/entry.py.page:21 C/label.py.page:22 C/model-view-controller.py.page:16
#: C/properties.py.page:16 C/signals-callbacks.py.page:16 C/strings.py.page:16
#: C/textview.py.page:16 C/toolbar_builder.py.page:28
msgid "Sebastian Pölsterl"
msgstr "Sebastian Pölsterl"

#. (itstool) path: credit/years
#: C/entry.py.page:23 C/index.page:20 C/model-view-controller.py.page:18
#: C/properties.py.page:18 C/signals-callbacks.py.page:18 C/strings.py.page:18
#: C/textview.py.page:18 C/toolbar_builder.py.page:30
msgid "2011"
msgstr "2011"

#. (itstool) path: page/p
#: C/entry.py.page:30
msgid "This application greets you in the terminal with the name you provide."
msgstr "이 프로그램은 터미널에 입력한 이름과 함께 인사를 출력합니다."

#. (itstool) path: section/code
#: C/entry.py.page:36
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"What is your name?\", application=app)\n"
"        self.set_default_size(300, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a single line entry\n"
"        name_box = Gtk.Entry()\n"
"        # emits a signal when the Enter key is pressed, connected to the\n"
"        # callback function cb_activate\n"
"        name_box.connect(\"activate\", self.cb_activate)\n"
"\n"
"        # add the Gtk.Entry to the window\n"
"        self.add(name_box)\n"
"\n"
"    # the content of the entry is used to write in the terminal\n"
"    def cb_activate(self, entry):\n"
"        # retrieve the content of the widget\n"
"        name = entry.get_text()\n"
"        # print it in a nice form in the terminal\n"
"        print(\"Hello \" + name + \"!\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"What is your name?\", application=app)\n"
"        self.set_default_size(300, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a single line entry\n"
"        name_box = Gtk.Entry()\n"
"        # emits a signal when the Enter key is pressed, connected to the\n"
"        # callback function cb_activate\n"
"        name_box.connect(\"activate\", self.cb_activate)\n"
"\n"
"        # add the Gtk.Entry to the window\n"
"        self.add(name_box)\n"
"\n"
"    # the content of the entry is used to write in the terminal\n"
"    def cb_activate(self, entry):\n"
"        # retrieve the content of the widget\n"
"        name = entry.get_text()\n"
"        # print it in a nice form in the terminal\n"
"        print(\"Hello \" + name + \"!\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
"수\n"

#. (itstool) path: section/title
#: C/entry.py.page:40
msgid "Useful methods for an Entry widget"
msgstr "Entry 위젯에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/entry.py.page:41
msgid ""
"In line 14 the signal <code>\"activate\"</code> is connected to the callback "
"function <code>cb_activate()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation. Some of the "
"signals that a Gtk.Entry widget can emit are: <code>\"activate\"</code> "
"(emitted when the user activates the Entry key); <code>\"backspace\"</code> "
"(emitted when the user activates the Backspace or Shift-Backspace keys); "
"<code>\"copy-clipboard\"</code> (Ctrl-c and Ctrl-Insert); <code>\"paste-"
"clipboard\"</code> (Ctrl-v and Shift-Insert); <code>\"delete-from-cursor\"</"
"code> (Delete, for deleting a character; Ctrl-Delete, for deleting a word); "
"<code>\"icon-press\"</code> (emitted when the user clicks an activatable "
"icon); <code>\"icon-release\"</code> (emitted on the button release from a "
"mouse click over an activatable icon); <code>\"insert-at-cursor\"</code> "
"(emitted when the user initiates the insertion of a fixed string at the "
"cursor); <code>\"move-cursor\"</code> (emitted when the user initiates a "
"cursor movement); <code>\"populate-popup\"</code> (emitted before showing "
"the context menu of the entry; it can be used to add items to it)."
msgstr ""
"14번째 줄에서 <code>\"activate\"</code> 시그널은 <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code> 콜백 함수에 "
"연결했습니다. 콜백 함수에 연결했습니다. 더 자세한 설명은 <link xref="
"\"signals-callbacks.py\"/>를 참조하십시오. Gtk.Entry 위젯에서 나타날 수 있는 "
"일부 시그널은 <code>\"activate\"</code> (사용자가 Entry 키를 눌렀을 때 나타"
"남), <code>\"backspace\"</code> (사용자가 Backspace 또는 Shift-Backspace 키"
"를 눌렀을 때 나타남), <code>\"copy-clipboard\"</code> (Ctrl-c와 Ctrl-Insert키"
"를 눌렀을 때), <code>\"paste-clipboard\"</code> (Ctrl-v와 Shift-Insert 키를 "
"눌렀을 때), <code>\"delete-from-cursor\"</code> (문자를 지울 때 Delete 키를 "
"눌렀을 때, 단어를 지울 경우 Ctrl-Delete키를 눌렀을 때) <code>\"icon-press\"</"
"code> (사용자가 활성화할 수 있는 아이콘을 눌렀을 때 나타남), <code>\"icon-"
"release\"</code> (사용자가 활성화할 수 있는 아이콘을 누른 상황에서 마우스 커"
"서를 그 위에 두고 단추를 뗐을 때 나타남), <code>\"insert-at-cursor\"</code> "
"(사용자가 커서 위치에 지정 문자열을 넣기 시작할 때 나타남), <code>\"move-"
"cursor\"</code> (사용자가 커서 이동을 시작할 때 나타남), <code>\"populate-"
"popup\"</code> (항목의 단축 메뉴를 나타내기 전에 나타남. 단축 메뉴에 항목을 "
"추가할 때 사용할 수 있습니다)이 있습니다."

#. (itstool) path: item/p
#: C/entry.py.page:43
msgid ""
"<code>get_buffer()</code> and <code>set_buffer(buffer)</code>, where "
"<code>buffer</code> is a Gtk.EntryBuffer object, can be used to get and set "
"the buffer for the entry."
msgstr ""
"<code>get_buffer()</code>와 <code>set_buffer(buffer)</code>는 항목의 버퍼를 "
"가져오거나 설정할 때 사용할 수 있으며, <code>buffer</code> 자리에는 Gtk."
"EntryBuffer 객체가 들어갑니다."

#. (itstool) path: item/p
#: C/entry.py.page:44
msgid ""
"<code>get_text()</code> and <code>set_text(\"some text\")</code> can be used "
"to get and set the content for the entry."
msgstr ""
"<code>get_text()</code>와 <code>set_text(\"some text\")</code>는 항목의 텍스"
"트 내용을 가져오고 설정할 때 사용할 수 있습니다."

#. (itstool) path: item/p
#: C/entry.py.page:45
msgid "<code>get_text_length()</code> is self-explanatory."
msgstr "<code>get_text_length()</code> 메서드는 이름 그대로 동작합니다."

#. (itstool) path: item/p
#: C/entry.py.page:46
msgid ""
"<code>get_text_area()</code> gets the area where the entry's text is drawn."
msgstr ""
"<code>get_text_area()</code>는 항목 텍스트를 그린 영역(크기)를 가져옵니다."

#. (itstool) path: item/p
#: C/entry.py.page:47
msgid ""
"If we set <code>set_visibility(False)</code> the characters in the entry are "
"displayed as the invisible char. This is the best available in the current "
"font, but it can be changed with <code>set_invisible_char(ch)</code>, where "
"<code>ch</code> is a Unicode charcater. The latter method is reversed by "
"<code>unset_invisbile_char()</code>."
msgstr ""
"<code>set_visibility(False)</code>를 설정하면 항목에 나타난 문자를 숨깁니다. "
"현재 글꼴로 나타내는게 가장 좋지만, <code>set_invisible_char(ch)</code>로 특"
"정 글자를 숨길 수 있으며, <code>ch</code> 자리에는 유니코드 문자가 들어갑니"
"다. 마지막 메서드의 반대 역할을 하는 메서드는 <code>unset_invisbile_char()</"
"code>입니다."

#. (itstool) path: item/p
#: C/entry.py.page:48
msgid ""
"<code>set_max_length(int)</code>, where <code>int</code> is an integer, "
"truncates every entry longer than <code>int</code> to have the desired "
"maximum length."
msgstr ""
"<code>set_max_length(int)</code> 함수는 항목이 최대 결정 길이 <code>int</"
"code>를 넘으면 자르며, <code>int</code> 값은 정수형입니다."

#. (itstool) path: item/p
#: C/entry.py.page:49
msgid ""
"By default, if you press the Entry key the Gtk.Entry emits the signal <code>"
"\"activate\"</code>. If you would like to activate the default widget for "
"the window (set using <code>set_default(widget)</code> on the window), then "
"use <code>set_activates_default(True)</code>."
msgstr ""
"기본적으로 Entry 키를 누르면 <code>\"activate\"</code> 시그널을 내보냅니다. "
"창의 기본 위젯으로 활성화하려면(창에서 <code>set_default(widget)</code> 메서"
"드 호출), <code>set_activates_default(True)</code> 메서드를 호출하십시오."

#. (itstool) path: item/p
#: C/entry.py.page:50
msgid "To set a frame around the entry: <code>set_has_frame(True)</code>."
msgstr ""
"항목에 테두리를 설정하려면 <code>set_has_frame(True)</code>를 실행하십시오."

#. (itstool) path: item/p
#: C/entry.py.page:51
msgid ""
"<code>set_placeholder_text(\"some text\")</code> sets the text to be "
"displayed in the entry when it is empty and unfocused."
msgstr ""
"<code>set_placeholder_text(\"some text\")</code> 메서드는 항목이 비어있으며 "
"포커스를 주지 않았을 경우 나타낼 텍스트를 설정합니다."

#. (itstool) path: item/p
#: C/entry.py.page:52
msgid ""
"<code>set_overwrite_mode(True)</code> and <code>set_overwrite_mode(False)</"
"code> are self-explanatory."
msgstr ""
"<code>set_overwrite_mode(True)</code>및 <code>set_overwrite_mode(False)</"
"code> 메서드는 이름 그대로 동작합니다."

#. (itstool) path: item/p
#: C/entry.py.page:53
msgid ""
"If we have <code>set_editable(False)</code> the user cannot edit the text in "
"the widget."
msgstr ""
"<code>set_editable(False)</code> 메서드를 호출하면 사용자가 위젯의 텍스트를 "
"편집할 수 없습니다."

#. (itstool) path: item/p
#: C/entry.py.page:54
msgid ""
"<code>set_completion(completion)</code>, where <code>completion</code> is a "
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkEntryCompletion.html"
"\"><code>Gtk.EntryCompletion</code></link>, sets completion - or disables it "
"if <code>completion</code> is <code>None</code>."
msgstr ""
"<code>completion</code>이 <link href=\"http://developer.gnome.org/gtk3/"
"unstable/GtkEntryCompletion.html\"><code>Gtk.EntryCompletion</code></link>인 "
"<code>set_completion(completion)</code> 함수는 <code>completion</code> 값이 "
"<code>None</code>일 경우 completion 값을 설정하거나 비활성화합니다."

#. (itstool) path: item/p
#: C/entry.py.page:55
msgid ""
"An Entry widget can display progress or activity information behind the "
"text. We use <code>set_progress_fraction(fraction)</code>, where "
"<code>fraction</code> is a <code>float</code> between <code>0.0</code> and "
"<code>1.0</code> inclusive, to fill in the given fraction of the bar. We use "
"<code>set_progress_pulse_step()</code> to set the fraction of total entry "
"width to move the progress bouncing block for each call to "
"<code>progress_pulse()</code>. The latter method indicates that some "
"progress is made, and causes the progress indicator of the entry to enter "
"\"activity mode\", where a block bounces back and forth. Each call to "
"<code>progress_pulse()</code> causes the block to move by a little bit (the "
"amount of movement per pulse is determined, as said before, by "
"<code>set_progress_pulse_step()</code>)."
msgstr ""
"항목 위젯에는 화면에 나타난 텍스트 이면의 진행 상황 또는 활동 정보를 나타낼 "
"수 있습니다. 진행 표시줄 막대에 비율을 주어 채워넣을 목적으로 "
"<code>set_progress_fraction(fraction)</code> 함수를 사용하며, 여기서 "
"<code>fraction</code> 은 <code>0.0</code> 과 <code>1.0</code> 사이의 "
"<code>float</code> 값입니다. <code>progress_pulse()</code>를 호출할 때마다 진"
"행 표시줄 바운싱 블록을 이동할 전체 항목 너비 비율을 설정할 때 "
"<code>set_progress_pulse_step()</code> 함수를 사용합니다. 후자 함수는 일부 진"
"행 과정을 끝냈고 블록이 앞뒤로 튀는 항목의 진행 상황 표시자가 \"활동 모드"
"\"로 들어감을 나타냅니다. 각각의 함수는 <code>progress_pulse()</code>를 호출"
"하여블록을 약간씩 움직이게 합니다(앞에서 말한 바와 같이 "
"<code>set_progress_pulse_step()</code> 함수로 주기당 움직이는 정도를 결정합니"
"다)."

#. (itstool) path: item/p
#: C/entry.py.page:56
msgid ""
"An Entry widget can also show icons. These icons can be activatable by "
"clicking, can be set up as drag source and can have tooltips. To add an "
"icon, use <code>set_icon_from_stock(icon_position, stock_id)</code>, or one "
"of <code>set_icon_from_pixbuf(icon_position, pixbuf)</code>, "
"<code>set_icon_from_icon_name(icon_position, icon_name)</code>, where "
"<code>icon_position</code> is one of <code>Gtk.EntryIconPosition.PRIMARY</"
"code> (to set the icon at the beginning of the entry) <code>Gtk."
"EntryIconPosition.SECONDARY</code> (to set the icon at the end of the "
"entry). To set a tooltip on an icon, use "
"<code>set_icon_tooltip_text(\"tooltip text\")</code> or "
"<code>set_icon_tooltip_markup(\"tooltip text in Pango markup language\")</"
"code>."
msgstr ""
"항목 위젯은 아이콘을 나타낼 수도 있습니다. 이 아이콘은 눌렀을 떄 활성화할 수 "
"있는데, 끌어다 놓을 수 있게 할 수 있으며, 풍선 도움말을 설정할 수도 있습니"
"다. 아이콘을 추가하려면 <code>set_icon_from_stock(icon_position, stock_id)</"
"code> 또는 <code>set_icon_from_pixbuf(icon_position, pixbuf)</code>, "
"<code>set_icon_from_icon_name(icon_position, icon_name)</code> 둘 중 하나를 "
"사용하시면 되며 <code>icon_position</code> 에는 <code>Gtk.EntryIconPosition."
"PRIMARY</code> (항목 시작 부분에 아이콘 위치) <code>Gtk.EntryIconPosition."
"SECONDARY</code> (항목 뒷 부분에 아이콘 위치) 값 중 하나가 들어갑니다 아이콘"
"에 풍선 도움말을 설정하려면, <code>set_icon_tooltip_text(\"풍선 도움말 문장"
"\")</code> 또는 <code>set_icon_tooltip_markup(\"팡고 마크업 언어를 사용한 풍"
"선 도움말 문장\")</code> 함수를 사용하십시오."

#. (itstool) path: item/p
#: C/entry.py.page:64
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkEntry.html"
"\">GtkEntry</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkEntry.html"
"\">GtkEntry</link>"

#. (itstool) path: info/title
#: C/entry.vala.page:8
msgctxt "text"
msgid "Entry (Vala)"
msgstr "Entry(Vala)"

#. (itstool) path: page/code
#: C/entry.vala.page:25
#, no-wrap
msgid ""
"/* A window in the application. */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"What is your name?\");\n"
"\n"
"\t\tvar name_box = new Gtk.Entry ();\n"
"\n"
"\t\t/* Connect to the signal handler. */\n"
"\t\tname_box.activate.connect (this.on_activate);\n"
"\t\tname_box.show ();\n"
"\n"
"\t\tthis.set_default_size (300, 100);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\t/* Add the name_box to this window. */\n"
"\t\tthis.add (name_box);\n"
"\t}\n"
"\n"
"\t/* Signal handler (aka. callback function) for the 'activate'\n"
"\t * signal of a Gtk.Entry.\n"
"\t */\n"
"\tvoid on_activate (Gtk.Entry entry) {\n"
"\t\tname = entry.get_text ();\n"
"\t\tprint (\"\\nHello \" + name + \"!\\n\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application. */\n"
"class MyApplication : Gtk.Application {\n"
"\n"
"\t/* Constructor for the application. */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create a new window for this application\n"
"\t\t * and show it. */\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"}\n"
"\n"
"/* The main function creates and runs the application. */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* A window in the application. */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"What is your name?\");\n"
"\n"
"\t\tvar name_box = new Gtk.Entry ();\n"
"\n"
"\t\t/* Connect to the signal handler. */\n"
"\t\tname_box.activate.connect (this.on_activate);\n"
"\t\tname_box.show ();\n"
"\n"
"\t\tthis.set_default_size (300, 100);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\t/* Add the name_box to this window. */\n"
"\t\tthis.add (name_box);\n"
"\t}\n"
"\n"
"\t/* Signal handler (aka. callback function) for the 'activate'\n"
"\t * signal of a Gtk.Entry.\n"
"\t */\n"
"\tvoid on_activate (Gtk.Entry entry) {\n"
"\t\tname = entry.get_text ();\n"
"\t\tprint (\"\\nHello \" + name + \"!\\n\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application. */\n"
"class MyApplication : Gtk.Application {\n"
"\n"
"\t/* Constructor for the application. */\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create a new window for this application\n"
"\t\t * and show it. */\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"}\n"
"\n"
"/* The main function creates and runs the application. */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/entry.vala.page:30
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Entry.html\">Gtk.Entry</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Entry.html\">Gtk.Entry</"
"link>"

#. (itstool) path: info/title
#: C/filechooserdialog.py.page:8
msgctxt "text"
msgid "FileChooserDialog (Python)"
msgstr "FileChooserDialog(Python)"

#. (itstool) path: info/desc
#: C/filechooserdialog.py.page:22
msgid "A dialog suitable for \"Open\" and \"Save\" commands"
msgstr "\"열기\" 및 \"저장\" 명령에 알맞은 대화상자"

#. (itstool) path: page/title
#: C/filechooserdialog.py.page:25 C/filechooserdialog.vala.page:24
msgid "FileChooserDialog"
msgstr "FileChooserDialog"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/filechooserdialog.py.page:26
msgctxt "_"
msgid ""
"external ref='media/filechooserdialog_save.png' "
"md5='3a7a3b71b9d3a36066857843b68ff27f'"
msgstr ""

#. (itstool) path: page/p
#: C/filechooserdialog.py.page:27
msgid ""
"This FileChooserDialog saves a text document, which can be opened or written "
"from scratch in a TextView (see below)."
msgstr ""
"FileChooserDialog는 TextView에 열었거나 바닥부터 새로 작성한 텍스트 문서를 저"
"장합니다(하단 참고)."

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/filechooserdialog.py.page:28
msgctxt "_"
msgid ""
"external ref='media/filechooserdialog_menu.png' "
"md5='8a75f04127a70eba0ed68a9eb1d3bbca'"
msgstr ""

#. (itstool) path: page/p
#: C/filechooserdialog.py.page:29
msgid "It is also possible to call a FileChooserDialog to open a new document."
msgstr "새 문서를 열 때 FileChooserDialog를 호출할 수 있습니다."

#. (itstool) path: section/title
#: C/filechooserdialog.py.page:34
msgid "Steps to recreate the example"
msgstr "예제를 다시 만드는 과정"

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:36
msgid ""
"Create a file .ui to describe an app-menu with items \"New\", \"Open\", "
"\"Save\", \"Save as\", and \"Quit\". This can be done with Glade or in a "
"text editor. See <link xref=\"#xml\"/>"
msgstr ""
"\"New\", \"Open\", \"Save\", \"Save as\", \"Quit\" 항목이 들어간 app-menu 설"
"명 .ui 파일을 만드십시오. 글레이드 개발 환경이나 텍스트 편집기에서 처리할 수 "
"있습니다. <link xref=\"#xml\"/> 내용을 참고하십시오."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:37
msgid ""
"Create a Python program for a Gtk.TextView with a Gtk.Buffer <code>self."
"buffer</code>, and a <code>self.file</code> which will be a Gio.File and we "
"set initially as <code>None</code>."
msgstr ""
"Gtk.TextViewGtk.Buffer <code>self.buffer</code>와 <code>None</code>으로 초기"
"값을 설정한 Gio.File 형식의 <code>self.file</code> 로 Gtk.TextView 파이썬 프"
"로그램을 만드십시오."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:38
msgid ""
"In this program, create also the actions corresponding to the items in the "
"app-menu, connect them to callback functions, and import the menu in the "
"<code>do_startup()</code> method with a Gtk.Builder."
msgstr ""
"이 프로그램에서 app-menu에 항목마다 관련 동작을 만드시고, 콜백 함수에 연결하"
"신 다음, Gtk.Builder의 <code>do_startup()</code> 메서드로 메뉴를 가져오십시"
"오."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:39
msgid ""
"\"New\" and \"Quit\" actions and callback functions are quite "
"straightforward, see <link xref=\"#code\"/>. See <link xref=\"signals-"
"callbacks.py\"/> for a more detailed explanation of signals and callback "
"functions."
msgstr ""
"\"새 파일\" 및 \"끝내기\" 동작과 콜백 함수는 조금 단순합니다. <link xref="
"\"#code\"/>를 참고해보시죠. 시그널 및 콜백 함수에 대한 자세한 설명은 <link "
"xref=\"signals-callbacks.py\"/>를 살펴보십시오."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:40
msgid ""
"\"Open\" callback should create and open a Gtk.FileChooserDialog for \"Open"
"\", connected with another callback function for each of the two \"Open\" "
"and \"Cancel\" buttons of the FileChooserDialog."
msgstr ""
"\"열기\" 콜백 함수에서는 \"열기\" 동작에 맞게 Gtk.FileChooserDialog를 만들고 "
"연 다음, FileChooserDialog의 \"열기\" 및 \"취소\" 단추에 제각기 다른 콜백 함"
"수를 연결해야합니다."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:41
msgid ""
"\"Save as\" works basically as \"Open\", but the callback function of the "
"\"Save\" button depends on a more complex method <code>save_to_file()</code>."
msgstr ""
"\"다른 이름으로 저장\"은 \"열기\"와 근본적으로 비슷하게 동작하지만, \"저장\" "
"단추의 콜백 함수 동작은 좀 더 복잡한 메서드 <code>save_to_file()</code>에 따"
"릅니다."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:42
msgid ""
"\"Save\" can be reduced to the case where the file is <code>None</code>, "
"that is the case where <code>self.file</code> is a new file, which in turn "
"is the case \"Save as\"; and to the case where the file is not <code>None</"
"code>, which in turn is reduced to <code>save_to_file()</code>."
msgstr ""
"\"저장\" 동작은, <code>self.file</code> 이 새 파일이어서 파일이 <code>None</"
"code>(없음)일 경우로 경우의 수를 줄일 수 있으며, 이때는 \"다른 이름으로 저장"
"\"인 경우로 되돌릴 수 있습니다. 그리고 파일이 <code>None</code>(없음) 상태가 "
"아닐 경우, <code>save_to_file()</code> 호출만으로 과정을 줄입니다."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:43
msgid ""
"Finally, the method <code>save_to_file()</code>: see <link xref=\"#code\"/>, "
"lines 146 - 175."
msgstr ""
"마지막으로, <code>save_to_file()</code> 메서드는 <link xref=\"#code\"/> 146번"
"째 줄부터 175번째 줄 까지의 부분을 참고하십시오."

#. (itstool) path: section/title
#: C/filechooserdialog.py.page:48
msgid "XML file which creates the app-menu"
msgstr "app-menu를 만드는 XML 파일"

#. (itstool) path: section/code
#: C/filechooserdialog.py.page:49 C/filechooserdialog.vala.page:30
#, no-wrap
msgid ""
"&lt;?xml version=\"1.0\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"appmenu\"&gt;\n"
"    &lt;section&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;win.new&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Open&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;win.open&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"    &lt;/section&gt;\n"
"    &lt;section&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Save&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;win.save&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Save As...&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;win.save-as&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"    &lt;/section&gt;\n"
"    &lt;section&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Quit&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"    &lt;/section&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;\n"
msgstr ""
"&lt;?xml version=\"1.0\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"appmenu\"&gt;\n"
"    &lt;section&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;win.new&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Open&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;win.open&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"    &lt;/section&gt;\n"
"    &lt;section&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Save&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;win.save&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Save As...&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;win.save-as&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"    &lt;/section&gt;\n"
"    &lt;section&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Quit&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"    &lt;/section&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;\n"

#. (itstool) path: section/code
#: C/filechooserdialog.py.page:54
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"from gi.repository import Gio\n"
"from gi.repository import GObject\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(\n"
"            self, title=\"FileChooserDialog Example\", application=app)\n"
"        self.set_default_size(400, 400)\n"
"\n"
"        # the actions for the window menu, connected to the callback functions\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        self.add_action(new_action)\n"
"\n"
"        open_action = Gio.SimpleAction.new(\"open\", None)\n"
"        open_action.connect(\"activate\", self.open_callback)\n"
"        self.add_action(open_action)\n"
"\n"
"        save_action = Gio.SimpleAction.new(\"save\", None)\n"
"        save_action.connect(\"activate\", self.save_callback)\n"
"        self.add_action(save_action)\n"
"\n"
"        save_as_action = Gio.SimpleAction.new(\"save-as\", None)\n"
"        save_as_action.connect(\"activate\", self.save_as_callback)\n"
"        self.add_action(save_as_action)\n"
"\n"
"        # the file\n"
"        self.file = None\n"
"\n"
"        # the textview with the buffer\n"
"        self.buffer = Gtk.TextBuffer()\n"
"        textview = Gtk.TextView(buffer=self.buffer)\n"
"        textview.set_wrap_mode(Gtk.WrapMode.WORD)\n"
"\n"
"        # a scrolled window for the textview\n"
"        self.scrolled_window = Gtk.ScrolledWindow()\n"
"        self.scrolled_window.set_policy(\n"
"            Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)\n"
"        self.scrolled_window.add(textview)\n"
"        self.scrolled_window.set_border_width(5)\n"
"\n"
"        # add the scrolled window to the window\n"
"        self.add(self.scrolled_window)\n"
"\n"
"    # callback for new\n"
"    def new_callback(self, action, parameter):\n"
"        self.buffer.set_text(\"\")\n"
"        print(\"New file created\")\n"
"\n"
"    # callback for open\n"
"    def open_callback(self, action, parameter):\n"
"        # create a filechooserdialog to open:\n"
"        # the arguments are: title of the window, parent_window, action,\n"
"        # (buttons, response)\n"
"        open_dialog = Gtk.FileChooserDialog(\"Pick a file\", self,\n"
"                                            Gtk.FileChooserAction.OPEN,\n"
"                                           (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,\n"
"                                            Gtk.STOCK_OPEN, Gtk.ResponseType.ACCEPT))\n"
"\n"
"        # not only local files can be selected in the file selector\n"
"        open_dialog.set_local_only(False)\n"
"        # dialog always on top of the textview window\n"
"        open_dialog.set_modal(True)\n"
"        # connect the dialog with the callback function open_response_cb()\n"
"        open_dialog.connect(\"response\", self.open_response_cb)\n"
"        # show the dialog\n"
"        open_dialog.show()\n"
"\n"
"    # callback function for the dialog open_dialog\n"
"    def open_response_cb(self, dialog, response_id):\n"
"        open_dialog = dialog\n"
"        # if response is \"ACCEPT\" (the button \"Open\" has been clicked)\n"
"        if response_id == Gtk.ResponseType.ACCEPT:\n"
"            # self.file is the file that we get from the FileChooserDialog\n"
"            self.file = open_dialog.get_file()\n"
"            # an empty string (provisionally)\n"
"            content = \"\"\n"
"            try:\n"
"                # load the content of the file into memory:\n"
"                # success is a boolean depending on the success of the operation\n"
"                # content is self-explanatory\n"
"                # etags is an entity tag (can be used to quickly determine if the\n"
"                # file has been modified from the version on the file system)\n"
"                [success, content, etags] = self.file.load_contents(None)\n"
"            except GObject.GError as e:\n"
"                print(\"Error: \" + e.message)\n"
"            # set the content as the text into the buffer\n"
"            self.buffer.set_text(content, len(content))\n"
"            print(\"opened: \" + open_dialog.get_filename())\n"
"        # if response is \"CANCEL\" (the button \"Cancel\" has been clicked)\n"
"        elif response_id == Gtk.ResponseType.CANCEL:\n"
"            print(\"cancelled: FileChooserAction.OPEN\")\n"
"        # destroy the FileChooserDialog\n"
"        dialog.destroy()\n"
"\n"
"    # callback function for save_as\n"
"    def save_as_callback(self, action, parameter):\n"
"        # create a filechooserdialog to save:\n"
"        # the arguments are: title of the window, parent_window, action,\n"
"        # (buttons, response)\n"
"        save_dialog = Gtk.FileChooserDialog(\"Pick a file\", self,\n"
"                                            Gtk.FileChooserAction.SAVE,\n"
"                                           (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,\n"
"                                            Gtk.STOCK_SAVE, Gtk.ResponseType.ACCEPT))\n"
"        # the dialog will present a confirmation dialog if the user types a file name that\n"
"        # already exists\n"
"        save_dialog.set_do_overwrite_confirmation(True)\n"
"        # dialog always on top of the textview window\n"
"        save_dialog.set_modal(True)\n"
"        # if self.file has already been saved\n"
"        if self.file is not None:\n"
"            try:\n"
"                # set self.file as the current filename for the file chooser\n"
"                save_dialog.set_file(self.file)\n"
"            except GObject.GError as e:\n"
"                print(\"Error: \" + e.message)\n"
"        # connect the dialog to the callback function save_response_cb()\n"
"        save_dialog.connect(\"response\", self.save_response_cb)\n"
"        # show the dialog\n"
"        save_dialog.show()\n"
"\n"
"    # callback function for the dialog save_dialog\n"
"    def save_response_cb(self, dialog, response_id):\n"
"        save_dialog = dialog\n"
"        # if response is \"ACCEPT\" (the button \"Save\" has been clicked)\n"
"        if response_id == Gtk.ResponseType.ACCEPT:\n"
"            # self.file is the currently selected file\n"
"            self.file = save_dialog.get_file()\n"
"            # save to file (see below)\n"
"            self.save_to_file()\n"
"        # if response is \"CANCEL\" (the button \"Cancel\" has been clicked)\n"
"        elif response_id == Gtk.ResponseType.CANCEL:\n"
"            print(\"cancelled: FileChooserAction.SAVE\")\n"
"        # destroy the FileChooserDialog\n"
"        dialog.destroy()\n"
"\n"
"    # callback function for save\n"
"    def save_callback(self, action, parameter):\n"
"        # if self.file is not already there\n"
"        if self.file is not None:\n"
"            self.save_to_file()\n"
"        # self.file is a new file\n"
"        else:\n"
"            # use save_as\n"
"            self.save_as_callback(action, parameter)\n"
"\n"
"    # save_to_file\n"
"    def save_to_file(self):\n"
"        # get the content of the buffer, without hidden characters\n"
"        [start, end] = self.buffer.get_bounds()\n"
"        current_contents = self.buffer.get_text(start, end, False)\n"
"        # if there is some content\n"
"        if current_contents != \"\":\n"
"            # set the content as content of self.file.\n"
"            # arguments: contents, etags, make_backup, flags, GError\n"
"            try:\n"
"                self.file.replace_contents(current_contents,\n"
"                                           None,\n"
"                                           False,\n"
"                                           Gio.FileCreateFlags.NONE,\n"
"                                           None)\n"
"                print(\"saved: \" + self.file.get_path())\n"
"            except GObject.GError as e:\n"
"                print(\"Error: \" + e.message)\n"
"        # if the contents are empty\n"
"        else:\n"
"            # create (if the file does not exist) or overwrite the file in readwrite mode.\n"
"            # arguments: etags, make_backup, flags, GError\n"
"            try:\n"
"                self.file.replace_readwrite(None,\n"
"                                            False,\n"
"                                            Gio.FileCreateFlags.NONE,\n"
"                                            None)\n"
"                print(\"saved: \" + self.file.get_path())\n"
"            except GObject.GError as e:\n"
"                print(\"Error: \" + e.message)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # app action quit, connected to the callback function\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_callback)\n"
"        self.add_action(quit_action)\n"
"\n"
"        # get the menu from the ui file with a builder\n"
"        builder = Gtk.Builder()\n"
"        try:\n"
"            builder.add_from_file(\"filechooserdialog.ui\")\n"
"        except:\n"
"            print(\"file not found\")\n"
"            sys.exit()\n"
"        menu = builder.get_object(\"appmenu\")\n"
"        self.set_app_menu(menu)\n"
"\n"
"    # callback function for quit\n"
"    def quit_callback(self, action, parameter):\n"
"        self.quit()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"from gi.repository import Gio\n"
"from gi.repository import GObject\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(\n"
"            self, title=\"FileChooserDialog Example\", application=app)\n"
"        self.set_default_size(400, 400)\n"
"\n"
"        # the actions for the window menu, connected to the callback functions\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        self.add_action(new_action)\n"
"\n"
"        open_action = Gio.SimpleAction.new(\"open\", None)\n"
"        open_action.connect(\"activate\", self.open_callback)\n"
"        self.add_action(open_action)\n"
"\n"
"        save_action = Gio.SimpleAction.new(\"save\", None)\n"
"        save_action.connect(\"activate\", self.save_callback)\n"
"        self.add_action(save_action)\n"
"\n"
"        save_as_action = Gio.SimpleAction.new(\"save-as\", None)\n"
"        save_as_action.connect(\"activate\", self.save_as_callback)\n"
"        self.add_action(save_as_action)\n"
"\n"
"        # the file\n"
"        self.file = None\n"
"\n"
"        # the textview with the buffer\n"
"        self.buffer = Gtk.TextBuffer()\n"
"        textview = Gtk.TextView(buffer=self.buffer)\n"
"        textview.set_wrap_mode(Gtk.WrapMode.WORD)\n"
"\n"
"        # a scrolled window for the textview\n"
"        self.scrolled_window = Gtk.ScrolledWindow()\n"
"        self.scrolled_window.set_policy(\n"
"            Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)\n"
"        self.scrolled_window.add(textview)\n"
"        self.scrolled_window.set_border_width(5)\n"
"\n"
"        # add the scrolled window to the window\n"
"        self.add(self.scrolled_window)\n"
"\n"
"    # callback for new\n"
"    def new_callback(self, action, parameter):\n"
"        self.buffer.set_text(\"\")\n"
"        print(\"New file created\")\n"
"\n"
"    # callback for open\n"
"    def open_callback(self, action, parameter):\n"
"        # create a filechooserdialog to open:\n"
"        # the arguments are: title of the window, parent_window, action,\n"
"        # (buttons, response)\n"
"        open_dialog = Gtk.FileChooserDialog(\"Pick a file\", self,\n"
"                                            Gtk.FileChooserAction.OPEN,\n"
"                                           (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,\n"
"                                            Gtk.STOCK_OPEN, Gtk.ResponseType.ACCEPT))\n"
"\n"
"        # not only local files can be selected in the file selector\n"
"        open_dialog.set_local_only(False)\n"
"        # dialog always on top of the textview window\n"
"        open_dialog.set_modal(True)\n"
"        # connect the dialog with the callback function open_response_cb()\n"
"        open_dialog.connect(\"response\", self.open_response_cb)\n"
"        # show the dialog\n"
"        open_dialog.show()\n"
"\n"
"    # callback function for the dialog open_dialog\n"
"    def open_response_cb(self, dialog, response_id):\n"
"        open_dialog = dialog\n"
"        # if response is \"ACCEPT\" (the button \"Open\" has been clicked)\n"
"        if response_id == Gtk.ResponseType.ACCEPT:\n"
"            # self.file is the file that we get from the FileChooserDialog\n"
"            self.file = open_dialog.get_file()\n"
"            # an empty string (provisionally)\n"
"            content = \"\"\n"
"            try:\n"
"                # load the content of the file into memory:\n"
"                # success is a boolean depending on the success of the operation\n"
"                # content is self-explanatory\n"
"                # etags is an entity tag (can be used to quickly determine if the\n"
"                # file has been modified from the version on the file system)\n"
"                [success, content, etags] = self.file.load_contents(None)\n"
"            except GObject.GError as e:\n"
"                print(\"Error: \" + e.message)\n"
"            # set the content as the text into the buffer\n"
"            self.buffer.set_text(content, len(content))\n"
"            print(\"opened: \" + open_dialog.get_filename())\n"
"        # if response is \"CANCEL\" (the button \"Cancel\" has been clicked)\n"
"        elif response_id == Gtk.ResponseType.CANCEL:\n"
"            print(\"cancelled: FileChooserAction.OPEN\")\n"
"        # destroy the FileChooserDialog\n"
"        dialog.destroy()\n"
"\n"
"    # callback function for save_as\n"
"    def save_as_callback(self, action, parameter):\n"
"        # create a filechooserdialog to save:\n"
"        # the arguments are: title of the window, parent_window, action,\n"
"        # (buttons, response)\n"
"        save_dialog = Gtk.FileChooserDialog(\"Pick a file\", self,\n"
"                                            Gtk.FileChooserAction.SAVE,\n"
"                                           (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,\n"
"                                            Gtk.STOCK_SAVE, Gtk.ResponseType.ACCEPT))\n"
"        # the dialog will present a confirmation dialog if the user types a file name that\n"
"        # already exists\n"
"        save_dialog.set_do_overwrite_confirmation(True)\n"
"        # dialog always on top of the textview window\n"
"        save_dialog.set_modal(True)\n"
"        # if self.file has already been saved\n"
"        if self.file is not None:\n"
"            try:\n"
"                # set self.file as the current filename for the file chooser\n"
"                save_dialog.set_file(self.file)\n"
"            except GObject.GError as e:\n"
"                print(\"Error: \" + e.message)\n"
"        # connect the dialog to the callback function save_response_cb()\n"
"        save_dialog.connect(\"response\", self.save_response_cb)\n"
"        # show the dialog\n"
"        save_dialog.show()\n"
"\n"
"    # callback function for the dialog save_dialog\n"
"    def save_response_cb(self, dialog, response_id):\n"
"        save_dialog = dialog\n"
"        # if response is \"ACCEPT\" (the button \"Save\" has been clicked)\n"
"        if response_id == Gtk.ResponseType.ACCEPT:\n"
"            # self.file is the currently selected file\n"
"            self.file = save_dialog.get_file()\n"
"            # save to file (see below)\n"
"            self.save_to_file()\n"
"        # if response is \"CANCEL\" (the button \"Cancel\" has been clicked)\n"
"        elif response_id == Gtk.ResponseType.CANCEL:\n"
"            print(\"cancelled: FileChooserAction.SAVE\")\n"
"        # destroy the FileChooserDialog\n"
"        dialog.destroy()\n"
"\n"
"    # callback function for save\n"
"    def save_callback(self, action, parameter):\n"
"        # if self.file is not already there\n"
"        if self.file is not None:\n"
"            self.save_to_file()\n"
"        # self.file is a new file\n"
"        else:\n"
"            # use save_as\n"
"            self.save_as_callback(action, parameter)\n"
"\n"
"    # save_to_file\n"
"    def save_to_file(self):\n"
"        # get the content of the buffer, without hidden characters\n"
"        [start, end] = self.buffer.get_bounds()\n"
"        current_contents = self.buffer.get_text(start, end, False)\n"
"        # if there is some content\n"
"        if current_contents != \"\":\n"
"            # set the content as content of self.file.\n"
"            # arguments: contents, etags, make_backup, flags, GError\n"
"            try:\n"
"                self.file.replace_contents(current_contents,\n"
"                                           None,\n"
"                                           False,\n"
"                                           Gio.FileCreateFlags.NONE,\n"
"                                           None)\n"
"                print(\"saved: \" + self.file.get_path())\n"
"            except GObject.GError as e:\n"
"                print(\"Error: \" + e.message)\n"
"        # if the contents are empty\n"
"        else:\n"
"            # create (if the file does not exist) or overwrite the file in readwrite mode.\n"
"            # arguments: etags, make_backup, flags, GError\n"
"            try:\n"
"                self.file.replace_readwrite(None,\n"
"                                            False,\n"
"                                            Gio.FileCreateFlags.NONE,\n"
"                                            None)\n"
"                print(\"saved: \" + self.file.get_path())\n"
"            except GObject.GError as e:\n"
"                print(\"Error: \" + e.message)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # app action quit, connected to the callback function\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_callback)\n"
"        self.add_action(quit_action)\n"
"\n"
"        # get the menu from the ui file with a builder\n"
"        builder = Gtk.Builder()\n"
"        try:\n"
"            builder.add_from_file(\"filechooserdialog.ui\")\n"
"        except:\n"
"            print(\"file not found\")\n"
"            sys.exit()\n"
"        menu = builder.get_object(\"appmenu\")\n"
"        self.set_app_menu(menu)\n"
"\n"
"    # callback function for quit\n"
"    def quit_callback(self, action, parameter):\n"
"        self.quit()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/filechooserdialog.py.page:58
msgid "Useful methods for a FileChooserDialog"
msgstr "FileChooserDialog에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/filechooserdialog.py.page:59
msgid ""
"Note that the action of the FileChooserDialog can be one of the following: "
"<code>Gtk.FileChooserAction.OPEN</code> (the file chooser will only let the "
"user pick an existing file) <code>Gtk.FileChooserAction.SAVE</code> (the "
"file chooser will let the user pick an existing file, or type in a new "
"filename), <code>Gtk.FileChooserAction.SELECT_FOLDER</code> (the file "
"chooser will let the user pick an existing folder), <code>Gtk."
"FileChooserAction.CREATE_FOLDER</code> (the file chooser will let the user "
"name an existing or new folder)."
msgstr ""
"참고로 FileChooserDialog 동작은 <code>Gtk.FileChooserAction.OPEN</code>(사용"
"자가 기존 파일을 선택하기만 할 수 있음) <code>Gtk.FileChooserAction.SAVE</"
"code>(사용자가 기존 파일을 선택하거나, 새 파일 이름을 입력할 수 있음), "
"<code>Gtk.FileChooserAction.SELECT_FOLDER</code>(사용자가 기존 폴더를 선택하"
"기만 할 수 있음), <code>Gtk.FileChooserAction.CREATE_FOLDER</code>(사용자가 "
"기존 폴더를 선택하거나, 새 폴더 이름을 입력할 수 있음) 중 하나일 수 있습니다."

#. (itstool) path: section/p
#: C/filechooserdialog.py.page:60
msgid "Besides the methods used in the <link xref=\"#code\"/>, we have:"
msgstr "<link xref=\"#code\"/>에서 사용한 메서드 주변을 보자면:"

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:62
msgid ""
"<code>set_show_hidden(True)</code> is used to display hidden files and "
"folders."
msgstr ""
"<code>set_show_hidden(True)</code> 함수로 숨김 파일과 숨김 폴더를 나타냈습니"
"다."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:63
msgid ""
"<code>set_select_multiple(True)</code> sets that multiple files can be "
"selected. This is only relevant if the mode is <code>Gtk.FileChooserAction."
"OPEN</code> or <code>Gtk.FileChooserAction.SELECT_FOLDER</code>."
msgstr ""
"<code>set_select_multiple(True)</code> 함수로 여러 파일을 선택할 수 있게 했습"
"니다. <code>Gtk.FileChooserAction.OPEN</code> 또는 <code>Gtk."
"FileChooserAction.SELECT_FOLDER</code> 모드일 때만 가능합니다."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:64
msgid ""
"In a \"Save as\" dialog, <code>set_current_name(current_name)</code> sets "
"<code>current_name</code> in the file selector, as if entered by the user; "
"<code>current_name</code> can be something like <em>Untitled.txt</em>. This "
"method should not be used except in a \"Save as\" dialog."
msgstr ""
"\"다른 이름으로 저장\" 대화 상자에서 <code>set_current_name(current_name)</"
"code> 함수로 파일 선택 창의 <code>current_name</code>을 마치 사용자가 입력한 "
"것처럼 설정했습니다. <code>current_name</code> 값은 <em>Untitled.txt</em>와 "
"같은 값이 될 수 있습니다. 이 메서드는 \"다른 이름으로 저장\" 대화상자를 제외"
"하고느 사용하지 않는게 좋습니다."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:65
msgid ""
"The default current folder is \"recent items\". To set another folder use "
"<code>set_current_folder_uri(uri)</code>; but note you should use this "
"method and cause the file chooser to show a specific folder only when you "
"are doing a \"Save as\" command and you already have a file saved somewhere."
msgstr ""
"기본 현재 폴더는 \"최근 항목\" 입니다. 다른 폴더를 지정하려면 "
"<code>set_current_folder_uri(uri)</code> 함수를 사용하십시오. 그러나 참고로 "
"\"다른 이름으로 저장\" 명령을 사용하거나 이미 파일을 어딘가에 저장했을 경우에"
"만 이 메서드를 사용하여 파일 선택 대화상자를 통해 지정 폴더를 나타내야합니다."

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:73
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkFileChooserDialog.html"
"\">GtkFileChooserDialog</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkFileChooserDialog.html"
"\">GtkFileChooserDialog</link>"

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:74
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkFileChooser.html"
"\">GtkFileChooser</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkFileChooser.html"
"\">GtkFileChooser</link>"

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:75 C/image.c.page:34 C/label.c.page:38
#: C/menubar.c.page:38 C/scrolledwindow.c.page:35
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkWindow.html"
"\">GtkWindow</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkWindow.html"
"\">GtkWindow</link>"

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:76 C/textview.c.page:39
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkTextView.html"
"\">GtkTextView</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkTextView.html"
"\">GtkTextView</link>"

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:77 C/textview.c.page:38
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkTextBuffer.html"
"\">GtkTextBuffer</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkTextBuffer.html"
"\">GtkTextBuffer</link>"

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:78 C/scrolledwindow.c.page:36
#: C/textview.c.page:40
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkScrolledWindow.html"
"\">GtkScrolledWindow</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkScrolledWindow.html"
"\">GtkScrolledWindow</link>"

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:79
msgid ""
"<link href=\"http://developer.gnome.org/gio/stable/GFile.html\">GFile</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gio/stable/GFile.html\">GFile</link>"

#. (itstool) path: item/p
#: C/filechooserdialog.py.page:81
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkBuilder.html"
"\">GtkBuilder</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkBuilder.html"
"\">GtkBuilder</link>"

#. (itstool) path: info/title
#: C/filechooserdialog.vala.page:8
msgctxt "text"
msgid "FileChooserDialog (Vala)"
msgstr "FileChooserDialog (Vala)"

#. (itstool) path: info/desc
#: C/filechooserdialog.vala.page:21
msgid "A dialog suitable for \"Open\" and \"Save\" commands."
msgstr "\"열기\" 및 \"저장\" 명령에 알맞은 대화상자입니다."

#. (itstool) path: section/title
#: C/filechooserdialog.vala.page:26
msgid "Overview of the example"
msgstr "예제 살펴보기"

#. (itstool) path: section/p
#: C/filechooserdialog.vala.page:27
msgid ""
"This example demonstrates how the FileChooserDialog can be used. It is "
"incorporated into a very simple text editor application. All the <link xref="
"\"menubar.vala#win-app\">actions</link>, including the \"open\", \"save\" "
"and \"save-as\" commands can be found in the <link xref=\"gmenu.vala\">app-"
"menu</link>. Here, the app-menu is created using an XML UI file, which is "
"then imported into the application using Gtk.Builder."
msgstr ""
"이 예제는 FileChooserDialog를 어떻게 사용할 수 있는지 보여줍니다. 파일 선택 "
"대화상자는 간단한 텍스트 편집기 프로그램에 있습니다. \"열기\", \"저장\", \"다"
"른 이름으로 저장\" 명령과 같은 모든 <link xref=\"menubar.vala#win-app\">동작"
"</link>은 <link xref=\"gmenu.vala\">app-menu</link>에서 찾을 수 있으며, 여기"
"서 app-menu는 XML UI 파일로 만들고, Gtk.Builder로 프로그램에 가져올 수 있습니"
"다."

#. (itstool) path: section/title
#: C/filechooserdialog.vala.page:29
msgid "XML UI file which creates the app-menu"
msgstr "app-menu를 만드는 XML UI 파일"

#. (itstool) path: section/title
#: C/filechooserdialog.vala.page:32
msgid "Vala Code"
msgstr "Vala 코드"

#. (itstool) path: section/code
#: C/filechooserdialog.vala.page:33
#, no-wrap
msgid ""
"class MyWindow: Gtk.ApplicationWindow {\n"
"\n"
"\t/* MyWindow instance variables. */\n"
"\tGLib.File? file;\n"
"\tGtk.TextBuffer buffer;\n"
"\tGtk.TextView textview;\n"
"\tGtk.ScrolledWindow scrolled_window;\n"
"\n"
"\t/* Create ActionEntries. */\n"
"\tconst ActionEntry[] actions = {\n"
"\t\t{ \"new\", new_cb },\n"
"\t\t{ \"open\", open_cb },\n"
"\t\t{ \"save\", save_cb },\n"
"\t\t{ \"save-as\", save_as_cb }\n"
"\t};\n"
"\n"
"\t/* Constructor creates MyWindow, and add the scrolled_window. */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"FileChooserDialog Example\");\n"
"\t\tthis.set_default_size (400, 400);\n"
"\n"
"\t\t/* Add the ActionEntries to MyWindow. */\n"
"\t\tthis.add_action_entries (actions, this);\n"
"\n"
"\t\tbuffer = new Gtk.TextBuffer (null); //stores text to be displayed\n"
"\t\ttextview = new Gtk.TextView.with_buffer (buffer); //displays TextBuffer\n"
"\t\ttextview.set_wrap_mode (Gtk.WrapMode.WORD); //sets line wrapping\n"
"\n"
"\t\tscrolled_window = new Gtk.ScrolledWindow (null, null);\n"
"\t\tscrolled_window.set_policy (Gtk.PolicyType.AUTOMATIC,\n"
"\t\t                            Gtk.PolicyType.AUTOMATIC);\n"
"\n"
"\t\tscrolled_window.add (textview);\n"
"\t\tscrolled_window.set_border_width (5);\n"
"\n"
"        this.add (scrolled_window);\n"
"\t\tthis.show_all ();\n"
"\t}\n"
"\n"
"\tvoid new_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tfile = null;\n"
"\t\tbuffer.set_text (\"\");\n"
"\t\tprint (\"New file created\\n\");\n"
"\t}\n"
"\n"
"\t/* Create FileChooserDialog in OPEN mode. */\n"
"\tvoid open_cb (SimpleAction action, Variant? parameter) {\n"
"\n"
"\t\tvar open_dialog = new Gtk.FileChooserDialog (\"Pick a file\",\n"
"\t\t                                             this as Gtk.Window,\n"
"\t\t                                             Gtk.FileChooserAction.OPEN,\n"
"\t\t                                             Gtk.Stock.CANCEL,\n"
"\t\t                                             Gtk.ResponseType.CANCEL,\n"
"\t\t                                             Gtk.Stock.OPEN,\n"
"\t\t                                             Gtk.ResponseType.ACCEPT);\n"
"\n"
"\t\topen_dialog.local_only = false; //allow for uri\n"
"\t\topen_dialog.set_modal (true);\n"
"\t\topen_dialog.response.connect (open_response_cb);\n"
"\t\topen_dialog.show ();\n"
"\t}\n"
"\n"
"\t/* Either open the file and load the file contents or cancel. */\n"
"\tvoid open_response_cb (Gtk.Dialog dialog, int response_id) {\n"
"\t\tvar open_dialog = dialog as Gtk.FileChooserDialog;\n"
"\n"
"\t\tswitch (response_id) {\n"
"\t\t\tcase Gtk.ResponseType.ACCEPT: //open the file\n"
"\t\t\t\tfile = open_dialog.get_file();\n"
"\n"
"\t\t\t\tuint8[] file_contents;\n"
"\n"
"\t\t\t\ttry {\n"
"\t\t\t\t\tfile.load_contents (null, out file_contents, null);\n"
"\t\t\t\t}\n"
"\t\t\t\tcatch (GLib.Error err) { //handle the exception\n"
"\t\t\t\t\terror (\"%s\\n\", err.message);\n"
"\t\t\t\t}\n"
"\t\t\t\t/* Set the buffer text to be the contents of the file. */\n"
"\t\t\t\tbuffer.set_text ((string) file_contents,\n"
"\t\t\t\t                 file_contents.length);\n"
"\n"
"\t\t\t\tprint (\"opened: %s\\n\", (open_dialog.get_filename ()));\n"
"\t\t\t\tbreak;\n"
"\n"
"\t\t\tcase Gtk.ResponseType.CANCEL:\n"
"\t\t\t\tprint (\"cancelled: FileChooserAction.OPEN\\n\");\n"
"\t\t\t\tbreak;\n"
"\t\t}\n"
"\t\tdialog.destroy ();\n"
"\t}\n"
"\n"
"\n"
"\t/* Create FileChooserDialog in SAVE mode. */\n"
"\tvoid save_as_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tvar save_dialog = new Gtk.FileChooserDialog (\"Pick a file\",\n"
"\t\t                                             this as Gtk.Window,\n"
"\t\t                                             Gtk.FileChooserAction.SAVE,\n"
"\t\t                                             Gtk.Stock.CANCEL,\n"
"\t\t                                             Gtk.ResponseType.CANCEL,\n"
"\t\t                                             Gtk.Stock.SAVE,\n"
"\t\t                                             Gtk.ResponseType.ACCEPT);\n"
"\n"
"\t\tsave_dialog.set_do_overwrite_confirmation (true);\n"
"\t\tsave_dialog.set_modal (true);\n"
"\t\tif (file != null) {\n"
"\t\t\ttry {\n"
"\t\t\t\t(save_dialog as Gtk.FileChooser).set_file (file);\n"
"\t\t\t}\n"
"\t\t\tcatch (GLib.Error error) {\n"
"\t\t\t\tprint (\"%s\\n\", error.message);\n"
"\t\t\t}\n"
"\t\t}\n"
"\t\tsave_dialog.response.connect (save_as_response_cb);\n"
"\t\tsave_dialog.show ();\n"
"\t}\n"
"\n"
"\tvoid save_as_response_cb (Gtk.Dialog dialog, int response_id) {\n"
"\t\tvar save_dialog = dialog as Gtk.FileChooserDialog;\n"
"\n"
"\t\tswitch (response_id) {\n"
"\t\t\tcase Gtk.ResponseType.ACCEPT:\n"
"\t\t\t\tfile = save_dialog.get_file();\n"
"\t\t\t\tthis.save_to_file ();\n"
"\t\t\t\tbreak;\n"
"\t\t\tdefault:\n"
"\t\t\t\tbreak;\n"
"\t\t}\n"
"\t\t\tdialog.destroy ();\n"
"\t}\n"
"\n"
"\t/* Save the existing contents to the file.\n"
"\t * If file does not exist, call save_as_cb.\n"
"\t */\n"
"\tvoid save_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tif (file != null) {\n"
"\t\t\tthis.save_to_file ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tsave_as_cb (action, parameter);\n"
"\t\t}\n"
"\t}\n"
"\n"
"\tvoid save_to_file (){\n"
"\t\tGtk.TextIter start;\n"
"\t\tGtk.TextIter end;\n"
"\n"
"\t\tbuffer.get_bounds (out start, out end);\n"
"\t\tstring current_contents = buffer.get_text (start, end, false);\n"
"\t\ttry {\n"
"\t\t\t\tfile.replace_contents (current_contents.data, null, false,\n"
"\t\t\t\t                       GLib.FileCreateFlags.NONE, null, null);\n"
"\n"
"\t\t\t\tprint (\"saved: %s\\n\", file.get_path ());\n"
"\t\t}\n"
"\t\tcatch (GLib.Error err) {\n"
"\t\t\terror (\"%s\\n\", err.message);\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication: Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show_all;\n"
"\t}\n"
"\n"
"\tconst ActionEntry[] actions = {\n"
"\t\t{ \"quit\", quit_cb }\n"
"\t};\n"
"\n"
"\tvoid quit_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tthis.quit ();\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Setup actions */\n"
"\t\tthis.add_action_entries (actions, this);\n"
"\n"
"\t\t/* Setup menus */\n"
"\t\tvar builder = new Gtk.Builder ();\n"
"\t\ttry {\n"
"\t\t\tbuilder.add_from_file (\"filechooserdialog.ui\");\n"
"\t\t} catch (GLib.Error err) {\n"
"\t\t\terror (\"Unable to load file: %s\\n\", err.message);\n"
"\t\t}\n"
"\t\tthis.app_menu = builder.get_object (\"appmenu\") as MenuModel;\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"class MyWindow: Gtk.ApplicationWindow {\n"
"\n"
"\t/* MyWindow instance variables. */\n"
"\tGLib.File? file;\n"
"\tGtk.TextBuffer buffer;\n"
"\tGtk.TextView textview;\n"
"\tGtk.ScrolledWindow scrolled_window;\n"
"\n"
"\t/* Create ActionEntries. */\n"
"\tconst ActionEntry[] actions = {\n"
"\t\t{ \"new\", new_cb },\n"
"\t\t{ \"open\", open_cb },\n"
"\t\t{ \"save\", save_cb },\n"
"\t\t{ \"save-as\", save_as_cb }\n"
"\t};\n"
"\n"
"\t/* Constructor creates MyWindow, and add the scrolled_window. */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"FileChooserDialog Example\");\n"
"\t\tthis.set_default_size (400, 400);\n"
"\n"
"\t\t/* Add the ActionEntries to MyWindow. */\n"
"\t\tthis.add_action_entries (actions, this);\n"
"\n"
"\t\tbuffer = new Gtk.TextBuffer (null); //stores text to be displayed\n"
"\t\ttextview = new Gtk.TextView.with_buffer (buffer); //displays TextBuffer\n"
"\t\ttextview.set_wrap_mode (Gtk.WrapMode.WORD); //sets line wrapping\n"
"\n"
"\t\tscrolled_window = new Gtk.ScrolledWindow (null, null);\n"
"\t\tscrolled_window.set_policy (Gtk.PolicyType.AUTOMATIC,\n"
"\t\t                            Gtk.PolicyType.AUTOMATIC);\n"
"\n"
"\t\tscrolled_window.add (textview);\n"
"\t\tscrolled_window.set_border_width (5);\n"
"\n"
"        this.add (scrolled_window);\n"
"\t\tthis.show_all ();\n"
"\t}\n"
"\n"
"\tvoid new_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tfile = null;\n"
"\t\tbuffer.set_text (\"\");\n"
"\t\tprint (\"New file created\\n\");\n"
"\t}\n"
"\n"
"\t/* Create FileChooserDialog in OPEN mode. */\n"
"\tvoid open_cb (SimpleAction action, Variant? parameter) {\n"
"\n"
"\t\tvar open_dialog = new Gtk.FileChooserDialog (\"Pick a file\",\n"
"\t\t                                             this as Gtk.Window,\n"
"\t\t                                             Gtk.FileChooserAction.OPEN,\n"
"\t\t                                             Gtk.Stock.CANCEL,\n"
"\t\t                                             Gtk.ResponseType.CANCEL,\n"
"\t\t                                             Gtk.Stock.OPEN,\n"
"\t\t                                             Gtk.ResponseType.ACCEPT);\n"
"\n"
"\t\topen_dialog.local_only = false; //allow for uri\n"
"\t\topen_dialog.set_modal (true);\n"
"\t\topen_dialog.response.connect (open_response_cb);\n"
"\t\topen_dialog.show ();\n"
"\t}\n"
"\n"
"\t/* Either open the file and load the file contents or cancel. */\n"
"\tvoid open_response_cb (Gtk.Dialog dialog, int response_id) {\n"
"\t\tvar open_dialog = dialog as Gtk.FileChooserDialog;\n"
"\n"
"\t\tswitch (response_id) {\n"
"\t\t\tcase Gtk.ResponseType.ACCEPT: //open the file\n"
"\t\t\t\tfile = open_dialog.get_file();\n"
"\n"
"\t\t\t\tuint8[] file_contents;\n"
"\n"
"\t\t\t\ttry {\n"
"\t\t\t\t\tfile.load_contents (null, out file_contents, null);\n"
"\t\t\t\t}\n"
"\t\t\t\tcatch (GLib.Error err) { //handle the exception\n"
"\t\t\t\t\terror (\"%s\\n\", err.message);\n"
"\t\t\t\t}\n"
"\t\t\t\t/* Set the buffer text to be the contents of the file. */\n"
"\t\t\t\tbuffer.set_text ((string) file_contents,\n"
"\t\t\t\t                 file_contents.length);\n"
"\n"
"\t\t\t\tprint (\"opened: %s\\n\", (open_dialog.get_filename ()));\n"
"\t\t\t\tbreak;\n"
"\n"
"\t\t\tcase Gtk.ResponseType.CANCEL:\n"
"\t\t\t\tprint (\"cancelled: FileChooserAction.OPEN\\n\");\n"
"\t\t\t\tbreak;\n"
"\t\t}\n"
"\t\tdialog.destroy ();\n"
"\t}\n"
"\n"
"\n"
"\t/* Create FileChooserDialog in SAVE mode. */\n"
"\tvoid save_as_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tvar save_dialog = new Gtk.FileChooserDialog (\"Pick a file\",\n"
"\t\t                                             this as Gtk.Window,\n"
"\t\t                                             Gtk.FileChooserAction.SAVE,\n"
"\t\t                                             Gtk.Stock.CANCEL,\n"
"\t\t                                             Gtk.ResponseType.CANCEL,\n"
"\t\t                                             Gtk.Stock.SAVE,\n"
"\t\t                                             Gtk.ResponseType.ACCEPT);\n"
"\n"
"\t\tsave_dialog.set_do_overwrite_confirmation (true);\n"
"\t\tsave_dialog.set_modal (true);\n"
"\t\tif (file != null) {\n"
"\t\t\ttry {\n"
"\t\t\t\t(save_dialog as Gtk.FileChooser).set_file (file);\n"
"\t\t\t}\n"
"\t\t\tcatch (GLib.Error error) {\n"
"\t\t\t\tprint (\"%s\\n\", error.message);\n"
"\t\t\t}\n"
"\t\t}\n"
"\t\tsave_dialog.response.connect (save_as_response_cb);\n"
"\t\tsave_dialog.show ();\n"
"\t}\n"
"\n"
"\tvoid save_as_response_cb (Gtk.Dialog dialog, int response_id) {\n"
"\t\tvar save_dialog = dialog as Gtk.FileChooserDialog;\n"
"\n"
"\t\tswitch (response_id) {\n"
"\t\t\tcase Gtk.ResponseType.ACCEPT:\n"
"\t\t\t\tfile = save_dialog.get_file();\n"
"\t\t\t\tthis.save_to_file ();\n"
"\t\t\t\tbreak;\n"
"\t\t\tdefault:\n"
"\t\t\t\tbreak;\n"
"\t\t}\n"
"\t\t\tdialog.destroy ();\n"
"\t}\n"
"\n"
"\t/* Save the existing contents to the file.\n"
"\t * If file does not exist, call save_as_cb.\n"
"\t */\n"
"\tvoid save_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tif (file != null) {\n"
"\t\t\tthis.save_to_file ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tsave_as_cb (action, parameter);\n"
"\t\t}\n"
"\t}\n"
"\n"
"\tvoid save_to_file (){\n"
"\t\tGtk.TextIter start;\n"
"\t\tGtk.TextIter end;\n"
"\n"
"\t\tbuffer.get_bounds (out start, out end);\n"
"\t\tstring current_contents = buffer.get_text (start, end, false);\n"
"\t\ttry {\n"
"\t\t\t\tfile.replace_contents (current_contents.data, null, false,\n"
"\t\t\t\t                       GLib.FileCreateFlags.NONE, null, null);\n"
"\n"
"\t\t\t\tprint (\"saved: %s\\n\", file.get_path ());\n"
"\t\t}\n"
"\t\tcatch (GLib.Error err) {\n"
"\t\t\terror (\"%s\\n\", err.message);\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication: Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show_all;\n"
"\t}\n"
"\n"
"\tconst ActionEntry[] actions = {\n"
"\t\t{ \"quit\", quit_cb }\n"
"\t};\n"
"\n"
"\tvoid quit_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tthis.quit ();\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Setup actions */\n"
"\t\tthis.add_action_entries (actions, this);\n"
"\n"
"\t\t/* Setup menus */\n"
"\t\tvar builder = new Gtk.Builder ();\n"
"\t\ttry {\n"
"\t\t\tbuilder.add_from_file (\"filechooserdialog.ui\");\n"
"\t\t} catch (GLib.Error err) {\n"
"\t\t\terror (\"Unable to load file: %s\\n\", err.message);\n"
"\t\t}\n"
"\t\tthis.app_menu = builder.get_object (\"appmenu\") as MenuModel;\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: section/title
#: C/filechooserdialog.vala.page:35 C/menubar.vala.page:187
msgid "Relevant API documentation"
msgstr "관련 API 문서"

#. (itstool) path: item/p
#: C/filechooserdialog.vala.page:40
msgid ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.FileChooser.html\">FileChooser</"
"link>"
msgstr ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.FileChooser.html\">FileChooser</"
"link>"

#. (itstool) path: item/p
#: C/filechooserdialog.vala.page:41
msgid ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.FileChooserDialog.html"
"\">FileChooserDialog</link>"
msgstr ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.FileChooserDialog.html"
"\">FileChooserDialog</link>"

#. (itstool) path: item/p
#: C/filechooserdialog.vala.page:42
msgid ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.Builder.html\">Gtk.Builder</"
"link>"
msgstr ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.Builder.html\">Gtk.Builder</"
"link>"

#. (itstool) path: item/p
#: C/filechooserdialog.vala.page:43
msgid ""
"<link href=\"http://valadoc.org/gio-2.0/GLib.ActionEntry.html\">GLib."
"ActionEntry</link>"
msgstr ""
"<link href=\"http://valadoc.org/gio-2.0/GLib.ActionEntry.html\">GLib."
"ActionEntry</link>"

#. (itstool) path: info/title
#: C/fontchooserwidget.js.page:8
msgctxt "text"
msgid "FontChooserWidget (JavaScript)"
msgstr "FontChooserWidget (JavaScript)"

#. (itstool) path: info/desc
#: C/fontchooserwidget.js.page:18 C/fontchooserwidget.py.page:20
#: C/fontchooserwidget.vala.page:18
msgid "A widget to choose a font"
msgstr "글꼴을 선택하는 위젯"

#. (itstool) path: page/title
#: C/fontchooserwidget.js.page:21 C/fontchooserwidget.py.page:23
#: C/fontchooserwidget.vala.page:21
msgid "FontChooserWidget"
msgstr "FontChooserWidget"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/fontchooserwidget.js.page:23 C/fontchooserwidget.py.page:25
#: C/fontchooserwidget.vala.page:23
msgctxt "_"
msgid ""
"external ref='media/fontchooserwidget.png' "
"md5='9161245e307b432ae1313e9a9941edae'"
msgstr ""

#. (itstool) path: page/p
#: C/fontchooserwidget.js.page:24 C/fontchooserwidget.py.page:26
msgid "A FontChooserWidget with a callback function."
msgstr "콜백 함수와 사용하는 FontChooserWidget입니다."

#. (itstool) path: section/code
#: C/fontchooserwidget.js.page:30
#, no-wrap
msgid ""
"//!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const FontChooserWidgetExample = new Lang.Class ({\n"
"    Name: 'Font Chooser Widget Example',\n"
"\n"
"    // Create the application itthis\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application({ application_id: 'org.example.fontchooserwidget' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"        // Create the application window\n"
"        this.window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                    window_position: Gtk.WindowPosition.CENTER,\n"
"                                                    title: \"FontChooserWidget\",\n"
"                                                    default_width: 200,\n"
"                                                    default_height: 200,\n"
"                                                    border_width: 10 });\n"
"\n"
"        this.fontChooser = new Gtk.FontChooserWidget();\n"
"        // a default font\n"
"        this.fontChooser.set_font(\"Sans\");\n"
"        // a text to preview the font\n"
"        this.fontChooser.set_preview_text(\"This is an example of preview text!\");\n"
"\n"
"        // connect signal from the font chooser to the callback function\n"
"        this.fontChooser.connect(\"notify::font\", Lang.bind(this, this._fontCb));\n"
"\n"
"        // add the font chooser to the window\n"
"        this.window.add(this.fontChooser);\n"
"        this.window.show_all();\n"
"   },\n"
"\n"
"     // callback function:\n"
"     _fontCb: function() {\n"
"        // print in the terminal\n"
"        print(\"You chose the font \" + this.fontChooser.get_font());\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new FontChooserWidgetExample();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const FontChooserWidgetExample = new Lang.Class ({\n"
"    Name: 'Font Chooser Widget Example',\n"
"\n"
"    // Create the application itthis\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application({ application_id: 'org.example.fontchooserwidget' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"        // Create the application window\n"
"        this.window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                    window_position: Gtk.WindowPosition.CENTER,\n"
"                                                    title: \"FontChooserWidget\",\n"
"                                                    default_width: 200,\n"
"                                                    default_height: 200,\n"
"                                                    border_width: 10 });\n"
"\n"
"        this.fontChooser = new Gtk.FontChooserWidget();\n"
"        // a default font\n"
"        this.fontChooser.set_font(\"Sans\");\n"
"        // a text to preview the font\n"
"        this.fontChooser.set_preview_text(\"This is an example of preview text!\");\n"
"\n"
"        // connect signal from the font chooser to the callback function\n"
"        this.fontChooser.connect(\"notify::font\", Lang.bind(this, this._fontCb));\n"
"\n"
"        // add the font chooser to the window\n"
"        this.window.add(this.fontChooser);\n"
"        this.window.show_all();\n"
"   },\n"
"\n"
"     // callback function:\n"
"     _fontCb: function() {\n"
"        // print in the terminal\n"
"        print(\"You chose the font \" + this.fontChooser.get_font());\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new FontChooserWidgetExample();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/fontchooserwidget.js.page:37 C/fontchooserwidget.py.page:47
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkFontChooserWidget."
"html\">GtkFontChooserWidget</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkFontChooserWidget."
"html\">GtkFontChooserWidget</link>"

#. (itstool) path: info/title
#: C/fontchooserwidget.py.page:8
msgctxt "text"
msgid "FontChooserWidget (Python)"
msgstr "FontChooserWidget (Python)"

#. (itstool) path: section/code
#: C/fontchooserwidget.py.page:32
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"FontChooserWidget\", application=app)\n"
"\n"
"        # a font chooser\n"
"        self.font_chooser = Gtk.FontChooserWidget()\n"
"        # a default font\n"
"        self.font_chooser.set_font(\"Sans\")\n"
"        # a text to preview the font\n"
"        self.font_chooser.set_preview_text(\n"
"            \"This is an example of preview text!\")\n"
"\n"
"        # connect signal from the font chooser to the callback function\n"
"        self.font_chooser.connect(\"notify::font\", self.font_cb)\n"
"\n"
"        # add the font chooser to the window\n"
"        self.add(self.font_chooser)\n"
"\n"
"    # callback function:\n"
"    def font_cb(self, event, user_data):\n"
"        # print in the terminal\n"
"        print(\"You chose the font \" + self.font_chooser.get_font())\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"FontChooserWidget\", application=app)\n"
"\n"
"        # a font chooser\n"
"        self.font_chooser = Gtk.FontChooserWidget()\n"
"        # a default font\n"
"        self.font_chooser.set_font(\"Sans\")\n"
"        # a text to preview the font\n"
"        self.font_chooser.set_preview_text(\n"
"            \"This is an example of preview text!\")\n"
"\n"
"        # connect signal from the font chooser to the callback function\n"
"        self.font_chooser.connect(\"notify::font\", self.font_cb)\n"
"\n"
"        # add the font chooser to the window\n"
"        self.add(self.font_chooser)\n"
"\n"
"    # callback function:\n"
"    def font_cb(self, event, user_data):\n"
"        # print in the terminal\n"
"        print(\"You chose the font \" + self.font_chooser.get_font())\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/fontchooserwidget.py.page:35
msgid "Useful methods for a FontChooserWidget"
msgstr "FontChooserWidget에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/fontchooserwidget.py.page:36
msgid ""
"In line 16 the <code>\"notify::font\"</code> signal from the widget is "
"connected to the callback function <code>font_cb()</code> using "
"<code><var>widget</var>.connect(<var>signal</var>, <var>callback function</"
"var>)</code>. See <link xref=\"signals-callbacks.py\"/> for a more detailed "
"explanation."
msgstr ""
"16번째 줄에서, <code><var>widget</var>.connect(<var>signal</var>, "
"<var>callback function</var>)</code> 코드로 <code>\"notify::font\"</code> 시"
"그널을 <code>font_cb()</code> 콜백 함수에 연결했습니다. 더 자세한 설명은 "
"<link xref=\"signals-callbacks.py\"/>를 참조하십시오."

#. (itstool) path: item/p
#: C/fontchooserwidget.py.page:38
msgid ""
"To set the font which is initially selected, use <code>set_font(font)</code> "
"(where <code>font</code> is the font name) or <code>set_font_desc(font)</"
"code> (where <code>font</code> is the PangoFontDescription)."
msgstr ""
"초기에 선택하는 글꼴을 설정하려면 <code>set_font(font)</code> (<code>font</"
"code> 는 글꼴 이름) 또는 <code>set_font_desc(font)</code> (<code>font</code> "
"는 PangoFontDescription 객체) 함수를 사용하십시오."

#. (itstool) path: item/p
#: C/fontchooserwidget.py.page:39
msgid ""
"To get the selected font use <code>get_font()</code> or "
"<code>get_font_desc()</code>."
msgstr ""
"선택한 글꼴을 가져오려면 <code>get_font()</code> 또는 <code>get_font_desc()</"
"code> 함수를 사용하십시오."

#. (itstool) path: item/p
#: C/fontchooserwidget.py.page:40
msgid ""
"To change the text which is shown in the preview area, use "
"<code>set_preview_text()</code>."
msgstr ""
"미리 보기 화면에 나타난 텍스트를 바꾸려면 <code>set_preview_text()</code> 함"
"수를 사용하십시오."

#. (itstool) path: info/title
#: C/fontchooserwidget.vala.page:8
msgctxt "text"
msgid "FontChooserWidget (Vala)"
msgstr "FontChooserWidget(Vala)"

#. (itstool) path: credit/name
#: C/fontchooserwidget.vala.page:13
msgid "Tiffany Antpoolski"
msgstr "Tiffany Antpoolski"

#. (itstool) path: page/p
#: C/fontchooserwidget.vala.page:24
msgid "A FontChooserWidget with a lambda callback function."
msgstr "람다 콜백 함수를 사용하는 FontChooserWidget입니다."

#. (itstool) path: section/code
#: C/fontchooserwidget.vala.page:30
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"        internal MyWindow (MyApplication app) {\n"
"                Object (application: app, title: \"FontChooserWidget\");\n"
"\n"
"\t\tvar font_chooser = new Gtk.FontChooserWidget ();\n"
"\t\tfont_chooser.set_font (\"Sans\");\n"
"\t\tfont_chooser.set_preview_text (\"This is an example of preview text!\");\n"
"\t\tthis.add (font_chooser);\n"
"\n"
"\t\tfont_chooser.notify[\"font\"].connect (() =&gt; {\n"
"\t\t\tprint (\"font: %s\\n\", font_chooser.get_font ().to_string ());\n"
"\t\t\tprint (\"desc: %s\\n\", font_chooser.get_font_desc ().to_string ());\n"
"\t\t\tprint (\"face: %s\\n\", font_chooser.get_font_face ().get_face_name ());\n"
"\t\t\tprint (\"size: %d\\n\", font_chooser.get_font_size ());\n"
"\t\t\tprint (\"family: %s\\n\", font_chooser.get_font_family ().get_name ());\n"
"\t\t\tprint (\"monospace: %s\\n\\n\", font_chooser.get_font_family ().is_monospace ().to_string ());\n"
"\t\t});\n"
"\n"
"                this.show_all ();\n"
"        }\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"        protected override void activate () {\n"
"                new MyWindow (this).show ();\n"
"        }\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"        return new MyApplication ().run (args);\n"
"}\n"
"\n"
msgstr ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"        internal MyWindow (MyApplication app) {\n"
"                Object (application: app, title: \"FontChooserWidget\");\n"
"\n"
"\t\tvar font_chooser = new Gtk.FontChooserWidget ();\n"
"\t\tfont_chooser.set_font (\"Sans\");\n"
"\t\tfont_chooser.set_preview_text (\"This is an example of preview text!\");\n"
"\t\tthis.add (font_chooser);\n"
"\n"
"\t\tfont_chooser.notify[\"font\"].connect (() =&gt; {\n"
"\t\t\tprint (\"font: %s\\n\", font_chooser.get_font ().to_string ());\n"
"\t\t\tprint (\"desc: %s\\n\", font_chooser.get_font_desc ().to_string ());\n"
"\t\t\tprint (\"face: %s\\n\", font_chooser.get_font_face ().get_face_name ());\n"
"\t\t\tprint (\"size: %d\\n\", font_chooser.get_font_size ());\n"
"\t\t\tprint (\"family: %s\\n\", font_chooser.get_font_family ().get_name ());\n"
"\t\t\tprint (\"monospace: %s\\n\\n\", font_chooser.get_font_family ().is_monospace ().to_string ());\n"
"\t\t});\n"
"\n"
"                this.show_all ();\n"
"        }\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"        protected override void activate () {\n"
"                new MyWindow (this).show ();\n"
"        }\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"        return new MyApplication ().run (args);\n"
"}\n"
"\n"

#. (itstool) path: item/p
#: C/fontchooserwidget.vala.page:37
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.FontChooserWidget.html"
"\">GtkFontChooserWidget</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.FontChooserWidget.html"
"\">GtkFontChooserWidget</link>"

#. (itstool) path: info/title
#: C/gmenu.c.page:8
msgctxt "text"
msgid "GMenu (C)"
msgstr "GMenu(C)"

#. (itstool) path: info/desc
#: C/gmenu.c.page:18 C/gmenu.js.page:18 C/gmenu.vala.page:24
msgid "A simple implementation of GMenuModel"
msgstr "GMenuModel의 간단한 구현체"

#. (itstool) path: page/title
#: C/gmenu.c.page:21 C/gmenu.js.page:21 C/gmenu.py.page:29 C/gmenu.vala.page:27
msgid "GMenu"
msgstr "GMenu"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/gmenu.c.page:22
msgctxt "_"
msgid "external ref='media/gmenu.c.png' md5='f305fc3cae8d16d72b734ee53b559e33'"
msgstr ""

#. (itstool) path: page/p
#: C/gmenu.c.page:23 C/gmenu.js.page:23 C/gmenu.py.page:31 C/gmenu.vala.page:32
msgid "A GtkApplication with a simple GMenu and SimpleActions"
msgstr "간단한 GMenu 및 SimpleAction과 사용하는 GtkApplication"

#. (itstool) path: page/code
#: C/gmenu.c.page:26
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"new_window (GSimpleAction *action,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"  g_print (\"This does nothing. It is only a demonstration.\\n\");\n"
"}\n"
"\n"
"static void\n"
"quit (GSimpleAction *action,\n"
"      GVariant      *parameter,\n"
"      gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"static void\n"
"startup (GtkApplication *application,\n"
"         gpointer        user_data)\n"
"{\n"
"  static const GActionEntry actions[] = {\n"
"    { \"new\", new_window },\n"
"    { \"quit\", quit }\n"
"  };\n"
"\n"
"  GMenu *menu;\n"
"\n"
"  g_action_map_add_action_entries (G_ACTION_MAP (application), actions, G_N_ELEMENTS (actions), application);\n"
"\n"
"  menu = g_menu_new ();\n"
"  g_menu_append (menu, \"New\", \"app.new\");\n"
"  g_menu_append (menu, \"Quit\", \"app.quit\");\n"
"  gtk_application_set_app_menu (application, G_MENU_MODEL (menu));\n"
"  g_object_unref (menu);\n"
"}\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"\n"
"  gtk_window_set_application (GTK_WINDOW (window), GTK_APPLICATION (app));\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Hello GNOME\");\n"
"\n"
"  gtk_widget_show_all (GTK_WIDGET (window));\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\",G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"new_window (GSimpleAction *action,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"  g_print (\"This does nothing. It is only a demonstration.\\n\");\n"
"}\n"
"\n"
"static void\n"
"quit (GSimpleAction *action,\n"
"      GVariant      *parameter,\n"
"      gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"static void\n"
"startup (GtkApplication *application,\n"
"         gpointer        user_data)\n"
"{\n"
"  static const GActionEntry actions[] = {\n"
"    { \"new\", new_window },\n"
"    { \"quit\", quit }\n"
"  };\n"
"\n"
"  GMenu *menu;\n"
"\n"
"  g_action_map_add_action_entries (G_ACTION_MAP (application), actions, G_N_ELEMENTS (actions), application);\n"
"\n"
"  menu = g_menu_new ();\n"
"  g_menu_append (menu, \"New\", \"app.new\");\n"
"  g_menu_append (menu, \"Quit\", \"app.quit\");\n"
"  gtk_application_set_app_menu (application, G_MENU_MODEL (menu));\n"
"  g_object_unref (menu);\n"
"}\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"\n"
"  gtk_window_set_application (GTK_WINDOW (window), GTK_APPLICATION (app));\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Hello GNOME\");\n"
"\n"
"  gtk_widget_show_all (GTK_WIDGET (window));\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\",G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"

#. (itstool) path: info/title
#: C/gmenu.js.page:8
msgctxt "text"
msgid "GMenu (JavaScript)"
msgstr "GMenu(JavaScript)"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/gmenu.js.page:22
msgctxt "_"
msgid ""
"external ref='media/gmenu.js.png' md5='16b8bee122197771ec8498dac42f196b'"
msgstr ""

#. (itstool) path: page/code
#: C/gmenu.js.page:25
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class ({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.myapp',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"       //connect to 'activate' and 'startup' signals to the callback functions\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI (in this case it's just the ApplicationWindow\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"Welcome to GNOME\" });\n"
"\n"
"        //uncommenting the line below will change the window size\n"
"        //this._window.set_default_size(600, 400);\n"
"\n"
"        //show the window and all child widgets (none in this case)\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    _showNew: function() {\n"
"    print (\"This doesn't do anything. It is only a demonstration.\");\n"
"    },\n"
"\n"
"    _showAbout: function() {\n"
"        print (\"No AboutDialog here.  This is only a demonstration.\");\n"
"    },\n"
"\n"
"    //create the menu items and connect the signals to the callback functions.\n"
"    _initMenus: function() {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"New\",'app.new');\n"
"        menu.append(\"About\", 'app.about');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        let newAction = new Gio.SimpleAction ({ name: 'new' });\n"
"        newAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showNew();\n"
"            }));\n"
"        this.application.add_action(newAction);\n"
"\n"
"        let aboutAction = new Gio.SimpleAction ({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"         this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    //callback function for 'startup' signal\n"
"    _onStartup: function() {\n"
"        //You must call _initMenus() before calling _buildUI().\n"
"        this._initMenus();\n"
"        this._buildUI();\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class ({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.myapp',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"       //connect to 'activate' and 'startup' signals to the callback functions\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI (in this case it's just the ApplicationWindow\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"Welcome to GNOME\" });\n"
"\n"
"        //uncommenting the line below will change the window size\n"
"        //this._window.set_default_size(600, 400);\n"
"\n"
"        //show the window and all child widgets (none in this case)\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    _showNew: function() {\n"
"    print (\"This doesn't do anything. It is only a demonstration.\");\n"
"    },\n"
"\n"
"    _showAbout: function() {\n"
"        print (\"No AboutDialog here.  This is only a demonstration.\");\n"
"    },\n"
"\n"
"    //create the menu items and connect the signals to the callback functions.\n"
"    _initMenus: function() {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"New\",'app.new');\n"
"        menu.append(\"About\", 'app.about');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        let newAction = new Gio.SimpleAction ({ name: 'new' });\n"
"        newAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showNew();\n"
"            }));\n"
"        this.application.add_action(newAction);\n"
"\n"
"        let aboutAction = new Gio.SimpleAction ({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"         this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    //callback function for 'startup' signal\n"
"    _onStartup: function() {\n"
"        //You must call _initMenus() before calling _buildUI().\n"
"        this._initMenus();\n"
"        this._buildUI();\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: info/title
#: C/gmenu.py.page:8
msgctxt "text"
msgid "GMenu (Python)"
msgstr "GMenu(Python)"

#. (itstool) path: info/desc
#: C/gmenu.py.page:26
msgid "A simple implementation of GMenu"
msgstr "GMenu의 간단한 구현체"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/gmenu.py.page:30
msgctxt "_"
msgid ""
"external ref='media/gmenu.py.png' md5='52c68b34d5d566f37e9f803dedb6353a'"
msgstr ""

#. (itstool) path: section/code
#: C/gmenu.py.page:37
#, no-wrap
msgid ""
"\n"
"    from gi.repository import Gtk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GMenu Example\", application=app)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        # start the application\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # create a menu\n"
"        menu = Gio.Menu()\n"
"        # append to the menu three options\n"
"        menu.append(\"New\", \"app.new\")\n"
"        menu.append(\"About\", \"app.about\")\n"
"        menu.append(\"Quit\", \"app.quit\")\n"
"        # set the menu as menu of the application\n"
"        self.set_app_menu(menu)\n"
"\n"
"        # create an action for the option \"new\" of the menu\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        # connect it to the callback function new_cb\n"
"        new_action.connect(\"activate\", self.new_cb)\n"
"        # add the action to the application\n"
"        self.add_action(new_action)\n"
"\n"
"        # option \"about\"\n"
"        about_action = Gio.SimpleAction.new(\"about\", None)\n"
"        about_action.connect(\"activate\", self.about_cb)\n"
"        self.add_action(about_action)\n"
"\n"
"        # option \"quit\"\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_cb)\n"
"        self.add_action(quit_action)\n"
"\n"
"    # callback function for \"new\"\n"
"    def new_cb(self, action, parameter):\n"
"        print(\"This does nothing. It is only a demonstration.\")\n"
"\n"
"    # callback function for \"about\"\n"
"    def about_cb(self, action, parameter):\n"
"        print(\"No AboutDialog for you. This is only a demonstration.\")\n"
"\n"
"    # callback function for \"quit\"\n"
"    def quit_cb(self, action, parameter):\n"
"        print(\"You have quit.\")\n"
"        self.quit()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"\n"
"    from gi.repository import Gtk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GMenu Example\", application=app)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        # start the application\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # create a menu\n"
"        menu = Gio.Menu()\n"
"        # append to the menu three options\n"
"        menu.append(\"New\", \"app.new\")\n"
"        menu.append(\"About\", \"app.about\")\n"
"        menu.append(\"Quit\", \"app.quit\")\n"
"        # set the menu as menu of the application\n"
"        self.set_app_menu(menu)\n"
"\n"
"        # create an action for the option \"new\" of the menu\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        # connect it to the callback function new_cb\n"
"        new_action.connect(\"activate\", self.new_cb)\n"
"        # add the action to the application\n"
"        self.add_action(new_action)\n"
"\n"
"        # option \"about\"\n"
"        about_action = Gio.SimpleAction.new(\"about\", None)\n"
"        about_action.connect(\"activate\", self.about_cb)\n"
"        self.add_action(about_action)\n"
"\n"
"        # option \"quit\"\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_cb)\n"
"        self.add_action(quit_action)\n"
"\n"
"    # callback function for \"new\"\n"
"    def new_cb(self, action, parameter):\n"
"        print(\"This does nothing. It is only a demonstration.\")\n"
"\n"
"    # callback function for \"about\"\n"
"    def about_cb(self, action, parameter):\n"
"        print(\"No AboutDialog for you. This is only a demonstration.\")\n"
"\n"
"    # callback function for \"quit\"\n"
"    def quit_cb(self, action, parameter):\n"
"        print(\"You have quit.\")\n"
"        self.quit()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/gmenu.py.page:42
msgid "Useful methods for a GSimpleAction and a GMenu"
msgstr "GSimpleAction과 GMenu에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/gmenu.py.page:44
msgid ""
"In line 33 the signal <code>\"activate\"</code> from the action "
"<code>new_action</code> (not the menu!) is connected to the callback "
"function <code>new_cb()</code> using <code><var>action</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"33번째 줄에서 <code>new_action</code> 동작의 <code>\"activate\"</code> 시그널"
"은 <code><var>widget</var>.connect(<var>signal</var>, <var>callback "
"function</var>)</code> 콜백 함수에 연결했습니다. 더 자세한 설명은 <link xref="
"\"signals-callbacks.py\"/>를 참조하십시오."

#. (itstool) path: section/p
#: C/gmenu.py.page:46
msgid "Useful methods for a GSimpleAction:"
msgstr "GSimpleAction에 쓸만한 메서드:"

#. (itstool) path: item/p
#: C/gmenu.py.page:48
msgid ""
"To create a new action that is <em>stateless</em>, that is, an action that "
"do not retain or depend on a state given by the action itself, use"
msgstr ""
"동작 자체에 주어진 상태를 유지하거나 이에 따르지 않아 <em>상태를 반영하지 않"
"는</em> 새 동작을 만들려면 다음 코드를 사용하십시오."

#. (itstool) path: item/code
#: C/gmenu.py.page:49
#, no-wrap
msgid ""
"\n"
"action = Gio.SimpleAction.new(\"name\", parameter_type)"
msgstr ""
"\n"
"action = Gio.SimpleAction.new(\"name\", parameter_type)"

#. (itstool) path: item/p
#: C/gmenu.py.page:51
msgid ""
"where <code>\"name\"</code> is the name of the action and "
"<code>parameter_type</code> is the type of the parameters that the action "
"receives when being activated. This can be <code>None</code>, or <code>GLib."
"VariantType.new('s')</code> if the parameter is of type <code>str</code>, or "
"instead of <code>'s'</code> a character as described <link href=\"http://"
"developer.gnome.org/glib/unstable/glib-GVariantType.html\">here</link>. To "
"create a new <em>stateful</em> (i.e. not stateless) action, use"
msgstr ""
"여기서 <code>\"name\"</code>는 동작 이름,  <code>parameter_type</code>은 활성"
"화했을 때 받는 동작을 나타내는 매개변수 형식입니다. <code>parameter_type</"
"code> 값은 <code>None</code> 또는, 매개변수 값 형식이 <code>str</code> 일 경"
"우 <code>GLib.VariantType.new('s')</code> 또는 <link href=\"http://developer."
"gnome.org/glib/unstable/glib-GVariantType.html\">여기</link>서 설명한대로 "
"<code>'s'</code> 문자를 그냥 쓰면 됩니다. 새 <em>상태 반영</em>(무상태 아님) "
"동작을 만들려면 다음 코드를 사용하십시오."

#. (itstool) path: item/code
#: C/gmenu.py.page:52
#, no-wrap
msgid ""
"\n"
"action = Gio.SimpleAction.new_stateful(\"name\", parameter_type, initial_state)"
msgstr ""
"\n"
"action = Gio.SimpleAction.new_stateful(\"name\", parameter_type, initial_state)"

#. (itstool) path: item/p
#: C/gmenu.py.page:54
msgid ""
"where <code>initial_state</code> is defined as a GVariant - for instance "
"<code>Glib.Variant.new_string('start')</code>; for a list of possibilities "
"see <link href=\"http://developer.gnome.org/glib/unstable/glib-GVariant.html"
"\">here</link>."
msgstr ""
"여기서 <code>initial_state</code>는 GVariant 형식으로 정의합니다. 이를 테면 "
"<code>Glib.Variant.new_string('start')</code> 코드가 있습니다. 가능한 코드를 "
"보려면 <link href=\"http://developer.gnome.org/glib/unstable/glib-GVariant."
"html\">이 문서</link>를 참고하십시오."

#. (itstool) path: item/p
#: C/gmenu.py.page:55
msgid ""
"<code>set_enabled(True)</code> sets the action as enabled; an action must be "
"enabled in order to be activated or in order to have its state changed from "
"outside callers. This should only be called by the implementor of the "
"action. Users of the action should not attempt to modify its enabled flag."
msgstr ""
"<code>set_enabled(True)</code> 함수는 동작 활성화를 설정하며, 활성화하거나 외"
"부 호출자가 상태를 바꾸게 하려면 반드시 동작을 활성화해야 합니다. 이 함수는 "
"동작 구현체에서만 호출해야 합니다. 동작 사용자는 활성 플래그를 수정하지 못하"
"게 해야합니다."

#. (itstool) path: item/p
#: C/gmenu.py.page:56
msgid ""
"<code>set_state(state)</code>, where <code>state</code> is a GVariant, sets "
"the state of the action, updating the 'state' property to the given value. "
"This should only be called by the implementor of the action; users of the "
"action should instead call <code>change_state(state)</code> (where "
"<code>state</code> is as above) to request the change."
msgstr ""
"<code>set_state(state)</code> 함수는 주어진 값으로 'state' 속성 값을 업데이트"
"하여 동작의 상태를 설정하며, <code>state</code> 는 GVariant 형식입니다. 이 함"
"수는 동작 구현체에서만 호출해야합니다. 동작 사용자는 상태 전환을 요청하려면 "
"이 함수 대신 <code>change_state(state)</code>(<code>state</code> 값은 위에서 "
"설명) 함수를 사용해야합니다."

#. (itstool) path: section/p
#: C/gmenu.py.page:59
msgid "Useful methods for a GMenu:"
msgstr "GMenu에 쓸만한 메서드:"

#. (itstool) path: item/p
#: C/gmenu.py.page:61
msgid ""
"To insert an item in the menu in position <code>position</code>, use "
"<code>insert(position, label, detailed_action)</code>, where <code>label</"
"code> is the label that will appear in the menu and <code>detailed_action</"
"code> is a string composed of the name of the action to which we prepend the "
"prefix <code>app.</code>. A more detailed discussion of this can be found in "
"<link xref=\"menubar.py#win-app\"/>."
msgstr ""
"항목을 메뉴의 <code>position</code> 위치에 넣으려면 <code>insert(position, "
"label, detailed_action)</code> 함수를 활용하십시오. 여기서 <code>label</"
"code> 은 메뉴에 나타나는 레이블이며, <code>detailed_action</code> 는 앞에 "
"<code>app.</code>이 뭍는 동작 이름으로 이루어진 문자열이 들어갑니다. 이 부분"
"에 대한 자세한 이야기에는 <link xref=\"menubar.py#win-app\"/>에 있습니다."

#. (itstool) path: item/p
#: C/gmenu.py.page:62
msgid ""
"To append or prepend an item in the menu use respectively "
"<code>append(label, detailed_action)</code> and <code>prepend(label, "
"detailed_action)</code>."
msgstr ""
"메뉴에 항목을 뒤에 붙이려면 <code>append(label, detailed_action)</code> 함수"
"를, 앞에 붙이려면 <code>prepend(label, detailed_action)</code> 함수를 사용하"
"십시오."

#. (itstool) path: item/p
#: C/gmenu.py.page:63
msgid ""
"Another way of adding items to the menu is to create them as "
"<code>GMenuItem</code>s and use <code>insert_item(position, item)</code>, "
"<code>append_item(item)</code>, or <code>prepend_item(item)</code>; so for "
"instance we might have:"
msgstr ""
"메뉴에 항목을 추가하는 다른 방법으로는 <code>GMenuItem</code> 항목을 만들고 "
"<code>insert_item(position, item)</code>, <code>append_item(item)</code>, "
"<code>prepend_item(item)</code> 함수를 사용하는 방법입니다. 그러니까 예를 들"
"면 다음 코드와 같습니다:"

#. (itstool) path: item/code
#: C/gmenu.py.page:64
#, no-wrap
msgid ""
"\n"
"about = Gio.MenuItem.new(\"About\", \"app.about\")\n"
"menu.append_item(about)"
msgstr ""
"\n"
"about = Gio.MenuItem.new(\"About\", \"app.about\")\n"
"menu.append_item(about)"

#. (itstool) path: item/p
#: C/gmenu.py.page:68
msgid ""
"We can also add a whole subsection in a menu using "
"<code>insert_section(position, label, section)</code>, "
"<code>append_section(label, section)</code>, or <code>prepend_section(label, "
"section)</code>, where <code>label</code> is the title of the subsection."
msgstr ""
"메뉴에 <code>insert_section(position, label, section)</code>, "
"<code>append_section(label, section)</code>, <code>prepend_section(label, "
"section)</code> 함수로 전체 하위 섹션을 추가할 수 있습니다. 여기서 "
"<code>label</code>은 하위 섹션의 제목입니다."

#. (itstool) path: item/p
#: C/gmenu.py.page:69
msgid ""
"To add a submenu that will expand and collapse, use "
"<code>insert_submenu(position, label, section)</code>, "
"<code>append_submenu(label, section)</code>, or <code>prepend_submenu(label, "
"section)</code>, where <code>label</code> is the title of the subsection."
msgstr ""
"나타내고 숨길 하위 메뉴를 추가하려면 <code>insert_submenu(position, label, "
"section)</code>, <code>append_submenu(label, section)</code>, "
"<code>prepend_submenu(label, section)</code> 함수를 사용하십시오. 여기서 "
"<code>label</code>은 하위 섹션의 제목입니다."

#. (itstool) path: item/p
#: C/gmenu.py.page:70
msgid "To remove an item from the menu, use <code>remove(position)</code>."
msgstr ""
"메뉴 항목을 제거하려면 <code>remove(position)</code> 함수를 사용하십시오."

#. (itstool) path: item/p
#: C/gmenu.py.page:71
msgid "To set a label for the menu, use <code>set_label(label)</code>."
msgstr ""
"메뉴에 레이블을 설정하려면 <code>set_label(label)</code> 함수를 사용하십시오."

#. (itstool) path: item/p
#: C/gmenu.py.page:82
msgid ""
"<link href=\"http://developer.gnome.org/glib/unstable/glib-GVariantType.html"
"\">GVariantType</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/glib/unstable/glib-GVariantType.html"
"\">GVariantType</link>"

#. (itstool) path: item/p
#: C/gmenu.py.page:83
msgid ""
"<link href=\"http://developer.gnome.org/glib/unstable/glib-GVariant.html"
"\">GVariant</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/glib/unstable/glib-GVariant.html"
"\">GVariant</link>"

#. (itstool) path: info/title
#: C/gmenu.vala.page:8
msgctxt "text"
msgid "GMenu (Vala)"
msgstr "GMenu (Vala)"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/gmenu.vala.page:28
msgctxt "_"
msgid ""
"external ref='media/gmenu.vala.png' md5='7a9f381fc3ed5bf8d1c50d2acb095400'"
msgstr ""

#. (itstool) path: note/p
#: C/gmenu.vala.page:30
msgid ""
"<em style=\"strong\">You need to be running GTK+-3.4 or later for this to "
"work</em>"
msgstr ""
"<em style=\"strong\">이 코드가 동작하려면 GTK+-3.4 이상이 필요합니다</em>"

#. (itstool) path: page/code
#: C/gmenu.vala.page:34
#, no-wrap
msgid ""
"/* A window in the application. */\n"
"public class Window : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Constructor */\n"
"\tpublic Window (Application app) {\n"
"\t\tObject (application: app, title: \"Gmenu Example\");\n"
"\n"
"\t\tvar about_action = new SimpleAction (\"about\", null);\n"
"\n"
"\t\t/* Connect the 'activate' signal to the\n"
"\t\t * signal handler (aka. callback).\n"
"\t\t */\n"
"\t\tabout_action.activate.connect (this.about_cb);\n"
"\n"
"\t\t/* Add the action to this window. */\n"
"\t\tthis.add_action (about_action);\n"
"\n"
"\t\tthis.show ();\n"
"\t}\n"
"\n"
"\t/* Signal handler for 'activate' signal of the SimpleAction. */\n"
"\tvoid about_cb (SimpleAction simple, Variant? parameter) {\n"
"\t\tprint (\"This does nothing.  It is only a demonstration.\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* This is the Application. */\n"
"public class Application : Gtk.Application {\n"
"\n"
"\t/* Constructor */\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.application\");\n"
"\t}\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create a new window for this application. */\n"
"\t\tnew Window (this);\n"
"\t}\n"
"\n"
"\t/* Override the 'startup' signal of GLib.Application. */\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\tvar menu = new Menu ();\n"
"\t\tmenu.append (\"About\", \"win.about\");\n"
"\t\tmenu.append (\"Quit\", \"app.quit\");\n"
"\t\tthis.app_menu = menu;\n"
"\n"
"\t\tvar quit_action = new SimpleAction (\"quit\", null);\n"
"\t\tquit_action.activate.connect (this.quit);\n"
"\t\tthis.add_action (quit_action);\n"
"\t}\n"
"}\n"
"\n"
"/* main function creates Application and runs it. */\n"
"int main (string[] args) {\n"
"\treturn new Application ().run (args);\n"
"}\n"
msgstr ""
"/* A window in the application. */\n"
"public class Window : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Constructor */\n"
"\tpublic Window (Application app) {\n"
"\t\tObject (application: app, title: \"Gmenu Example\");\n"
"\n"
"\t\tvar about_action = new SimpleAction (\"about\", null);\n"
"\n"
"\t\t/* Connect the 'activate' signal to the\n"
"\t\t * signal handler (aka. callback).\n"
"\t\t */\n"
"\t\tabout_action.activate.connect (this.about_cb);\n"
"\n"
"\t\t/* Add the action to this window. */\n"
"\t\tthis.add_action (about_action);\n"
"\n"
"\t\tthis.show ();\n"
"\t}\n"
"\n"
"\t/* Signal handler for 'activate' signal of the SimpleAction. */\n"
"\tvoid about_cb (SimpleAction simple, Variant? parameter) {\n"
"\t\tprint (\"This does nothing.  It is only a demonstration.\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* This is the Application. */\n"
"public class Application : Gtk.Application {\n"
"\n"
"\t/* Constructor */\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.application\");\n"
"\t}\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create a new window for this application. */\n"
"\t\tnew Window (this);\n"
"\t}\n"
"\n"
"\t/* Override the 'startup' signal of GLib.Application. */\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\tvar menu = new Menu ();\n"
"\t\tmenu.append (\"About\", \"win.about\");\n"
"\t\tmenu.append (\"Quit\", \"app.quit\");\n"
"\t\tthis.app_menu = menu;\n"
"\n"
"\t\tvar quit_action = new SimpleAction (\"quit\", null);\n"
"\t\tquit_action.activate.connect (this.quit);\n"
"\t\tthis.add_action (quit_action);\n"
"\t}\n"
"}\n"
"\n"
"/* main function creates Application and runs it. */\n"
"int main (string[] args) {\n"
"\treturn new Application ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/gmenu.vala.page:41
msgid ""
"<link href=\"http://www.valadoc.org/gio-2.0/GLib.Menu.Menu.html\">Menu</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gio-2.0/GLib.Menu.Menu.html\">Menu</link>"

#. (itstool) path: item/p
#: C/gmenu.vala.page:42
msgid ""
"<link href=\"http://www.valadoc.org/gio-2.0/GLib.Menu.append.html\">append</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gio-2.0/GLib.Menu.append.html\">append</"
"link>"

#. (itstool) path: item/p
#: C/gmenu.vala.page:43
msgid ""
"<link href=\"http://www.valadoc.org/gio-2.0/GLib.SimpleAction.html"
"\">SimpleAction</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gio-2.0/GLib.SimpleAction.html"
"\">SimpleAction</link>"

#. (itstool) path: item/p
#: C/gmenu.vala.page:44
msgid ""
"<link href=\"http://www.valadoc.org/gio-2.0/GLib.ActionMap.add_action.html"
"\">add_action</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gio-2.0/GLib.ActionMap.add_action.html"
"\">add_action</link>"

#. (itstool) path: info/title
#: C/grid.c.page:8
msgctxt "text"
msgid "Grid (C)"
msgstr "Grid (C)"

#. (itstool) path: info/desc
#: C/grid.c.page:18 C/grid.js.page:22 C/grid.py.page:26 C/grid.vala.page:20
msgid "Pack widgets in rows and columns"
msgstr "위젯을 행열 방향으로 감쌉니다"

#. (itstool) path: page/title
#: C/grid.c.page:21 C/grid.js.page:25 C/grid.py.page:29
msgid "Grid"
msgstr "Grid"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/grid.c.page:23 C/grid.js.page:26 C/grid.vala.page:24
msgctxt "_"
msgid "external ref='media/grid.png' md5='27d45da115401127456a3b854dcfc5be'"
msgstr ""

#. (itstool) path: page/p
#: C/grid.c.page:24 C/grid.vala.page:25
msgid "A button widget connected to a progress bar."
msgstr "진행 표시줄에 연결한 단추 위젯입니다."

#. (itstool) path: page/code
#: C/grid.c.page:26
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Signal handler for the \"clicked\" signal of the Button. Each\n"
"click generates a progress bar pulse*/\n"
"static void\n"
"on_button_click (GtkButton *button,\n"
"                 gpointer   user_data)\n"
"{\n"
"  GtkProgressBar *progress_bar = user_data;\n"
"  gtk_progress_bar_pulse (progress_bar);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"  GtkWidget *button;\n"
"  GtkWidget *progress_bar;\n"
"\n"
"  /*Create the window and set a title*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Grid Example\");\n"
"\n"
"  /*Create a button with a label*/\n"
"  button = gtk_button_new_with_label (\"Button\");\n"
"\n"
"  /*Create the progress bar*/\n"
"  progress_bar = gtk_progress_bar_new ();\n"
"\n"
"  /*Create a grid and attach the button and progress bar\n"
"  accordingly*/\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_attach (GTK_GRID (grid), button, 1, 1, 1, 1);\n"
"  gtk_grid_attach_next_to (GTK_GRID (grid), \n"
"                           progress_bar, \n"
"                           button, \n"
"                           GTK_POS_BOTTOM, 1, 1);\n"
"\n"
"  /*Connecting the clicked signal to the callback function*/\n"
"  g_signal_connect (GTK_BUTTON (button), \"clicked\", \n"
"                    G_CALLBACK (on_button_click), progress_bar);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Signal handler for the \"clicked\" signal of the Button. Each\n"
"click generates a progress bar pulse*/\n"
"static void\n"
"on_button_click (GtkButton *button,\n"
"                 gpointer   user_data)\n"
"{\n"
"  GtkProgressBar *progress_bar = user_data;\n"
"  gtk_progress_bar_pulse (progress_bar);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"  GtkWidget *button;\n"
"  GtkWidget *progress_bar;\n"
"\n"
"  /*Create the window and set a title*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Grid Example\");\n"
"\n"
"  /*Create a button with a label*/\n"
"  button = gtk_button_new_with_label (\"Button\");\n"
"\n"
"  /*Create the progress bar*/\n"
"  progress_bar = gtk_progress_bar_new ();\n"
"\n"
"  /*Create a grid and attach the button and progress bar\n"
"  accordingly*/\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_attach (GTK_GRID (grid), button, 1, 1, 1, 1);\n"
"  gtk_grid_attach_next_to (GTK_GRID (grid), \n"
"                           progress_bar, \n"
"                           button, \n"
"                           GTK_POS_BOTTOM, 1, 1);\n"
"\n"
"  /*Connecting the clicked signal to the callback function*/\n"
"  g_signal_connect (GTK_BUTTON (button), \"clicked\", \n"
"                    G_CALLBACK (on_button_click), progress_bar);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/grid.c.page:34 C/progressbar.c.page:35
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkProgressBar.html"
"\">GtkProgressBar</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkProgressBar.html"
"\">GtkProgressBar</link>"

#. (itstool) path: info/title
#: C/grid.js.page:8
msgctxt "text"
msgid "Grid (JavaScript)"
msgstr "Grid(JavaScript)"

#. (itstool) path: page/p
#: C/grid.js.page:27
msgid ""
"A button widget connected to a progress bar, inside of a grid which handles "
"the layout."
msgstr "단추 위젯은 배치를 다루는 격자의 진행 표시에 연결합니다."

#. (itstool) path: page/code
#: C/grid.js.page:29
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const GridExample = new Lang.Class ({\n"
"    Name: 'Grid Example',\n"
"\n"
"    /* Create the application itself\n"
"       This boilerplate code is needed to build any GTK+ application. */\n"
"        _init: function () {\n"
"            this.application = new Gtk.Application ({\n"
"                application_id: 'org.example.jsgrid',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                         window_position: Gtk.WindowPosition.CENTER,\n"
"                                                         title: \"Grid Example\"});\n"
"\n"
"        // Create the grid\n"
"        this.Grid = new Gtk.Grid ();\n"
"\n"
"        // Create the widgets inside the grid\n"
"        this.progressBar = new Gtk.ProgressBar ();\n"
"        this.Button = new Gtk.Button ({ label: \"Button\" });\n"
"        this.Button.connect (\"clicked\", Lang.bind(this, this._clickHandler));\n"
"\n"
"        // Assemble the grid\n"
"        this._window.add (this.Grid);\n"
"        this.Grid.attach (this.Button, 1, 1, 1, 1);\n"
"        this.Grid.attach_next_to (this.progressBar, this.Button, Gtk.PositionType.BOTTOM, 1, 1);\n"
"\n"
"                // Show the window and all child widgets\n"
"                this._window.show_all();\n"
"    },\n"
"\n"
"    // Here's the function that says what happens when the button is clicked\n"
"    _clickHandler: function () {\n"
"        this.progressBar.pulse ();\n"
"    }\n"
"\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GridExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const GridExample = new Lang.Class ({\n"
"    Name: 'Grid Example',\n"
"\n"
"    /* Create the application itself\n"
"       This boilerplate code is needed to build any GTK+ application. */\n"
"        _init: function () {\n"
"            this.application = new Gtk.Application ({\n"
"                application_id: 'org.example.jsgrid',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                         window_position: Gtk.WindowPosition.CENTER,\n"
"                                                         title: \"Grid Example\"});\n"
"\n"
"        // Create the grid\n"
"        this.Grid = new Gtk.Grid ();\n"
"\n"
"        // Create the widgets inside the grid\n"
"        this.progressBar = new Gtk.ProgressBar ();\n"
"        this.Button = new Gtk.Button ({ label: \"Button\" });\n"
"        this.Button.connect (\"clicked\", Lang.bind(this, this._clickHandler));\n"
"\n"
"        // Assemble the grid\n"
"        this._window.add (this.Grid);\n"
"        this.Grid.attach (this.Button, 1, 1, 1, 1);\n"
"        this.Grid.attach_next_to (this.progressBar, this.Button, Gtk.PositionType.BOTTOM, 1, 1);\n"
"\n"
"                // Show the window and all child widgets\n"
"                this._window.show_all();\n"
"    },\n"
"\n"
"    // Here's the function that says what happens when the button is clicked\n"
"    _clickHandler: function () {\n"
"        this.progressBar.pulse ();\n"
"    }\n"
"\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new GridExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/grid.js.page:37
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Grid.html"
"\">Gtk.Grid</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Grid.html"
"\">Gtk.Grid</link>"

#. (itstool) path: item/p
#: C/grid.js.page:38 C/progressbar.js.page:42
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.ProgressBar."
"html\">Gtk.ProgressBar</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.ProgressBar."
"html\">Gtk.ProgressBar</link>"

#. (itstool) path: info/title
#: C/grid.py.page:8
msgctxt "text"
msgid "Grid (Python)"
msgstr "Grid(Python)"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/grid.py.page:31
msgctxt "_"
msgid ""
"external ref='media/grid_simple.png' md5='c806f2e69b30373d4d2e08b41d6cc1f6'"
msgstr ""

#. (itstool) path: page/p
#: C/grid.py.page:32
msgid "Some labels in a grid."
msgstr "그리드에 레이블 몇 개를 넣어봤습니다."

#. (itstool) path: section/code
#: C/grid.py.page:38
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Grid Example\", application=app)\n"
"\n"
"        # three labels\n"
"        label_top_left = Gtk.Label(label=\"This is Top Left\")\n"
"        label_top_right = Gtk.Label(label=\"This is Top Right\")\n"
"        label_bottom = Gtk.Label(label=\"This is Bottom\")\n"
"\n"
"        # a grid\n"
"        grid = Gtk.Grid()\n"
"\n"
"        # some space between the columns of the grid\n"
"        grid.set_column_spacing(20)\n"
"\n"
"        # in the grid:\n"
"        # attach the first label in the top left corner\n"
"        grid.attach(label_top_left, 0, 0, 1, 1)\n"
"        # attach the second label\n"
"        grid.attach(label_top_right, 1, 0, 1, 1)\n"
"        # attach the third label below the first label\n"
"        grid.attach_next_to(\n"
"            label_bottom, label_top_left, Gtk.PositionType.BOTTOM, 2, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Grid Example\", application=app)\n"
"\n"
"        # three labels\n"
"        label_top_left = Gtk.Label(label=\"This is Top Left\")\n"
"        label_top_right = Gtk.Label(label=\"This is Top Right\")\n"
"        label_bottom = Gtk.Label(label=\"This is Bottom\")\n"
"\n"
"        # a grid\n"
"        grid = Gtk.Grid()\n"
"\n"
"        # some space between the columns of the grid\n"
"        grid.set_column_spacing(20)\n"
"\n"
"        # in the grid:\n"
"        # attach the first label in the top left corner\n"
"        grid.attach(label_top_left, 0, 0, 1, 1)\n"
"        # attach the second label\n"
"        grid.attach(label_top_right, 1, 0, 1, 1)\n"
"        # attach the third label below the first label\n"
"        grid.attach_next_to(\n"
"            label_bottom, label_top_left, Gtk.PositionType.BOTTOM, 2, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/grid.py.page:42
msgid "Useful methods for a Grid widget"
msgstr "Grid 위젯에 쓸만한 메서드"

#. (itstool) path: item/p
#: C/grid.py.page:45
msgid ""
"To attach a widget <code>child</code> in position <code>left, top</code> in "
"a slot of given <code>width, height</code> use <code>attach(child, top, "
"left, width, height)</code>. If a widget <code>sibling</code> is already in "
"place, we can also use <code>attach_next_to(child, sibling, side, width, "
"height)</code>, where <code>side</code> is one of <code>Gtk.PositionType."
"LEFT, Gtk.PositionType.RIGHT, Gtk.PositionType.TOP, Gtk.PositionType.BOTTOM</"
"code>."
msgstr ""
"<code>width, height</code> 크기로 <code>left, top</code> 위치에 <code>child</"
"code>  위젯을 붙이려면 <code>attach(child, top, left, width, height)</code> "
"함수를 사용하십시오, <code>sibling</code> 위젯을 이미 두었다면 "
"<code>attach_next_to(child, sibling, side, width, height)</code> 함수를 사용"
"할 수 있습니다. 여기서 <code>side</code> 값은 <code>Gtk.PositionType.LEFT, "
"Gtk.PositionType.RIGHT, Gtk.PositionType.TOP, Gtk.PositionType.BOTTOM</code> "
"중 하나입니다."

#. (itstool) path: item/p
#: C/grid.py.page:46
msgid ""
"<code>insert_row(position)</code> and <code>insert_column(position)</code> "
"do exactly what they say; children which are attached at or below this "
"position are moved one row down, and children which span across this "
"position are grown to span the new row. <code>insert_next_to(sibling, side)</"
"code> inserts a row or column at the specified position. The new row or "
"column is placed next to <code>sibling</code>, on the side determined by "
"<code>side</code>; if side is <code>Gtk.PositionType.TOP</code> or <code>Gtk."
"PositionType.BOTTOM</code>, a row is inserted, if side is <code>Gtk."
"PositionType.LEFT</code> or <code>Gtk.PositionType.RIGHT</code>, a column is "
"inserted."
msgstr ""
"<code>insert_row(position)</code> 함수와 <code>insert_column(position)</"
"code> 함수는 주어진 이름대로 정확하게 동작합니다. 이 위치 옆에 붙은 하위 요"
"소 또는 아래에 붙은 하위 요소를 한줄 아래로 내리며, 이 위치의 하위 요소는 "
"(종,횡 방향으로) 새 줄을 확장합니다. <code>insert_next_to(sibling, side)</"
"code>  함수는 지정 위치에 줄이나 행을 넣습니다. 즉, 이 함수는 새 줄 또는 행"
"을 <code>sibling</code> 다음의 <code>side</code>에서 지정한 위치에 넣습니다. "
"<code>side</code> 값이 <code>Gtk.PositionType.TOP</code> 또는 <code>Gtk."
"PositionType.BOTTOM</code>이면 새 줄을 넣고, <code>Gtk.PositionType.LEFT</"
"code> 또는 <code>Gtk.PositionType.RIGHT</code>면 새 칸을 넣습니다."

#. (itstool) path: item/p
#: C/grid.py.page:47
msgid ""
"<code>set_row_homogeneous(True)</code> and "
"<code>set_column_homogeneous(True)</code> ensure that (respectively) every "
"row or every column has the same width or height."
msgstr ""
"<code>set_row_homogeneous(True)</code> 함수는 각각 모든 줄의 높이를 동일하게 "
"설정하며 <code>set_column_homogeneous(True)</code> 함수는 모든 칸의 너비를 동"
"일하게 설정합니다."

#. (itstool) path: item/p
#: C/grid.py.page:48
msgid ""
"<code>set_row_spacing(spacing)</code> and <code>set_column_spacing(spacing)</"
"code> force a spacing between (respectively) rows or columns. The value of "
"<code>spacing</code> can be between <code>0</code>, which is the default "
"value, and <code>32767</code>."
msgstr ""
"<code>set_row_spacing(spacing)</code>함수는 줄 간격을 강제로 설정하고 "
"<code>set_column_spacing(spacing)</code> 함수는 칸 간격을 강제로 설정합니다. "
"<code>spacing</code> 값은 기본값 <code>0</code>에서 <code>32767</code>값 사이"
"입니다."

#. (itstool) path: item/p
#: C/grid.py.page:59 C/label.py.page:105 C/separator.c.page:41
#: C/separator.py.page:42 C/switch.py.page:46
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkLabel.html"
"\">GtkLabel</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkLabel.html"
"\">GtkLabel</link>"

#. (itstool) path: item/p
#: C/grid.py.page:60 C/paned.c.page:38 C/paned.py.page:44
#: C/scrolledwindow.py.page:47
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkImage.html"
"\">GtkImage</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkImage.html"
"\">GtkImage</link>"

#. (itstool) path: item/p
#: C/grid.py.page:61 C/radiobutton.py.page:50 C/separator.c.page:40
#: C/separator.py.page:41 C/switch.py.page:47 C/toolbar_builder.py.page:196
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkGrid.html"
"\">GtkGrid</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkGrid.html"
"\">GtkGrid</link>"

#. (itstool) path: info/title
#: C/grid.vala.page:8
msgctxt "text"
msgid "Grid (Vala)"
msgstr "Grid(Vala)"

#. (itstool) path: page/title
#: C/grid.vala.page:23
msgid "Grid widget"
msgstr "그리드 위젯"

#. (itstool) path: page/code
#: C/grid.vala.page:27
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Widget progress_bar;\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Grid Example\");\n"
"\t\tvar grid = new Gtk.Grid();\n"
"\t\tprogress_bar = new Gtk.ProgressBar ();\n"
"\t\tprogress_bar.show ();\n"
"\n"
"\t\tvar button = new Gtk.Button.with_label (\"Button\");\n"
"\t\tbutton.clicked.connect (on_button_click);\n"
"\t\tbutton.show ();\n"
"\n"
"\t\tthis.add(grid);\n"
"\t\tgrid.attach(button, 0, 1, 1, 1);\n"
"\t\tgrid.attach_next_to (progress_bar, button, Gtk.PositionType.BOTTOM, 1, 1);\n"
"\t\tgrid.show ();\n"
"\t}\n"
"\n"
"\tvoid on_button_click (Gtk.Button button) {\n"
"\t\t(progress_bar as Gtk.ProgressBar).pulse ();\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Widget progress_bar;\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Grid Example\");\n"
"\t\tvar grid = new Gtk.Grid();\n"
"\t\tprogress_bar = new Gtk.ProgressBar ();\n"
"\t\tprogress_bar.show ();\n"
"\n"
"\t\tvar button = new Gtk.Button.with_label (\"Button\");\n"
"\t\tbutton.clicked.connect (on_button_click);\n"
"\t\tbutton.show ();\n"
"\n"
"\t\tthis.add(grid);\n"
"\t\tgrid.attach(button, 0, 1, 1, 1);\n"
"\t\tgrid.attach_next_to (progress_bar, button, Gtk.PositionType.BOTTOM, 1, 1);\n"
"\t\tgrid.show ();\n"
"\t}\n"
"\n"
"\tvoid on_button_click (Gtk.Button button) {\n"
"\t\t(progress_bar as Gtk.ProgressBar).pulse ();\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/grid.vala.page:32
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Grid.html\">Gtk.Grid</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Grid.html\">Gtk.Grid</link>"

#. (itstool) path: info/title
#: C/GtkApplicationWindow.c.page:8
msgctxt "text"
msgid "ApplicationWindow (C)"
msgstr "ApplicationWindow (C)"

#. (itstool) path: info/desc
#: C/GtkApplicationWindow.c.page:18
msgid "A toplevel window which can contain other widgets, and support GMenu"
msgstr "다른 위젯을 넣을 수 있고 GMenu를 지원하는 최상위 창"

#. (itstool) path: page/title
#: C/GtkApplicationWindow.c.page:21 C/GtkApplicationWindow.js.page:21
#: C/GtkApplicationWindow.py.page:28 C/GtkApplicationWindow.vala.page:21
msgid "ApplicationWindow"
msgstr "ApplicationWindow"

#. (itstool) path: page/media
#. (itstool) path: td/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/GtkApplicationWindow.c.page:22 C/GtkApplicationWindow.js.page:22
#: C/GtkApplicationWindow.py.page:29 C/GtkApplicationWindow.vala.page:22
#: C/window.c.page:22 C/window.js.page:25 C/window.py.page:33
#: C/window.vala.page:25
msgctxt "_"
msgid "external ref='media/window.png' md5='eb0cde3530978619c25bddfaeb453345'"
msgstr ""

#. (itstool) path: page/p
#: C/GtkApplicationWindow.c.page:23
msgid "A minimal GtkApplication with a GtkApplicationWindow"
msgstr "GtkApplicationWindow를 사용하는 작은 GtkApplication"

#. (itstool) path: page/code
#: C/GtkApplicationWindow.c.page:25
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Hello GNOME\");\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Hello GNOME\");\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/GtkApplicationWindow.c.page:31
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/3.4/GtkApplicationWindow.html"
"\">GtkApplicationWindow</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/3.4/GtkApplicationWindow.html"
"\">GtkApplicationWindow</link>"

#. (itstool) path: info/title
#: C/GtkApplicationWindow.js.page:8
msgctxt "text"
msgid "ApplicationWindow (JavaScript)"
msgstr "ApplicationWindow (JavaScript)"

#. (itstool) path: info/desc
#: C/GtkApplicationWindow.js.page:18 C/GtkApplicationWindow.py.page:25
#: C/GtkApplicationWindow.vala.page:18
msgid "GtkWindow subclass with GtkApplication support"
msgstr "GtkApplication을 지원하는 GtkWindow 하위 클래스"

#. (itstool) path: page/p
#: C/GtkApplicationWindow.js.page:23
msgid "A simple GtkApplicationWindow which can support Menus."
msgstr "Menu를 지원하는 간단한 GtkApplicationWindow 입니다."

#. (itstool) path: page/code
#: C/GtkApplicationWindow.js.page:25
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class ({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.myapp',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"       //connect to 'activate' and 'startup' signals to the callback functions\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI (in this case it's just the ApplicationWindow\n"
"    _buildUI: function () {\n"
"        this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"Welcome to GNOME\" });\n"
"\n"
"        //uncommenting the line below will change the window size\n"
"        //this._window.set_default_size(600, 400);\n"
"\n"
"        //show the window and all child widgets (none in this case)\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    //callback function for 'startup' signal\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class ({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.myapp',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"       //connect to 'activate' and 'startup' signals to the callback functions\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI (in this case it's just the ApplicationWindow\n"
"    _buildUI: function () {\n"
"        this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"Welcome to GNOME\" });\n"
"\n"
"        //uncommenting the line below will change the window size\n"
"        //this._window.set_default_size(600, 400);\n"
"\n"
"        //show the window and all child widgets (none in this case)\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    //callback function for 'startup' signal\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: info/title
#: C/GtkApplicationWindow.py.page:8
msgctxt "text"
msgid "ApplicationWindow (Python)"
msgstr "ApplicationWindow (Python)"

#. (itstool) path: page/p
#: C/GtkApplicationWindow.py.page:30
msgid ""
"The simplest GtkApplication Window which can support <link xref=\"gmenu.py\"/"
">."
msgstr ""
"<link xref=\"gmenu.py\"/>를 지원할 수 있는 간단한 GtkApplication 창입니다."

#. (itstool) path: section/code
#: C/GtkApplicationWindow.py.page:37
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"# a Gtk ApplicationWindow\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # constructor: the title is \"Welcome to GNOME\" and the window belongs\n"
"    # to the application app\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    # constructor of the Gtk Application\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    # create and activate a MyWindow, with self (the MyApplication) as\n"
"    # application the window belongs to.\n"
"    # Note that the function in C activate() becomes do_activate() in Python\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        # show the window and all its content\n"
"        # this line could go in the constructor of MyWindow as well\n"
"        win.show_all()\n"
"\n"
"    # start up the application\n"
"    # Note that the function in C startup() becomes do_startup() in Python\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"# create and run the application, exit with the value returned by\n"
"# running the program\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"# a Gtk ApplicationWindow\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # constructor: the title is \"Welcome to GNOME\" and the window belongs\n"
"    # to the application app\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    # constructor of the Gtk Application\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    # create and activate a MyWindow, with self (the MyApplication) as\n"
"    # application the window belongs to.\n"
"    # Note that the function in C activate() becomes do_activate() in Python\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        # show the window and all its content\n"
"        # this line could go in the constructor of MyWindow as well\n"
"        win.show_all()\n"
"\n"
"    # start up the application\n"
"    # Note that the function in C startup() becomes do_startup() in Python\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"# create and run the application, exit with the value returned by\n"
"# running the program\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/GtkApplicationWindow.py.page:41
msgid "Useful methods for a Gtk.ApplicationWindow widget"
msgstr "Gtk.ApplicationWindow 위젯에 쓸만한 메서드"

#. (itstool) path: item/p
#: C/GtkApplicationWindow.py.page:44 C/window.py.page:54
msgid ""
"<code>set_default_size(200, 100)</code> sets the default size of the window "
"to a width of <code>200</code> and a height of <code>100</code>; if instead "
"of a positive number we pass <code>-1</code> we have the default size."
msgstr ""
"<code>set_default_size(200, 100)</code> 함수는 창의 기본 크기를 너비 "
"<code>200</code>, 높이 <code>100</code>으로 설정합니다. 양수를 넣지 않을 때"
"는 기본 크기를 설정할 때 대신 <code>-1</code> 값을 전달합니다."

#. (itstool) path: item/p
#: C/GtkApplicationWindow.py.page:45 C/window.py.page:55
msgid ""
"<code>set_position(Gtk.WindowPosition.CENTER)</code> centers the window. "
"Other options are <code>Gtk.WindowPosition.NONE, Gtk.WindowPosition.MOUSE, "
"Gtk.WindowPosition.CENTER_ALWAYS, Gtk.WindowPosition.CENTER_ON_PARENT</code>."
msgstr ""
"<code>set_position(Gtk.WindowPosition.CENTER)</code> 함수는 창을 가운데에 놓"
"습니다. 다른 옵션으로는 <code>Gtk.WindowPosition.NONE, Gtk.WindowPosition."
"MOUSE, Gtk.WindowPosition.CENTER_ALWAYS, Gtk.WindowPosition."
"CENTER_ON_PARENT</code>가 있습니다."

#. (itstool) path: info/title
#: C/GtkApplicationWindow.vala.page:8
msgctxt "text"
msgid "ApplicationWindow (Vala)"
msgstr "ApplicationWindow (Vala)"

#. (itstool) path: page/p
#: C/GtkApplicationWindow.vala.page:23
msgid "The simplest GtkApplication Window which can support Menus."
msgstr "메뉴를 지원하는 간단한 GtkApplication 창입니다."

#. (itstool) path: page/code
#: C/GtkApplicationWindow.vala.page:25
#, no-wrap
msgid ""
"\n"
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\t/* Create the window of this application and show it. */\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"Welcome to GNOME\";\n"
"\t\twindow.show ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"\n"
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\t/* Create the window of this application and show it. */\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"Welcome to GNOME\";\n"
"\t\twindow.show ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/GtkApplicationWindow.vala.page:31 C/label.vala.page:31
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Application.html.content.tpl"
"\">Gtk.Application</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Application.html.content.tpl"
"\">Gtk.Application</link>"

#. (itstool) path: info/title
#: C/guitar-tuner.c.page:8
msgctxt "text"
msgid "Guitar tuner (C)"
msgstr "기타 조율기(C)"

#. (itstool) path: info/desc
#: C/guitar-tuner.c.page:11 C/guitar-tuner.py.page:11
msgid ""
"Use GTK+ and GStreamer to build a simple guitar tuner application for GNOME. "
"Shows off how to use the interface designer."
msgstr ""
"GTK+와 지스트리머를 간단한 그놈용 기타 조율기 프로그램을 만들어보겠습니다. 인"
"터페이스 디자이너 사용법을 나타냅니다."

#. (itstool) path: credit/name
#: C/guitar-tuner.c.page:19 C/guitar-tuner.cpp.page:17
#: C/guitar-tuner.py.page:19 C/guitar-tuner.vala.page:18
#: C/image-viewer.c.page:19 C/image-viewer.cpp.page:17
#: C/image-viewer.js.page:19 C/image-viewer.py.page:19
#: C/image-viewer.vala.page:19 C/index.page:18 C/magic-mirror.vala.page:19
#: C/photo-wall.c.page:18 C/record-collection.js.page:19
msgid "Johannes Schmid"
msgstr "Johannes Schmid"

#. (itstool) path: page/title
#: C/guitar-tuner.c.page:29 C/guitar-tuner.cpp.page:27
#: C/guitar-tuner.js.page:20 C/guitar-tuner.py.page:34
#: C/guitar-tuner.vala.page:32
msgid "Guitar tuner"
msgstr "기타 조율기"

#. (itstool) path: synopsis/p
#: C/guitar-tuner.c.page:32 C/guitar-tuner.cpp.page:30
#: C/guitar-tuner.py.page:37
msgid ""
"In this tutorial, we're going to make a program which plays tones that you "
"can use to tune a guitar. You will learn how to:"
msgstr ""
"이 지침서에서, 기타 조율에 사용할 수 있는 음색을 재생하는 프로그램을 만들겠습"
"니다. 다음 내용을 배워나갑니다:"

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:34 C/guitar-tuner.cpp.page:32
#: C/guitar-tuner.py.page:39
msgid "Set up a basic project in Anjuta"
msgstr "안주타에서 기본 프로젝트 설정"

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:35 C/guitar-tuner.cpp.page:33
#: C/guitar-tuner.py.page:40
msgid "Create a simple GUI with Anjuta's UI designer"
msgstr "안주타 사용자 인터페이스 디자이너에서 간단한 GUI 만들기"

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:36 C/guitar-tuner.cpp.page:34
#: C/guitar-tuner.py.page:41
msgid "Use GStreamer to play sounds"
msgstr "지스트리머를 사용하여 소리 재생하기"

#. (itstool) path: synopsis/p
#: C/guitar-tuner.c.page:38 C/guitar-tuner.cpp.page:36
#: C/guitar-tuner.py.page:43 C/guitar-tuner.vala.page:41
#: C/image-viewer.js.page:39 C/image-viewer.py.page:39
#: C/image-viewer.vala.page:46 C/magic-mirror.vala.page:39
msgid "You'll need the following to be able to follow this tutorial:"
msgstr "이 지침을 따라갈 수 있으려면 다음이 필요합니다:"

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:40 C/guitar-tuner.cpp.page:38
#: C/guitar-tuner.py.page:45 C/image-viewer.js.page:41
#: C/image-viewer.py.page:41 C/magic-mirror.vala.page:41
msgid "An installed copy of the <link xref=\"getting-ready\">Anjuta IDE</link>"
msgstr "<link xref=\"getting-ready\">안주타 IDE</link> 설치 사본"

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:41
msgid "Basic knowledge of the C programming language"
msgstr "C 프로그래밍 언어 기본 지식"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/guitar-tuner.c.page:45 C/guitar-tuner.cpp.page:43
#: C/guitar-tuner.js.page:37 C/guitar-tuner.py.page:50
#: C/guitar-tuner.vala.page:48
msgctxt "_"
msgid ""
"external ref='media/guitar-tuner.png' md5='35e615e0f5e293671d00c5c414ac2f6b'"
msgstr ""

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:48 C/guitar-tuner.cpp.page:46
#: C/guitar-tuner.py.page:53 C/image-viewer.c.page:42
#: C/image-viewer.cpp.page:40 C/image-viewer.js.page:50
#: C/image-viewer.py.page:49 C/image-viewer.vala.page:57
#: C/magic-mirror.vala.page:50 C/message-board.c.page:46 C/photo-wall.c.page:52
#: C/record-collection.js.page:53
msgid "Create a project in Anjuta"
msgstr "안주타에서 프로젝트 만들기"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:49 C/guitar-tuner.cpp.page:47
#: C/guitar-tuner.py.page:54 C/guitar-tuner.vala.page:52
#: C/image-viewer.c.page:43 C/image-viewer.cpp.page:41
#: C/image-viewer.js.page:51 C/image-viewer.py.page:50
#: C/image-viewer.vala.page:58 C/magic-mirror.vala.page:51
#: C/photo-wall.c.page:53 C/record-collection.js.page:54
msgid ""
"Before you start coding, you'll need to set up a new project in Anjuta. This "
"will create all of the files you need to build and run the code later on. "
"It's also useful for keeping everything together."
msgstr ""
"코딩을 시작하기 전에 안주타에서 새 프로젝트를 설정해야합니다. 이 프로그램은 "
"빌드에 필요한 모든 파일을 만들고 그 다음 코드를 실행합니다. 또한 이 모든 상태"
"를 유지 관리하는데 쓸만합니다."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:52 C/guitar-tuner.cpp.page:50
#: C/guitar-tuner.py.page:57 C/image-viewer.c.page:46
#: C/image-viewer.cpp.page:44 C/image-viewer.js.page:54
#: C/image-viewer.py.page:53 C/magic-mirror.vala.page:54 C/photo-wall.c.page:56
#: C/record-collection.js.page:57
msgid ""
"Start Anjuta and click <guiseq><gui>File</gui><gui>New</gui><gui>Project</"
"gui></guiseq> to open the project wizard."
msgstr ""
"안주타를 시작하고 <guiseq><gui>파일</gui><gui>새로 만들기</gui><gui>프로젝트"
"</gui></guiseq> 를 눌러 프로젝트 마법사를 여십시오."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:55
msgid ""
"Choose <gui>GTK+ (Simple)</gui> from the <gui>C</gui> tab, click "
"<gui>Continue</gui>, and fill out your details on the next few pages. Use "
"<file>guitar-tuner</file> as project name and directory."
msgstr ""
"<gui>C</gui> 탭에서 <gui>GTK+ (단순)</gui>를 선택하고, <gui>계속</gui>을 누"
"른 다음, 나타난 페이지에서 몇가지 자세한 내용을 입력하십시오. 프로젝트 이름"
"과 디렉터리에 <file>guitar-tuner</file>를 입력하십시오."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:58
msgid ""
"Make sure that <gui>Configure external packages</gui> is switched <gui>ON</"
"gui>. On the next page, select <em>gstreamer-0.10</em> from the list to "
"include the GStreamer library in your project."
msgstr ""
"<gui>외부 패키지 설정</gui>을 <gui>켬</gui>으로 설정했는지 확인하십시오. 다"
"음 페이지의 목록에서 <em>gstreamer-0.10</em>를 선택하여 프로젝트에 지스트리"
"머 라이브러리를 넣으십시오."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:62 C/image-viewer.c.page:57 C/photo-wall.c.page:71
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. Open "
"<file>src/main.c</file> from the <gui>Project</gui> or <gui>File</gui> tabs. "
"You should see some code which starts with the lines:"
msgstr ""
"<gui>적용</gui>을 누르면 프로젝트를 만들어줍니다. <gui>프로젝트</gui>나 <gui>"
"파일</gui>탭에서 <file>src/main.c</file> 파일을 여십시오. 다음 줄로 시작하는 "
"일부 코드를 볼 수 있어야합니다:"

#. (itstool) path: item/code
#: C/guitar-tuner.c.page:63 C/image-viewer.c.page:58 C/photo-wall.c.page:72
#, no-wrap
msgid ""
"\n"
"#include &lt;config.h&gt;\n"
"#include &lt;gtk/gtk.h&gt;"
msgstr ""
"\n"
"#include &lt;config.h&gt;\n"
"#include &lt;gtk/gtk.h&gt;"

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:71 C/guitar-tuner.cpp.page:69
#: C/guitar-tuner.vala.page:74 C/image-viewer.c.page:66
#: C/image-viewer.cpp.page:66 C/image-viewer.vala.page:113
#: C/magic-mirror.vala.page:78
msgid "Build the code for the first time"
msgstr "첫 코드 작성"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:72
msgid ""
"C is a rather verbose language, so don't be surprised that the file contains "
"quite a lot of code. Most of it is template code. It loads an (empty) window "
"from the user interface description file and shows it. More details are "
"given below; skip this list if you understand the basics:"
msgstr ""
"C는 장황하게 하나하나 다 따지고 들어가야 하는 언어니, 좀 많은 코드가 들어가 "
"있는 파일에 놀라지 않으셔도 됩니다. 대부분은 서식 코드입니다. 이 코드에서는 "
"사용자 인터페이스 설명 파일에서 (빈) 창을 불러와 열고 화면에 나타냅니다. 자세"
"한 내용은 아래에 있습니다. 기본을 이미 알고 있다면 이 부분은 건너뛰십시오:"

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:76 C/image-viewer.c.page:71
msgid ""
"The three <code>#include</code> lines at the top include the <code>config</"
"code> (useful autoconf build defines), <code>gtk</code> (user interface) and "
"<code>gi18n</code> (internationalization) libraries. Functions from these "
"libraries are used in the rest of the code."
msgstr ""
"상단의 <code>#include</code> 세 줄은 <code>config</code>(쓸만한 autoconf 빌"
"드 정의),  <code>gtk</code>(사용자 인터페이스), <code>gi18n</code>(국제화) 라"
"이브러리입니다. 이 라이브러리의 함수를 나머지 코드에서 사용하겠습니다."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:79
msgid ""
"The <code>create_window</code> function creates a new window by opening a "
"GtkBuilder file (<file>src/guitar-tuner.ui</file>, defined a few lines "
"above), connecting its signals and then displaying it in a window. The "
"GtkBuilder file contains a description of a user interface and all of its "
"elements. You can use Anjuta's editor to design GtkBuilder user interfaces."
msgstr ""
"<code>create_window</code> 함수는 GtkBuilder 파일(<file>src/guitar-tuner.ui</"
"file> 위 몇 줄 지정)을 열어 새 창을 만들고, 시그널을 연결한 다음, 창에 띄웁니"
"다. GtkBuilder 파일에는 사용자 인터페이스 설명 정보와 구성요소 모두가 들어있"
"습니다. GtkBuilder 사용자 인터페이스를 설계할 때 안주타 편집기를 사용할 수 있"
"습니다."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:80 C/image-viewer.c.page:75
#: C/image-viewer.vala.page:123
msgid ""
"Connecting signals is how you define what happens when you push a button, or "
"when some other event happens. Here, the <code>destroy</code> function is "
"called (and quits the app) when you close the window."
msgstr ""
"시그널 연결은 단추를 누르거나 어떤 동작을 취할 때 처리할 일을 정의하는 방식입"
"니다. 여기서 창을 닫을 때 <code>destroy</code> 함수를 호출(하고 앱을 끝내기)"
"합니다."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:83 C/image-viewer.c.page:78
msgid ""
"The <code>main</code> function is run by default when you start a C "
"application. It calls a few functions which set up and then run the "
"application. The <code>gtk_main</code> function starts the GTK main loop, "
"which runs the user interface and starts listening for events (like clicks "
"and key presses)."
msgstr ""
"<code>main</code> 함수는 C 프로그램을 시작할 때 기본으로 실행하는 함수입니"
"다. 이 함수에서 몇가지 함수를 호출하여 설정하고 프로그램을 실행합니다. "
"<code>gtk_main</code> 함수는 사용자 인터페이스를 실행하고 사용자 반응(마우스 "
"단추 누름, 키보드 키 누름)대기를 시작하는 GTK 메인 루프 시작 함수입니다."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:86 C/image-viewer.c.page:81
msgid ""
"The <code>ENABLE_NLS</code> conditional definition sets up <code>gettext</"
"code>, which is a framework for translating applications. These functions "
"specify how translation tools should handle your app when you run them."
msgstr ""
"<code>ENABLE_NLS</code> 상태 정의는 프로그램을 번역하는 프레임워크 "
"<code>gettext</code>를 설정합니다. 이 함수는 프로그램을 실행할 때 번역 도구"
"가 프로그램을 어떻게 다뤄야 하는지를 설정합니다."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:90 C/guitar-tuner.cpp.page:84 C/image-viewer.c.page:85
#: C/image-viewer.cpp.page:82 C/image-viewer.vala.page:133
#: C/magic-mirror.vala.page:93
msgid ""
"This code is ready to be used, so you can compile it by clicking "
"<guiseq><gui>Build</gui><gui>Build Project</gui></guiseq> (or press "
"<keyseq><key>Shift</key><key>F7</key></keyseq>)."
msgstr ""
"이 코드를 사용할 준비가 됐으니 <guiseq><gui>빌드</gui><gui>프로젝트 빌드</"
"gui></guiseq>(또는 <keyseq><key>Shift</key><key>F7</key></keyseq> 키 누름)를 "
"눌러 코드를 컴파일할 수 있습니다."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:91 C/guitar-tuner.cpp.page:85 C/image-viewer.c.page:86
#: C/image-viewer.cpp.page:83
msgid ""
"Press <gui>Execute</gui> on the next window that appears to configure a "
"debug build. You only need to do this once, for the first build."
msgstr ""
"디버깅 빌드 설정이 나타나는 다음 창에서 <gui>실행</gui> 을 누르십시오. 처음 "
"빌드할 때 한번만 하면 됩니다."

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:95 C/guitar-tuner.cpp.page:89
#: C/guitar-tuner.py.page:96 C/guitar-tuner.vala.page:96
msgid "Create the user interface"
msgstr "사용자 인터페이스 만들기"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:96 C/guitar-tuner.cpp.page:90
msgid ""
"A description of the user interface (UI) is contained in the GtkBuilder "
"file. To edit the user interface, open <file>src/guitar_tuner.ui</file>. "
"This will switch to the interface designer. The design window is in the "
"center; widgets and widgets' properties are on the left, and the palette of "
"available widgets is on the right."
msgstr ""
"사용자 인터페이스(UI) 설명은 GtkBuilder 파일에 있습니다. 사용자 인터페이스를 "
"편집하려면 <file>src/guitar_tuner.ui</file> 파일을 여십시오. 이 과정에서 바"
"로 인터페이스 디자이너로 넘어갑니다. 설계 창은 가운데에 있고 위젯과 위젯 속성"
"은 왼편에, 사용할 수 있는 위젯은 오른편에 있습니다."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:98 C/guitar-tuner.cpp.page:92
#: C/guitar-tuner.py.page:99
msgid ""
"The layout of every UI in GTK+ is organized using boxes and tables. Let's "
"use a vertical <gui>GtkButtonBox</gui> here to assign six <gui>GtkButtons</"
"gui>, one for each of the six guitar strings."
msgstr ""
"GTK+의 모든 UI 배치는 상자와 표로 구성합니다. 가로 방향 <gui>GtkButtonBox</"
"gui>를 여기서 사용하여 각 기타 줄에 해당하는 여섯 개의 <gui>GtkButtons</gui> "
"단추를 넣어보겠습니다."

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/guitar-tuner.c.page:100 C/guitar-tuner.cpp.page:94
#: C/guitar-tuner.py.page:101 C/guitar-tuner.vala.page:101
msgctxt "_"
msgid ""
"external ref='media/guitar-tuner-glade.png' "
"md5='f6606525443ab2160f53a87a454364d0'"
msgstr ""

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:104 C/guitar-tuner.cpp.page:98
#: C/guitar-tuner.py.page:105
msgid ""
"Select a <gui>GtkButtonBox</gui> from the <gui>Container</gui> section of "
"the <gui>Palette</gui> on the right and put it into the window. In the "
"<gui>Properties</gui> pane, set the number of elements to 6 (for the six "
"strings) and the orientation to vertical."
msgstr ""
"우측 <gui>팔레트</gui>의 <gui>컨테이너</gui> 섹션에서 <gui>GtkButtonBox</"
"gui> 를 선택하여 창에 가져다 높으십시오. <gui>속성</gui> 창에서 구성 요소 수"
"를 6(기타 줄 6개)으로 설정하고, 방향은 세로(vertical)로 설정하십시오."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:108 C/guitar-tuner.cpp.page:102
#: C/guitar-tuner.py.page:109
msgid ""
"Now, choose a <gui>GtkButton</gui> from the palette and put it into the "
"first part of the box."
msgstr ""
"이제 팔레트에서 <gui>GtkButton</gui> 를 선택하고 상자의 처음 부분에 가져다 놓"
"으십시오."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:111 C/guitar-tuner.py.page:112
msgid ""
"While the button is still selected, change the <gui>Label</gui> property in "
"the <gui>Widgets</gui> tab to <gui>E</gui>. This will be the low E string."
msgstr ""
"단추를 선택한 상태에서 <gui>위젯</gui> 탭의 <gui>레이블</gui> 속성을 <gui>E</"
"gui>로 바꾸십시오. 기타의 낮은 E 줄을 의미합니다."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:114 C/guitar-tuner.py.page:115
msgid ""
"Switch to the <gui>Signals</gui> tab (inside the <gui>Widgets</gui> tab) and "
"look for the <code>clicked</code> signal of the button. You can use this to "
"connect a signal handler that will be called when the button is clicked by "
"the user. To do this, click on the signal and type <code>on_button_clicked</"
"code> in the <gui>Handler</gui> column and press <key>Return</key>."
msgstr ""
"<gui>시그널</gui> 탭(<gui>위젯</gui> 탭에 있음)으로 옮겨가서 단추의 "
"<code>clicked</code> 시그널을 찾아보십시오. 이 시그널을 사용자가 단추를 눌렀"
"을 때 호출할 시그널 핸들러에 연결할 수 있습니다. 이렇게 하려면, 시그널을 누르"
"고 <gui>핸들러</gui> 칸에 <code>on_button_clicked</code>를 입력하신 다음 "
"<key>Return</key>키를 누르십시오."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:117 C/guitar-tuner.py.page:118
#: C/guitar-tuner.vala.page:122
msgid ""
"Repeat the above steps for the other buttons, adding the next 5 strings with "
"the names <em>A</em>, <em>D</em>, <em>G</em>, <em>B</em>, and <em>e</em>."
msgstr ""
"다른 단추에 대해서도 그 다음 줄 이름 <em>A</em>, <em>D</em>, <em>G</em>, "
"<em>B</em>, <em>e</em>를 추가하여 위 단계를 반복하십시오."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:120 C/guitar-tuner.py.page:121
#: C/guitar-tuner.vala.page:125
msgid ""
"Save the UI design (by clicking <guiseq><gui>File</gui><gui>Save</gui></"
"guiseq>) and keep it open."
msgstr ""
"UI 디자인을 저장(<guiseq><gui>파일</gui><gui>저장</gui></guiseq> 누름)하시고 "
"열어둔 상태로 두십시오."

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:126 C/guitar-tuner.vala.page:203
msgid "Creating the signal handler"
msgstr "시그널 핸들러 만들기"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:127 C/guitar-tuner.py.page:128
msgid ""
"In the UI designer, you made it so that all of the buttons will call the "
"same function, <gui>on_button_clicked</gui>, when they are clicked. We need "
"to add that function in the source file."
msgstr ""
"UI 디자이너에서 모든 단추를 누르면 동일한 <gui>on_button_clicked</gui> 함수"
"를 호출하도록 할 수 있습니다. 이 함수를 소스 파일에 추가해야합니다."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:128
msgid ""
"To do this, open <file>main.c</file> while the user interface file is still "
"open. Switch to the <gui>Signals</gui> tab, which you already used to set "
"the signal name. Now take the row where you set the <gui>clicked</gui> "
"signal and drag it into to the source file at a position that is outside any "
"function. The following code will be added to your source file:"
msgstr ""
"이렇게 하려면, 사용자 인터페이스 파일을 열어둔 상태에서 <file>main.c</file> "
"파일을 여십시오. 시그널 이름을 설정하는데 사용한 <gui>시그널</gui> 탭으로 옮"
"겨가십시오. 이제 <gui>clicked</gui> 시그널을 설정한 줄로 가서, 이 항목을 소"
"스 파일의 함수 바깥에 끌어다 놓으십시오. 그러면 다음 코드가 소스 파일에 들어"
"갑니다:"

#. (itstool) path: section/code
#: C/guitar-tuner.c.page:131
#, no-wrap
msgid ""
"\n"
"void on_button_clicked (GtkWidget* button, gpointer user_data)\n"
"{\n"
"\n"
"}"
msgstr ""
"\n"
"void on_button_clicked (GtkWidget* button, gpointer user_data)\n"
"{\n"
"\n"
"}"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:136
msgid ""
"This signal handler has two arguments: a pointer to the <code>GtkWidget</"
"code> that called the function (in our case, always a <code>GtkButton</"
"code>), and a pointer to some \"user data\" that you can define, but which "
"we won't be using here. (You can set the user data by calling "
"<code>gtk_builder_connect_signals</code>; it is normally used to pass a "
"pointer to a data structure that you might need to access inside the signal "
"handler.)"
msgstr ""
"이 시그널 핸들러는 함수로 호출하는 <code>GtkWidget</code>(이 경우 항상 "
"<code>GtkButton</code>)의 포인터, 그리고 여러분이 정의할 수 있지만 여기서는 "
"활용하지 않을 \"사용자 데이터\" 포인터를 인자로 두고 있습니다"
"(<code>gtk_builder_connect_signals</code>를 호출하여 사용자 데이터를 설정할 "
"수 있습니다. 보통 시그널 핸들러 내에서 접근할 데이터 구조의 포인터를 전달할 "
"때 사용합니다)."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:137 C/guitar-tuner.py.page:136
msgid ""
"For now, we'll leave the signal handler empty while we work on writing the "
"code to produce sounds."
msgstr "이제 소리를 내는 코드를 작성하는 동안 시그널 핸들러를 비워두겠습니다."

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:141 C/guitar-tuner.cpp.page:118
#: C/guitar-tuner.js.page:39 C/guitar-tuner.py.page:140
#: C/guitar-tuner.vala.page:131
msgid "GStreamer pipelines"
msgstr "지스트리머 파이프라인"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:142 C/guitar-tuner.js.page:40
#: C/guitar-tuner.py.page:141
msgid ""
"GStreamer is GNOME's multimedia framework — you can use it for playing, "
"recording, and processing video, audio, webcam streams and the like. Here, "
"we'll be using it to produce single-frequency tones."
msgstr ""
"지스트리머는 그놈 멀티미디어 프레임워크입니다. 동영상 오디오 웹캠 스트림 같은"
"걸 재생, 녹음/녹화, 처리할 때 지스트리머를 사용할 수 있습니다. 여기서는 단일 "
"주파수 음색을 만들 때 사용하겠습니다."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:143 C/guitar-tuner.cpp.page:121
#: C/guitar-tuner.js.page:41 C/guitar-tuner.py.page:142
msgid ""
"Conceptually, GStreamer works as follows: You create a <em>pipeline</em> "
"containing several processing elements going from the <em>source</em> to the "
"<em>sink</em> (output). The source can be an image file, a video, or a music "
"file, for example, and the output could be a widget or the soundcard."
msgstr ""
"개념적으로 지스트리머 동작은 다음과 같습니다. (우선) <em>source</em>에서  "
"<em>sink</em>(출력)으로 내보낼 수많은 처리 요소가 들어간 <em>파이프라인</em>"
"을 만듭니다. source는 그림 파일, 동영상, 음악 파일일 수 있으며, 출력 대상은 "
"위젯 또는 사운드 카드가 될 수 있습니다."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:144 C/guitar-tuner.cpp.page:122
#: C/guitar-tuner.js.page:42 C/guitar-tuner.py.page:143
#: C/guitar-tuner.vala.page:134
msgid ""
"Between source and sink, you can apply various filters and converters to "
"handle effects, format conversions and so on. Each element of the pipeline "
"has properties which can be used to change its behaviour."
msgstr ""
"source와 sink 사이에서 다양한 필터와 변환 프로그램을 적용하여 효과를 처리하거"
"나, 형식을 변환하는 등을 할 수 있습니다. 각 파이프라인 구성 요소에는 동작을 "
"바꿀 수 있는 속성이 있습니다."

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/guitar-tuner.c.page:145 C/guitar-tuner.cpp.page:123
#: C/guitar-tuner.js.page:43 C/guitar-tuner.py.page:144
#: C/guitar-tuner.vala.page:135
msgctxt "_"
msgid ""
"external ref='media/guitar-tuner-pipeline.png' "
"md5='5adc952909d92af5dae6954781b4ad5f'"
msgstr ""

#. (itstool) path: media/p
#: C/guitar-tuner.c.page:146 C/guitar-tuner.cpp.page:124
#: C/guitar-tuner.js.page:44 C/guitar-tuner.py.page:145
#: C/guitar-tuner.vala.page:136
msgid "An example GStreamer pipeline."
msgstr "지스트리머 파이프라인 예제입니다."

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:151 C/guitar-tuner.py.page:150
#: C/guitar-tuner.vala.page:141
msgid "Set up the pipeline"
msgstr "파이프라인 구성"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:152 C/guitar-tuner.cpp.page:135
#: C/guitar-tuner.py.page:151
msgid ""
"In this simple example we will use a tone generator source called "
"<code>audiotestsrc</code> and send the output to the default system sound "
"device, <code>autoaudiosink</code>. We only need to configure the frequency "
"of the tone generator; this is accessible through the <code>freq</code> "
"property of <code>audiotestsrc</code>."
msgstr ""
"여기 단순 예제에서는 <code>audiotestsrc</code> 라는 음 재생기 소스를 사용하"
"고 기본 시스템 사운드 장치 <code>autoaudiosink</code>로 출력을 내보내겠습니"
"다. 우리는 여기서 음 재생기 주파수를 설정해야합니다.  <code>audiotestsrc</"
"code>의 <code>freq</code> 속성을 사용하면 됩니다."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:154
msgid ""
"Insert the following line into <file>main.c</file>, just below the "
"<code>#include &lt;gtk/gtk.h&gt;</code> line:"
msgstr ""
"다음 줄을 <file>main.c</file>에 <code>#include &lt;gtk/gtk.h&gt;</code> 줄 바"
"로 밑에 넣으십시오:"

#. (itstool) path: section/code
#: C/guitar-tuner.c.page:155
#, no-wrap
msgid "#include &lt;gst/gst.h&gt;"
msgstr "#include &lt;gst/gst.h&gt;"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:156
msgid ""
"This includes the GStreamer library. You also need to add a line to "
"initialize GStreamer; put the following code on the line above the "
"<code>gtk_init</code> call in the <code>main</code> function:"
msgstr ""
"여기에 지스트리머 라이브러리가 들어있습니다. 아래 줄을 추가해서 지스트리머를 "
"초기화해야합니다. <code>main</code>  함수의 <code>gtk_init</code> 함수 호출 "
"위에 다음 코드를 넣으십시오:"

#. (itstool) path: section/code
#: C/guitar-tuner.c.page:157
#, no-wrap
msgid "gst_init (&amp;argc, &amp;argv);"
msgstr "gst_init (&amp;argc, &amp;argv);"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:158
msgid ""
"Then, copy the following function into <file>main.c</file> above the empty "
"<code>on_button_clicked</code> function:"
msgstr ""
"다음, 아래의 함수를 <file>main.c</file> 함수의 위에서 만들어 비워둔 "
"<code>on_button_clicked</code> 함수에 복사해넣으십시오:"

#. (itstool) path: section/code
#: C/guitar-tuner.c.page:159
#, no-wrap
msgid ""
"static void\n"
"play_sound (gdouble frequency)\n"
"{\n"
"\tGstElement *source, *sink;\n"
"\tGstElement *pipeline;\n"
"\n"
"\tpipeline = gst_pipeline_new (\"note\");\n"
"\tsource   = gst_element_factory_make (\"audiotestsrc\",\n"
"\t                                     \"source\");\n"
"\tsink     = gst_element_factory_make (\"autoaudiosink\",\n"
"\t                                     \"output\");\n"
"\n"
"\t/* set frequency */\n"
"\tg_object_set (source, \"freq\", frequency, NULL);\n"
"\n"
"\tgst_bin_add_many (GST_BIN (pipeline), source, sink, NULL);\n"
"\tgst_element_link (source, sink);\n"
"\n"
"\tgst_element_set_state (pipeline, GST_STATE_PLAYING);\n"
"\n"
"\t/* stop it after 500ms */\n"
"\tg_timeout_add (LENGTH, (GSourceFunc) pipeline_stop, pipeline);\n"
"}"
msgstr ""
"static void\n"
"play_sound (gdouble frequency)\n"
"{\n"
"\tGstElement *source, *sink;\n"
"\tGstElement *pipeline;\n"
"\n"
"\tpipeline = gst_pipeline_new (\"note\");\n"
"\tsource   = gst_element_factory_make (\"audiotestsrc\",\n"
"\t                                     \"source\");\n"
"\tsink     = gst_element_factory_make (\"autoaudiosink\",\n"
"\t                                     \"output\");\n"
"\n"
"\t/* set frequency */\n"
"\tg_object_set (source, \"freq\", frequency, NULL);\n"
"\n"
"\tgst_bin_add_many (GST_BIN (pipeline), source, sink, NULL);\n"
"\tgst_element_link (source, sink);\n"
"\n"
"\tgst_element_set_state (pipeline, GST_STATE_PLAYING);\n"
"\n"
"\t/* stop it after 500ms */\n"
"\tg_timeout_add (LENGTH, (GSourceFunc) pipeline_stop, pipeline);\n"
"}"

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:185
msgid ""
"The first five lines create source and sink GStreamer elements "
"(<code>GstElement</code>), and a pipeline element (which will be used as a "
"container for the other two elements). The pipeline is given the name \"note"
"\"; the source is named \"source\" and is set to the <code>audiotestsrc</"
"code> source; and the sink is named \"output\" and set to the "
"<code>autoaudiosink</code> sink (default sound card output)."
msgstr ""
"처음 다섯줄에서는 source와 sink 지스트리머 구성 요소(<code>GstElement</"
"code>), 파이프라인 구성 요소(source와 sink의 컨테이너로 활용)를 만듭니다. 파"
"이프라인 이름은 \"note\"라고 지어둡니다. source는 \"source\"로 이름 붙이고 "
"<code>audiotestsrc</code>로 설정합니다. sink는 \"output\"으로 이름 붙이고 "
"<code>autoaudiosink</code> sink로 설정합니다(기본은 사운드 카드 출력)."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:188
msgid ""
"The call to <code>g_object_set</code> sets the <code>freq</code> property of "
"the source element to <code>frequency</code>, which is passed as an argument "
"to the <code>play_sound</code> function. This is just the frequency of the "
"note in Hertz; some useful frequencies will be defined later on."
msgstr ""
"<code>g_object_set</code> 호출로 source 구성 요소의 <code>freq</code> 속성 값"
"을 <code>play_sound</code> 함수에 인자로 전달할 <code>frequency</code> 로 설"
"정합니다. 이 변수는 헤르쯔 단위의 음 주파수일 뿐입니다. 쓸만한 주파수는 나중"
"에 설정하겠습니다."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:191
msgid ""
"<code>gst_bin_add_many</code> puts the source and sink into the pipeline. "
"The pipeline is a <code>GstBin</code>, which is just an element that can "
"contain multiple other GStreamer elements. In general, you can add as many "
"elements as you like to the pipeline by adding more arguments to "
"<code>gst_bin_add_many</code>."
msgstr ""
"<code>gst_bin_add_many</code>는 파이프 라인에 source와 sink를 둡니다. 파이프"
"라인은 다른 지스트리머 구성 요소 여러가지를 둘 수 있는 <code>GstBin</code> 입"
"니다. 보통 여러분은 <code>gst_bin_add_many</code>에 더 많은 인자를 넣어 파이"
"프라인에 더 많은 구성요소를 추가할 수 있습니다."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:194
msgid ""
"Next, <code>gst_element_link</code> is used to connect the elements "
"together, so the output of <code>source</code> (a tone) goes into the input "
"of <code>sink</code> (which is then output to the sound card). "
"<code>gst_element_set_state</code> is then used to start playback, by "
"setting the state of the pipeline to playing (<code>GST_STATE_PLAYING</"
"code>)."
msgstr ""
"다음, 구성 요소 각각을 연결하여 <code>source</code>(음) 출력을 <code>sink</"
"code> (사운드 카드 출력) 입력으로 보낼 때 <code>gst_element_link</code> 함수"
"를 사용합니다. 그 다음 <code>gst_element_set_state</code> 함수로 파이프라인 "
"상태를 재생(<code>GST_STATE_PLAYING</code>)으로 두어 음을 재생합니다."

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:201 C/guitar-tuner.py.page:191
msgid "Stopping playback"
msgstr "재생 정지"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:202
msgid ""
"We don't want to play an annoying tone forever, so the last thing "
"<code>play_sound</code> does is to call <code>g_timeout_add</code>. This "
"sets a timeout for stopping the sound; it waits for <code>LENGTH</code> "
"milliseconds before calling the function <code>pipeline_stop</code>, and "
"will keep calling it until <code>pipeline_stop</code> returns <code>FALSE</"
"code>."
msgstr ""
"음을 무한정 지겹게 재생하고 싶지는 않기 때문에 <code>play_sound</code> 함수에"
"서 <code>g_timeout_add</code> 함수를 호출합니다. 이 함수에서 음 재생을 멈출 "
"제한 시간을 설정합니다.  <code>pipeline_stop</code> 함수를 호출하기 전에 "
"<code>LENGTH</code> 밀리초 동안 기다리며, <code>pipeline_stop</code>함수에서 "
"<code>FALSE</code> 값을 반환하기 전에는 함수 호출을 지속합니다."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:203
msgid ""
"Now, we'll write the <code>pipeline_stop</code> function which is called by "
"<code>g_timeout_add</code>. Insert the following code <em>above</em> the "
"<code>play_sound</code> function:"
msgstr ""
"이제 <code>g_timeout_add</code> 함수에서 호출할 <code>pipeline_stop</code> 함"
"수를 작성하겠습니다. 다음 코드를 <code>play_sound</code> <em>상단</em>에 넣으"
"십시오:"

#. (itstool) path: section/code
#: C/guitar-tuner.c.page:204
#, no-wrap
msgid ""
"\n"
"#define LENGTH 500 /* Length of playing in ms */\n"
"\n"
"static gboolean\n"
"pipeline_stop (GstElement* pipeline)\n"
"{\n"
"\tgst_element_set_state (pipeline, GST_STATE_NULL);\n"
"\tg_object_unref (pipeline);\n"
"\n"
"\treturn FALSE;\n"
"}"
msgstr ""
"\n"
"#define LENGTH 500 /* Length of playing in ms */\n"
"\n"
"static gboolean\n"
"pipeline_stop (GstElement* pipeline)\n"
"{\n"
"\tgst_element_set_state (pipeline, GST_STATE_NULL);\n"
"\tg_object_unref (pipeline);\n"
"\n"
"\treturn FALSE;\n"
"}"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:215
msgid ""
"The call to <code>gst_element_set_state</code> stops the playback of the "
"pipeline and <code>g_object_unref</code> unreferences the pipeline, "
"destroying it and freeing its memory."
msgstr ""
"<code>gst_element_set_state</code> 함수 호출로 파이프라인 재생을 멈추며, "
"<code>g_object_unref</code> 함수로 파이프라인 참조를 해제하고 파이프라인 자체"
"를 파괴한 다음, 할당한 메모리 공간을 놓아줍니다."

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:219 C/guitar-tuner.py.page:208
msgid "Define the tones"
msgstr "음색 정의"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:220
msgid ""
"We want to play the correct sound when the user clicks a button. First of "
"all, we need to know the frequencies for the six guitar strings, which are "
"defined (at the top of <file>main.c</file>) as follows:"
msgstr ""
"사용자가 단추를 눌렀을 때 올바른 소리를 재생하고자합니다. 우선 다음과 같이 "
"(<file>main.c</file> 상단에) 정의한 기타 6현의 주파수를 알아야합니다:"

#. (itstool) path: section/code
#: C/guitar-tuner.c.page:221
#, no-wrap
msgid ""
"\n"
"/* Frequencies of the strings */\n"
"#define NOTE_E 329.63\n"
"#define NOTE_A 440\n"
"#define NOTE_D 587.33\n"
"#define NOTE_G 783.99\n"
"#define NOTE_B 987.77\n"
"#define NOTE_e 1318.5"
msgstr ""
"\n"
"/* Frequencies of the strings */\n"
"#define NOTE_E 329.63\n"
"#define NOTE_A 440\n"
"#define NOTE_D 587.33\n"
"#define NOTE_G 783.99\n"
"#define NOTE_B 987.77\n"
"#define NOTE_e 1318.5"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:229 C/guitar-tuner.py.page:222
msgid ""
"Now to flesh out the signal handler that we defined earlier, "
"<code>on_button_clicked</code>. We could have connected every button to a "
"different signal handler, but that would lead to a lot of code duplication. "
"Instead, we can use the label of the button to figure out which button was "
"clicked:"
msgstr ""
"이제 이전에 정의한 시그널 핸들러 <code>on_button_clicked</code> 에 내용을 추"
"가할 차례입니다. 모든 단추에 각기 다른 시그널 핸들러를 연결할 수 있지만, 같"
"은 코드를 여러번 반복할 수 있습니다. 대신, 어떤 단추를 눌렀는지 확인할 용도"
"로 단추 레이블을 활용할 수 있습니다:"

#. (itstool) path: section/code
#: C/guitar-tuner.c.page:230
#, no-wrap
msgid ""
"\n"
"/* Callback for the buttons */\n"
"void on_button_clicked (GtkButton* button,\n"
"                        gpointer user_data)\n"
"{\n"
"\tconst gchar* text = gtk_button_get_label (button);\n"
"\n"
"\tif (g_str_equal (text, _(\"E\")))\n"
"\t    play_sound (NOTE_E);\n"
"\telse if (g_str_equal (text, _(\"A\")))\n"
"\t    play_sound (NOTE_A);\n"
"\telse if (g_str_equal (text, _(\"G\")))\n"
"\t    play_sound (NOTE_G);\n"
"\telse if (g_str_equal (text, _(\"D\")))\n"
"\t    play_sound (NOTE_D);\n"
"\telse if (g_str_equal (text, _(\"B\")))\n"
"\t    play_sound (NOTE_B);\n"
"\telse if (g_str_equal (text, _(\"e\")))\n"
"\t    play_sound (NOTE_e);\n"
"}\n"
msgstr ""
"\n"
"/* Callback for the buttons */\n"
"void on_button_clicked (GtkButton* button,\n"
"                        gpointer user_data)\n"
"{\n"
"\tconst gchar* text = gtk_button_get_label (button);\n"
"\n"
"\tif (g_str_equal (text, _(\"E\")))\n"
"\t    play_sound (NOTE_E);\n"
"\telse if (g_str_equal (text, _(\"A\")))\n"
"\t    play_sound (NOTE_A);\n"
"\telse if (g_str_equal (text, _(\"G\")))\n"
"\t    play_sound (NOTE_G);\n"
"\telse if (g_str_equal (text, _(\"D\")))\n"
"\t    play_sound (NOTE_D);\n"
"\telse if (g_str_equal (text, _(\"B\")))\n"
"\t    play_sound (NOTE_B);\n"
"\telse if (g_str_equal (text, _(\"e\")))\n"
"\t    play_sound (NOTE_e);\n"
"}\n"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:251
msgid ""
"A pointer to the <code>GtkButton</code> that was clicked is passed as an "
"argument (<code>button</code>) to <code>on_button_clicked</code>. We can get "
"the text of that button using <code>gtk_button_get_label</code>."
msgstr ""
"누른 <code>GtkButton</code>의 포인터를 <code>on_button_clicked</code>의 인자"
"(<code>button</code>)로 전달합니다. 단추의 글자는 "
"<code>gtk_button_get_label</code> 함수로 가져올 수 있습니다."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:252
msgid ""
"The text is then compared to the notes that we have using <code>g_str_equal</"
"code>, and <code>play_sound</code> is called with the frequency appropriate "
"for that note. This plays the tone; we have a working guitar tuner!"
msgstr ""
"<code>g_str_equal</code> 함수로 이 글자를 비교한 후, 음에 맞는 주파수로 "
"<code>play_sound</code> 함수를 호출합니다. 이 절차로 음을 재생합니다. 이제 동"
"작하는 기타 조율기가 만들어졌군요!"

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:256 C/guitar-tuner.cpp.page:255
#: C/guitar-tuner.vala.page:253 C/image-viewer.c.page:222
#: C/image-viewer.cpp.page:210 C/image-viewer.vala.page:280
#: C/photo-wall.c.page:392
msgid "Build and run the application"
msgstr "프로그램 빌드 및 실행"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:257 C/guitar-tuner.vala.page:254
#: C/image-viewer.c.page:223 C/image-viewer.cpp.page:211
#: C/image-viewer.vala.page:281
msgid ""
"All of the code should now be ready to go. Click <guiseq><gui>Build</"
"gui><gui>Build Project</gui></guiseq> to build everything again, and then "
"<guiseq><gui>Run</gui><gui>Execute</gui></guiseq> to start the application."
msgstr ""
"모든 코드를 실행할 준비가 됐습니다. <guiseq><gui>빌드</gui><gui>프로젝트 빌드"
"</gui></guiseq>를 눌러 프로젝트 전체를 다시 빌드하고, <guiseq><gui>실행</"
"gui><gui>실행</gui></guiseq>을 눌러 프로그램을 시작하십시오."

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:258 C/guitar-tuner.cpp.page:257
#: C/guitar-tuner.vala.page:255
msgid ""
"If you haven't already done so, choose the <file>Debug/src/guitar-tuner</"
"file> application in the dialog that appears. Finally, hit <gui>Run</gui> "
"and enjoy!"
msgstr ""
"아직 끝내지 않았다면 나타난 대화상자에서 <file>Debug/src/guitar-tuner</"
"file>  프로그램을 선택하십시오. 마지막으로 <gui>Run</gui>를 눌러 만든 프로그"
"램을 즐기시죠!"

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:262 C/guitar-tuner.cpp.page:261
#: C/guitar-tuner.js.page:242 C/guitar-tuner.py.page:240
#: C/guitar-tuner.vala.page:259 C/image-viewer.c.page:228
#: C/image-viewer.cpp.page:216 C/image-viewer.js.page:316
#: C/image-viewer.py.page:230 C/image-viewer.vala.page:288
#: C/magic-mirror.vala.page:150 C/photo-wall.c.page:400
#: C/record-collection.js.page:297
msgid "Reference Implementation"
msgstr "참조 구현체"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:263
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"guitar-tuner/guitar-tuner.c\">reference code</link>."
msgstr ""
"지침서를 따라하는 실행하는 과정에 문제가 있다면, <link href=\"guitar-tuner/"
"guitar-tuner.c\">참조 코드</link>와 여러분의 코드를 비교해보십시오."

#. (itstool) path: section/title
#: C/guitar-tuner.c.page:267 C/guitar-tuner.cpp.page:274
#: C/guitar-tuner.py.page:245 C/guitar-tuner.vala.page:270
#: C/image-viewer.c.page:233 C/image-viewer.cpp.page:221
#: C/image-viewer.js.page:321 C/image-viewer.py.page:235
#: C/image-viewer.vala.page:293
msgid "Next steps"
msgstr "다음 단계"

#. (itstool) path: section/p
#: C/guitar-tuner.c.page:268 C/guitar-tuner.cpp.page:275
#: C/guitar-tuner.py.page:246 C/guitar-tuner.vala.page:271
#: C/image-viewer.c.page:234 C/image-viewer.cpp.page:222
#: C/image-viewer.js.page:322 C/image-viewer.py.page:236
#: C/image-viewer.vala.page:294
msgid "Here are some ideas for how you can extend this simple demonstration:"
msgstr ""
"여기 간단한 시험 프로그램에 여러분이 추가로 넣을 수 있는 몇가지 아이디어가 있"
"습니다:"

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:271 C/guitar-tuner.cpp.page:278
#: C/guitar-tuner.py.page:249 C/guitar-tuner.vala.page:274
msgid "Have the program automatically cycle through the notes."
msgstr "프로그램에 음 재생 자동 주기 기능 넣기."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:274 C/guitar-tuner.cpp.page:281
#: C/guitar-tuner.py.page:252 C/guitar-tuner.vala.page:277
msgid "Make the program play recordings of real guitar strings being plucked."
msgstr "프로그램에 실제 기타 현을 퉁겼을 때의 음을 녹음하여 재생하기."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:275 C/guitar-tuner.cpp.page:282
#: C/guitar-tuner.py.page:253 C/guitar-tuner.vala.page:278
msgid ""
"To do this, you would need to set up a more complicated GStreamer pipeline "
"which allows you to load and play back music files. You'll have to choose "
"<link href=\"http://gstreamer.freedesktop.org/documentation/plugins.html"
"\">decoder and demuxer</link> GStreamer elements based on the file format of "
"your recorded sounds — MP3s use different elements to Ogg Vorbis files, for "
"example."
msgstr ""
"이 동작을 구현하려면 음악 파일을 불러와서 재생할 수 있도록 지스트리머 파이프"
"라인을 좀 더 복잡하게 설정해야합니다. 녹음 음원의 파일 형식에 따른<link href="
"\"http://gstreamer.freedesktop.org/documentation/plugins.html\">decoder와 "
"demuxer</link> 지스트리머 구성 요소를 선택해야 할 수도 있습니다. 예를 들자면 "
"MP3는 Ogg Vorbis 파일과는 다른 구성 요소를 활용합니다."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:276 C/guitar-tuner.cpp.page:283
#: C/guitar-tuner.py.page:254 C/guitar-tuner.vala.page:279
msgid ""
"You might need to connect the elements in more complicated ways too. This "
"could involve using <link href=\"http://gstreamer.freedesktop.org/data/doc/"
"gstreamer/head/manual/html/chapter-intro-basics.html\">GStreamer concepts</"
"link> that we didn't cover in this tutorial, such as <link href=\"http://"
"gstreamer.freedesktop.org/data/doc/gstreamer/head/manual/html/section-intro-"
"basics-pads.html\">pads</link>. You may also find the <cmd>gst-inspect</cmd> "
"command useful."
msgstr ""
"좀 더 복잡한 식으로 구성 요소를 연결해야 할 수도 있습니다. <link href="
"\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/manual/html/"
"section-intro-basics-pads.html\">pads</link>와 같이 우리가 지침서에서 다룰 "
"수 없는 <link href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/"
"head/manual/html/chapter-intro-basics.html\">지스트리머 개념</link>이 들어갈 "
"수도 있습니다. 쓸만한 <cmd>gst-inspect</cmd>  명령을 찾아볼 수도 있습니다."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:279 C/guitar-tuner.cpp.page:286
#: C/guitar-tuner.py.page:257 C/guitar-tuner.vala.page:282
msgid "Automatically analyze notes that the user plays."
msgstr "사용자 연주 음을 자동으로 분석."

#. (itstool) path: item/p
#: C/guitar-tuner.c.page:280 C/guitar-tuner.cpp.page:287
#: C/guitar-tuner.py.page:258 C/guitar-tuner.vala.page:283
msgid ""
"You could connect a microphone and record sounds from it using an <link href="
"\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-plugins-good-"
"plugins/html/gst-plugins-good-plugins-autoaudiosrc.html\">input source</"
"link>. Perhaps some form of <link href=\"http://gstreamer.freedesktop.org/"
"data/doc/gstreamer/head/gst-plugins-good-plugins/html/gst-plugins-good-"
"plugins-plugin-spectrum.html\">spectrum analysis</link> would allow you to "
"figure out what notes are being played?"
msgstr ""
"마이크를 연결하고 <link href=\"http://gstreamer.freedesktop.org/data/doc/"
"gstreamer/head/gst-plugins-good-plugins/html/gst-plugins-good-plugins-"
"autoaudiosrc.html\">input source</link>로 음을 녹음할 수 있습니다. 아마도 "
"<link href=\"http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gst-"
"plugins-good-plugins/html/gst-plugins-good-plugins-plugin-spectrum.html\">스"
"펙트럼 분석</link> 같은 것으로 어떤 음을 재생했는지 알 수 있겠죠?"

#. (itstool) path: info/desc
#: C/guitar-tuner.cpp.page:9
msgid ""
"Use GTKmm and GStreamermm to build a simple guitar tuner application for "
"GNOME. Shows off how to use the interface designer."
msgstr ""
"GTKmm과 Gstreamermm을 활용하여 간단한 그놈용 기타 조율 프로그램을 만들어보겠"
"습니다. 인터페이스 디자이너 활용 방법을 보여드립니다."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:39
msgid "Basic knowledge of the C++ programming language"
msgstr "C++ 프로그래밍 언어 기본 지식"

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:53
msgid ""
"Choose <gui>GTKmm (Simple)</gui> from the <gui>C++</gui> tab, click "
"<gui>Forward</gui>, and fill out your details on the next few pages. Use "
"<file>guitar-tuner</file> as project name and directory."
msgstr ""
"<gui>C++</gui> 탭에서 <gui>GTKmm (단순)</gui>을 선택한 후 <gui>다음</gui> 을 "
"누르고 다음 페이지 몇 군데에서 자세한 내용을 채워나가십시오. 프로젝트 이름과 "
"디렉터리 이름은 <file>guitar-tuner</file>로 설정하십시오."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:56
msgid ""
"Make sure that <gui>Configure external packages</gui> is selected. On the "
"next page, select <em>gstreamermm-0.10</em> from the list to include the "
"GStreamermm library in your project."
msgstr ""
"<gui>외부 패키지 설정</gui>을 선택했는지 확인하십시오. 다음 페이지 목록에서 "
"<em>gstreamermm-0.10</em>을 선택하고 프로젝트에 GStreamermm 라이브러리를 넣으"
"십시오."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:60
msgid ""
"Click <gui>Finished</gui> and the project will be created for you. Open "
"<file>src/main.cc</file> from the <gui>Project</gui> or <gui>File</gui> "
"tabs. You should see some code which starts with the lines:"
msgstr ""
"<gui>마침</gui>을 누르면 프로젝트를 만들어줍니다. <gui>프로젝트</gui>나 <gui>"
"파일</gui>탭에서 <file>src/main.cc</file> 파일을 여십시오. 다음 줄로 시작하"
"는 일부 코드가 나타납니다:"

#. (itstool) path: item/code
#: C/guitar-tuner.cpp.page:61
#, no-wrap
msgid ""
"\n"
"#include &lt;gtkmm.h&gt;\n"
"#include &lt;iostream&gt;"
msgstr ""
"\n"
"#include &lt;gtkmm.h&gt;\n"
"#include &lt;iostream&gt;"

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:70 C/image-viewer.cpp.page:67
msgid ""
"This is a very basic C++ code setting up GTKmm. More details are given "
"below; skip this list if you understand the basics:"
msgstr ""
"이 부분은 GTKmm을 구성한 매우 간단한 C++ 코드입니다. 더 자세한 내용은 아래를 "
"보십시오. 기본을 이해하고 있다면 이 부분을 건너 뛰십시오:"

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:74
msgid ""
"The three <code>#include</code> lines at the top include the <code>config</"
"code> (useful autoconf build defines), <code>gtkmm</code> (user interface) "
"and <code>iostream</code> (STL). Functions from these libraries are used in "
"the rest of the code."
msgstr ""
"상단의 <code>#include</code> 세 줄은 <code>config</code>(쓸만한 autoconf 빌"
"드 정의), <code>gtkmm</code>(사용자 인터페이스), <code>iostream</code>(STL) "
"라이브러리입니다. 이 라이브러리의 함수는 코드 나머지 부분에서 활용합니다."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:77
msgid ""
"The <code>main</code> function creates a new window by opening a GtkBuilder "
"file (<file>src/guitar-tuner.ui</file>, defined a few lines above) and then "
"displaying it in a window. The GtkBuilder file contains a description of a "
"user interface and all of its elements. You can use Anjuta's editor to "
"design GtkBuilder user interfaces."
msgstr ""
"<code>main</code> 함수는 GtkBuilder 파일(위 몇 줄을 정의한 <file>src/guitar-"
"tuner.ui</file>)을 열어 새 창을 만들고 창 안에 구성 요소를 표시합니다. "
"GtkBuilder 파일에는 사용자 인터페이스 설명과 구성 요소 모드가 들어있습니다. "
"GtkBuilder 사용자 인터페이스를 만들 때 안주타 편집기를 사용할 수 있습니다."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:80
msgid ""
"Afterwards it calls a few functions which set up and then run the "
"application. The <code>kit.run</code> function starts the GTKmm main loop, "
"which runs the user interface and starts listening for events (like clicks "
"and key presses)."
msgstr ""
"그 다음 프로그램을 설정하고 실행할 몇가지 함수를 호출합니다. <code>kit.run</"
"code> 함수는 사용자 인터페이스를 실행하고 이벤트(마우스 단추 누름, 키보드 키 "
"누름)를 기다리는 GTKmm 메인 루프를 시작합니다."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:105
msgid ""
"While the button is still selected, change the <gui>Label</gui> property in "
"the <gui>Widgets</gui> tab to <gui>E</gui>. This will be the low E string. "
"Also change the <gui>Name</gui> property to <gui>button_E</gui>. This is the "
"name we will refer to the widget later in code."
msgstr ""
"단추를 선택한 상태에서 <gui>위젯</gui> 탭의 <gui>레이블</gui> 속성을 <gui>E</"
"gui>로 바꾸십시오. 기타의 낮은 E 줄을 의미합니다. 또한 <gui>이름</gui> 속성"
"을 <gui>button_E</gui> 값으로 바꾸십시오. 나중에 코드에서 위젯을 참조할 이름"
"입니다."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:109
msgid ""
"Repeat the above steps for the other buttons, adding the next 5 strings with "
"the labels <em>A</em>, <em>D</em>, <em>G</em>, <em>B</em>, and <em>e</em> "
"and the names <em>button_A</em>, etc."
msgstr ""
"위 단계를 다음 5현을 대해 <em>A</em>, <em>D</em>, <em>G</em>, <em>B</em>, "
"<em>e</em> 레이블로 추가하는 단추에도 반복하시고 <em>button_A</em>와 같은 식"
"으로 이름을 부여하십시오."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:112
msgid ""
"Save the UI design (by clicking <guiseq><gui>File</gui><gui>Save</gui></"
"guiseq>) and close the file."
msgstr ""
"UI 디자인을 저장(<guiseq><gui>파일</gui><gui>저장</gui></guiseq> 누름)하고 파"
"일을 닫으십시오."

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:119
msgid ""
"GStreamer is GNOME's multimedia framework — you can use it for playing, "
"recording, and processing video, audio, webcam streams and the like. Here, "
"we'll be using it to produce single-frequency tones. GStreamermm is the C++ "
"binding to GStreamer which we will use here."
msgstr ""
"지스트리머는 그놈 멀티미디어 프레임워크입니다. 동영상 오디오 웹캠 스트림 같은"
"걸 재생, 녹음/녹화, 처리할 때 지스트리머를 사용할 수 있습니다. 여기서는 단일 "
"주파수 음색을 만들 때 사용하겠습니다. GStreamermm은 여기서 우리가 사용할 지스"
"트리머 C++ 바인딩입니다."

#. (itstool) path: section/title
#: C/guitar-tuner.cpp.page:129
msgid "Using GStreamermm"
msgstr "GStreamermm 사용"

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:130
msgid ""
"To use GStreamermm, it has to be initialised. We do that by adding the "
"following line of code next to the <code>Gtk::Main kit(argc, argv);</code> "
"line in <file>main.cc</file>:"
msgstr ""
"GStreamermm을 사용하려면 초기화해야합니다. <file>main.cc</file>의 <code>Gtk::"
"Main kit(argc, argv);</code> 다음에 코드 몇 줄을 추가하겠습니다:"

#. (itstool) path: section/code
#: C/guitar-tuner.cpp.page:132
#, no-wrap
msgid "\tGst::init (argc, argv);"
msgstr "\tGst::init (argc, argv);"

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:133
msgid ""
"While we are on it, also make sure that the <file>gstreamermm.h</file> is "
"included in <file>main.cc</file> properly."
msgstr ""
"여기에 있는 동안 <file>gstreamermm.h</file> 파일을 <file>main.cc</file> 파일"
"에 제대로 넣었는지도 확인하십시오."

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:137
msgid ""
"To simplify the handling of the pipeline we will define a helper class "
"<code>Sound</code>. We do that in <file>main.cc</file> in order to keep this "
"example simple, whereas you might usually want to use a separate file:"
msgstr ""
"파이프라인 처리를 단순하게 할 목적으로 <code>Sound</code> 보조 클래스를 정의"
"하겠습니다. 여러분은 다른 파일에 정의하고 싶겠지만 이 예제의 단순함을 유지할 "
"목적으로 <file>main.cc</file>에서 진행하겠습니다:"

#. (itstool) path: section/code
#: C/guitar-tuner.cpp.page:140
#, no-wrap
msgid ""
"\n"
"class Sound\n"
"{\n"
"\tpublic:\n"
"\t\tSound();\n"
"\n"
"\t\tvoid start_playing(double frequency);\n"
"\t\tbool stop_playing();\n"
"\n"
"\tprivate:\n"
"\t\tGlib::RefPtr&lt;Gst::Pipeline&gt; m_pipeline;\n"
"\t\tGlib::RefPtr&lt;Gst::Element&gt; m_source;\n"
"\t\tGlib::RefPtr&lt;Gst::Element&gt; m_sink;\n"
"};\n"
"\n"
"Sound::Sound()\n"
"{\n"
"\tm_pipeline = Gst::Pipeline::create(\"note\");\n"
"\tm_source = Gst::ElementFactory::create_element(\"audiotestsrc\",\n"
"\t                                               \"source\");\n"
"\tm_sink = Gst::ElementFactory::create_element(\"autoaudiosink\",\n"
"\t                                             \"output\");\n"
"\tm_pipeline-&gt;add(m_source);\n"
"\tm_pipeline-&gt;add(m_sink);\n"
"\tm_source-&gt;link(m_sink);\n"
"}\n"
"\n"
"void Sound::start_playing (double frequency)\n"
"{\n"
"\tm_source-&gt;set_property(\"freq\", frequency);\n"
"\tm_pipeline-&gt;set_state(Gst::STATE_PLAYING);\n"
"\n"
"\t/* stop it after 200ms */\n"
"\tGlib::signal_timeout().connect(sigc::mem_fun(*this, &amp;Sound::stop_playing),\n"
"\t                               200);\n"
"}\n"
"\n"
"bool Sound::stop_playing()\n"
"{\n"
"\tm_pipeline-&gt;set_state(Gst::STATE_NULL);\n"
"\treturn false;\n"
"}\n"
msgstr ""
"\n"
"class Sound\n"
"{\n"
"\tpublic:\n"
"\t\tSound();\n"
"\n"
"\t\tvoid start_playing(double frequency);\n"
"\t\tbool stop_playing();\n"
"\n"
"\tprivate:\n"
"\t\tGlib::RefPtr&lt;Gst::Pipeline&gt; m_pipeline;\n"
"\t\tGlib::RefPtr&lt;Gst::Element&gt; m_source;\n"
"\t\tGlib::RefPtr&lt;Gst::Element&gt; m_sink;\n"
"};\n"
"\n"
"Sound::Sound()\n"
"{\n"
"\tm_pipeline = Gst::Pipeline::create(\"note\");\n"
"\tm_source = Gst::ElementFactory::create_element(\"audiotestsrc\",\n"
"\t                                               \"source\");\n"
"\tm_sink = Gst::ElementFactory::create_element(\"autoaudiosink\",\n"
"\t                                             \"output\");\n"
"\tm_pipeline-&gt;add(m_source);\n"
"\tm_pipeline-&gt;add(m_sink);\n"
"\tm_source-&gt;link(m_sink);\n"
"}\n"
"\n"
"void Sound::start_playing (double frequency)\n"
"{\n"
"\tm_source-&gt;set_property(\"freq\", frequency);\n"
"\tm_pipeline-&gt;set_state(Gst::STATE_PLAYING);\n"
"\n"
"\t/* stop it after 200ms */\n"
"\tGlib::signal_timeout().connect(sigc::mem_fun(*this, &amp;Sound::stop_playing),\n"
"\t                               200);\n"
"}\n"
"\n"
"bool Sound::stop_playing()\n"
"{\n"
"\tm_pipeline-&gt;set_state(Gst::STATE_NULL);\n"
"\treturn false;\n"
"}\n"

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:184
msgid "The code has the following purpose:"
msgstr "이 코드는 다음 목적으로 작성합니다:"

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:187
msgid ""
"In the constructor, source and sink GStreamer elements (<code>Gst::Element</"
"code>) are created, and a pipeline element (which will be used as a "
"container for the other two elements). The pipeline is given the name \"note"
"\"; the source is named \"source\" and is set to the <code>audiotestsrc</"
"code> source; and the sink is named \"output\" and set to the "
"<code>autoaudiosink</code> sink (default sound card output). After the "
"elements have been added to the pipeline and linked together, the pipeline "
"is ready to run."
msgstr ""
"생성자에서 source 지스트리머 구성요소와 sink 지스트리머 구성요소(<code>Gst::"
"Element</code>), 파이프라인 지스트리머 구성요소(앞서 말한 구성 요소의 컨테이"
"너로 활용)를 만듭니다. 파이프라인 이름은 \"note\"라고 지어둡니다. source는 "
"\"source\"로 이름 붙이고 <code>audiotestsrc</code>로 설정합니다. sink는 "
"\"output\"으로 이름 붙이고 <code>autoaudiosink</code> sink로 설정합니다(사운"
"드 카드 출력이 기본). 구성 요소를 파이프라인에 추가하고 서로 연결한 다음에는 "
"파이프라인 실행 준비가 끝납니다."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:190
msgid ""
"<code>start_playing</code> sets the source element to play a particular "
"frequency and then starts the pipeline so the sound actually starts playing. "
"As we don't want to have the annoying sound for ages, a timeout is set up to "
"stop the pipeline after 200 ms by calling <code>stop_playing</code>."
msgstr ""
"<code>start_playing</code>은 각 주파수를 재생할 source 구성 요소를 설정하고 "
"파이프라인을 시작하여 소리를 실제로 재생하게 합니다. 소리를 영원히 짜증나게 "
"재생하고 싶지는 않기에 <code>stop_playing</code>을 200ms 후에 호출하여 파이프"
"라인 동작을 멈추도록 제한 시간을 설정합니다."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:195
msgid ""
"In <code>stop_playing</code> which is called when the timeout has elapsed, "
"the pipeline is stopped and as such there isn't any sound output anymore. As "
"GStreamermm uses reference counting through the <code>Glib::RefPtr</code> "
"object, the memory is automatically freed once the <code>Sound</code> class "
"is destroyed."
msgstr ""
"제한 시간에 도달했을 때 호출하는 <code>stop_playing</code> 함수에서는, 파이프"
"라인을 멈추어 더 이상 소리가 나지 않게 합니다. GStreamermm에서 <code>Glib::"
"RefPtr</code> 객체로 참조 카운팅을 하기 때문에 <code>Sound</code> 클래스를 해"
"체하면 메모리를 자동으로 해제합니다."

#. (itstool) path: section/title
#: C/guitar-tuner.cpp.page:203
msgid "Connecting the signals"
msgstr "시그널에 연결하기"

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:204
msgid ""
"We want to play the correct sound when the user clicks a button. That means "
"that we have to connect to the signal that is fired when the user clicks the "
"button. We also want to provide information to the called function which "
"tone to play. GTKmm makes that quite easy as we can easily bind information "
"with the <em>sigc</em> library."
msgstr ""
"사용자가 단추를 눌렀을 때 제대로 된 음을 재생하려고 합니다. 무슨 얘기냐면 사"
"용자가 단추를 누르면 나오는 시그널을 실행할 함수에 연결해야 한다는 뜻입니다. "
"또한 재생할 음에 대한 정보를 호출 함수에 넘겨주려고 합니다. GTKmm에서는 "
"<em>sigc</em> 라이브러리에서 정보를 바인딩해서 쉽게 처리할 수 있습니다."

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:209
msgid ""
"The function that is called when the user clicks a button can be pretty "
"simple, as all the interesting stuff is done in the helper class now:"
msgstr ""
"관심있어 하는 부분을 이제는 보조 클래스에서 처리하므로, 사용자가 단추를 눌렀"
"을 때 호출하는 함수가 약간 간단할 수 있습니다:"

#. (itstool) path: section/code
#: C/guitar-tuner.cpp.page:211
#, no-wrap
msgid ""
"\n"
"static void\n"
"on_button_clicked(double frequency, Sound* sound)\n"
"{\n"
"\tsound-&gt;start_playing (frequency);\n"
"}\n"
msgstr ""
"\n"
"static void\n"
"on_button_clicked(double frequency, Sound* sound)\n"
"{\n"
"\tsound-&gt;start_playing (frequency);\n"
"}\n"

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:218
msgid ""
"It only calls the helper class we defined before to play the correct "
"frequencies. With some more clever code we would also have been able to "
"directly connect to the class without using the function but we will leave "
"that to use as an exercise."
msgstr ""
"이 코드에서는 올바른 주파수 음을 재생하려 앞서 정의한 보조 클래스를 호출하기"
"만 합니다. 더 멋진 코드에서는 함수를 활용하지 않고 클래스에 직접 연결할 수 있"
"겠지만, 그냥 이대로를 연습용으로 두겠습니다."

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:222
msgid ""
"The code to set up the signals should be added to the <code>main()</code> "
"function just after the <code>builder-&gt;get_widget(\"main_window\", "
"main_win);</code> line:"
msgstr ""
"시그널을 설정하는 코드는 <code>main()</code> 함수의 <code>builder-&gt;"
"get_widget(\"main_window\", main_win);</code> 코드 줄 바로 다음에 추가하십시"
"오:"

#. (itstool) path: section/code
#: C/guitar-tuner.cpp.page:224
#, no-wrap
msgid ""
"\n"
"Sound sound;\n"
"Gtk::Button* button;\n"
"\n"
"builder-&gt;get_widget(\"button_E\", button);\n"
"button-&gt;signal_clicked().connect (sigc::bind&lt;double, Sound*&gt;(sigc::ptr_fun(&amp;on_button_clicked),\n"
"                                              329.63, &amp;sound));\n"
msgstr ""
"\n"
"Sound sound;\n"
"Gtk::Button* button;\n"
"\n"
"builder-&gt;get_widget(\"button_E\", button);\n"
"button-&gt;signal_clicked().connect (sigc::bind&lt;double, Sound*&gt;(sigc::ptr_fun(&amp;on_button_clicked),\n"
"                                              329.63, &amp;sound));\n"

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:234
msgid ""
"At first we create an instance of our helper class that we want to use now "
"and declare a variable for the button we want to connect to."
msgstr ""
"우선 당장 쓰려는 보조 클래스의 인스턴스를 만들고 연결하고자 하는 단추의 변수"
"를 선언하겠습니다."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:238
msgid ""
"Next, we receive the button object from the user interface that was created "
"out of the user interface file. Remember that <em>button_E</em> is the name "
"we gave to the first button."
msgstr ""
"그 다음 사용자 인터페이스 파일에서 만든 사용자 인터페이스에서 단추 객체를 가"
"져오겠습니다. 기억하시겠지만 <em>button_E</em>가 첫번째 단추에 지어준 이름이"
"죠."

#. (itstool) path: item/p
#: C/guitar-tuner.cpp.page:242
msgid ""
"Finally we connect the <em>clicked</em> signal. This isn't fully "
"straightforward because this is done in a fully type-safe way and we "
"actually want to pass the frequency and our helper class to the signal "
"handler. <code>sigc::ptr_fun(&amp;on_button_clicked)</code> creates a "
"<em>slot</em> for the <code>on_button_clicked</code> method we defined "
"above. With <code>sigc::bind</code> we are able to pass additional arguments "
"to the slot and in this case we pass the frequency (as double) and our "
"helper class."
msgstr ""
"마지막으로 <em>clicked</em> 시그널을 연결하겠습니다. 그다지 간단하지 않은 과"
"정인데 자료형에 안전한 방식으로 끝낼 일이며 실제로 주파수 정보와 보조 클래스"
"를 시그널 핸들러로 전달하고 싶어하기 때문입니다. <code>sigc::ptr_fun(&amp;"
"on_button_clicked)</code> 메서드는 위에서 우리가 정의한 "
"<code>on_button_clicked</code> 메서드의 <em>slot</em>을 만듭니다. "
"<code>sigc::bind</code>로 슬롯에 추가 인자를 전달할 수 있는데, 이 경우 우리"
"는 주파수(double 형식) 값과 보조 클래스를 전달합니다."

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:249
msgid ""
"Now that we have set up the <em>E</em> button we also need to connect the "
"other buttons according to their frequencies: 440 for A, 587.33 for D, "
"783.99 for G, 987.77 for B and 1318.5 for the high E. This is done in the "
"same way, just passing a different frequency to the handler."
msgstr ""
"이제 <em>E</em> 단추를 설정했고, 다른 단추에도 해당 주파수 값으로 연결해야합"
"니다. A에는 440, D에는 587.33, G에는 783.99, B에는 987.77, 높은 E에는 1318.5 "
"이런 식이죠. 그냥 핸들러에 다른 주파수 값을 전달하는 동일한 방식으로 처리할 "
"수 있습니다."

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:256
msgid ""
"All of the code should now be ready to go. Click <guiseq><gui>Build</"
"gui><gui>Build Project</gui></guiseq> to build everything again, and then "
"<guiseq><gui>Run</gui><gui>Run</gui></guiseq> to start the application."
msgstr ""
"모든 코드가 동작할 준비가 끝났습니다. <guiseq><gui>빌드</gui><gui>프로젝트 빌"
"드</gui></guiseq>를 눌러 모두 다시 빌드하시고, <guiseq><gui>실행</gui><gui>실"
"행</gui></guiseq>을 눌러 프로그램을 시작하십시오."

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:262
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"guitar-tuner/guitar-tuner.cc\">reference code</link>."
msgstr ""
"지침서를 따라하는 실행하는 과정에 문제가 있다면, <link href=\"guitar-tuner/"
"guitar-tuner.cc\">참조 코드</link>와 여러분의 코드를 비교해보십시오."

#. (itstool) path: section/title
#: C/guitar-tuner.cpp.page:266
msgid "Further Reading"
msgstr "더 읽을거리"

#. (itstool) path: section/p
#: C/guitar-tuner.cpp.page:267
msgid ""
"Many of the things shown above are explained in detail in the <link href="
"\"http://library.gnome.org/devel/gtkmm-tutorial/stable/\">GTKmm book</link> "
"which also covers a lot more key concept for using the full power of GTKmm. "
"You might also be interested in the <link href=\"http://library.gnome.org/"
"devel/gstreamermm/\">GStreamermm reference documentation</link>."
msgstr ""
"위에 보여드린 예제 대부분에 대해서는, GTKmm의 완벽한 힘을 활용하여 더 핵심적"
"인 개념을 다루는 <link href=\"http://library.gnome.org/devel/gtkmm-tutorial/"
"stable/\">GTKmm book</link>에서 더 자세한 내용을 다룹니다. <link href="
"\"http://library.gnome.org/devel/gstreamermm/\">GStreamermm 참고 문서</link>"
"에도 관심이 있으실지도 모르겠습니다."

#. (itstool) path: info/title
#: C/guitar-tuner.js.page:7
msgctxt "text"
msgid "Guitar tuner (JavaScript)"
msgstr "Guitar tuner (JavaScript)"

#. (itstool) path: info/desc
#: C/guitar-tuner.js.page:17
msgid ""
"Use GTK+ and GStreamer to build a simple guitar tuner application for GNOME."
msgstr ""
"그놈용 단순 기타 조율 프로그램을 만들 때 GTK+와 지스트리머를 사용합니다."

#. (itstool) path: synopsis/p
#: C/guitar-tuner.js.page:23
msgid ""
"In this tutorial we'll construct a small application, Guitar Tuner, using "
"JavaScript and GTK+ and GStreamer. To do and run all the code examples "
"yourself, you need an editor to write code in, terminal and GNOME 3. or "
"higher installed into your computer."
msgstr ""
"이 따라하기 지침에서는 JavaScript와 GTK+, 지스트리머로, 간단한 기타 조율 프로"
"그램을 구성해보겠습니다. 여러분이 직접 코드 예제를 작성하고 실행해보려면, 코"
"드를 작성할 편집기, 터미널, 그놈 3 이상을 컴퓨터에 설치해야합니다."

#. (itstool) path: item/p
#: C/guitar-tuner.js.page:25
msgid "<link xref=\"#gstreamer\">GStreamer pipelines</link>"
msgstr "<link xref=\"#gstreamer\">지스트리머 파이프라인</link>"

#. (itstool) path: item/p
#: C/guitar-tuner.js.page:26 C/weatherAppMain.js.page:23
msgid "<link xref=\"#script\">Script for running the application</link>"
msgstr "<link xref=\"#script\">실행 프로그램 스크립트</link>"

#. (itstool) path: item/p
#: C/guitar-tuner.js.page:27 C/weatherAppMain.js.page:24
msgid "<link xref=\"#imports\">Libraries to import</link>"
msgstr "<link xref=\"#imports\">가져올 라이브러리</link>"

#. (itstool) path: item/p
#: C/guitar-tuner.js.page:28 C/weatherAppMain.js.page:25
msgid ""
"<link xref=\"#mainwindow\">Creating the main window for the application</"
"link>"
msgstr "<link xref=\"#mainwindow\">프로그램 메인 창 만들기</link>"

#. (itstool) path: item/p
#: C/guitar-tuner.js.page:29
msgid "<link xref=\"#buttons\">Buttons for the tunes</link>"
msgstr "<link xref=\"#buttons\">조율 단추</link>"

#. (itstool) path: item/p
#: C/guitar-tuner.js.page:30
msgid "<link xref=\"#playSound\">Making the sounds with GStreamer</link>"
msgstr "<link xref=\"#playSound\">지스트리머로 소리 만들기</link>"

#. (itstool) path: item/p
#: C/guitar-tuner.js.page:31
msgid "<link xref=\"#connecting\">Connecting buttons to playSound</link>"
msgstr "<link xref=\"#connecting\">소리 재생 단추에 연결</link>"

#. (itstool) path: item/p
#: C/guitar-tuner.js.page:32
msgid "<link xref=\"#guitarjs\">The whole program</link>"
msgstr "<link xref=\"#guitarjs\">전체 프로그램</link>"

#. (itstool) path: item/p
#: C/guitar-tuner.js.page:33
msgid "<link xref=\"#terminal\">Running the application form Terminal</link>"
msgstr "<link xref=\"#terminal\">터미널에서 프로그램 실행</link>"

#. (itstool) path: page/p
#: C/guitar-tuner.js.page:36 C/weatherApp.js.page:40
msgid "After reading this tutorial, you should see this in your screen:"
msgstr "지침서를 읽고 나면 이 내용을 화면에서 볼 수 있어야합니다:"

#. (itstool) path: section/title
#: C/guitar-tuner.js.page:48 C/hello-world.js.page:46
#: C/weatherAppMain.js.page:33
msgid "Script for running the application"
msgstr "실행 프로그램 스크립트"

#. (itstool) path: section/code
#: C/guitar-tuner.js.page:49 C/weatherAppMain.js.page:34
#, no-wrap
msgid ""
"\n"
"  #!/usr/bin/gjs"
msgstr ""
"\n"
"  #!/usr/bin/gjs"

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:51
msgid ""
"This line tells how to run the script. It needs to be the first line of the "
"code and it needs to be executable. To get the execution rights go to "
"terminal and run in right folder: chmod +x scriptname. Or you can use the "
"graphical filemanager. Just go to the right folder where your code is, right "
"click you code file, choose properties, click the permissions tab and check "
"the box for allow executing file as a program"
msgstr ""
"이 줄은 스크립트 실행 방법을 알려줍니다. 이 부분은 코드의 처음 부분에 들어가"
"야하며, 스크립트 파일을 실행할 수 있어야합니다. 실행 권한을 가져오려면 터미널"
"을 열고 올바른 폴더에서 chmod +x scriptname 명령을 실행하십시오. 또는 그래픽 "
"파일 관리자를 활용할 수 있습니다. 코드가 있는 적절한 폴더에 들어가서 코드를 "
"작성한 파일에 마우스 커서를 두고 오른쪽 단추를 누른 다음, 속성, 권한 탭을 선"
"택하시고 파일을 프로그램처럼 실행하도록 상자에 표시하십시오."

#. (itstool) path: section/code
#: C/guitar-tuner.js.page:56
#, no-wrap
msgid ""
"\n"
"var Gtk = imports.gi.Gtk;\n"
"var Gst = imports.gi.Gst;\n"
"\n"
"const Mainloop = imports.mainloop;"
msgstr ""
"\n"
"var Gtk = imports.gi.Gtk;\n"
"var Gst = imports.gi.Gst;\n"
"\n"
"const Mainloop = imports.mainloop;"

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:61
msgid ""
"In order to have a working program we need to import a few GObject "
"Introspection -libraries to our use. For working UI, we need Gtk and for "
"Gstreamer to work we need Gst. These are imported in the beginning so we "
"have them at use everywhere. Also in the beginning we import a construct "
"Mainloop to handle the timeout to be used with the tuning sounds."
msgstr ""
"프로그램을 동작하게 하려면 GObject Introspection 라이브러리를 임포팅해야합니"
"다. UI를 동작하게 하려면 Gtk를, 지스트리머를 동작하게 하려면 Gst를 임포팅해야"
"합니다. 코드 시작 부분에서 임포팅해서 어디서든 활용할 수 있게 합니다. 또한 조"
"율음의 재생 시간 제한을 처리할 Mainloop 생성자를 임포팅하겠습니다."

#. (itstool) path: section/title
#: C/guitar-tuner.js.page:64 C/hello-world.js.page:59 C/hello-world.py.page:52
#: C/hello-world.vala.page:44 C/weatherAppMain.js.page:49
msgid "Creating the main window for the application"
msgstr "프로그램 메인 창 만들기"

#. (itstool) path: section/code
#: C/guitar-tuner.js.page:65
#, no-wrap
msgid ""
"\n"
"Gtk.init(null, 0);\n"
"Gst.init(null, 0);\n"
"\n"
"var guitarwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL, border_width: 100});\n"
"guitarwindow.title = \"Guitar Tuner\";\n"
"guitarwindow.connect(\"destroy\", function(){Gtk.main_quit()});\n"
"\n"
"guitarwindow.show();\n"
"Gtk.main();"
msgstr ""
"\n"
"Gtk.init(null, 0);\n"
"Gst.init(null, 0);\n"
"\n"
"var guitarwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL, border_width: 100});\n"
"guitarwindow.title = \"Guitar Tuner\";\n"
"guitarwindow.connect(\"destroy\", function(){Gtk.main_quit()});\n"
"\n"
"guitarwindow.show();\n"
"Gtk.main();"

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:75
msgid ""
"Importing Gtk and Gst is not enough, we need to initialize them in order to "
"get them working. When Gtk and Gst are up and running we need to create the "
"window for the application. Later we are going to put all the buttons for "
"making sounds inside this window. In order to get the window showing, we "
"need to tell it to show and we need also to run the code with the Gtk.main()"
msgstr ""
"Gtk와 Gst를 임포팅 하는 것만으로는 충분치 않기에 동작하려면 초기화해야합니"
"다. Gtk와 Gst를 띄우고 나면 프로그램 창을 만들어야합니다. 그 다음 이 창에서 "
"소리를 낼 모든 단추를 만들어 두겠습니다. 창을 띄우려면, 화면에 나타내라고 직"
"접 알려야 하며, Gtk.main()으로 코드를 실행해야합니다."

#. (itstool) path: section/title
#: C/guitar-tuner.js.page:78
msgid "Buttons for the tunes"
msgstr "조율 단추"

#. (itstool) path: section/code
#: C/guitar-tuner.js.page:79
#, no-wrap
msgid ""
"\n"
"var guitar_box = new Gtk.ButtonBox ({orientation: Gtk.Orientation.VERTICAL, spacing: 10});\n"
"\n"
"var E = new Gtk.Button({label: \"E\"});\n"
"var A = new Gtk.Button({label: \"A\"});\n"
"var D = new Gtk.Button({label: \"D\"});\n"
"var G = new Gtk.Button({label: \"G\"});\n"
"var B = new Gtk.Button({label: \"B\"});\n"
"var e = new Gtk.Button({label: \"e\"});\n"
"\n"
"guitar_box.add(E);\n"
"guitar_box.add(A);\n"
"guitar_box.add(D);\n"
"guitar_box.add(G);\n"
"guitar_box.add(B);\n"
"guitar_box.add(e);\n"
"\n"
"guitarwindow.add(guitar_box);\n"
"\n"
"guitar_box.show_all();"
msgstr ""
"\n"
"var guitar_box = new Gtk.ButtonBox ({orientation: Gtk.Orientation.VERTICAL, spacing: 10});\n"
"\n"
"var E = new Gtk.Button({label: \"E\"});\n"
"var A = new Gtk.Button({label: \"A\"});\n"
"var D = new Gtk.Button({label: \"D\"});\n"
"var G = new Gtk.Button({label: \"G\"});\n"
"var B = new Gtk.Button({label: \"B\"});\n"
"var e = new Gtk.Button({label: \"e\"});\n"
"\n"
"guitar_box.add(E);\n"
"guitar_box.add(A);\n"
"guitar_box.add(D);\n"
"guitar_box.add(G);\n"
"guitar_box.add(B);\n"
"guitar_box.add(e);\n"
"\n"
"guitarwindow.add(guitar_box);\n"
"\n"
"guitar_box.show_all();"

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:99
msgid ""
"Because Gtk.Window can only contain a single widget, we need to create "
"something under it to be able to add all the necessary buttons inside it. In "
"this example we use Buttonbox. After creating the Buttonbox we create "
"buttons with necessary labels. After we have the buttons we need to add them "
"to the Buttonbox and the Buttonbox must be added to the Gtk.Window and "
"everything in the Buttonbox must be shown."
msgstr ""
"Gtk.Window는 단일 위젯을 둘 수 있기 때문에 단추를 안에 다 넣을 수 있으려면 무"
"언가를 만들어야합니다. 이 예제에서 Buttonbox를 사용하겠습니다. Buttonbox를 만"
"들고 나면, 각 단추를 만들어 필요한 레이블을 붙이겠습니다. 이 단추를 만들고 나"
"면 Buttonbox에 넣고 Buttonbox를 Gtk.Window에 넣어 Buttonbox에 넣은 모든 단추"
"가 나타나야합니다."

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:100
msgid ""
"After this stage you should have a window appearing to your screen showing 6 "
"buttons. Right now the buttons don't do anything and we shall address that "
"issue later. Before we can connect the button signals to something we need "
"to code that something first."
msgstr ""
"이 단계가 끝나면 단추 6개가 뜨는 창이 화면에 나타나야합니다. 바로 지금은 단추"
"가 아무 동작을 하지 않으며 이 문제는 나중에 처리하겠습니다. 단추 시그널을 어"
"딘가에 연결할 수 있기 전에는 무언가를 먼저 코드로 작성해야합니다."

#. (itstool) path: section/title
#: C/guitar-tuner.js.page:103
msgid "Making the sounds with GStreamer"
msgstr "지스트리머로 소리 만들기"

#. (itstool) path: section/code
#: C/guitar-tuner.js.page:104
#, no-wrap
msgid ""
"\n"
"var frequencies = {E: 329.63, A: 440,\tD: 587.33,\tG: 783.99,\tB: 987.77,\te: 1318.5}\n"
"\n"
"function playSound(frequency){\n"
"  var pipeline = new Gst.Pipeline({name: \"note\"});\n"
"  var source = Gst.ElementFactory.make(\"audiotestsrc\",\"source\");\n"
"  var sink = Gst.ElementFactory.make(\"autoaudiosink\",\"output\");\n"
"\n"
"  source.set_property('freq', frequency);\n"
"  pipeline.add(source);\n"
"  pipeline.add(sink);\n"
"  source.link(sink);\n"
"  pipeline.set_state(Gst.State.PLAYING);\n"
"\n"
"  Mainloop.timeout_add(500, function () {\n"
"    pipeline.set_state(Gst.State.NULL);\n"
"\t  return false;\n"
"  });\n"
"}"
msgstr ""
"\n"
"var frequencies = {E: 329.63, A: 440,\tD: 587.33,\tG: 783.99,\tB: 987.77,\te: 1318.5}\n"
"\n"
"function playSound(frequency){\n"
"  var pipeline = new Gst.Pipeline({name: \"note\"});\n"
"  var source = Gst.ElementFactory.make(\"audiotestsrc\",\"source\");\n"
"  var sink = Gst.ElementFactory.make(\"autoaudiosink\",\"output\");\n"
"\n"
"  source.set_property('freq', frequency);\n"
"  pipeline.add(source);\n"
"  pipeline.add(sink);\n"
"  source.link(sink);\n"
"  pipeline.set_state(Gst.State.PLAYING);\n"
"\n"
"  Mainloop.timeout_add(500, function () {\n"
"    pipeline.set_state(Gst.State.NULL);\n"
"\t  return false;\n"
"  });\n"
"}"

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:123
msgid ""
"The first thing we need to do is decide what tunes we want to make when we "
"push a button. The frequencies list takes care of that. After that we get to "
"actually making the sounds with the function playSound. For function "
"playSound we give as an input a frequency (that we just defined in the "
"frequencies variable). First thing we need to construct is a pipeline, a "
"source and a sink. For the source we set the frequency. To the pipeline we "
"add both the source and the sink and then we tell it to keep playing. As a "
"last thing we use the const Mainloop to get the pipeline to stop after a "
"500ms."
msgstr ""
"우리가 먼저 해야 할 일은 단추를 눌렀을 때 어떤 음을 낼지를 결정하는 일입니"
"다. 주파수 목록이 이런 역할을 합니다. 그 다음 실제로 playSound 함수로 소리를 "
"냅니다. playSound 함수로 소리를 낼 때 주파수를 입력값(바로 위에서 정의한 "
"frequencies 변수 값)으로 넣습니다. 우선 파이프라인, source, sink를 만들어야합"
"니다. source에 주파수를 설정하겠습니다. 파이프라인에 source와 sink를 추가하"
"고, 재생 상태를 유지하라고 지시하겠습니다. 마지막으로 const Mainloop를 활용하"
"여 파이프라인 동작을 500ms 후에 멈추게 하겠습니다."

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:124
msgid ""
"Now we have the method of playing a tune when clicking a button. Next well "
"make the connections between pushing a button and playing the correct sound "
"from that button."
msgstr ""
"이제 단추를 눌렀을 때 음을 재생하는 메서드를 작성했습니다. 다음 단추를 누르"
"면 단추에서 올바른 음을 재생하도록 연결하겠습니다."

#. (itstool) path: section/title
#: C/guitar-tuner.js.page:127
msgid "Connecting buttons to playSound"
msgstr "소리 재생 단추에 연결"

#. (itstool) path: section/code
#: C/guitar-tuner.js.page:128
#, no-wrap
msgid ""
"\n"
"E.connect(\"clicked\", function() {\n"
"  playSound(frequencies.E);\n"
"});\n"
"A.connect(\"clicked\", function(){\n"
"  playSound(frequencies.A);\n"
"});\n"
"D.connect(\"clicked\", function(){\n"
"  playSound(frequencies.D);\n"
"});\n"
"G.connect(\"clicked\", function(){\n"
"  playSound(frequencies.G);\n"
"});\n"
"B.connect(\"clicked\", function(){\n"
"  playSound(frequencies.B);\n"
"});\n"
"e.connect(\"clicked\", function(){\n"
"  playSound(frequencies.e);\n"
"});"
msgstr ""
"\n"
"E.connect(\"clicked\", function() {\n"
"  playSound(frequencies.E);\n"
"});\n"
"A.connect(\"clicked\", function(){\n"
"  playSound(frequencies.A);\n"
"});\n"
"D.connect(\"clicked\", function(){\n"
"  playSound(frequencies.D);\n"
"});\n"
"G.connect(\"clicked\", function(){\n"
"  playSound(frequencies.G);\n"
"});\n"
"B.connect(\"clicked\", function(){\n"
"  playSound(frequencies.B);\n"
"});\n"
"e.connect(\"clicked\", function(){\n"
"  playSound(frequencies.e);\n"
"});"

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:147
msgid ""
"The method of connecting button clicks to playSound with the correct tune is "
"by using the connect method of the button widget. So we choose a button to "
"be connected and type <code>E.connect(\"clicked\", function()"
"{playSound(frequencies.E);});</code> The <code>connect</code> tells that "
"when pushing E, something should happen. The <code>clicked</code> tells the "
"type of the signal happening to E and then in the <code>function(){};</code> "
"we call playSound with the correct note that should be associated with the "
"button."
msgstr ""
" 올바른 음 값을 주어 playSound를 호출하는 연결 단추 메서드는 단추 위젯의 연"
"결 메서드를 활용합니다. 따라서 연결한 단추를 선택하고 <code>E."
"connect(\"clicked\", function(){playSound(frequencies.E);});</code> 를 입력하"
"십시오.  <code>connect</code> 함수는 E를 눌렀을 때 일어날 일을 지시합니다.  "
"<code>clicked</code>는 E에서 나타나는 시그널 형식을,  <code>function(){};</"
"code> 은 단추와 관련있는 올바른 음을 재생할 playSound 입니다."

#. (itstool) path: section/title
#: C/guitar-tuner.js.page:157
msgid "The whole program"
msgstr "전체 프로그램"

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:158
msgid ""
"So this is what all the parts combined looks like. When running this code, "
"you should be able to tune your guitar (if you have correctly calibrated "
"speakers)."
msgstr ""
"따라서 이 부분은 모든 부분을 합친 것과 같은 부분입니다. 코드를 실행하면 (음"
"을 제대로 보정한 스피커를 연결했을 경우) 여러분 스스로가 기타를 조율할 수 있"
"어야합니다."

#. (itstool) path: section/code
#: C/guitar-tuner.js.page:159
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"var Gtk = imports.gi.Gtk;\n"
"var Gst = imports.gi.Gst;\n"
"\n"
"const Mainloop = imports.mainloop;\n"
"\n"
"Gtk.init(null, 0);\n"
"Gst.init(null, 0);\n"
"\n"
"var guitarwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL, border_width: 100});\n"
"guitarwindow.title = \"Guitar Tuner\";\n"
"guitarwindow.connect(\"destroy\", function(){Gtk.main_quit()});\n"
"\n"
"var guitar_box = new Gtk.ButtonBox ({orientation: Gtk.Orientation.VERTICAL, spacing: 10});\n"
"\n"
"var E = new Gtk.Button({label: \"E\"});\n"
"var A = new Gtk.Button({label: \"A\"});\n"
"var D = new Gtk.Button({label: \"D\"});\n"
"var G = new Gtk.Button({label: \"G\"});\n"
"var B = new Gtk.Button({label: \"B\"});\n"
"var e = new Gtk.Button({label: \"e\"});\n"
"\n"
"var frequencies = {E: 329.63, A: 440,\tD: 587.33,\tG: 783.99,\tB: 987.77,\te: 1318.5}\n"
"\n"
"\n"
"function playSound(frequency){\n"
"  var pipeline = new Gst.Pipeline({name: \"note\"});\n"
"\n"
"  var source = Gst.ElementFactory.make(\"audiotestsrc\",\"source\");\n"
"  var sink = Gst.ElementFactory.make(\"autoaudiosink\",\"output\");\n"
"\n"
"  source.set_property('freq', frequency);\n"
"  pipeline.add(source);\n"
"  pipeline.add(sink);\n"
"  source.link(sink);\n"
"  pipeline.set_state(Gst.State.PLAYING);\n"
"\n"
"  Mainloop.timeout_add(500, function () {\n"
"    pipeline.set_state(Gst.State.NULL);\n"
"\t  return false;\n"
"});\n"
"}\n"
"\n"
"E.connect(\"clicked\", function() {\n"
"  playSound(frequencies.E);\n"
"});\n"
"A.connect(\"clicked\", function(){\n"
"  playSound(frequencies.A);\n"
"});\n"
"D.connect(\"clicked\", function(){\n"
"  playSound(frequencies.D);\n"
"});\n"
"G.connect(\"clicked\", function(){\n"
"  playSound(frequencies.G);\n"
"});\n"
"B.connect(\"clicked\", function(){\n"
"  playSound(frequencies.B);\n"
"});\n"
"e.connect(\"clicked\", function(){\n"
"  playSound(frequencies.e);\n"
"});\n"
"\n"
"guitar_box.add(E);\n"
"guitar_box.add(A);\n"
"guitar_box.add(D);\n"
"guitar_box.add(G);\n"
"guitar_box.add(B);\n"
"guitar_box.add(e);\n"
"\n"
"guitarwindow.add(guitar_box);\n"
"\n"
"guitar_box.show_all();\n"
"guitarwindow.show();\n"
"Gtk.main();"
msgstr ""
"\n"
"#!/usr/bin/gjs\n"
"var Gtk = imports.gi.Gtk;\n"
"var Gst = imports.gi.Gst;\n"
"\n"
"const Mainloop = imports.mainloop;\n"
"\n"
"Gtk.init(null, 0);\n"
"Gst.init(null, 0);\n"
"\n"
"var guitarwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL, border_width: 100});\n"
"guitarwindow.title = \"Guitar Tuner\";\n"
"guitarwindow.connect(\"destroy\", function(){Gtk.main_quit()});\n"
"\n"
"var guitar_box = new Gtk.ButtonBox ({orientation: Gtk.Orientation.VERTICAL, spacing: 10});\n"
"\n"
"var E = new Gtk.Button({label: \"E\"});\n"
"var A = new Gtk.Button({label: \"A\"});\n"
"var D = new Gtk.Button({label: \"D\"});\n"
"var G = new Gtk.Button({label: \"G\"});\n"
"var B = new Gtk.Button({label: \"B\"});\n"
"var e = new Gtk.Button({label: \"e\"});\n"
"\n"
"var frequencies = {E: 329.63, A: 440,\tD: 587.33,\tG: 783.99,\tB: 987.77,\te: 1318.5}\n"
"\n"
"\n"
"function playSound(frequency){\n"
"  var pipeline = new Gst.Pipeline({name: \"note\"});\n"
"\n"
"  var source = Gst.ElementFactory.make(\"audiotestsrc\",\"source\");\n"
"  var sink = Gst.ElementFactory.make(\"autoaudiosink\",\"output\");\n"
"\n"
"  source.set_property('freq', frequency);\n"
"  pipeline.add(source);\n"
"  pipeline.add(sink);\n"
"  source.link(sink);\n"
"  pipeline.set_state(Gst.State.PLAYING);\n"
"\n"
"  Mainloop.timeout_add(500, function () {\n"
"    pipeline.set_state(Gst.State.NULL);\n"
"\t  return false;\n"
"});\n"
"}\n"
"\n"
"E.connect(\"clicked\", function() {\n"
"  playSound(frequencies.E);\n"
"});\n"
"A.connect(\"clicked\", function(){\n"
"  playSound(frequencies.A);\n"
"});\n"
"D.connect(\"clicked\", function(){\n"
"  playSound(frequencies.D);\n"
"});\n"
"G.connect(\"clicked\", function(){\n"
"  playSound(frequencies.G);\n"
"});\n"
"B.connect(\"clicked\", function(){\n"
"  playSound(frequencies.B);\n"
"});\n"
"e.connect(\"clicked\", function(){\n"
"  playSound(frequencies.e);\n"
"});\n"
"\n"
"guitar_box.add(E);\n"
"guitar_box.add(A);\n"
"guitar_box.add(D);\n"
"guitar_box.add(G);\n"
"guitar_box.add(B);\n"
"guitar_box.add(e);\n"
"\n"
"guitarwindow.add(guitar_box);\n"
"\n"
"guitar_box.show_all();\n"
"guitarwindow.show();\n"
"Gtk.main();"

#. (itstool) path: section/title
#: C/guitar-tuner.js.page:237
msgid "Running the application form Terminal"
msgstr "터미널에서 프로그램 실행"

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:238
msgid ""
"To run this application open Terminal, go to the folder where your "
"application is stored and then run"
msgstr ""
"프로그램을 실행하려면 터미널을 열고, 프로그램을 저장한 폴더로 들어간 후 실행"
"하십시오"

#. (itstool) path: section/screen
#: C/guitar-tuner.js.page:238
#, no-wrap
msgid " <output style=\"prompt\">$ </output><input> GJS_PATH=`pwd` gjs guitarTuner.js</input> "
msgstr " <output style=\"prompt\">$ </output><input> GJS_PATH=`pwd` gjs guitarTuner.js</input> "

#. (itstool) path: section/p
#: C/guitar-tuner.js.page:243
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"guitar-tuner/guitar-tuner.js\">reference code</link>."
msgstr ""
"지침서를 따라하는 실행하는 과정에 문제가 있다면, <link href=\"guitar-tuner/"
"guitar-tuner.js\">참조 코드</link>와 여러분의 코드를 비교해보십시오."

#. (itstool) path: info/title
#: C/guitar-tuner.py.page:8
msgctxt "text"
msgid "Guitar tuner (Python)"
msgstr "기타 조율기(Python)"

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:46
msgid "Basic knowledge of the Python programming language"
msgstr "파이썬 프로그래밍 언어 기본 지식"

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:60
msgid ""
"Choose <gui>PyGTK (automake)</gui> from the <gui>Python</gui> tab, click "
"<gui>Continue</gui>, and fill out your details on the next few pages. Use "
"<file>guitar-tuner</file> as project name and directory."
msgstr ""
"<gui>파이썬</gui> 탭에서 <gui>PyGTK (automake)</gui>를 선택하고 <gui>계속</"
"gui>을 누르신 다음 몇가지 페이지에서 세부 내용을 채워나가십시오. 프로젝트 이"
"름과 디렉터리 이름을 <file>guitar-tuner</file>로 정하십시오."

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:63
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. Open "
"<file>src/guitar_tuner.py</file> from the <gui>Project</gui> or <gui>File</"
"gui> tabs. You should see some code which starts with the lines:"
msgstr ""
"<gui>적용</gui>을 누르면 프로젝트를 만들어줍니다. <gui>프로젝트</gui>나 <gui>"
"파일</gui>탭에서 <file>src/guitar_tuner.py</file> 파일을 여십시오. 다음 줄로 "
"시작하는 코드가 나타납니다:"

#. (itstool) path: item/code
#: C/guitar-tuner.py.page:64
#, no-wrap
msgid ""
"\n"
"from gi.repository import Gtk, GdkPixbuf, Gdk\n"
"import os, sys"
msgstr ""
"\n"
"from gi.repository import Gtk, GdkPixbuf, Gdk\n"
"import os, sys"

#. (itstool) path: section/title
#: C/guitar-tuner.py.page:72
msgid "Run the code for the first time"
msgstr "첫 코드 실행"

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:73
msgid ""
"Most of the code in the file is template code. It loads an (empty) window "
"from the user interface description file and shows it. More details are "
"given below; skip this list if you understand the basics:"
msgstr ""
"이 파일의 대부분의 코드는 코드 서식입니다. 사용자 인터페이스 설명 파일에서 "
"(빈)창을 불러오고 보여줍니다. 더 자세한 내용은 아래에 있습니다. 기본을 알고 "
"계신다면 이 부분은 건너 뛰십시오:"

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:77
msgid ""
"The <code>import</code> lines at the top include the tell Python to load the "
"user interface and system libraries needed."
msgstr ""
"상단의 <code>import</code> 줄은 파이썬에 사용자 인터페이스와 시스템 라이브러"
"리가 필요함을 알리는 내용이 들어갑니다."

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:81
msgid ""
"A class is declared that will be the main class for our application. In the "
"<code>__init__</code> method the main window is loaded from the GtkBuilder "
"file (<file>src/guitar-tuner.ui</file>) and the signals are connected."
msgstr ""
"프로그램의 주 클래스가 될 클래스를 선언합니다. <code>__init__</code> 메서드에"
"서는 GtkBuilder 파일(<file>src/guitar-tuner.ui</file>)에서 메인 창을 불러오"
"고 시그널을 연결합니다."

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:84
msgid ""
"Connecting signals is how you define what happens when you push a button, or "
"when some other event happens. Here, the <code>destroy</code> method is "
"called (and quits the app) when you close the window."
msgstr ""
"시그널을 연결하는건 단추를 누르거나 어떤 일이 일어나면 동작이 일어나게 하는 "
"방편입니다. 여기서 <code>destroy</code> 메서드는 창을 닫을 때 호출(하고 프로"
"그램을 끝내기)합니다."

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:87
msgid ""
"The <code>main</code> function is run by default when you start a Python "
"application. It just creates an instance of the main class and starts the "
"main loop to bring up the window."
msgstr ""
"<code>main</code>은 파이썬 프로그램을 시작할 때 기본으로 시작합니다. 메인 클"
"래스의 인스턴스를 만들고 창을 띄우는 메인 루프를 시작합니다."

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:92
msgid ""
"This code is ready to be used, so you can run it by clicking "
"<guiseq><gui>Run</gui><gui>Execute</gui></guiseq>."
msgstr ""
"이 코드를 사용할 준비가 되었으니 <guiseq><gui>실행</gui><gui>실행</gui></"
"guiseq>을 눌러 프로그램을 실행할 수 있습니다."

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:97
msgid ""
"A description of the user interface (UI) is contained in the GtkBuilder "
"file. To edit the user interface, open <file>src/guitar_tuner.ui</file>. "
"This will switch to the interface designer. The design window is in the "
"center; widgets and widgets' properties are on the right, and the palette of "
"available widgets is on the left."
msgstr ""
"사용자 인터페이스(UI) 설명은 GtkBuilder 파일에 있습니다. 사용자 인터페이스를 "
"편집하려면 <file>src/guitar_tuner.ui</file> 파일을 여십시오. 이 파일을 열면 "
"인터페이스 디자이너로 이동합니다. 디자인 창은 가운데에 있고, 위젯과 위젯 속성"
"은 오른편에, 쓸 수 있는 위젯의 팔레트는 왼편에 있습니다."

#. (itstool) path: section/title
#: C/guitar-tuner.py.page:127
msgid "Write the signal handler"
msgstr "시그널 핸들러 작성"

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:129
msgid ""
"To do this, open <file>guitar_tuner.py</file> while the user interface file "
"is still open. Switch to the <gui>Signals</gui> tab, which you already used "
"to set the signal name. Now take the row where you set the <gui>clicked</"
"gui> signal and drag it into to the source file inside the class. The "
"following code will be added to your source file:"
msgstr ""
"진행하려면 사용자 인터페이스 파일을 열어둔 상태에서 <file>guitar_tuner.py</"
"file> 파일을 여십시오. 앞에서 시그널 이름을 설정한 <gui>시그널</gui> 탭으로 "
"가십시오. 이제 <gui>clicked</gui> 시그널 줄로 가서 소스 파일의 클래스에 이 시"
"그널을 끌어다 넣으십시오. 소스 파일에 다음 코드가 들어갑니다:"

#. (itstool) path: section/code
#: C/guitar-tuner.py.page:131
#, no-wrap
msgid ""
"\n"
"def on_button_clicked (self, button):\n"
msgstr ""
"\n"
"def on_button_clicked (self, button):\n"

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:135
msgid ""
"This signal handler has two arguments: the usual Python class pointer, and "
"the <code>Gtk.Button</code> that called the function."
msgstr ""
"이 시그널 핸들러에는 파이썬 클래스 포인터와 함수를 호출하는 <code>Gtk."
"Button</code> 인자가 있습니다."

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:153
msgid ""
"Change the import line in <file>guitar_tuner.py</file>, just at the "
"beginning to :"
msgstr ""
"<file>guitar_tuner.py</file> 파일에 import 줄을 다음과 같이 바꾸십시오:"

#. (itstool) path: section/code
#: C/guitar-tuner.py.page:154
#, no-wrap
msgid "from gi.repository import Gtk, Gst, GObject "
msgstr "from gi.repository import Gtk, Gst, GObject "

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:155
msgid ""
"The <code>Gst</code> includes the GStreamer library. You also need to "
"initialise GStreamer properly which is done in the <code>main()</code> "
"method with this call added above the <code>app = GUI()</code> line:"
msgstr ""
"<code>Gst</code>에는 지스트리머 라이브러리가 들어있습니다. <code>app = "
"GUI()</code> 줄 위에 추가한 이 호출과 <code>main()</code> 메서드 안의 코드로 "
"지스트리머 속성을 초기화해야합니다:"

#. (itstool) path: section/code
#: C/guitar-tuner.py.page:158
#, no-wrap
msgid "Gst.init_check(sys.argv)"
msgstr "Gst.init_check(sys.argv)"

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:159
msgid ""
"Then, copy the following function into the class in <file>guitar_tuner.py</"
"file> somewhere:"
msgstr ""
"그 다음 <file>guitar_tuner.py</file>의 클래스 어딘가에 다음 함수 코드를 복사"
"하십시오:"

#. (itstool) path: section/code
#: C/guitar-tuner.py.page:160
#, no-wrap
msgid ""
"\n"
"def play_sound(self, frequency):\n"
"\tpipeline = Gst.Pipeline(name='note')\n"
"\tsource = Gst.ElementFactory.make('audiotestsrc', 'src')\n"
"\tsink = Gst.ElementFactory.make('autoaudiosink', 'output')\n"
"\n"
"\tsource.set_property('freq', frequency)\n"
"\tpipeline.add(source)\n"
"\tpipeline.add(sink)\n"
"\tsource.link(sink)\n"
"\tpipeline.set_state(Gst.State.PLAYING)\n"
"\n"
"\tGObject.timeout_add(self.LENGTH, self.pipeline_stop, pipeline)"
msgstr ""
"\n"
"def play_sound(self, frequency):\n"
"\tpipeline = Gst.Pipeline(name='note')\n"
"\tsource = Gst.ElementFactory.make('audiotestsrc', 'src')\n"
"\tsink = Gst.ElementFactory.make('autoaudiosink', 'output')\n"
"\n"
"\tsource.set_property('freq', frequency)\n"
"\tpipeline.add(source)\n"
"\tpipeline.add(sink)\n"
"\tsource.link(sink)\n"
"\tpipeline.set_state(Gst.State.PLAYING)\n"
"\n"
"\tGObject.timeout_add(self.LENGTH, self.pipeline_stop, pipeline)"

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:175
msgid ""
"The first three lines create source and sink GStreamer elements and a "
"pipeline element (which will be used as a container for the other two "
"elements). The pipeline is given the name \"note\"; the source is named "
"\"source\" and is set to the <code>audiotestsrc</code> source; and the sink "
"is named \"output\" and set to the <code>autoaudiosink</code> sink (default "
"sound card output)."
msgstr ""
"처음 세 줄에서는 source와 sink 지스트리머 구성 요소, 파이프라인 구성 요소"
"(source와 sink의 컨테이너로 활용)를 만듭니다. 파이프라인 이름은 \"note\"라고 "
"지어둡니다. source는 \"source\"로 이름 붙이고 <code>audiotestsrc</code>로 설"
"정합니다. sink는 \"output\"으로 이름 붙이고 <code>autoaudiosink</code> sink"
"로 설정합니다(기본은 사운드 카드 출력)."

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:178
msgid ""
"The call to <code>source.set_property</code> sets the <code>freq</code> "
"property of the source element to <code>frequency</code>, which was passed "
"as an argument to the <code>play_sound</code> function. This is just the "
"frequency of the note in Hertz; some useful frequencies will be defined "
"later on."
msgstr ""
"<code>source.set_property</code> 호출에서는 source 구성 요소의 <code>freq</"
"code> 속성에 <code>play_sound</code> 함수의 인자로 전달한 <code>frequency</"
"code> 값을 설정합니다. 이 값은 헤르쯔 단위의 음 주파수입니다. 쓸만한 주파수"
"는 나중에 정의하겠습니다."

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:181
msgid ""
"The next two lines call <code>pipeline.add</code>, putting the source and "
"sink into the pipeline. The pipeline can contain multiple other GStreamer "
"elements. In general, you can add as many elements as you like to the "
"pipeline by calling its <code>add</code> method repeatedly."
msgstr ""
"다음 두 줄에서는 source 구성 요소와 sink 구성 요소를 파이프라인에 두는 "
"<code>pipeline.add</code> 함수를 호출합니다. 파이프라인에는 여러 지스트리머 "
"구성 요소를 넣을 수 있습니다. 보통 <code>add</code> 메서드를 반복적으로 호출"
"하여 파이프라인에 원하는 만큼 구성 요소를 넣을 수 있습니다."

#. (itstool) path: item/p
#: C/guitar-tuner.py.page:184
msgid ""
"Next <code>pipeline.set_state</code> is used to start playback, by setting "
"the state of the pipeline to playing (<code>Gst.State.PLAYING</code>)."
msgstr ""
"다음 <code>pipeline.set_state</code> 함수는 파이프라인 상태를 재생 상태"
"(<code>Gst.State.PLAYING</code>)로 설정하여 음 재생을 시작할 때 사용합니다."

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:192
msgid ""
"We don't want to play an annoying tone forever, so the last thing "
"<code>play_sound</code> does is to call <code>GObject.timeout_add</code>. "
"This sets a timeout for stopping the sound; it waits for <code>LENGTH</code> "
"milliseconds before calling the function <code>pipeline_stop</code>, and "
"will keep calling it until <code>pipeline_stop</code> returns <code>False</"
"code>."
msgstr ""
"음을 짜증나게 무한정 재생하고 싶진 않기에 <code>play_sound</code> 함수에서 마"
"지막으로 할 일은 <code>GObject.timeout_add</code> 함수를 호출하는 일입니다. "
"이 함수는 음 재생을 멈출 제한 시간을 설정합니다. <code>pipeline_stop</code> "
"함수를 호출하기 전 <code>LENGTH</code> 밀리초동안 기다리고 "
"<code>pipeline_stop</code> 함수에서 <code>False</code>를 반환하기 전까지 계"
"속 호출합니다."

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:193
msgid ""
"Now, we'll write the <code>pipeline_stop</code> function which is called by "
"<code>GObject.timeout_add</code>. Insert the following code <em>above</em> "
"the <code>play_sound</code> function:"
msgstr ""
"이제 <code>GObject.timeout_add</code> 함수에서 호출할  <code>pipeline_stop</"
"code> 함수를 작성하겠습니다. 다음 코드를 <code>play_sound</code> 함수 <em>상"
"단</em>에 넣으십시오:"

#. (itstool) path: section/code
#: C/guitar-tuner.py.page:194
#, no-wrap
msgid ""
"\n"
"def pipeline_stop(self, pipeline):\n"
"\tpipeline.set_state(Gst.State.NULL)\n"
"\treturn False\n"
msgstr ""
"\n"
"def pipeline_stop(self, pipeline):\n"
"\tpipeline.set_state(Gst.State.NULL)\n"
"\treturn False\n"

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:199
msgid ""
"You need to define the <code>LENGTH</code> constant inside the class, so add "
"this code at the beginning of the main class:"
msgstr ""
"클래스 안에 <code>LENGTH</code> 상수를 정의해야 하므로, 메인 클래스 시작 부분"
"에 다음 코드를 추가하겠습니다:"

#. (itstool) path: section/code
#: C/guitar-tuner.py.page:201
#, no-wrap
msgid ""
"\n"
"LENGTH = 500\n"
msgstr ""
"\n"
"LENGTH = 500\n"

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:204
msgid ""
"The call to <code>pipeline.set_state</code> stops the playback of the "
"pipeline."
msgstr ""
"<code>pipeline.set_state</code> 함수를 호출하면 파이프라인 재생을 멈춥니다."

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:209
msgid ""
"We want to play the correct sound when the user clicks a button. First of "
"all, we need to know the frequencies for the six guitar strings, which are "
"defined (at the beginning of the main class) inside a dictionary so we can "
"easily map them to the names of the strings:"
msgstr ""
"사용자가 단추를 누르면 올바른 음을 나게 해보겠습니다. 우선 (메인 클래스 시작 "
"부분) 딕셔너리에 정의한 기타 각 여섯줄의 주파수를 알아내어 기타 줄에 이름에 "
"쉽게 대응할 수 있어야합니다:"

#. (itstool) path: section/code
#: C/guitar-tuner.py.page:211
#, no-wrap
msgid ""
"\n"
"# Frequencies of the strings\n"
"frequencies = {\n"
"\t'E': 329.63,\n"
"\t'A': 440,\n"
"\t'D': 587.33,\n"
"\t'G': 783.99,\n"
"\t'B': 987.77,\n"
"\t'e': 1318.5\n"
"}\n"
msgstr ""
"\n"
"# Frequencies of the strings\n"
"frequencies = {\n"
"\t'E': 329.63,\n"
"\t'A': 440,\n"
"\t'D': 587.33,\n"
"\t'G': 783.99,\n"
"\t'B': 987.77,\n"
"\t'e': 1318.5\n"
"}\n"

#. (itstool) path: section/code
#: C/guitar-tuner.py.page:223
#, no-wrap
msgid ""
"\n"
"def on_button_clicked(self, button):\n"
"\tlabel = button.get_child()\n"
"\ttext = label.get_label()\n"
"\n"
"\tself.play_sound (self.frequencies[text])\n"
msgstr ""
"\n"
"def on_button_clicked(self, button):\n"
"\tlabel = button.get_child()\n"
"\ttext = label.get_label()\n"
"\n"
"\tself.play_sound (self.frequencies[text])\n"

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:230
msgid ""
"The button that was clicked is passed as an argument (<code>button</code>) "
"to <code>on_button_clicked</code>. We can get the label of that button by "
"using <code>button.get_child</code>, and then get the text from that label "
"using <code>label.get_label</code>."
msgstr ""
"누른 단추는 <code>on_button_clicked</code> 함수에 인자(<code>button</code>)"
"로 전달합니다. <code>button.get_child</code> 함수로 단추 레이블 객체를 가져"
"올 수 있고, 해당 레이블 객체에서 <code>label.get_label</code>을 사용하여 텍스"
"트를 가져올 수 있습니다."

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:231
msgid ""
"The label text is then used as a key for the dictionary and "
"<code>play_sound</code> is called with the frequency appropriate for that "
"note. This plays the tone; we have a working guitar tuner!"
msgstr ""
"레이블 텍스트는 딕셔너리의 키로 사용하며 음에 해당하는 적당한 주파수로 "
"<code>play_sound</code>를 호출합니다. 이 코드로 음을 재생합니다. 이렇게 해서 "
"동작하는 기타 조율 프로그램을 만듭니다!"

#. (itstool) path: section/title
#: C/guitar-tuner.py.page:235 C/image-viewer.js.page:311
#: C/image-viewer.py.page:225 C/record-collection.js.page:292
msgid "Run the application"
msgstr "프로그램 실행"

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:236
msgid ""
"All of the code should now be ready to go. Click <guiseq><gui>Run</"
"gui><gui>Execute</gui></guiseq> to start the application. Enjoy!"
msgstr ""
"모든 코드를 실행할 준비를 마쳤습니다. <guiseq><gui>실행</gui><gui>실행</"
"gui></guiseq>을 눌러 프로그램을 시작하시고 즐기세요!"

#. (itstool) path: section/p
#: C/guitar-tuner.py.page:241
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"guitar-tuner/guitar-tuner.py\">reference code</link>."
msgstr ""
"지침서를 따라하는 실행하는 과정에 문제가 있다면, <link href=\"guitar-tuner/"
"guitar-tuner.py\">참조 코드</link>와 여러분의 코드를 비교해보십시오."

#. (itstool) path: info/desc
#: C/guitar-tuner.vala.page:10
msgid ""
"Use <link href=\"http://developer.gnome.org/platform-overview/stable/gtk"
"\">GTK+</link> and <link href=\"http://developer.gnome.org/platform-overview/"
"stable/gstreamer\">GStreamer</link> to build a simple guitar tuner "
"application for GNOME. Shows off how to use the interface designer."
msgstr ""
"간단한 그놈용 기타 조율 프로그램을 만들 때 <link href=\"http://developer."
"gnome.org/platform-overview/stable/gtk\">GTK+</link>와 <link href=\"http://"
"developer.gnome.org/platform-overview/stable/gstreamer\">지스트리머</link>를 "
"활용합니다. 인터페이스 사용 방법을 보여드립니다."

#. (itstool) path: synopsis/p
#: C/guitar-tuner.vala.page:35
msgid ""
"In this tutorial you will create an application which plays tones that you "
"can use to tune a guitar. You will learn how to:"
msgstr ""
"이 따라하기 지침서를 통해 기타를 조율할 때 활용할 수 있는 기타 음 재생 프로그"
"램을 만듭니다. 다음 내용을 배웁니다:"

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:37
msgid ""
"Set up a basic project using the <link xref=\"getting-ready\">Anjuta IDE</"
"link>."
msgstr ""
"<link xref=\"getting-ready\">안주타 IDE</link>로 기본 프로젝트를 설정합니다."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:38
msgid "Create a simple GUI with <app>Anjuta</app>'s UI designer."
msgstr "<app>안주타</app> 사용자 인터페이스 디자이너로 간단한 GUI를 만듭니다."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:39
msgid ""
"Use the <link href=\"http://developer.gnome.org/platform-overview/stable/"
"gstreamer\">GStreamer</link> library to play sounds."
msgstr ""
"소리 재생에 <link href=\"http://developer.gnome.org/platform-overview/stable/"
"gstreamer\">지스트리머</link> 라이브러리를 사용합니다."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:43 C/image-viewer.vala.page:48
msgid ""
"Basic knowledge of the <link href=\"https://live.gnome.org/Vala/Tutorial"
"\">Vala</link> programming language."
msgstr ""
"<link href=\"https://live.gnome.org/Vala/Tutorial\">Vala</link> 프로그래밍 언"
"어 기본 지식."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:44 C/image-viewer.vala.page:49
msgid "An installed copy of <app>Anjuta</app>."
msgstr "<app>안주타</app> 설치 사본."

#. (itstool) path: section/title
#: C/guitar-tuner.vala.page:51
msgid "Create a project in <app>Anjuta</app>"
msgstr "<app>안주타</app> 프로젝트 만들기"

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:55 C/image-viewer.vala.page:63
msgid ""
"Start <app>Anjuta</app> and click <gui>Create a new project</gui> or "
"<guiseq><gui>File</gui><gui>New</gui><gui>Project</gui></guiseq> to open the "
"project wizard."
msgstr ""
"<app>안주타</app> 를 시작하고 <gui>새 프로젝트 만들기</gui> 또는 "
"<guiseq><gui>파일</gui><gui>새로 만들기</gui><gui>프로젝트</gui></guiseq> 를 "
"눌러 프로젝트 마법사를 여십시오."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:58
msgid ""
"Click on the <gui>Vala</gui> tab and select <gui>GTK+ (Simple)</gui>. Click "
"<gui>Continue</gui>, and fill out your details on the next few pages. Use "
"<file>guitar-tuner</file> as project name and directory."
msgstr ""
"<gui>Vala</gui> 탭을 누른 후 <gui>GTK+ (단순)</gui> 항목을 선택하십시오. "
"<gui>계속</gui>을 누르고 다음 일부 페이지에서 세부 내용을 채워나가십시오. 프"
"로젝트 이름과 디렉터리 이름을 <file>guitar-tuner</file>로 설정하십시오."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:61
msgid ""
"Make sure that <gui>Configure external packages</gui> is switched <gui>ON</"
"gui>. On the next page, select <link href=\"http://valadoc.org/"
"gstreamer-0.10/index.htm\"><em>gstreamer-0.10</em></link> from the list to "
"include the GStreamer library in your project. Click <gui>Continue</gui>"
msgstr ""
"<gui>외부 패키지 설정</gui>을 <gui>켬</gui>으로 설정했는지 확인하십시오. 다"
"음 페이지의 목록에서 <link href=\"http://valadoc.org/gstreamer-0.10/index.htm"
"\"><em>gstreamer-0.10</em></link>를 선택하여 프로젝트에 지스트리머 라이브러리"
"를 넣으십시오. <gui>계속</gui>을 누르십시오."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:65
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. From the "
"<gui>Project</gui> or <gui>Files</gui> tab, open <file>src/guitar_tuner."
"vala</file> by double-clicking on it. You should see some code which starts "
"with the lines:"
msgstr ""
"<gui>적용</gui>을 누르면 프로젝트를 만들어줍니다. <gui>프로젝트</gui>나 <gui>"
"파일</gui>탭에서 <file>src/guitar_tuner.vala</file> 파일을 두 번 눌러 여십시"
"오. 다음 줄로 시작하는 일부 코드를 볼 수 있습니다:"

#. (itstool) path: item/code
#: C/guitar-tuner.vala.page:66 C/magic-mirror.vala.page:70
#, no-wrap
msgid ""
"\n"
"using GLib;\n"
"using Gtk;"
msgstr ""
"\n"
"using GLib;\n"
"using Gtk;"

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:75
msgid ""
"The code loads an (empty) window from the user interface description file "
"and displays it. More details are given below; you may choose to skip this "
"list if you understand the basics:"
msgstr ""
"이 코드는 (빈) 창을 사용자 인터페이스 설명 파일에서 불러오고 화면에 나타냅니"
"다. 자세한 내용은 아래에 있습니다. 기본을 이해하셨다면 이 부분은 넘어가셔도 "
"됩니다:"

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:79 C/magic-mirror.vala.page:82
msgid ""
"The two <code>using</code> lines import namespaces so we don't have to name "
"them explicitly."
msgstr ""
"<code>using</code> 선언부 두줄은 이름 여역을 가져오므로 굳이 이름을 적어넣을 "
"필요는 없습니다."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:82
msgid ""
"The constructor of the <code>Main</code> class creates a new window by "
"opening a GtkBuilder file (<file>src/guitar-tuner.ui</file>, defined a few "
"lines above), connecting its signals and then displaying it in a window. "
"This GtkBuilder file contains a description of a user interface and all of "
"its elements. You can use Anjuta's editor to design GtkBuilder user "
"interfaces."
msgstr ""
"<code>Main</code> 클래스 생성자는 GtkBuilder 파일을 열어 새 창을 만들고(위 "
"몇 줄에 정의한 <file>src/guitar-tuner.ui</file>), 시그널을 연결한 다음 창을 "
"화면에 띄웁니다. GtkBiulder 파일에는 사용자 인터페이스 설명과 구성요소 모두"
"를 담고 있습니다. 안주타 편집기를 사용하여 GtkBuilder 사용자 인터페이스를 디"
"자인할 수 있습니다."

#. (itstool) path: note/p
#: C/guitar-tuner.vala.page:84
msgid ""
"Connecting signals is how you define what happens when you push a button, or "
"when some other event happens. Here, the <code>on_destroy</code> function is "
"called (and quits the app) when you close the window."
msgstr ""
"시그널 연결은 단추를 눌렀을 때 또는 다른 어떤 일이 일어났을 때 일어날 행동을 "
"정의하는 방식입니다. 여기서 <code>on_destroy</code> 함수는 창을 닫을 때 호출"
"(하고 끝내기) 합니다."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:88
msgid ""
"The static <code>main</code> function is run by default when you start a "
"Vala application. It calls a few functions which create the Main class, set "
"up and then run the application. The <code>Gtk.main</code> function starts "
"the GTK main loop, which runs the user interface and starts listening for "
"events (like clicks and key presses)."
msgstr ""
"정적 <code>main</code> 함수는 Vala 프로그램을 시작할 때 기본으로 실행합니다. "
"Main 클래스를 만들고 설정한 다음 프로그램을 실행하는 일부 함수를 호출합니다. "
"<code>Gtk.main</code> 함수는 사용자 인터페이스를 실행하고 (마우스 누름과 키 "
"누름 같은) 이벤트를 기다리기 시작하는 GTK 메인 루프를 시작합니다."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:92
msgid ""
"This code is ready to be used, so you can compile it by clicking "
"<guiseq><gui>Build</gui><gui>Build Project</gui></guiseq> (or press "
"<keyseq><key>Shift</key><key>F7</key></keyseq>). When you do this, a dialog "
"will appear. Change the <gui>Configuration</gui> to <gui>Default</gui> and "
"then click <gui>Execute</gui> to configure the build directory. You only "
"need to do this once, for the first build."
msgstr ""
"이 코드를 사용할 준비가 끝났기에 <guiseq><gui>빌드</gui><gui>프로젝트 빌드</"
"gui></guiseq>(또는 <keyseq><key>Shift</key><key>F7</key></keyseq>키)를 눌러 "
"컴파일할 수 있습니다. 이 과정을 수행하면 대화상자가 나타납니다.  <gui>설정</"
"gui>을 <gui>기본</gui>으로 바꾸고 <gui>실행</gui>을 눌러 빌드 디렉터리를 설정"
"하십시오. 처음 빌드하실 때 한 번만 실행하시면 됩니다."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:97
msgid ""
"A description of the user interface (UI) is contained in the GtkBuilder file "
"<file>src/guitar_tuner.ui</file> defined at the top of the class. To edit "
"the user interface, open <file>src/guitar_tuner.ui</file> by double-clicking "
"on it in the <gui>Project</gui> or <gui>Files</gui> section. This will "
"switch to the interface designer. The design window is in the center; "
"<gui>Widgets</gui> and the widget properties are on the right, and the "
"<gui>Palette</gui> of available widgets is on the left."
msgstr ""
"사용자 인터페이스(UI)설명은 클래서 상단에 정의한 <file>src/guitar_tuner.ui</"
"file> GtkBuilder 파일에 있습니다. 사용자 인터페이스를 편집하려면 <gui>프로젝"
"트</gui> 또는 <gui>파일</gui> 섹션에서 <file>src/guitar_tuner.ui</file> 파일"
"을 두 번 눌러 여십시오. 이 동작을 통해 인터페이스 디자이너 프로그램으로 옮겨"
"갑니다. 디자인 창은 가운데 있고, <gui>위젯</gui> 과 위젯 속성은 오른편에, 사"
"용할 수 있는 위젯의 <gui>팔레트</gui>는 왼편에 있습니다."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:99
msgid ""
"The layout of every UI in GTK+ is organized using boxes and tables. Let's "
"use a vertical GtkButtonBox here to assign six GtkButtons, one for each of "
"the six guitar strings."
msgstr ""
"GTK+의 모든 UI 배치는 상자와 테이블 안에 모아둡니다. 기타 줄 각 한개를 의미하"
"는 GtkButton 6개를 모아둘 수직 방향 GtkButtonBox를 사용해보겠습니다."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:105
msgid ""
"In the <gui>Palette</gui> tab, from the <gui>Containers</gui> section, "
"select a <gui>Button Box</gui> (GtkButtonBox) by clicking on the icon. Then "
"click on the design window in the center to place it into the window. A "
"dialog will display where you can set the <gui>Number of items</gui> to "
"<input>6</input>. Then click <gui>Create</gui>."
msgstr ""
"<gui>컨테이너</gui> 섹션의 <gui>팔레트-</gui> 탭에서 아이콘을 눌러 "
"<gui>Button Box</gui>(GtkButtonBox)를 선택하십시오. 그 후 디자인 창 한가운데"
"를 눌러 창에 넣으십시오. <gui>항목 수</gui>를 <input>6</input>으로 설정할 수 "
"있는 대화상자가 나타납니다. 설정하고 나면 <gui>만들기</gui>를 누르십시오."

#. (itstool) path: note/p
#: C/guitar-tuner.vala.page:106
msgid ""
"You can also change the <gui>Number of elements</gui> and the "
"<gui>Orientation</gui> in the <gui>General</gui> tab on the right."
msgstr ""
"우측 <gui>일반</gui> 탭에서 <gui>항목 수</gui>와 <gui>방향</gui>을 설정할 수"
"도 있습니다."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:110
msgid ""
"Now, from the <gui>Control and Display</gui> section of the <gui>Palette</"
"gui> choose a <gui>Button</gui> (GtkButton) by clicking on it. Place it into "
"the first section of the GtkButtonBox by clicking in the first section."
msgstr ""
"이제 <gui>팔레트</gui>의 <gui>컨트롤 및 표시</gui> 섹션에서  <gui>Button</"
"gui> (GtkButton)을 눌러 선택하십시오. 처음 섹션을 눌러서 GtkButtonBox의 처음 "
"섹션에 두십시오."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:113
msgid ""
"While the button is still selected, scroll down in the <gui>General</gui> "
"tab on the right to the <gui>Label</gui> property, and change it to <gui>E</"
"gui>. This will be the low E guitar string."
msgstr ""
"단추를 선택한 상태라면 우측 <gui>일반</gui> 탭에서 스크롤을 내려 <gui>레이블"
"</gui> 속성을 찾아 <gui>E</gui>로 바꾸십시오. 낮은 E 음 기타 현 입니다."

#. (itstool) path: note/p
#: C/guitar-tuner.vala.page:114
msgid ""
"The <gui>General</gui> tab is located in the <gui>Widgets</gui> section on "
"the right."
msgstr "<gui>일반</gui> 탭은 우측 <gui>위젯</gui> 섹션에 있습니다."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:119
msgid ""
"Click on the <gui>Signals</gui> tab in the <gui>Widgets</gui> section on the "
"right, and look for the <code>clicked</code> signal of the button. You can "
"use this to connect a signal handler that will be called when the button is "
"clicked by the user. To do this, click on the signal and type "
"<code>main_on_button_clicked</code> in the <gui>Handler</gui> column and "
"press the <key>Enter</key>."
msgstr ""
"우측의 <gui>위젯</gui> 섹션에서 <gui>시그널</gui>을 누르고 단추의 "
"<code>clicked</code> 시그널을 찾으십시오. 단추를 사용자가 눌렀을 때 호출할 시"
"그널 핸들러에 이 시그널을 연결할 수 있습니다. 이렇게 하려면 시그널을 선택하"
"고 <gui>핸들러</gui> 열에 <code>main_on_button_clicked</code>를 입력한 후 "
"<key>Enter</key>키를 누르십시오."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:132
msgid ""
"This section will show you how to create the code to produce sounds. <link "
"href=\"http://developer.gnome.org/platform-overview/stable/gstreamer"
"\">GStreamer</link> is GNOME's multimedia framework — you can use it for "
"playing, recording, and processing video, audio, webcam streams and the "
"like. Here, we'll be using it to produce single-frequency tones."
msgstr ""
"이 섹션은 음을 재생하는 코드를 작성하는 법을 보여줍니다. <link href=\"http://"
"developer.gnome.org/platform-overview/stable/gstreamer\">지스트리머</link>는 "
"그놈 멀티미디어 프레임워크입니다. 동영상, 오디오, 웹캠 스트림 같은 매체를 재"
"생하고, 녹음/녹화하고 처리할 때 이 프레임워크를 사용할 수 있습니다. 여기서는 "
"단일 주파수 음을 재생할 때 이 프레임워크를 사용하겠습니다."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:133
msgid ""
"Conceptually, GStreamer works as follows: You create a <link href=\"http://"
"gstreamer.freedesktop.org/data/doc/gstreamer/head/manual/html/section-intro-"
"basics-bins.html\"><em>pipeline</em></link> containing several processing "
"elements going from the <em>source</em> to the <em>sink</em> (output). The "
"source can be an image file, a video, or a music file, for example, and the "
"output could be a widget or the soundcard."
msgstr ""
"개념상 지스트리머든 다음과 같이 동작합니다.  <em>source</em>에서 <em>sink</"
"em>(출력)으로의 다양한 처리 흐름을 담는 <link href=\"http://gstreamer."
"freedesktop.org/data/doc/gstreamer/head/manual/html/section-intro-basics-"
"bins.html\"><em>파이프라인</em></link>을 만듭니다. source는 그림 파일, 동영"
"상, 음악 파일이 될 수 있으며, 출력 모양새는 위젯 또는 사운드 카드의 출력일 "
"수 있습니다."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:142
msgid ""
"In this example we will use a tone generator source called "
"<code>audiotestsrc</code> and send the output to the default system sound "
"device, <code>autoaudiosink</code>. We only need to configure the frequency "
"of the tone generator; this is accessible through the <code>freq</code> "
"property of <code>audiotestsrc</code>."
msgstr ""
"여기 단순 예제에서는 <code>audiotestsrc</code> 라는 음 재생기 소스를 사용하"
"고 기본 시스템 사운드 장치 <code>autoaudiosink</code>로 출력을 내보내겠습니"
"다. 우리는 여기서 음 재생기 주파수만 설정하면 됩니다.  <code>audiotestsrc</"
"code>의 <code>freq</code> 속성을 사용하면 됩니다."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:144
msgid ""
"We need to add a line to initialize GStreamer; put the following code on the "
"line above the <code>Gtk.init</code> call in the <code>main</code> function:"
msgstr ""
"지스트리머를 초기화하는 코드 한 줄을 넣어야합니다. 다음 코드를 <code>main</"
"code> 함수의 <code>Gtk.init</code> 코드 위에 넣으십시오:"

#. (itstool) path: section/code
#: C/guitar-tuner.vala.page:145
#, no-wrap
msgid "Gst.init (ref args);"
msgstr "Gst.init (ref args);"

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:146
msgid ""
"Then, copy the following function into <file>guitar_tuner.vala</file> inside "
"our <code>Main</code> class:"
msgstr ""
"그리고 다음 함수 코드를 <code>Main</code> 클래스의 <file>guitar_tuner.vala</"
"file> 파일 안에 복사해넣으십시오:"

#. (itstool) path: section/code
#: C/guitar-tuner.vala.page:147
#, no-wrap
msgid ""
"\n"
"Gst.Element sink;\n"
"Gst.Element source;\n"
"Gst.Pipeline pipeline;\n"
"\n"
"private void play_sound(double frequency)\n"
"{\n"
"\tpipeline = new Gst.Pipeline (\"note\");\n"
"\tsource   = Gst.ElementFactory.make (\"audiotestsrc\",\n"
"\t                                    \"source\");\n"
"\tsink     = Gst.ElementFactory.make (\"autoaudiosink\",\n"
"\t                                    \"output\");\n"
"\n"
"\t/* set frequency */\n"
"\tsource.set (\"freq\", frequency);\n"
"\n"
"\tpipeline.add (source);\n"
"\tpipeline.add (sink);\n"
"\tsource.link (sink);\n"
"\n"
"\tpipeline.set_state (Gst.State.PLAYING);\n"
"\n"
"\t/* stop it after 200ms */\n"
"\tvar time = new TimeoutSource(200);\n"
"\n"
"\ttime.set_callback(() =&gt; {\n"
"\t\tpipeline.set_state (Gst.State.NULL);\n"
"\t\treturn false;\n"
"\t});\n"
"\ttime.attach(null);\n"
"}"
msgstr ""
"\n"
"Gst.Element sink;\n"
"Gst.Element source;\n"
"Gst.Pipeline pipeline;\n"
"\n"
"private void play_sound(double frequency)\n"
"{\n"
"\tpipeline = new Gst.Pipeline (\"note\");\n"
"\tsource   = Gst.ElementFactory.make (\"audiotestsrc\",\n"
"\t                                    \"source\");\n"
"\tsink     = Gst.ElementFactory.make (\"autoaudiosink\",\n"
"\t                                    \"output\");\n"
"\n"
"\t/* set frequency */\n"
"\tsource.set (\"freq\", frequency);\n"
"\n"
"\tpipeline.add (source);\n"
"\tpipeline.add (sink);\n"
"\tsource.link (sink);\n"
"\n"
"\tpipeline.set_state (Gst.State.PLAYING);\n"
"\n"
"\t/* stop it after 200ms */\n"
"\tvar time = new TimeoutSource(200);\n"
"\n"
"\ttime.set_callback(() =&gt; {\n"
"\t\tpipeline.set_state (Gst.State.NULL);\n"
"\t\treturn false;\n"
"\t});\n"
"\ttime.attach(null);\n"
"}"

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:181
msgid ""
"The first three lines create source and sink GStreamer elements (<link href="
"\"http://valadoc.org/gstreamer-0.10/Gst.Element.html\"><code>Gst.Element</"
"code></link>), and a <link href=\"http://valadoc.org/gstreamer-0.10/Gst."
"Pipeline.html\">pipeline element</link> (which will be used as a container "
"for the other two elements). Those are class variables so they are defined "
"outside the method. The pipeline is given the name \"note\"; the source is "
"named \"source\" and is set to the <code>audiotestsrc</code> source; and the "
"sink is named \"output\" and set to the <code>autoaudiosink</code> sink "
"(default sound card output)."
msgstr ""
"처음 다섯줄에서는 source와 sink 지스트리머 구성 요소(<link href=\"http://"
"valadoc.org/gstreamer-0.10/Gst.Element.html\"><code>Gst.Element</code></"
"link>), <link href=\"http://valadoc.org/gstreamer-0.10/Gst.Pipeline.html\">파"
"이프라인 구성 요소</link>(source와 sink의 컨테이너로 활용)를 만듭니다. 여기 "
"언급한 구성요소는 클래스 변수이므로 밖에서는 메서드로 정의합니다. 파이프라인 "
"이름은 \"note\"라고 지어둡니다. source는 \"source\"로 이름 붙이고 "
"<code>audiotestsrc</code>로 설정합니다. sink는 \"output\"으로 이름 붙이고 "
"<code>autoaudiosink</code> sink로 설정합니다(기본은 사운드 카드 출력)."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:184
msgid ""
"The call to <link href=\"http://valadoc.org/gobject-2.0/GLib.Object.set.html"
"\"><code>source.set</code></link> sets the <code>freq</code> property of the "
"source element to <code>frequency</code>, which is passed in as an argument "
"to the <code>play_sound</code> function. This is just the frequency of the "
"note in Hertz; some useful frequencies will be defined later on."
msgstr ""
"<code>play_sound</code> 함수 인자로 넘긴 <code>frequency</code> 값을 <link "
"href=\"http://valadoc.org/gobject-2.0/GLib.Object.set.html\"><code>source."
"set</code></link> 호출로 source 구성 요소의 <code>freq</code>  속성을 설정합"
"니다. 이 값은 헤르쯔 단위의 주파수입니다 쓸만한 주파수 값은 나중에 정의하겠습"
"니다."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:187
msgid ""
"<link href=\"http://valadoc.org/gstreamer-0.10/Gst.Bin.add.html"
"\"><code>pipeline.add</code></link> puts the source and sink into the "
"pipeline. The pipeline is a <link href=\"http://valadoc.org/gstreamer-0.10/"
"Gst.Bin.html\"><code>Gst.Bin</code></link>, which is just an element that "
"can contain multiple other GStreamer elements. In general, you can add as "
"many elements as you like to the pipeline by adding more calls to "
"<code>pipeline.add</code>."
msgstr ""
"<link href=\"http://valadoc.org/gstreamer-0.10/Gst.Bin.add.html"
"\"><code>pipeline.add</code></link>  파이프라인에 source와 sink를 둡니다. 파"
"이프라인은 다른 지스트리머 구성 요소를 여럿 넣을 수 있는 <link href=\"http://"
"valadoc.org/gstreamer-0.10/Gst.Bin.html\"><code>Gst.Bin</code></link> 입니"
"다. 보통 <code>pipeline.add</code> 에 호출을 추가하여 원하는 만큼 구성 요소"
"를 넣을 수 있습니다."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:190
msgid ""
"Next, <link href=\"http://valadoc.org/gstreamer-0.10/Gst.Element.link.html"
"\"><code>sink.link</code></link> is used to connect the elements together, "
"so the output of source (a tone) goes into the input of sink (which is then "
"output to the sound card). <link href=\"http://www.valadoc.org/"
"gstreamer-0.10/Gst.Element.set_state.html\"><code>pipeline.set_state</code></"
"link> is then used to start playback, by setting the <link href=\"http://www."
"valadoc.org/gstreamer-0.10/Gst.State.html\">state of the pipeline</link> to "
"playing (<code>Gst.State.PLAYING</code>)."
msgstr ""
"다음, <link href=\"http://valadoc.org/gstreamer-0.10/Gst.Element.link.html"
"\"><code>sink.link</code></link>는 구성 요소를 서로 연결하여 source의 출력이 "
"sink의 입력으로 들어가게 할 때(그리고 나중에 이 흐름은 사운드 카드로 출력함) "
"사용합니다. 그 다음 <link href=\"http://www.valadoc.org/gstreamer-0.10/Gst."
"Element.set_state.html\"><code>pipeline.set_state</code></link>로 <link href="
"\"http://www.valadoc.org/gstreamer-0.10/Gst.State.html\">파이프라인 상태</"
"link>를 재생(<code>Gst.State.PLAYING</code>) 상태로 설정하여 재생을 시작합니"
"다."

#. (itstool) path: item/p
#: C/guitar-tuner.vala.page:193
msgid ""
"We don't want to play an annoying tone forever, so the last thing "
"<code>play_sound</code> does is to add a <link href=\"http://www.valadoc.org/"
"glib-2.0/GLib.TimeoutSource.html\"><code>TimeoutSource</code></link>. This "
"sets a timeout for stopping the sound; it waits for 200 milliseconds before "
"calling a signal handler defined inline that stops and destroys the "
"pipeline. It returns <code>false</code> to remove itself from the timeout, "
"otherwise it would continue to be called every 200 ms."
msgstr ""
"음을 무한정 지겹게 재생하고 싶지는 않기 때문에 <code>play_sound</code> 함수에"
"서 <link href=\"http://www.valadoc.org/glib-2.0/GLib.TimeoutSource.html"
"\"><code>TimeoutSource</code></link>를 추가합니다. TimeoutSource로 음 재생을 "
"멈출 제한 시간을 설정합니다. 파이프라인을 멈추고 해체하는 코드를 정의한 시그"
"널 핸들러를 호출하기 전 200 밀리초 동안 기다립니다. 주어진 시간이 지나면 자체"
"를 해체할 목적으로 <code>false</code>를 반환합니다. 그렇지 않으면 200 밀리초"
"마다 계속 실행합니다."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:204
msgid ""
"In the UI designer, you made it so that all of the buttons will call the "
"same function, <gui>on_button_clicked</gui>, when they are clicked. Actually "
"we type <gui>main_on_button_clicked</gui> which tells the UI designer that "
"this method is part of our <code>Main</code>. We need to add that function "
"in the source file."
msgstr ""
"UI 디자이너에서 모든 단추를 만들어서 이 단추에 동일한 함수 단추를 눌렀을 때 "
"동일한 함수 <gui>on_button_clicked</gui>를 호출하도록 연결할 차례입니다. 실제"
"로 UI 디자이너에서 입력한 <gui>main_on_button_clicked</gui>는 Main의 메서드"
"를 말합니다. 소스 파일에 이 함수를 추가해야합니다."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:205
msgid ""
"To do this, in the user interface file (guitar_tuner.ui) select one of the "
"buttons by clicking on it, then open <file>guitar_tuner.vala</file> (by "
"clicking on the tab in the center). Switch to the <gui>Signals</gui> tab on "
"the right, which you used to set the signal name. Now take the row where you "
"set the <gui>clicked</gui> signal and drag and drop it into to the source "
"file at the beginning of the class. The following code will be added to your "
"source file:"
msgstr ""
"소스 파일에 함수를 추가하려면 사용자 인터페이스 파일(guitar_tuner.ui)에서 단"
"추 하나를 눌러 선택하고, (가운데 탭을 눌러) <file>guitar_tuner.vala</file> 파"
"일을 여십시오. 시그널 이름을 설정하는 오른편의 <gui>시그널</gui> 탭으로 옮겨"
"가십시오. 이제 앞서 설정한 <gui>clicked</gui> 시그널 줄을 클래스 앞부분의 소"
"스 파일에 끌어다 높으십시오. 이 동작을 통해 소스 파일에 다음 코드를 추가합니"
"다:"

#. (itstool) path: section/code
#: C/guitar-tuner.vala.page:207
#, no-wrap
msgid ""
"\n"
"public void on_button_clicked (Gtk.Button sender) {\n"
"\n"
"}"
msgstr ""
"\n"
"public void on_button_clicked (Gtk.Button sender) {\n"
"\n"
"}"

#. (itstool) path: note/p
#: C/guitar-tuner.vala.page:212
msgid ""
"You can also just type the code at the beginning of the class instead of "
"using the drag and drop."
msgstr ""
"끌어다 놓는 방식 대신 클래스 앞 부분에 코드를 직접 입력할 수도 있습니다."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:213
msgid ""
"This signal handler has only one argument: the <link href=\"http://valadoc."
"org/gtk+-3.0/Gtk.Widget.html\"><code>Gtk.Widget</code></link> that called "
"the function (in our case, always a <link href=\"http://valadoc.org/gtk+-3.0/"
"Gtk.Button.html\"><code>Gtk.Button</code></link>)."
msgstr ""
"시그널 핸들러의 인자는 <link href=\"http://valadoc.org/gtk+-3.0/Gtk.Widget."
"html\"><code>Gtk.Widget</code></link>(우리 같은 경우, 항상 <link href="
"\"http://valadoc.org/gtk+-3.0/Gtk.Button.html\"><code>Gtk.Button</code></"
"link>) 하나뿐입니다."

#. (itstool) path: section/title
#: C/guitar-tuner.vala.page:219
msgid "Define the signal handler"
msgstr "시그널 핸들러 정의"

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:220
msgid ""
"We want to play the correct sound when the user clicks a button. For this, "
"we flesh out the signal handler which we defined above, "
"<code>on_button_clicked</code>. We could have connected every button to a "
"different signal handler, but that would lead to a lot of code duplication. "
"Instead, we can use the label of the button to figure out which button was "
"clicked:"
msgstr ""
"사용자가 단추를 누르면 올바른 음이 나오게 하려고 합니다. 이렇게 하려면 위에"
"서 정의한 시그널 핸들러에 코드를 덧붙여야합니다. 모든 단추에 각자 다른 시그"
"널 핸들러를 연결할 수 있지만, 같은 코드를 여러번 쓸 수 있습니다. 이 대신 어"
"떤 단추를 눌렀는지 판단할 때 단추 레이블을 활용할 수 있습니다:"

#. (itstool) path: section/code
#: C/guitar-tuner.vala.page:221
#, no-wrap
msgid ""
"\n"
"public void on_button_clicked (Gtk.Button sender) {\n"
"\tvar label = sender.get_child () as Gtk.Label;\n"
"\tswitch (label.get_label()) {\n"
"\t\tcase \"E\":\n"
"\t\t\tplay_sound (329.63);\n"
"\t\t\tbreak;\n"
"\t\tcase \"A\":\n"
"\t\t\tplay_sound (440);\n"
"\t\t\tbreak;\n"
"\t\tcase \"D\":\n"
"\t\t\tplay_sound (587.33);\n"
"\t\t\tbreak;\n"
"\t\tcase \"G\":\n"
"\t\t\tplay_sound (783.99);\n"
"\t\t\tbreak;\n"
"\t\tcase \"B\":\n"
"\t\t\tplay_sound (987.77);\n"
"\t\t\tbreak;\n"
"\t\tcase \"e\":\n"
"\t\t\tplay_sound (1318);\n"
"\t\t\tbreak;\n"
"\t\tdefault:\n"
"\t\t\tbreak;\n"
"\t}\n"
"}\n"
msgstr ""
"\n"
"public void on_button_clicked (Gtk.Button sender) {\n"
"\tvar label = sender.get_child () as Gtk.Label;\n"
"\tswitch (label.get_label()) {\n"
"\t\tcase \"E\":\n"
"\t\t\tplay_sound (329.63);\n"
"\t\t\tbreak;\n"
"\t\tcase \"A\":\n"
"\t\t\tplay_sound (440);\n"
"\t\t\tbreak;\n"
"\t\tcase \"D\":\n"
"\t\t\tplay_sound (587.33);\n"
"\t\t\tbreak;\n"
"\t\tcase \"G\":\n"
"\t\t\tplay_sound (783.99);\n"
"\t\t\tbreak;\n"
"\t\tcase \"B\":\n"
"\t\t\tplay_sound (987.77);\n"
"\t\t\tbreak;\n"
"\t\tcase \"e\":\n"
"\t\t\tplay_sound (1318);\n"
"\t\t\tbreak;\n"
"\t\tdefault:\n"
"\t\t\tbreak;\n"
"\t}\n"
"}\n"

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:248
msgid ""
"The <code>Gtk.Button</code> that was clicked is passed as an argument "
"(<code>sender</code>) to <code>on_button_clicked</code>. We can get the "
"label of that button by using <code>get_child</code>, and then get the text "
"from that label using <code>get_label</code>."
msgstr ""
"누른 <code>Gtk.Button</code>는 <code>on_button_clicked</code>의 인자"
"(<code>sender</code>)로 전달합니다. <code>get_child</code>로 단추의 레이블을 "
"가져올 수 있고, 해당 레이블에서 <code>get_label</code>로 텍스트를 가져올 수 "
"있습니다."

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:249
msgid ""
"The switch statement compares the label text to the notes that we can play, "
"and <code>play_sound</code> is called with the frequency appropriate for "
"that note. This plays the tone; we have a working guitar tuner!"
msgstr ""
"switch 구문은 우리가 연주할 수 있는 음의 레이블 텍스트를 비교하고, 표시 음에 "
"적당한 주파수로 <code>play_sound</code>를 호출합니다. 이 동작 과정을 통해 음"
"을 재생합니다. 이렇게 하여 동작하는 기타 조율 프로그램을 만들었습니다!"

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:260
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"guitar-tuner/guitar-tuner.vala\">reference code</link>."
msgstr ""
"지침서를 따라하는 실행하는 과정에 문제가 있다면, <link href=\"guitar-tuner/"
"guitar-tuner.vala\">참조 코드</link>와 여러분의 코드를 비교해보십시오."

#. (itstool) path: section/title
#: C/guitar-tuner.vala.page:264 C/magic-mirror.vala.page:157
msgid "Further reading"
msgstr "더 읽을거리"

#. (itstool) path: section/p
#: C/guitar-tuner.vala.page:265
msgid ""
"To find out more about the Vala programming language you might want to check "
"out the <link href=\"http://live.gnome.org/Vala/Tutorial\">Vala Tutorial</"
"link> and the <link href=\"http://valadoc.org/\">Vala API Documentation</"
"link>"
msgstr ""
"Vala 프로그래밍 언어에 대해 더 알아보려면 <link href=\"http://live.gnome.org/"
"Vala/Tutorial\">Vala 따라하기 지침서</link>와 <link href=\"http://valadoc."
"org/\">Vala API 문서</link>를 확인해보시면 좋습니다."

#. (itstool) path: info/desc
#: C/hellognome.js.page:17
msgid "Your first GNOME application!"
msgstr "첫 그놈 프로그램!"

#. (itstool) path: page/title
#: C/hellognome.js.page:20
msgid "1. Hello, GNOME!"
msgstr "1. 안녕, 그놈!"

#. (itstool) path: synopsis/p
#: C/hellognome.js.page:22
msgid ""
"This tutorial will show you how to write your first GNOME application in "
"JavaScript. You will use JavaScript to write for GNOME the same way you "
"would for the web. Afterwards, you will learn how to use \"native\" widgets, "
"to write applications that look and feel like other GNOME apps."
msgstr ""
"이 지침서에서는 자바스크립으로 첫 그놈 프로그램을 작성하는 방법을 알려드립니"
"다. 웹 프로그램을 작성했던 것처럼 동일한 방식으로 그놈 프로그램 작성시 자바스"
"크립트언어를 활용합니다. 그 다음, 다른 그놈 앱 처럼 보이는 프로그램을 작성할 "
"목적으로 \"자체\" 위젯을 활용하는 방법을 알아보겠습니다."

#. (itstool) path: note/p
#: C/hellognome.js.page:23
msgid ""
"Have you gotten GNOME installed on your computer, and <link xref=\"set-up-"
"gedit.js\">gedit</link> set up to write code with? You'll want to do these "
"things first."
msgstr ""
"컴퓨터에 그놈을 설치하고 코드를 작성할 <link xref=\"set-up-gedit.js\">지에디"
"트</link>를 설정하셨죠? 우선 이 과정을 거쳐야합니다."

#. (itstool) path: section/title
#: C/hellognome.js.page:29
msgid "Let's start with a web page"
msgstr "웹 페이지로 시작하죠"

#. (itstool) path: section/p
#: C/hellognome.js.page:31
msgid ""
"Here's some basic HTML, CSS, and JavaScript code. Does this look familiar?"
msgstr ""
"HTML, CSS, JavaScript 기본 코드가 몇개 있습니다. 어디서 많이 본 것 같죠?"

#. (itstool) path: section/code
#: C/hellognome.js.page:32
#, no-wrap
msgid ""
"\n"
"&lt;!DOCTYPE html&gt;\n"
"&lt;html&gt;\n"
"    &lt;head&gt;\n"
"        &lt;title&gt;Hello, GNOME!&lt;/title&gt;\n"
"\n"
"        &lt;!-- Use JavaScript to show a greeting when someone clicks the button --&gt;\n"
"        &lt;script type=\"application/javascript\"&gt;\n"
"        function greeting () {\n"
"            document.getElementById (\"greeting\").innerHTML = (\"O hai!\");\n"
"        }\n"
"        &lt;/script&gt;\n"
"\n"
"        &lt;!-- Very basic CSS style using the GNOME font --&gt;\n"
"        &lt;style type=\"text/css\"&gt;\n"
"            body {\n"
"                font-face: Cantarell, sans-serif;\n"
"                text-align: center; }\n"
"        &lt;/style&gt;\n"
"\n"
"    &lt;/head&gt;\n"
"    &lt;body&gt;\n"
"        &lt;br /&gt; &lt;br /&gt;\n"
"        &lt;button type=\"button\" onclick=\"greeting()\"&gt;Hello, GNOME!&lt;/button&gt;\n"
"\n"
"        &lt;!-- Empty H1 element gets filled in when the button is clicked --&gt;\n"
"        &lt;h1 id=\"greeting\"&gt;&lt;/h1&gt;\n"
"    &lt;/body&gt;\n"
"&lt;/html&gt;\n"
msgstr ""
"\n"
"&lt;!DOCTYPE html&gt;\n"
"&lt;html&gt;\n"
"    &lt;head&gt;\n"
"        &lt;title&gt;Hello, GNOME!&lt;/title&gt;\n"
"\n"
"        &lt;!-- Use JavaScript to show a greeting when someone clicks the button --&gt;\n"
"        &lt;script type=\"application/javascript\"&gt;\n"
"        function greeting () {\n"
"            document.getElementById (\"greeting\").innerHTML = (\"O hai!\");\n"
"        }\n"
"        &lt;/script&gt;\n"
"\n"
"        &lt;!-- Very basic CSS style using the GNOME font --&gt;\n"
"        &lt;style type=\"text/css\"&gt;\n"
"            body {\n"
"                font-face: Cantarell, sans-serif;\n"
"                text-align: center; }\n"
"        &lt;/style&gt;\n"
"\n"
"    &lt;/head&gt;\n"
"    &lt;body&gt;\n"
"        &lt;br /&gt; &lt;br /&gt;\n"
"        &lt;button type=\"button\" onclick=\"greeting()\"&gt;Hello, GNOME!&lt;/button&gt;\n"
"\n"
"        &lt;!-- Empty H1 element gets filled in when the button is clicked --&gt;\n"
"        &lt;h1 id=\"greeting\"&gt;&lt;/h1&gt;\n"
"    &lt;/body&gt;\n"
"&lt;/html&gt;\n"

#. (itstool) path: section/p
#: C/hellognome.js.page:63
msgid ""
"Let's save this as <file>hellognome.html</file>, and see what it looks like "
"when we run it!"
msgstr ""
"이걸 <file>hellognome.html</file> 파일로 저장하고 실행했을 때 어떻게 나오는"
"지 살펴보도록 하죠!"

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/hellognome.js.page:65
msgctxt "_"
msgid ""
"external ref='media/hellognomewebapp.png' "
"md5='948efb6148ede3bc6b47b4b0bbe4a74f'"
msgstr ""

#. (itstool) path: section/p
#: C/hellognome.js.page:67
msgid ""
"You <em>can</em> run the above code by opening <file>hellognome.html</file> "
"in a web browser. But here, we're going to create a GNOME application that "
"runs our web app inside of it, just like you see in the screenshot. You'll "
"be able to resize and maximize the window, and click the X in the corner to "
"close it, just like you'd expect from any other GNOME app. The difference is "
"that this one will run our web code inside of it."
msgstr ""
"웹 브라우저에서 <file>hellognome.html</file> 파일을 열면 위 코드를 실행<em>"
"할 수 있습니다</em>. 하지만 스크린샷으로 보시듯이 웹 앱을 실행할 그놈 프로그"
"램을 만들려고 합니다. 창 크기를 조절하거나 최대로 확대할 수 있으며, 다른 그"
"놈 앱처럼 구석의 X를 눌러 닫을 수 있습니다. 차이점이 있다면 프로그램에서 왭 "
"코드를 실행한다는 점입니다."

#. (itstool) path: section/p
#: C/hellognome.js.page:68
msgid ""
"The best part? We're going to continue to use JavaScript, to write all the "
"parts that make our app work with GNOME. Let's look at the code, and see how "
"it's done!"
msgstr ""
"대부분은요? 그놈에서 동작하는 앱의 모든 부분을 작성할 때 JavaScript를 사용하"
"는 편으로 계속 진행하겠습니다. 코드를 보고 어떻게 돌아가는지 보도록 하죠!"

#. (itstool) path: section/title
#: C/hellognome.js.page:72
msgid "Creating a GNOME window to frame our web app"
msgstr "웹 앱에 맞출 그놈 창 만들기"

#. (itstool) path: section/p
#: C/hellognome.js.page:74
msgid ""
"First, we need to tell GNOME that this is a JavaScript application, which "
"uses gjs. Gjs is GNOME's way of turning your JavaScript code into "
"instructions it understands, so this line always has to go at the start of "
"your applications."
msgstr ""
"우선 그놈에게 gjs를 사용하는 JavaScript 프로그램임을 알려야 합니다. gjs는 "
"JavaScript 코드를 이해할 수 있는 기계 명령으로 바꾸는 그놈의 처리 수단입니"
"다. 따라서 프로그램 시작 부분에 항상 이 줄을 넣어야합니다."

#. (itstool) path: section/code
#: C/hellognome.js.page:75
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
msgstr ""
"\n"
"#!/usr/bin/gjs\n"

#. (itstool) path: section/p
#: C/hellognome.js.page:78
msgid "After that, we need to tell GNOME which libraries we want to import."
msgstr "그 다음 우리가 가져올 라이브러리를 그놈에게 알려야겠죠."

#. (itstool) path: section/code
#: C/hellognome.js.page:79
#, no-wrap
msgid ""
"\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"const Webkit = imports.gi.WebKit;\n"
msgstr ""
"\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"const Webkit = imports.gi.WebKit;\n"

#. (itstool) path: section/p
#: C/hellognome.js.page:85
msgid ""
"Just like how add-on libraries like jQuery let us do extra things with "
"JavaScript, each of these libraries gives us new capabilities for our GNOME "
"apps:"
msgstr ""
"jQuery가 JavaScript으로 할 수 있는 추가 행동을 우리에게 알려주도록 라이브러리"
"를 추가하는 방식처럼, 이 라이브러리는 그놈 앱에서 처리할 수 있는 새 기능을 제"
"공해줍니다:"

#. (itstool) path: item/p
#: C/hellognome.js.page:87
msgid ""
"<file>Gtk</file> and <file>Lang</file> are basic parts of any GNOME "
"application, which let you create windows and widgets and tie them together."
msgstr ""
"<file>Gtk</file>와 <file>Lang</file>은 그놈 프로그램의 기본적인 부분이며, 창"
"과 위젯을 만들어 한데 묶어둘 수 있습니다."

#. (itstool) path: item/p
#: C/hellognome.js.page:88
msgid ""
"<file>GLib</file> is a helper library, which lets us do things like tell "
"GNOME where the <file>hellognome.html</file> file we created is."
msgstr ""
"<file>GLib</file>는 우리가 만든 <file>hellognome.html</file> 파일에서 그놈에"
"서 처리할 수 있는 동작이 가능하게 하는 보조 라이브러리입니다."

#. (itstool) path: item/p
#: C/hellognome.js.page:89
msgid ""
"And <file>Webkit</file> is a web rendering engine, which we'll use to "
"basically create a browser window to open our HTML file with."
msgstr ""
"그리고 <file>Webkit</file>은 HTML 파일을 여는 브라우저 창을 만들 때 사용하는 "
"웹 렌더링 엔진입니다."

#. (itstool) path: section/p
#: C/hellognome.js.page:92
msgid "Now we create the application itself:"
msgstr "이제 프로그램 그 자체를 만들어보죠:"

#. (itstool) path: section/code
#: C/hellognome.js.page:93
#, no-wrap
msgid ""
"\n"
"const HelloGNOME = new Lang.Class ({\n"
"    Name: 'Hello GNOME',\n"
msgstr ""
"\n"
"const HelloGNOME = new Lang.Class ({\n"
"    Name: 'Hello GNOME',\n"
"이\n"

#. (itstool) path: section/p
#: C/hellognome.js.page:97
msgid ""
"This will look familiar to you if you've worked with object-oriented "
"JavaScript before. That's right; our whole application is a class called "
"HelloGNOME. And as you can see, we've given it a property that says what its "
"name is."
msgstr ""
"이 코드는 이전에 다루어 보았다면 객체 지향 자바스크립트와 비슷해보일겝니다. "
"맞습니다. 이 전체 프로그램은 HelloGNOME 클래스입니다. 그리고 보시는 바와 같"
"이 프로그램 이름을 지정하는 속성을 넣었습니다."

#. (itstool) path: section/code
#: C/hellognome.js.page:99
#, no-wrap
msgid ""
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/hellognome.js.page:119
msgid ""
"Here's some code you will more or less copy-and-paste for every JavaScript "
"application you build. It creates a new Application, and then binds its "
"activate and startup signals to functions that make the window show itself "
"and build its user interface, respectively."
msgstr ""
"여러분이 빌드한 모든 JavaScript 프로그램을 덜 또는 덜 복사하야 붙여넣을 코드 "
"일부입니다. 이 코드로 새 프로그램을 만들고, activate 시그널과 startup 시그널"
"을 함수에 바인딩하여 창을 나타내고 사용자 인터페이스를 구성합니다."

#. (itstool) path: section/p
#: C/hellognome.js.page:120
msgid ""
"What does that mean? Well, everything in a GNOME application sends out a "
"signal when something important happens. A button might send out the clicked "
"signal when you click on it, for instance. Our job is to connect the signals "
"to functions which handle them, and make the things that we want to have "
"happen occur. We do this using each object's connect method, which takes two "
"arguments: The signal we want to handle, and the Lang.bind function, which "
"we have to use to tell connect which function we want to have handle the "
"signal."
msgstr ""
"무슨 얘길까요? 그놈 프로그램의 모든 부분에서는 어떤 중요한 동작이 일어날 때 "
"시그널을 내보냅니다. 예컨대, 단추를 누르면 clicked 시그널을 내보냅니다. 우리"
"는 시그널을 처리할 함수와 연결하고 어떤 일을 벌일 코드를 만들겠습니다. 각각 "
"두 인자를 가진 객체의 연결 메서드를 활용하겠습니다. 우리가 처리하고자 하는 시"
"그널, 그리고 우리가 처리하고자 하는 시그널을 어떤 함수와 연결할 지 지시할 때 "
"사용하는 Lang.bind 함수를 인자로 전달합니다."

#. (itstool) path: section/p
#: C/hellognome.js.page:121
msgid ""
"In this case, we want _onActivate to handle the activate signal, and "
"_onStartup to handle the startup signal. _onActivate just tells the window "
"to present itself; so basically, whenever you <keyseq><key>Alt</key> "
"<key>Tab</key></keyseq> to the application it appears, like you would expect "
"it to. _onStartup calls _buildUI, which is the function that creates our "
"user interface and is the next part that we will look at."
msgstr ""
"이 경우 activate 시그널을 처리할 때 _onActivate 함수를, startup 시그널을 처리"
"할 때 _onStartup을 사용하겠습니다. _onActivate는 창 자체를 나타내러고 지시합"
"니다. 그래서 기본적으로는 <keyseq><key>Alt</key> <key>Tab</key></keyseq> 키"
"를 누를 때마다 예상하던 대로 프로그램이 나타납니다. _onStartup 함수에서 사용"
"자 인터페이스를 만들며 다음에  우리가 살펴볼 _buildUI를 호출합니다."

#. (itstool) path: note/p
#: C/hellognome.js.page:122
msgid ""
"When you copy and paste the above code for your own applications, be sure to "
"change the name to a unique one each time."
msgstr ""
"위 코드를 프로그램에 복사하여 붙여넣을 때마다 바꿀 이름이 유일한 이름인지 확"
"인하십시오."

#. (itstool) path: section/title
#: C/hellognome.js.page:126
msgid "Designing our window's UI"
msgstr "창 UI 디자인"

#. (itstool) path: section/p
#: C/hellognome.js.page:127
msgid ""
"In the _buildUI function, we're going to tell GNOME about our window and the "
"things inside it, one at a time. After that, we're going to connect "
"everything together and put it all on display."
msgstr ""
"_buildUI 함수에서 그놈에게 창과 창에 있는 내용을 한번에 하나씩 언급하고 있습"
"니다. 그 다음 개별 요소를 함께 연결하고 화면에 한번에 넣습니다."

#. (itstool) path: section/code
#: C/hellognome.js.page:129
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            window_position: Gtk.WindowPosition.CENTER });\n"
msgstr ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            window_position: Gtk.WindowPosition.CENTER });\n"

#. (itstool) path: section/p
#: C/hellognome.js.page:142
msgid ""
"The first object we create is an ApplicationWindow. It needs a title to go "
"in the title bar, and its application property needs to be the application "
"that we created, above. Beyond that, there are various ways of customizing "
"how it looks, which the <link xref=\"GtkApplicationWindow.js"
"\">ApplicationWindow</link> reference page will go into more detail about. "
"As you can see here, we gave it a default height and width (measured in "
"pixels), and told GNOME we want our window to appear in the center of the "
"screen."
msgstr ""
"우리가 만들 첫 객체는 ApplicationWindow입니다. 제목 표시줄에 들어갈 제목, 우"
"리가 위에서 만든 프로그램에 필요한 application 속성이 필요합니다. 모양새를 바"
"꾸는 방법에는 여러가지가 있지만 <link xref=\"GtkApplicationWindow.js"
"\">ApplicationWindow</link> 참고 페이지의 내용에서 자세한 내막을 설명해줍니"
"다. 여기서 보시듯, (픽셀 단위) 기본 너비, 높이 값을 설정하고 그놈에게 화면 한"
"가운데에 창을 나타내고 싶음을 지시합니다."

#. (itstool) path: section/code
#: C/hellognome.js.page:143
#, no-wrap
msgid ""
"\n"
"        // Create a webview to show the web app\n"
"        this._webView = new Webkit.WebView ();\n"
"\n"
"        // Put the web app into the webview\n"
"        this._webView.load_uri (GLib.filename_to_uri (GLib.get_current_dir() +\n"
"            \"/hellognome.html\", null));\n"
msgstr ""
"\n"
"        // Create a webview to show the web app\n"
"        this._webView = new Webkit.WebView ();\n"
"\n"
"        // Put the web app into the webview\n"
"        this._webView.load_uri (GLib.filename_to_uri (GLib.get_current_dir() +\n"
"            \"/hellognome.html\", null));\n"

#. (itstool) path: section/p
#: C/hellognome.js.page:151
msgid ""
"Remember how we imported Webkit right at the start? Here we're creating a "
"new instance of a Webkit class called a WebView, which is more or less a "
"browser window you can put inside of your app. After that, we then give it "
"the URI that we want it to load when the application starts up."
msgstr ""
"시작 부분에서 Webkit을 어떻게 가져왔는지 기억하시죠? 여기서는 앱을 안에다 넣"
"고 실행할 수 있는 더도 덜도 아닌 웹 브라우저, WebView라고 하는 Webkit 클래스"
"의 새 인스턴스를 만들겠습니다. 그 다음 프로그램을 시작할 때 우리가 불러올 URI"
"를 설정하겠습니다."

#. (itstool) path: section/p
#: C/hellognome.js.page:152
msgid ""
"We <em>could</em> just give it a web URI, like <link href=\"http://gnome.org"
"\">http://gnome.org</link>. Instead, here we use a couple of GLib helper "
"functions to tell the WebView where our <file>hellognome.html</file> file "
"is. GLib.get_current_dir returns the directory that our app's running in, "
"and GLib.filename_to_uri turns our file's path and filename into a URI that "
"the WebView's load_uri function understands. (filename_to_uri's second "
"parameter should be null unless you know what it's used for and have a "
"reason for changing it.)"
msgstr ""
"<link href=\"http://gnome.org\">http://gnome.org</link>와 같은 웹 URI를 그냥 "
"설정 <em>할 수 있습니다</em>. 대신 우리가 작성한 <file>hellognome.html</"
"file> 파일이 어디에 있는지 WebView에 알려줄 GLib 보조 함수 몇가지를 활용하겠"
"습니다. GLib.get_current_dir에서는 앱을 실행할 디렉터리를 반환하고 GLib."
"filename_to_uri에서는 WebView의 load_uri 함수가 이해할 수 있도록 파일의 경로"
"와 파일 이름을 URI 형식으로 반환합니다(filename_to_uri의 두번째 매개변수는 용"
"도와 값을 바꿔야 할 이유를 정확하게 알기 전까지는 null 값이어야 합니다)."

#. (itstool) path: section/code
#: C/hellognome.js.page:153
#, no-wrap
msgid ""
"\n"
"        // Put the webview into the window\n"
"        this._window.add (this._webView);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"});\n"
msgstr ""
"\n"
"        // Put the webview into the window\n"
"        this._window.add (this._webView);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/hellognome.js.page:163
msgid ""
"Each window can hold one, and only one, widget. Normally, we'd use a "
"container widget like a <link xref=\"grid.js\">Grid</link> to put multiple "
"widgets into, then use the window's add function to add the Grid to it. "
"Here, we just need the WebView, so that's all we add to the window. After "
"that, as the last part of the _buildUI function that creates our window, we "
"tell the window to show itself and its contents."
msgstr ""
"각 창은 하나 그리고 오직 하나의 위젯만을 소유할 수 있습니다. 보통 여러 위젯"
"을 넣을 때 <link xref=\"grid.js\">Grid</link>와 같은 컨테이너 위젯을 활용하"
"고 창의 추가 함수로 Grid 안에 넣습니다. 우리는 WebView만 필요하기 때문에, "
"WebView를 창에 넣기만 하면 됩니다. 그 다음 창을 만드는 _buildUI 함수의 마지"
"막 부분으로 창에게 자신과 창의 내용을 보여주도록 지시하겠습니다."

#. (itstool) path: section/code
#: C/hellognome.js.page:164
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new HelloGNOME ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Run the application\n"
"let app = new HelloGNOME ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/hellognome.js.page:169
msgid ""
"Finally, we create a new instance of our HelloGNOME class, and tell GNOME to "
"run it."
msgstr ""
"마지막으로 HelloGNOME 클래스의 새 인스턴스를 만들고 그놈에게 이 코드를 실행하"
"라고 지시하겠습니다."

#. (itstool) path: section/title
#: C/hellognome.js.page:173
msgid "Running your GNOME application"
msgstr "그놈 프로그램 실행"

#. (itstool) path: section/p
#: C/hellognome.js.page:175
msgid ""
"Now that we've created our first GNOME application, it's time to test it "
"out! You don't need to compile your app or install any special software for "
"this; GNOME has gjs built in, to let it run GNOME Shell. Just save "
"<file>hellognome.html</file> and our actual application, <file>hellognome."
"js</file>, to a directory you can get to with the terminal. (They usually "
"open onto your home directory, the one that's called by your username.) "
"After that, open a terminal, go there, and type:"
msgstr ""
"이제 우리는 첫 그놈 프로그램을 만들었으니 시험해볼 떄가 왔습니다. 만드신 프로"
"그램을 컴파일하거나 특별한 프로그램 마냥 설치할 필요가 없습니다. 그놈에는 그"
"놈 셸을 실행하게 하는 gjs를 자체적으로 보유하고 있습니다. 그냥 터미널 상에서 "
"접근할 수 있는 그 어떤 디렉터리에든 <file>hellognome.html</file> 파일과 실제 "
"프로그램 <file>hellognome.js</file>파일을 저장하십시오(보통 사용자 이름이 붙"
"은 '내 폴더'를 엽니다). 그 후 터미널을 열고 다음 명령을 입력하십시오:"

#. (itstool) path: section/screen
#: C/hellognome.js.page:176
#, no-wrap
msgid " <output style=\"prompt\">$ </output>gjs hellognome.js "
msgstr " <output style=\"prompt\">$ </output>gjs hellognome.js "

#. (itstool) path: section/p
#: C/hellognome.js.page:177
msgid ""
"You should see more or less the same screenshot as before, with a button "
"that you can click to make a short message appear."
msgstr ""
"앞서 보신바와 같이 간단한 메시지를 띄우는 단추가 나타나는, 더 혹은 덜 유사한 "
"화면을 볼 수 있어야합니다."

#. (itstool) path: note/p
#: C/hellognome.js.page:180
msgid "You can use the terminal command"
msgstr "터미널 명령을 사용핧 수 있습니다."

#. (itstool) path: note/screen
#: C/hellognome.js.page:181
#, no-wrap
msgid " <output style=\"prompt\">$ </output>cd <var>(directory name)</var> "
msgstr " <output style=\"prompt\">$ </output>cd <var>(디렉터리 이름)</var> "

#. (itstool) path: note/p
#: C/hellognome.js.page:182
msgid ""
"to navigate between directories inside the Terminal, in order to get to "
"where you saved the files. There is also an extension for Nautilus, GNOME's "
"file manager, which lets you right-click anywhere inside it to open a "
"terminal window right there. Check the app you use to install new software "
"(like Add/Remove Programs or the Software Center) for it."
msgstr ""
"터미널에서 저장한 파일이 어디에있는지 찾을 때 여러 디렉터리를 탐색하는 명령입"
"니다. 그놈 파일 관리자 노틸러스에는 파일 탐색 창 어디에서든 마우스 오른쪽 단"
"추를 누른 후 해당 위치에서 터미널을 여는 확장 기능도 있습니다. 새 프로그램을 "
"설치할 때 사용하는 앱(프로그램 추가/제거 또는 소프트웨어 센터)을 확인해보십시"
"오."

#. (itstool) path: section/p
#: C/hellognome.js.page:189
msgid ""
"<link xref=\"02_welcome_to_the_grid.js\">Continue on to the next tutorial</"
"link> to learn how to build \"native\" GNOME applications that look and feel "
"like the others, instead of a webview with HTML code inside. Or take a look "
"at some <link xref=\"beginner.js#samples\">code samples</link>, if you'd "
"like to see example code for each Gtk widget."
msgstr ""
"HTML 코드와 웹 뷰 코드 대신, 다른 프로그램 같이 \"자체\" 그놈 프로그램을 빌드"
"하는 방법을 알아보려면  <link xref=\"02_welcome_to_the_grid.js\">다음 따라하"
"기 지침서로 계속 진행하십시오</link>. 아니면 Gtk 위젯 예제 코드를 보고 싶으시"
"면 일부 <link xref=\"beginner.js#samples\">코드 예제</link>를 살펴보십시오."

#. (itstool) path: section/p
#: C/hellognome.js.page:190
msgid ""
"Finally, if you want to just build GNOME applications using JavaScript "
"libraries designed for the web, you can basically stop here and go do that! "
"Check out <link xref=\"beginner.js#tutorials\">the later tutorials</link> if "
"you'd like to see how to create a .desktop file for your application, which "
"will let it appear in your desktop's Activities menu with all your other "
"apps."
msgstr ""
"마지막으로 웹용으로 만든 JavaScript 라이브러리로 그놈 프로그램을 만들어보고 "
"싶다면, 그냥 여기서 멈추고 계속 진행하실 수 있습니다. 다른 앱처럼 데스크톱의 "
"현재 활동 메뉴에 프로그램이 나타나도록 .desktop 파일을 만드는 방법을 알아보려"
"면 <link xref=\"beginner.js#tutorials\">다음 따라하기 지침서</link>를 확인해"
"보십시오."

#. (itstool) path: section/code
#: C/hellognome.js.page:195
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"const Webkit = imports.gi.WebKit;\n"
"\n"
"const HelloGNOME = new Lang.Class ({\n"
"    Name: 'Hello GNOME',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            window_position: Gtk.WindowPosition.CENTER });\n"
"\n"
"        // Create a webview to show the web app\n"
"        this._webView = new Webkit.WebView ();\n"
"\n"
"        // Put the web app into the webview\n"
"        this._webView.load_uri (GLib.filename_to_uri (GLib.get_current_dir() +\n"
"            \"/hellognome.html\", null));\n"
"\n"
"        // Put the webview into the window\n"
"        this._window.add (this._webView);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new HelloGNOME ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"const Webkit = imports.gi.WebKit;\n"
"\n"
"const HelloGNOME = new Lang.Class ({\n"
"    Name: 'Hello GNOME',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ();\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            title: \"Welcome to GNOME\",\n"
"            default_height: 200,\n"
"            default_width: 400,\n"
"            window_position: Gtk.WindowPosition.CENTER });\n"
"\n"
"        // Create a webview to show the web app\n"
"        this._webView = new Webkit.WebView ();\n"
"\n"
"        // Put the web app into the webview\n"
"        this._webView.load_uri (GLib.filename_to_uri (GLib.get_current_dir() +\n"
"            \"/hellognome.html\", null));\n"
"\n"
"        // Put the webview into the window\n"
"        this._window.add (this._webView);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new HelloGNOME ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: info/title
#: C/hello-world.c.page:10
msgctxt "link"
msgid "Hello World (C)"
msgstr "Hello World (C)"

#. (itstool) path: credit/name
#: C/hello-world.c.page:24
msgid "Bastian Ilsø"
msgstr "Bastian Ilsø"

#. (itstool) path: info/desc
#: C/hello-world.c.page:28
msgid "Creating a small \"Hello, World\" application using GTK+."
msgstr "GTK+로 작은 \"Hello, World\" 프로그램을 만듭니다."

#. (itstool) path: page/title
#: C/hello-world.c.page:31
msgid "Hello world"
msgstr "Hello world"

#. (itstool) path: note/p
#: C/hello-world.c.page:34
msgid ""
"For a detailed walk-through of creating a GTK+ dialog in C, see <link href="
"\"https://developer.gnome.org/gtk3/stable/gtk-getting-started.html\">Getting "
"Started with GTK+</link>"
msgstr ""
"C 언어로 GTK+ 대화상자를 만드는 자세한 설명은 <link href=\"https://developer."
"gnome.org/gtk3/stable/gtk-getting-started.html\">GTK+ 시작하기</link>를 참고"
"하십시오"

#. (itstool) path: page/p
#: C/hello-world.c.page:38
msgid ""
"Writing a hello world GTK+ dialog in C can be done as seen in the code "
"sample below:"
msgstr ""
"C 언어로의 hello world GTK+ 대화 상자 프로그램 작성은, 아래 보여드리는 예제 "
"코드처럼 할 수 있습니다:"

#. (itstool) path: page/code
#: C/hello-world.c.page:39
#, no-wrap
msgid ""
"\n"
"    #include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication* app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  label = gtk_label_new (\"Hello GNOME!\");\n"
"  gtk_container_add (GTK_CONTAINER (window), label);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Welcome to GNOME\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 100);\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int    argc,\n"
"      char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (NULL, G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
"\n"
"  "
msgstr ""
"\n"
"    #include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication* app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  label = gtk_label_new (\"Hello GNOME!\");\n"
"  gtk_container_add (GTK_CONTAINER (window), label);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Welcome to GNOME\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 100);\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int    argc,\n"
"      char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (NULL, G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
"\n"
"  "

#. (itstool) path: page/p
#: C/hello-world.c.page:43
msgid ""
"GtkApplication initializes GTK+. It also connects the <gui>x</gui> button "
"that's automatically generated along with the window to the \"destroy\" "
"signal. We can start building our first window. We do this by creating a "
"variable called <var>window</var> and assigning it a "
"gtk_application_window_new. The window title can be any string you want it "
"to be. To be on the safe side, it's best to stick to UTF-8 encoding. The "
"code above will create a dialog window similar to what can be seen below:"
msgstr ""
"GtkApplication은 GTK+를 초기화합니다. 또한 창을 만들 때 자동으로 붙인 "
"<gui>x</gui> 단추를 \"destroy\" 시그널에 연결합니다. 첫 창 만들기를 시작할 "
"수 있습니다. <var>window</var> 변수를 만들고 gtk_application_window_new를 할"
"당하겠습니다. 제목은 원하는대로 지을 수 있습니다. 안전한 방편으로, UTF-8 인코"
"딩으로 작성하시는게 좋습니다. 위 코드는 아래와 같이 보이는 대화상자 창을 만듭"
"니다:"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/hello-world.c.page:51 C/hello-world.js.page:28 C/hello-world.py.page:28
#: C/hello-world.vala.page:28
msgctxt "_"
msgid ""
"external ref='media/hello-world.png' md5='4c88a27211dfd1b33e504c9f78602f2d'"
msgstr ""

#. (itstool) path: info/title
#: C/hello-world.js.page:9
msgctxt "text"
msgid "Hello World (JavaScript)"
msgstr "Hello World (JavaScript)"

#. (itstool) path: info/desc
#: C/hello-world.js.page:24 C/hello-world.py.page:24 C/hello-world.vala.page:24
msgid "A basic \"hello, world\" application"
msgstr "기본 \"hello, world\" 프로그램"

#. (itstool) path: page/title
#: C/hello-world.js.page:27 C/hello-world.py.page:27 C/hello-world.vala.page:27
msgid ""
"How to build, install and create a <file>tar.xz</file> of a Hello World "
"program"
msgstr ""
"Hello World 프로그램의 <file>tar.xz</file> 파일을 빌드하고, 설치하고, 만들기"

#. (itstool) path: synopsis/p
#: C/hello-world.js.page:30 C/hello-world.py.page:30 C/hello-world.vala.page:30
msgid "This tutorial will demonstrate how to:"
msgstr "이 지침서에서는 다음 방법을 보여줍니다:"

#. (itstool) path: item/p
#: C/hello-world.js.page:32
msgid "create a small \"Hello, World\" application using JavaScript and GTK+"
msgstr "JavaScript와 GTK+로 작은 \"Hello, World\" 프로그램 만들기"

#. (itstool) path: item/p
#: C/hello-world.js.page:33 C/hello-world.py.page:33 C/hello-world.vala.page:33
msgid "make the <file>.desktop</file> file"
msgstr "<file>.desktop</file> 파일 만들기"

#. (itstool) path: item/p
#: C/hello-world.js.page:34 C/hello-world.py.page:34 C/hello-world.vala.page:34
msgid "how to set up the build system"
msgstr "빌드 시스템 구성 방법"

#. (itstool) path: section/title
#: C/hello-world.js.page:42 C/hello-world.py.page:42 C/hello-world.vala.page:40
msgid "Create the program"
msgstr "프로그램 만들기"

#. (itstool) path: section/p
#: C/hello-world.js.page:47
msgid "This needs to be the first line of your script:"
msgstr "스크립트의 첫줄에 다음 줄이 들어가있어야합니다:"

#. (itstool) path: section/code
#: C/hello-world.js.page:48
#, no-wrap
msgid "#!/usr/bin/gjs"
msgstr "#!/usr/bin/gjs"

#. (itstool) path: section/p
#: C/hello-world.js.page:49
msgid ""
"It tells the script to use <link href=\"https://live.gnome.org/Gjs/\">Gjs</"
"link>. Gjs is a JavaScript binding for GNOME."
msgstr ""
"이 부분은 스크립트에서 <link href=\"https://live.gnome.org/Gjs/\">Gjs</link>"
"를 활용하겠다고 알려줍니다. gjs는 그놈용 자바스크립트 바인딩입니다."

#. (itstool) path: section/code
#: C/hello-world.js.page:54
#, no-wrap
msgid ""
"const Lang = imports.lang;\n"
"const Gtk = imports.gi.Gtk;"
msgstr ""
"const Lang = imports.lang;\n"
"const Gtk = imports.gi.Gtk;"

#. (itstool) path: section/p
#: C/hello-world.js.page:56 C/hello-world.py.page:49
msgid ""
"In order for our script to work with GNOME, we need to import GNOME "
"libraries via GObject Introspection. Here we import the language bindings "
"and GTK+, the library which contains the graphical widgets used to make "
"GNOME applications."
msgstr ""
"우리가 작성한 스크립트가 그놈에서 동작하게 하려면, 그놈 라이브러리를 GObject "
"인트로스펙션으로 가져와야합니다. 여기서 우리는 언어 바인딩과 그놈 프로그램을 "
"만들 때 그래픽 위젯이 들어있는 GTK+ 라이브러리를 임포팅합니다."

#. (itstool) path: section/code
#: C/hello-world.js.page:60
#, no-wrap
msgid ""
"const Application = new Lang.Class({\n"
"    //A Class requires an explicit Name parameter. This is the Class Name.\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"       //connect to 'activate' and 'startup' signals to handlers.\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   title: \"Hello World!\" });\n"
"    },\n"
"\n"
"    //handler for 'activate' signal\n"
"    _onActivate: function() {\n"
"        //show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    //handler for 'startup' signal\n"
"    _onStartup: function() {\n"
"        this._buildUI();\n"
"    }\n"
"});\n"
msgstr ""
"const Application = new Lang.Class({\n"
"    //A Class requires an explicit Name parameter. This is the Class Name.\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"       //connect to 'activate' and 'startup' signals to handlers.\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   title: \"Hello World!\" });\n"
"    },\n"
"\n"
"    //handler for 'activate' signal\n"
"    _onActivate: function() {\n"
"        //show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    //handler for 'startup' signal\n"
"    _onStartup: function() {\n"
"        this._buildUI();\n"
"    }\n"
"});\n"

#. (itstool) path: section/p
#: C/hello-world.js.page:92
msgid ""
"GtkApplication initializes GTK+. It also connects the <gui>x</gui> button "
"that's automatically generated along with the window to the \"destroy\" "
"signal."
msgstr ""
"GtkApplication은 GTK+를 초기화합니다. 또한 창을 만들 때 자동으로 붙인 "
"<gui>x</gui> 단추를 \"destroy\" 시그널에 연결합니다."

#. (itstool) path: section/p
#: C/hello-world.js.page:93
msgid ""
"We can start building our first window. We do this by creating a variable "
"called <var>_window</var> and assigning it a new Gtk.ApplicationWindow."
msgstr ""
"첫 창 만들기로 시작하겠습니다. <var>_window</var> 변수를 만들고 Gtk."
"ApplicationWindow 새 객체를 할당하겠습니다."

#. (itstool) path: section/p
#: C/hello-world.js.page:94 C/hello-world.py.page:73
msgid ""
"We give the window a property called <var>title</var>. The title can be any "
"string you want it to be. To be on the safe side, it's best to stick to "
"UTF-8 encoding."
msgstr ""
"창에 <var>title</var> 속성을 설정해야합니다. 제목은 원하는대로 지을 수 있습니"
"다. 안전한 방편으로, UTF-8 인코딩으로 작성하시는게 좋습니다."

#. (itstool) path: section/p
#: C/hello-world.js.page:95 C/hello-world.py.page:74 C/hello-world.vala.page:57
msgid ""
"Now we have a window which has a title and a working \"close\" button. Let's "
"add the actual \"Hello World\" text."
msgstr ""
"이제 제목과 동작하는 \"닫기\" 단추가 붙은 창을 만들었습니다. 이제 실제 "
"\"Hello World\" 문구를 찍어보겠습니다."

#. (itstool) path: section/title
#: C/hello-world.js.page:98 C/hello-world.py.page:77 C/hello-world.vala.page:60
msgid "Label for the window"
msgstr "창 레이블"

#. (itstool) path: section/code
#: C/hello-world.js.page:99
#, no-wrap
msgid ""
"// Add a label widget to your window\n"
"this.label = new Gtk.Label({ label: \"Hello World\" });\n"
"this._window.add(this.label);\n"
"this._window.set_default_size(200, 200);"
msgstr ""
"// Add a label widget to your window\n"
"this.label = new Gtk.Label({ label: \"Hello World\" });\n"
"this._window.add(this.label);\n"
"this._window.set_default_size(200, 200);"

#. (itstool) path: section/p
#: C/hello-world.js.page:104
msgid ""
"A text label is one of the GTK+ widgets we can use, on account of having "
"imported the GTK+ library. To use it, we create a new variable called label, "
"and assign it a new Gtk.Label. Then we give it properties inside the curly "
"braces {}. In this case, we're setting the text that the label will hold. "
"Finally, we create and run the application:"
msgstr ""
"텍스트 레이블은 GTK+ 라이브러리에서 가져와서 사용할 수 있는 GTK+ 위젯 중 하나"
"입니다. 텍스트 레이블을 사용하려면 레이블이라는 새 변수를 만들고 새 Gtk.Label"
"을 할당합니다. 그 다음 {} 중괄호에 속성 값을 넣습니다. 지금 같은 경우, 레이"
"블 값을 유지할 문장을 설정합니다. 마지막으로 프로그램을 만들고 실행하겠습니"
"다:"

#. (itstool) path: section/code
#: C/hello-world.js.page:106
#, no-wrap
msgid ""
"//run the application\n"
"let app = new Application();\n"
"app.application.run(ARGV);"
msgstr ""
"//run the application\n"
"let app = new Application();\n"
"app.application.run(ARGV);"

#. (itstool) path: section/p
#: C/hello-world.js.page:110 C/hello-world.py.page:97
#: C/hello-world.vala.page:71
msgid ""
"Gtk.ApplicationWindow can only hold one widget at a time. To construct more "
"elaborate programs you need to create a holder widget like Gtk.Grid inside "
"the window, and then add all the other widgets to it."
msgstr ""
"Gtk.ApplicationWindow는 한번에 위젯 하나만 가질 수 있습니다. 프로그램을 더 정"
"교하게 만들려면 Gtk.Grid 같은 홀더 위젯을 창 안에 만들어 넣고 그 안에 위젯을 "
"추가해야합니다."

#. (itstool) path: section/title
#: C/hello-world.js.page:114
msgid "hello-world.js"
msgstr "hello-world.js"

#. (itstool) path: section/p
#: C/hello-world.js.page:115 C/hello-world.py.page:102
#: C/hello-world.vala.page:76
msgid "The complete file:"
msgstr "완전한 파일 내용:"

#. (itstool) path: section/code
#: C/hello-world.js.page:116
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Lang = imports.lang;\n"
"const Gtk = imports.gi.Gtk;\n"
"\n"
"const Application = new Lang.Class({\n"
"    //A Class requires an explicit Name parameter. This is the Class Name.\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"       //connect to 'activate' and 'startup' signals to handlers.\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   title: \"Hello World!\" });\n"
"        this._window.set_default_size(200, 200);\n"
"        this.label = new Gtk.Label({ label: \"Hello World\" });\n"
"        this._window.add(this.label);\n"
"    },\n"
"\n"
"    //handler for 'activate' signal\n"
"    _onActivate: function() {\n"
"        //show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    //handler for 'startup' signal\n"
"    _onStartup: function() {\n"
"        this._buildUI();\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application();\n"
"app.application.run(ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Lang = imports.lang;\n"
"const Gtk = imports.gi.Gtk;\n"
"\n"
"const Application = new Lang.Class({\n"
"    //A Class requires an explicit Name parameter. This is the Class Name.\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application();\n"
"\n"
"       //connect to 'activate' and 'startup' signals to handlers.\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   title: \"Hello World!\" });\n"
"        this._window.set_default_size(200, 200);\n"
"        this.label = new Gtk.Label({ label: \"Hello World\" });\n"
"        this._window.add(this.label);\n"
"    },\n"
"\n"
"    //handler for 'activate' signal\n"
"    _onActivate: function() {\n"
"        //show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    //handler for 'startup' signal\n"
"    _onStartup: function() {\n"
"        this._buildUI();\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application();\n"
"app.application.run(ARGV);\n"

#. (itstool) path: section/title
#: C/hello-world.js.page:119 C/hello-world.py.page:106
#: C/hello-world.vala.page:80
msgid "Running the application from terminal"
msgstr "터미널에서 프로그램 실행"

#. (itstool) path: section/p
#: C/hello-world.js.page:120
msgid ""
"To run this application, first save it as hello-world.js. Then open "
"Terminal, go to the folder where your application is stored and run:"
msgstr ""
"이 프로그램을 실행하려면 우선 hello-world.js 파일 이름으로 저장하십시오. 그 "
"다음 터미널을 열고 프로그램을 저장한 폴더로 이동한 다음 실행하십시오:"

#. (itstool) path: section/screen
#: C/hello-world.js.page:121
#, no-wrap
msgid "<output style=\"prompt\">$ </output><input>gjs hello-world.js</input>"
msgstr "<output style=\"prompt\">$ </output><input>gjs hello-world.js</input>"

#. (itstool) path: section/title
#: C/hello-world.js.page:127 C/hello-world.py.page:112
#: C/hello-world.vala.page:89
msgid "The <file>.desktop.in</file> file"
msgstr "<file>.desktop.in</file> 파일"

#. (itstool) path: section/p
#: C/hello-world.js.page:128 C/hello-world.py.page:113
#: C/hello-world.vala.page:90
msgid ""
"Running applications from the Terminal is useful at the beginning of the "
"application making process. To have fully working <link href=\"https://"
"developer.gnome.org/integration-guide/stable/mime.html.en\">application "
"integration</link> in GNOME 3 requires a desktop launcher. For this you need "
"to create a <file>.desktop</file> file. The <file>.desktop</file> file "
"describes the application name, the used icon and various integration bits. "
"A deeper insight into the <file>.desktop</file> file can be found <link href="
"\"http://developer.gnome.org/desktop-entry-spec/\">here</link>. The <file>."
"desktop.in</file> file will create the <file>.desktop</file>."
msgstr ""
"터미널에서의 프로그램 실행은 프로그램을 처음 만드는 단계에서 상당히 유용합니"
"다. 그놈 3에서 완벽하게 <link href=\"https://developer.gnome.org/integration-"
"guide/stable/mime.html.en\">프로그램 통합</link>하여 동작할 수 있게 하려면 데"
"스크톱 실행 아이콘이 필요합니다. 이 아이콘을 만들려면 <file>.desktop</file> "
"파일을 만들어야합니다.  파일은 프로그램 이름, 사용 아이콘, 다양한 통합 부분"
"을 서술합니다. <file>.desktop</file> 파일에 대한 더 자세한 관점은 <link href="
"\"http://developer.gnome.org/desktop-entry-spec/\">여기</link>에 있습니다. "
"<file>.desktop.in</file> 파일로 <file>.desktop</file> 파일을 만듭니다."

#. (itstool) path: note/p
#: C/hello-world.js.page:131
msgid ""
"Before continuing, resave <file>hello-world.js</file> as <file>hello-world</"
"file>. Then run this in the command line:"
msgstr ""
"계속하기 전에 <file>hello-world.js</file> 파일을 <file>hello-world</file>로 "
"다시 저장하십시오. 그 다음 명령줄에서 다음 명령을 실행하십시오:"

#. (itstool) path: note/screen
#: C/hello-world.js.page:132
#, no-wrap
msgid "<output style=\"prompt\">$ </output><input>chmod +x hello-world</input>"
msgstr "<output style=\"prompt\">$ </output><input>chmod +x hello-world</input>"

#. (itstool) path: section/p
#: C/hello-world.js.page:135 C/hello-world.py.page:115
#: C/hello-world.vala.page:92
msgid ""
"The example shows you the minimum requirements for a <code>.desktop.in</"
"code> file."
msgstr ""
"예제에서는 <code>.desktop.in</code> 파일에서 최소한 필요한 내용을 보여줍니다."

#. (itstool) path: section/code
#: C/hello-world.js.page:136 C/hello-world.py.page:116
#: C/hello-world.vala.page:93
#, no-wrap
msgid ""
"[Desktop Entry]\n"
"Version=1.0\n"
"Encoding=UTF-8\n"
"Name=Hello World\n"
"Comment=Say Hello\n"
"Exec=@prefix@/bin/hello-world\n"
"Icon=application-default-icon\n"
"Terminal=false\n"
"Type=Application\n"
"StartupNotify=true\n"
"Categories=GNOME;GTK;Utility;\n"
msgstr ""
"[Desktop Entry]\n"
"Version=1.0\n"
"Encoding=UTF-8\n"
"Name=Hello World\n"
"Comment=Say Hello\n"
"Exec=@prefix@/bin/hello-world\n"
"Icon=application-default-icon\n"
"Terminal=false\n"
"Type=Application\n"
"StartupNotify=true\n"
"Categories=GNOME;GTK;Utility;\n"

#. (itstool) path: section/p
#: C/hello-world.js.page:138 C/hello-world.py.page:118
#: C/hello-world.vala.page:95
msgid "Now let's go through some parts of the <code>.desktop.in</code> file."
msgstr "이제 <code>.desktop.in</code> 파일 부분으로 들어가보겠습니다."

#. (itstool) path: item/title
#. (itstool) path: td/p
#: C/hello-world.js.page:140 C/hello-world.py.page:120
#: C/hello-world.vala.page:97 C/toolbar_builder.py.page:95
#: C/toolbar_builder.vala.page:78
msgid "Name"
msgstr "Name"

#. (itstool) path: item/p
#: C/hello-world.js.page:140 C/hello-world.py.page:120
#: C/hello-world.vala.page:97
msgid "The application name."
msgstr "프로그램 이름입니다."

#. (itstool) path: item/title
#: C/hello-world.js.page:141 C/hello-world.py.page:121
#: C/hello-world.vala.page:98
msgid "Comment"
msgstr "Comment"

#. (itstool) path: item/p
#: C/hello-world.js.page:141 C/hello-world.py.page:121
#: C/hello-world.vala.page:98
msgid "A short description of the application."
msgstr "프로그램의 간단한 설명입니다."

#. (itstool) path: item/title
#: C/hello-world.js.page:142 C/hello-world.py.page:122
#: C/hello-world.vala.page:99
msgid "Exec"
msgstr "Exec"

#. (itstool) path: item/p
#: C/hello-world.js.page:142 C/hello-world.py.page:122
#: C/hello-world.vala.page:99
msgid ""
"Specifies a command to execute when you choose the application from the "
"menu. In this example exec just tells where to find the <file>hello-world</"
"file> file and the file takes care of the rest."
msgstr ""
"메뉴에서 프로그램을 선택했을 때 실행할 명령을 지정합니다. 이 예제에서는 "
"<file>hello-world</file> 파일을 어디서 찾는지 알려주며 파일을 다루는 방식은 "
"나머지 부분에서 다룹니다."

#. (itstool) path: item/title
#: C/hello-world.js.page:143 C/hello-world.py.page:123
#: C/hello-world.vala.page:100
msgid "Terminal"
msgstr "Terminal"

#. (itstool) path: item/p
#: C/hello-world.js.page:143 C/hello-world.py.page:123
#: C/hello-world.vala.page:100
msgid ""
"Specifies whether the command in the Exec key runs in a terminal window."
msgstr "Exec 키의 명령을 터미널 창에서 실행할 지 여부를 지정합니다."

#. (itstool) path: section/p
#: C/hello-world.js.page:146 C/hello-world.py.page:126
#: C/hello-world.vala.page:103
msgid ""
"To put your application into the appropriate category, you need to add the "
"necessary categories to the Categories line. More information on the "
"different categories can be found in the <link href=\"http://standards."
"freedesktop.org/menu-spec/latest/apa.html\">menu specification</link>."
msgstr ""
"프로그램을 적당한 분류에 넣으려면 Categories 줄에 필요한 분류 이름을 추가해야"
"합니다. 다른 분류에 대한 자세한 정보는 <link href=\"http://standards."
"freedesktop.org/menu-spec/latest/apa.html\">메뉴 명세</link>에 있습니다."

#. (itstool) path: section/p
#: C/hello-world.js.page:147 C/hello-world.py.page:127
#: C/hello-world.vala.page:104
msgid ""
"In this example we use an existing icon. For a custom icon you need to have "
"a .svg file of your icon, stored in <file>/usr/share/icons/hicolor/scalable/"
"apps</file>. Write the name of your icon file to the .desktop.in file, on "
"line 7. More information on icons in: <link href=\"https://live.gnome.org/"
"GnomeGoals/AppIcon\">Installing Icons for Themes</link> and <link href="
"\"http://freedesktop.org/wiki/Specifications/icon-theme-spec\">on "
"freedesktop.org: Specifications/icon-theme-spec</link>."
msgstr ""
"이 예제에서는 이미 있는 아이콘을 사용하겠습니다. 개별 아이콘을 사용하려면 "
"<file>/usr/share/icons/hicolor/scalable/apps</file> 경로에 저장한 svg 아이콘 "
"파일이 필요합니다. 아이콘 파일 이름을 .desktop.in file 파일 7번째 줄에 적어 "
"넣으십시오. 더 자세한 아이콘 정보는 <link href=\"https://live.gnome.org/"
"GnomeGoals/AppIcon\">테마 아이콘 설치</link>와 <link href=\"http://"
"freedesktop.org/wiki/Specifications/icon-theme-spec\">on freedesktop.org: "
"Specifications/icon-theme-spec</link>에 있습니다."

#. (itstool) path: section/title
#: C/hello-world.js.page:150 C/hello-world.py.page:130
#: C/hello-world.vala.page:107
msgid "The build system"
msgstr "빌드 시스템"

#. (itstool) path: section/p
#: C/hello-world.js.page:151 C/hello-world.py.page:131
#: C/hello-world.vala.page:108
msgid ""
"To make your application truly a part of the GNOME 3 system you need to "
"install it with the help of autotools. The autotools build will install all "
"the necessary files to all the right places."
msgstr ""
"그놈 3의 일부 프로그램을 만들려면 autotools의 도움을 받아 설치해야합니다. "
"autotools 빌드는 필요한 모든 파일을 모든 올바른 경로에 설치합니다."

#. (itstool) path: section/p
#: C/hello-world.js.page:152 C/hello-world.py.page:132
#: C/hello-world.vala.page:109
msgid "For this you need to have the following files:"
msgstr "진행하려면 다음 파일이 필요합니다:"

#. (itstool) path: section/title
#. (itstool) path: item/p
#. (itstool) path: section/p
#: C/hello-world.js.page:155 C/hello-world.py.page:135
#: C/hello-world.vala.page:112 C/weatherAutotools.js.page:40
#: C/weatherAutotools.js.page:138
msgid "autogen.sh"
msgstr "autogen.sh"

#. (itstool) path: section/code
#: C/hello-world.js.page:156 C/hello-world.py.page:136
#: C/hello-world.vala.page:113
#, no-wrap
msgid ""
"#!/bin/sh\n"
"\n"
"set -e\n"
"\n"
"test -n \"$srcdir\" || srcdir=`dirname \"$0\"`\n"
"test -n \"$srcdir\" || srcdir=.\n"
"\n"
"olddir=`pwd`\n"
"cd \"$srcdir\"\n"
"\n"
"# This will run autoconf, automake, etc. for us\n"
"autoreconf --force --install\n"
"\n"
"cd \"$olddir\"\n"
"\n"
"if test -z \"$NOCONFIGURE\"; then\n"
"  \"$srcdir\"/configure \"$@\"\n"
"fi\n"
msgstr ""
"#!/bin/sh\n"
"\n"
"set -e\n"
"\n"
"test -n \"$srcdir\" || srcdir=`dirname \"$0\"`\n"
"test -n \"$srcdir\" || srcdir=.\n"
"\n"
"olddir=`pwd`\n"
"cd \"$srcdir\"\n"
"\n"
"# This will run autoconf, automake, etc. for us\n"
"autoreconf --force --install\n"
"\n"
"cd \"$olddir\"\n"
"\n"
"if test -z \"$NOCONFIGURE\"; then\n"
"  \"$srcdir\"/configure \"$@\"\n"
"fi\n"

#. (itstool) path: section/p
#: C/hello-world.js.page:158 C/hello-world.py.page:138
#: C/hello-world.vala.page:115
msgid "After the <file>autogen.sh</file> file is ready and saved, run:"
msgstr ""
"<file>autogen.sh</file> 파일을 준비했고 저장하고 나면, 다음을 실행하십시오:"

#. (itstool) path: section/screen
#: C/hello-world.js.page:159 C/hello-world.py.page:139
#: C/hello-world.vala.page:116
#, no-wrap
msgid "<output style=\"prompt\">$ </output><input>chmod +x autogen.sh</input>"
msgstr "<output style=\"prompt\">$ </output><input>chmod +x autogen.sh</input>"

#. (itstool) path: section/title
#. (itstool) path: item/p
#. (itstool) path: section/p
#: C/hello-world.js.page:163 C/hello-world.py.page:143
#: C/hello-world.vala.page:120 C/weatherAutotools.js.page:38
#: C/weatherAutotools.js.page:64
msgid "Makefile.am"
msgstr "Makefile.am"

#. (itstool) path: section/code
#: C/hello-world.js.page:164
#, no-wrap
msgid ""
"# The actual runnable program is set to the SCRIPTS primitive.\n"
"# # Prefix bin_ tells where to copy this\n"
"bin_SCRIPTS = hello-world\n"
"# # List of files to be distributed\n"
"EXTRA_DIST =  \\\n"
"\t$(bin_SCRIPTS)\n"
"#\n"
"#     # The desktop files\n"
"desktopdir = $(datadir)/applications\n"
"desktop_DATA = \\\n"
"\thello-world.desktop\n"
msgstr ""
"# The actual runnable program is set to the SCRIPTS primitive.\n"
"# # Prefix bin_ tells where to copy this\n"
"bin_SCRIPTS = hello-world\n"
"# # List of files to be distributed\n"
"EXTRA_DIST =  \\\n"
"\t$(bin_SCRIPTS)\n"
"#\n"
"#     # The desktop files\n"
"desktopdir = $(datadir)/applications\n"
"desktop_DATA = \\\n"
"\thello-world.desktop\n"

#. (itstool) path: section/title
#. (itstool) path: item/p
#. (itstool) path: section/p
#: C/hello-world.js.page:168 C/hello-world.py.page:148
#: C/hello-world.vala.page:125 C/weatherAutotools.js.page:39
#: C/weatherAutotools.js.page:131
msgid "configure.ac"
msgstr "configure.ac"

#. (itstool) path: section/code
#: C/hello-world.js.page:169 C/hello-world.py.page:149
#, no-wrap
msgid ""
"# This file is processed by autoconf to create a configure script\n"
"AC_INIT([Hello World], 1.0)\n"
"AM_INIT_AUTOMAKE([1.10 no-define foreign dist-xz no-dist-gzip])\n"
"AC_CONFIG_FILES([Makefile hello-world.desktop])\n"
"AC_OUTPUT\n"
msgstr ""
"# This file is processed by autoconf to create a configure script\n"
"AC_INIT([Hello World], 1.0)\n"
"AM_INIT_AUTOMAKE([1.10 no-define foreign dist-xz no-dist-gzip])\n"
"AC_CONFIG_FILES([Makefile hello-world.desktop])\n"
"AC_OUTPUT\n"

#. (itstool) path: section/title
#: C/hello-world.js.page:173 C/hello-world.py.page:153
#: C/hello-world.vala.page:130
msgid "README"
msgstr "README"

#. (itstool) path: section/p
#: C/hello-world.js.page:174 C/hello-world.py.page:154
#: C/hello-world.vala.page:131
msgid "Information users should read first. This file can be blank."
msgstr "사용자가 우선 읽어야 할 내용입니다. 이 파일은 비워둘 수 있습니다."

#. (itstool) path: section/p
#: C/hello-world.js.page:176 C/hello-world.py.page:156
msgid ""
"When you have the <file>hello-world</file>, <file>hello-world.desktop.in</"
"file>, <file>Makefile.am</file>, <file>configure.ac</file> and <file>autogen."
"sh</file> files with correct information and rights, the <file>README</file> "
"file can include the following instructions:"
msgstr ""
"올바른 내용을 넣고 권한을 설정한 <file>hello-world</file>, <file>hello-world."
"desktop.in</file>, <file>Makefile.am</file>, <file>configure.ac</file>, "
"<file>autogen.sh</file> 파일을 갖췄다면, <file>README</file> 파일에 다음 내용"
"을 넣을 수 있습니다:"

# 전 세계 사람이 볼 README 파일이므로 굳이 번역하지 않아도 된다. 역자 주.
#. (itstool) path: section/code
#: C/hello-world.js.page:177 C/hello-world.py.page:157
#, no-wrap
msgid ""
"To build and install this program:\n"
"\n"
"./autogen.sh --prefix=/home/your_username/.local\n"
"make install\n"
"\n"
"-------------\n"
"Running the first line above creates the following files:\n"
"\n"
"aclocal.m4\n"
"autom4te.cache\n"
"config.log\n"
"config.status\n"
"configure\n"
"hello-world.desktop\n"
"install-sh\n"
"missing\n"
"Makefile.in\n"
"Makefile\n"
"\n"
"Running \"make install\", installs the application in /home/your_username/.local/bin\n"
"and installs the hello-world.desktop file in /home/your_username/.local/share/applications\n"
"\n"
"You can now run the application by typing \"Hello World\" in the Overview.\n"
"\n"
"----------------\n"
"To uninstall, type:\n"
"\n"
"make uninstall\n"
"\n"
"----------------\n"
"To create a tarball type:\n"
"\n"
"make distcheck\n"
"\n"
"This will create hello-world-1.0.tar.xz\n"
msgstr ""
"To build and install this program:\n"
"\n"
"./autogen.sh --prefix=/home/your_username/.local\n"
"make install\n"
"\n"
"-------------\n"
"Running the first line above creates the following files:\n"
"\n"
"aclocal.m4\n"
"autom4te.cache\n"
"config.log\n"
"config.status\n"
"configure\n"
"hello-world.desktop\n"
"install-sh\n"
"missing\n"
"Makefile.in\n"
"Makefile\n"
"\n"
"Running \"make install\", installs the application in /home/your_username/.local/bin\n"
"and installs the hello-world.desktop file in /home/your_username/.local/share/applications\n"
"\n"
"You can now run the application by typing \"Hello World\" in the Overview.\n"
"\n"
"----------------\n"
"To uninstall, type:\n"
"\n"
"make uninstall\n"
"\n"
"----------------\n"
"To create a tarball type:\n"
"\n"
"make distcheck\n"
"\n"
"This will create hello-world-1.0.tar.xz\n"

#. (itstool) path: info/title
#: C/hello-world.py.page:9
msgctxt "text"
msgid "Hello World (Python)"
msgstr "Hello World(Python)"

#. (itstool) path: item/p
#: C/hello-world.py.page:32
msgid "create a small \"Hello, World\" application using Python and GTK+"
msgstr "파이썬과 GTK+를 사용한 작은 \"Hello, World\" 프로그램을 만듭니다"

#. (itstool) path: section/code
#: C/hello-world.py.page:47
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys"
msgstr ""
"from gi.repository import Gtk\n"
"import sys"

#. (itstool) path: section/code
#: C/hello-world.py.page:53
#, no-wrap
msgid ""
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    # constructor for a Gtk.ApplicationWindow\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Hello World!\", application=app)\n"
"        self.set_default_size(200, 100)\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)"
msgstr ""
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    # constructor for a Gtk.ApplicationWindow\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Hello World!\", application=app)\n"
"        self.set_default_size(200, 100)\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)"

#. (itstool) path: section/p
#: C/hello-world.py.page:71 C/hello-world.vala.page:54
msgid ""
"Gtk.Application initializes GTK+. It also connects the <gui>x</gui> button "
"that's automatically generated along with the window to the \"destroy\" "
"signal."
msgstr ""
"Gtk.Application은 GTK+를 초기화합니다. 또한 창을 만들 때 자동으로 붙인 "
"<gui>x</gui> 단추를 \"destroy\" 시그널에 연결합니다."

#. (itstool) path: section/p
#: C/hello-world.py.page:72
msgid ""
"We can start building our first window. We do this by creating a class "
"called <var>MyWindow</var> and assigning it a Gtk.ApplicationWindow."
msgstr ""
"첫 창 만들기를 시작할 수 있습니다. <var>MyWindow</var> 클래스를 만들고 Gtk."
"ApplicationWindow를 할당하겠습니다."

#. (itstool) path: section/code
#: C/hello-world.py.page:78
#, no-wrap
msgid ""
"# Add a label widget to your window\n"
"\n"
"        # create a label\n"
"        label = Gtk.Label()\n"
"\n"
"        # set the text of the label\n"
"        label.set_text(\"Hello GNOME!\")\n"
"\n"
"        # add the label to the window\n"
"        self.add(label)"
msgstr ""
"# Add a label widget to your window\n"
"\n"
"        # create a label\n"
"        label = Gtk.Label()\n"
"\n"
"        # set the text of the label\n"
"        label.set_text(\"Hello GNOME!\")\n"
"\n"
"        # add the label to the window\n"
"        self.add(label)"

#. (itstool) path: section/p
#: C/hello-world.py.page:89
msgid ""
"A text label is one of the GTK+ widgets we can use, on account of having "
"imported the GTK+ library. To use it, we create a variable called "
"<var>label</var> and set the text that the label will hold. Finally, we "
"create and run the application:"
msgstr ""
"텍스트 레이블은 가져온 GTK+ 라이브러리에 들어있어 우리가 활용할 수 있는 GTK+ "
"위젯 중 하나입니다. 이 위젯을 사용하려, <var>label</var> 변수를 만들고, 계속 "
"표시해 둘 텍스트를 설정하겠습니다. 최종적으로, 프로그램을 만들고 실행합니다:"

#. (itstool) path: section/code
#: C/hello-world.py.page:91
#, no-wrap
msgid ""
"#run the application\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)"
msgstr ""
"#run the application\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)"

#. (itstool) path: section/title
#: C/hello-world.py.page:101
msgid "hello-world.py"
msgstr "hello-world.py"

#. (itstool) path: section/code
#: C/hello-world.py.page:103 C/label.py.page:39
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # constructor for a Gtk.ApplicationWindow\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(200, 100)\n"
"\n"
"        # create a label\n"
"        label = Gtk.Label()\n"
"        # set the text of the label\n"
"        label.set_text(\"Hello GNOME!\")\n"
"        # add the label to the window\n"
"        self.add(label)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # constructor for a Gtk.ApplicationWindow\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(200, 100)\n"
"\n"
"        # create a label\n"
"        label = Gtk.Label()\n"
"        # set the text of the label\n"
"        label.set_text(\"Hello GNOME!\")\n"
"        # add the label to the window\n"
"        self.add(label)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/p
#: C/hello-world.py.page:107
msgid ""
"To run this application, first save it as hello-world.py. Then open "
"Terminal, go to the folder where your application is stored and run:"
msgstr ""
"이 프로그램을 실행하려면 우선 hello-world.py로 저장하십시오. 그 다음 터미널"
"을 여시고 프로그램을 저장한 폴더로 이동하신 다음 실행하십시오:"

#. (itstool) path: section/screen
#: C/hello-world.py.page:108
#, no-wrap
msgid "<output style=\"prompt\">$ </output><input>python hello-world.py</input>"
msgstr "<output style=\"prompt\">$ </output><input>python hello-world.py</input>"

#. (itstool) path: section/code
#: C/hello-world.py.page:144
#, no-wrap
msgid ""
"# The actual runnable program is set to the SCRIPTS primitive.\n"
"# # Prefix bin_ tells where to copy this\n"
"bin_SCRIPTS = hello-world.py\n"
"# # List of files to be distributed\n"
"EXTRA_DIST=  \\\n"
"\t$(bin_SCRIPTS)\n"
"#\n"
"#     # The desktop files\n"
"desktopdir = $(datadir)/applications\n"
"desktop_DATA = \\\n"
"\thello-world.desktop\n"
msgstr ""
"# The actual runnable program is set to the SCRIPTS primitive.\n"
"# # Prefix bin_ tells where to copy this\n"
"bin_SCRIPTS = hello-world.py\n"
"# # List of files to be distributed\n"
"EXTRA_DIST=  \\\n"
"\t$(bin_SCRIPTS)\n"
"#\n"
"#     # The desktop files\n"
"desktopdir = $(datadir)/applications\n"
"desktop_DATA = \\\n"
"\thello-world.desktop\n"

#. (itstool) path: info/title
#: C/hello-world.vala.page:9
msgctxt "text"
msgid "Hello World (Vala)"
msgstr "Hello World (Vala)"

#. (itstool) path: item/p
#: C/hello-world.vala.page:32
msgid "create a small \"Hello, World\" application using GTK+"
msgstr "GTK+로 간단한 \"Hello, World\" 프로그램을 만듭니다"

#. (itstool) path: section/code
#: C/hello-world.vala.page:45
#, no-wrap
msgid ""
"class MyApplication : Gtk.Application {\n"
"        protected override void activate () {\n"
"                var window = new Gtk.ApplicationWindow (this);\n"
"                window.set_title (\"Welcome to GNOME\");\n"
"                window.set_default_size (200, 100);\n"
"                window.show_all ();\n"
"        }\n"
"}"
msgstr ""
"class MyApplication : Gtk.Application {\n"
"        protected override void activate () {\n"
"                var window = new Gtk.ApplicationWindow (this);\n"
"                window.set_title (\"Welcome to GNOME\");\n"
"                window.set_default_size (200, 100);\n"
"                window.show_all ();\n"
"        }\n"
"}"

#. (itstool) path: section/p
#: C/hello-world.vala.page:55
msgid ""
"We can start building our first window. We do this by creating a variable "
"called <var>window</var> and assigning it a new Gtk.ApplicationWindow."
msgstr ""
"첫 창 만들기를 시작할 수 있습니다. <var>window</var> 변수를 만들어 Gtk."
"ApplicationWindow를 할당하겠습니다."

#. (itstool) path: section/p
#: C/hello-world.vala.page:56
msgid ""
"We give the window a title using <code>set_title</code>. The title can be "
"any string you want it to be. To be on the safe side, it's best to stick to "
"UTF-8 encoding."
msgstr ""
"<code>set_title</code>로 창 제목을 설정하겠습니다. 여러분이 원하는대로 제목"
"을 지을 수 있습니다. 안전한 방편으로 UTF-8 인코딩 방식으로 제목을 넣으시는게 "
"좋습니다."

#. (itstool) path: section/code
#: C/hello-world.vala.page:61
#, no-wrap
msgid ""
"var label = new Gtk.Label (\"Hello GNOME!\");\n"
"                window.add (label);\n"
msgstr ""
"var label = new Gtk.Label (\"Hello GNOME!\");\n"
"                window.add (label);\n"

#. (itstool) path: section/p
#: C/hello-world.vala.page:65
msgid "Finally, we create and run the application:"
msgstr "마지막으로 프로그램을 만들고 실행하겠습니다:"

#. (itstool) path: section/code
#: C/hello-world.vala.page:67
#, no-wrap
msgid ""
"int main (string[] args) {\n"
"        return new MyApplication ().run (args);\n"
"}"
msgstr ""
"int main (string[] args) {\n"
"        return new MyApplication ().run (args);\n"
"}"

#. (itstool) path: section/title
#: C/hello-world.vala.page:75
msgid "hello-world.vala"
msgstr "hello-world.vala"

#. (itstool) path: section/code
#: C/hello-world.vala.page:77
#, no-wrap
msgid ""
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\tvar label = new Gtk.Label (\"Hello GNOME!\");\n"
"\t\twindow.add (label);\n"
"\t\twindow.set_title (\"Welcome to GNOME\");\n"
"\t\twindow.set_default_size (200, 100);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\tvar label = new Gtk.Label (\"Hello GNOME!\");\n"
"\t\twindow.add (label);\n"
"\t\twindow.set_title (\"Welcome to GNOME\");\n"
"\t\twindow.set_default_size (200, 100);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: section/p
#: C/hello-world.vala.page:81
msgid ""
"To run this application, first save it as hello-world.vala. Then open "
"Terminal, go to the folder where your application is stored."
msgstr ""
"이 프로그램을 실행하려면 우선 hello-world.vala로 저장하십시오. 터미널을 연 다"
"음 프로그램을 저장한 폴더로 이동하십시오."

#. (itstool) path: section/p
#: C/hello-world.vala.page:82
msgid "Compile the program:"
msgstr "프로그램을 컴파일하시고요:"

#. (itstool) path: section/screen
#: C/hello-world.vala.page:83
#, no-wrap
msgid "valac --pkg gtk+-3.0 <file>hello-world.vala</file>"
msgstr "valac --pkg gtk+-3.0 <file>hello-world.vala</file>"

#. (itstool) path: section/p
#: C/hello-world.vala.page:84
msgid "Run the program:"
msgstr "프로그램을 실행하시죠:"

#. (itstool) path: section/screen
#: C/hello-world.vala.page:85
#, no-wrap
msgid "./<var>hello-world</var>"
msgstr "./<var>hello-world</var>"

#. (itstool) path: section/code
#: C/hello-world.vala.page:121
#, no-wrap
msgid ""
"# The actual runnable program is set to the SCRIPTS primitive.\n"
"# # Prefix bin_ tells where to copy this\n"
"bin_PROGRAMS = hello-world\n"
"hello_world_CFLAGS = $(gtk_CFLAGS)\n"
"hello_world_LDADD = $(gtk_LIBS)\n"
"hello_world_VALAFLAGS = --pkg gtk+-3.0\n"
"hello_world_SOURCES = hello-world.vala\n"
"\n"
"desktopdir = $(datadir)/applications\n"
"desktop_DATA = \\\n"
"\thello-world.desktop\n"
msgstr ""
"# The actual runnable program is set to the SCRIPTS primitive.\n"
"# # Prefix bin_ tells where to copy this\n"
"bin_PROGRAMS = hello-world\n"
"hello_world_CFLAGS = $(gtk_CFLAGS)\n"
"hello_world_LDADD = $(gtk_LIBS)\n"
"hello_world_VALAFLAGS = --pkg gtk+-3.0\n"
"hello_world_SOURCES = hello-world.vala\n"
"\n"
"desktopdir = $(datadir)/applications\n"
"desktop_DATA = \\\n"
"\thello-world.desktop\n"

#. (itstool) path: section/code
#: C/hello-world.vala.page:126
#, no-wrap
msgid ""
"# This file is processed by autoconf to create a configure script\n"
"AC_INIT([Hello World], 1.0)\n"
"AM_INIT_AUTOMAKE([1.10 no-define foreign dist-xz no-dist-gzip])\n"
"AC_PROG_CC\n"
"AM_PROG_VALAC([0.16])\n"
"PKG_CHECK_MODULES(gtk, gtk+-3.0)\n"
"AC_CONFIG_FILES([Makefile hello-world.desktop])\n"
"\n"
"AC_OUTPUT\n"
msgstr ""
"# This file is processed by autoconf to create a configure script\n"
"AC_INIT([Hello World], 1.0)\n"
"AM_INIT_AUTOMAKE([1.10 no-define foreign dist-xz no-dist-gzip])\n"
"AC_PROG_CC\n"
"AM_PROG_VALAC([0.16])\n"
"PKG_CHECK_MODULES(gtk, gtk+-3.0)\n"
"AC_CONFIG_FILES([Makefile hello-world.desktop])\n"
"\n"
"AC_OUTPUT\n"

#. (itstool) path: section/p
#: C/hello-world.vala.page:133
msgid ""
"When you have the <file>hello-world.c</file>, <file>hello-world.desktop.in</"
"file>, <file>Makefile.am</file>, <file>configure.ac</file> and <file>autogen."
"sh</file> files with correct information and rights, the <file>README</file> "
"file can include the following instructions:"
msgstr ""
"제대로 된 정보를 올바르게 갖춘 <file>hello-world.c</file>, <file>hello-world."
"desktop.in</file>, <file>Makefile.am</file>, <file>configure.ac</file>, "
"<file>autogen.sh</file> 파일을 두었다면, <file>README</file> 파일에 다음 내용"
"을 넣을 수 있습니다:"

# NOTE: README에 들어가는 내용 그 자체이므로 번역할 필요가 없습니다.
#. (itstool) path: section/code
#: C/hello-world.vala.page:134
#, no-wrap
msgid ""
"To build and install this program:\n"
"\n"
"./autogen.sh --prefix=/home/your_username/.local\n"
"make\n"
"make install\n"
"\n"
"-------------\n"
"Running the first line above creates the following files:\n"
"\n"
"aclocal.m4\n"
"autom4te.cache\n"
"config.log\n"
"config.status\n"
"configure\n"
"depcomp\n"
"hello-world\n"
"hello-world.c\n"
"hello-world.desktop\n"
"hello_world-hello-world.o\n"
"hello_world_vala.stamp\n"
"install-sh\n"
"missing\n"
"Makefile.in\n"
"Makefile\n"
"\n"
"Running \"make\" links all the appropriate libraries.\n"
"\n"
"Running \"make install\", installs the application in /home/your_username/.local/bin\n"
"and installs the hello-world.desktop file in /home/your_username/.local/share/applications\n"
"\n"
"You can now run the application by typing \"Hello World\" in the Overview.\n"
"\n"
"----------------\n"
"To uninstall, type:\n"
"\n"
"make uninstall\n"
"\n"
"----------------\n"
"To create a tarball type:\n"
"\n"
"make distcheck\n"
"\n"
"This will create hello-world-1.0.tar.xz\n"
msgstr ""
"To build and install this program:\n"
"\n"
"./autogen.sh --prefix=/home/your_username/.local\n"
"make\n"
"make install\n"
"\n"
"-------------\n"
"Running the first line above creates the following files:\n"
"\n"
"aclocal.m4\n"
"autom4te.cache\n"
"config.log\n"
"config.status\n"
"configure\n"
"depcomp\n"
"hello-world\n"
"hello-world.c\n"
"hello-world.desktop\n"
"hello_world-hello-world.o\n"
"hello_world_vala.stamp\n"
"install-sh\n"
"missing\n"
"Makefile.in\n"
"Makefile\n"
"\n"
"Running \"make\" links all the appropriate libraries.\n"
"\n"
"Running \"make install\", installs the application in /home/your_username/.local/bin\n"
"and installs the hello-world.desktop file in /home/your_username/.local/share/applications\n"
"\n"
"You can now run the application by typing \"Hello World\" in the Overview.\n"
"\n"
"----------------\n"
"To uninstall, type:\n"
"\n"
"make uninstall\n"
"\n"
"----------------\n"
"To create a tarball type:\n"
"\n"
"make distcheck\n"
"\n"
"This will create hello-world-1.0.tar.xz\n"

#. (itstool) path: info/title
#: C/image.c.page:8
msgctxt "text"
msgid "Image (C)"
msgstr "Image(C)"

#. (itstool) path: info/desc
#: C/image.c.page:18 C/image.js.page:17 C/image.py.page:25 C/image.vala.page:18
msgid "A widget displaying an image"
msgstr "그림을 표시하는 위젯"

#. (itstool) path: page/title
#: C/image.c.page:21 C/image.js.page:20 C/image.py.page:28 C/image.vala.page:21
msgid "Image"
msgstr "Image"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/image.c.page:22 C/image.js.page:21 C/image.py.page:29 C/image.vala.page:22
msgctxt "_"
msgid "external ref='media/image.png' md5='9416aa74d9d6a857783f7a36338e7a02'"
msgstr ""

#. (itstool) path: page/p
#: C/image.c.page:23 C/image.js.page:22 C/image.py.page:30 C/image.vala.page:23
msgid "This GtkApplication displays an image file from the current directory."
msgstr "이 GtkApplication에서는 현재 디렉터리의 그림파일을 보여줍니다."

#. (itstool) path: note/p
#: C/image.c.page:24 C/image.js.page:23 C/image.vala.page:24
msgid ""
"If the image file isn't loaded successfully, the image will contain a "
"\"broken image\" icon. The <file>filename.png</file> needs to be in the "
"current directory for this code to work. Use your favorite picture!"
msgstr ""
"그림 파일을 제대로 불러오지 않았다면, 그림에 \"깨진 그림\" 아이콘이 들어갑니"
"다. 이 코드가 동작하려면 현재 디렉터리에 <file>filename.png</file> 파일이 있"
"어야합니다. 원하는 그림을 사용하세요!"

#. (itstool) path: page/code
#: C/image.c.page:28
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *image;\n"
"\n"
"  /*Create a window with a title and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Welcome to GNOME\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 300);\n"
"\n"
"  image = gtk_image_new_from_file (\"gnome-image.png\");\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (image));\n"
"\n"
"  gtk_widget_show_all (GTK_WIDGET (window));\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\",G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *image;\n"
"\n"
"  /*Create a window with a title and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Welcome to GNOME\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 300);\n"
"\n"
"  image = gtk_image_new_from_file (\"gnome-image.png\");\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (image));\n"
"\n"
"  gtk_widget_show_all (GTK_WIDGET (window));\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\",G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/image.c.page:35
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkImage.html"
"\">GtkImage</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkImage.html"
"\">GtkImage</link>"

#. (itstool) path: info/title
#: C/image.js.page:7
msgctxt "text"
msgid "Image (JavaScript)"
msgstr "Image (JavaScript)"

#. (itstool) path: page/code
#: C/image.js.page:27
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ImageExample = new Lang.Class ({\n"
"\tName: 'Image Example',\n"
"\n"
"\t/* Create the application itself\n"
"\t   This boilerplate code is needed to build any GTK+ application. */\n"
"        _init: function () {\n"
"   \t     this.application = new Gtk.Application ({\n"
"  \t          application_id: 'org.example.jsimage',\n"
"  \t          flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"   \t     });\n"
"\n"
"\t// Connect 'activate' and 'startup' signals to the callback functions\n"
"\tthis.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"\tthis.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"\t},\n"
"\n"
"\t// Callback function for 'activate' signal presents windows when active\n"
"\t_onActivate: function () {\n"
"\t\tthis._window.present ();\n"
"\t},\n"
"\n"
"\t// Callback function for 'startup' signal initializes menus and builds the UI\n"
"\t_onStartup: function () {\n"
"\t\tthis._buildUI ();\n"
"\t},\n"
"\n"
"\n"
"\n"
"\n"
"\t// Build the application's UI\n"
"\t_buildUI: function () {\n"
"\n"
"\t\t// Create the application window\n"
"        \tthis._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                     \t     window_position: Gtk.WindowPosition.CENTER,\n"
"                                                     \t     title: \"Welcome to GNOME\",\n"
"                                                     \t     default_height: 300,\n"
"                                                     \t     default_width: 300 });\n"
"\n"
"\t\t// Create the label\n"
"\t\tthis.jsimage = new Gtk.Image ({file: \"gnome-image.png\"});\n"
"\t\tthis._window.add (this.jsimage);\n"
"\n"
"       \t \t// Show the window and all child widgets\n"
"       \t \tthis._window.show_all();\n"
"\t}\n"
"\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ImageExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ImageExample = new Lang.Class ({\n"
"\tName: 'Image Example',\n"
"\n"
"\t/* Create the application itself\n"
"\t   This boilerplate code is needed to build any GTK+ application. */\n"
"        _init: function () {\n"
"   \t     this.application = new Gtk.Application ({\n"
"  \t          application_id: 'org.example.jsimage',\n"
"  \t          flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"   \t     });\n"
"\n"
"\t// Connect 'activate' and 'startup' signals to the callback functions\n"
"\tthis.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"\tthis.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"\t},\n"
"\n"
"\t// Callback function for 'activate' signal presents windows when active\n"
"\t_onActivate: function () {\n"
"\t\tthis._window.present ();\n"
"\t},\n"
"\n"
"\t// Callback function for 'startup' signal initializes menus and builds the UI\n"
"\t_onStartup: function () {\n"
"\t\tthis._buildUI ();\n"
"\t},\n"
"\n"
"\n"
"\n"
"\n"
"\t// Build the application's UI\n"
"\t_buildUI: function () {\n"
"\n"
"\t\t// Create the application window\n"
"        \tthis._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                     \t     window_position: Gtk.WindowPosition.CENTER,\n"
"                                                     \t     title: \"Welcome to GNOME\",\n"
"                                                     \t     default_height: 300,\n"
"                                                     \t     default_width: 300 });\n"
"\n"
"\t\t// Create the label\n"
"\t\tthis.jsimage = new Gtk.Image ({file: \"gnome-image.png\"});\n"
"\t\tthis._window.add (this.jsimage);\n"
"\n"
"       \t \t// Show the window and all child widgets\n"
"       \t \tthis._window.show_all();\n"
"\t}\n"
"\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ImageExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/image.js.page:34
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Image.html"
"\">Gtk.Image</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Image.html"
"\">Gtk.Image</link>"

#. (itstool) path: info/title
#: C/image.py.page:8
msgctxt "text"
msgid "Image (Python)"
msgstr "Image(Python)"

#. (itstool) path: credit/name
#: C/image.py.page:20
msgid "Sindhu S"
msgstr "Sindhu S"

#. (itstool) path: credit/years
#: C/image.py.page:22
msgid "2014"
msgstr "2014"

#. (itstool) path: note/p
#: C/image.py.page:32
msgid ""
"If the image file is not loaded successfully, the image will contain a "
"\"broken image\" icon. <file>filename.png</file> needs to be in the current "
"directory for this code to work."
msgstr ""
"그림 파일을 제대로 불러오지 않았다면, 그림에 \"깨진 그림\" 아이콘이 들어갑니"
"다. 이 코드가 동작하려면 현재 디렉터리에 <file>filename.png</file> 파일이 있"
"어야합니다."

#. (itstool) path: section/code
#: C/image.py.page:43
#, no-wrap
msgid ""
"\n"
"  from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # create a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(300, 300)\n"
"\n"
"        # create an image\n"
"        image = Gtk.Image()\n"
"        # set the content of the image as the file filename.png\n"
"        image.set_from_file(\"gnome-image.png\")\n"
"        # add the image to the window\n"
"        self.add(image)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
"\n"
"  "
msgstr ""
"\n"
"  from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # create a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(300, 300)\n"
"\n"
"        # create an image\n"
"        image = Gtk.Image()\n"
"        # set the content of the image as the file filename.png\n"
"        image.set_from_file(\"gnome-image.png\")\n"
"        # add the image to the window\n"
"        self.add(image)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
"\n"
"  "

#. (itstool) path: section/p
#: C/image.py.page:47
msgid ""
"Another way to obtain what we have in the example is to create the image as "
"an instance of another class and add it to the instance of <code>MyWindow</"
"code> in the <code>do_activate(self)</code> method:"
msgstr ""
"우리 예제에서 그림을 다른 클래스의 인스턴스로 만들고 "
"<code>do_activate(self)</code> 메서드에서 <code>MyWindow</code>의 인스턴스로 "
"초기화 하는 다른 방법이 있습니다:"

#. (itstool) path: section/code
#: C/image.py.page:51
#, no-wrap
msgid ""
"\n"
"    # a class to create a window\n"
"    class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(300, 300)\n"
"\n"
"    # a class to create an image\n"
"    class MyImage(Gtk.Image):\n"
"    def __init__(self):\n"
"        Gtk.Image.__init__(self)\n"
"        self.set_from_file(\"gnome-image.png\")\n"
"\n"
"    class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        # create an instance of MyWindow\n"
"        win = MyWindow(self)\n"
"        # create an instance of MyImage and add it to the window\n"
"        win.add(MyImage())\n"
"        # show the window and everything on it\n"
"        win.show_all()\n"
"  "
msgstr ""
"\n"
"    # a class to create a window\n"
"    class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(300, 300)\n"
"\n"
"    # a class to create an image\n"
"    class MyImage(Gtk.Image):\n"
"    def __init__(self):\n"
"        Gtk.Image.__init__(self)\n"
"        self.set_from_file(\"gnome-image.png\")\n"
"\n"
"    class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        # create an instance of MyWindow\n"
"        win = MyWindow(self)\n"
"        # create an instance of MyImage and add it to the window\n"
"        win.add(MyImage())\n"
"        # show the window and everything on it\n"
"        win.show_all()\n"
"  "

#. (itstool) path: note/p
#: C/image.py.page:78
msgid ""
"To use this code snippet, you will need to add the code that imports "
"<code>Gtk</code> and <code>GdkPixbuf</code> from <code>gi.repository</code> "
"and lines that instantiate the <code>MyApplication</code> window."
msgstr ""
"이 코드 부분을 사용하려면, <code>gi.repository</code>에서 <code>Gtk</code>와 "
"<code>GdkPixbuf</code>를 임포팅하는 코드와 <code>MyApplication</code> 창을 초"
"기화하는 여러 줄의 코드를 추가해야 합니다."

#. (itstool) path: section/title
#: C/image.py.page:85
msgid "Useful methods for an Image widget"
msgstr "Image 위젯에 쓸만한 메서드"

#. (itstool) path: item/p
#: C/image.py.page:89
msgid ""
"To load an image over a network use <code>set_from_pixbuf(pixbuf)</code>, "
"where <code>pixbuf</code> is a <link href=\"https://developer.gnome.org/gdk-"
"pixbuf/unstable/index.html\"> GdkPixbuf</link>."
msgstr ""
"네트워크에서 그림을 불러오려면 <code>set_from_pixbuf(pixbuf)</code> 함수를 사"
"용하십시오. 여기서 <code>pixbuf</code>는 <link href=\"https://developer."
"gnome.org/gdk-pixbuf/unstable/index.html\"> GdkPixbuf</link>입니다."

#. (itstool) path: item/code
#: C/image.py.page:93
#, no-wrap
msgid ""
"\n"
"        from gi.repository import Gtk\n"
"        from gi.repository import GdkPixbuf\n"
"        import sys\n"
"\n"
"        class MyWindow(Gtk.ApplicationWindow):\n"
"            # create a window\n"
"            def __init__(self, app):\n"
"                Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"                self.set_default_size(300, 300)\n"
"\n"
"                # create a pixbuf from file filename=\"gnome-image.png\", with width=32\n"
"                # and height=64 amd boolean preserve_aspect_ratio=False.\n"
"                pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(\"gnome-image.png\", 64, 128, False)\n"
"\n"
"                # create an image\n"
"                image = Gtk.Image()\n"
"                # set the content of the image as the pixbuf\n"
"                image.set_from_pixbuf(pixbuf)\n"
"                # add the image to the window\n"
"                self.add(image)\n"
"        "
msgstr ""
"\n"
"        from gi.repository import Gtk\n"
"        from gi.repository import GdkPixbuf\n"
"        import sys\n"
"\n"
"        class MyWindow(Gtk.ApplicationWindow):\n"
"            # create a window\n"
"            def __init__(self, app):\n"
"                Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"                self.set_default_size(300, 300)\n"
"\n"
"                # create a pixbuf from file filename=\"gnome-image.png\", with width=32\n"
"                # and height=64 amd boolean preserve_aspect_ratio=False.\n"
"                pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(\"gnome-image.png\", 64, 128, False)\n"
"\n"
"                # create an image\n"
"                image = Gtk.Image()\n"
"                # set the content of the image as the pixbuf\n"
"                image.set_from_pixbuf(pixbuf)\n"
"                # add the image to the window\n"
"                self.add(image)\n"
"        "

#. (itstool) path: item/p
#: C/image.py.page:115
msgid ""
"If <code>preserve_aspect_ratio=True</code> we can use "
"<code>new_from_file_at_size(filename, width, height)</code>. If <code>width</"
"code> or <code>height</code> is <code>-1</code>, it is not constrained."
msgstr ""
"<code>preserve_aspect_ratio=True</code>이면, "
"<code>new_from_file_at_size(filename, width, height)</code> 함수를 사용할 수 "
"있습니다. <code>width</code> 또는 <code>height</code> 값이 <code>-1</code>이"
"면 제약을 받지 않습니다."

#. (itstool) path: item/p
#: C/image.py.page:119
msgid ""
"For loading from an input stream, see <code>new_from_stream()</code> and "
"<code>new_from_stream_at_scale()</code> in the documentation."
msgstr ""
"입력 스트림에서 불러오는 방법을 알아보려면, 문서에서 "
"<code>new_from_stream()</code>함수와 <code>new_from_stream_at_scale()</code>"
"함수 내용을 참고하십시오."

#. (itstool) path: item/p
#: C/image.py.page:131
msgid ""
"<link href=\"https://developer.gnome.org/gtk3/unstable/GtkImage.html\"> "
"GtkImage</link>"
msgstr ""
"<link href=\"https://developer.gnome.org/gtk3/unstable/GtkImage.html\"> "
"GtkImage</link>"

#. (itstool) path: item/p
#: C/image.py.page:135
msgid ""
"<link href=\"https://developer.gnome.org/gtk3/unstable/GtkWindow.html\"> "
"GtkWindow</link>"
msgstr ""
"<link href=\"https://developer.gnome.org/gtk3/unstable/GtkWindow.html\"> "
"GtkWindow</link>"

#. (itstool) path: info/title
#: C/image.vala.page:8
msgctxt "text"
msgid "Image (Vala)"
msgstr "Image(Vala)"

#. (itstool) path: page/code
#: C/image.vala.page:27
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Welcome to GNOME\");\n"
"\n"
"\t\tvar image = new Gtk.Image ();\n"
"\t\timage.set_from_file (\"gnome-image.png\");\n"
"\t\tthis.add (image);\n"
"\t\tthis.set_default_size (300, 300);\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Welcome to GNOME\");\n"
"\n"
"\t\tvar image = new Gtk.Image ();\n"
"\t\timage.set_from_file (\"gnome-image.png\");\n"
"\t\tthis.add (image);\n"
"\t\tthis.set_default_size (300, 300);\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/image.vala.page:32 C/separator.vala.page:40
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Application.html"
"\">GtkApplication</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Application.html"
"\">GtkApplication</link>"

#. (itstool) path: item/p
#: C/image.vala.page:33
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ApplicationWindow.html"
"\">GtkApplicationWindow</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ApplicationWindow.html"
"\">GtkApplicationWindow</link>"

#. (itstool) path: item/p
#: C/image.vala.page:34 C/paned.vala.page:38
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Image.html\">GtkImage</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Image.html\">GtkImage</link>"

#. (itstool) path: info/title
#: C/image-viewer.c.page:8
msgctxt "text"
msgid "Image viewer (C)"
msgstr "그림 보기(C)"

#. (itstool) path: info/desc
#: C/image-viewer.c.page:11
msgid "A little bit more than a simple \"Hello world\" Gtk application."
msgstr "간단한 \"Hello world\" Gtk 프로그램에 약간의 무언가가 더 들어갑니다."

#. (itstool) path: page/title
#: C/image-viewer.c.page:29 C/image-viewer.cpp.page:27
#: C/image-viewer.js.page:29 C/image-viewer.py.page:29
#: C/image-viewer.vala.page:37
msgid "Image viewer"
msgstr "그림 보기"

#. (itstool) path: synopsis/p
#: C/image-viewer.c.page:32 C/image-viewer.cpp.page:30
#: C/message-board.c.page:29 C/record-collection.js.page:32
msgid "In this tutorial, you will learn:"
msgstr "이 지침서를 통해 다음을 배웁니다:"

#. (itstool) path: item/p
#: C/image-viewer.c.page:34
msgid "Some basic concepts of C/GObject programming"
msgstr "C/GObject 프로그래밍 일부 기본 개념"

#. (itstool) path: item/p
#: C/image-viewer.c.page:35
msgid "How to write a Gtk application in C"
msgstr "C 언어로 Gtk 프로그램을 작성하는 방법"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/image-viewer.c.page:39 C/image-viewer.cpp.page:37
#: C/image-viewer.js.page:47 C/image-viewer.py.page:46
#: C/image-viewer.vala.page:54
msgctxt "_"
msgid ""
"external ref='media/image-viewer.png' md5='7720360611243b14283b83527be968c2'"
msgstr ""

#. (itstool) path: item/p
#: C/image-viewer.c.page:49
msgid ""
"Choose <gui>GTK+ (Simple)</gui> from the <gui>C</gui> tab, click "
"<gui>Continue</gui>, and fill out your details on the next few pages. Use "
"<file>image-viewer</file> as project name and directory."
msgstr ""
"<gui>C</gui> 탭에서 <gui>GTK+ (단순)</gui>를 선택하고, <gui>계속</gui>을 누"
"른 다음, 나타난 페이지에서 몇가지 자세한 내용을 입력하십시오. 프로젝트 이름"
"과 디렉터리에 <file>image-viewer</file>를 입력하십시오."

#. (itstool) path: item/p
#: C/image-viewer.c.page:52
msgid ""
"Make sure that <gui>Use GtkBuilder for user interface</gui> is disabled as "
"we will create the UI manually in this tutorial. Check the <link xref="
"\"guitar-tuner.c\">Guitar-Tuner</link> tutorial if you want to learn how to "
"use the interface builder."
msgstr ""
"앞서 따라하기 지침을 통해 사용자 인터페이스를 직접 만들 예정이므로 <gui>사용"
"자 인터페이스에 GtkBuilder 사용</gui> 설정을 껐는지 확인하십시오. 인터페이스 "
"빌더 사용법을 알아보려면 <link xref=\"guitar-tuner.c\">기타 조율 프로그램</"
"link> 따라하기 지침서를 확인하십시오."

#. (itstool) path: section/p
#: C/image-viewer.c.page:67
msgid ""
"C is a rather verbose language, so don't be surprised that the file contains "
"quite a lot of code. Most of it is template code. It loads an (empty) window "
"and shows it. More details are given below; skip this list if you understand "
"the basics:"
msgstr ""
"C는 장황하게 하나하나 다 따지고 들어가야 하는 언어니, 좀 많은 코드가 들어가 "
"있는 파일에 놀라지 않으셔도 됩니다. 대부분은 서식 코드입니다. 이 코드에서는 "
"(빈) 창을 불러와 열고 화면에 나타냅니다. 자세한 내용은 아래에 있습니다. 기본"
"을 이미 알고 있다면 이 부분은 건너뛰십시오:"

#. (itstool) path: item/p
#: C/image-viewer.c.page:74
msgid ""
"The <code>create_window</code> function creates a new (empty) window and "
"connects a signal to exit the application when that window is closed."
msgstr ""
"<code>create_window</code> 함수는 (비어있는) 새 창을 만들고 창을 닫을 때 프로"
"그램을 빠져나갈 시그널을 연결합니다."

#. (itstool) path: section/title
#: C/image-viewer.c.page:90 C/image-viewer.cpp.page:87
#: C/image-viewer.vala.page:139
msgid "Creating the user interface"
msgstr "사용자 인터페이스 만들기"

#. (itstool) path: section/p
#: C/image-viewer.c.page:91
msgid ""
"Now we will bring life into the empty window. GTK organizes the user "
"interface with <code>GtkContainer</code>s that can contain other widgets and "
"even other containers. Here we will use the simplest available container, a "
"<code>GtkBox</code>:"
msgstr ""
"이제 비어있는 창에 숨결을 불어넣겠습니다. GTK는 다른 위젯을 넣을 수 있고 다"
"른 컨테이너도 넣을 수 있는 <code>GtkContainer</code>로  사용자 인터페이스를 "
"모아둡니다. 여기서는 여러가지 컨테이너 중 가장 간단한 <code>GtkBox</code>를 "
"사용하겠습니다:"

#. (itstool) path: section/code
#: C/image-viewer.c.page:94
#, no-wrap
msgid ""
"\n"
"static GtkWidget*\n"
"create_window (void)\n"
"{\n"
"\tGtkWidget *window;\n"
"\tGtkWidget *button;\n"
"\tGtkWidget *image;\n"
"\tGtkWidget *box;\n"
"\n"
"\t/* Set up the UI */\n"
"\twindow = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n"
"\tgtk_window_set_title (GTK_WINDOW (window), \"image-viewer-c\");\n"
"\n"
"\tbox = gtk_box_new (GTK_ORIENTATION_VERTICAL, 5);\n"
"\tbutton = gtk_button_new_with_label (_(\"Open image\"));\n"
"\timage = gtk_image_new ();\n"
"\n"
"\tgtk_box_pack_start (GTK_BOX (box), image, TRUE, TRUE, 0);\n"
"\tgtk_box_pack_start (GTK_BOX (box), button, FALSE, FALSE, 0);\n"
"\n"
"\tgtk_container_add (GTK_CONTAINER (window), box);\n"
"\n"
"\t/* Connect signals */\n"
"\n"
"\t/* Show open dialog when opening a file */\n"
"\tg_signal_connect (button, \"clicked\", G_CALLBACK (on_open_image), image);\n"
"\n"
"\t/* Exit when the window is closed */\n"
"\tg_signal_connect (window, \"destroy\", G_CALLBACK (gtk_main_quit), NULL);\n"
"\n"
"\treturn window;\n"
"}\n"
msgstr ""
"\n"
"static GtkWidget*\n"
"create_window (void)\n"
"{\n"
"\tGtkWidget *window;\n"
"\tGtkWidget *button;\n"
"\tGtkWidget *image;\n"
"\tGtkWidget *box;\n"
"\n"
"\t/* Set up the UI */\n"
"\twindow = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n"
"\tgtk_window_set_title (GTK_WINDOW (window), \"image-viewer-c\");\n"
"\n"
"\tbox = gtk_box_new (GTK_ORIENTATION_VERTICAL, 5);\n"
"\tbutton = gtk_button_new_with_label (_(\"Open image\"));\n"
"\timage = gtk_image_new ();\n"
"\n"
"\tgtk_box_pack_start (GTK_BOX (box), image, TRUE, TRUE, 0);\n"
"\tgtk_box_pack_start (GTK_BOX (box), button, FALSE, FALSE, 0);\n"
"\n"
"\tgtk_container_add (GTK_CONTAINER (window), box);\n"
"\n"
"\t/* Connect signals */\n"
"\n"
"\t/* Show open dialog when opening a file */\n"
"\tg_signal_connect (button, \"clicked\", G_CALLBACK (on_open_image), image);\n"
"\n"
"\t/* Exit when the window is closed */\n"
"\tg_signal_connect (window, \"destroy\", G_CALLBACK (gtk_main_quit), NULL);\n"
"\n"
"\treturn window;\n"
"}\n"

#. (itstool) path: item/p
#: C/image-viewer.c.page:129
msgid ""
"The first lines create the widgets we want to use: a button for opening up "
"an image, the image view widget itself and the box we will use as a "
"container. The macros like <code>GTK_BOX</code> are used for dynamic type "
"checking and casting which is needed as C doesn't support object-orientation "
"out-of-the-box."
msgstr ""
"첫 줄은 우리가 쓰려는 그림을 여는 단추, 그림 보기 위젯 그 자체, 컨테이너로 "
"쓸 박스 위젯을 만듭니다. <code>GTK_BOX</code> 같은 매크로는 동적 자료형 검사"
"와 객체지향을 지원하지 않는 C 언어에서 특별하게 캐스팅할 목적으로 사용합니다."

#. (itstool) path: item/p
#: C/image-viewer.c.page:134
msgid ""
"The calls to <code>gtk_box_pack_start</code> add the two widgets to the box "
"and define their behaviour. The image will expand into any available space "
"while the button will just be as big as needed. You will notice that we "
"don't set explicit sizes on the widgets. In GTK this is usually not needed "
"as it makes it much easier to have a layout that looks good in different "
"window sizes. Next, the box is added to the window."
msgstr ""
"<code>gtk_box_pack_start</code> 호출로 박스에 두 위젯을 추가하고 동작을 정의"
"합니다. 그림은 활용 가능한 공간만큼 충분히 확장하고, 단추는 필요한 만큼만 커"
"집니다. 위젯의 크기를 분명하게 설정하지 않음을 알아채셨을 겁니다. GTK에서는 "
"창 크기가 달라져도 보기 좋은 배치를 쉽게하기에 직접 설정할 필요가 없습니다. "
"이 과정이 끝나면 박스를 창에 추가합니다."

#. (itstool) path: item/p
#: C/image-viewer.c.page:140
msgid ""
"We need to define what happens when the user clicks on the button. GTK uses "
"the concept of <em>signals</em>. When the button is clicked, it fires the "
"<em>clicked</em> signal, which we can connect to some action. This is done "
"using the <code>g_signal_connect</code> function which tells GTK to call the "
"<code>on_image_open</code> function when the button is clicked and to pass "
"the image as an additional argument to that function. We will define the "
"<em>callback</em> in the next section."
msgstr ""
"단추를 사용자가 눌렀을 때 어떤 일이 일어날 지 정해야합니다. GTK는 <em>시그널"
"</em> 개념을 활용합니다. 단추를 누르면, 어떤 동작과 연결할 수 있는 "
"<em>clicked</em> 시그널을 방출합니다. 사용자가 단추를 누르면  "
"<code>on_image_open</code> 함수를 호출하여 그림을 이 함수의 인자로 전달하라"
"고 GTK에 지시할 때 <code>g_signal_connect</code> 함수를 사용하면 됩니다. 다"
"음 섹션에서 <em>콜백</em>을 정의하겠습니디."

#. (itstool) path: item/p
#: C/image-viewer.c.page:145
msgid ""
"The last <code>g_signal_connect()</code> makes sure that the application "
"exits when the window is closed."
msgstr ""
"마지막 <code>g_signal_connect()</code> 함수에서는 창을 닫을 때 프로그램을 빠"
"져나갈지를 확인합니다."

#. (itstool) path: item/p
#: C/image-viewer.c.page:148
msgid ""
"As a last step, make sure to replace the <code>gtk_widget_show</code> call "
"in the <code>main()</code> function by <code>gtk_widget_show_all()</code> to "
"show the window and all the widgets it contains."
msgstr ""
"마지막 단계에서는 창과 창이 담고 있는 모든 위젯을 보여줄 <code>main()</code> "
"함수의 <code>gtk_widget_show</code> 호출을<code>gtk_widget_show_all()</code> "
"함수로 바꾸었는지 확인하십시오."

#. (itstool) path: section/title
#: C/image-viewer.c.page:155 C/image-viewer.cpp.page:142
#: C/image-viewer.vala.page:210
msgid "Showing the image"
msgstr "그림 표시"

#. (itstool) path: section/p
#: C/image-viewer.c.page:156
msgid ""
"We will now define the signal handler for the <em>clicked</em> signal or the "
"button we mentioned before. Add this code before the <code>create_window()</"
"code> method."
msgstr ""
"<em>clicked</em> 시그널이나 위에서 전에 언급한 단추의 시그널 핸들러를 정의하"
"겠습니다. <code>create_window()</code> 메서드 전에 이 코드를 추가하십시오."

#. (itstool) path: section/code
#: C/image-viewer.c.page:159
#, no-wrap
msgid ""
"\n"
"static void\n"
"on_open_image (GtkButton* button, gpointer user_data)\n"
"{\n"
"\tGtkWidget *image = GTK_WIDGET (user_data);\n"
"\tGtkWidget *toplevel = gtk_widget_get_toplevel (image);\n"
"\tGtkFileFilter *filter = gtk_file_filter_new ();\n"
"\tGtkWidget *dialog = gtk_file_chooser_dialog_new (_(\"Open image\"),\n"
"\t                                                 GTK_WINDOW (toplevel),\n"
"\t                                                 GTK_FILE_CHOOSER_ACTION_OPEN,\n"
"\t                                                 GTK_STOCK_OK, GTK_RESPONSE_ACCEPT,\n"
"\t                                                 GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,\n"
"\t                                                 NULL);\n"
"\n"
"\tgtk_file_filter_add_pixbuf_formats (filter);\n"
"\tgtk_file_chooser_add_filter (GTK_FILE_CHOOSER (dialog),\n"
"\t                             filter);\n"
"\n"
"\tswitch (gtk_dialog_run (GTK_DIALOG (dialog)))\n"
"\t{\n"
"\t\tcase GTK_RESPONSE_ACCEPT:\n"
"\t\t{\n"
"\t\t\tgchar *filename =\n"
"\t\t\t\tgtk_file_chooser_get_filename (GTK_FILE_CHOOSER (dialog));\n"
"\t\t\tgtk_image_set_from_file (GTK_IMAGE (image), filename);\n"
"\t\t\tbreak;\n"
"\t\t}\n"
"\t\tdefault:\n"
"\t\t\tbreak;\n"
"\t}\n"
"\tgtk_widget_destroy (dialog);\n"
"}\n"
msgstr ""
"\n"
"static void\n"
"on_open_image (GtkButton* button, gpointer user_data)\n"
"{\n"
"\tGtkWidget *image = GTK_WIDGET (user_data);\n"
"\tGtkWidget *toplevel = gtk_widget_get_toplevel (image);\n"
"\tGtkFileFilter *filter = gtk_file_filter_new ();\n"
"\tGtkWidget *dialog = gtk_file_chooser_dialog_new (_(\"Open image\"),\n"
"\t                                                 GTK_WINDOW (toplevel),\n"
"\t                                                 GTK_FILE_CHOOSER_ACTION_OPEN,\n"
"\t                                                 GTK_STOCK_OK, GTK_RESPONSE_ACCEPT,\n"
"\t                                                 GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL,\n"
"\t                                                 NULL);\n"
"\n"
"\tgtk_file_filter_add_pixbuf_formats (filter);\n"
"\tgtk_file_chooser_add_filter (GTK_FILE_CHOOSER (dialog),\n"
"\t                             filter);\n"
"\n"
"\tswitch (gtk_dialog_run (GTK_DIALOG (dialog)))\n"
"\t{\n"
"\t\tcase GTK_RESPONSE_ACCEPT:\n"
"\t\t{\n"
"\t\t\tgchar *filename =\n"
"\t\t\t\tgtk_file_chooser_get_filename (GTK_FILE_CHOOSER (dialog));\n"
"\t\t\tgtk_image_set_from_file (GTK_IMAGE (image), filename);\n"
"\t\t\tbreak;\n"
"\t\t}\n"
"\t\tdefault:\n"
"\t\t\tbreak;\n"
"\t}\n"
"\tgtk_widget_destroy (dialog);\n"
"}\n"

#. (itstool) path: section/p
#: C/image-viewer.c.page:192 C/image-viewer.cpp.page:178
#: C/image-viewer.js.page:283 C/image-viewer.py.page:197
msgid ""
"This is a bit more complicated than anything we've attempted so far, so "
"let's break it down:"
msgstr ""
"지금까지 우리가 다루어왔던 어떤 코드보다 조금 복잡하니 하나씩 뜯어보도록 하겠"
"습니다:"

#. (itstool) path: item/p
#: C/image-viewer.c.page:194
msgid ""
"The first argument of the signal is always the widget that sent the signal. "
"Sometimes other arguments related to the signal come after that, but "
"<em>clicked</em> doesn't have any. Next is the <code>user_data</code> "
"argument which is a pointer to the data we passed when connecting the "
"signal. In this case it is our <code>GtkImage</code> object."
msgstr ""
"시그널의 첫 인자는 언제나 시그널로 보낼 위젯입니다. 때로는 시그널과 관련된 다"
"른 인자가 오기도 하지만, <em>clicked</em> 시그널은 그렇지 않습니다. 그 다음"
"은 시그널을 연결할 때 우리가 넘길 데이터를 가리키는 <code>user_data</code> 포"
"인터 인자입니다. 이 경우 <code>GtkImage</code> 객체입니다."

#. (itstool) path: item/p
#: C/image-viewer.c.page:200
msgid ""
"The next interesting line is where the dialog for choosing the file is "
"created using <code>gtk_file_chooser_dialog_new</code>. The function takes "
"the title of the dialog, the parent window of the dialog and several options "
"like the number of buttons and their corresponding values."
msgstr ""
"다음 관심을 가질 부분에서는 <code>gtk_file_chooser_dialog_new</code>를 사용하"
"여 선택한 파일을 만드는 대화상자입니다. 함수에서는 대화상자 제목, 대화상자의 "
"상위 창, 여러 단추에 관련된 값 같은 다양한 옵션을 취합니다."

#. (itstool) path: item/p
#: C/image-viewer.c.page:204 C/image-viewer.cpp.page:186
#: C/image-viewer.js.page:290 C/image-viewer.py.page:204
msgid ""
"Notice that we are using <em>stock</em> button names from Gtk, instead of "
"manually typing \"Cancel\" or \"Open\". The advantage of using stock names "
"is that the button labels will already be translated into the user's "
"language."
msgstr ""
"참고로 \"취소\", \"열기\"를 직접 입력하는 대신, Gtk에서 <em>stock</em> 단추 "
"이름을 활용합니다  스톡 이름은 사용자가 쓰는 언어로 미리 번역해둔 단추 레이블"
"을 활용한다는 점입니다."

#. (itstool) path: item/p
#: C/image-viewer.c.page:207
msgid ""
"The next two lines restrict the <gui>Open</gui> dialog to only display files "
"which can be opened by GtkImage. A filter object is created first; we then "
"add all kinds of files supported by <code>GdkPixbuf</code> (which includes "
"most image formats like PNG and JPEG) to the filter. Finally, we set this "
"filter to be the <gui>Open</gui> dialog's filter."
msgstr ""
"다음 두 줄은 <gui>열기</gui> 대화 상자에서 GtkImage로만 열 수 있는 파일을 표"
"시하도록 제한합니다. 필터 객체를 우선 만듭니다. 그 다음 <code>GdkPixbuf</"
"code>에서 지원하는 파일 종류(PNG와 JPEG 같은 대부분의 그림 형식)를 필터에 추"
"가합니다. 마지막으로 이 필터를 <gui>열기</gui> 대화 상자의 필터로 설정합니다."

#. (itstool) path: item/p
#: C/image-viewer.c.page:210
msgid ""
"<code>gtk_dialog_run</code> displays the <gui>Open</gui> dialog. The dialog "
"will wait for the user to choose an image; when they do, "
"<code>gtk_dialog_run</code> will return the value <code>GTK_RESPONSE_ACCEPT</"
"code> (it would return <code>GTK_RESPONSE_CANCEL</code> if the user clicked "
"<gui>Cancel</gui>). The <code>switch</code> statement tests for this."
msgstr ""
"<code>gtk_dialog_run</code>는 <gui>Open</gui> 대화상자를 보여줍니다. 대화상자"
"는 사용자의 그림 선택을 기다립니다. 사용자가 그림을 선택하면 "
"<code>gtk_dialog_run</code> 함수에서 <code>GTK_RESPONSE_ACCEPT</code> 값을 반"
"환합니다(사용자가 <gui>취소</gui>를 누르면 <code>GTK_RESPONSE_CANCEL</code> "
"값을 반환합니다). <code>switch</code> 구문은 이 값을 확인합니다."

#. (itstool) path: item/p
#: C/image-viewer.c.page:212
msgid ""
"Assuming that the user did click <gui>Open</gui>, the next line sets the "
"<code>file</code> property of the GtkImage to the filename of the image "
"selected by the user. The GtkImage will then load and display the chosen "
"image."
msgstr ""
"사용자가 <gui>열기</gui>를 눌렀다고 한 상황에서, 다음 줄에서 GtkImage의 "
"<code>file</code> 속성 값을 사용자가 선택한 그림 파일 이름으로 설정합니다. "
"GtkImage는 선택한 그림을 불러오고 화면에 표시합니다."

#. (itstool) path: item/p
#: C/image-viewer.c.page:215
msgid ""
"In the final line of this method, we destroy the <gui>Open</gui> dialog "
"because we don't need it any more. Destroying automatically hides the dialog."
msgstr ""
"이 메서드의 마지막 줄에서는 <gui>열기</gui> 대화상자는 더 이상 필요 없으니 해"
"체합니다. 해체할 때 대화 상자를 자동으로 숩깁니다."

#. (itstool) path: section/p
#: C/image-viewer.c.page:224 C/image-viewer.cpp.page:212
msgid ""
"If you haven't already done so, choose the <file>Debug/src/image-viewer</"
"file> application in the dialog that appears. Finally, hit <gui>Run</gui> "
"and enjoy!"
msgstr ""
"아직 끝나지 않았다면, 화면에 나타나는 대화상자에서 <file>Debug/src/image-"
"viewer</file> 프로그램을 선택하십시오. 마지막으로 <gui>실행</gui>을 누르고 즐"
"기세요!"

#. (itstool) path: section/p
#: C/image-viewer.c.page:229
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"image-viewer/image-viewer.c\">reference code</link>."
msgstr ""
"지침서를 따라하는 실행하는 과정에 문제가 있다면, <link href=\"image-viewer/"
"image-viewer.c\">참조 코드</link>와 여러분의 코드를 비교해보십시오."

#. (itstool) path: item/p
#: C/image-viewer.c.page:237 C/image-viewer.cpp.page:225
#: C/image-viewer.js.page:325 C/image-viewer.py.page:239
#: C/image-viewer.vala.page:298
msgid ""
"Have the user select a directory rather than a file, and provide controls to "
"cycle through all of the images in a directory."
msgstr ""
"파일을 선택하기 보단 디렉터리를 선택하게 하고, 디렉터리의 모든 그림을 보여줄 "
"수 있는 컨트롤을 제어 기능을 제공합니다."

#. (itstool) path: item/p
#: C/image-viewer.c.page:240 C/image-viewer.cpp.page:228
#: C/image-viewer.js.page:328 C/image-viewer.py.page:242
#: C/image-viewer.vala.page:301
msgid ""
"Apply random filters and effects to the image when it is loaded and allow "
"the user to save the modified image."
msgstr ""
"사용자가 그림을 불러오고 수정한 그림을 저장할 때 임의 필터와 효과를 그림에 적"
"용하십시오."

#. (itstool) path: item/p
#: C/image-viewer.c.page:241 C/image-viewer.cpp.page:229
#: C/image-viewer.js.page:329 C/image-viewer.py.page:243
#: C/image-viewer.vala.page:302
msgid ""
"<link href=\"http://www.gegl.org/api.html\">GEGL</link> provides powerful "
"image manipulation capabilities."
msgstr ""
"<link href=\"http://www.gegl.org/api.html\">GEGL</link>에서는 강력한 그림 편"
"집 기능을 제공합니다."

#. (itstool) path: item/p
#: C/image-viewer.c.page:244 C/image-viewer.cpp.page:232
#: C/image-viewer.js.page:332 C/image-viewer.py.page:246
#: C/image-viewer.vala.page:305
msgid ""
"Allow the user to load images from network shares, scanners, and other more "
"complicated sources."
msgstr ""
"네트워크 공유, 스캐너, 다른 복잡한 공급원에서 그림을 불러올 수 있습니다."

#. (itstool) path: item/p
#: C/image-viewer.c.page:245 C/image-viewer.cpp.page:233
#: C/image-viewer.js.page:333 C/image-viewer.py.page:247
#: C/image-viewer.vala.page:306
msgid ""
"You can use <link href=\"http://library.gnome.org/devel/gio/unstable/\">GIO</"
"link> to handle network file tranfers and the like, and <link href=\"http://"
"library.gnome.org/devel/gnome-scan/unstable/\">GNOME Scan</link> to handle "
"scanning."
msgstr ""
"네트워크 파일 전송 같은 동작을 처리할 때 <link href=\"http://library.gnome."
"org/devel/gio/unstable/\">GIO</link>를 사용할 수 있습니다. 그리고 스캐너를 다"
"룰때는 <link href=\"http://library.gnome.org/devel/gnome-scan/unstable/"
"\">GNOME Scan</link>을 활용하시면 됩니다."

#. (itstool) path: info/desc
#: C/image-viewer.cpp.page:9
msgid "A little bit more than a simple \"Hello world\" GTKmm application."
msgstr "간단한 \"Hello world\" Gtkmm 프로그램에 약간의 무언가가 더 들어갑니다."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:32
msgid "Some basic concepts of C++/GObject programming"
msgstr "C++/GObject 프로그래밍 일부 기본 개념"

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:33
msgid "How to write a Gtk application in C++"
msgstr "C++ 프로그래밍 언어로 Gtk 프로그램을 작성하는 방법"

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:47
msgid ""
"Choose <gui>GTKmm (Simple)</gui> from the <gui>C++</gui> tab, click "
"<gui>Forward</gui>, and fill out your details on the next few pages. Use "
"<file>image-viewer</file> as project name and directory."
msgstr ""
"<gui>C++</gui> 탭에서 <gui>GTKmm (단순)</gui>을 선택하고, <gui>계속</gui>을 "
"누른 다음, 나타난 페이지에서 몇가지 자세한 내용을 입력하십시오. 프로젝트 이름"
"과 디렉터리에 <file>image-viewer</file>를 입력하십시오."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:50
msgid ""
"Make sure that <gui>Use GtkBuilder for user interface</gui> is disabled as "
"we will create the UI manually in this tutorial. Check the <link xref="
"\"guitar-tuner.cpp\">Guitar-Tuner</link> tutorial if you want to learn how "
"to use the interface builder."
msgstr ""
"앞서 따라하기 지침을 통해 사용자 인터페이스를 직접 만들 예정이므로 <gui>사용"
"자 인터페이스에 GtkBuilder 사용</gui> 설정을 껐는지 확인하십시오. 인터페이스 "
"빌더 사용법을 알아보려면 <link xref=\"guitar-tuner.cpp\">기타 조율 프로그램</"
"link> 따라하기 지침서를 확인하십시오."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:55
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. Open "
"<file>src/main.cc</file> from the <gui>Project</gui> or <gui>File</gui> "
"tabs. You should see some code which starts with the lines:"
msgstr ""
"<gui>적용</gui>을 누르면 프로젝트를 만들어줍니다. <gui>프로젝트</gui>나 <gui>"
"파일</gui>탭에서 <file>src/main.cc</file> 파일을 여십시오. 다음 줄로 시작하"
"는 일부 코드를 볼 수 있습니다:"

#. (itstool) path: item/code
#: C/image-viewer.cpp.page:56
#, no-wrap
msgid ""
"\n"
"#include &lt;gtkmm.h&gt;\n"
"#include &lt;iostream&gt;\n"
"\n"
"#include \"config.h\"&gt;"
msgstr ""
"\n"
"#include &lt;gtkmm.h&gt;\n"
"#include &lt;iostream&gt;\n"
"\n"
"#include \"config.h\"&gt;"

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:70
msgid ""
"The three <code>#include</code> lines at the top include the <code>config</"
"code> (useful autoconf build defines), <code>gtkmm</code> (user interface) "
"and <code>iostream</code> (C++-STL) libraries. Functions from these "
"libraries are used in the rest of the code."
msgstr ""
"상단의 <code>#include</code> 세 줄은 <code>config</code> (쓸만한 autoconf 빌"
"드 정의), <code>gtkmm</code> (사용자 인터페이스), <code>iostream</code> (C++-"
"STL) 라이브러리입니다. 이 라이브러리로부터 온 함수는 코드 나머지 부분에서 활"
"용합니다."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:73
msgid ""
"The <code>main</code> function creates a new (empty) window and sets the "
"window title."
msgstr ""
"<code>main</code> 함수는 (비어있는) 새 창을 만들고 창 제목을 설정합니다."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:76
msgid ""
"The <code>kit::run()</code> call starts the GTKmm main loop, which runs the "
"user interface and starts listening for events (like clicks and key "
"presses). As we give the window as an argument to that function, the "
"application will automatically exit when that window is closed."
msgstr ""
"<code>kit::run()</code> 호출은 GTKmm 메인 루프를 시작하며, 메인 루프에서는 사"
"용자 인터페이스를 실행하고 이벤트(마우스 단추 누름 키보드 키 누름) 대기를 시"
"작합니다. 창을 해당 함수에 인자로 전달하여, 창을 닫을 때 프로그램에서 자동으"
"로 빠져나갑니다."

#. (itstool) path: section/p
#: C/image-viewer.cpp.page:88
msgid ""
"Now we will bring life into the empty window. GTKmm organizes the user "
"interface with <code>Gtk::Container</code>s that can contain other widgets "
"and even other containers. Here we will use the simplest available "
"container, a <code>Gtk::Box</code>:"
msgstr ""
"이제 비어있는 창에 숨결을 불어넣겠습니다. GTKmm에는 다른 위젯을 넣을 수 있고 "
"다른 컨테이너도 넣을 수 있는 <code>Gtk::Container</code>로  사용자 인터페이스"
"를 모아둡니다. 여기서는 여러가지 컨테이너 중 가장 간단한 <code>Gtk::Box</"
"code>를 사용하겠습니다:"

#. (itstool) path: section/code
#: C/image-viewer.cpp.page:91
#, no-wrap
msgid ""
"\n"
"int\n"
"main (int argc, char *argv[])\n"
"{\n"
"\tGtk::Main kit(argc, argv);\n"
"\n"
"\tGtk::Window main_win;\n"
"\tmain_win.set_title (\"image-viewer-cpp\");\n"
"\n"
"\tGtk::Box* box = Gtk::manage(new Gtk::Box());\n"
"\tbox-&gt;set_orientation (Gtk::ORIENTATION_VERTICAL);\n"
"\tbox-&gt;set_spacing(6);\n"
"\tmain_win.add(*box);\n"
"\n"
"\timage = Gtk::manage(new Gtk::Image());\n"
"\tbox-&gt;pack_start (*image, true, true);\n"
"\n"
"\tGtk::Button* button = Gtk::manage(new Gtk::Button(\"Open Image…\"));\n"
"\tbutton-&gt;signal_clicked().connect (\n"
"\t\tsigc::ptr_fun(&amp;on_open_image));\n"
"\tbox-&gt;pack_start (*button, false, false);\n"
"\n"
"\tmain_win.show_all_children();\n"
"\tkit.run(main_win);\n"
"\n"
"\treturn 0;\n"
"}\n"
msgstr ""
"\n"
"int\n"
"main (int argc, char *argv[])\n"
"{\n"
"\tGtk::Main kit(argc, argv);\n"
"\n"
"\tGtk::Window main_win;\n"
"\tmain_win.set_title (\"image-viewer-cpp\");\n"
"\n"
"\tGtk::Box* box = Gtk::manage(new Gtk::Box());\n"
"\tbox-&gt;set_orientation (Gtk::ORIENTATION_VERTICAL);\n"
"\tbox-&gt;set_spacing(6);\n"
"\tmain_win.add(*box);\n"
"\n"
"\timage = Gtk::manage(new Gtk::Image());\n"
"\tbox-&gt;pack_start (*image, true, true);\n"
"\n"
"\tGtk::Button* button = Gtk::manage(new Gtk::Button(\"Open Image…\"));\n"
"\tbutton-&gt;signal_clicked().connect (\n"
"\t\tsigc::ptr_fun(&amp;on_open_image));\n"
"\tbox-&gt;pack_start (*button, false, false);\n"
"\n"
"\tmain_win.show_all_children();\n"
"\tkit.run(main_win);\n"
"\n"
"\treturn 0;\n"
"}\n"

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:121
msgid ""
"The first lines create the widgets we want to use: a button for opening up "
"an image, the image view widget itself and the box we will use as a "
"container."
msgstr ""
"첫번째 줄에서는 우리가 쓰려는 위젯을 만듭니다. 그림을 여는 단추, 그림 보기 위"
"젯 자체, 컨테이너로 쓸 상자 위젯이 있습니다."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:124
msgid ""
"The calls to <code>pack_start</code> add the two widgets to the box and "
"define their behaviour. The image will expand into any available space while "
"the button will just be as big as needed. You will notice that we don't set "
"explicit sizes on the widgets. In GTKmm this is usually not needed as it "
"makes it much easier to have a layout that looks good in different window "
"sizes. Next, the box is added to the window."
msgstr ""
"<code>pack_start</code> 호출로 박스에 두 위젯을 추가하고 동작을 정의합니다. "
"그림은 활용 가능한 공간만큼 충분히 확장하고, 단추는 필요한 만큼만 커집니다. "
"위젯의 크기를 분명하게 설정하지 않음을 알아채셨을 겁니다. GTKmm에서는 창 크기"
"가 달라져도 보기 좋은 배치를 쉽게하기에 직접 설정할 필요가 없습니다. 이 과정"
"이 끝나면 박스를 창에 추가합니다."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:130
msgid ""
"We need to define what happens when the user clicks on the button. GTKmm "
"uses the concept of <em>signals</em>. When the button is clicked, it fires "
"the <em>clicked</em> signal, which we can connect to some action. This is "
"done using the <code>signal_clicked().connect</code> method which tells "
"GTKmm to call the <code>on_open_image</code> function when the button is "
"clicked. We will define the <em>callback</em> in the next section."
msgstr ""
"단추를 사용자가 눌렀을 때 어떤 일이 일어날 지 정해야합니다. GTKmm에서는 <em>"
"시그널</em> 개념을 활용합니다. 단추를 누르면, 어떤 동작과 연결할 수 있는 "
"<em>clicked</em> 시그널을 방출합니다. 사용자가 단추를 누르면 "
"<code>on_image_open</code> 함수를 호출하여 그림을 이 함수의 인자로 전달하라"
"고 GTK에 지시할 때 <code>signal_clicked().connect</code> 메서드를 사용하면 됩"
"니다. 다음 섹션에서 <em>콜백</em>을 정의하겠습니디."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:134
msgid ""
"The last step is to show all widgets in the window using "
"<code>show_all_children()</code>. This is equivalent to using the "
"<code>show()</code> method on all our child widgets."
msgstr ""
"마지막 단계에서는 <code>show_all_children()</code> 함수로 창의 모든 위젯을 나"
"타냅니다. 이는 모든 하우 위젯을 나타내는 <code>show()</code> 메서드의 활용법"
"과 같습니다."

#. (itstool) path: section/p
#: C/image-viewer.cpp.page:143
msgid ""
"We will now define the signal handler for the <em>clicked</em> signal or the "
"button we mentioned before. Add this code before the <code>main</code> "
"method."
msgstr ""
"이제 <em>clicked</em> 시그널이나 위에서 언급한 단추에 대한 시그널 핸들러를 정"
"했습니다. 이 코드는 <code>main</code> 메서드 전에 추가하십시오."

#. (itstool) path: section/code
#: C/image-viewer.cpp.page:146
#, no-wrap
msgid ""
"\n"
"Gtk::Image* image = 0;\n"
"\n"
"static void\n"
"on_open_image ()\n"
"{\n"
"\tGtk::FileChooserDialog dialog(\"Open image\",\n"
"\t                              Gtk::FILE_CHOOSER_ACTION_OPEN);\n"
"\tdialog.add_button (Gtk::Stock::OPEN,\n"
"\t                   Gtk::RESPONSE_ACCEPT);\n"
"\tdialog.add_button (Gtk::Stock::CANCEL,\n"
"\t                   Gtk::RESPONSE_CANCEL);\n"
"\n"
"\tGlib::RefPtr&lt;Gtk::FileFilter&gt; filter =\n"
"\t\tGtk::FileFilter::create();\n"
"\tfilter-&gt;add_pixbuf_formats();\n"
"\tfilter-&gt;set_name(\"Images\");\n"
"\tdialog.add_filter (filter);\n"
"\n"
"\tconst int response = dialog.run();\n"
"\tdialog.hide();\n"
"\n"
"\tswitch (response)\n"
"\t{\n"
"\t\tcase Gtk::RESPONSE_ACCEPT:\n"
"\t\t\timage-&gt;set(dialog.get_filename());\n"
"\t\t\tbreak;\n"
"\t\tdefault:\n"
"\t\t\tbreak;\n"
"\t}\n"
"}\n"
msgstr ""
"\n"
"Gtk::Image* image = 0;\n"
"\n"
"static void\n"
"on_open_image ()\n"
"{\n"
"\tGtk::FileChooserDialog dialog(\"Open image\",\n"
"\t                              Gtk::FILE_CHOOSER_ACTION_OPEN);\n"
"\tdialog.add_button (Gtk::Stock::OPEN,\n"
"\t                   Gtk::RESPONSE_ACCEPT);\n"
"\tdialog.add_button (Gtk::Stock::CANCEL,\n"
"\t                   Gtk::RESPONSE_CANCEL);\n"
"\n"
"\tGlib::RefPtr&lt;Gtk::FileFilter&gt; filter =\n"
"\t\tGtk::FileFilter::create();\n"
"\tfilter-&gt;add_pixbuf_formats();\n"
"\tfilter-&gt;set_name(\"Images\");\n"
"\tdialog.add_filter (filter);\n"
"\n"
"\tconst int response = dialog.run();\n"
"\tdialog.hide();\n"
"\n"
"\tswitch (response)\n"
"\t{\n"
"\t\tcase Gtk::RESPONSE_ACCEPT:\n"
"\t\t\timage-&gt;set(dialog.get_filename());\n"
"\t\t\tbreak;\n"
"\t\tdefault:\n"
"\t\t\tbreak;\n"
"\t}\n"
"}\n"

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:181
msgid ""
"The dialog for choosing the file is created using the <code>Gtk::"
"FileChooserDialog</code> constructor. This takes the title and type of the "
"dialog. In our case, it is an <em>Open</em> dialog."
msgstr ""
"파일을 선택하는 대화상자를 <code>Gtk::FileChooserDialog</code> 생성자로 만들"
"었습니다. 이 생성자는 제목과 대화상자 형식을 취합니다. 지금 같은 경우는 <em>"
"열기</em> 대화상자입니다."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:185
msgid ""
"The next two lines add an <em>Open</em> and a <em>Close</em> button to the "
"dialog."
msgstr ""
"다음 두 줄은 대화상자의 <em>열기</em>, <em>닫기</em> 단추를 추가합니다."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:187
msgid ""
"The second argument to the <code>add_button()</code> method is a value to "
"identify the clicked button. We use predefined values provided by GTKmm "
"here, too."
msgstr ""
"<code>add_button()</code> 메서드의 두번째 인자는 누른 단추를 식별하는 값입니"
"다. GTKmm에서 주는 기 정의값을 사용했습니다."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:192
msgid ""
"The next two lines restrict the <gui>Open</gui> dialog to only display files "
"which can be opened by <code>Gtk::Image</code>. A filter object is created "
"first; we then add all kinds of files supported by <code>Gdk::Pixbuf</code> "
"(which includes most image formats like PNG and JPEG) to the filter. "
"Finally, we set this filter to be the <gui>Open</gui> dialog's filter."
msgstr ""
"다음 두 줄은 <gui>열기</gui> 대화 상자에서 <code>Gtk::Image</code>로만 열 수 "
"있는 파일을 표시하도록 제한합니다. 필터 객체를 우선 만듭니다. 그 다음 "
"<code>Gdk::Pixbuf</code>에서 지원하는 파일 종류(PNG와 JPEG 같은 대부분의 그"
"림 형식)를 필터에 추가합니다. 마지막으로 이 필터를 <gui>열기</gui> 대화 상자"
"의 필터로 설정합니다."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:193
msgid ""
"<code>Glib::RefPtr</code> is a smart pointer used here, that makes sure that "
"the filter is destroyed when there is no reference to it anymore."
msgstr ""
"<code>Glib::RefPtr</code>는 여기서 사용한 지능형 포인터로, 더 이상 참조할 코"
"드가 없을 때, 필터를 해체했는지 확인합니다."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:197
msgid ""
"<code>dialog.run</code> displays the <gui>Open</gui> dialog. The dialog will "
"wait for the user to choose an image; when they do, <code>dialog.run</code> "
"will return the value <code>Gtk::RESPONSE_ACCEPT</code> (it would return "
"<code>Gtk::RESPONSE_CANCEL</code> if the user clicked <gui>Cancel</gui>). "
"The <code>switch</code> statement tests for this."
msgstr ""
"<code>dialog.run</code>은 <gui>열기</gui> 대화 상자를 표시합니다. 대화 상자"
"는 사용자의 그림 선택을 기다립니다. 사용자가 그림을 선택하면 <code>dialog."
"run</code> 에서 <code>Gtk::RESPONSE_ACCEPT</code> 값을 반환합니다(<gui>취소</"
"gui>를 누르면 <code>Gtk::RESPONSE_CANCEL</code> 값을 반환합니다). "
"<code>switch</code> 구문에서는 어떤 값을 반환했는지 확인합니다."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:200
msgid ""
"We hide the <gui>Open</gui> dialog because we don't need it any more. The "
"dialog would be hidden later anyway, as it is only a local variable and is "
"destroyed (and therefore hidden) when the scope ends."
msgstr ""
"이 메서드의 마지막 줄에서는 <gui>열기</gui> 대화상자는 더 이상 필요 없으니 해"
"체합니다.  지역 변수로서 실행 범위가 끝나면 나중에 해체하므로(숨김) 대화 상자"
"는 여하튼 나중에 숨길 수도 있습니다."

#. (itstool) path: item/p
#: C/image-viewer.cpp.page:203
msgid ""
"Assuming that the user did click <gui>Open</gui>, the next line loads the "
"file into the <code>Gtk::Image</code> so that it is displayed."
msgstr ""
"사용자가 <gui>열기</gui>를 눌렀다고 한 상황에서, 다음 줄에서 파일을 "
"<code>Gtk::Image</code>에 불러와서 화면에 표시합니다."

#. (itstool) path: section/p
#: C/image-viewer.cpp.page:217
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"image-viewer/image-viewer.cc\">reference code</link>."
msgstr ""
"지침서를 따라하는 실행하는 과정에 문제가 있다면, <link href=\"image-viewer/"
"image-viewer.cc\">참조 코드</link>와 여러분의 코드를 비교해보십시오."

#. (itstool) path: info/title
#: C/image-viewer.js.page:8
msgctxt "text"
msgid "Image viewer (JavaScript)"
msgstr "그림 보기(JavaScript)"

#. (itstool) path: info/desc
#: C/image-viewer.js.page:11
msgid ""
"A little bit more than a simple \"Hello world\" application - write an image "
"viewer in GTK+. Includes an introduction to the JavaScript language."
msgstr ""
"간단한 \"Hello world\" 프로그램에 약간의 무언가가 더 들어갑니다 - GTK+의 그"
"림 보기를 작성합니다. JavaScript 언어 소개 내용도 들어있습니다."

#. (itstool) path: credit/name
#: C/image-viewer.js.page:15 C/image-viewer.py.page:15
msgid "Jonh Wendell"
msgstr "Jonh Wendell"

#. (itstool) path: synopsis/p
#: C/image-viewer.js.page:32 C/image-viewer.py.page:32
msgid ""
"In this tutorial, we're going to write a very simple GTK application that "
"loads and displays an image file. You will learn how to:"
msgstr ""
"아 따라하기 안내서에서는 그림 파일을 불러와서 나타내는 매우 간단한 GTK 프로그"
"램을 작성해보겠습니다. 다음 내용을 배웁니다:"

#. (itstool) path: item/p
#: C/image-viewer.js.page:34
msgid "Write a basic GTK user interface in JavaScript"
msgstr "JavaScript로 기본 GTK 사용자 인터페이스 작성하기"

#. (itstool) path: item/p
#: C/image-viewer.js.page:35 C/image-viewer.py.page:35
msgid "Deal with events by connecting signals to signal handlers"
msgstr "시그널 핸들러에 시그널을 연결하여 이벤트 처리하기"

#. (itstool) path: item/p
#: C/image-viewer.js.page:36 C/image-viewer.py.page:36
msgid "Lay out GTK user interfaces using containers"
msgstr "컨테이너로 GTK 사용자 인터페이스 배치하기"

#. (itstool) path: item/p
#: C/image-viewer.js.page:37 C/image-viewer.py.page:37
msgid "Load and display image files"
msgstr "그림 파일 불러오고 표시하기"

#. (itstool) path: item/p
#: C/image-viewer.js.page:42
msgid "An installed copy of the <em>gjs</em> interpreter"
msgstr "<em>gjs</em> 인터프리터 설치 사본"

#. (itstool) path: item/p
#: C/image-viewer.js.page:43
msgid "Basic knowledge of any object-orientated programming language"
msgstr "객체지향 프로그래밍 언어 기본 지식"

#. (itstool) path: item/p
#: C/image-viewer.js.page:57
msgid ""
"Choose <gui>Generic Javascript</gui> from the <gui>JS</gui> tab, click "
"<gui>Forward</gui>, and fill out your details on the next few pages. Use "
"<file>image-viewer</file> as project name and directory."
msgstr ""
"<gui>JS</gui> 탭에서 <gui>일반 Javascript</gui>을 선택하고 <gui>다음</gui>을 "
"누른 후 일부 페이지에 세부 내용을 채워나가십시오 프로젝트 이름과 디렉터리 이"
"름을 <file>image-viewer</file>로 설정하십시오."

#. (itstool) path: item/p
#: C/image-viewer.js.page:60
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. Open "
"<file>src/main.js</file> from the <gui>Project</gui> or <gui>File</gui> "
"tabs. It contains very basic example code."
msgstr ""
"<gui>적용</gui>을 누르면 프로젝트를 만들어줍니다. <gui>프로젝트</gui>나 <gui>"
"파일</gui>탭에서 <file>src/main.js</file> 파일을 여십시오. 매우 기본적인 예"
"제 코드가 들어있습니다."

#. (itstool) path: section/title
#: C/image-viewer.js.page:67
msgid "JavaScript basics: Hello World"
msgstr "JavaScript 기본: Hello World"

#. (itstool) path: section/p
#: C/image-viewer.js.page:68
msgid ""
"Before we start writing the image viewer, let's find out more about the way "
"JavaScript is used in GNOME. Of course, your very first contact with any "
"programming language should be the Hello World program which can already be "
"found in <file>main.js</file>:"
msgstr ""
"그림 보기 프로그램 작성을 시작하기 전에 그놈에서 JavaScript를 활용하는 방법"
"을 더 알아보기로 하겠습니다. 아, 물론 어떤 프로그래밍 언어를 처음 접하는 코드"
"는 <file>main.js</file> 파일로도 찾을 수 있는 Hello world 프로그램입니다:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:69
#, no-wrap
msgid "print (\"Hello world!\");"
msgstr "print (\"Hello world!\");"

#. (itstool) path: section/p
#: C/image-viewer.js.page:70
msgid ""
"This should look quite natural if you're familiar with almost any other "
"programming language. The function <code>print</code> is called with the "
"argument <code>\"Hello world!\"</code>, which will be printed on the screen. "
"Note that each line of code ends with a semicolon."
msgstr ""
"다른 대부분의 프로그래밍 언어에 익숙하다면 이 부분이 자연스러워 보일지도 모르"
"겠습니다. <code>print</code> 함수는 화면에 출력할 <code>\"Hello world!\"</"
"code> 인자 값으로 호출합니다. 참고로 각 코드의 줄은 세미콜론으로 끝납니다."

#. (itstool) path: section/title
#: C/image-viewer.js.page:74
msgid "Classes in JavaScript"
msgstr "JavaScript 클래스"

#. (itstool) path: section/p
#: C/image-viewer.js.page:75
msgid "This is the standard way to define a class in JavaScript:"
msgstr "이 방법이 JavaScript에서 클래스를 정의하는 표준 방식입니다:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:76
#, no-wrap
msgid ""
"\n"
"function MyClass () {\n"
"  this._init ();\n"
"}\n"
"\n"
"MyClass.prototype = {\n"
"\n"
"  _init: function () {\n"
"    this.propertyA = \"This is an object's field\";\n"
"    this.propertyB = 10;\n"
"  },\n"
"\n"
"  aMethod: function (arg1, arg2) {\n"
"    print (\"inside aMethod: \" + arg1 + \" \" + arg2);\n"
"  },\n"
"\n"
"  dumpProperties: function () {\n"
"    print (this.propertyA);\n"
"    print (this.propertyB);\n"
"  }\n"
"\n"
"}"
msgstr ""
"\n"
"function MyClass () {\n"
"  this._init ();\n"
"}\n"
"\n"
"MyClass.prototype = {\n"
"\n"
"  _init: function () {\n"
"    this.propertyA = \"This is an object's field\";\n"
"    this.propertyB = 10;\n"
"  },\n"
"\n"
"  aMethod: function (arg1, arg2) {\n"
"    print (\"inside aMethod: \" + arg1 + \" \" + arg2);\n"
"  },\n"
"\n"
"  dumpProperties: function () {\n"
"    print (this.propertyA);\n"
"    print (this.propertyB);\n"
"  }\n"
"\n"
"}"

#. (itstool) path: section/p
#: C/image-viewer.js.page:98
msgid ""
"This defines a class called <code>MyClass</code>. Let's go through each part "
"of the class definition:"
msgstr ""
"<code>MyClass</code> 클래스를 정의합니다. 클래스 정의 각 부분을 살펴보겠습니"
"다:"

#. (itstool) path: item/p
#: C/image-viewer.js.page:101
msgid ""
"<code>function MyClass</code> is the constructor of the class — its name "
"must match the class's name. You can access any member of the class by using "
"the <code>this</code> object; here, the constructor calls the class's "
"<code>_init</code> method."
msgstr ""
"<code>function MyClass</code> 는 클래스 생성자입니다. 이름은 클래스 이름과 같"
"아야합니다. <code>this</code> 객체를 활용하여 클래서의 어떤 구성원이든 접근"
"할 수 있습니다. 여기서, 생성자는 클래스의 <code>_init</code> 메서드를 호출합"
"니다."

#. (itstool) path: item/p
#: C/image-viewer.js.page:104
msgid ""
"The <code>MyClass.prototype</code> block is where you define the "
"<em>structure</em> of the class. Each class is made up of methods "
"(functions) and fields (variables); there are three methods and two fields "
"in this example."
msgstr ""
"<code>MyClass.prototype</code> 블록은 클래스의 <em>structure</em>를 정의합니"
"다. 각 클래스는 메서드(함수)와 필드(변수)로 만듭니다. 예제에서는 메서드 3개"
"와 필드 2개로 이루어졌습니다."

#. (itstool) path: item/p
#: C/image-viewer.js.page:107
msgid ""
"The first method defined here is called <code>_init</code>, and we specify "
"that it is a function with no arguments:"
msgstr ""
"여기서 정의한 첫 메서드는 <code>_init</code>이며, 인자 값을 주지 않는 함수로 "
"지정합니다:"

#. (itstool) path: item/code
#: C/image-viewer.js.page:108
#, no-wrap
msgid "_init: function ()"
msgstr "_init: function ()"

#. (itstool) path: item/p
#: C/image-viewer.js.page:109
msgid ""
"We write the function inside some curly braces. Two fields are defined here, "
"<code>propertyA</code> and <code>propertyB</code>. The first is set to a "
"string and the second is set to an integer (10). The function doesn't return "
"any value."
msgstr ""
"중괄호 안에 함수를 작성하겠습니다. <code>propertyA</code>와 <code>propertyB</"
"code> 필드 두개를 여기에서 정했습니다. 처음은 문자열로 설정하고 두번째는 정수"
"(10진수) 값으로 설정합니다. 이 함수는 어떤 값도 반환하지 않습니다."

#. (itstool) path: item/p
#: C/image-viewer.js.page:112
msgid ""
"The next method is called <code>aMethod</code> and has two arguments, which "
"it prints out when you call it. The final method is <code>dumpProperties</"
"code>, and prints the fields <code>propertyA</code> and <code>propertyB</"
"code>."
msgstr ""
"다음 메서드는 <code>aMethod</code>이며, 이 함수를 호출할 때 화면에 출력할 인"
"자 두 개가 있습니다. 마지막은 <code>propertyA</code>, <code>propertyB</code> "
"필드를 출력하는 <code>dumpProperties</code>메서드입니다."

#. (itstool) path: item/p
#: C/image-viewer.js.page:115
msgid ""
"Note how the class definition (prototype) is arranged; each function "
"definition is separated by a comma."
msgstr ""
"클래스 정의(프로토타입) 정돈 법을 정리해두십시오. 각 함수 정의는 쉼표로 구분"
"합니다."

#. (itstool) path: section/p
#: C/image-viewer.js.page:119
msgid "Now that MyClass has been defined, we can play with it:"
msgstr "이제 MyClass 클래스를 정의했으니 가지고 놀 수 있습니다:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:120
#, no-wrap
msgid ""
"\n"
"var o = new MyClass ();\n"
"o.aMethod (\"Hello\", \"world\");\n"
"o.propertyA = \"Just changed its value!\";\n"
"o.dumpProperties ();"
msgstr ""
"\n"
"var o = new MyClass ();\n"
"o.aMethod (\"Hello\", \"world\");\n"
"o.propertyA = \"Just changed its value!\";\n"
"o.dumpProperties ();"

#. (itstool) path: section/p
#: C/image-viewer.js.page:125
msgid ""
"This code creates a new instance of the class called <code>o</code>, runs "
"<code>aMethod</code>, changes <code>propertyA</code> to a different string, "
"and then calls <code>dumpProperties</code> (which outputs the fields)."
msgstr ""
"이 코드는 클래스의 새 인스턴스 <code>o</code>를 만들고, <code>aMethod</code>"
"를 실행하며 <code>propertyA</code> 값을 다른 문자열 값으로 바꾼 후, (필드 내"
"용을 출력하는) <code>dumpProperties</code> 메서드를 호출합니다."

#. (itstool) path: section/p
#: C/image-viewer.js.page:126
msgid ""
"Save the code in the <file>main.js</file> and then run it by using "
"<guiseq><gui>Run</gui><gui>Execute</gui></guiseq> from the menu or using the "
"toolbar."
msgstr ""
"<file>main.js</file> 코드를 저장하고 메뉴에서 <guiseq><gui>실행</gui><gui>실"
"행</gui></guiseq>을 누르거나 도구 모음의 단추를 눌러 실행하십시오."

#. (itstool) path: section/title
#: C/image-viewer.js.page:131 C/image-viewer.py.page:70
msgid "A first Gtk application"
msgstr "첫 gtk 프로그램"

#. (itstool) path: section/p
#: C/image-viewer.js.page:132
msgid "Let's see what a very basic Gtk application looks like in JavaScript:"
msgstr ""
"JavaScript로 작성한 Gtk 프로그램의 가장 기본적인 부분이 어떻게 생겼는지 보도"
"록 하겠습니다:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:133
#, no-wrap
msgid ""
"\n"
"const Gtk = imports.gi.Gtk;\n"
"\n"
"Gtk.init (null, null);\n"
"\n"
"var w = new Gtk.Window ({title: \"Image Viewer Demo\"});\n"
"w.show ();\n"
"\n"
"Gtk.main ();"
msgstr ""
"\n"
"const Gtk = imports.gi.Gtk;\n"
"\n"
"Gtk.init (null, null);\n"
"\n"
"var w = new Gtk.Window ({title: \"Image Viewer Demo\"});\n"
"w.show ();\n"
"\n"
"Gtk.main ();"

#. (itstool) path: section/p
#: C/image-viewer.js.page:142 C/image-viewer.py.page:95
msgid "Let's take a look at what's happening:"
msgstr "어떤 동작이 일어나는지 살펴보죠:"

#. (itstool) path: item/p
#: C/image-viewer.js.page:145 C/image-viewer.py.page:98
msgid ""
"The first line imports the Gtk namespace (that is, it includes the Gtk "
"library). The libraries are provided by GObject Introspection (gi), which "
"provides language bindings for many GNOME libraries."
msgstr ""
"첫 줄은 (Gtk 라이브러리가 있는) Gtk 이름 영역을 임포팅합니다. 라이브러리에는 "
"많은 그놈 라이브러리의 언어 바인딩이 들어있는 GObject 인트로스펙션(gi)이 있습"
"니다."

#. (itstool) path: item/p
#: C/image-viewer.js.page:148
msgid ""
"<code>Gtk.init</code> initializes the Gtk library; this statement is "
"mandatory for all Gtk programs."
msgstr ""
"<code>Gtk.init</code>은 Gtk 라이브러리를 초기화합니다. 모든 Gtk 프로그램의 필"
"수 구문입니다."

#. (itstool) path: item/p
#: C/image-viewer.js.page:151
msgid ""
"The next line creates the main window by creating a new <code>Gtk.Window</"
"code> object. You can pass several properties to the window's constructor by "
"using the syntax <code>{property: value, property: value, ...}</code>. In "
"this case we are setting the title of the window."
msgstr ""
"다음 줄에서는 새 <code>Gtk.Window</code> 객체로 메인 창을 만듭니다. "
"<code>{property: value, property: value, ...}</code> 문법으로 창 생성자에 몇"
"가지 속성 값을 전달할 수 있습니다. 지금 같은 경우는 창 제목을 설정합니다."

#. (itstool) path: item/p
#: C/image-viewer.js.page:152
msgid ""
"The next line explicitly shows the window. In Gtk, every widget is hidden by "
"default."
msgstr ""
"다음 줄에서는 분명하게 창을 보여줍니다. Gtk에서는 모든 창을 기본으로 숨겨둡니"
"다."

#. (itstool) path: item/p
#: C/image-viewer.js.page:153
msgid ""
"Finally, <code>Gtk.main</code> runs the main loop — in other words, it "
"executes the program. The main loop listens for events (signals) from the "
"user interface and then calls a signal handler which will do something "
"useful. We'll learn more about signals shortly."
msgstr ""
"마지막으로 <code>Gtk.main</code>에서 메인 루프를 실행합니다. 다시 말해, 프로"
"그램을 실행합니다. 메인 루프에서는 사용자 인터페이스의 이벤트(시그널)를 기다"
"리며, 어디선가 내보낸 시그널을 찾으면 쓸만한 시그널 핸들러를 호출합니다. 시그"
"널에 대해 간단하게 앞으로 더 알아볼 예정입니다."

#. (itstool) path: section/p
#: C/image-viewer.js.page:156
msgid ""
"Save the code in <file>main.js</file> and run it. You will notice that the "
"application does not quit when you close the window. This is because we "
"haven't set up a signal handler to deal with the window's <code>destroy</"
"code> (close) signal yet. We'll do this shortly, but for now you can just "
"hit <keyseq><key>Ctrl</key><key>C</key></keyseq> in the terminal window to "
"quit the program."
msgstr ""
"<file>main.js</file> 파일에 코드를 저장하고 실행해보십시오. 창을 닫아도 프로"
"그램이 안 끝나는 모습이 나타납니다. 아직 창의 <code>destroy</code>(닫기) 시그"
"널을 시그널 핸들러에서 처리하도록 설정하지 않았기 때문입니다. 곧 이 부분을 진"
"행하겠지만, 지금은 터미널 창에서 <keyseq><key>Ctrl</key><key>C</key></"
"keyseq> 키를 눌러 프로그램을 끝낼 수 있습니다."

#. (itstool) path: section/title
#: C/image-viewer.js.page:161
msgid "Adding classes"
msgstr "클래스 추가"

#. (itstool) path: section/p
#: C/image-viewer.js.page:162
msgid ""
"The proper way of doing Gtk programming is by using classes. Let's rewrite "
"the simple code you just wrote using classes:"
msgstr ""
"적당한 Gtk 프로그래밍 방식은 클래스 사용 방식입니다. 간단한 코드를 클래스 코"
"드로 다시 작성해보도록 하겠습니다:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:163
#, no-wrap
msgid ""
"\n"
"const Gtk = imports.gi.Gtk;\n"
"\n"
"function ImageViewer () {\n"
"  this._init ();\n"
"}\n"
"\n"
"ImageViewer.prototype = {\n"
"  _init: function () {\n"
"    this.window = new Gtk.Window ({title: \"Image Viewer Demo\"});\n"
"    this.window.show ();\n"
"  }\n"
"}\n"
"\n"
"Gtk.init (null, null);\n"
"var iv = new ImageViewer ();\n"
"Gtk.main ();"
msgstr ""
"\n"
"const Gtk = imports.gi.Gtk;\n"
"\n"
"function ImageViewer () {\n"
"  this._init ();\n"
"}\n"
"\n"
"ImageViewer.prototype = {\n"
"  _init: function () {\n"
"    this.window = new Gtk.Window ({title: \"Image Viewer Demo\"});\n"
"    this.window.show ();\n"
"  }\n"
"}\n"
"\n"
"Gtk.init (null, null);\n"
"var iv = new ImageViewer ();\n"
"Gtk.main ();"

#. (itstool) path: section/p
#: C/image-viewer.js.page:181
msgid ""
"Notice that the program is the same; we just moved the window creation code "
"to our own <code>ImageViewer</code> class. The class's constructor calls the "
"<code>_init</code> method, which creates and shows the window. We then "
"create an instance of the class before running the main loop (<code>Gtk."
"main</code>)."
msgstr ""
"프로그램이 같다는 사실을 알아채실겁니다. 창을 만드는 코드를 "
"<code>ImageViewer</code>클래스로 옮겼을 뿐입니다. 이 클래스 생성자에서는 창"
"을 만들고 보여주는 <code>_init</code> 메서드를 호출합니다. 그 다음 메인 루프"
"(<code>Gtk.main</code>)를 실행하기 전 클래스의 인스턴스를 만듭니다."

#. (itstool) path: section/p
#: C/image-viewer.js.page:182
msgid ""
"This code is modular and can be split into multiple files easily. This makes "
"it cleaner and easier to read."
msgstr ""
"이 코드는 모듈식이며 여러 파일로 쉽게 나눌 수 있습니다. 이렇게 하면 코드가 간"
"명해지고 알아보기 쉬워집니다."

#. (itstool) path: section/title
#: C/image-viewer.js.page:186 C/image-viewer.py.page:119
msgid "Signals"
msgstr "시그널"

#. (itstool) path: section/p
#: C/image-viewer.js.page:187 C/image-viewer.py.page:120
msgid ""
"Signals are one of the key concepts in Gtk programming. Whenever something "
"happens to an object, it emits a signal; for example, when a button is "
"clicked it gives off the <code>clicked</code> signal. If you want your "
"program to do something when that event occurs, you must connect a function "
"(a \"signal handler\") to that signal. Here's an example:"
msgstr ""
"시그널은 Gtk 프로그래밍의 핵심 개념입니다. 객체에 언제 어떤 일이 일어나든지 "
"시그널을 내보냅니다. 예를 들어 단추를 누르면 <code>clicked</code> 시그널을 내"
"줍니다. 동작이 일어났을때 프로그램에서 무언가를 하게 하려면 시그널에 함수(시"
"그널 핸들러)를 연결해야합니다. 예제는 다음과 같습니다:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:188
#, no-wrap
msgid ""
"\n"
"function button_clicked () {\n"
"  print (\"you clicked me!\");\n"
"}\n"
"var b = new Gtk.Button ({label:\"Click me\"});\n"
"b.connect (\"clicked\", button_clicked);"
msgstr ""
"\n"
"function button_clicked () {\n"
"  print (\"you clicked me!\");\n"
"}\n"
"var b = new Gtk.Button ({label:\"Click me\"});\n"
"b.connect (\"clicked\", button_clicked);"

#. (itstool) path: section/p
#: C/image-viewer.js.page:194 C/image-viewer.py.page:127
msgid ""
"The last two lines create a <code>Gtk.Button</code> called <code>b</code> "
"and connect its <code>clicked</code> signal to the <code>button_clicked</"
"code> function, which is defined above. Every time the button is clicked, "
"the code in the <code>button_clicked</code> function will be executed. It "
"just prints a message here."
msgstr ""
"마지막 두 줄은 <code>Gtk.Button</code>의 인스턴스 <code>b</code>를 만들고 "
"<code>clicked</code> 시그널을 위에서 정의한 <code>button_clicked</code> 함수"
"에 연결합니다. 항상 단추를 누를 때마다 <code>button_clicked</code> 함수를 실"
"행합니다. 이 함수는 여기에 적어둔 메시지를 출력하는 동작만 합니다."

#. (itstool) path: section/p
#: C/image-viewer.js.page:195
msgid "The syntax for connecting any signal to a function is:"
msgstr "시그널을 함수에 연결하는 문법은 다음과 같습니다:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:196
#, no-wrap
msgid ""
"\n"
"object.connect (&lt;signal_name&gt;, &lt;function_to_be_called&gt;);"
msgstr ""
"\n"
"object.connect (&lt;signal_name&gt;, &lt;function_to_be_called&gt;);"

#. (itstool) path: section/p
#: C/image-viewer.js.page:198
msgid ""
"You can find signal definitions for any object in the <link href=\"https://"
"developer.gnome.org/gtk3/stable/gtkobjects.html\">GTK class reference</link>."
msgstr ""
"<link href=\"https://developer.gnome.org/gtk3/stable/gtkobjects.html\">GTK 클"
"래스 참고서</link>에서 임의의 객체에 대한 시그널 정의를 찾아볼 수 있습니다."

#. (itstool) path: note/p
#: C/image-viewer.js.page:201
msgid ""
"You can simplify the code by making use of an inline function definition:"
msgstr "인라인 함수 정의 활용으로 코드를 단순하게 작성할 수 있습니다:"

#. (itstool) path: note/code
#: C/image-viewer.js.page:202
#, no-wrap
msgid ""
"\n"
"b.connect (\"clicked\", function () { print (\"you clicked me!\"); });"
msgstr ""
"\n"
"b.connect (\"clicked\", function () { print (\"you clicked me!\"); });"

#. (itstool) path: section/title
#: C/image-viewer.js.page:209
msgid "Closing the window"
msgstr "창 닫기"

#. (itstool) path: section/p
#: C/image-viewer.js.page:210
msgid ""
"When you close a Gtk window it's not really closed, it's hidden. This allows "
"you to keep the window around (which is useful if you want to ask the user "
"if they really want to close the window, for example)."
msgstr ""
"Gtk 창을 닫을 때 실제로는 창이 닫히지 않고 숨겨져 있습니다. 이렇게 하여 창을 "
"유지할 수 있습니다(예를 들자면 사용자에게 정말 창을 닫을지 물어볼 때 이런 방"
"식이 쓸만합니다)."

#. (itstool) path: section/p
#: C/image-viewer.js.page:211
msgid ""
"In our case, we really do just want to close the window. The simplest way of "
"doing this is by connecting the <code>hide</code> signal of the GtkWindow "
"object to a function that closes the application. Go back to the <file>image-"
"viewer.js</file> file and add the following code to the <code>_init</code> "
"method, on the line above <code>this.window.show</code>:"
msgstr ""
"지금과 같은 경우는 창을 실제로 닫으려고 합니다. 가장 간단하게 처리하는 방법"
"은 프로그램을 닫는 함수에 GtkWindow 객체의 <code>hide</code> 시그널을 연결하"
"는 방법입니다. <file>image-viewer.js</file> 파일로 돌아가서 다음 코드를 "
"<code>_init</code> 메서드의 <code>this.window.show</code> 코드 위에 추가하십"
"시오:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:212
#, no-wrap
msgid "this.window.connect (\"hide\", Gtk.main_quit);"
msgstr "this.window.connect (\"hide\", Gtk.main_quit);"

#. (itstool) path: section/p
#: C/image-viewer.js.page:213
msgid ""
"This connects the <code>hide</code> signal of the window to Gtk's "
"<code>main_quit</code> function, which ends the execution of the Gtk main "
"loop. Once the main loop finishes, the function <code>Gtk.main</code> "
"returns. Our program would continue to run any code written after the "
"<code>Gtk.main ();</code> line, but since we don't have any code after that "
"point, the program just ends."
msgstr ""
"이 코드는<code>hide</code> 시그널을 Gtk 메인 루프 실행을 끝내는 Gtk의 "
"<code>main_quit</code> 함수에 연결합니다. 메인 루프를 끝내고 나면 <code>Gtk."
"main</code> 함수에서 반환 값을 내보냅니다. 이 프로그램에서는 <code>Gtk.main "
"();</code> 코드 줄 다음에 작성한 어떤 코드든 계속 실행하려 하겠지만 이후에 어"
"떤 코드도 없기 때문에 프로그램을 그냥 끝냅니다."

#. (itstool) path: section/title
#: C/image-viewer.js.page:217 C/image-viewer.py.page:131
msgid "Containers: Laying-out the user interface"
msgstr "컨테이너: 사용자 인터페이스를 두는 공간"

#. (itstool) path: section/p
#: C/image-viewer.js.page:218 C/image-viewer.py.page:132
msgid ""
"Widgets (controls, such as buttons and labels) can be arranged in the window "
"by making use of <em>containers</em>. You can organize the layout by mixing "
"different types of containers, like boxes and grids."
msgstr ""
"(단추 레이블 같은 컨트롤) 위젯은 <em>컨테이너</em>를 사용하여 창에서 배치를 "
"정돈할 수 있습니다. 박스, 그리드 등 여러가지 형태의 컨테이너를 섞어 사용하여 "
"배치를 이룰 수 있습니다."

#. (itstool) path: section/p
#: C/image-viewer.js.page:219 C/image-viewer.py.page:133
msgid ""
"A <code>Gtk.Window</code> is itself a type of container, but you can only "
"put one widget directly into it. We would like to have two widgets, an image "
"and a button, so we must put a \"higher-capacity\" container inside the "
"window to hold the other widgets. A number of <link href=\"http://library."
"gnome.org/devel/gtk/stable/GtkContainer.html\">container types</link> are "
"available, but we will use a <code>Gtk.Box</code> here. A <code>Gtk.Box</"
"code> can hold several widgets, organized horizontally or vertically. You "
"can do more complicated layouts by putting several boxes inside another box "
"and so on."
msgstr ""
"<code>Gtk.Window</code>는 그 자체로 컨테이너의 한 종류지만 이 컨테이너에는 위"
"젯을 한번에 하나씩만 넣을 수 있습니다. 여기에 우리는 그림과 단추, 두가지 위젯"
"을 넣으려고 하기 때문에, 창 하나에 다른 위젯을 붙여둘 \"공간이 더 많은\" 컨테"
"이너를 넣어야합니다. 쓸 수 있는 <link href=\"http://library.gnome.org/devel/"
"gtk/stable/GtkContainer.html\">컨테이너 형식</link>은 여러가지가 있지만, 여기"
"서는 <code>Gtk.Box</code>를 사용합니다. <code>Gtk.Box</code> 는 가로 세로 방"
"향으로 여러 위젯을 붙일 수 있습니다. 다른 여러가지 박스를 붙여서 보다 더 복잡"
"한 배치를 만들 수 있습니다."

#. (itstool) path: note/p
#: C/image-viewer.js.page:221 C/image-viewer.py.page:135
msgid ""
"There is a graphical user interface designer called <app>Glade</app> "
"integrated in <app>Anjuta</app> which makes UI design really easy. For this "
"simple example, however, we will code everything manually."
msgstr ""
"<app>안주타</app>에 통합한 <app>글레이드</app> 사용자 인터페이스 디자인 프로"
"그램이 있습니다. 이 프로그램은 사용자 인터페이스를 쉽게 만들 수 있게 해줍니"
"다. 그러나 이 간단한 예제로 모든 코드를 직접 작성해보겠습니다."

#. (itstool) path: section/p
#: C/image-viewer.js.page:223
msgid ""
"Let's add the box and widgets to the window. Insert the following code into "
"the <code>_init</code> method, immediately above the <code>this.window.show</"
"code> line:"
msgstr ""
"박스와 위젯을 창에 추가해보겠습니다. 다음 코드를 <code>_init</code> 메서드의 "
"<code>this.window.show</code>줄 바로 위에 넣으십시오:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:224
#, no-wrap
msgid ""
"\n"
"var main_box = new Gtk.Box ({orientation: Gtk.Orientation.VERTICAL, spacing: 0});\n"
"this.window.add (main_box);"
msgstr ""
"\n"
"var main_box = new Gtk.Box ({orientation: Gtk.Orientation.VERTICAL, spacing: 0});\n"
"this.window.add (main_box);"

#. (itstool) path: section/p
#: C/image-viewer.js.page:227
msgid ""
"The first line creates a <code>Gtk.Box</code> called <code>main_box</code> "
"and sets two of its properties: the <code>orientation</code> is set to "
"vertical (so widgets are arranged in a column), and the <code>spacing</code> "
"between the widgets is set to 0 pixels. The next line then adds the newly-"
"created <code>Gtk.Box</code> to the window."
msgstr ""
"첫 줄은 <code>Gtk.Box</code>의 인스턴스 <code>main_box</code>를 만들고 인스턴"
"스의 속성 두개를 설정합니다. <code>orientation</code>은 수직 방향으로 설정(따"
"라서 위젯을 수직 방향으로 배치합니다)하고, 위젯 사이의 공간 <code>spacing</"
"code> 값은 0 픽셀로 설정합니다. 다음 줄은 창에 새로 만든 <code>Gtk.Box</code>"
"를 추가합니다."

#. (itstool) path: section/p
#: C/image-viewer.js.page:228 C/image-viewer.py.page:146
msgid ""
"So far the window only contains an empty <code>Gtk.Box</code>, and if you "
"run the program now you will see no changes at all (the <code>Gtk.Box</code> "
"is a transparent container, so you can't see that it's there)."
msgstr ""
"지금까지 창에는 빈 <code>Gtk.Box</code>만 넣었기에 지금 프로그램을 실행하면 "
"어떤 변화도 없음을 볼 수 있습니다(<code>Gtk.Box</code>는 투명 컨테이너라서 "
"그 무엇도 볼 수 없습니다)."

#. (itstool) path: section/title
#: C/image-viewer.js.page:232 C/image-viewer.py.page:150
msgid "Packing: Adding widgets to the container"
msgstr "패킹: 컨테이너에 위젯 추가"

#. (itstool) path: section/p
#: C/image-viewer.js.page:233
msgid ""
"To add some widgets to the <code>Gtk.Box</code>, insert the following code "
"directly below the <code>this.window.add (main_box)</code> line:"
msgstr ""
"일부 위젯을 <code>Gtk.Box</code>에 추가하려면 다음 코드를 직접 <code>this."
"window.add (main_box)</code> 코드 줄 아래에 넣으십시오:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:234
#, no-wrap
msgid ""
"\n"
"this.image = new Gtk.Image ();\n"
"main_box.pack_start (this.image, true, true, 0);"
msgstr ""
"\n"
"this.image = new Gtk.Image ();\n"
"main_box.pack_start (this.image, true, true, 0);"

#. (itstool) path: section/p
#: C/image-viewer.js.page:237
msgid ""
"The first line creates a new <code>Gtk.Image</code> called <code>image</"
"code>, which will be used to display an image file. Then, the image widget "
"is added (<em>packed</em>) into the <code>main_box</code> container using "
"<code>Gtk.Box</code>'s <link href=\"http://library.gnome.org/devel/gtk/"
"stable/GtkBox.html#gtk-box-pack-start\"><code>pack_start</code></link> "
"method."
msgstr ""
"첫 줄에서는 그림 파일을 나타낼 때 쓸 새 <code>Gtk.Image</code> 인스턴스 "
"<code>image</code>를 만듭니다. 그 다음 그림 위젯을 <code>Gtk.Box</code>의 "
"<link href=\"http://library.gnome.org/devel/gtk/stable/GtkBox.html#gtk-box-"
"pack-start\"><code>pack_start</code></link> 메서드로 <code>main_box</code>에 "
"추가(<em>패킹</em>)합니다."

#. (itstool) path: section/p
#: C/image-viewer.js.page:238
msgid ""
"<code>pack_start</code> takes 4 arguments: the widget that is to be added to "
"the <code>Gtk.Box</code> (<code>child</code>); whether the <code>Gtk.Box</"
"code> should grow larger when the new widget is added (<code>expand</code>); "
"whether the new widget should take up all of the extra space created if the "
"<code>Gtk.Box</code> gets bigger (<code>fill</code>); and how much space "
"there should be, in pixels, between the widget and its neighbors inside the "
"<code>Gtk.Box</code> (<code>padding</code>)."
msgstr ""
"<code>pack_start</code> 메서드에는 <code>Gtk.Box</code>에 추가할 위젯"
"(<code>child</code>) 인자, 새 위젯을 추가했을 때 <code>Gtk.Box</code>를 더 크"
"게 할지 여부(<code>expand</code>) 인자, <code>Gtk.Box</code>가 커졌을 때 모"
"든 여분 공간을 차지할 지 여부(<code>fill</code>) 인자, <code>Gtk.Box</code>에"
"서 위젯 간 설정할 간격(<code>padding</code>) 인자가 있습니다."

#. (itstool) path: section/p
#: C/image-viewer.js.page:239 C/image-viewer.py.page:158
msgid ""
"Gtk containers (and widgets) dynamically expand to fill the available space, "
"if you let them. You don't position widgets by giving them a precise x,y-"
"coordinate location in the window; rather, they are positioned relative to "
"one another. This makes handling window resizing much easier, and widgets "
"should automatically take a sensible size in most situations."
msgstr ""
"Gtk 컨테이너(와 위젯)은 여분 공간을 동적으로 채우도록 설정하면 그렇게 보여줍"
"니다. 창에서 정확한 x,y 좌표 값을 주어 위젯 위치를 설정할 수 없습니다. 다만 "
"서로 상대적 위치에 둘 수 있습니다. 이렇게 하면 창 크기 조절을 더 쉽게할 수 있"
"고, 위젯든 대부분의 경우 타당한 크기를 가집니다."

#. (itstool) path: section/p
#: C/image-viewer.js.page:240 C/image-viewer.py.page:159
msgid ""
"Also note how the widgets are organized in a hierarchy. Once packed in the "
"<code>Gtk.Box</code>, the <code>Gtk.Image</code> is considered a <em>child</"
"em> of the <code>Gtk.Box</code>. This allows you to treat all of the "
"children of a widget as a group; for example, you could hide the <code>Gtk."
"Box</code>, which would also hide all of its children at the same time."
msgstr ""
"또한 위젯은 서로 계층적 관계를 가짐을 참고하십시오. <code>Gtk.Box</code>에 패"
"킹하면, <code>Gtk.Image</code>는 <code>Gtk.Box</code>의 <em>하위 요소</em>로 "
"간주합니다. 이렇게 하여 모든 하위 위젯을 그룹 단위로 다룰 수 있습니다. 예를 "
"들면, <code>Gtk.Box</code>와 이 컨테이너에 들어있는 모든 하위 컨테이나와 위젯"
"을 동시에 숨길 수 있습니다."

#. (itstool) path: section/p
#: C/image-viewer.js.page:241 C/image-viewer.py.page:160
msgid "Now insert these two lines, below the two you just added:"
msgstr "이제 다음 두 줄을 방금 추가한 두 줄 아래에 추가하십시오:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:242
#, no-wrap
msgid ""
"\n"
"var open_button = new Gtk.Button ({label: \"Open a picture...\"});\n"
"main_box.pack_start (open_button, false, false, 0);"
msgstr ""
"\n"
"var open_button = new Gtk.Button ({label: \"Open a picture...\"});\n"
"main_box.pack_start (open_button, false, false, 0);"

#. (itstool) path: section/p
#: C/image-viewer.js.page:245
msgid ""
"These lines are similar to the first two, but this time they create a "
"<code>Gtk.Button</code> and add it to <code>main_box</code>. Notice that we "
"are setting the <code>expand</code> argument (the second one) to "
"<code>false</code> here, whereas it was set to <code>true</code> for the "
"<code>Gtk.Image</code>. This will cause the image to take up all available "
"space and the button to take only the space it needs. When you maximize the "
"window, the button size will remain the same, but the image size will "
"increase, taking up all of the rest of the window."
msgstr ""
"이 줄은 처음 두 줄과 비슷하지만 <code>Gtk.Button</code>을 만들어 "
"<code>main_box</code>에 추가합니다. 여기서 (두번째) <code>expand</code> 인자 "
"값을 <code>Gtk.Image</code>에 대해서는 <code>true</code> 로 설정했음에 반해 "
"<code>false</code>로 설정했음에 유의하십시오. 이 함수로 그림을 활용 가능한 공"
"간을 차지하게 하며 단추는 필요한 공간만 차지하게 합니다. 창을 죄대로 확장하"
"면 단추 크기는 그대로지만, 그림은 창 나머지 공간을 차지하면서 커집니다."

#. (itstool) path: section/p
#: C/image-viewer.js.page:246
msgid ""
"Finally, we must change the <code>this.window.show ();</code> line to read:"
msgstr ""
"마지막으로 <code>this.window.show ();</code> 함수를 다음으로 바꿔야합니다:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:247
#, no-wrap
msgid "this.window.show_all ();"
msgstr "this.window.show_all ();"

#. (itstool) path: section/p
#: C/image-viewer.js.page:248
msgid ""
"This will show the child of the Gtk window, and all of its children, and its "
"children's children, and so on. (Remember that Gtk widgets are all hidden by "
"default.)"
msgstr ""
"이 코드는 Gtk 창의 하위 구성 요소와 해당 요소의 모든 하위 구성 요소를 보여줍"
"니다(기본적으로 Gtk 위젯은 숨겨둔 상태임을 기억하십시오)."

#. (itstool) path: section/title
#: C/image-viewer.js.page:252 C/image-viewer.py.page:169
msgid ""
"Loading the image: Connecting to the button's <code>clicked</code> signal"
msgstr "그림을 불러옵니다: 단추의 <code>clicked</code> 시그널에 연결"

#. (itstool) path: section/p
#: C/image-viewer.js.page:253
msgid ""
"When the user clicks on the <gui>Open</gui> button, a dialog should appear "
"so that the user can choose a picture. Once chosen, the picture should be "
"loaded and shown in the image widget."
msgstr ""
"사용자가 <gui>열기</gui> 단추를 누르면, 대화 상자가 나타나 그림을 선택할 수 "
"있습니다. 그림을 선택하고 나면 그림을 불러오고 그림 위젯에 표시합니다."

#. (itstool) path: section/p
#: C/image-viewer.js.page:254
msgid ""
"The first step is to connect the <code>clicked</code> signal of the button "
"to a signal handler function, which we call <code>_openClicked</code>. Put "
"this code immediately after the <code>var open_button = new Gtk.Button</"
"code> line where the button was created:"
msgstr ""
"첫 단계에서는 단추의 <code>clicked</code> 시그널을, 우리가 호출할 시그널 핸들"
"러 함수 <code>_openClicked</code>에 연결합니다. 이 코드를 단추를 만드는 "
"<code>var open_button = new Gtk.Button</code> 줄 바로 다음에 넣으십시오:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:255
#, no-wrap
msgid ""
"\n"
"open_button.connect (\"clicked\", Lang.bind (this, this._openClicked));"
msgstr ""
"\n"
"open_button.connect (\"clicked\", Lang.bind (this, this._openClicked));"

#. (itstool) path: section/p
#: C/image-viewer.js.page:257
msgid ""
"We are using the <em>Lang</em> JavaScript helper here. It allows us to "
"connect a <em>class method</em> to the signal, rather than a plain function "
"(without a class) which we had used before for the window's <code>hide</"
"code> signal. Don't worry about this for now, it's just a technical detail. "
"For it to work, you also need to put the following line at the top of the "
"file:"
msgstr ""
"<em>Lang</em> JavaScript 보조 라이브러리를 사용하고 있습니다. 창의 "
"<code>hide</code> 시그널에 대한 (클래스 없는) 생짜 함수를 쓰기보다는, 시그널"
"에 <em>클래스 메서드</em> 를 연결할 수 있습니다. 지금은 걱정하실 필요가 없습"
"니다. 그냥 기술적으로 자세한 이야기일 뿐이죠. 동작하게 하려면 파일의 상단에 "
"다음 줄을 넣어야합니다:"

#. (itstool) path: section/code
#: C/image-viewer.js.page:258
#, no-wrap
msgid "const Lang = imports.lang;"
msgstr "const Lang = imports.lang;"

#. (itstool) path: section/title
#: C/image-viewer.js.page:262 C/image-viewer.py.page:180
msgid "Loading the image: Writing the signal's callback"
msgstr "그림 불러오기: 시그널 콜백 작성"

#. (itstool) path: section/p
#: C/image-viewer.js.page:263
msgid ""
"Now we can create the <code>_openClicked()</code> method. Insert the "
"following into the <code>ImageViewer.prototype</code> code block, after the "
"<code>_init</code> method (and not forgetting the comma):"
msgstr ""
"이제 <code>_openClicked()</code> 메서드를 만들었습니다. 다음 코드를 "
"<code>_init</code> 메서드 다음의 <code>ImageViewer.prototype</code> 코드 블럭"
"에 넣으십시오(그리고 콤마 표시를 빼먹지 마십시오):"

#. (itstool) path: section/code
#: C/image-viewer.js.page:264
#, no-wrap
msgid ""
"\n"
"  _openClicked: function () {\n"
"    var chooser = new Gtk.FileChooserDialog ({title: \"Select an image\",\n"
"                                              action: Gtk.FileChooserAction.OPEN,\n"
"                                              transient_for: this.window,\n"
"                                              modal: true});\n"
"    chooser.add_button (Gtk.STOCK_CANCEL, 0);\n"
"    chooser.add_button (Gtk.STOCK_OPEN, 1);\n"
"    chooser.set_default_response (1);\n"
"\n"
"    var filter = new Gtk.FileFilter ();\n"
"    filter.add_pixbuf_formats ();\n"
"    chooser.filter = filter;\n"
"\n"
"    if (chooser.run () == 1)\n"
"      this.image.file = chooser.get_filename ();\n"
"\n"
"    chooser.destroy ();\n"
"  }"
msgstr ""
"\n"
"  _openClicked: function () {\n"
"    var chooser = new Gtk.FileChooserDialog ({title: \"Select an image\",\n"
"                                              action: Gtk.FileChooserAction.OPEN,\n"
"                                              transient_for: this.window,\n"
"                                              modal: true});\n"
"    chooser.add_button (Gtk.STOCK_CANCEL, 0);\n"
"    chooser.add_button (Gtk.STOCK_OPEN, 1);\n"
"    chooser.set_default_response (1);\n"
"\n"
"    var filter = new Gtk.FileFilter ();\n"
"    filter.add_pixbuf_formats ();\n"
"    chooser.filter = filter;\n"
"\n"
"    if (chooser.run () == 1)\n"
"      this.image.file = chooser.get_filename ();\n"
"\n"
"    chooser.destroy ();\n"
"  }"

#. (itstool) path: item/p
#: C/image-viewer.js.page:286
msgid ""
"The line beginning with <code>var chooser</code> creates an <gui>Open</gui> "
"dialog, which the user can use to choose files. We set four properties: the "
"title of the dialog; the action (type) of the dialog (it's an \"open\" "
"dialog, but we could have used <code>SAVE</code> if the intention was to "
"save a file; <code>transient_for</code>, which sets the parent window of the "
"dialog; and <code>modal</code> which, if set to <code>true</code>, prevents "
"the user from clicking on another area of the application until the dialog "
"is closed."
msgstr ""
"<code>var chooser</code>로 시작하는 줄에서는 사용자가 파일을 선택할 수 있는 "
"<gui>열기</gui> 대화 상자를 만듭니다. 대화 상자 제목, 대화 상자 동작(형식) "
"(\"열기\" 대화 상자지만, 파일을 저장하려고 할 때는 <code>SAVE</code>를 쓸 수 "
"있습니다), 대화 상자의 상위 창을 설정하는 <code>transient_for</code>,  "
"<code>true</code>로 설정하면 대화상자를 닫기 전까지 그 어떤 것도 누를 수 없"
"게 하는 <code>modal</code> 속성을 지정합니다."

#. (itstool) path: item/p
#: C/image-viewer.js.page:289 C/image-viewer.py.page:203
msgid ""
"The next two lines add <gui>Cancel</gui> and <gui>Open</gui> buttons to the "
"dialog. The second argument of the <code>add_button</code> method is the "
"(integer) value that is returned when the button is pressed: 0 for "
"<gui>Cancel</gui> and 1 for <gui>Open</gui>."
msgstr ""
"다음 두 줄은 대화상자에 <gui>취소</gui> 단추와 <gui>열기</gui> 단추를 만듭니"
"다. <code>add_button</code> 메서드의 두번째  인자는 단추를 눌렀을 때 반환하"
"는 (정수) 값입니다. <gui>취소</gui>는 0, <gui>열기</gui>는 1입니다."

#. (itstool) path: item/p
#: C/image-viewer.js.page:293 C/image-viewer.py.page:207
msgid ""
"<code>set_default_response</code> determines the button that will be "
"activated if the user double-clicks a file or presses <key>Enter</key>. In "
"our case, we are using the <gui>Open</gui> button as default (which has the "
"value 1)."
msgstr ""
"<code>set_default_response</code>에서는 파일을 두번 누르거나 <key>Enter</"
"key> 키를 눌렀을 때 활성화 할 단추를 결정합니다. 지금의 경우는 <gui>열기</"
"gui> 단추(단추 값은 1)를 기본으로 사용합니다."

#. (itstool) path: item/p
#: C/image-viewer.js.page:296 C/image-viewer.py.page:210
msgid ""
"The next three lines restrict the <gui>Open</gui> dialog to only display "
"files which can be opened by <code>Gtk.Image</code>. A filter object is "
"created first; we then add all kinds of files supported by <code>Gdk.Pixbuf</"
"code> (which includes most image formats like PNG and JPEG) to the filter. "
"Finally, we set this filter to be the <gui>Open</gui> dialog's filter."
msgstr ""
"다음 두 줄은 <gui>열기</gui> 대화 상자에서 <code>Gtk.Image</code>로만 열 수 "
"있는 파일을 표시하도록 제한합니다. 필터 객체를 우선 만듭니다. 그 다음 "
"<code>Gdk.Pixbuf</code>에서 지원하는 파일 종류(PNG와 JPEG 같은 대부분의 그림 "
"형식)를 필터에 추가합니다. 마지막으로 이 필터를 <gui>열기</gui> 대화 상자의 "
"필터로 설정합니다."

#. (itstool) path: item/p
#: C/image-viewer.js.page:299
msgid ""
"<code>chooser.run</code> displays the <gui>Open</gui> dialog. The dialog "
"will wait for the user to choose an image; when they do, <code>chooser.run</"
"code> will return the value <output>1</output> (it would return <output>0</"
"output> if the user clicked <gui>Cancel</gui>). The <code>if</code> "
"statement tests for this."
msgstr ""
"<code>dialog.run</code>은 <gui>열기</gui> 대화 상자를 표시합니다. 대화 상자"
"는 사용자의 그림 선택을 기다립니다. 사용자가 그림을 선택하면 <code>dialog."
"run</code> 에서 <output>1</output> 값을 반환합니다(<gui>취소</gui>를 누르면 "
"<output>0</output> 값을 반환합니다). <code>if</code> 구문에서는 어떤 값을 반"
"환했는지 확인합니다."

#. (itstool) path: item/p
#: C/image-viewer.js.page:301 C/image-viewer.py.page:215
msgid ""
"Assuming that the user did click <gui>Open</gui>, the next line sets the "
"<code>file</code> property of the <code>Gtk.Image</code> to the filename of "
"the image selected by the user. The <code>Gtk.Image</code> will then load "
"and display the chosen image."
msgstr ""
"사용자가 <gui>열기</gui>를 눌렀다고 한 상황에서, 다음 줄에서 <code>Gtk."
"Image</code>의 <code>file</code> 속성 값을 사용자가 선택한 그림 파일 이름으"
"로 설정합니다. <code>Gtk.Image</code>는 선택한 그림을 불러오고 화면에 표시합"
"니다."

#. (itstool) path: item/p
#: C/image-viewer.js.page:304 C/image-viewer.py.page:218
#: C/image-viewer.vala.page:273
msgid ""
"In the final line of this method, we destroy the <gui>Open</gui> dialog "
"because we don't need it any more."
msgstr ""
"이 메서드의 마지막 줄에서는 <gui>열기</gui> 대화상자는 더 이상 필요 없으니 해"
"체합니다."

#. (itstool) path: section/p
#: C/image-viewer.js.page:312
msgid ""
"All of the code you need should now be in place, so try running the code. "
"That should be it; a fully-functioning image viewer (and a whistlestop tour "
"of JavaScript and Gtk) in not much time at all!"
msgstr ""
"필요한 모든 코드를 제자리에 넣었으니 코드를 실행해보겠습니다. 제대로 동작할겝"
"니다. 이렇게 하여 기능이 완전하게 동작하는 그림 보기 프로그램(JavaScript와 "
"Gtk를 활용한 간단한 맛보기)을 그리 길지 않은 시간 동안에 만들었습니다!"

#. (itstool) path: section/p
#: C/image-viewer.js.page:317
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"image-viewer/image-viewer.js\">reference code</link>."
msgstr ""
"지침서를 따라하는 실행하는 과정에 문제가 있다면, <link href=\"image-viewer/"
"image-viewer.js\">참조 코드</link>와 여러분의 코드를 비교해보십시오."

#. (itstool) path: info/title
#: C/image-viewer.py.page:8
msgctxt "text"
msgid "Image viewer (Python)"
msgstr "그림 보기(Python)"

#. (itstool) path: info/desc
#: C/image-viewer.py.page:11
msgid ""
"A little bit more than a simple \"Hello world\" application - write an image "
"viewer in GTK."
msgstr ""
"간단한 \"Hello world\" 프로그램에 약간의 무언가가 더 들어갑니다 - GTK로 그림 "
"보기 프로그램을 작성합니다."

#. (itstool) path: item/p
#: C/image-viewer.py.page:34
msgid "Write a basic GTK user interface in Python"
msgstr "파이썬 언어로 기본 GTK 사용자 인터페이스 작성하기"

#. (itstool) path: item/p
#: C/image-viewer.py.page:42
msgid "Basic knowledge of the python programming language"
msgstr "파이썬 프로그래밍 언어 기본 지식"

#. (itstool) path: item/p
#: C/image-viewer.py.page:56
msgid ""
"Choose <gui>PyGTK (automake)</gui> from the <gui>Python</gui> tab, click "
"<gui>Continue</gui>, and fill out your details on the next few pages. Use "
"<file>image-viewer</file> as project name and directory."
msgstr ""
"<gui>Python</gui> 탭에서 <gui>PyGTK (automake)</gui>를 선택하고, <gui>계속</"
"gui>을 누른 다음, 나타난 페이지에서 몇가지 자세한 내용을 입력하십시오. 프로젝"
"트 이름과 디렉터리에 <file>image-viewer</file>를 입력하십시오."

#. (itstool) path: item/p
#: C/image-viewer.py.page:59
msgid ""
"Be sure to disable <gui>Use GtkBuilder for user interface</gui> as we will "
"build the user interface manually in this example. For an example of using "
"the interface designer, check the <link xref=\"guitar-tuner.py\">Guitar-"
"Tuner demo</link>."
msgstr ""
"이 예제의 사용자 인터페이스를 직접 만들 예정이므로 <gui>사용자 인터페이스에 "
"GtkBuilder 사용</gui> 설정을 껐는지 확인하십시오. 인터페이스 빌더 사용법을 알"
"아보려면 <link xref=\"guitar-tuner.py\">기타 조율 프로그램 데모</link>를 확인"
"하십시오."

#. (itstool) path: item/p
#: C/image-viewer.py.page:64
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. Open "
"<file>src/image_viewer.py</file> from the <gui>Project</gui> or <gui>File</"
"gui> tabs. It contains very basic example code."
msgstr ""
"<gui>적용</gui>을 누르면 프로젝트를 만들어줍니다. <gui>프로젝트</gui>나 <gui>"
"파일</gui>탭에서 <file>src/image_viewer.py</file>를 여십시오.여기엔 매우 기본"
"적인 예제 코드가 들어있습니다."

#. (itstool) path: section/p
#: C/image-viewer.py.page:71
msgid "Let's see what a very basic Gtk application looks like in Python:"
msgstr "아주 기본적인 파이썬 Gtk 프로그램이 어떻게 생겼는지 살펴보겠습니다:"

#. (itstool) path: section/code
#: C/image-viewer.py.page:72
#, no-wrap
msgid ""
"\n"
"from gi.repository import Gtk, GdkPixbuf, Gdk\n"
"import os, sys\n"
"\n"
"class GUI:\n"
"\tdef __init__(self):\n"
"\t\twindow = Gtk.Window()\n"
"\t\twindow.set_title (\"Hello World\")\n"
"\t\twindow.connect_after('destroy', self.destroy)\n"
"\n"
"\t\twindow.show_all()\n"
"\n"
"\tdef destroy(window, self):\n"
"\t\tGtk.main_quit()\n"
"\n"
"def main():\n"
"\tapp = GUI()\n"
"\tGtk.main()\n"
"\n"
"if __name__ == \"__main__\":\n"
"    sys.exit(main())\n"
"\n"
"  "
msgstr ""
"\n"
"from gi.repository import Gtk, GdkPixbuf, Gdk\n"
"import os, sys\n"
"\n"
"class GUI:\n"
"\tdef __init__(self):\n"
"\t\twindow = Gtk.Window()\n"
"\t\twindow.set_title (\"Hello World\")\n"
"\t\twindow.connect_after('destroy', self.destroy)\n"
"\n"
"\t\twindow.show_all()\n"
"\n"
"\tdef destroy(window, self):\n"
"\t\tGtk.main_quit()\n"
"\n"
"def main():\n"
"\tapp = GUI()\n"
"\tGtk.main()\n"
"\n"
"if __name__ == \"__main__\":\n"
"    sys.exit(main())\n"
"\n"
"  "

#. (itstool) path: item/p
#: C/image-viewer.py.page:101
msgid ""
"In the <code>__init__</code> method of the <code>GUI</code> class creates an "
"(empty) <code>Gtk.Window</code>, sets its title and then connects a signal "
"to quit the application once the window is closed. That's pretty simple "
"overall, more on signals later."
msgstr ""
"<code>GUI</code> 클래스의 <code>__init__</code> 메서드에서 (비어 있는) "
"<code>Gtk.Window</code>를 만들고, 제목을 설정하며, 창을 닫을 떄 프로그램을 끝"
"내는 시그널을 연결합니다. 전체적으로 좀 간단한데 시그널에 대한 더 많은 내용"
"은 나중에 다루겠습니다."

#. (itstool) path: item/p
#: C/image-viewer.py.page:106
msgid ""
"Next, <code>destroy</code> is defined which just quits the application. It "
"is called by the <code>destroy</code> signal connected above."
msgstr ""
"다음, <code>destroy</code>는 프로그램 끝내기를 정의합니다. 위에서 연결한 "
"<code>destroy</code> 시그널에서 호출합니다."

#. (itstool) path: item/p
#: C/image-viewer.py.page:110
msgid "The rest of the file does initialisation for Gtk and displays the GUI."
msgstr "파일의 나머지 부분에서는 Gtk를 초기화하고 GUI를 보여줍니다."

#. (itstool) path: section/p
#: C/image-viewer.py.page:114
msgid ""
"This code is ready to run, so try it using <guiseq><gui>Run</"
"gui><gui>Execute</gui></guiseq>. It should show you an empty window."
msgstr ""
"코드를 실행할 준비가 끝났으니 <guiseq><gui>실행</gui><gui>실행</gui></guiseq>"
"을 눌러보겠습니다. 빈 창이 나타나야합니다."

#. (itstool) path: section/code
#: C/image-viewer.py.page:121
#, no-wrap
msgid ""
"\n"
"def button_clicked () :\n"
"  print \"you clicked me!\"\n"
"\n"
"b = new Gtk.Button (\"Click me\")\n"
"b.connect_after ('clicked', button_clicked)"
msgstr ""
"\n"
"def button_clicked () :\n"
"  print \"you clicked me!\"\n"
"\n"
"b = new Gtk.Button (\"Click me\")\n"
"b.connect_after ('clicked', button_clicked)"

#. (itstool) path: section/p
#: C/image-viewer.py.page:137
msgid ""
"Let's add the box and widgets to the window. Insert the following code into "
"the <code>__init__</code> method, immediately after the <code>window."
"connect_after</code> line:"
msgstr ""
"창에 박스와 위젯을 추가해보겠습니다. 다음 코드를 <code>window.connect_after</"
"code><code>__init__</code> 메서드의 <code>window.connect_after</code> 줄 바"
"로 다음에 넣으십시오:"

#. (itstool) path: section/code
#: C/image-viewer.py.page:138
#, no-wrap
msgid ""
"\n"
"box = Gtk.Box()\n"
"box.set_spacing (5)\n"
"box.set_orientation (Gtk.Orientation.VERTICAL)\n"
"window.add (box)\n"
"\n"
msgstr ""
"\n"
"box = Gtk.Box()\n"
"box.set_spacing (5)\n"
"box.set_orientation (Gtk.Orientation.VERTICAL)\n"
"window.add (box)\n"
"\n"

#. (itstool) path: section/p
#: C/image-viewer.py.page:145
msgid ""
"The first line creates a <code>Gtk.Box</code> called <code>box</code> and "
"the following lines set two of its properties: the <code>orientation</code> "
"is set to vertical (so the widgets are arranged in a column), and the "
"<code>spacing</code> between the widgets is set to 5 pixels. The next line "
"then adds the newly-created <code>Gtk.Box</code> to the window."
msgstr ""
"첫 줄은 <code>Gtk.Box</code>의 인스턴스 <code>main_box</code>를 만들고 인스턴"
"스의 속성 두개를 설정합니다. <code>orientation</code>은 수직 방향으로 설정(따"
"라서 위젯을 수직 방향으로 배치합니다)하고, 위젯 사이의 공간 <code>spacing</"
"code> 값은 5 픽셀로 설정합니다. 다음 줄은 창에 새로 만든 <code>Gtk.Box</code>"
"를 추가합니다."

#. (itstool) path: section/p
#: C/image-viewer.py.page:151
msgid ""
"To add some widgets to the <code>Gtk.Box</code>, insert the following code "
"directly below the <code>window.add (box)</code> line:"
msgstr ""
"<code>Gtk.Box</code>에 어떤 위젯을 추가하려면 다음 코드를 직접 <code>window."
"add (box)</code> 줄 다음에 추가하십시오:"

#. (itstool) path: section/code
#: C/image-viewer.py.page:152
#, no-wrap
msgid ""
"\n"
"self.image = Gtk.Image()\n"
"box.pack_start (self.image, False, False, 0)"
msgstr ""
"\n"
"self.image = Gtk.Image()\n"
"box.pack_start (self.image, False, False, 0)"

#. (itstool) path: section/p
#: C/image-viewer.py.page:155
msgid ""
"The first line creates a new <code>Gtk.Image</code> called <code>image</"
"code>, which will be used to display an image file. As we need that later on "
"in the signal handler, we will define it as a class-wide variable. You need "
"to add <code>image = 0</code> to the beginning of the <code>GUI</code> "
"class. Then, the image widget is added (<em>packed</em>) into the <code>box</"
"code> container using GtkBox's <link href=\"http://library.gnome.org/devel/"
"gtk/stable/GtkBox.html#gtk-box-pack-start\"><code>pack_start</code></link> "
"method."
msgstr ""
"첫 줄에서는 그림 파일을 나타낼 때 쓸 새 <code>Gtk.Image</code> 인스턴스 "
"<code>image</code>를 만듭니다. 다음에 시그널 핸들러가 필요하므로 클래스 범위 "
"변수를 정의하겠습니다. <code>GUI</code> 클래스 시작 부분에 <code>image = 0</"
"code>를 추가하십시오. 그 다음 GtkBox의 <link href=\"http://library.gnome.org/"
"devel/gtk/stable/GtkBox.html#gtk-box-pack-start\"><code>pack_start</code></"
"link> 메서드로  <code>box</code> 컨테이너에 그림 위젯을 추가(<em>패킹</em>)합"
"니다."

#. (itstool) path: section/p
#: C/image-viewer.py.page:157
msgid ""
"<code>pack_start</code> takes 4 arguments: the widget that is to be added to "
"the GtkBox (<code>child</code>); whether the <code>Gtk.Box</code> should "
"grow larger when the new widget is added (<code>expand</code>); whether the "
"new widget should take up all of the extra space created if the <code>Gtk."
"Box</code> gets bigger (<code>fill</code>); and how much space there should "
"be, in pixels, between the widget and its neighbors inside the <code>Gtk."
"Box</code> (<code>padding</code>)."
msgstr ""
"<code>pack_start</code> 메서드에는 <code>Gtk.Box</code>에 추가할 위젯"
"(<code>child</code>) 인자, 새 위젯을 추가했을 때 <code>Gtk.Box</code>를 더 크"
"게 할지 여부(<code>expand</code>) 인자, <code>Gtk.Box</code>가 커졌을 때 모"
"든 여분 공간을 차지할 지 여부(<code>fill</code>) 인자, <code>Gtk.Box</code>에"
"서 위젯 간 설정할 간격(<code>padding</code>) 인자가 있습니다."

#. (itstool) path: section/code
#: C/image-viewer.py.page:161
#, no-wrap
msgid ""
"\n"
"button = Gtk.Button (\"Open a picture...\")\n"
"box.pack_start (button, False, False, 0)\n"
msgstr ""
"\n"
"button = Gtk.Button (\"Open a picture...\")\n"
"box.pack_start (button, False, False, 0)\n"

#. (itstool) path: section/p
#: C/image-viewer.py.page:165
msgid ""
"These lines are similar to the first two, but this time they create a "
"<code>Gtk.Button</code> and add it to <code>box</code>. Notice that we are "
"setting the <code>expand</code> argument (the second one) to <code>False</"
"code> here, whereas it was set to <code>True</code> for the <code>Gtk.Image</"
"code>. This will cause the image to take up all available space and the "
"button to take only the space it needs. When you maximize the window, the "
"button size will remain the same, but the image size will increase, taking "
"up all of the rest of the window."
msgstr ""
"이 줄은 처음 두 줄과 비슷하지만 <code>Gtk.Button</code>을 만들어 "
"<code>main_box</code>에 추가합니다. 여기서 (두번째) <code>expand</code> 인자 "
"값을 <code>Gtk.Image</code>에 대해서는 <code>True</code> 로 설정했음에 반해 "
"<code>False</code>로 설정했음에 유의하십시오. 이 함수로 그림을 활용 가능한 공"
"간을 차지하게 하며 단추는 필요한 공간만 차지하게 합니다. 창을 죄대로 확장하"
"면 단추 크기는 그대로지만, 그림은 창 나머지 공간을 차지하면서 커집니다."

#. (itstool) path: section/p
#: C/image-viewer.py.page:170
msgid ""
"When the user clicks on the <gui>Open Image...</gui> button, a dialog should "
"appear so that the user can choose a picture. Once chosen, the picture "
"should be loaded and shown in the image widget."
msgstr ""
"사용자가 <gui>그림 열기...</gui> 단추를 누르면, 대화 상자가 나타나 그림을 선"
"택할 수 있습니다. 그림을 선택하고 나면 그림을 불러오고 그림 위젯에 표시합니"
"다."

#. (itstool) path: section/p
#: C/image-viewer.py.page:171
msgid ""
"The first step is to connect the <code>clicked</code> signal of the button "
"to a signal handler function, which we call <code>on_open_clicked</code>. "
"Put this code immediately after the <code>button = Gtk.Button()</code> line "
"where the button was created:"
msgstr ""
"첫 단계에서는 단추의 <code>clicked</code> 시그널을, 우리가 호출할 시그널 핸들"
"러 함수 <code>on_open_clicked</code>에 연결합니다. 이 코드를 단추를 만드는 "
"<code>button = Gtk.Button()</code> 줄 바로 다음에 넣으십시오:"

#. (itstool) path: section/code
#: C/image-viewer.py.page:172
#, no-wrap
msgid ""
"\n"
"button.connect_after('clicked', self.on_open_clicked)\n"
msgstr ""
"\n"
"button.connect_after('clicked', self.on_open_clicked)\n"

#. (itstool) path: section/p
#: C/image-viewer.py.page:175
msgid ""
"This will connect the <code>clicked</code> signal to <code>on_open_clicked</"
"code> method that we will define below."
msgstr ""
"이 코드는 아래에 정의할 <code>on_open_clicked</code> 메서드에 <code>clicked</"
"code>시그널을 연결합니다."

#. (itstool) path: section/p
#: C/image-viewer.py.page:181
msgid ""
"Now we can create the <code>on_open_clicked</code> method. Insert the "
"following into the <code>GUI</code> class code block, after the "
"<code>__init__</code> method:"
msgstr ""
"이제 <code>on_open_clicked</code> 메서드를 만들겠습니다. <code>GUI</code> 클"
"래스 코드 블록의 <code>__init__</code> 메서드 다음에 다음 코드를 넣으십시오:"

#. (itstool) path: section/code
#: C/image-viewer.py.page:182
#, no-wrap
msgid ""
"\n"
"def on_open_clicked (self, button):\n"
"\tdialog = Gtk.FileChooserDialog (\"Open Image\", button.get_toplevel(), Gtk.FileChooserAction.OPEN);\n"
"\tdialog.add_button (Gtk.STOCK_CANCEL, 0)\n"
"\tdialog.add_button (Gtk.STOCK_OK, 1)\n"
"\tdialog.set_default_response(1)\n"
"\n"
"\tfilefilter = Gtk.FileFilter ()\n"
"\tfilefilter.add_pixbuf_formats ()\n"
"\tdialog.set_filter(filefilter)\n"
"\n"
"\tif dialog.run() == 1:\n"
"\t\tself.image.set_from_file(dialog.get_filename())\n"
"\n"
"\tdialog.destroy()"
msgstr ""
"\n"
"def on_open_clicked (self, button):\n"
"\tdialog = Gtk.FileChooserDialog (\"Open Image\", button.get_toplevel(), Gtk.FileChooserAction.OPEN);\n"
"\tdialog.add_button (Gtk.STOCK_CANCEL, 0)\n"
"\tdialog.add_button (Gtk.STOCK_OK, 1)\n"
"\tdialog.set_default_response(1)\n"
"\n"
"\tfilefilter = Gtk.FileFilter ()\n"
"\tfilefilter.add_pixbuf_formats ()\n"
"\tdialog.set_filter(filefilter)\n"
"\n"
"\tif dialog.run() == 1:\n"
"\t\tself.image.set_from_file(dialog.get_filename())\n"
"\n"
"\tdialog.destroy()"

#. (itstool) path: item/p
#: C/image-viewer.py.page:200
msgid ""
"The line beginning with <code>dialog</code> creates an <gui>Open</gui> "
"dialog, which the user can use to choose files. We set three properties: the "
"title of the dialog; the action (type) of the dialog (it's an \"open\" "
"dialog, but we could have used <code>SAVE</code> if the intention was to "
"save a file; and <code>transient_for</code>, which sets the parent window of "
"the dialog."
msgstr ""
"<code>dialog</code>로 시작하는 줄에서는 사용자가 파일을 선택할 수 있는 <gui>"
"열기</gui> 대화 상자를 만듭니다. 대화 상자 제목, 대화 상자 동작(형식) (\"열기"
"\" 대화 상자지만, 파일을 저장하려고 할 때는 <code>SAVE</code>를 쓸 수 있습니"
"다), 대화 상자의 상위 창을 설정하는 <code>transient_for</code> 속성을 설정합"
"니다."

#. (itstool) path: item/p
#: C/image-viewer.py.page:213
msgid ""
"<code>dialog.run</code> displays the <gui>Open</gui> dialog. The dialog will "
"wait for the user to choose an image; when they do, <code>dialog.run</code> "
"will return the value <output>1</output> (it would return <output>0</output> "
"if the user clicked <gui>Cancel</gui>). The <code>if</code> statement tests "
"for this."
msgstr ""
"<code>dialog.run</code>은 <gui>열기</gui> 대화 상자를 표시합니다. 대화 상자"
"는 사용자의 그림 선택을 기다립니다. 사용자가 그림을 선택하면 <code>dialog."
"run</code> 에서 <output>1</output> 값을 반환합니다(<gui>취소</gui>를 누르면 "
"<output>0</output> 값을 반환합니다). <code>if</code> 구문에서는 어떤 값을 반"
"환했는지 확인합니다."

#. (itstool) path: section/p
#: C/image-viewer.py.page:226
msgid ""
"All of the code you need should now be in place, so try running the code. "
"That should be it; a fully-functioning image viewer (and a whistlestop tour "
"of Python and Gtk) in not much time at all!"
msgstr ""
"필요한 모든 코드를 제자리에 넣었으니 코드를 실행해보겠습니다. 제대로 동작할겝"
"니다. 이렇게 하여 기능이 완전하게 동작하는 그림 보기 프로그램(JavaScript와 "
"Gtk를 활용한 간단한 맛보기)을 그리 길지 않은 시간 동안에 만들었습니다!"

#. (itstool) path: section/p
#: C/image-viewer.py.page:231
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"image-viewer/image-viewer.py\">reference code</link>."
msgstr ""
"지침서를 따라하는 실행하는 과정에 문제가 있다면, <link href=\"image-viewer/"
"image-viewer.py\">참조 코드</link>와 여러분의 코드를 비교해보십시오."

#. (itstool) path: info/title
#: C/image-viewer.vala.page:8
msgctxt "text"
msgid "Image viewer (Vala)"
msgstr "그림 보기(Vala)"

#. (itstool) path: info/desc
#: C/image-viewer.vala.page:11
msgid "A little bit more than a simple \"Hello world\" GTK+ application."
msgstr "간단한 \"Hello world\" GTK+ 프로그램에 약간의 무언가가 더 들어갑니다."

#. (itstool) path: credit/name
#: C/image-viewer.vala.page:23
msgid "Philip Chimento"
msgstr "Philip Chimento"

#. (itstool) path: synopsis/p
#: C/image-viewer.vala.page:39
msgid ""
"In this tutorial you will create an application which opens and displays an "
"image file. You will learn:"
msgstr ""
"이 따라하기 지침서에서는 그림 파일을 열고 보여주는 프로그램을 만듭니다. 다음"
"을 배워나갑니다:"

#. (itstool) path: item/p
#: C/image-viewer.vala.page:41
msgid ""
"How to set up a basic project using the <link xref=\"getting-ready\">Anjuta "
"IDE</link>."
msgstr ""
"<link xref=\"getting-ready\">안주타 IDE</link>로 기본 프로젝트를 설정하는 방"
"법."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:42
msgid ""
"How to write a <link href=\"http://developer.gnome.org/platform-overview/"
"stable/gtk\">Gtk application</link> in Vala"
msgstr ""
"Vala 프로그래밍 언어로 <link href=\"http://developer.gnome.org/platform-"
"overview/stable/gtk\">Gtk 프로그램</link>을 작성하는 방법"

#. (itstool) path: item/p
#: C/image-viewer.vala.page:43
msgid ""
"Some basic concepts of <link href=\"http://developer.gnome.org/gobject/"
"stable/\">GObject</link> programming"
msgstr ""
"<link href=\"http://developer.gnome.org/gobject/stable/\">GObject</link> 프로"
"그래밍 일부 기본 개념"

#. (itstool) path: item/p
#: C/image-viewer.vala.page:50
msgid ""
"You may find the <link href=\"http://valadoc.org/gtk+-3.0/\">gtk+-3.0</link> "
"API Reference useful, although it is not necessary to follow the tutorial."
msgstr ""
"이 따라하기 지침서에선 별로 필요하지 않지만 쓸만한 <link href=\"http://"
"valadoc.org/gtk+-3.0/\">gtk+-3.0</link> API 참고서를 찾아보시는 것도 좋습니"
"다."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:66
msgid ""
"From the <gui>Vala</gui> tab choose <gui>GTK+ (Simple)</gui>, click "
"<gui>Continue</gui>, and fill out your details on the next page. Use "
"<file>image-viewer</file> as project name and directory."
msgstr ""
"<gui>Vala</gui> 탭에서 <gui>GTK+ (단순)</gui>을 선택하고 <gui>계속</gui>을 누"
"른 다음, 나타난 페이지에서 몇가지 자세한 내용을 입력하십시오. 프로젝트 이름"
"과 디렉터리에 <file>image-viewer</file>를 입력하십시오."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:70
msgid ""
"Make sure that <gui>Use GtkBuilder for user interface</gui> is unchecked as "
"we will create the UI manually in this tutorial."
msgstr ""
"따라하기 지침을 통해 사용자 인터페이스를 직접 만들 예정이므로 <gui>사용자 인"
"터페이스에 GtkBuilder 사용</gui> 설정을 껐는지 확인하십시오."

#. (itstool) path: note/p
#: C/image-viewer.vala.page:71
msgid ""
"You will learn how to use the interface builder in the <link xref=\"guitar-"
"tuner.vala\">Guitar-Tuner</link> tutorial."
msgstr ""
"<link xref=\"guitar-tuner.vala\">기타 조율 프로그램</link> 따라하기 지침서에"
"서 인터페이스 빌더 사용법을 배웁니다."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:75
msgid ""
"Click <gui>Continue</gui> then <gui>Apply</gui> and the project will be "
"created for you. Open <file>src/image_viewer.vala</file> from the "
"<gui>Project</gui> or <gui>File</gui> tabs. You will see this code:"
msgstr ""
"<gui>계속</gui>을 누르고 <gui>적용</gui>을 누르면 프로젝트를 만들어줍니다. "
"<gui>프로젝트</gui>나 <gui>파일</gui>탭에서 <file>src/image_viewer.vala</"
"file> 파일을 여십시오. 다음 코드가 나타납니다:"

#. (itstool) path: item/code
#: C/image-viewer.vala.page:78
#, no-wrap
msgid ""
"\n"
"using GLib;\n"
"using Gtk;\n"
"\n"
"public class Main : Object\n"
"{\n"
"\n"
"\tpublic Main ()\n"
"\t{\n"
"\t\tWindow window = new Window();\n"
"\t\twindow.set_title (\"Hello World\");\n"
"\t\twindow.show_all();\n"
"\t\twindow.destroy.connect(on_destroy);\n"
"\t}\n"
"\n"
"\tpublic void on_destroy (Widget window)\n"
"\t{\n"
"\t\tGtk.main_quit();\n"
"\t}\n"
"\n"
"\tstatic int main (string[] args)\n"
"\t{\n"
"\t\tGtk.init (ref args);\n"
"\t\tvar app = new Main ();\n"
"\n"
"\t\tGtk.main ();\n"
"\n"
"\t\treturn 0;\n"
"\t}\n"
"}"
msgstr ""
"\n"
"using GLib;\n"
"using Gtk;\n"
"\n"
"public class Main : Object\n"
"{\n"
"\n"
"\tpublic Main ()\n"
"\t{\n"
"\t\tWindow window = new Window();\n"
"\t\twindow.set_title (\"Hello World\");\n"
"\t\twindow.show_all();\n"
"\t\twindow.destroy.connect(on_destroy);\n"
"\t}\n"
"\n"
"\tpublic void on_destroy (Widget window)\n"
"\t{\n"
"\t\tGtk.main_quit();\n"
"\t}\n"
"\n"
"\tstatic int main (string[] args)\n"
"\t{\n"
"\t\tGtk.init (ref args);\n"
"\t\tvar app = new Main ();\n"
"\n"
"\t\tGtk.main ();\n"
"\n"
"\t\treturn 0;\n"
"\t}\n"
"}"

#. (itstool) path: section/p
#: C/image-viewer.vala.page:114
msgid ""
"The code loads an (empty) window from the user interface description file "
"and shows it. More details are given below; skip this list if you understand "
"the basics:"
msgstr ""
"이 코드는 (빈) 창을 사용자 인터페이스 설명 파일에서 불러오고 화면에 나타냅니"
"다. 자세한 내용은 아래에 있습니다. 기본을 이해하셨다면 이 부분은 넘어가셔도 "
"됩니다:"

#. (itstool) path: item/p
#: C/image-viewer.vala.page:119
msgid ""
"The two <code>using</code> lines at the top import namespaces so we don't "
"have to name them explicitly."
msgstr ""
"상단의 <code>using</code> 줄 두 줄에서는 이름 영역을 임포팅하여 해당 이름을 "
"코드상에서 굳이 언급할 필요가 없게 해줍니다."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:122
msgid ""
"The constructor of the <code>Main</code> class creates a new (empty) window "
"and connects a <link href=\"https://live.gnome.org/Vala/SignalsAndCallbacks"
"\">signal</link> to exit the application when that window is closed."
msgstr ""
"<code>Main</code> 클래스의 생성자는 (비어 있는) 새 창을 만들고 창을 닫을 때 "
"프로그램을 빠져나갈 <link href=\"https://live.gnome.org/Vala/"
"SignalsAndCallbacks\">시그널</link>을 연결합니다."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:127
msgid ""
"The <code>static main</code> function is run by default when you start a "
"Vala application. It calls a few functions which create the <code>Main</"
"code> class, set up and then run the application. The <link href=\"http://"
"valadoc.org/gtk+-3.0/Gtk.main.html\"><code>Gtk.main</code></link> function "
"starts the GTK <link href=\"http://en.wikipedia.org/wiki/Event_loop\">main "
"loop</link>, which runs the user interface and starts listening for events "
"(like clicks and key presses)."
msgstr ""
"<code>static main</code> 함수는 Vala 프로그램을 시작할 때 기본으로 실행하는 "
"함수입니다. <code>Main</code> 클래스를 만들고 설정한 다음 프로그램을 실행하"
"는 몇가지 함수를 호출합니다. <link href=\"http://valadoc.org/gtk+-3.0/Gtk."
"main.html\"><code>Gtk.main</code></link> 함수는 사용자 인터페이스를 실행하고 "
"이벤트(마우스 단추 누름과 키 누름) 대기를 시작하는 GTK <link href=\"http://"
"en.wikipedia.org/wiki/Event_loop\">메인 루프</link>를 시작합니다."

#. (itstool) path: section/p
#: C/image-viewer.vala.page:134 C/magic-mirror.vala.page:94
msgid ""
"Change the <gui>Configuration</gui> to <gui>Default</gui> and then press "
"<gui>Execute</gui> to configure the build directory. You only need to do "
"this once, for the first build."
msgstr ""
"<gui>설정</gui>을 <gui>기본</gui>으로 바꾸고 <gui>실행</gui>을 눌러 빌드 디렉"
"터리를 설정하십시오. 처음 빌드 때 한 번만 실행하면 됩니다."

#. (itstool) path: section/p
#: C/image-viewer.vala.page:140
msgid ""
"Now we will bring life into the empty window. GTK organizes the user "
"interface with <link href=\"http://www.valadoc.org/gtk+-2.0/Gtk.Container."
"html\"><code>Gtk.Container</code></link>s that can contain other widgets and "
"even other containers. Here we will use the simplest available container, a "
"<link href=\"http://unstable.valadoc.org/gtk+-2.0/Gtk.Box.html\"><code>Gtk."
"Box</code></link>."
msgstr ""
"이제 비어있는 창에 숨결을 불어넣겠습니다. GTK는 다른 위젯을 넣을 수 있고 다"
"른 컨테이너도 넣을 수 있는 <link href=\"http://www.valadoc.org/gtk+-2.0/Gtk."
"Container.html\"><code>Gtk.Container</code></link>로  사용자 인터페이스를 모"
"아둡니다. 여기서는 여러가지 컨테이너 중 가장 간단한 <link href=\"http://"
"unstable.valadoc.org/gtk+-2.0/Gtk.Box.html\"><code>Gtk.Box</code></link>를 사"
"용하겠습니다."

#. (itstool) path: section/p
#: C/image-viewer.vala.page:144
msgid "Add the following lines to the top of the <code>Main</code> class:"
msgstr "<code>Main</code> 클래스 상단에 다음 줄을 추가하십시오:"

#. (itstool) path: section/code
#: C/image-viewer.vala.page:145
#, no-wrap
msgid ""
"\n"
"private Window window;\n"
"private Image image;\n"
msgstr ""
"\n"
"private Window window;\n"
"private Image image;\n"

#. (itstool) path: section/p
#: C/image-viewer.vala.page:150
msgid "Now replace the current constructor with the one below:"
msgstr "이제 현재 생성자를 아래 내용으로 바꾸겠습니다:"

#. (itstool) path: section/code
#: C/image-viewer.vala.page:151
#, no-wrap
msgid ""
"\n"
"\n"
"public Main () {\n"
"\n"
"\twindow = new Window ();\n"
"\twindow.set_title (\"Image Viewer in Vala\");\n"
"\n"
"\t// Set up the UI\n"
"\tvar box = new Box (Orientation.VERTICAL, 5);\n"
"\tvar button = new Button.with_label (\"Open image\");\n"
"\timage = new Image ();\n"
"\n"
"\tbox.pack_start (image, true, true, 0);\n"
"\tbox.pack_start (button, false, false, 0);\n"
"\twindow.add (box);\n"
"\n"
"\t// Show open dialog when opening a file\n"
"\tbutton.clicked.connect (on_open_image);\n"
"\n"
"\twindow.show_all ();\n"
"\twindow.destroy.connect (main_quit);\n"
"}\n"
msgstr ""
"\n"
"\n"
"public Main () {\n"
"\n"
"\twindow = new Window ();\n"
"\twindow.set_title (\"Image Viewer in Vala\");\n"
"\n"
"\t// Set up the UI\n"
"\tvar box = new Box (Orientation.VERTICAL, 5);\n"
"\tvar button = new Button.with_label (\"Open image\");\n"
"\timage = new Image ();\n"
"\n"
"\tbox.pack_start (image, true, true, 0);\n"
"\tbox.pack_start (button, false, false, 0);\n"
"\twindow.add (box);\n"
"\n"
"\t// Show open dialog when opening a file\n"
"\tbutton.clicked.connect (on_open_image);\n"
"\n"
"\twindow.show_all ();\n"
"\twindow.destroy.connect (main_quit);\n"
"}\n"

#. (itstool) path: item/p
#: C/image-viewer.vala.page:176
msgid ""
"The first two lines are the parts of the GUI that we will need to access "
"from more than one method. We declare them up here so that they are "
"accessible throughout the class instead of only in the method where they are "
"created."
msgstr ""
"처음 두 줄은 하나 이상의 메서드에서 접근할 GUI 부분입니다. 이 부분을 여기에 "
"선언하여 메서드를 만든 부분에서만 쓰는게 아니라 전 클래스에 걸쳐 쓸 수 있게 "
"합니다."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:180
msgid ""
"The first lines of the constructor create the empty window. The next lines "
"create the widgets we want to use: a button for opening up an image, the "
"image view widget itself and the box we will use as a container."
msgstr ""
"생성자 처음 줄에서는 빈 창을 만듭니다. 다음 줄에서는 우리가 쓰려는 위젯을 만"
"듭니다. 그림을 여는 단추, 그림 보기 위젯 자체, 컨테이너로 쓸 상자 위젯이 있습"
"니다."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:184
msgid ""
"The calls to <link href=\"http://unstable.valadoc.org/gtk+-2.0/Gtk.Box."
"pack_start.html\"><code>pack_start</code></link> add the two widgets to the "
"box and define their behaviour. The image will expand into any available "
"space whereas the button will just be as big as needed. You will notice that "
"we don't set explicit sizes on the widgets. In GTK this is usually not "
"needed as it makes it much easier to have a layout that looks good in "
"different window sizes. Next, the box is added to the window."
msgstr ""
"<link href=\"http://unstable.valadoc.org/gtk+-2.0/Gtk.Box.pack_start.html"
"\"><code>pack_start</code></link> 호출로 박스에 두 위젯을 추가하고 동작을 정"
"의합니다. 그림은 활용 가능한 공간만큼 충분히 확장하고, 단추는 필요한 만큼만 "
"커집니다. 위젯의 크기를 분명하게 설정하지 않음을 알아채셨을 겁니다. GTK에서"
"는 창 크기가 달라져도 보기 좋은 배치를 쉽게하기에 직접 설정할 필요가 없습니"
"다. 이 과정이 끝나면 박스를 창에 추가합니다."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:191
msgid ""
"We need to define what happens when the user clicks on the button. GTK uses "
"the concept of <em>signals</em>."
msgstr ""
"단추를 사용자가 눌렀을 때 어떤 일이 일어날 지 정해야합니다. GTK는 <em>시그널"
"</em> 개념을 활용합니다."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:192
msgid ""
"When the <link href=\"http://valadoc.org/gtk+-3.0/Gtk.Button.html\">button</"
"link> is clicked, it fires the <link href=\"http://valadoc.org/gtk+-3.0/Gtk."
"Button.clicked.html\"><code>clicked</code></link> signal, which we can "
"connect to some action (defined in a <link href=\"https://live.gnome.org/"
"Vala/SignalsAndCallbacks\">callback</link> method)."
msgstr ""
"<link href=\"http://valadoc.org/gtk+-3.0/Gtk.Button.html\">Button</link>을 누"
"르면, 어떤 동작(<link href=\"https://live.gnome.org/Vala/SignalsAndCallbacks"
"\">콜백</link> 메서드에 정의)을 연결할 수 있는 <link href=\"http://valadoc."
"org/gtk+-3.0/Gtk.Button.clicked.html\"><code>clicked</code></link> 시그널을 "
"내보냅니다."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:195
msgid ""
"This is done using the <code>connect</code> method of the button's "
"<code>clicked</code> signal, which in this case tells GTK to call the (yet "
"undefined) <code>on_image_open</code> callback method when the button is "
"clicked. We will define the <em>callback</em> in the next section."
msgstr ""
"사용자가 단추를 누르면 (아직 정하지 않은) <code>on_image_open</code> 콜백 메"
"서드를 호출하여 그림을 이 함수의 인자로 전달하라고 GTK에 지시할 때 "
"<code>connect</code> 메서드를 사용하면 됩니다. 다음 섹션에서 <em>콜백</em>을 "
"정의하겠습니디."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:199
msgid ""
"In the callback, we need to access the <code>window</code> and <code>image</"
"code> widgets, which is why we defined them as private members at the top of "
"our class."
msgstr ""
"콜백 함수에서 <code>window</code>위젯과 <code>image</code> 위젯에 접근해야합"
"니다. 이게 바로 클래스 상단에서 전용 멤버 인스턴스로 설정한 이유입니다."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:203
msgid ""
"The last <code>connect</code> call makes sure that the application exits "
"when the window is closed. The code generated by Anjuta called an "
"<code>on_destroy</code> callback method which called <link href=\"http://www."
"valadoc.org/gtk+-2.0/Gtk.main_quit.html\"><code>Gtk.main_quit</code></link>, "
"but just connecting our signal to <code>main_quit</code> directly is easier. "
"You can delete the <code>on_destroy</code> method."
msgstr ""
"마지막으로 <code>connect</code> 호출에서는 창을 닫았을 때 프로그램을 끝낼지 "
"확인합니다. 안주타에서 만든 코드는 <link href=\"http://www.valadoc.org/gtk"
"+-2.0/Gtk.main_quit.html\"><code>Gtk.main_quit</code></link>를 호출하는 "
"<code>on_destroy</code>  콜백 메서드를 호출하지만, 시그널을 <code>main_quit</"
"code>에 바로 연결하는게 더 쉽습니다. <code>on_destroy</code> 메서드를 지울 "
"수 있습니다."

#. (itstool) path: section/p
#: C/image-viewer.vala.page:211
msgid ""
"We will now define the signal handler for the <code>clicked</code> signal "
"for the button we mentioned before. Add this code after the constructor:"
msgstr ""
"앞서 언급한 단추의 <code>clicked</code> 시그널을 처리할 시그널 핸들러를 정의"
"하겠습니다. 이 코드를 생성자 다음에 추가하십시오:"

#. (itstool) path: section/code
#: C/image-viewer.vala.page:214
#, no-wrap
msgid ""
"\n"
"public void on_open_image (Button self) {\n"
"\tvar filter = new FileFilter ();\n"
"\tvar dialog = new FileChooserDialog (\"Open image\",\n"
"\t                                    window,\n"
"\t                                    FileChooserAction.OPEN,\n"
"\t                                    Stock.OK,     ResponseType.ACCEPT,\n"
"\t                                    Stock.CANCEL, ResponseType.CANCEL);\n"
"\tfilter.add_pixbuf_formats ();\n"
"\tdialog.add_filter (filter);\n"
"\n"
"\tswitch (dialog.run ())\n"
"\t{\n"
"\t\tcase ResponseType.ACCEPT:\n"
"\t\t\tvar filename = dialog.get_filename ();\n"
"\t\t\timage.set_from_file (filename);\n"
"\t\t\tbreak;\n"
"\t\tdefault:\n"
"\t\t\tbreak;\n"
"\t}\n"
"\tdialog.destroy ();\n"
"}\n"
msgstr ""
"\n"
"public void on_open_image (Button self) {\n"
"\tvar filter = new FileFilter ();\n"
"\tvar dialog = new FileChooserDialog (\"Open image\",\n"
"\t                                    window,\n"
"\t                                    FileChooserAction.OPEN,\n"
"\t                                    Stock.OK,     ResponseType.ACCEPT,\n"
"\t                                    Stock.CANCEL, ResponseType.CANCEL);\n"
"\tfilter.add_pixbuf_formats ();\n"
"\tdialog.add_filter (filter);\n"
"\n"
"\tswitch (dialog.run ())\n"
"\t{\n"
"\t\tcase ResponseType.ACCEPT:\n"
"\t\t\tvar filename = dialog.get_filename ();\n"
"\t\t\timage.set_from_file (filename);\n"
"\t\t\tbreak;\n"
"\t\tdefault:\n"
"\t\t\tbreak;\n"
"\t}\n"
"\tdialog.destroy ();\n"
"}\n"

#. (itstool) path: section/p
#: C/image-viewer.vala.page:237
msgid "This is a bit complicated, so let's break it down:"
msgstr "좀 복잡하니 하나씩 살펴보도록 하죠:"

#. (itstool) path: note/p
#: C/image-viewer.vala.page:238
msgid ""
"A signal handler is a type of callback method that is called when a signal "
"is emitted. Here the terms are used interchangeably."
msgstr ""
"시그널 핸들러는 시그널을 어딘가에서 내보냈을 때 콜백 함수를 호출하게 하는 방"
"식입니다. 이 용어는 서로 바꿔서 사용합니다."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:241
msgid ""
"The first argument of the callback method is always the widget that sent the "
"signal. Sometimes other arguments related to the signal come after that, but "
"<em>clicked</em> doesn't have any."
msgstr ""
"콜백 메서드의 첫번째 인자는 항상 시그널을 보낸 위젯입니다. 때로는 뒤 따라오"
"는 다른 인자가 시그널에 관련이 있지만, <em>clicked</em>는 그렇지 않습니다."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:243
msgid ""
"In this case the <code>button</code> sent the <code>clicked</code> signal, "
"which is connected to the <code>on_open_image</code> callback method:"
msgstr ""
"이 경우 <code>button</code>에서 <code>on_open_image</code> 콜백 함수에 연결"
"한 <code>clicked</code>  시그널을 내보냅니다:"

#. (itstool) path: item/code
#: C/image-viewer.vala.page:244
#, no-wrap
msgid ""
"\n"
"        button.clicked.connect (on_open_image);\n"
msgstr ""
"\n"
"        button.clicked.connect (on_open_image);\n"

#. (itstool) path: item/p
#: C/image-viewer.vala.page:248
msgid ""
"The <code>on_open_image</code> method takes the button that emitted the "
"signal as an argument:"
msgstr ""
"<code>on_open_image</code> 메서드는 시그널을 방출한 단추를 인저로 취합니다:"

#. (itstool) path: item/code
#: C/image-viewer.vala.page:249
#, no-wrap
msgid ""
"\n"
"        public void on_open_image (Button self)\n"
msgstr ""
"\n"
"        public void on_open_image (Button self)\n"

#. (itstool) path: item/p
#: C/image-viewer.vala.page:254
msgid ""
"The next interesting line is where the dialog for choosing the file is "
"created. <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.FileChooserDialog."
"html\"><code>FileChooserDialog</code></link>'s constructor takes the title "
"of the dialog, the parent window of the dialog and several options like the "
"number of buttons and their corresponding values."
msgstr ""
"다음 흥미로운 부분은 파일을 선택하는 대화상자를 만드는 부분입니다. <link "
"href=\"http://www.valadoc.org/gtk+-3.0/Gtk.FileChooserDialog.html"
"\"><code>FileChooserDialog</code></link>의 생성자는 대화 상자 제목, 대화 상자"
"의 상위 창, 단추 갯수와 각각의 값 같은 몇가지 옵션을 취합니다."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:256
msgid ""
"Notice that we are using <link href=\"http://unstable.valadoc.org/gtk+-3.0/"
"Gtk.Stock.html\"><em>stock</em></link> button names from Gtk, instead of "
"manually typing \"Cancel\" or \"Open\". The advantage of using stock names "
"is that the button labels will already be translated into the user's "
"language."
msgstr ""
"직접 \"취소\" 또는 \"열기\"라고 입력하는 대신, Gtk에서 가져온 <link href="
"\"http://unstable.valadoc.org/gtk+-3.0/Gtk.Stock.html\"><em>stock</em></"
"link> 단추 이름을 사용하고 있음을 참고하십시오. 스톡 이름을 사용하면 사용자"
"의 언어로 이미 번역한 단추 레이블을 사용합니다."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:260
msgid ""
"The next two lines restrict the <gui>Open</gui> dialog to only display files "
"which can be opened by <em>GtkImage</em>. GtkImage is a widget which "
"displays an image. A filter object is created first; we then add all kinds "
"of files supported by <link href=\"http://www.valadoc.org/gdk-pixbuf-2.0/Gdk."
"Pixbuf.html\"><code>Gdk.Pixbuf</code></link> (which includes most image "
"formats like PNG and JPEG) to the filter. Finally, we set this filter to be "
"the <gui>Open</gui> dialog's filter."
msgstr ""
"다음 두 줄은 <gui>열기</gui> 대화 상자에서 <em>GtkImage</em>로만 열 수 있는 "
"파일을 표시하도록 제한합니다. 필터 객체를 우선 만듭니다. 그 다음 <link href="
"\"http://www.valadoc.org/gdk-pixbuf-2.0/Gdk.Pixbuf.html\"><code>Gdk.Pixbuf</"
"code></link>에서 지원하는 파일 종류(PNG와 JPEG 같은 대부분의 그림 형식)를 필"
"터에 추가합니다. 마지막으로 이 필터를 <gui>열기</gui> 대화 상자의 필터로 설정"
"합니다."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:265
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Dialog.run.html"
"\"><code>dialog.run</code></link> displays the <gui>Open</gui> dialog. The "
"dialog will wait for the user to choose an image; when they do, <code>dialog."
"run</code> will return the <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk."
"ResponseType.html\">ResponseType</link> value <code>ResponseType.ACCEPT</"
"code> (it would return <code>ResponseType.CANCEL</code> if the user clicked "
"<gui>Cancel</gui>). The <code>switch</code> statement tests for this."
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Dialog.run.html"
"\"><code>dialog.run</code></link>은 <gui>열기</gui> 대화 상자를 표시합니다. "
"대화 상자는 사용자의 그림 선택을 기다립니다. 사용자가 그림을 선택하면 "
"<code>dialog.run</code> 에서 <code>ResponseType.ACCEPT</code> 값을 반환합니다"
"(<gui>취소</gui>를 누르면 <code>ResponseType.CANCEL</code> 값을 반환합니다). "
"<code>switch</code> 구문에서는 어떤 값을 반환했는지 확인합니다."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:270
msgid ""
"Assuming that the user did click <gui>Open</gui>, the next lines get the "
"filename of the image selected by the user, and tell the <code>GtkImage</"
"code> widget to load and display the selected image."
msgstr ""
"사용자가 <gui>열기</gui>를 눌렀다고 한 상황에서, 다음 줄에서 사용자가 선택한 "
"그림의 파일 이름을 가져오고,  <code>GtkImage</code> 위젯으로 선택한 그림을 불"
"러오고 화면에 표시합니다."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:274
msgid "Destroying automatically hides the dialog."
msgstr "해체할 때는 대화상자를 자동으로 숨깁니다."

#. (itstool) path: section/p
#: C/image-viewer.vala.page:283
msgid ""
"If you haven't already done so, choose the <file>src/image-viewer</file> "
"application in the dialog that appears. Finally, hit <gui>Run</gui> and "
"enjoy!"
msgstr ""
"아직 끝나지 않았다면, 대화상자에 나타난 <file>src/image-viewer</file> 프로그"
"램을 선택하십시오. 마지막으로 <gui>실행</gui>을 선택하고 즐기시지요!"

#. (itstool) path: section/p
#: C/image-viewer.vala.page:289
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"image-viewer/image-viewer.vala\">reference code</link>."
msgstr ""
"지침서를 따라하는 실행하는 과정에 문제가 있다면, <link href=\"image-viewer/"
"image-viewer.vala\">참조 코드</link>와 여러분의 코드를 비교해보십시오."

#. (itstool) path: item/p
#: C/image-viewer.vala.page:296
msgid ""
"Set it up so that when the window opens it is of a specific size to start "
"off with. For example, 200 X 200 pixels."
msgstr ""
"창을 열었을 때 지정 크기로 시작하도록 설정하십시오. 예를 들면 200 X 200 픽셀 "
"크기입니다."

#. (itstool) path: credit/name
#: C/index.page:8
msgid "GNOME Documentation Team"
msgstr "그놈 문서 팀"

#. (itstool) path: credit/years
#: C/index.page:10
msgid "2010, 2011"
msgstr "2010, 2011"

#. (itstool) path: credit/name
#: C/index.page:13 C/message-board.c.page:15
msgid "Shaun McCance"
msgstr "Shaun McCance"

#. (itstool) path: credit/years
#: C/index.page:15 C/message-board.c.page:17
msgid "2010"
msgstr "2010"

#. (itstool) path: page/title
#: C/index.page:28
msgid "GNOME Developer Platform Demos"
msgstr "그놈 개발자 플랫폼 데모"

#. (itstool) path: page/p
#: C/index.page:30
msgid ""
"This guide includes a variety of coding examples, such writing an image "
"viewer or weather application. Each demo comes with code that you can try, "
"and explains how each example works. They are a great way to get started "
"with the GNOME developer platform."
msgstr ""
"이 안내서는 그림 보기, 날씨 프로그램 과 같은 다양한 코드 예제를 담고 있습니"
"다. 다양한 맛보기 프로그램에 여러분이 따라해볼 수 있는 코드, 예제 동작 설명"
"을 함께 넣었습니다. 그놈 개발자 플랫폼을 시작해볼 수 있는 멋진 수단입니다."

#. (itstool) path: section/title
#: C/index.page:36
msgid "Pick a Language"
msgstr "언어 선택"

#. (itstool) path: section/p
#: C/index.page:37
msgid ""
"These developer demos are available in a range of programming languages. "
"Pick one to get started:"
msgstr ""
"이 개발자 데모는 다양한 프로그래밍 언어 버전으로 있습니다. 시작할 내용을 고르"
"세요:"

#. (itstool) path: info/title
#: C/js.page:8
msgctxt "link"
msgid "JavaScript"
msgstr "JavaScript"

#. (itstool) path: credit/name
#: C/js.page:21
msgid "Ekaterina Gerasimova"
msgstr "Ekaterina Gerasimova"

#. (itstool) path: page/title
#: C/js.page:26
msgid "Tutorials, code samples and platform demos in JavaScript"
msgstr "JavaScript 지침서, 예제 코드, 플랫폼 데모"

#. (itstool) path: section/title
#: C/js.page:31
msgid "Code samples and tutorials"
msgstr "예제 코드 및 지침서"

#. (itstool) path: info/title
#: C/label.c.page:8
msgctxt "text"
msgid "Label (C)"
msgstr "Label (C)"

#. (itstool) path: info/desc
#: C/label.c.page:19 C/label.vala.page:18
msgid "A widget which displays text"
msgstr "텍스트를 표시하는 위젯"

#. (itstool) path: page/title
#. (itstool) path: td/p
#: C/label.c.page:22 C/label.js.page:21 C/label.py.page:30 C/label.vala.page:21
#: C/toolbar_builder.py.page:98 C/toolbar_builder.vala.page:81
msgid "Label"
msgstr "Label"

#. (itstool) path: td/media
#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/label.c.page:26 C/label.js.page:22 C/label.py.page:31 C/label.vala.page:22
msgctxt "_"
msgid "external ref='media/label.png' md5='734975c18653d88379f983e4501c3fc0'"
msgstr ""

#. (itstool) path: td/p
#. (itstool) path: page/p
#: C/label.c.page:27 C/label.py.page:32 C/label.vala.page:23
msgid "A simple label"
msgstr "간단한 레이블"

#. (itstool) path: page/code
#: C/label.c.page:32
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"\n"
"  /*Create a window with a title and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_application (GTK_WINDOW (window), GTK_APPLICATION (app));\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Welcome to GNOME\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200,100);\n"
"   \n"
"  /*Create a label and set its alignment. Setting the line wrap to TRUE makes \n"
"  the label break lines if the text exceeds the widget's size. When set to \n"
"  FALSE the text gets cut off by the edge of the widget*/\n"
"  label = gtk_label_new (\"Hello GNOME!\");\n"
"  gtk_label_set_justify (GTK_LABEL (label), GTK_JUSTIFY_CENTER);\n"
"  gtk_label_set_line_wrap (GTK_LABEL (label), TRUE);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (label));\n"
"\n"
"  gtk_widget_show_all (GTK_WIDGET (window));\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\",G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"\n"
"  /*Create a window with a title and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_application (GTK_WINDOW (window), GTK_APPLICATION (app));\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Welcome to GNOME\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200,100);\n"
"   \n"
"  /*Create a label and set its alignment. Setting the line wrap to TRUE makes \n"
"  the label break lines if the text exceeds the widget's size. When set to \n"
"  FALSE the text gets cut off by the edge of the widget*/\n"
"  label = gtk_label_new (\"Hello GNOME!\");\n"
"  gtk_label_set_justify (GTK_LABEL (label), GTK_JUSTIFY_CENTER);\n"
"  gtk_label_set_line_wrap (GTK_LABEL (label), TRUE);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (label));\n"
"\n"
"  gtk_widget_show_all (GTK_WIDGET (window));\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\",G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/label.c.page:39
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/3.4/GtkLabel.html\">GtkLabel</"
"link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/3.4/GtkLabel.html\">GtkLabel</"
"link>"

#. (itstool) path: info/title
#: C/label.js.page:8
msgctxt "text"
msgid "Label (JavaScript)"
msgstr "Label (JavaScript)"

#. (itstool) path: info/desc
#: C/label.js.page:18
msgid "A label which can contain text"
msgstr "텍스트를 넣을 수 있는 레이블"

#. (itstool) path: page/p
#: C/label.js.page:23
msgid "A label displaying a friendly message."
msgstr "친근한 메시지를 나타내는 레이블입니다."

#. (itstool) path: page/code
#: C/label.js.page:25
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const LabelExample = new Lang.Class ({\n"
"    Name: 'Label Example',\n"
"\n"
"    /* Create the application itself\n"
"       This boilerplate code is needed to build any GTK+ application. */\n"
"        _init: function () {\n"
"            this.application = new Gtk.Application ({\n"
"                application_id: 'org.example.jslabel',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                              window_position: Gtk.WindowPosition.CENTER,\n"
"                                                              title: \"Welcome to GNOME\",\n"
"                                                              default_height: 100,\n"
"                                                              default_width: 200 });\n"
"\n"
"        // Create the label\n"
"        this.label = new Gtk.Label ({label: \"Hello GNOME!\"});\n"
"        this._window.add (this.label);\n"
"\n"
"                // Show the window and all child widgets\n"
"                this._window.show_all();\n"
"    }\n"
"\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new LabelExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const LabelExample = new Lang.Class ({\n"
"    Name: 'Label Example',\n"
"\n"
"    /* Create the application itself\n"
"       This boilerplate code is needed to build any GTK+ application. */\n"
"        _init: function () {\n"
"            this.application = new Gtk.Application ({\n"
"                application_id: 'org.example.jslabel',\n"
"                flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"            });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                              window_position: Gtk.WindowPosition.CENTER,\n"
"                                                              title: \"Welcome to GNOME\",\n"
"                                                              default_height: 100,\n"
"                                                              default_width: 200 });\n"
"\n"
"        // Create the label\n"
"        this.label = new Gtk.Label ({label: \"Hello GNOME!\"});\n"
"        this._window.add (this.label);\n"
"\n"
"                // Show the window and all child widgets\n"
"                this._window.show_all();\n"
"    }\n"
"\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new LabelExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/label.js.page:32
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Label.html"
"\">Gtk.Label</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Label.html"
"\">Gtk.Label</link>"

#. (itstool) path: info/title
#: C/label.py.page:9
msgctxt "text"
msgid "Label (Python)"
msgstr "Label (Python)"

#. (itstool) path: info/desc
#: C/label.py.page:27
msgid "A widget that displays a small to medium amount of text"
msgstr "적은 양 또는 중간 분량의 글 내용을 나타내는 위젯입니다"

#. (itstool) path: section/p
#: C/label.py.page:41
msgid ""
"Another way to obtain what we have in the example is to create the label as "
"an instance of another class and add it to the instance of <code>MyWindow</"
"code> in the <code>do_activate(self)</code> method:"
msgstr ""
"예제 내용을 가져오는 다른 방법은 다른 클래스의 인스턴스로 레이블을 만들고 "
"<code>do_activate(self)</code> 메서드의 <code>MyWindow</code> 인스턴스에 추가"
"하는 식입니다:"

#. (itstool) path: note/p
#: C/label.py.page:43
msgid ""
"The highlighted lines indicate code that is different from the previous "
"snippet."
msgstr "강조한 줄은 앞 부분과 다른 코드를 나타냅니다."

#. (itstool) path: section/code
#: C/label.py.page:45
#, no-wrap
msgid ""
"\n"
"# a class to define a window\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(200, 100)\n"
"\n"
"# a class to define a label\n"
"<e:hi>\n"
"class MyLabel(Gtk.Label):\n"
"    def __init__(self):\n"
"        Gtk.Label.__init__(self)\n"
"        self.set_text(\"Hello GNOME!\")\n"
"</e:hi>\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        # create an instance of MyWindow\n"
"        win = MyWindow(self)\n"
"\n"
"        # create an instance of MyLabel\n"
"<e:hi>\n"
"        label = MyLabel()\n"
"</e:hi>\n"
"        # and add it to the window\n"
"<e:hi>\n"
"        win.add(label)\n"
"</e:hi>\n"
"        # show the window and everything on it\n"
"        win.show_all()"
msgstr ""
"\n"
"# a class to define a window\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", application=app)\n"
"        self.set_default_size(200, 100)\n"
"\n"
"# a class to define a label\n"
"<e:hi>\n"
"class MyLabel(Gtk.Label):\n"
"    def __init__(self):\n"
"        Gtk.Label.__init__(self)\n"
"        self.set_text(\"Hello GNOME!\")\n"
"</e:hi>\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        # create an instance of MyWindow\n"
"        win = MyWindow(self)\n"
"\n"
"        # create an instance of MyLabel\n"
"<e:hi>\n"
"        label = MyLabel()\n"
"</e:hi>\n"
"        # and add it to the window\n"
"<e:hi>\n"
"        win.add(label)\n"
"</e:hi>\n"
"        # show the window and everything on it\n"
"        win.show_all()"

#. (itstool) path: section/title
#: C/label.py.page:82
msgid "Useful methods for a Label widget"
msgstr "Label 위젯에 쓸만한 메서드"

#. (itstool) path: note/p
#: C/label.py.page:85
msgid ""
"An explanation of how to work with strings in GTK+ can be found in <link "
"xref=\"strings.py\"/>."
msgstr ""
"GTK+에서 문자열을 다루는 방법을 설명하는 내용은 <link xref=\"strings.py\"/>"
"에 있습니다."

#. (itstool) path: item/p
#: C/label.py.page:89
msgid ""
"<code>set_line_wrap(True)</code> breaks lines if the text of the label "
"exceeds the size of the widget."
msgstr ""
"<code>set_line_wrap(True)</code> 함수는 레이블의 텍스트가 위젯의 크기 범위를 "
"넘어가는 경우 줄을 바꿉니다."

#. (itstool) path: item/p
#: C/label.py.page:90
msgid ""
"<code>set_justify(Gtk.Justification.LEFT)</code> (or <code>Gtk.Justification."
"RIGHT, Gtk.Justification.CENTER, Gtk.Justification.FILL</code>) sets the "
"alignment of the lines in the text of the label relative to each other. The "
"method has no effect on a single-line label."
msgstr ""
"<code>set_justify(Gtk.Justification.LEFT)</code>(또는 <code>Gtk."
"Justification.RIGHT, Gtk.Justification.CENTER, Gtk.Justification.FILL</"
"code>) 함수는 레이블의 텍스트 줄 정렬 방법을 상대적으로 설정합니다. 한 줄 레"
"이블인 경우 이 메서드의 결과는 눈에 띄지 않습니다."

#. (itstool) path: item/p
#: C/label.py.page:91
msgid ""
"For decorated text we can use <code>set_markup(\"text\")</code>, where <code>"
"\"text\"</code> is a text in the <link href=\"http://developer.gnome.org/"
"pango/stable/PangoMarkupFormat.html\">Pango Markup Language</link>. An "
"example:"
msgstr ""
"텍스트를 꾸밀 때는 <code>set_markup(\"text\")</code> 함수를 사용할 수 있는"
"데, \"text\"는 <link href=\"http://developer.gnome.org/pango/stable/"
"PangoMarkupFormat.html\">팡고 마크업 언어</link>로 구성한 텍스트입니다:"

#. (itstool) path: item/code
#: C/label.py.page:92
#, no-wrap
msgid ""
"\n"
"label.set_markup(\"Text can be &lt;small&gt;small&lt;/small&gt;, &lt;big&gt;big&lt;/big&gt;, \"\n"
"                 \"&lt;b&gt;bold&lt;/b&gt;, &lt;i&gt;italic&lt;/i&gt; and even point to somewhere \"\n"
"                 \"in the &lt;a href=\\\"http://www.gtk.org\\\" \"\n"
"                 \"title=\\\"Click to find out more\\\"&gt;internets&lt;/a&gt;.\")"
msgstr ""
"\n"
"label.set_markup(\"Text can be &lt;small&gt;small&lt;/small&gt;, &lt;big&gt;big&lt;/big&gt;, \"\n"
"                 \"&lt;b&gt;bold&lt;/b&gt;, &lt;i&gt;italic&lt;/i&gt; and even point to somewhere \"\n"
"                 \"in the &lt;a href=\\\"http://www.gtk.org\\\" \"\n"
"                 \"title=\\\"Click to find out more\\\"&gt;internets&lt;/a&gt;.\")"

#. (itstool) path: info/title
#: C/label.vala.page:8
msgctxt "text"
msgid "Label (Vala)"
msgstr "Label (Vala)"

#. (itstool) path: page/code
#: C/label.vala.page:25
#, no-wrap
msgid ""
"\n"
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Welcome to GNOME\");\n"
"\n"
"\t\tvar label = new Gtk.Label (\"Hello GNOME!\");\n"
"\n"
"\t\tthis.add (label);\n"
"\t\tthis.set_default_size (200, 100);\n"
"\t\tthis.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"\n"
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Welcome to GNOME\");\n"
"\n"
"\t\tvar label = new Gtk.Label (\"Hello GNOME!\");\n"
"\n"
"\t\tthis.add (label);\n"
"\t\tthis.set_default_size (200, 100);\n"
"\t\tthis.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: p/link
#: C/legal.xml:3
msgid "Creative Commons Attribution-ShareAlike 3.0 Unported License"
msgstr "크리에이티브 커먼즈 저작자표시-동일조건변경허락 3.0 Unported 라이선스"

#. (itstool) path: license/p
#: C/legal.xml:3
msgid ""
"This work is licensed under a <_:link-1/>. As a special exception, the "
"copyright holders give you permission to copy, modify, and distribute the "
"example code contained in this documentation under the terms of your "
"choosing, without restriction."
msgstr ""
"이 문서는 <_:link-1/>를 적용합니다. 특별한 예외로, 저작자는 여러분에게 여러분"
"이 원하는 조항에 따라 이 문서 내 예제 코드에 대한 제한 없는 복제, 수정, 배포 "
"권한을 부여합니다."

#. (itstool) path: info/desc
#: C/license.page:8
msgid "Legal information."
msgstr "법적 정보."

#. (itstool) path: page/title
#: C/license.page:11
msgid "License"
msgstr "라이선스"

#. (itstool) path: page/p
#: C/license.page:12
msgid ""
"This work is distributed under a CreativeCommons Attribution-Share Alike 3.0 "
"Unported license."
msgstr ""
"이 문서는 크리에이티브 커먼즈 저작자표시-동일조건변경허락 3.0 Unported 라이선"
"스로 배포됩니다."

#. (itstool) path: page/p
#: C/license.page:20
msgid "You are free:"
msgstr "다음을 자유롭게 행할 수 있습니다:"

#. (itstool) path: item/title
#: C/license.page:25
msgid "<em>To share</em>"
msgstr "<em>공유</em>"

#. (itstool) path: item/p
#: C/license.page:26
msgid "To copy, distribute and transmit the work."
msgstr "저작물을 복제, 배포, 전송합니다."

#. (itstool) path: item/title
#: C/license.page:29
msgid "<em>To remix</em>"
msgstr "<em>변경</em>"

#. (itstool) path: item/p
#: C/license.page:30
msgid "To adapt the work."
msgstr "저작물에 적용합니다."

#. (itstool) path: page/p
#: C/license.page:33
msgid "Under the following conditions:"
msgstr "다음 조항을 따라야합니다:"

#. (itstool) path: item/title
#: C/license.page:38
msgid "<em>Attribution</em>"
msgstr "<em>저작자 표시</em>"

#. (itstool) path: item/p
#: C/license.page:39
msgid ""
"You must attribute the work in the manner specified by the author or "
"licensor (but not in any way that suggests that they endorse you or your use "
"of the work)."
msgstr ""
"저작자 또는 저작권자가 지정한 방식으로 저작물의 저작자를 언급해야합니다(저작 "
"행위나 저작물의 사용 방식은 해당하지 않음)."

#. (itstool) path: item/title
#: C/license.page:46
msgid "<em>Share Alike</em>"
msgstr "<em>동일 조건</em>"

#. (itstool) path: item/p
#: C/license.page:47
msgid ""
"If you alter, transform, or build upon this work, you may distribute the "
"resulting work only under the same, similar or a compatible license."
msgstr ""
"작업물을 바꾸거나, 전송하거나, 작업물을 기반으로 무언가를 만든다면, 동일, 유"
"사 또는 호환 라이선스를 기반으로 결과 작업물을 배포해야합니다."

#. (itstool) path: page/p
#: C/license.page:53
msgid ""
"For the full text of the license, see the <link href=\"http://"
"creativecommons.org/licenses/by-sa/3.0/legalcode\">CreativeCommons website</"
"link>, or read the full <link href=\"http://creativecommons.org/licenses/by-"
"sa/3.0/\">Commons Deed</link>."
msgstr ""
"라이선스 전문은 <link href=\"http://creativecommons.org/licenses/by-sa/3.0/"
"legalcode\">크리에이티브 커먼즈 웹사이트</link>를 방문하시거나, <link href="
"\"http://creativecommons.org/licenses/by-sa/3.0/\">커먼즈 라이선스</link> 전"
"문을 읽으십시오."

#. (itstool) path: note/p
#: C/license.page:60
msgid ""
"As a special exception, the copyright holders give you permission to copy, "
"modify, and distribute the example code contained in this documentation "
"under the terms of your choosing, without restriction."
msgstr ""
"특별한 예외로, 저작자는 여러분에게 여러분이 원하는 조항에 따라 이 문서 내 예"
"제 코드에 대한 제한 없는 복제, 수정, 배포 권한을 부여합니다."

#. (itstool) path: info/title
#: C/linkbutton.c.page:8
msgctxt "text"
msgid "LinkButton (C)"
msgstr "LinkButton (C)"

#. (itstool) path: info/desc
#: C/linkbutton.c.page:18 C/linkbutton.vala.page:18
msgid "Create buttons bound to a URL"
msgstr "URL로 넘어가는 단추를 만듭니다"

#. (itstool) path: page/title
#: C/linkbutton.c.page:21 C/linkbutton.js.page:21 C/linkbutton.py.page:22
#: C/linkbutton.vala.page:21
msgid "LinkButton"
msgstr "LinkButton"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/linkbutton.c.page:23 C/linkbutton.js.page:22 C/linkbutton.py.page:24
#: C/linkbutton.vala.page:22
msgctxt "_"
msgid ""
"external ref='media/linkbutton.png' md5='3712eae8953e87c65a6aa74503b8e32b'"
msgstr ""

#. (itstool) path: page/p
#: C/linkbutton.c.page:24
msgid "This button links to the GNOME live webpage."
msgstr "그놈 라이브 웹 페이지 링크 단추입니다."

#. (itstool) path: page/code
#: C/linkbutton.c.page:26
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *linkbutton;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"GNOME LinkButton\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 250, 50);\n"
"\n"
"  linkbutton = gtk_link_button_new (\"Link to GNOME live!\");\n"
"  gtk_link_button_set_uri (GTK_LINK_BUTTON(linkbutton), \"http://live.gnome.org\");\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (linkbutton));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *linkbutton;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"GNOME LinkButton\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 250, 50);\n"
"\n"
"  linkbutton = gtk_link_button_new (\"Link to GNOME live!\");\n"
"  gtk_link_button_set_uri (GTK_LINK_BUTTON(linkbutton), \"http://live.gnome.org\");\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (linkbutton));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/linkbutton.c.page:34
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkLinkButton.html"
"\">GtkLinkButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkLinkButton.html"
"\">GtkLinkButton</link>"

#. (itstool) path: info/title
#: C/linkbutton.js.page:8
msgctxt "text"
msgid "LinkButton (JavaScript)"
msgstr "LinkButton (JavaScript)"

#. (itstool) path: info/desc
#: C/linkbutton.js.page:18
msgid "A button that links to a web page"
msgstr "웹 페이지를 연결하는 단추"

#. (itstool) path: page/p
#: C/linkbutton.js.page:23
msgid "A button that links to live.gnome.org."
msgstr "live.gnome.org에 연결한 단추입니다."

#. (itstool) path: page/code
#: C/linkbutton.js.page:25
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const LinkButtonExample = new Lang.Class ({\n"
"    Name: 'LinkButton Example',\n"
"\n"
"    // Create the application itself\n"
"        _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"              application_id: 'org.example.jslinkbutton',\n"
"              flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"         });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"    this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                 window_position: Gtk.WindowPosition.CENTER,\n"
"                                                 title: \"GNOME LinkButton\",\n"
"                                                 default_height: 50,\n"
"                                                 default_width: 250 });\n"
"\n"
"        // Create the LinkButton and have it link to live.gnome.org\n"
"        this.LinkButton = new Gtk.LinkButton ({label: \"Link to GNOME live!\",\n"
"                               uri: \"http://live.gnome.org\"});\n"
"        this._window.add (this.LinkButton);\n"
"\n"
"    // Show the window and all child widgets\n"
"    this._window.show_all();\n"
"    },\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new LinkButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const LinkButtonExample = new Lang.Class ({\n"
"    Name: 'LinkButton Example',\n"
"\n"
"    // Create the application itself\n"
"        _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"              application_id: 'org.example.jslinkbutton',\n"
"              flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"         });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"    this._window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                 window_position: Gtk.WindowPosition.CENTER,\n"
"                                                 title: \"GNOME LinkButton\",\n"
"                                                 default_height: 50,\n"
"                                                 default_width: 250 });\n"
"\n"
"        // Create the LinkButton and have it link to live.gnome.org\n"
"        this.LinkButton = new Gtk.LinkButton ({label: \"Link to GNOME live!\",\n"
"                               uri: \"http://live.gnome.org\"});\n"
"        this._window.add (this.LinkButton);\n"
"\n"
"    // Show the window and all child widgets\n"
"    this._window.show_all();\n"
"    },\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new LinkButtonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/linkbutton.js.page:32
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.LinkButton."
"html\">Gtk.LinkButton</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.LinkButton."
"html\">Gtk.LinkButton</link>"

#. (itstool) path: info/title
#: C/linkbutton.py.page:8
msgctxt "text"
msgid "LinkButton (Python)"
msgstr "LinkButton (Python)"

#. (itstool) path: info/desc
#: C/linkbutton.py.page:19
msgid "A button bound to an URL"
msgstr "URL에 연결하는 단추"

#. (itstool) path: page/p
#: C/linkbutton.py.page:25
msgid "A button that links to a web page."
msgstr "웹페이지로 연결한 단추입니다."

#. (itstool) path: section/code
#: C/linkbutton.py.page:32
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GNOME LinkButton\", application=app)\n"
"        self.set_default_size(250, 50)\n"
"\n"
"        # a linkbutton pointing to the given URI\n"
"        button = Gtk.LinkButton(uri=\"http://live.gnome.org\")\n"
"        # with given text\n"
"        button.set_label(\"Link to GNOME live!\")\n"
"\n"
"        # add the button to the window\n"
"        self.add(button)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GNOME LinkButton\", application=app)\n"
"        self.set_default_size(250, 50)\n"
"\n"
"        # a linkbutton pointing to the given URI\n"
"        button = Gtk.LinkButton(uri=\"http://live.gnome.org\")\n"
"        # with given text\n"
"        button.set_label(\"Link to GNOME live!\")\n"
"\n"
"        # add the button to the window\n"
"        self.add(button)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/linkbutton.py.page:36
msgid "Useful methods for a LinkButton widget"
msgstr "LinkButton 위젯에 쓸만한 메서드"

#. (itstool) path: item/p
#: C/linkbutton.py.page:38
msgid ""
"<code>get_visited()</code> returns the 'visited' state (<code>True</code> or "
"<code>False</code>) of the URI where the LinkButton points. The button "
"becomes visited when it is clicked."
msgstr ""
"<code>get_visited()</code> 함수는 LinkButton이 가리키는 URI의 'visited' 상태"
"(<code>True</code> 또는 <code>False</code>)를 반환합니다. 단추를 누르면 "
"visited 상태가 됩니다."

#. (itstool) path: item/p
#: C/linkbutton.py.page:39
msgid ""
"<code>set_visited(True)</code> sets the 'visited' state of the URI where the "
"LinkButton points as <code>True</code> (analogously for <code>False</code>)."
msgstr ""
"<code>set_visited(True)</code> 함수는 LinkButton을 <code>True</"
"code>(<code>False</code> 도 비슷하게).로 설정했을 경우 URI의 'visited' 상태"
"를 설정합니다"

#. (itstool) path: item/p
#: C/linkbutton.py.page:40
msgid ""
"Each time the button is clicked, the signal <code>\"activate-link\"</code> "
"is emitted. For an explanation of signals and callback functions, see <link "
"xref=\"signals-callbacks.py\"/>."
msgstr ""
"단추를 누를 때마다 <code>\"activate-link\"</code> 시그널을 내보냅니다. 시그널"
"과 콜백 함수를 설명하는 내용을 보려면 <link xref=\"signals-callbacks.py\"/>"
"를 참고하십시오."

#. (itstool) path: item/p
#: C/linkbutton.py.page:48
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkLinkButton.html"
"\">GtkLinkButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkLinkButton.html"
"\">GtkLinkButton</link>"

#. (itstool) path: info/title
#: C/linkbutton.vala.page:8
msgctxt "text"
msgid "LinkButton (Vala)"
msgstr "LinkButton (Vala)"

#. (itstool) path: page/p
#: C/linkbutton.vala.page:23
msgid "This button links to GNOME live."
msgstr "이 단추에 그놈 라이브를 연결했습니다."

#. (itstool) path: page/code
#: C/linkbutton.vala.page:25
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create the window of this application and child widget and show all the things. */\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.set_default_size (250, 50);\n"
"\t\twindow.title = \"GNOME LinkButton\";\n"
"\n"
"\t\tvar linkbutton = new Gtk.LinkButton.with_label (\"http://live.gnome.org\", \"Link to GNOME live!\");\n"
"\n"
"\t\twindow.add (linkbutton);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create the window of this application and child widget and show all the things. */\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.set_default_size (250, 50);\n"
"\t\twindow.title = \"GNOME LinkButton\";\n"
"\n"
"\t\tvar linkbutton = new Gtk.LinkButton.with_label (\"http://live.gnome.org\", \"Link to GNOME live!\");\n"
"\n"
"\t\twindow.add (linkbutton);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/linkbutton.vala.page:30
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.LinkButton.html\">Gtk."
"LinkButton</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.LinkButton.html\">Gtk."
"LinkButton</link>"

#. (itstool) path: info/title
#: C/magic-mirror.vala.page:8
msgctxt "text"
msgid "Magic mirror (Vala)"
msgstr "마법의 거울(Vala)"

#. (itstool) path: info/desc
#: C/magic-mirror.vala.page:11
msgid "Use your webcam as a mirror using the GStreamer framework and GTK+"
msgstr "지스트리머와 GTK+로 웹캠을 거울처럼 사용합니다"

#. (itstool) path: credit/name
#: C/magic-mirror.vala.page:15
msgid "Daniel G. Siegel"
msgstr "Daniel G. Siegel"

#. (itstool) path: page/title
#: C/magic-mirror.vala.page:29
msgid "Magic mirror"
msgstr "마법의 거울"

#. (itstool) path: synopsis/p
#: C/magic-mirror.vala.page:32
msgid ""
"<em>Your mirror just fell off the wall and broke into a thousand pieces — "
"but you need a mirror to shave your beard off or add some makeup! You only "
"have 15 minutes left before catching the bus to work. So what can you do?</"
"em>"
msgstr ""
"<em>거울이 벽에서 떨어져 나가 수많은 조각으로 깨졌습니다. 그러나 턱수염을 면"
"도하거나 화장을 하려면 거울이 필요합니다! 통근 버스를 잡기까지 15분 밖에 안남"
"았습니다. 뭘 할 수 있을까요?</em>"

#. (itstool) path: synopsis/p
#: C/magic-mirror.vala.page:33
msgid ""
"In this tutorial, we're going to make a program which lets you use your "
"webcam as a mirror. You will learn how to:"
msgstr ""
"이 따라하기 지침을 통해 웹 캠을 거울로 사용하는 프로그램을 만들겠습니다. 다"
"음 방법을 배워나갑니다:"

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:35
msgid "Create a GTK+ application"
msgstr "GTK+ 프로그램 만들기"

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:36
msgid "Access your webcam using GStreamer and embed the result into a window"
msgstr "지스트리머로 웹캠에 접근해서 결과 동영상을 창에 넣기"

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:37
msgid "Grab photos off your webcam"
msgstr "웹 캠으로 사진 찍기"

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:42
msgid "Installed copies of GTK, GStreamer, and a Vala compiler"
msgstr "GTK, 지스트리머, Vala 컴파일러 설치"

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:43
msgid "Basic knowledge of an object-oriented programming language"
msgstr "객체 지향 프로그래밍 언어 기본 지식"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/magic-mirror.vala.page:47
msgctxt "_"
msgid ""
"external ref='media/magic-mirror.png' md5='8171faea6ed3b6ddac0da084c29e4e22'"
msgstr ""

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:57
msgid ""
"Choose <gui>GTK+ (simple)</gui> from the <gui>Vala</gui> tab, click "
"<gui>Forward</gui>, and fill out your details on the next few pages. Use "
"<file>magic-mirror</file> as project name and directory."
msgstr ""
"<gui>Vala</gui> 탭에서 <gui>GTK+ (단순)</gui>를 선택하고, <gui>계속</gui>을 "
"누른 다음, 나타난 페이지에서 몇가지 자세한 내용을 입력하십시오. 프로젝트 이름"
"과 디렉터리에 <file>magic-mirror</file>를 입력하십시오."

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:60
msgid ""
"Disable <gui>Use GtkBuilder for user interface</gui> as we will create the "
"UI manually in this tutorial. Check the <link xref=\"guitar-tuner.vala"
"\">Guitar-Tuner</link> tutorial using the interface builder."
msgstr ""
"따라하기 지침을 통해 사용자 인터페이스를 직접 만들 예정이므로 <gui>사용자 인"
"터페이스에 GtkBuilder 사용</gui> 설정을 끄십시오. 인터페이스 빌더 사용법을 알"
"아보려면 <link xref=\"guitar-tuner.vala\">기타 조율 프로그램</link> 따라하기 "
"지침서를 확인하십시오."

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:65
msgid ""
"Make sure that <gui>Configure external packages</gui> is selected. On the "
"next page, select <em>gstreamer-0.10</em> from the list to include the "
"<app>GStreamer</app> library into your project."
msgstr ""
"<gui>외부 패키지 설정</gui>을 <gui>켬</gui>으로 설정했는지 확인하십시오. 다"
"음 페이지의 목록에서 <em>gstreamer-0.10</em>를 선택하여 프로젝트에 <app>지스"
"트리머</app> 라이브러리를 넣으십시오."

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:69
msgid ""
"Click <gui>Apply</gui> and the project will be created for you. Open "
"<file>src/magic_mirror.vala</file> from the <gui>Project</gui> or <gui>File</"
"gui> tabs. You should see some code which starts with the lines:"
msgstr ""
"<gui>적용</gui>을 누르면 프로젝트를 만들어줍니다. <gui>프로젝트</gui>나 <gui>"
"파일</gui>탭에서 <file>src/magic_mirror.vala</file> 파일을 여십시오. 다음 줄"
"로 시작하는 일부 코드를 볼 수 있습니다:"

#. (itstool) path: section/p
#: C/magic-mirror.vala.page:79
msgid ""
"The code loads an (empty) window and shows it. More details are given below; "
"skip this list if you understand the basics:"
msgstr ""
"코드에서 (비어 있는) 창을 불러와서 보여줍니다. 자세한 내용은 아래에 있습니"
"다. 기본을 이해하셨다면 건너뛰십시오:"

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:85
msgid ""
"The constructor of the <code>Main</code> class creates a new window and sets "
"its title. Afterwards the window is shown and a signal is connected which "
"quits the application if the window is closed. More on signals later on."
msgstr ""
"<code>Main</code> 클래스 생성자에서는 새 창을 만들고 제목을 설정합니다. 그 다"
"음 창을 보여주고, 창을 닫았을 때 어떤 프로그램을 끝낼지 시그널을 연결합니다. "
"다른 시그널은 나중에 살펴보겠습니다."

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:89
msgid ""
"The static <code>main</code> function is run by default when you start a "
"Vala application. It calls a few functions which create the Main class, set "
"up and then run the application. The <code>Gtk.Main</code> function starts "
"the GTK main loop, which runs the user interface and starts listening for "
"events (like clicks and key presses)."
msgstr ""
"정적 <code>main</code> 함수는 Vala 프로그램을 실행할 때 기본으로 동작합니다. "
"Main 클래스를 만들고, 섲렁하며, 프로그램을 실행할 몇가지 함수를 호출합니다. "
"<code>Gtk.Main</code> 함수는 사용자 인터페이스를 실행하고 이벤트(마우스 단추 "
"누름과 키보드 키 누름) 기다림을 시작하는 GTK 메인 루프를 시작합니다."

#. (itstool) path: section/title
#: C/magic-mirror.vala.page:98
msgid "Access the webcam video stream with GStreamer"
msgstr "지스트리머로 웹캠 동영상 스트림 접근하기"

#. (itstool) path: section/p
#: C/magic-mirror.vala.page:99
msgid ""
"The GStreamer multimedia framework is able to handle video from webcams. "
"Let's add GStreamer to our application and so we can access the video stream."
msgstr ""
"지스트리머 멀티미디어 프레임워크는 웹캠 동영상을 처리할 수 있습니다. 동영상 "
"스트림에 접근할 수 있도록 지스트리머를 프로그램에 추가해보겠습니다."

#. (itstool) path: section/code
#: C/magic-mirror.vala.page:101
#, no-wrap
msgid ""
"\n"
"using GLib;\n"
"using Gtk;\n"
"\n"
"public class Main : Object\n"
"{\n"
"\tprivate Gst.Element camerabin;\n"
"\n"
"\tpublic Main () {\n"
"\t\tthis.camerabin = Gst.ElementFactory.make (\"camerabin\", \"camera\");\n"
"\t\tthis.camerabin.set_state (Gst.State.PLAYING);\n"
"\t}\n"
"\n"
"\tstatic int main (string[] args) {\n"
"\t\tGtk.init (ref args);\n"
"\t\tGst.init (ref args);\n"
"\t\tvar app = new Main ();\n"
"\n"
"\t\tGtk.main ();\n"
"\n"
"\t\treturn 0;\n"
"\t}\n"
"}\n"
msgstr ""
"\n"
"using GLib;\n"
"using Gtk;\n"
"\n"
"public class Main : Object\n"
"{\n"
"\tprivate Gst.Element camerabin;\n"
"\n"
"\tpublic Main () {\n"
"\t\tthis.camerabin = Gst.ElementFactory.make (\"camerabin\", \"camera\");\n"
"\t\tthis.camerabin.set_state (Gst.State.PLAYING);\n"
"\t}\n"
"\n"
"\tstatic int main (string[] args) {\n"
"\t\tGtk.init (ref args);\n"
"\t\tGst.init (ref args);\n"
"\t\tvar app = new Main ();\n"
"\n"
"\t\tGtk.main ();\n"
"\n"
"\t\treturn 0;\n"
"\t}\n"
"}\n"

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:126
msgid ""
"First we remove the window we created before because GStreamer will take "
"care of showing the picture on screen."
msgstr ""
"지스트리머에서는 화면에 그림을 띄우는 방법을 다루기 때문에 우선 앞서 만든 창"
"을 제거하겠습니다."

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:130
msgid ""
"Now we are creating a GStreamer element which accesses our webcam. We are "
"using the Camerabin element, which is an all-in-one camera element and is "
"capable of taking photos, videos, applying effects and much more. Perfect "
"for our use case! With <code>this.camerabin.set_state (Gst.State.PLAYING)</"
"code> we tell the GStreamer pipeline we just created to start playing. Easy, "
"no?"
msgstr ""
"이제 웹 캠에 접근할 지스트리머 이벤트를 만들겠습니다. 일체형 카메라 구성요소"
"이며 사진, 동영상, 효과적용 기능 등이 있는 Camerabin 구성 요소를 활용하겠습니"
"다. 우리가 활용하기에 완벽하죠! 지스트리머 파이프라인에 <code>this.camerabin."
"set_state (Gst.State.PLAYING)</code>로 지스트리머 파이프라인에 재생을 시작할 "
"거리를 만들었다고 알리겠습니다."

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:137
msgid ""
"Of course it is also possible to integrate the video more tighly into other "
"windows but that is an advanced topic that includes some details of the X "
"Window System we will omit here."
msgstr ""
"물론 동영상을 다른 창과 꽉 붙여둘 수도 있지만, X 윈도우 시스템의 일부 구체적 "
"내용이 들어가는 고급 주체이므로 여기서는 생략하겠습니다."

#. (itstool) path: item/p
#: C/magic-mirror.vala.page:141
msgid ""
"Compile and run it again. You will end up with two windows. In the next step "
"we will integrate the video into the GTK+ window."
msgstr ""
"다시 컴파일하고 실행하십시오. 창 두개가 뜹니다. 다음 단계에서는 GTK+ 창으로 "
"동영상을 통합하겠습니다."

#. (itstool) path: section/p
#: C/magic-mirror.vala.page:151
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"magic-mirror/magic-mirror.vala\">reference code</link>. There "
"is also a more <link href=\"magic-mirror/magic-mirror-advanced.vala"
"\">extensive implementation</link> that embeds the window into a regular Gtk."
"Window which involves some advanced techniques, and adds buttons to start/"
"stop the picture."
msgstr ""
"지침서를 따라하는 실행하는 과정에 문제가 있다면, <link href=\"magic-mirror/"
"magic-mirror.vala\">참조 코드</link>와 여러분의 코드를 비교해보십시오. 일부 "
"고급기술을 넣어 보통 Gtk.Window에 창을 넣고, 사진 표시 시작/정지 단추를 추가"
"한 <link href=\"magic-mirror/magic-mirror-advanced.vala\">추가 구현체</link>"
"가 있습니다."

#. (itstool) path: section/p
#: C/magic-mirror.vala.page:158
msgid ""
"To find out more about the Vala programming language you might want to check "
"out the <link href=\"http://live.gnome.org/Vala/Tutorial\">Vala Tutorial</"
"link>."
msgstr ""
"Vala 프로그래밍 언어에 대해 더 알아보려면 <link href=\"http://live.gnome.org/"
"Vala/Tutorial\">Vala 따라하기 지침서</link>를 확인해보시는게 좋습니다."

#. (itstool) path: section/title
#: C/magic-mirror.vala.page:163
msgid "Conclusion"
msgstr "마무리"

#. (itstool) path: section/p
#: C/magic-mirror.vala.page:164
msgid ""
"That's it, you have managed to create a full-featured webcam photo "
"application in 15 minutes. Now you can shave your beard off or add some "
"makeup to your beautiful face, right before having a beautiful day at your "
"workplace, where you can impress your friends and colleagues with an awesome "
"application you just made in 15 minutes."
msgstr ""
"다 됐습니다. 15분동안 완전한 기능을 수행하는 웹캠 사진 프로그램을 열심히 만들"
"었습니다. 이제 15분동안 열심히 만든 대단한 프로그램으로 친구나 동료에게 인상"
"을 심어줄 수 있는 일터에서 아름다운 나날을 보내기 전 수염을 깎거나 여러분의 "
"이쁘장한 얼굴을 화장할 수 있습니다."

#. (itstool) path: info/title
#: C/menubar.c.page:8
msgctxt "text"
msgid "MenuBar (C)"
msgstr "MenuBar (C)"

#. (itstool) path: info/desc
#: C/menubar.c.page:20 C/menubar.py.page:25 C/menubar.vala.page:20
msgid "A widget which holds GtkMenuItem widgets"
msgstr "GtkMenuItem 위젯을 가진 위젯"

#. (itstool) path: page/title
#: C/menubar.c.page:23 C/menubar.vala.page:23
msgid "MenuBar"
msgstr "MenuBar"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/menubar.c.page:25 C/menubar.py.page:29 C/menubar.vala.page:24
msgctxt "_"
msgid "external ref='media/menubar.png' md5='7b642aaa1628d5e43ab85ac230ac1c78'"
msgstr ""

#. (itstool) path: page/p
#: C/menubar.c.page:26 C/menubar.py.page:30 C/menubar.vala.page:25
msgid "A MenuBar created using XML and GtkBuilder."
msgstr "XML과 GtkBuilder로 만든 MenuBar입니다."

#. (itstool) path: note/p
#: C/menubar.c.page:27
msgid ""
"For a more in-depth look at this sample, please do not hesitate to check out "
"the <link xref=\"menubar.vala\">Vala MenuBar</link> and/or <link xref="
"\"menubar.py\">Python MenuBar</link> tutorials."
msgstr ""
"이 예제를 좀 더 자세한 관점에서 바라보려면, 망설이지 마시고 <link xref="
"\"menubar.vala\">Vala MenuBar</link> 또는 <link xref=\"menubar.py\">Python "
"MenuBar</link> 따라하기 지침서를 살펴보십시오."

#. (itstool) path: page/code
#: C/menubar.c.page:31
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"copy\" action */\n"
"static void\n"
"copy_callback (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   g_print (\"\\\"Copy\\\" activated\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"paste\" action */\n"
"static void\n"
"paste_callback (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   g_print (\"\\\"Paste\\\" activated\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"shape\" action */\n"
"static void\n"
"shape_callback (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   /* We first gather the value of the GVariant instance with a string type.\n"
"    * The overall goal here is to see if shape is set to line, triangle, etc,\n"
"    * and put that value within the variable \"answer\".\n"
"    */\n"
"   const gchar *answer = g_variant_get_string (parameter, NULL);\n"
"   g_printf (\"Shape is set to %s.\\n\", answer);\n"
"   /* Note that we set the state of the action */\n"
"   g_simple_action_set_state (simple, parameter);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function in which closes the about_dialog created below */\n"
"static void\n"
"on_close (GtkDialog *dialog,\n"
"          gint       response_id,\n"
"          gpointer   user_data)\n"
"{\n"
"  gtk_widget_destroy (GTK_WIDGET (dialog));\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the about action (see aboutdialog.c example) */\n"
"static void\n"
"about_callback (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   GtkWidget *about_dialog;\n"
"\n"
"   about_dialog = gtk_about_dialog_new ();\n"
"\n"
"   const gchar *authors[] = {\"GNOME Documentation Team\", NULL};\n"
"   const gchar *documenters[] = {\"GNOME Documentation Team\", NULL};\n"
"\n"
"   /* Fill in the about_dialog with the desired information */\n"
"   gtk_about_dialog_set_program_name (GTK_ABOUT_DIALOG (about_dialog), \"AboutDialog Example\");\n"
"   gtk_about_dialog_set_copyright (GTK_ABOUT_DIALOG (about_dialog), \"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\");\n"
"   gtk_about_dialog_set_authors (GTK_ABOUT_DIALOG (about_dialog), authors);\n"
"   gtk_about_dialog_set_documenters (GTK_ABOUT_DIALOG (about_dialog), documenters);\n"
"   gtk_about_dialog_set_website_label (GTK_ABOUT_DIALOG (about_dialog), \"GNOME Developer Website\");\n"
"   gtk_about_dialog_set_website (GTK_ABOUT_DIALOG (about_dialog), \"http://developer.gnome.org\");\n"
"\n"
"   /* The \"response\" signal is emitted when the dialog receives a delete event,\n"
"    * therefore we connect that signal to the on_close callback function\n"
"    * created above.\n"
"    */\n"
"   g_signal_connect (GTK_DIALOG (about_dialog), \"response\",\n"
"                    G_CALLBACK (on_close), NULL);\n"
"\n"
"   /* Show the about dialog */\n"
"   gtk_widget_show (about_dialog);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  GSimpleAction *copy_action;\n"
"  GSimpleAction *paste_action;\n"
"  GSimpleAction *shape_action;\n"
"  GSimpleAction *about_action;\n"
"\n"
"  /* Create a window with a title and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"MenuBar Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);\n"
"\n"
"  /* Begin creating the \"copy\" action.\n"
"   * Note that it is an action without a state.\n"
"   */\n"
"  copy_action = g_simple_action_new (\"copy\", NULL);\n"
"  /* Connected to a callback function */\n"
"  g_signal_connect (copy_action, \"activate\", G_CALLBACK (copy_callback),\n"
"                    GTK_WINDOW (window));\n"
"  /* Added to the window */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (copy_action));\n"
"\n"
"  /* Begin creating the \"paste\" action.\n"
"   * Note that it is an action without a state.\n"
"   */\n"
"  paste_action = g_simple_action_new (\"paste\", NULL);\n"
"  /* Connect the action to a callback function */\n"
"  g_signal_connect (paste_action, \"activate\", G_CALLBACK (paste_callback),\n"
"                    GTK_WINDOW (window));\n"
"  /* Add it to the window */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (paste_action));\n"
"\n"
"  /* Begin creating the \"shape\" action.\n"
"   * Note that it is an action with a state.\n"
"   * First we state that the parameter type of the simple action is a string.\n"
"   * When using g_variant_type_new, it is appropriate to free the return value\n"
"   * once you're done with it.\n"
"   */\n"
"  GVariantType *type_string = g_variant_type_new (\"s\");\n"
"  /* parameters for the g_simple_action_new_stateful are: (name, parameter type,\n"
"   * initial state).\n"
"   */\n"
"  shape_action = g_simple_action_new_stateful (\"shape\", type_string,\n"
"                                               g_variant_new_string (\"line\"));\n"
"  /* Connect the action to a callback function */\n"
"  g_signal_connect (shape_action, \"activate\", G_CALLBACK (shape_callback),\n"
"                    GTK_WINDOW (window));\n"
"  /* Add it to the window */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (shape_action));\n"
"  g_variant_type_free (type_string);\n"
"\n"
"  /* Begin creating the \"about\" action.\n"
"   * Note that it is an action without a state.\n"
"   */\n"
"  about_action = g_simple_action_new (\"about\", NULL);\n"
"  /* Connect the action to a callback function */\n"
"  g_signal_connect (about_action, \"activate\", G_CALLBACK (about_callback),\n"
"                    GTK_WINDOW (window));\n"
"  /* Add it to the window */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (about_action));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"new\" action */\n"
"static void\n"
"new_callback (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"New\\\"\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"quit\" action */\n"
"static void\n"
"quit_callback (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_print (\"You clicked \\\"Quit\\\"\\n\");\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"state\" action */\n"
"static void\n"
"state_callback (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"   /* The two possibilities in this case for the \"answer\" variable are either\n"
"    * \"on\" or \"off\".\n"
"    */\n"
"   const gchar *answer = g_variant_get_string (parameter, NULL);\n"
"   /* We print the information to the user */\n"
"   g_printf (\"State is set to %s.\\n\", answer);\n"
"   /* Note that we set the state of the action */\n"
"   g_simple_action_set_state (simple, parameter);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"awesome\" action */\n"
"static void\n"
"awesome_callback (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  GVariant *action_state = g_action_get_state (G_ACTION (simple));\n"
"  gboolean active = g_variant_get_boolean (action_state);\n"
"  GVariant *new_state = g_variant_new_boolean (!active);\n"
"  /* Set the new state for the action.\n"
"   * (Keeps track of whether it was last checked or unchecked).\n"
"   */\n"
"  g_simple_action_set_state (simple, new_state);\n"
"\n"
"  if (active)\n"
"     g_print (\"You unchecked \\\"Awesome\\\"\\n\");\n"
"  else\n"
"     g_print (\"You checked \\\"Awesome\\\"\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the menu we are creating in this sample */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  /* Initialize variables */\n"
"  GSimpleAction *new_action;\n"
"  GSimpleAction *quit_action;\n"
"  GSimpleAction *state_action;\n"
"  GSimpleAction *awesome_action;\n"
"\n"
"  GtkBuilder *builder;\n"
"\n"
"  GError *error = NULL;\n"
"\n"
"  /* Begin creating the \"new\" action.\n"
"   * Note that it is an action without a state.\n"
"   */\n"
"  new_action = g_simple_action_new (\"new\", NULL);\n"
"  g_signal_connect (new_action, \"activate\", G_CALLBACK (new_callback), app);\n"
"  /* It is added to the overall application */\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (new_action));\n"
"\n"
"  /* Begin creating the \"quit\" action.\n"
"   * Note that it is an action without a state.\n"
"   */\n"
"  quit_action = g_simple_action_new (\"quit\", NULL);\n"
"  g_signal_connect (quit_action, \"activate\", G_CALLBACK (quit_callback), app);\n"
"  /* It is added to the overall application */\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (quit_action));\n"
"\n"
"  /* Begin creating the \"state\" action.\n"
"   * Note that it is an action with a state.\n"
"   */\n"
"  GVariantType *type_string2 = g_variant_type_new (\"s\");\n"
"  state_action = g_simple_action_new_stateful (\"state\", type_string2,\n"
"                                               g_variant_new_string (\"off\"));\n"
"  g_signal_connect (state_action, \"activate\", G_CALLBACK (state_callback), app);\n"
"  /* It is added to the overall application */\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (state_action));\n"
"  g_variant_type_free (type_string2);\n"
"\n"
"  /* Begin creating the \"awesome\" action.\n"
"   * Note that it is an action with a state.\n"
"   */\n"
"  awesome_action = g_simple_action_new_stateful (\"awesome\", NULL, g_variant_new_boolean (FALSE));\n"
"  g_signal_connect (awesome_action, \"activate\", G_CALLBACK (awesome_callback), app);\n"
"  /* It is added to the overall application */\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (awesome_action));\n"
"\n"
"  /* A builder to add the User Interface designed with GLADE to the grid: */\n"
"  builder = gtk_builder_new ();\n"
"  /* Get the file (if it is there):\n"
"   * Note: you must make sure that the file is in the current directory for\n"
"   * this to work. The function used here returns a non-null value within\n"
"   * our variable \"error\" if an error is indeed found.\n"
"   */\n"
"  gtk_builder_add_from_file (builder, \"menubar.ui\", &amp;error);\n"
"  if (error != NULL) {\n"
"     g_print (\"%s\\n\", error-&gt;message);\n"
"     g_error_free (error);\n"
"  }\n"
"\n"
"  /* Extract the menubar */\n"
"  GObject *menubar = gtk_builder_get_object (builder, \"menubar\");\n"
"  gtk_application_set_menubar (GTK_APPLICATION (app), G_MENU_MODEL (menubar));\n"
"\n"
"  /* Extract the appmenu */\n"
"  GObject *appmenu = gtk_builder_get_object (builder, \"appmenu\");\n"
"  gtk_application_set_app_menu (GTK_APPLICATION (app), G_MENU_MODEL (appmenu));\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the application */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"copy\" action */\n"
"static void\n"
"copy_callback (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   g_print (\"\\\"Copy\\\" activated\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"paste\" action */\n"
"static void\n"
"paste_callback (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   g_print (\"\\\"Paste\\\" activated\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"shape\" action */\n"
"static void\n"
"shape_callback (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   /* We first gather the value of the GVariant instance with a string type.\n"
"    * The overall goal here is to see if shape is set to line, triangle, etc,\n"
"    * and put that value within the variable \"answer\".\n"
"    */\n"
"   const gchar *answer = g_variant_get_string (parameter, NULL);\n"
"   g_printf (\"Shape is set to %s.\\n\", answer);\n"
"   /* Note that we set the state of the action */\n"
"   g_simple_action_set_state (simple, parameter);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function in which closes the about_dialog created below */\n"
"static void\n"
"on_close (GtkDialog *dialog,\n"
"          gint       response_id,\n"
"          gpointer   user_data)\n"
"{\n"
"  gtk_widget_destroy (GTK_WIDGET (dialog));\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the about action (see aboutdialog.c example) */\n"
"static void\n"
"about_callback (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   GtkWidget *about_dialog;\n"
"\n"
"   about_dialog = gtk_about_dialog_new ();\n"
"\n"
"   const gchar *authors[] = {\"GNOME Documentation Team\", NULL};\n"
"   const gchar *documenters[] = {\"GNOME Documentation Team\", NULL};\n"
"\n"
"   /* Fill in the about_dialog with the desired information */\n"
"   gtk_about_dialog_set_program_name (GTK_ABOUT_DIALOG (about_dialog), \"AboutDialog Example\");\n"
"   gtk_about_dialog_set_copyright (GTK_ABOUT_DIALOG (about_dialog), \"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\");\n"
"   gtk_about_dialog_set_authors (GTK_ABOUT_DIALOG (about_dialog), authors);\n"
"   gtk_about_dialog_set_documenters (GTK_ABOUT_DIALOG (about_dialog), documenters);\n"
"   gtk_about_dialog_set_website_label (GTK_ABOUT_DIALOG (about_dialog), \"GNOME Developer Website\");\n"
"   gtk_about_dialog_set_website (GTK_ABOUT_DIALOG (about_dialog), \"http://developer.gnome.org\");\n"
"\n"
"   /* The \"response\" signal is emitted when the dialog receives a delete event,\n"
"    * therefore we connect that signal to the on_close callback function\n"
"    * created above.\n"
"    */\n"
"   g_signal_connect (GTK_DIALOG (about_dialog), \"response\",\n"
"                    G_CALLBACK (on_close), NULL);\n"
"\n"
"   /* Show the about dialog */\n"
"   gtk_widget_show (about_dialog);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  GSimpleAction *copy_action;\n"
"  GSimpleAction *paste_action;\n"
"  GSimpleAction *shape_action;\n"
"  GSimpleAction *about_action;\n"
"\n"
"  /* Create a window with a title and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"MenuBar Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);\n"
"\n"
"  /* Begin creating the \"copy\" action.\n"
"   * Note that it is an action without a state.\n"
"   */\n"
"  copy_action = g_simple_action_new (\"copy\", NULL);\n"
"  /* Connected to a callback function */\n"
"  g_signal_connect (copy_action, \"activate\", G_CALLBACK (copy_callback),\n"
"                    GTK_WINDOW (window));\n"
"  /* Added to the window */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (copy_action));\n"
"\n"
"  /* Begin creating the \"paste\" action.\n"
"   * Note that it is an action without a state.\n"
"   */\n"
"  paste_action = g_simple_action_new (\"paste\", NULL);\n"
"  /* Connect the action to a callback function */\n"
"  g_signal_connect (paste_action, \"activate\", G_CALLBACK (paste_callback),\n"
"                    GTK_WINDOW (window));\n"
"  /* Add it to the window */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (paste_action));\n"
"\n"
"  /* Begin creating the \"shape\" action.\n"
"   * Note that it is an action with a state.\n"
"   * First we state that the parameter type of the simple action is a string.\n"
"   * When using g_variant_type_new, it is appropriate to free the return value\n"
"   * once you're done with it.\n"
"   */\n"
"  GVariantType *type_string = g_variant_type_new (\"s\");\n"
"  /* parameters for the g_simple_action_new_stateful are: (name, parameter type,\n"
"   * initial state).\n"
"   */\n"
"  shape_action = g_simple_action_new_stateful (\"shape\", type_string,\n"
"                                               g_variant_new_string (\"line\"));\n"
"  /* Connect the action to a callback function */\n"
"  g_signal_connect (shape_action, \"activate\", G_CALLBACK (shape_callback),\n"
"                    GTK_WINDOW (window));\n"
"  /* Add it to the window */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (shape_action));\n"
"  g_variant_type_free (type_string);\n"
"\n"
"  /* Begin creating the \"about\" action.\n"
"   * Note that it is an action without a state.\n"
"   */\n"
"  about_action = g_simple_action_new (\"about\", NULL);\n"
"  /* Connect the action to a callback function */\n"
"  g_signal_connect (about_action, \"activate\", G_CALLBACK (about_callback),\n"
"                    GTK_WINDOW (window));\n"
"  /* Add it to the window */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (about_action));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"new\" action */\n"
"static void\n"
"new_callback (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"New\\\"\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"quit\" action */\n"
"static void\n"
"quit_callback (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_print (\"You clicked \\\"Quit\\\"\\n\");\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"state\" action */\n"
"static void\n"
"state_callback (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"   /* The two possibilities in this case for the \"answer\" variable are either\n"
"    * \"on\" or \"off\".\n"
"    */\n"
"   const gchar *answer = g_variant_get_string (parameter, NULL);\n"
"   /* We print the information to the user */\n"
"   g_printf (\"State is set to %s.\\n\", answer);\n"
"   /* Note that we set the state of the action */\n"
"   g_simple_action_set_state (simple, parameter);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the \"awesome\" action */\n"
"static void\n"
"awesome_callback (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  GVariant *action_state = g_action_get_state (G_ACTION (simple));\n"
"  gboolean active = g_variant_get_boolean (action_state);\n"
"  GVariant *new_state = g_variant_new_boolean (!active);\n"
"  /* Set the new state for the action.\n"
"   * (Keeps track of whether it was last checked or unchecked).\n"
"   */\n"
"  g_simple_action_set_state (simple, new_state);\n"
"\n"
"  if (active)\n"
"     g_print (\"You unchecked \\\"Awesome\\\"\\n\");\n"
"  else\n"
"     g_print (\"You checked \\\"Awesome\\\"\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the menu we are creating in this sample */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  /* Initialize variables */\n"
"  GSimpleAction *new_action;\n"
"  GSimpleAction *quit_action;\n"
"  GSimpleAction *state_action;\n"
"  GSimpleAction *awesome_action;\n"
"\n"
"  GtkBuilder *builder;\n"
"\n"
"  GError *error = NULL;\n"
"\n"
"  /* Begin creating the \"new\" action.\n"
"   * Note that it is an action without a state.\n"
"   */\n"
"  new_action = g_simple_action_new (\"new\", NULL);\n"
"  g_signal_connect (new_action, \"activate\", G_CALLBACK (new_callback), app);\n"
"  /* It is added to the overall application */\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (new_action));\n"
"\n"
"  /* Begin creating the \"quit\" action.\n"
"   * Note that it is an action without a state.\n"
"   */\n"
"  quit_action = g_simple_action_new (\"quit\", NULL);\n"
"  g_signal_connect (quit_action, \"activate\", G_CALLBACK (quit_callback), app);\n"
"  /* It is added to the overall application */\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (quit_action));\n"
"\n"
"  /* Begin creating the \"state\" action.\n"
"   * Note that it is an action with a state.\n"
"   */\n"
"  GVariantType *type_string2 = g_variant_type_new (\"s\");\n"
"  state_action = g_simple_action_new_stateful (\"state\", type_string2,\n"
"                                               g_variant_new_string (\"off\"));\n"
"  g_signal_connect (state_action, \"activate\", G_CALLBACK (state_callback), app);\n"
"  /* It is added to the overall application */\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (state_action));\n"
"  g_variant_type_free (type_string2);\n"
"\n"
"  /* Begin creating the \"awesome\" action.\n"
"   * Note that it is an action with a state.\n"
"   */\n"
"  awesome_action = g_simple_action_new_stateful (\"awesome\", NULL, g_variant_new_boolean (FALSE));\n"
"  g_signal_connect (awesome_action, \"activate\", G_CALLBACK (awesome_callback), app);\n"
"  /* It is added to the overall application */\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (awesome_action));\n"
"\n"
"  /* A builder to add the User Interface designed with GLADE to the grid: */\n"
"  builder = gtk_builder_new ();\n"
"  /* Get the file (if it is there):\n"
"   * Note: you must make sure that the file is in the current directory for\n"
"   * this to work. The function used here returns a non-null value within\n"
"   * our variable \"error\" if an error is indeed found.\n"
"   */\n"
"  gtk_builder_add_from_file (builder, \"menubar.ui\", &amp;error);\n"
"  if (error != NULL) {\n"
"     g_print (\"%s\\n\", error-&gt;message);\n"
"     g_error_free (error);\n"
"  }\n"
"\n"
"  /* Extract the menubar */\n"
"  GObject *menubar = gtk_builder_get_object (builder, \"menubar\");\n"
"  gtk_application_set_menubar (GTK_APPLICATION (app), G_MENU_MODEL (menubar));\n"
"\n"
"  /* Extract the appmenu */\n"
"  GObject *appmenu = gtk_builder_get_object (builder, \"appmenu\");\n"
"  gtk_application_set_app_menu (GTK_APPLICATION (app), G_MENU_MODEL (appmenu));\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the application */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/menubar.c.page:37 C/scrolledwindow.c.page:34
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkApplication.html"
"\">GtkApplication</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkApplication.html"
"\">GtkApplication</link>"

#. (itstool) path: item/p
#: C/menubar.c.page:40
msgid ""
"<link href=\"http://developer.gnome.org/gtk/stable/GtkAboutDialog.html"
"\">GtkAboutDialog</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk/stable/GtkAboutDialog.html"
"\">GtkAboutDialog</link>"

#. (itstool) path: item/p
#: C/menubar.c.page:41
msgid ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-GVariantType.html"
"\">GtkVariantType</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-GVariantType.html"
"\">GtkVariantType</link>"

#. (itstool) path: info/title
#: C/menubar.py.page:8
msgctxt "text"
msgid "MenuBar (Python)"
msgstr "MenuBar (Python)"

#. (itstool) path: page/title
#: C/menubar.py.page:28
msgid "MenuBar created using XML and GtkBuilder"
msgstr "XML과 GtkBuilder로 만드는 MenuBar"

#. (itstool) path: section/title
#: C/menubar.py.page:34 C/menubar.vala.page:29
msgid "Create a MenuBar using XML"
msgstr "XML로 MenuBar 만들기"

#. (itstool) path: section/p
#: C/menubar.py.page:35 C/menubar.vala.page:30
msgid "To create the menubar using XML:"
msgstr "XML로 메뉴 표시줄을 만들려면:"

#. (itstool) path: item/p
#: C/menubar.py.page:37 C/menubar.vala.page:32
msgid "Create <file>menubar.ui</file> using your favorite text editor."
msgstr "원하는 텍스트 편집기로 <file>menubar.ui</file> 파일을 만드십시오."

#. (itstool) path: item/p
#: C/menubar.py.page:38 C/menubar.vala.page:33
msgid "Enter the following line at the top of the file:"
msgstr "다음 줄을 파일 상단에 입력합니다:"

#. (itstool) path: item/code
#: C/menubar.py.page:39 C/menubar.vala.page:34
#, no-wrap
msgid ""
"\n"
"&lt;?xml version=\"1.0\"? encoding=\"UTF-8\"?&gt;"
msgstr ""
"\n"
"&lt;?xml version=\"1.0\"? encoding=\"UTF-8\"?&gt;"

#. (itstool) path: item/p
#: C/menubar.py.page:42 C/menubar.vala.page:37
msgid ""
"We want to create the interface which will contain our menubar and its "
"submenus. Our menubar will contain <gui>File</gui>, <gui>Edit</gui>, "
"<gui>Choices</gui> and <gui>Help</gui> submenus. We add the following XML "
"code to the file:"
msgstr ""
"메뉴 표시줄과 하위 메뉴를 넣을 인터페이스를 만들겠습니다. 메뉴 표시줄에는 "
"<gui>파일</gui>, <gui>편집</gui>, <gui>선택</gui> and <gui>도움말</gui> 하위 "
"메뉴를 넣겠습니다. 다음 XML 코드를 파일에 넣겠습니다:"

#. (itstool) path: item/code
#: C/menubar.py.page:43 C/menubar.vala.page:38
#, no-wrap
msgid ""
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"menubar\"&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;File&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Edit&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Choices&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Help&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;\n"
msgstr ""
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"menubar\"&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;File&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Edit&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Choices&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Help&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;\n"

#. (itstool) path: item/p
#: C/menubar.py.page:45
msgid ""
"Now we will create the .py file and use GtkBuilder to import the "
"<file>menubar.ui</file> we just created."
msgstr ""
"이제 .py 파일을 만들고 방금 만든 <file>menubar.ui</file>  파일을 가져올 때 "
"GtkBuilder를 활용하겠습니다."

#. (itstool) path: section/title
#: C/menubar.py.page:49 C/menubar.vala.page:43
msgid "Add the MenuBar to the window using GtkBuilder"
msgstr "GtkBuilder로 창에 MenuBar 추가하기"

#. (itstool) path: section/code
#: C/menubar.py.page:50
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"MenuBar Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # a builder to add the UI designed with Glade to the grid:\n"
"        builder = Gtk.Builder()\n"
"        # get the file (if it is there)\n"
"        try:\n"
"            builder.add_from_file(\"menubar_basis.ui\")\n"
"        except:\n"
"            print(\"file not found\")\n"
"            sys.exit()\n"
"\n"
"        # we use the method Gtk.Application.set_menubar(menubar) to add the menubar\n"
"        # to the application (Note: NOT the window!)\n"
"        self.set_menubar(builder.get_object(\"menubar\"))\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"MenuBar Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # a builder to add the UI designed with Glade to the grid:\n"
"        builder = Gtk.Builder()\n"
"        # get the file (if it is there)\n"
"        try:\n"
"            builder.add_from_file(\"menubar_basis.ui\")\n"
"        except:\n"
"            print(\"file not found\")\n"
"            sys.exit()\n"
"\n"
"        # we use the method Gtk.Application.set_menubar(menubar) to add the menubar\n"
"        # to the application (Note: NOT the window!)\n"
"        self.set_menubar(builder.get_object(\"menubar\"))\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/p
#: C/menubar.py.page:51
msgid ""
"Now run the python application. It should look like the picture at the top "
"of this page."
msgstr ""
"이제 파이썬 프로그램을 실행하십시오 이 페이지의 상단의 그림과 비슷하게 나타납"
"니다."

#. (itstool) path: section/title
#: C/menubar.py.page:55 C/menubar.vala.page:51
msgid "Add items to the menus"
msgstr "항목을 메뉴에 추가하기"

#. (itstool) path: section/p
#: C/menubar.py.page:56 C/menubar.vala.page:52
msgid ""
"We start off by adding 2 menuitems to the <gui>File</gui> menu: <gui>New</"
"gui> and <gui>Quit</gui>. We do this by adding a <code>section</code> to the "
"the <code>File</code> submenu with these items. The <file>menubar.ui</file> "
"should look like this (lines 6 to 13 inclusive comprise the newly added "
"section):"
msgstr ""
"<gui>파일</gui> 메뉴에 <gui>새로 만들기</gui>와 <gui>끝내기</gui> 메뉴 항목 2"
"개 추가로 시작하겠습니다. <code>파일</code> 하위 메뉴에 이 항목과 "
"<code>section</code>을 추가하면 됩니다. <file>menubar.ui</file> 파일은 다음"
"과 같이 나타나야 합니다(6번째 줄부터 13번째 줄까지 새로 추가한 섹션 구성이 들"
"어갑니다):"

#. (itstool) path: listing/title
#: C/menubar.py.page:59
msgid "menubar.ui"
msgstr "menubar.ui"

#. (itstool) path: listing/code
#. (itstool) path: section/code
#: C/menubar.py.page:60 C/menubar.vala.page:53
#, no-wrap
msgid ""
"\n"
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"menubar\"&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;File&lt;/attribute&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name =\"label\"&gt;Quit&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Edit&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Choices&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Help&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;"
msgstr ""
"\n"
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"menubar\"&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;File&lt;/attribute&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name =\"label\"&gt;Quit&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Edit&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Choices&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Help&lt;/attribute&gt;\n"
"    &lt;/submenu&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;"

#. (itstool) path: section/p
#: C/menubar.py.page:88
msgid ""
"Following this pattern, you can now add a <code>Copy</code> and a "
"<code>Paste</code> item to the <code>Edit</code> submenu, and an "
"<code>About</code> item to the <code>Help</code> submenu."
msgstr ""
"이런 방식으로 <code>편집</code> 하위 메뉴에 <code>복사</code> and a <code>붙"
"여넣기</code>를 추가하고, <code>도움말</code> 하위 메뉴로 <code>정보</code> "
"항목을 추가할 수 있습니다."

#. (itstool) path: section/title
#: C/menubar.py.page:93 C/menubar.vala.page:87
msgid "Setup actions"
msgstr "설정 동작"

#. (itstool) path: section/p
#: C/menubar.py.page:95
msgid ""
"We now create the actions for \"New\" and \"Quit\" connected to a callback "
"function in the Python file; for instance we create \"new\" as:"
msgstr ""
"파이썬 파일에서 콜백 함수로 연결한 \"New\"와 \"Quit\"에 대한 동작을 만들겠습"
"니다. 예를 들어 \"new\"를 다음과 같이 만듭니다:"

#. (itstool) path: section/code
#: C/menubar.py.page:96
#, no-wrap
msgid ""
"\n"
"new_action = Gio.SimpleAction.new(\"new\", None)\n"
"new_action.connect(\"activate\", self.new_callback)"
msgstr ""
"\n"
"new_action = Gio.SimpleAction.new(\"new\", None)\n"
"new_action.connect(\"activate\", self.new_callback)"

#. (itstool) path: section/p
#: C/menubar.py.page:100
msgid "And we create the callback function of \"new\" as"
msgstr "그리고 \"new\"의 콜백 함수를 다음과 같이 만듭니다"

#. (itstool) path: section/code
#: C/menubar.py.page:101
#, no-wrap
msgid ""
"\n"
"def new_callback(self, action, parameter):\n"
"    print \"You clicked \\\"New\\\"\""
msgstr ""
"\n"
"def new_callback(self, action, parameter):\n"
"    print \"You clicked \\\"New\\\"\""

#. (itstool) path: section/p
#: C/menubar.py.page:105
msgid ""
"Now, in the XML file, we connect the menu items to the actions in the XML "
"file by adding the \"action\" attribute:"
msgstr ""
"이제 XML 파일에서 \"action\" 속성을 추가하여 메뉴 항목을 XML 파일의 동작에 연"
"결하겠습니다:"

#. (itstool) path: section/code
#: C/menubar.py.page:106
#, no-wrap
msgid ""
"\n"
"&lt;item&gt;\n"
"  &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"  &lt;attribute name=\"action\"&gt;app.new&lt;/attribute&gt;\n"
"&lt;/item&gt;"
msgstr ""
"\n"
"&lt;item&gt;\n"
"  &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"  &lt;attribute name=\"action\"&gt;app.new&lt;/attribute&gt;\n"
"&lt;/item&gt;"

#. (itstool) path: section/p
#: C/menubar.py.page:112
msgid ""
"Note that for an action that is relative to the application, we use the "
"prefix <code>app.</code>; for actions that are relative to the window we use "
"the prefix <code>win.</code>."
msgstr ""
"참고로 프로그램과 관계있는 동작에는 <code>app</code> 접두부를 붙입니다. 창과 "
"관계된 동작은 <code>win</code> 접두부를 붙입니다."

#. (itstool) path: section/p
#: C/menubar.py.page:114
msgid ""
"Finally, in the Python file, we add the action to the application or to the "
"window - so for instance <code>app.new</code> will be added to the "
"application in the method <code>do_startup(self)</code> as"
msgstr ""
"마지막으로 파이썬 파일에서 프로그램 또는 창에 동작을 추가하겠습니다. 그래서 "
"예를 들어 <code>app.new</code>는 다음과 같이 <code>do_startup(self)</code> 메"
"서드에서 프로그램에 추가하겠습니다"

#. (itstool) path: section/code
#: C/menubar.py.page:115
#, no-wrap
msgid ""
"\n"
"self.add_action(new_action)"
msgstr ""
"\n"
"self.add_action(new_action)"

#. (itstool) path: section/p
#: C/menubar.py.page:118
msgid ""
"See <link xref=\"signals-callbacks.py\"/> for a more detailed explanation of "
"signals and callbacks."
msgstr ""
"시그널과 콜백 함수에 대한 자세한 내용은 <link xref=\"signals-callbacks.py\"/>"
"를 참고하십시오."

#. (itstool) path: section/title
#: C/menubar.py.page:122 C/menubar.vala.page:139
msgid "Actions: Application or Window?"
msgstr "동작: 프로그램 또는 창?"

#. (itstool) path: section/p
#: C/menubar.py.page:123 C/menubar.vala.page:140
msgid ""
"Above, we created the \"new\" and \"open\" actions as part of the "
"MyApplication class. Actions which control the application itself, such as "
"\"quit\" should be created similarly."
msgstr ""
"위에서 MyApplication 클래스의 \"new\"와 \"open\" 동작을 만들었습니다. 프로그"
"램 자체를 다루는 \"quit\" 같은 동작은 비슷하게 만듭니다."

#. (itstool) path: section/p
#: C/menubar.py.page:125 C/menubar.vala.page:143
msgid ""
"Some actions, such as \"copy\" and \"paste\" deal with the window, not the "
"application. Window actions should be created as part of the window class."
msgstr ""
"\"copy\"나 \"paste\" 같은 창을 다루는 일부 동작은, 프로그램에 넣지 않습니다. "
"창 동작은 창 클래스 부분에 만들어야합니다."

#. (itstool) path: section/p
#: C/menubar.py.page:127
msgid ""
"The complete example files contain both application actions and window "
"actions. The window actions are the ones usually included in the <link xref="
"\"gmenu.py\">application menu</link> also. It is not good practice to "
"include window actions in the application menu. For demonstration purposes, "
"the complete example files which follow include XML in the UI file which "
"creates the application menu which includes a \"New\" and \"Open\" item, and "
"these are hooked up to the same actions as the menubar items of the same "
"name."
msgstr ""
"완전한 예제 파일에는 프로그램 동작과 창 동작이 같이 들어있습니다. 창 동작은 "
"보통  <link xref=\"gmenu.py\">프로그램 메뉴</link> 에도 들어갑니다. 프로그램 "
"메뉴에 창 동작이 들어가는건 좋은 실례가 아닙니다. 용도 증명 목적으로, 완전한 "
"예제 파일에서는, \"New\"와 \"Open\" 항목이 들어간 프로그램 메뉴를 만드는 사용"
"자 인터페이스 파일에 들어간 XML 내용을 따르며, 동일한 이름을 지닌 메뉴 표시"
"줄 항목과 동일한 동작을 수행합니다."

#. (itstool) path: section/title
#: C/menubar.py.page:131 C/menubar.vala.page:133
msgid "Choices submenu and items with state"
msgstr "상태가 들어간 선택 하위 메뉴 및 항목"

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/menubar.py.page:132 C/menubar.vala.page:134
msgctxt "_"
msgid ""
"external ref='media/menubar_choices.png' "
"md5='47cdfa12caf85ba20dd3e835bd7f893f'"
msgstr ""

#. (itstool) path: section/p
#: C/menubar.py.page:133
msgid ""
"Lines 30 to 80 inclusive of the <link xref=\"menubar.py#xml-code\"/> "
"demonstrate the XML code used to create the UI for <gui>Choices</gui> menu."
msgstr ""
"30번째 줄 부터 80번째 줄 까지 <link xref=\"menubar.py#xml-code\"/> 코드가 들"
"어간 부분에서 <gui>선택</gui> 메뉴의 사용자 인터페이스를 만들 때 쓰는 XML 코"
"드 예제를 시연합니다."

#. (itstool) path: section/p
#: C/menubar.py.page:135
msgid ""
"The actions created so far are <em>stateless</em>, that is they do not "
"retain or depend on a state given by the action itself. The actions we need "
"to create for the Choices submenu, on the other hand, are <em>stateful</em>. "
"An example of creation of a stateful action is:"
msgstr ""
"여지껏 만든 동작은 <em>상태가 없는</em> 상황인데 동작 자체에 주어진 상태에 따"
"르거나 상태 값을 유지하지 않습니다. 반면에 선택 하위 메뉴에 우리가 만들 동작"
"은 <em>상태를 보유하고 있습니다</em>. 상태를 가진 동작을 만드는 예제는 다음"
"과 같습니다:"

#. (itstool) path: section/code
#: C/menubar.py.page:136
#, no-wrap
msgid ""
"\n"
"shape_action = Gio.SimpleAction.new_stateful(\"shape\", GLib.VariantType.new('s'), GLib.Variant.new_string('line'))"
msgstr ""
"\n"
"shape_action = Gio.SimpleAction.new_stateful(\"shape\", GLib.VariantType.new('s'), GLib.Variant.new_string('line'))"

#. (itstool) path: section/p
#: C/menubar.py.page:139
msgid ""
"where the variables of the method are: name, parameter type (in this case, a "
"string - see <link href=\"http://developer.gnome.org/glib/unstable/glib-"
"GVariantType.html\">here</link> for a complete list of character meanings), "
"initial state (in this case, 'line' - in case of a <code>True</code> boolean "
"value it should be <code>Glib.Variant.new_boolean(True)</code>, and so on, "
"see <link href=\"http://developer.gnome.org/glib/unstable/glib-GVariant.html"
"\">here</link> for a complete list)"
msgstr ""
"메서드 변수 부분은 다음과 같습니다. 이름, 매개변수 형식(우리 같은 경우는 문자"
"열입니다. 문자 의미에 대한 완전한 내용은 <link href=\"http://developer.gnome."
"org/glib/unstable/glib-GVariantType.html\">여기</link> )에 있습니다), 초기 상"
"태(이 경우 'line' 입니다. <code>True</code> 부울린 값의 경우는 <code>Glib."
"Variant.new_boolean(True)</code>여야 합니다. 완전한 내용은 <link href="
"\"http://developer.gnome.org/glib/unstable/glib-GVariant.html\">이 부분</"
"link> 참고)를 다룹니다."

#. (itstool) path: section/p
#: C/menubar.py.page:141
msgid ""
"After creating the stateful SimpleAction we connect it to the callback "
"function and we add it to the window (or the application, if it is the "
"case), as before:"
msgstr ""
"앞에서와 마찬가지로 상태가 들어간 SimpleAction을 만든 다음 콜백 함수로 연결하"
"고 창(또는 지금 같은 경우는 프로그램)에 추가하겠습니다:"

#. (itstool) path: section/code
#: C/menubar.py.page:143
#, no-wrap
msgid ""
"\n"
"shape_action.connect(\"activate\", self.shape_callback)\n"
"self.add_action(shape_action)"
msgstr ""
"\n"
"shape_action.connect(\"activate\", self.shape_callback)\n"
"self.add_action(shape_action)"

#. (itstool) path: section/title
#: C/menubar.py.page:150 C/menubar.vala.page:154
msgid "Complete XML UI file for this example"
msgstr "이 예제의 완전한 XML UI 파일"

#. (itstool) path: section/code
#: C/menubar.py.page:151 C/menubar.vala.page:155
#, no-wrap
msgid ""
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"menubar\"&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;File&lt;/attribute&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.new&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Quit&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Edit&lt;/attribute&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Copy&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;win.copy&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Paste&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;win.paste&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Choices&lt;/attribute&gt;\n"
"      &lt;submenu&gt;\n"
"        &lt;attribute name=\"label\"&gt;Shapes&lt;/attribute&gt;\n"
"          &lt;section&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Line&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;line&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Triangle&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;triangle&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Square&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;square&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Polygon&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;polygon&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Circle&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;circle&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"          &lt;/section&gt;\n"
"      &lt;/submenu&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;On&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.state&lt;/attribute&gt;\n"
"          &lt;attribute name=\"target\"&gt;on&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Off&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.state&lt;/attribute&gt;\n"
"          &lt;attribute name=\"target\"&gt;off&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Awesome&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.awesome&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Help&lt;/attribute&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;About&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;win.about&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"  &lt;/menu&gt;\n"
"  &lt;menu id=\"appmenu\"&gt;\n"
"    &lt;section&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;app.new&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Quit&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"    &lt;/section&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;\n"
msgstr ""
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;menu id=\"menubar\"&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;File&lt;/attribute&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.new&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Quit&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Edit&lt;/attribute&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Copy&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;win.copy&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Paste&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;win.paste&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Choices&lt;/attribute&gt;\n"
"      &lt;submenu&gt;\n"
"        &lt;attribute name=\"label\"&gt;Shapes&lt;/attribute&gt;\n"
"          &lt;section&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Line&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;line&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Triangle&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;triangle&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Square&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;square&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Polygon&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;polygon&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"            &lt;item&gt;\n"
"              &lt;attribute name=\"label\"&gt;Circle&lt;/attribute&gt;\n"
"              &lt;attribute name=\"action\"&gt;win.shape&lt;/attribute&gt;\n"
"              &lt;attribute name=\"target\"&gt;circle&lt;/attribute&gt;\n"
"            &lt;/item&gt;\n"
"          &lt;/section&gt;\n"
"      &lt;/submenu&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;On&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.state&lt;/attribute&gt;\n"
"          &lt;attribute name=\"target\"&gt;on&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Off&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.state&lt;/attribute&gt;\n"
"          &lt;attribute name=\"target\"&gt;off&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;Awesome&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;app.awesome&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"    &lt;submenu&gt;\n"
"      &lt;attribute name=\"label\"&gt;Help&lt;/attribute&gt;\n"
"      &lt;section&gt;\n"
"        &lt;item&gt;\n"
"          &lt;attribute name=\"label\"&gt;About&lt;/attribute&gt;\n"
"          &lt;attribute name=\"action\"&gt;win.about&lt;/attribute&gt;\n"
"        &lt;/item&gt;\n"
"      &lt;/section&gt;\n"
"    &lt;/submenu&gt;\n"
"  &lt;/menu&gt;\n"
"  &lt;menu id=\"appmenu\"&gt;\n"
"    &lt;section&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;app.new&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"      &lt;item&gt;\n"
"        &lt;attribute name=\"label\"&gt;Quit&lt;/attribute&gt;\n"
"        &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"      &lt;/item&gt;\n"
"    &lt;/section&gt;\n"
"  &lt;/menu&gt;\n"
"&lt;/interface&gt;\n"

#. (itstool) path: section/title
#: C/menubar.py.page:155
msgid "Complete Python file for this example"
msgstr "이 예제의 완전한 파이썬 파일"

#. (itstool) path: section/code
#: C/menubar.py.page:156
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import GLib\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"MenuBar Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"\n"
"        # action without a state created (name, parameter type)\n"
"        copy_action = Gio.SimpleAction.new(\"copy\", None)\n"
"        # connected with the callback function\n"
"        copy_action.connect(\"activate\", self.copy_callback)\n"
"        # added to the window\n"
"        self.add_action(copy_action)\n"
"\n"
"        # action without a state created (name, parameter type)\n"
"        paste_action = Gio.SimpleAction.new(\"paste\", None)\n"
"        # connected with the callback function\n"
"        paste_action.connect(\"activate\", self.paste_callback)\n"
"        # added to the window\n"
"        self.add_action(paste_action)\n"
"\n"
"        # action with a state created (name, parameter type, initial state)\n"
"        shape_action = Gio.SimpleAction.new_stateful(\n"
"            \"shape\", GLib.VariantType.new('s'), GLib.Variant.new_string('line'))\n"
"        # connected to the callback function\n"
"        shape_action.connect(\"activate\", self.shape_callback)\n"
"        # added to the window\n"
"        self.add_action(shape_action)\n"
"\n"
"        # action with a state created\n"
"        about_action = Gio.SimpleAction.new(\"about\", None)\n"
"        # action connected to the callback function\n"
"        about_action.connect(\"activate\", self.about_callback)\n"
"        # action added to the application\n"
"        self.add_action(about_action)\n"
"\n"
"    # callback function for copy_action\n"
"    def copy_callback(self, action, parameter):\n"
"        print(\"\\\"Copy\\\" activated\")\n"
"\n"
"    # callback function for paste_action\n"
"    def paste_callback(self, action, parameter):\n"
"        print(\"\\\"Paste\\\" activated\")\n"
"\n"
"    # callback function for shape_action\n"
"    def shape_callback(self, action, parameter):\n"
"        print(\"Shape is set to\", parameter.get_string())\n"
"        # Note that we set the state of the action!\n"
"        action.set_state(parameter)\n"
"\n"
"    # callback function for about (see the AboutDialog example)\n"
"    def about_callback(self, action, parameter):\n"
"        # a  Gtk.AboutDialog\n"
"        aboutdialog = Gtk.AboutDialog()\n"
"\n"
"        # lists of authors and documenters (will be used later)\n"
"        authors = [\"GNOME Documentation Team\"]\n"
"        documenters = [\"GNOME Documentation Team\"]\n"
"\n"
"        # we fill in the aboutdialog\n"
"        aboutdialog.set_program_name(\"MenuBar Example\")\n"
"        aboutdialog.set_copyright(\n"
"            \"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\")\n"
"        aboutdialog.set_authors(authors)\n"
"        aboutdialog.set_documenters(documenters)\n"
"        aboutdialog.set_website(\"http://developer.gnome.org\")\n"
"        aboutdialog.set_website_label(\"GNOME Developer Website\")\n"
"\n"
"        # to close the aboutdialog when \"close\" is clicked we connect the\n"
"        # \"response\" signal to on_close\n"
"        aboutdialog.connect(\"response\", self.on_close)\n"
"        # show the aboutdialog\n"
"        aboutdialog.show()\n"
"\n"
"    # a callback function to destroy the aboutdialog\n"
"    def on_close(self, action, parameter):\n"
"        action.destroy()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        # FIRST THING TO DO: do_startup()\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # action without a state created\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        # action connected to the callback function\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        # action added to the application\n"
"        self.add_action(new_action)\n"
"\n"
"        # action without a state created\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        # action connected to the callback function\n"
"        quit_action.connect(\"activate\", self.quit_callback)\n"
"        # action added to the application\n"
"        self.add_action(quit_action)\n"
"\n"
"        # action with a state created\n"
"        state_action = Gio.SimpleAction.new_stateful(\n"
"            \"state\",  GLib.VariantType.new('s'), GLib.Variant.new_string('off'))\n"
"        # action connected to the callback function\n"
"        state_action.connect(\"activate\", self.state_callback)\n"
"        # action added to the application\n"
"        self.add_action(state_action)\n"
"\n"
"        # action with a state created\n"
"        awesome_action = Gio.SimpleAction.new_stateful(\n"
"            \"awesome\", None, GLib.Variant.new_boolean(False))\n"
"        # action connected to the callback function\n"
"        awesome_action.connect(\"activate\", self.awesome_callback)\n"
"        # action added to the application\n"
"        self.add_action(awesome_action)\n"
"\n"
"        # a builder to add the UI designed with Glade to the grid:\n"
"        builder = Gtk.Builder()\n"
"        # get the file (if it is there)\n"
"        try:\n"
"            builder.add_from_file(\"menubar.ui\")\n"
"        except:\n"
"            print(\"file not found\")\n"
"            sys.exit()\n"
"\n"
"        # we use the method Gtk.Application.set_menubar(menubar) to add the menubar\n"
"        # and the menu to the application (Note: NOT the window!)\n"
"        self.set_menubar(builder.get_object(\"menubar\"))\n"
"        self.set_app_menu(builder.get_object(\"appmenu\"))\n"
"\n"
"    # callback function for new\n"
"    def new_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"New\\\"\")\n"
"\n"
"    # callback function for quit\n"
"    def quit_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"Quit\\\"\")\n"
"        sys.exit()\n"
"\n"
"    # callback function for state\n"
"    def state_callback(self, action, parameter):\n"
"        print(\"State is set to\", parameter.get_string())\n"
"        action.set_state(parameter)\n"
"\n"
"    # callback function for awesome\n"
"    def awesome_callback(self, action, parameter):\n"
"        action.set_state(GLib.Variant.new_boolean(not action.get_state()))\n"
"        if action.get_state().get_boolean() is True:\n"
"            print(\"You checked \\\"Awesome\\\"\")\n"
"        else:\n"
"            print(\"You unchecked \\\"Awesome\\\"\")\n"
"\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import GLib\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"MenuBar Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"\n"
"        # action without a state created (name, parameter type)\n"
"        copy_action = Gio.SimpleAction.new(\"copy\", None)\n"
"        # connected with the callback function\n"
"        copy_action.connect(\"activate\", self.copy_callback)\n"
"        # added to the window\n"
"        self.add_action(copy_action)\n"
"\n"
"        # action without a state created (name, parameter type)\n"
"        paste_action = Gio.SimpleAction.new(\"paste\", None)\n"
"        # connected with the callback function\n"
"        paste_action.connect(\"activate\", self.paste_callback)\n"
"        # added to the window\n"
"        self.add_action(paste_action)\n"
"\n"
"        # action with a state created (name, parameter type, initial state)\n"
"        shape_action = Gio.SimpleAction.new_stateful(\n"
"            \"shape\", GLib.VariantType.new('s'), GLib.Variant.new_string('line'))\n"
"        # connected to the callback function\n"
"        shape_action.connect(\"activate\", self.shape_callback)\n"
"        # added to the window\n"
"        self.add_action(shape_action)\n"
"\n"
"        # action with a state created\n"
"        about_action = Gio.SimpleAction.new(\"about\", None)\n"
"        # action connected to the callback function\n"
"        about_action.connect(\"activate\", self.about_callback)\n"
"        # action added to the application\n"
"        self.add_action(about_action)\n"
"\n"
"    # callback function for copy_action\n"
"    def copy_callback(self, action, parameter):\n"
"        print(\"\\\"Copy\\\" activated\")\n"
"\n"
"    # callback function for paste_action\n"
"    def paste_callback(self, action, parameter):\n"
"        print(\"\\\"Paste\\\" activated\")\n"
"\n"
"    # callback function for shape_action\n"
"    def shape_callback(self, action, parameter):\n"
"        print(\"Shape is set to\", parameter.get_string())\n"
"        # Note that we set the state of the action!\n"
"        action.set_state(parameter)\n"
"\n"
"    # callback function for about (see the AboutDialog example)\n"
"    def about_callback(self, action, parameter):\n"
"        # a  Gtk.AboutDialog\n"
"        aboutdialog = Gtk.AboutDialog()\n"
"\n"
"        # lists of authors and documenters (will be used later)\n"
"        authors = [\"GNOME Documentation Team\"]\n"
"        documenters = [\"GNOME Documentation Team\"]\n"
"\n"
"        # we fill in the aboutdialog\n"
"        aboutdialog.set_program_name(\"MenuBar Example\")\n"
"        aboutdialog.set_copyright(\n"
"            \"Copyright \\xc2\\xa9 2012 GNOME Documentation Team\")\n"
"        aboutdialog.set_authors(authors)\n"
"        aboutdialog.set_documenters(documenters)\n"
"        aboutdialog.set_website(\"http://developer.gnome.org\")\n"
"        aboutdialog.set_website_label(\"GNOME Developer Website\")\n"
"\n"
"        # to close the aboutdialog when \"close\" is clicked we connect the\n"
"        # \"response\" signal to on_close\n"
"        aboutdialog.connect(\"response\", self.on_close)\n"
"        # show the aboutdialog\n"
"        aboutdialog.show()\n"
"\n"
"    # a callback function to destroy the aboutdialog\n"
"    def on_close(self, action, parameter):\n"
"        action.destroy()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        # FIRST THING TO DO: do_startup()\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # action without a state created\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        # action connected to the callback function\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        # action added to the application\n"
"        self.add_action(new_action)\n"
"\n"
"        # action without a state created\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        # action connected to the callback function\n"
"        quit_action.connect(\"activate\", self.quit_callback)\n"
"        # action added to the application\n"
"        self.add_action(quit_action)\n"
"\n"
"        # action with a state created\n"
"        state_action = Gio.SimpleAction.new_stateful(\n"
"            \"state\",  GLib.VariantType.new('s'), GLib.Variant.new_string('off'))\n"
"        # action connected to the callback function\n"
"        state_action.connect(\"activate\", self.state_callback)\n"
"        # action added to the application\n"
"        self.add_action(state_action)\n"
"\n"
"        # action with a state created\n"
"        awesome_action = Gio.SimpleAction.new_stateful(\n"
"            \"awesome\", None, GLib.Variant.new_boolean(False))\n"
"        # action connected to the callback function\n"
"        awesome_action.connect(\"activate\", self.awesome_callback)\n"
"        # action added to the application\n"
"        self.add_action(awesome_action)\n"
"\n"
"        # a builder to add the UI designed with Glade to the grid:\n"
"        builder = Gtk.Builder()\n"
"        # get the file (if it is there)\n"
"        try:\n"
"            builder.add_from_file(\"menubar.ui\")\n"
"        except:\n"
"            print(\"file not found\")\n"
"            sys.exit()\n"
"\n"
"        # we use the method Gtk.Application.set_menubar(menubar) to add the menubar\n"
"        # and the menu to the application (Note: NOT the window!)\n"
"        self.set_menubar(builder.get_object(\"menubar\"))\n"
"        self.set_app_menu(builder.get_object(\"appmenu\"))\n"
"\n"
"    # callback function for new\n"
"    def new_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"New\\\"\")\n"
"\n"
"    # callback function for quit\n"
"    def quit_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"Quit\\\"\")\n"
"        sys.exit()\n"
"\n"
"    # callback function for state\n"
"    def state_callback(self, action, parameter):\n"
"        print(\"State is set to\", parameter.get_string())\n"
"        action.set_state(parameter)\n"
"\n"
"    # callback function for awesome\n"
"    def awesome_callback(self, action, parameter):\n"
"        action.set_state(GLib.Variant.new_boolean(not action.get_state()))\n"
"        if action.get_state().get_boolean() is True:\n"
"            print(\"You checked \\\"Awesome\\\"\")\n"
"        else:\n"
"            print(\"You unchecked \\\"Awesome\\\"\")\n"
"\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/menubar.py.page:159
msgid "Mnemonics and Accelerators"
msgstr "접근 키와 단축키"

#. (itstool) path: section/p
#: C/menubar.py.page:160 C/menubar.vala.page:162
msgid ""
"Labels may contain mnemonics. Mnemonics are underlined characters in the "
"label, used for keyboard navigation. Mnemonics are created by placing an "
"underscore before the mnemonic character. For example \"_File\" instead of "
"just \"File\" in the menubar.ui label attribute."
msgstr ""
"레이블에는 접근 키가 들어갈 수 있습니다. 접근 키는 키보드로 탐색할 때 활용하"
"는 레이블에 밑줄이 들어간 문자입니다. 접근 키는 접근키 문자 앞에 밑줄을 넣어 "
"만듭니다. 예를 들어 menubar.ui 레이블 속성에서 \"File\" 대신 \"_File\"을 넣습"
"니다."

#. (itstool) path: section/p
#: C/menubar.py.page:161 C/menubar.vala.page:163
msgid ""
"The mnemonics are visible when you press the <key>Alt</key> key. Pressing "
"<keyseq><key>Alt</key><key>F</key></keyseq> will open the <gui>File</gui> "
"menu."
msgstr ""
"접근키는 <key>Alt</key> 키를 누르면 나타납니다. <keyseq><key>Alt</"
"key><key>F</key></keyseq> 키를 누르면 <gui>파일</gui> 메뉴가 나타납니다."

#. (itstool) path: section/p
#: C/menubar.py.page:163 C/menubar.vala.page:168
msgid ""
"Accelerators can be explicitly added in the UI definitions. For example, it "
"is common to be able to quit an application by pressing <keyseq><key>Ctrl</"
"key><key>Q</key></keyseq> or to save a file by pressing <keyseq><key>Ctrl</"
"key><key>S</key></keyseq>. To add an accelerator to the UI definition, you "
"simply need add an \"accel\" attribute to the item."
msgstr ""
"가속키는 UI 정의에 분명하게 추가할 수 있습니다. 예를 들어 일반적으로 프로그램"
"을 끝내는 동작은 <keyseq><key>Ctrl</key><key>Q</key></keyseq> 키를 눌러 진행"
"할 수 있고, 또는 파일을 저장하는 동작은 <keyseq><key>Ctrl</key><key>S</key></"
"keyseq> 키를 눌러 진행할 수 있습니다. UI 정의에 가속키를 추가하려면 간단하게 "
"항목의 \"accel\" 속성 값을 추가하면 됩니다."

#. (itstool) path: section/p
#: C/menubar.py.page:164 C/menubar.vala.page:169
msgid ""
"<code mime=\"application/xml\">&lt;attribute name=\"accel\"&gt;&amp;lt;"
"Primary&amp;gt;q&lt;/attribute&gt;</code> will create the <keyseq><key>Ctrl</"
"key><key>Q</key></keyseq> sequence when added to the <code>Quit</code> label "
"item. Here, \"Primary\" refers to the <key>Ctrl</key> key on a PC or the "
"<key>⌘</key> key on a Mac."
msgstr ""
"<code mime=\"application/xml\">&lt;attribute name=\"accel\"&gt;&amp;lt;"
"Primary&amp;gt;q&lt;/attribute&gt;</code> 구문은 <code>Quit</code> 레이블 항"
"목에 추가할 <keyseq><key>Ctrl</key><key>Q</key></keyseq> 키 조합 입력을 만듭"
"니다. 여기서, \"Primary\"는 PC의 <key>Ctrl</key>키 또는 맥의 <key>⌘</key> 키"
"를 따릅니다."

#. (itstool) path: section/code
#: C/menubar.py.page:166 C/menubar.vala.page:171
#, no-wrap
msgid ""
"\n"
"&lt;item&gt;\n"
"  &lt;attribute name=\"label\"&gt;_Quit&lt;/attribute&gt;\n"
"  &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"  &lt;attribute name=\"accel\"&gt;&amp;lt;Primary&amp;gt;q&lt;/attribute&gt;\n"
"&lt;/item&gt;"
msgstr ""
"\n"
"&lt;item&gt;\n"
"  &lt;attribute name=\"label\"&gt;_Quit&lt;/attribute&gt;\n"
"  &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"  &lt;attribute name=\"accel\"&gt;&amp;lt;Primary&amp;gt;q&lt;/attribute&gt;\n"
"&lt;/item&gt;"

#. (itstool) path: section/title
#: C/menubar.py.page:174 C/menubar.vala.page:179
msgid "Translatable strings"
msgstr "번역할 문자열"

#. (itstool) path: section/p
#: C/menubar.py.page:175 C/menubar.vala.page:180
msgid ""
"Since GNOME applications are being translated into <link href=\"http://l10n."
"gnome.org/languages/\">many languages</link>, it is important that the "
"strings in your application are translatable. To make a label translatable, "
"simple set <code>translatable=\"yes\"</code>:"
msgstr ""
"그놈 프로그램은 <link href=\"http://l10n.gnome.org/languages/\">다양한 언어</"
"link>로 번역하기에 프로그램 문자열을 번역할 수 있게 만들어 두는게 중요합니"
"다. 레이블을 번역할 수 있게 하려면 간단히 <code>translatable=\"yes\"</code>"
"를 설정하십시오:"

#. (itstool) path: section/code
#: C/menubar.py.page:179
#, no-wrap
msgid "&lt;attribute name=\"label\" translatable=\"yes\"&gt;Quit&lt;/attribute&gt;"
msgstr "&lt;attribute name=\"label\" translatable=\"yes\"&gt;Quit&lt;/attribute&gt;"

#. (itstool) path: item/p
#: C/menubar.py.page:186
msgid ""
"<link href=\"http://developer.gnome.org/gio/unstable/GSimpleAction.html"
"\">GSimpleAction</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gio/unstable/GSimpleAction.html"
"\">GSimpleAction</link>"

#. (itstool) path: item/p
#: C/menubar.py.page:187 C/toolbar_builder.py.page:197
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkBuilder.html"
"\">GtkBuilder</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkBuilder.html"
"\">GtkBuilder</link>"

#. (itstool) path: info/title
#: C/menubar.vala.page:8
msgctxt "text"
msgid "MenuBar (Vala)"
msgstr "MenuBar (Vala)"

#. (itstool) path: item/p
#: C/menubar.vala.page:40
msgid ""
"Now we will create the .vala file and use GtkBuilder to import the "
"<file>menubar.ui</file> we just created."
msgstr ""
"이제 .vala 파일을 만들고 방금 추가한 <file>menubar.ui</file> 파일을 "
"GtkBuilder를 사용하여 임포팅하겠습니다."

#. (itstool) path: section/code
#: C/menubar.vala.page:44
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"MenuBar Example\");\n"
"\t\tthis.set_default_size (200, 200);\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication: Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Setup menubar. */\n"
"\t\t/* Get the UI file. */\n"
"\t\tvar builder = new Gtk.Builder ();\n"
"\t\ttry {\n"
"\t\t\tbuilder.add_from_file (\"menubar_basis.ui\");\n"
"\t\t/* Handle the exception. */\n"
"\t\t} catch (Error e) {\n"
"\t\t\terror (\"Unable to load file: %s\", e.message);\n"
"\t\t}\n"
"\n"
"\t\t/* Get the menubar from the builder. */\n"
"\t\tthis.menubar = builder.get_object (\"menubar\") as MenuModel;\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"MenuBar Example\");\n"
"\t\tthis.set_default_size (200, 200);\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication: Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Setup menubar. */\n"
"\t\t/* Get the UI file. */\n"
"\t\tvar builder = new Gtk.Builder ();\n"
"\t\ttry {\n"
"\t\t\tbuilder.add_from_file (\"menubar_basis.ui\");\n"
"\t\t/* Handle the exception. */\n"
"\t\t} catch (Error e) {\n"
"\t\t\terror (\"Unable to load file: %s\", e.message);\n"
"\t\t}\n"
"\n"
"\t\t/* Get the menubar from the builder. */\n"
"\t\tthis.menubar = builder.get_object (\"menubar\") as MenuModel;\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: section/p
#: C/menubar.vala.page:45
msgid ""
"Now, compile the vala file, and run it. The application should look like the "
"picture at the top of this page."
msgstr ""
"이제 vala 파일을 컴파일하고 실행하십시오. 프로그램은 페이지 상단의 사진과 같"
"은 모습이 나타납니다."

#. (itstool) path: section/p
#: C/menubar.vala.page:80
msgid ""
"Following this pattern, you can now add a <code>Copy</code> and a "
"<code>Paste</code> item to the <code>Edit</code> submenu, and an "
"<code>About</code> item to the <code>Help</code> submenu. We will hold off "
"on adding items to the <link xref=\"menubar.vala#choices\">Choices submenu</"
"link> until further in the tutorial."
msgstr ""
"이 방식을 따라 <code>편집</code> 하위 메뉴로 <code>복사</code> 와 <code>붙여"
"넣기</code> 를 추가하고, <code>Help</code> 하위 메뉴에 <code>정보</code>를 추"
"가할 수 있습니다. 다음 따라하기 지침을 진행할 때까지 <link xref=\"menubar."
"vala#choices\">선택 하위 메뉴</link>로의 항목 추가를 보류하겠습니다."

#. (itstool) path: note/p
#: C/menubar.vala.page:82
msgid ""
"You do not need to recompile the vala program if you only made changes to "
"the UI file. Just run your previously compiled application, and the UI "
"changes will be reflected."
msgstr ""
"UI 파일만 바꾸었다면 vala 프로그램을 다시 컴파일할 필요는 없습니다. 그냥 이전"
"에 컴파일한 프로그램을 실행만 하시면 사용자 인터페이스를 반영합니다."

#. (itstool) path: section/p
#: C/menubar.vala.page:88
msgid "This is a three step process."
msgstr "세 단계로 이루어집니다."

#. (itstool) path: item/p
#: C/menubar.vala.page:90
msgid ""
"First we create the ActionEntry array in the MyApplication class. An "
"ActionEntry consists of:"
msgstr ""
"우선 MyApplication 클래스에 ActionEntry 배열을 만들겠습니다. ActionEntry 구성"
"은 다음과 같습니다:"

#. (itstool) path: item/p
#: C/menubar.vala.page:93
msgid "the \"action name\" (mandatory)"
msgstr "\"동작 이름\"(필수)"

#. (itstool) path: item/p
#: C/menubar.vala.page:94
msgid ""
"the callback function to connect to the \"activate\" signal of the action "
"(if applicable)"
msgstr "동작의 \"activate\" 시그널에 연결하는 콜백 함수(가능하다면)"

#. (itstool) path: item/p
#: C/menubar.vala.page:95
msgid ""
"the type of the parameter that must be passed to the activate function for "
"the action (if applicable)"
msgstr "동작에 대한 활성화 함수로 전달할 매개변수 형식(가능하다면)"

#. (itstool) path: item/p
#: C/menubar.vala.page:96
msgid "the initial state for this action (if applicable)"
msgstr "동작의 초기 상태(가능하다면)"

#. (itstool) path: item/p
#: C/menubar.vala.page:97
msgid "the callback to connect to \"change-state\" signal (if applicable)"
msgstr "\"change-state\" 시그널에 연결할 콜백 함수(가능하다면)"

#. (itstool) path: item/code
#: C/menubar.vala.page:99
#, no-wrap
msgid ""
"\n"
"const ActionEntry[] actions = {\n"
"    { \"new\", new_cb }, // {\"action name\", callback_function}\n"
"    { \"quit\", quit_cb }\n"
"};"
msgstr ""
"\n"
"const ActionEntry[] actions = {\n"
"    { \"new\", new_cb }, // {\"action name\", callback_function}\n"
"    { \"quit\", quit_cb }\n"
"};"

#. (itstool) path: item/p
#: C/menubar.vala.page:106
msgid "Second, we create the callback functions the actions are connected to."
msgstr "두번째로 연결할 동작의 콜백 함수를 만들겠습니다."

#. (itstool) path: item/code
#: C/menubar.vala.page:107
#, no-wrap
msgid ""
"\n"
"void new_cb (SimpleAction action, Variant? parameter) {\n"
"    print (\"You clicked \\\"New\\\"\\n\");\n"
"    //new MyWindow (this).show ();\n"
"}\n"
"\n"
"void quit_cb (SimpleAction action, Variant? parameter) {\n"
"    print (\"You clicked \\\"Quit\\\"\\n\");\n"
"    this.quit ();\n"
"}"
msgstr ""
"\n"
"void new_cb (SimpleAction action, Variant? parameter) {\n"
"    print (\"You clicked \\\"New\\\"\\n\");\n"
"    //new MyWindow (this).show ();\n"
"}\n"
"\n"
"void quit_cb (SimpleAction action, Variant? parameter) {\n"
"    print (\"You clicked \\\"Quit\\\"\\n\");\n"
"    this.quit ();\n"
"}"

#. (itstool) path: item/p
#: C/menubar.vala.page:118
msgid ""
"And lastly, we connect the menu items to the actions in the XML file by "
"adding the \"action\" attribute:"
msgstr ""
"마지막으로, \"action\" 속성을 추가하여 XML 파일의 동작에 메뉴 항목을 연결하겠"
"습니다:"

#. (itstool) path: item/code
#: C/menubar.vala.page:119
#, no-wrap
msgid ""
"\n"
"&lt;item&gt;\n"
"  &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"  &lt;attribute name=\"action\"&gt;app.new&lt;/attribute&gt;\n"
"&lt;/item&gt;\n"
"&lt;item&gt;\n"
"  &lt;attribute name=\"label\"&gt;Quit&lt;/attribute&gt;\n"
"  &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"&lt;/item&gt;"
msgstr ""
"\n"
"&lt;item&gt;\n"
"  &lt;attribute name=\"label\"&gt;New&lt;/attribute&gt;\n"
"  &lt;attribute name=\"action\"&gt;app.new&lt;/attribute&gt;\n"
"&lt;/item&gt;\n"
"&lt;item&gt;\n"
"  &lt;attribute name=\"label\"&gt;Quit&lt;/attribute&gt;\n"
"  &lt;attribute name=\"action\"&gt;app.quit&lt;/attribute&gt;\n"
"&lt;/item&gt;"

#. (itstool) path: section/p
#: C/menubar.vala.page:135
msgid ""
"Lines 30 to 80 inclusive of the <link xref=\"menubar.vala#xml-code\"/> "
"demonstrate the XML code used to create the UI for <gui>Choices</gui> menu."
msgstr ""
"30줄부터 80줄 까지 <link xref=\"menubar.vala#xml-code\"/>가 들어간 부분에서 "
"<gui>선택</gui> 메뉴 사용자 인터페이스를 만드는 XML 코드를 시연하고 있습니다."

#. (itstool) path: section/p
#: C/menubar.vala.page:146
msgid ""
"The complete example files contain both application actions and window "
"applications. The window actions are the ones usually included in the <link "
"xref=\"gmenu.vala\">application menu</link> also. It is not good practice to "
"include window actions in the application menu. For demonstration purposes, "
"the complete example files which follow include XML in the UI file which "
"creates the application menu which includes a \"New\" and \"Open\" item, and "
"these are hooked up to the same actions as the menubar items of the same "
"name."
msgstr ""
"완전한 예제 파일에는 프로그램 동작과 창 프로그램이 들어있습니다. 창 동작은 보"
"통 <link xref=\"gmenu.vala\">프로그램 메뉴</link>에도 들어있습니다. 창 동작"
"을 프로그램 메뉴에 넣는건 별로 좋은 습관이 아닙니다. 시연 목적으로 \"New\"와 "
"\"Open\" 항목이 들어간 프로그램 메뉴를 만드는 UI 파일에 들어간 XML의 내용을 "
"따르며, 동일한 이름을 지닌 메뉴 표시줄 항목 처럼 동일한 동작을 실행합니다."

#. (itstool) path: section/title
#: C/menubar.vala.page:157
msgid "Complete Vala file for this example"
msgstr "이 예제에 대한 완전한 Vala 파일입니다"

#. (itstool) path: section/code
#: C/menubar.vala.page:158
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Callback functions for the window actions. */\n"
"\tvoid copy_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"\\\"Copy\\\" activated\\n\");\n"
"\t}\n"
"\n"
"\tvoid paste_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"\\\"Paste\\\" activated\\n\");\n"
"\t}\n"
"\n"
"\tvoid shape_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"shape is set to %s\\n\", parameter.get_string(null));\n"
"\t\taction.set_state (parameter);\n"
"\t}\n"
"\n"
"\t/* Create the window actions. */\n"
"\tconst ActionEntry[] actions = {\n"
"\t\t/*{ \"action name\", cb to connect to \"activate\" signal, parameter type,\n"
"\t\t     initial state, cb to connect to \"change-state\" signal } */\n"
"\t\t{ \"copy\", copy_cb },\n"
"\t\t{ \"paste\", paste_cb },\n"
"\t\t{ \"shape\", shape_cb, \"s\", \"'line'\"}\n"
"\t};\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"MenuBar Example\");\n"
"\t\tthis.set_default_size (200, 200);\n"
"\n"
"\t\t/* Setup window actions. */\n"
"\t\tthis.add_action_entries (actions, this);\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication: Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\t/* Callback functions for the application actions. */\n"
"\tvoid new_cb (SimpleAction action, Variant? parameter) {\n"
"\t\t//new MyWindow (this).show ();\n"
"\t\tprint (\"You clicked \\\"New\\\"\\n\");\n"
"\t}\n"
"\n"
"\tvoid quit_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"Quit\\\"\\n\");\n"
"\t\tthis.quit ();\n"
"\t}\n"
"\n"
"\tvoid awesome_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tvar active = action.get_state ().get_boolean ();\n"
"\t\taction.set_state (new Variant.boolean (!active));\n"
"\t\tif (active)\n"
"\t\t\tprint (\"You unchecked \\\"Awesome\\\"\\n\");\n"
"\t\telse\n"
"\t\t\tprint (\"You checked \\\"Awesome\\\"\\n\");\n"
"\t}\n"
"\n"
"\tvoid state_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"state is set to %s\\n\", parameter.get_string(null));\n"
"\t\taction.set_state (parameter);\n"
"\t}\n"
"\n"
"\t/* Create the application actions. */\n"
"\tconst ActionEntry[] actions = {\n"
"\t\t{ \"new\", new_cb },\n"
"\t\t{ \"quit\", quit_cb },\n"
"\t\t{ \"awesome\", awesome_cb, null, \"false\" },\n"
"\t\t{ \"state\", state_cb, \"s\", \"'off'\" }\n"
"\t};\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Setup application actions. */\n"
"\t\tthis.add_action_entries (actions, this);\n"
"\n"
"\t\t/* Setup menubar and app_menu. */\n"
"\t\t/* Get the UI file. */\n"
"\t\tvar builder = new Gtk.Builder ();\n"
"\t\ttry {\n"
"\t\t\tbuilder.add_from_file (\"menubar.ui\");\n"
"\t\t} catch (Error e) {\n"
"\t\t\terror (\"Unable to load file: %s\", e.message);\n"
"\t\t}\n"
"\n"
"\t\t/* Get the menubar from the builder. */\n"
"\t\tthis.menubar = builder.get_object (\"menubar\") as MenuModel;\n"
"\n"
"\t\t/* Get the app_menu from the builder. */\n"
"\t\tthis.app_menu = builder.get_object (\"appmenu\") as MenuModel;\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Callback functions for the window actions. */\n"
"\tvoid copy_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"\\\"Copy\\\" activated\\n\");\n"
"\t}\n"
"\n"
"\tvoid paste_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"\\\"Paste\\\" activated\\n\");\n"
"\t}\n"
"\n"
"\tvoid shape_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"shape is set to %s\\n\", parameter.get_string(null));\n"
"\t\taction.set_state (parameter);\n"
"\t}\n"
"\n"
"\t/* Create the window actions. */\n"
"\tconst ActionEntry[] actions = {\n"
"\t\t/*{ \"action name\", cb to connect to \"activate\" signal, parameter type,\n"
"\t\t     initial state, cb to connect to \"change-state\" signal } */\n"
"\t\t{ \"copy\", copy_cb },\n"
"\t\t{ \"paste\", paste_cb },\n"
"\t\t{ \"shape\", shape_cb, \"s\", \"'line'\"}\n"
"\t};\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"MenuBar Example\");\n"
"\t\tthis.set_default_size (200, 200);\n"
"\n"
"\t\t/* Setup window actions. */\n"
"\t\tthis.add_action_entries (actions, this);\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication: Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\t/* Callback functions for the application actions. */\n"
"\tvoid new_cb (SimpleAction action, Variant? parameter) {\n"
"\t\t//new MyWindow (this).show ();\n"
"\t\tprint (\"You clicked \\\"New\\\"\\n\");\n"
"\t}\n"
"\n"
"\tvoid quit_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"Quit\\\"\\n\");\n"
"\t\tthis.quit ();\n"
"\t}\n"
"\n"
"\tvoid awesome_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tvar active = action.get_state ().get_boolean ();\n"
"\t\taction.set_state (new Variant.boolean (!active));\n"
"\t\tif (active)\n"
"\t\t\tprint (\"You unchecked \\\"Awesome\\\"\\n\");\n"
"\t\telse\n"
"\t\t\tprint (\"You checked \\\"Awesome\\\"\\n\");\n"
"\t}\n"
"\n"
"\tvoid state_cb (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"state is set to %s\\n\", parameter.get_string(null));\n"
"\t\taction.set_state (parameter);\n"
"\t}\n"
"\n"
"\t/* Create the application actions. */\n"
"\tconst ActionEntry[] actions = {\n"
"\t\t{ \"new\", new_cb },\n"
"\t\t{ \"quit\", quit_cb },\n"
"\t\t{ \"awesome\", awesome_cb, null, \"false\" },\n"
"\t\t{ \"state\", state_cb, \"s\", \"'off'\" }\n"
"\t};\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Setup application actions. */\n"
"\t\tthis.add_action_entries (actions, this);\n"
"\n"
"\t\t/* Setup menubar and app_menu. */\n"
"\t\t/* Get the UI file. */\n"
"\t\tvar builder = new Gtk.Builder ();\n"
"\t\ttry {\n"
"\t\t\tbuilder.add_from_file (\"menubar.ui\");\n"
"\t\t} catch (Error e) {\n"
"\t\t\terror (\"Unable to load file: %s\", e.message);\n"
"\t\t}\n"
"\n"
"\t\t/* Get the menubar from the builder. */\n"
"\t\tthis.menubar = builder.get_object (\"menubar\") as MenuModel;\n"
"\n"
"\t\t/* Get the app_menu from the builder. */\n"
"\t\tthis.app_menu = builder.get_object (\"appmenu\") as MenuModel;\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: section/title
#: C/menubar.vala.page:161
msgid "Mnemonics"
msgstr "접근 키"

#. (itstool) path: section/title
#: C/menubar.vala.page:167
msgid "Accelerators"
msgstr "가속키"

#. (itstool) path: section/p
#: C/menubar.vala.page:183
msgid ""
"<code mime=\"application/xml\">&lt;attribute name=\"label\" translatable="
"\"yes\"&gt;Quit&lt;/attribute&gt;</code>"
msgstr ""
"<code mime=\"application/xml\">&lt;attribute name=\"label\" translatable="
"\"yes\"&gt;Quit&lt;/attribute&gt;</code>"

#. (itstool) path: item/p
#: C/menubar.vala.page:192
msgid ""
"<link href=\"http://valadoc.org/gio-2.0/GLib.ActionEntry.html\">Glib."
"ActionEntry</link>"
msgstr ""
"<link href=\"http://valadoc.org/gio-2.0/GLib.ActionEntry.html\">Glib."
"ActionEntry</link>"

#. (itstool) path: item/p
#: C/menubar.vala.page:193
msgid ""
"<link href=\"http://valadoc.org/gio-2.0/Gtk.Builder.html\">Gtk.Builder</link>"
msgstr ""
"<link href=\"http://valadoc.org/gio-2.0/Gtk.Builder.html\">Gtk.Builder</link>"

#. (itstool) path: info/title
#: C/menubutton.c.page:8 C/menubutton.py.page:8
msgctxt "text"
msgid "MenuButton"
msgstr "MenuButton"

#. (itstool) path: info/desc
#: C/menubutton.c.page:18 C/menubutton.js.page:18 C/menubutton.py.page:25
#: C/menubutton.vala.page:18
msgid "A widget that shows a menu when clicked on"
msgstr "누르면 메뉴를 보여주는 위젯입니다"

#. (itstool) path: page/title
#: C/menubutton.c.page:21 C/menubutton.js.page:21 C/menubutton.py.page:28
#: C/menubutton.vala.page:21
msgid "MenuButton"
msgstr "MenuButton"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/menubutton.c.page:22 C/menubutton.js.page:22 C/menubutton.py.page:29
#: C/menubutton.vala.page:22
msgctxt "_"
msgid ""
"external ref='media/menubutton.png' md5='99eedc5ef2d6c56d32ca9ae7f3f3320f'"
msgstr ""

#. (itstool) path: page/p
#: C/menubutton.c.page:23 C/menubutton.js.page:23 C/menubutton.py.page:30
#: C/menubutton.vala.page:23
msgid ""
"The GtkMenuButton widget is used to display a menu when clicked on. This "
"menu can be provided either as a GtkMenu, or an abstract GMenuModel. The "
"GtkMenuButton widget can hold any valid child widget. That is, it can hold "
"almost any other standard GtkWidget. The most commonly used child is the "
"provided GtkArrow."
msgstr ""
"GtkMenuButton 위젯은 눌렀을 때 메뉴를 띄울 목적으로 활용합니다. 이 메뉴는 "
"GtkMenu로 또는 GMenuModel로도 제공합니다. GtkMenuButton 위젯은 제대로 된 하"
"위 위젯을 지니고 있을 수 있습니다. 즉, GtkMenuButton으로 대부분의 다른 표준 "
"GtkWidget을 붙들어둘 수 있습니다. 가장 널리 활용하는 하위 요소는 GtkArrow입니"
"다."

#. (itstool) path: note/p
#: C/menubutton.c.page:25 C/menubutton.js.page:27
msgid "You need to be running GNOME 3.6 or later for the MenuButton to work."
msgstr "MenuButton을 동작하게 하려면 그놈 3.6 이상이 필요합니다."

#. (itstool) path: section/code
#: C/menubutton.c.page:31
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"/* Callback function for the undo action */\n"
"static void\n"
"about_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"About\\\"\\n\");\n"
"}\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GMenu *submenu;\n"
"  GtkWidget *grid;\n"
"  GMenu *menumodel;\n"
"  GtkWidget *window;\n"
"  GtkWidget *menubutton;\n"
"  GSimpleAction *about_action;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  grid = gtk_grid_new ();\n"
"\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"MenuButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 600, 400);\n"
"\n"
"  menubutton = gtk_menu_button_new ();\n"
"  gtk_widget_set_size_request (menubutton, 80, 35);\n"
"\n"
"  gtk_grid_attach (GTK_GRID (grid), menubutton, 0, 0, 1, 1);\n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  menumodel = g_menu_new ();\n"
"  g_menu_append (menumodel, \"New\", \"app.new\");\n"
"  g_menu_append (menumodel, \"About\", \"win.about\");\n"
"\n"
"  submenu = g_menu_new ();\n"
"  g_menu_append_submenu (menumodel, \"Other\", G_MENU_MODEL (submenu));\n"
"  g_menu_append (submenu, \"Quit\", \"app.quit\");\n"
"  gtk_menu_button_set_menu_model (GTK_MENU_BUTTON (menubutton), G_MENU_MODEL (menumodel));\n"
"\n"
"  about_action = g_simple_action_new (\"about\", NULL);\n"
"  g_signal_connect (about_action, \"activate\", G_CALLBACK (about_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (about_action));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"static void\n"
"new_callback (GSimpleAction *simple,\n"
"              GVariant      *parameter,\n"
"              gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"New\\\"\\n\");\n"
"}\n"
"\n"
"static void\n"
"quit_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GSimpleAction *new_action;\n"
"  GSimpleAction *quit_action;\n"
"\n"
"  new_action = g_simple_action_new (\"new\", NULL);\n"
"  g_signal_connect (new_action, \"activate\", G_CALLBACK (new_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (new_action));\n"
"\n"
"  quit_action = g_simple_action_new (\"quit\", NULL);\n"
"  g_signal_connect (quit_action, \"activate\", G_CALLBACK (quit_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (quit_action));\n"
"}\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"/* Callback function for the undo action */\n"
"static void\n"
"about_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"About\\\"\\n\");\n"
"}\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GMenu *submenu;\n"
"  GtkWidget *grid;\n"
"  GMenu *menumodel;\n"
"  GtkWidget *window;\n"
"  GtkWidget *menubutton;\n"
"  GSimpleAction *about_action;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  grid = gtk_grid_new ();\n"
"\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"MenuButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 600, 400);\n"
"\n"
"  menubutton = gtk_menu_button_new ();\n"
"  gtk_widget_set_size_request (menubutton, 80, 35);\n"
"\n"
"  gtk_grid_attach (GTK_GRID (grid), menubutton, 0, 0, 1, 1);\n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  menumodel = g_menu_new ();\n"
"  g_menu_append (menumodel, \"New\", \"app.new\");\n"
"  g_menu_append (menumodel, \"About\", \"win.about\");\n"
"\n"
"  submenu = g_menu_new ();\n"
"  g_menu_append_submenu (menumodel, \"Other\", G_MENU_MODEL (submenu));\n"
"  g_menu_append (submenu, \"Quit\", \"app.quit\");\n"
"  gtk_menu_button_set_menu_model (GTK_MENU_BUTTON (menubutton), G_MENU_MODEL (menumodel));\n"
"\n"
"  about_action = g_simple_action_new (\"about\", NULL);\n"
"  g_signal_connect (about_action, \"activate\", G_CALLBACK (about_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (about_action));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"static void\n"
"new_callback (GSimpleAction *simple,\n"
"              GVariant      *parameter,\n"
"              gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"New\\\"\\n\");\n"
"}\n"
"\n"
"static void\n"
"quit_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GSimpleAction *new_action;\n"
"  GSimpleAction *quit_action;\n"
"\n"
"  new_action = g_simple_action_new (\"new\", NULL);\n"
"  g_signal_connect (new_action, \"activate\", G_CALLBACK (new_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (new_action));\n"
"\n"
"  quit_action = g_simple_action_new (\"quit\", NULL);\n"
"  g_signal_connect (quit_action, \"activate\", G_CALLBACK (quit_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (quit_action));\n"
"}\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/menubutton.c.page:38
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkMenuButton.html"
"\">GtkMenuButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkMenuButton.html"
"\">GtkMenuButton</link>"

#. (itstool) path: item/p
#: C/menubutton.c.page:39
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkMenu.html"
"\">GtkMenu</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkMenu.html"
"\">GtkMenu</link>"

#. (itstool) path: item/p
#: C/menubutton.c.page:40
msgid ""
"<link href=\"https://developer.gnome.org/gio/unstable/GMenuModel.html"
"\">GMenuModel</link>"
msgstr ""
"<link href=\"https://developer.gnome.org/gio/unstable/GMenuModel.html"
"\">GMenuModel</link>"

#. (itstool) path: item/p
#: C/menubutton.c.page:41
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkArrow.html"
"\">GtkArrow</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkArrow.html"
"\">GtkArrow</link>"

#. (itstool) path: info/title
#: C/menubutton.js.page:8
msgctxt "text"
msgid "MenuButton (JavaScript)"
msgstr "MenuButton (JavaScript)"

#. (itstool) path: credit/name
#: C/menubutton.js.page:13
msgid "Anna Zacchi"
msgstr "Anna Zacchi"

#. (itstool) path: page/code
#: C/menubutton.js.page:28
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class ({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application ({ application_id: 'org.example.myapp',\n"
"                                                  flags: Gio.ApplicationFlags.FLAGS_NONE });\n"
"\n"
"       //connect to 'activate' and 'startup' signals to the callback functions\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI (in this case it's just the ApplicationWindow)\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"MenuButton Example\" });\n"
"        this._window.set_default_size(600, 400);\n"
"        this.grid = new Gtk.Grid();\n"
"        this._window.add(this.grid);\n"
"\n"
"\n"
"        this._menuButton = new Gtk.MenuButton();\n"
"        this.grid.attach(this._menuButton, 0, 0, 1, 1 );\n"
"        this.menu = new Gtk.Menu.new_from_model(this.menuModel);\n"
"\n"
"        this.menu.show();\n"
"        this._menuButton.set_menu_model (this.menuModel);\n"
"        this._menuButton.set_size_request(80, 35);\n"
"        this._menuButton.show();\n"
"\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    _showNew: function() {\n"
"    print(\"You clicked \\\"New\\\"\");\n"
"    },\n"
"\n"
"    _showAbout: function() {\n"
"        print(\"You clicked \\\"About\\\"\");\n"
"    },\n"
"\n"
"    //create the menu items and connect the signals to the callback functions.\n"
"    _initMenus: function() {\n"
"        let newAction = new Gio.SimpleAction({ name: 'new' });\n"
"        newAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showNew();\n"
"            }));\n"
"        this.application.add_action(newAction);\n"
"\n"
"        let aboutAction = new Gio.SimpleAction({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        let quitAction = new Gio.SimpleAction({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"         this.application.add_action(quitAction);\n"
"\n"
"        this.menuModel = new Gio.Menu();\n"
"\n"
"        this.menuItemNew = Gio.MenuItem.new(\"New\", 'app.new');\n"
"        this.menuItemAbout = Gio.MenuItem.new(\"About\", 'app.about');\n"
"        this.fileMenuItem = Gio.MenuItem.new(\"Other\", null);\n"
"\n"
"        this.menuModel.append_item(this.menuItemNew);\n"
"        this.menuModel.append_item(this.menuItemAbout);\n"
"\n"
"        //submenu\n"
"        this.subMenu = new Gio.Menu();\n"
"        this.fileMenuItem.set_submenu(this.subMenu);\n"
"        this.menuItemQuit = Gio.MenuItem.new(\"Quit\", 'app.quit');\n"
"        this.subMenu.append_item(this.menuItemQuit);\n"
"        this.menuModel.append_item(this.fileMenuItem);\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    //callback function for 'startup' signal\n"
"    _onStartup: function() {\n"
"        //You must call _initMenus() before calling _buildUI().\n"
"        this._initMenus();\n"
"        this._buildUI();\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application();\n"
"app.application.run(ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class ({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application ({ application_id: 'org.example.myapp',\n"
"                                                  flags: Gio.ApplicationFlags.FLAGS_NONE });\n"
"\n"
"       //connect to 'activate' and 'startup' signals to the callback functions\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI (in this case it's just the ApplicationWindow)\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"MenuButton Example\" });\n"
"        this._window.set_default_size(600, 400);\n"
"        this.grid = new Gtk.Grid();\n"
"        this._window.add(this.grid);\n"
"\n"
"\n"
"        this._menuButton = new Gtk.MenuButton();\n"
"        this.grid.attach(this._menuButton, 0, 0, 1, 1 );\n"
"        this.menu = new Gtk.Menu.new_from_model(this.menuModel);\n"
"\n"
"        this.menu.show();\n"
"        this._menuButton.set_menu_model (this.menuModel);\n"
"        this._menuButton.set_size_request(80, 35);\n"
"        this._menuButton.show();\n"
"\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"    _showNew: function() {\n"
"    print(\"You clicked \\\"New\\\"\");\n"
"    },\n"
"\n"
"    _showAbout: function() {\n"
"        print(\"You clicked \\\"About\\\"\");\n"
"    },\n"
"\n"
"    //create the menu items and connect the signals to the callback functions.\n"
"    _initMenus: function() {\n"
"        let newAction = new Gio.SimpleAction({ name: 'new' });\n"
"        newAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showNew();\n"
"            }));\n"
"        this.application.add_action(newAction);\n"
"\n"
"        let aboutAction = new Gio.SimpleAction({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        let quitAction = new Gio.SimpleAction({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"         this.application.add_action(quitAction);\n"
"\n"
"        this.menuModel = new Gio.Menu();\n"
"\n"
"        this.menuItemNew = Gio.MenuItem.new(\"New\", 'app.new');\n"
"        this.menuItemAbout = Gio.MenuItem.new(\"About\", 'app.about');\n"
"        this.fileMenuItem = Gio.MenuItem.new(\"Other\", null);\n"
"\n"
"        this.menuModel.append_item(this.menuItemNew);\n"
"        this.menuModel.append_item(this.menuItemAbout);\n"
"\n"
"        //submenu\n"
"        this.subMenu = new Gio.Menu();\n"
"        this.fileMenuItem.set_submenu(this.subMenu);\n"
"        this.menuItemQuit = Gio.MenuItem.new(\"Quit\", 'app.quit');\n"
"        this.subMenu.append_item(this.menuItemQuit);\n"
"        this.menuModel.append_item(this.fileMenuItem);\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    //callback function for 'startup' signal\n"
"    _onStartup: function() {\n"
"        //You must call _initMenus() before calling _buildUI().\n"
"        this._initMenus();\n"
"        this._buildUI();\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application();\n"
"app.application.run(ARGV);\n"

#. (itstool) path: item/p
#: C/menubutton.js.page:33 C/menubutton.vala.page:33
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/3.5/gtk3-GtkMenuButton.html"
"\">MenuButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/3.5/gtk3-GtkMenuButton.html"
"\">MenuButton</link>"

#. (itstool) path: note/p
#: C/menubutton.py.page:32 C/menubutton.vala.page:27
msgid "You need to be running GNOME 3.6 for the MenuButton to work."
msgstr "MenuButton을 동작하게 하려면 그놈 3.6이 필요합니다."

#. (itstool) path: section/code
#: C/menubutton.py.page:38
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Menubutton Example\", application=app)\n"
"        self.set_default_size(600, 400)\n"
"\n"
"        grid = Gtk.Grid()\n"
"\n"
"        # a menubutton\n"
"        menubutton = Gtk.MenuButton()\n"
"        menubutton.set_size_request(80, 35)\n"
"\n"
"        grid.attach(menubutton, 0, 0, 1, 1)\n"
"\n"
"        # a menu with two actions\n"
"        menumodel = Gio.Menu()\n"
"        menumodel.append(\"New\", \"app.new\")\n"
"        menumodel.append(\"About\", \"win.about\")\n"
"\n"
"        # a submenu with one action for the menu\n"
"        submenu = Gio.Menu()\n"
"        submenu.append(\"Quit\", \"app.quit\")\n"
"        menumodel.append_submenu(\"Other\", submenu)\n"
"\n"
"        # the menu is set as the menu of the menubutton\n"
"        menubutton.set_menu_model(menumodel)\n"
"\n"
"        # the action related to the window (about)\n"
"        about_action = Gio.SimpleAction.new(\"about\", None)\n"
"        about_action.connect(\"activate\", self.about_callback)\n"
"        self.add_action(about_action)\n"
"\n"
"        self.add(grid)\n"
"\n"
"    # callback for \"about\"\n"
"    def about_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"About\\\"\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        #  the actions related to the application\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        self.add_action(new_action)\n"
"\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_callback)\n"
"        self.add_action(quit_action)\n"
"\n"
"    # callback functions for the actions related to the application\n"
"    def new_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"New\\\"\")\n"
"\n"
"    def quit_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"Quit\\\"\")\n"
"        self.quit()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Menubutton Example\", application=app)\n"
"        self.set_default_size(600, 400)\n"
"\n"
"        grid = Gtk.Grid()\n"
"\n"
"        # a menubutton\n"
"        menubutton = Gtk.MenuButton()\n"
"        menubutton.set_size_request(80, 35)\n"
"\n"
"        grid.attach(menubutton, 0, 0, 1, 1)\n"
"\n"
"        # a menu with two actions\n"
"        menumodel = Gio.Menu()\n"
"        menumodel.append(\"New\", \"app.new\")\n"
"        menumodel.append(\"About\", \"win.about\")\n"
"\n"
"        # a submenu with one action for the menu\n"
"        submenu = Gio.Menu()\n"
"        submenu.append(\"Quit\", \"app.quit\")\n"
"        menumodel.append_submenu(\"Other\", submenu)\n"
"\n"
"        # the menu is set as the menu of the menubutton\n"
"        menubutton.set_menu_model(menumodel)\n"
"\n"
"        # the action related to the window (about)\n"
"        about_action = Gio.SimpleAction.new(\"about\", None)\n"
"        about_action.connect(\"activate\", self.about_callback)\n"
"        self.add_action(about_action)\n"
"\n"
"        self.add(grid)\n"
"\n"
"    # callback for \"about\"\n"
"    def about_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"About\\\"\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        #  the actions related to the application\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        self.add_action(new_action)\n"
"\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_callback)\n"
"        self.add_action(quit_action)\n"
"\n"
"    # callback functions for the actions related to the application\n"
"    def new_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"New\\\"\")\n"
"\n"
"    def quit_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"Quit\\\"\")\n"
"        self.quit()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/menubutton.py.page:42
msgid "Useful methods for a MenuButton widget"
msgstr "MenuButton 위젯에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/menubutton.py.page:43
msgid ""
"In line 33 the signal <code>\"activate\"</code> from the action "
"<code>about_action</code> is connected to the callback function "
"<code>about_callback()</code> using <code><var>action</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"33번째 줄에서 <code>\"activate\"</code> 시그널은 <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code> 함수로  "
"<code>about_callback()</code> 콜백 함수에 연결했습니다. 더 자세한 설명은 "
"<link xref=\"signals-callbacks.py\"/>를 참조하십시오."

#. (itstool) path: section/p
#: C/menubutton.py.page:45
msgid ""
"The positioning of the menu is determined by the \"direction\" property of "
"the menu button and the \"halign\" or \"valign\" properties of the menu. For "
"example, when the direction is <code>Gtk.ArrowType.DOWN</code> (other "
"option: <code>UP</code>) and the horizontal alignment is <code>Gtk.Align."
"START</code> (other options: <code>CENTER</code> and <code>END</code>), the "
"menu will be positioned below the button, with the starting edge (depending "
"on the text direction) of the menu aligned with the starting edge of the "
"button. If there is not enough space below the button, the menu is popped up "
"above the button instead. If the alignment would move part of the menu "
"offscreen, it is 'pushed in'."
msgstr ""
"메뉴 배치는 메뉴 단추의 \"direction\" 속성과 메뉴의 \"halign\" 속성 또는  "
"\"valign\" 속성으로 결정합니다. 예를 들어 direction 값이 <code>Gtk.ArrowType."
"DOWN</code>(다른 옵션: <code>UP</code>)이고, 수평 정렬을 <code>Gtk.Align."
"START</code>로(다른 옵션: <code>CENTER</code>, <code>END</code>) 했다면 메뉴"
"는, 시작 모서리(텍스트 방향에 따라)를 따라 정렬한 메뉴의 시작 모서리로 단추 "
"아래에 들어갑니다. 단추 아래에 공간이 충분치 않다면 단추 위로 대신 메뉴를 띄"
"웁니다. 정렬 상태가 메뉴 바깥 부분을 움직인다면 '눌러넣은' 상태입니다."

#. (itstool) path: section/p
#: C/menubutton.py.page:47
msgid ""
"In the case of vertical alignment, the possible ArrowType directions are "
"<code>LEFT</code> and <code>RIGHT</code> and the vertical alignment is again "
"<code>START</code>, <code>CENTER</code> or <code>END</code>."
msgstr ""
"수직으로 정렬하는 경우 적용할 수 있는 ArrowType 방향은  <code>LEFT</code>와 "
"<code>RIGHT</code> 이며, <code>START</code>, <code>CENTER</code>, <code>END</"
"code> 중 한 가지 방식으로 수직 정렬합니다.나입니다."

#. (itstool) path: section/p
#: C/menubutton.py.page:49
msgid ""
"<code>set_align_widget(alignment)</code> and <code>set_direction(direction)</"
"code> can be used to set these properties."
msgstr ""
"이 속성을 설정할 때 <code>set_align_widget(alignment)</code> 메서드와 "
"<code>set_direction(direction)</code> 메서드를 사용할 수 있습니다."

#. (itstool) path: item/p
#: C/menubutton.py.page:56
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkMenuButton.html"
"\">MenuButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkMenuButton.html"
"\">MenuButton</link>"

#. (itstool) path: info/title
#: C/menubutton.vala.page:8
msgctxt "text"
msgid "MenuButton (Vala)"
msgstr "MenuButton (Vala)"

#. (itstool) path: page/code
#: C/menubutton.vala.page:28
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"MenuButton Example\");\n"
"\t\tthis.set_default_size (600, 400);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\n"
"\t\tvar menubutton = new Gtk.MenuButton();\n"
"\t\tmenubutton.set_size_request (80, 35);\n"
"\n"
"\t\tvar menumodel = new Menu ();\n"
"\t\tmenumodel.append (\"New\", \"app.new\");\n"
"\t\tmenumodel.append (\"About\", \"win.about\");\n"
"\n"
"\t\t/* We create the last item as a MenuItem, so that\n"
"\t\t * a submenu can be appended to this menu item.\n"
"\t\t */\n"
"\t\tvar submenu = new Menu ();\n"
"\t\tmenumodel.append_submenu (\"Other\", submenu);\n"
"\t\tsubmenu.append (\"Quit\", \"app.quit\");\n"
"\t\tmenubutton.set_menu_model (menumodel);\n"
"\n"
"\t\tvar about_action = new SimpleAction (\"about\", null);\n"
"\t\tabout_action.activate.connect (this.about_cb);\n"
"\t\tthis.add_action (about_action);\n"
"\n"
"\t\tthis.add(grid);\n"
"\t\tgrid.attach(menubutton, 0, 0, 1, 1);\n"
"\t}\n"
"\n"
"\tvoid about_cb (SimpleAction simple, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"About\\\"\\n\");\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the 'startup' signal of GLib.Application. */\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\tvar new_action = new SimpleAction (\"new\", null);\n"
"\t\tnew_action.activate.connect (this.new_cb);\n"
"\t\tthis.add_action (new_action);\n"
"\n"
"\t\tvar quit_action = new SimpleAction (\"quit\", null);\n"
"\t\tquit_action.activate.connect (this.quit);\n"
"\t\tthis.add_action (quit_action);\n"
"\t}\n"
"\n"
"\tvoid new_cb (SimpleAction simple, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"New\\\"\\n\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"MenuButton Example\");\n"
"\t\tthis.set_default_size (600, 400);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\n"
"\t\tvar menubutton = new Gtk.MenuButton();\n"
"\t\tmenubutton.set_size_request (80, 35);\n"
"\n"
"\t\tvar menumodel = new Menu ();\n"
"\t\tmenumodel.append (\"New\", \"app.new\");\n"
"\t\tmenumodel.append (\"About\", \"win.about\");\n"
"\n"
"\t\t/* We create the last item as a MenuItem, so that\n"
"\t\t * a submenu can be appended to this menu item.\n"
"\t\t */\n"
"\t\tvar submenu = new Menu ();\n"
"\t\tmenumodel.append_submenu (\"Other\", submenu);\n"
"\t\tsubmenu.append (\"Quit\", \"app.quit\");\n"
"\t\tmenubutton.set_menu_model (menumodel);\n"
"\n"
"\t\tvar about_action = new SimpleAction (\"about\", null);\n"
"\t\tabout_action.activate.connect (this.about_cb);\n"
"\t\tthis.add_action (about_action);\n"
"\n"
"\t\tthis.add(grid);\n"
"\t\tgrid.attach(menubutton, 0, 0, 1, 1);\n"
"\t}\n"
"\n"
"\tvoid about_cb (SimpleAction simple, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"About\\\"\\n\");\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"\n"
"\t/* Override the 'startup' signal of GLib.Application. */\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\tvar new_action = new SimpleAction (\"new\", null);\n"
"\t\tnew_action.activate.connect (this.new_cb);\n"
"\t\tthis.add_action (new_action);\n"
"\n"
"\t\tvar quit_action = new SimpleAction (\"quit\", null);\n"
"\t\tquit_action.activate.connect (this.quit);\n"
"\t\tthis.add_action (quit_action);\n"
"\t}\n"
"\n"
"\tvoid new_cb (SimpleAction simple, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"New\\\"\\n\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: info/title
#: C/message-board.c.page:8
msgctxt "text"
msgid "Message board (C)"
msgstr "게시판 (C)"

#. (itstool) path: info/desc
#: C/message-board.c.page:11
msgid "A simple program using WebKitGTK+ and the DOM."
msgstr "WebKitGTK+와 DOM을 사용한 간단한 프로그램."

#. (itstool) path: page/title
#: C/message-board.c.page:26
msgid "Message board"
msgstr "게시판"

#. (itstool) path: item/p
#: C/message-board.c.page:31
msgid "How to display a web page with WebKit."
msgstr "WebKit으로 웹 페이지를 표시합니다."

#. (itstool) path: item/p
#: C/message-board.c.page:32
msgid ""
"How to manipulate the contents of a web page using WebKit's DOM functions."
msgstr "WebKit의 DOM 함수로 웹 페이지 내용을 다룹니다."

#. (itstool) path: synopsis/p
#: C/message-board.c.page:35
msgid ""
"This tutorial assumes you are familiar with the C programming language and "
"have a basic understanding of GTK+, including how to create and place "
"widgets and how to connect callback functions to signals. See <link xref="
"\"image-viewer.c\"/> to learn the basics of GTK+."
msgstr ""
"이 따라하기 예제에서는 독자 여러분이 C 프로그래밍 언어에 익숙하며, 위젯을 어"
"떻게 만들어 두고, 콜백 함수를 시그널에 어떻게 연결하는지에 대해  GTK+를 기본"
"적으로 이해하고 있다고 간주합니다. GTK+ 기본을 배우려면 <link xref=\"image-"
"viewer.c\"/>를 참고하십시오."

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/message-board.c.page:41
msgctxt "_"
msgid ""
"external ref='media/message-board.ogv' md5='beb80c4538776dc2cdd26c95abea5027'"
msgstr ""

#. (itstool) path: section/p
#: C/message-board.c.page:48
msgid ""
"The GNOME platform includes WebKitGTK+, built on top of the powerful WebKit "
"HTML framework. WebKit is used throughout GNOME, not just to view web pages "
"on the Internet, but also to create rich user interfaces that can be easily "
"styled with CSS."
msgstr ""
"그놈 플랫폼에는 강력한 웹킷 HTML 프레임워크를 바탕으로 만든 WebKitGTK+가 있습"
"니다. WebKit은 그놈 전반적으로 활용하며, 인터넷의 웹 페이지를 보기만 하는 목"
"적으로 쓰는게 아니라, CSS로 쉽게 스타일을 지정할 수 있는 리치 사용자 인터페이"
"스를 만들 때도 사용합니다."

#. (itstool) path: section/p
#: C/message-board.c.page:53
msgid ""
"In this tutorial, you will create a simple message board using WebKit. The "
"message board will allow you to enter some text and have it added to a list "
"of messages in HTML. Before you begin, you need to set up a project in "
"Anjuta."
msgstr ""
"이 따라하기 지침에서는 WebKit으로 간단한 게시판을 만들어보겠습니다. 게시판에"
"서는 일부 텍스트를 입력할 수 있으며  HTML 메시지 목록을 추가할 수 있습니다. "
"시작하기 전에 Anjuta에서 프로젝트를 설정해야합니다."

#. (itstool) path: item/p
#: C/message-board.c.page:59
msgid ""
"In Anjuta, click <guiseq><gui>File</gui><gui>New</gui> <gui>Project</gui></"
"guiseq> to open the new project assistant."
msgstr ""
"안주타에서  <guiseq><gui>파일</gui><gui>새로 만들기</gui> <gui>프로젝트</"
"gui></guiseq>를 눌러 새 프로젝트 도우미를 여십시오."

#. (itstool) path: item/p
#: C/message-board.c.page:61
msgid ""
"Select <gui>GTK+ (simple)</gui> on the <gui>C</gui> tab, and click "
"<gui>Continue</gui>."
msgstr ""
"<gui>C</gui> 탭에서 <gui>GTK+ (단순)</gui>을 선택하고, <gui>계속</gui>을 누르"
"십시오."

#. (itstool) path: item/p
#: C/message-board.c.page:63
msgid ""
"Fill out your details on the <gui>Basic information</gui> page. Use "
"<input>message-board</input> for the project name. Click <gui>Continue</gui>."
msgstr ""
"<gui>기본 정보</gui> 페이지에 자세한 내용을 적어나가심시오. 프로젝트 이름은 "
"<input>message-board</input>라고 하십시오. <gui>계속</gui>을 누르십시오."

#. (itstool) path: item/p
#: C/message-board.c.page:66
msgid ""
"Disable the <gui>Use GtkBuilder for user interface</gui> option as this "
"tutorial builds the user-interface manually."
msgstr ""
"따라하기 지침을 통해 사용자 인터페이스를 직접 만들 예정이므로 <gui>사용자 인"
"터페이스에 GtkBuilder 사용</gui> 설정을 끄십시오."

#. (itstool) path: item/p
#: C/message-board.c.page:69
msgid ""
"You need to tell Anjuta you're using WebKitGTK+ on this project. On the "
"<gui>Project options</gui> page, select <gui>Configure external packages</"
"gui>. Click <gui>Continue</gui>. On the <gui>Configure external packages</"
"gui> page, check <gui>webkitgtk-3.0</gui>."
msgstr ""
"안주타 프로그램에서 프로젝트에 WebkitGTK+를 사용한다고 알려야합니다. <gui>프"
"로젝트 옵션</gui> 페이지에서, <gui>외부 패키지 설정</gui>을 선택하십시오. "
"<gui>계속</gui>을 누르십시오. <gui>외부 패키지 설정</gui> 페이지에서 "
"<gui>webkitgtk-3.0</gui>을 선택하십시오."

#. (itstool) path: section/p
#: C/message-board.c.page:75
msgid ""
"After you finish the new project assistant, open the file <file>src/main.c</"
"file> from either the <gui>Project</gui> or the <gui>File</gui> tab. Anjuta "
"will have filled this in with some basic GTK+ code from its templates. Since "
"you are creating a WebKit project, you first need to include the WebKit "
"headers. After the line that includes <code>gtk/gtk.h</code>, add the "
"following line:"
msgstr ""
"새 프로젝트 도우미를 끝내고 나면 <gui>프로젝트</gui>탭 또는 the <gui>파일</"
"gui>탭에서 <file>src/main.c</file> 파일을 여십시오 안주타에서는 서식에 일부 "
"기본 GTK+ 코드를 채워넣습니다. WebKit 프로젝트를 만들고 있으니 WebKit 레더를 "
"추가해야합니다. <code>gtk/gtk.h</code>줄 다음에 다음 줄을 추가하십시오:"

#. (itstool) path: section/code
#: C/message-board.c.page:82
#, no-wrap
msgid "#include &lt;webkit/webkit.h&gt;"
msgstr "#include &lt;webkit/webkit.h&gt;"

#. (itstool) path: section/p
#: C/message-board.c.page:84
msgid ""
"Verify that everything works by building what you have so far. Click "
"<guiseq><gui>Build</gui><gui>Build Project</gui></guiseq> or just press "
"<keyseq><key>Shift</key><key>F7</key></keyseq>. The first time you build, "
"you will be asked for some configure options. Just accept the defaults and "
"click <gui>Execute</gui>."
msgstr ""
"여태껏 작성해오던 코드로 모든 부분이 동작하는지 확인하십시오. <guiseq><gui>빌"
"드</gui><gui>프로젝트 빌드</gui></guiseq> 를 누르거나 그냥 "
"<keyseq><key>Shift</key><key>F7</key></keyseq>키를 누르십시오. 처음 빌드할 때"
"는 몇가지 설정 옵션을 물어봅니다. 그냥 기본 값으로 설정하고 <gui>실행</gui>"
"을 누르십시오."

#. (itstool) path: section/p
#: C/message-board.c.page:90
msgid ""
"You should now be able to run the program. Click <guiseq> <gui>Run</"
"gui><gui>Execute</gui></guiseq> or just press <key>F3</key>. You should see "
"an empty window appear."
msgstr ""
"이제 프로그램을 실행할 수 있어야합니다. <guiseq> <gui>실행</gui><gui>실행</"
"gui></guiseq>을 누르든지 그냥 <key>F3</key> 키를 누르십시오. 빈 창이 나타납니"
"다."

#. (itstool) path: section/title
#: C/message-board.c.page:96
msgid "Lay out your window and web view"
msgstr "창과 웹 뷰 배치"

#. (itstool) path: section/p
#: C/message-board.c.page:98
msgid ""
"Now that you can show a window, it's time to start working with WebKit. For "
"this tutorial, you'll create a text entry and a web view and pack them both "
"into a window. Find the function <code>create_window</code> and replace it "
"with the following:"
msgstr ""
"이제 창을 보여줄 수 있으니 WebKit을 다룰 시간입니다. 이 따라하기 안내에 따라 "
"텍스트 항목과 웹 뷰를 만들고 이 요소를 창에 추가합니다. <code>create_window</"
"code>  함수를 찾아 다음 코드로 바꾸십시오:"

#. (itstool) path: section/code
#: C/message-board.c.page:103
#, no-wrap
msgid ""
"\n"
"static GtkWidget*\n"
"create_window (void)\n"
"{\n"
"    GtkWidget *window, *box, *scroll, *view, *entry;\n"
"\n"
"    window = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n"
"    gtk_window_set_default_size (GTK_WINDOW (window), 400, 400);\n"
"    gtk_window_set_title (GTK_WINDOW (window), \"Message Board\");\n"
"    g_signal_connect (window, \"delete-event\", G_CALLBACK (gtk_main_quit), NULL);\n"
"\n"
"    box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 6);\n"
"    gtk_container_set_border_width (GTK_CONTAINER (box), 6);\n"
"    gtk_container_add (GTK_CONTAINER (window), box);\n"
"\n"
"    entry = gtk_entry_new ();\n"
"    gtk_box_pack_start (GTK_BOX (box), entry, FALSE, FALSE, 0);\n"
"\n"
"    scroll = gtk_scrolled_window_new (NULL, NULL);\n"
"    g_object_set (scroll, \"shadow-type\", GTK_SHADOW_IN, NULL);\n"
"    gtk_box_pack_start (GTK_BOX (box), scroll, TRUE, TRUE, 0);\n"
"\n"
"    view = webkit_web_view_new ();\n"
"    gtk_container_add (GTK_CONTAINER (scroll), view);\n"
"    webkit_web_view_load_string (WEBKIT_WEB_VIEW (view),\n"
"                                 \"&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\",\n"
"                                 \"text/html\",\n"
"                                 \"UTF-8\",\n"
"                                 NULL);\n"
"\n"
"    gtk_widget_show_all (GTK_WIDGET (box));\n"
"    return window;\n"
"}\n"
msgstr ""
"\n"
"static GtkWidget*\n"
"create_window (void)\n"
"{\n"
"    GtkWidget *window, *box, *scroll, *view, *entry;\n"
"\n"
"    window = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n"
"    gtk_window_set_default_size (GTK_WINDOW (window), 400, 400);\n"
"    gtk_window_set_title (GTK_WINDOW (window), \"Message Board\");\n"
"    g_signal_connect (window, \"delete-event\", G_CALLBACK (gtk_main_quit), NULL);\n"
"\n"
"    box = gtk_box_new (GTK_ORIENTATION_VERTICAL, 6);\n"
"    gtk_container_set_border_width (GTK_CONTAINER (box), 6);\n"
"    gtk_container_add (GTK_CONTAINER (window), box);\n"
"\n"
"    entry = gtk_entry_new ();\n"
"    gtk_box_pack_start (GTK_BOX (box), entry, FALSE, FALSE, 0);\n"
"\n"
"    scroll = gtk_scrolled_window_new (NULL, NULL);\n"
"    g_object_set (scroll, \"shadow-type\", GTK_SHADOW_IN, NULL);\n"
"    gtk_box_pack_start (GTK_BOX (box), scroll, TRUE, TRUE, 0);\n"
"\n"
"    view = webkit_web_view_new ();\n"
"    gtk_container_add (GTK_CONTAINER (scroll), view);\n"
"    webkit_web_view_load_string (WEBKIT_WEB_VIEW (view),\n"
"                                 \"&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\",\n"
"                                 \"text/html\",\n"
"                                 \"UTF-8\",\n"
"                                 NULL);\n"
"\n"
"    gtk_widget_show_all (GTK_WIDGET (box));\n"
"    return window;\n"
"}\n"

#. (itstool) path: section/p
#: C/message-board.c.page:138
msgid ""
"You first create a <code>GtkWindow</code> object and set its title and "
"default size. You also connect the <code>gtk_main_quit</code> function to "
"the <code>delete-event</code> signal. The <code>delete-event</code> signal "
"is emitted when the window is closed. The <code>gtk_main_quit</code> "
"function is part of GTK, and it quits the application."
msgstr ""
"우선 <code>GtkWindow</code> 객체를 만들고 제목과 기본 크기를 설정합니다. "
"<code>gtk_main_quit</code> 함수를 <code>delete-event</code> 시그널에 연결하기"
"도 합니다. <code>delete-event</code>시그널은 창을 닫을때 방출합니다. "
"<code>gtk_main_quit</code> 함수는 GTK의 알부이며, 프로그램을 끝냅니다."

#. (itstool) path: section/p
#: C/message-board.c.page:144
msgid ""
"You then create a vertical box and add it to the window. A window can only "
"hold a single child widget, so you need to use a box to add multiple "
"widgets. The second argument to <code>gtk_box_new</code> sets the amount of "
"padding (in pixels) between each child, and the next line puts a six-pixel "
"border around the entire thing."
msgstr ""
"이제 수직 박스를 만들어 창에 추가했습니다. 창은 오직 단일 하위 위젯을 가질 "
"수 있기 때문에 여러 위젯을 추가하려면 박스를 사용해야합니다. "
"<code>gtk_box_new</code>의 두번째 인자는 각 하위 위젯의 (픽셀 단위)간격을 설"
"정하고 다음 줄에는 전체에 6 픽셀 두께의 테두리를 넣습니다."

#. (itstool) path: section/p
#: C/message-board.c.page:150
msgid ""
"You next create a <code>GtkEntry</code> object and pack it into the box. The "
"third and fourth arguments to <code>gtk_box_pack_start</code> specify that "
"the entry shouldn't take up any extra space the box has available. The "
"fourth argument is the amount of padding you want around the entry. In this "
"case, you set the padding to zero, because you're allowing the box to handle "
"all the padding."
msgstr ""
"다음 <code>GtkEntry</code> 객체를 만들어 박스에 넣으십시오. "
"<code>gtk_box_pack_start</code>의 세번째, 네번째 인자는 박스에 추가 여유 공간"
"이 있을때, 항목이 차지하지 않도록 설정합니다. 네번째 인저에서는 항목 주변의 "
"여백 공간입니다. 지금의 경우 여백 공간을 0으로 설정했는데 박스에서 내부 여백"
"을 처리할 수 있기 때문입니다."

#. (itstool) path: section/p
#: C/message-board.c.page:157
msgid ""
"Before you add a web view, you have to create a scrolled window to put it "
"inside of. The scrolled window will place scrollbars on the right and bottom "
"when necessary, and prevent your web view from filling your entire screen. "
"This time, you pass <code>TRUE</code> and <code>TRUE</code> to "
"<code>gtk_box_pack_start</code> to allow the scrolled window (and thus, the "
"web view) to use any extra space available in the box."
msgstr ""
"웹 뷰를 추가하기 전에 웹 뷰를 넣을 스크롤 뷰를 우선 넣어야합니다. 스크롤 뷰"
"는 필요한 경우 스크롤 표시줄을 오른편과 하단에 두고  웹 뷰가 화면 전체를 차지"
"하지 않게 막아줍니다.  여기서는 <code>gtk_box_pack_start</code>에 "
"<code>TRUE</code>와 <code>TRUE</code>를 넣어 스크롤 창(웹 뷰!)에서 박스의 추"
"가 여분 공간을 사용합니다."

#. (itstool) path: section/p
#: C/message-board.c.page:164
msgid ""
"Finally, you create a <code>WebKitWebView</code> and add it to the scrolled "
"window. Then load a very basic HTML page into the web view by calling "
"<code>webkit_web_view_load_string</code> with the following arguments:"
msgstr ""
"마지막으로 <code>WebKitWebView</code>를 만들고 스크롤 창에 추가했습니다. 그리"
"고 <code>webkit_web_view_load_string</code> 함수와 다음 인자를 통해 매우 기본"
"적인 HTML페이지를 웹 뷰에 불러다놓았습니다:"

#. (itstool) path: item/title
#: C/message-board.c.page:170
msgid "<code>WEBKIT_WEB_VIEW (view)</code>"
msgstr "<code>WEBKIT_WEB_VIEW (view)</code>"

#. (itstool) path: item/p
#: C/message-board.c.page:171
msgid ""
"The view itself. Because <code>view</code> is typed as a <code>GtkWidget*</"
"code>, you have to use <code>WEBKIT_WEB_VIEW</code> to safely cast the "
"object."
msgstr ""
"뷰 자체입니다.  <code>view</code> 는 <code>GtkWidget*</code> 형식이므로 객체"
"를 안전하게 캐스팅하려면 <code>WEBKIT_WEB_VIEW</code> 를 사용해야합니다."

#. (itstool) path: item/title
#: C/message-board.c.page:176
msgid "<code>\"&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\"</code>"
msgstr "<code>\"&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;\"</code>"

#. (itstool) path: item/p
#: C/message-board.c.page:177
msgid "The simplest HTML file you could possibly write."
msgstr "여러분이 작성할 수 있는 간단한 HTML 파일입니다."

#. (itstool) path: item/title
#: C/message-board.c.page:180
msgid "<code>\"text/html\"</code>"
msgstr "<code>\"text/html\"</code>"

#. (itstool) path: item/p
#: C/message-board.c.page:181
msgid ""
"The MIME type of the content you provided. In this case, you're using plain "
"HTML."
msgstr ""
"여러분이 제공한 컨텐트의 MIME 형식입니다. 지금 같은 경우는 플레인 HTML을 사용"
"중입니다."

#. (itstool) path: item/title
#: C/message-board.c.page:185
msgid "<code>\"UTF-8\"</code>"
msgstr "<code>\"UTF-8\"</code>"

#. (itstool) path: item/p
#: C/message-board.c.page:186
msgid ""
"The character encoding of the content you provided. Although you only used "
"ASCII characters, it's a good idea to specify UTF-8. UTF-8 is used as the "
"default encoding throughout the GNOME platform."
msgstr ""
"여러분이 제공한 내용의 문자 인코딩 방식입니다. ASCII 문자만 활용했다 히더라"
"도 UTF-8로 지정하시는게 좋습니다. UTF-8은 그놈 플랫폼 이곳저곳에서 기본 인코"
"딩으로 활용합니다."

#. (itstool) path: item/title
#: C/message-board.c.page:191
msgid "<code>NULL</code>"
msgstr "<code>NULL</code>"

#. (itstool) path: item/p
#: C/message-board.c.page:192
msgid ""
"The base URI. You don't need it in this simple example, but you might want "
"to provide a <sys>file:</sys> URI if you add images or other features where "
"you want to use relative URI references."
msgstr ""
"기본 URI. 이 간단한 예제에서는 필요하지 않습니다만, 그림을 추가하거나 상대 "
"URI 참고 경로를 추가한다면 <sys>file:</sys> URI를 제공하는게 좋습니다."

#. (itstool) path: note/p
#: C/message-board.c.page:199
msgid ""
"Every time you add a widget, you have to call <code>gtk_widget_show</code> "
"on it for it to be visible. If you call <code>gtk_widget_show_all</code> on "
"a container widget like a <code>GtkBox</code>, GTK+ will automatically show "
"all the widgets inside the container, to any depth. Sometimes you don't want "
"to call <code>gtk_widget_show_all</code>, such as when you want to "
"dynamically hide and show some widgets in response to events."
msgstr ""
"위젯을 추가할 때마다 위젯이 나타나게 <code>gtk_widget_show</code>  함수를 호"
"출해야합니다. <code>GtkBox</code>와 같은 컨테이너 위젯에서 "
"<code>gtk_widget_show_all</code>  함수를 호출하면, GTK+에서 알아서 컨테이너"
"의 어떤 깊은 곳에 있든 다 끄집어내어 자동으로 보여줍니다. 때로는 이벤트에 대"
"한 응답으로 위젯을 동적으로 숨기거나 보이려고 하는 그런 경우에 "
"<code>gtk_widget_show_all</code>을 호출하고 싶지 않을 때도 있습니다."

#. (itstool) path: section/p
#: C/message-board.c.page:207
msgid ""
"Finally, you have to call <code>gtk_widget_show_all</code> on the box. "
"Otherwise, none of the widgets you created will be visible. (The window is "
"shown in the <code>main</code> function with <code>gtk_widget_show</code>.)"
msgstr ""
"마지막으로 박스의 <code>gtk_widget_show_all</code>를 호출해야 합니다. 그렇지 "
"않으면 만들어 둔 어떤 위젯도 볼 수 없습니다(창은 <code>main</code> 함수의 "
"<code>gtk_widget_show</code> 호출로 나타납니다.)"

#. (itstool) path: section/p
#: C/message-board.c.page:211
msgid ""
"Build and run the message board again. You should see a window with a text "
"entry and a web view. It doesn't do anything yet because the text entry and "
"the web view don't know anything about each other."
msgstr ""
"게시판을 다시 빌드하고 실행하십시오. 텍스트 항목과 웹 뷰가 나타납니다. 텍스"
"트 항목과 웹 뷰는 서로를 알지 못하기 대문에 어떤 일도 일어나지 않습니다."

#. (itstool) path: section/title
#: C/message-board.c.page:217
msgid "Hook up signals"
msgstr "시그널 걸어두기"

#. (itstool) path: section/p
#: C/message-board.c.page:219
msgid ""
"Now you want to make the message board actually <em>do</em> something when "
"you enter text into the text entry. To do this, connect a callback function "
"to the <code>activate</code> signal of <code>entry</code>. GTK+ emits the "
"<code>activate</code> signal whenever the user presses <key>Enter</key> in "
"the entry. Add the following into <code>create_window</code>, anywhere after "
"both <code>entry</code> and <code>view</code> have been defined:"
msgstr ""
"이제 텍스트 항목에 텍스트를 입력했을때 실제로 게시판에서 어떤 <em>일</em>을 "
"일어나게 하려고 합니다. 콜백 함수를 <code>entry</code>의 <code>activate</"
"code> 시그널로 연결합니다. GTK+는 사용자가 항목 위치에서 <key>Enter</key> 키"
"를 누를 때마다 <code>activate</code> 시그널을 내보냅니다. <code>entry</code>"
"와 <code>view</code>를 정의한 어디에든 다음 코드를 <code>create_window</code>"
"에 넣으십시오:"

#. (itstool) path: section/code
#: C/message-board.c.page:226
#, no-wrap
msgid ""
"\n"
"g_signal_connect (entry, \"activate\", G_CALLBACK (entry_activate_cb), view);\n"
msgstr ""
"\n"
"g_signal_connect (entry, \"activate\", G_CALLBACK (entry_activate_cb), view);\n"

#. (itstool) path: section/p
#: C/message-board.c.page:230
msgid ""
"You then have to actually define <code>entry_activate_cb</code>. Define it "
"as follows, anywhere above <code>create_window</code>:"
msgstr ""
"실제로 <code>entry_activate_cb</code>를 정의해야합니다. <code>create_window</"
"code> 위 어디에든 다음 처럼 정의하십시오:"

#. (itstool) path: section/code
#: C/message-board.c.page:233
#, no-wrap
msgid ""
"\n"
"static void\n"
"entry_activate_cb (GtkEntry *entry, WebKitWebView *view)\n"
"{\n"
"    WebKitDOMDocument *document;\n"
"    WebKitDOMElement *body, *div;\n"
"\n"
"    document = webkit_web_view_get_dom_document (view);\n"
"    body = webkit_dom_document_query_selector (document, \"body\", NULL);\n"
"    div = webkit_dom_document_create_element (document, \"div\", NULL);\n"
"    webkit_dom_node_set_text_content (WEBKIT_DOM_NODE (div),\n"
"                                      gtk_entry_get_text (entry),\n"
"                                      NULL);\n"
"    webkit_dom_node_append_child (WEBKIT_DOM_NODE (body),\n"
"                                  WEBKIT_DOM_NODE (div),\n"
"                                  NULL);\n"
"    gtk_entry_set_text (entry, \"\");\n"
"}\n"
msgstr ""
"\n"
"static void\n"
"entry_activate_cb (GtkEntry *entry, WebKitWebView *view)\n"
"{\n"
"    WebKitDOMDocument *document;\n"
"    WebKitDOMElement *body, *div;\n"
"\n"
"    document = webkit_web_view_get_dom_document (view);\n"
"    body = webkit_dom_document_query_selector (document, \"body\", NULL);\n"
"    div = webkit_dom_document_create_element (document, \"div\", NULL);\n"
"    webkit_dom_node_set_text_content (WEBKIT_DOM_NODE (div),\n"
"                                      gtk_entry_get_text (entry),\n"
"                                      NULL);\n"
"    webkit_dom_node_append_child (WEBKIT_DOM_NODE (body),\n"
"                                  WEBKIT_DOM_NODE (div),\n"
"                                  NULL);\n"
"    gtk_entry_set_text (entry, \"\");\n"
"}\n"

#. (itstool) path: section/p
#: C/message-board.c.page:253
msgid ""
"The first thing you do is get a <code>WebKitDOMDocument</code> object that "
"represents the HTML document displayed in <code>view</code>. The DOM classes "
"and methods in WebKit allow you to inspect and manipulate the HTML document, "
"and work very similarly to the DOM APIs you might already know from "
"JavaScript."
msgstr ""
"여러분은 우선 <code>view</code>에 HTML 문서를 나타내는 "
"<code>WebKitDOMDocument</code>를 가져와야 합니다. 웹킷 DOM 클래스와 메서드는 "
"HTML을 살펴보고 다룰 수 있게 하며, JavaScript를 통해 이미 알고 있는 DOM API"
"와 매우 유사하게 다룰 수 있습니다."

#. (itstool) path: section/p
#: C/message-board.c.page:259
msgid ""
"Once you have the document, you want to get the <code>body</code> element so "
"that you can add <code>div</code> elements to it. The "
"<code>webkit_dom_document_query_selector</code> function lets you find an "
"element in the document using CSS selectors. This keeps you from having to "
"write tedious loops to traverse the document."
msgstr ""
"문서를 가져온 후에는 <code>body</code> 구성요소를 가져와서 <code>div</code> "
"구성요소를 넣을 수 있게 해야합니다. "
"<code>webkit_dom_document_query_selector</code> 함수는 CSS 선택자로 문서의 구"
"성 요소를 찾게 해줍니다. 이 방식을 통해 문서를 돌아볼 때 짜증나는 반복문을 작"
"성하지 않게 해줍니다."

#. (itstool) path: section/p
#: C/message-board.c.page:270
msgid ""
"Next, you create a new <code>div</code> element to hold the message. Every "
"element you create has to be attached to a document, so the function to "
"create an element takes the <code>WebKitDOMDocument</code> as its first "
"arguments. You then set the text content of the element to the contents of "
"the text entry. Because <code>gtk_entry_get_text</code> returns a "
"<code>const gchar*</code>, you don't have to free the result."
msgstr ""
"다음, 메시지를 넣어둘 새 <code>div</code> 구성요소를 만듭니다. 여러분이 만든 "
"모든 구성 요소는 문서에 붙으므로, 구성 요소를 만드는 함수의 첫번째 인자로 "
"<code>WebKitDOMDocument</code>를 갖습니다. 그 다음 텍스트 항목의 컨텐트로 구"
"성 요소의 텍스트를 설정합니다. <code>gtk_entry_get_text</code> 에서 "
"<code>const gchar*</code>를 반환하기에, 결과를 굳이 해제하지 않아도 됩니다."

#. (itstool) path: section/p
#: C/message-board.c.page:283
msgid ""
"Finally, you append the new <code>div</code> element to the body and clear "
"out the text entry so you can type something new. Build and run the program "
"again and test it for yourself."
msgstr ""
"마지막으로 <code>div</code> 구성요소를 body에 추가하고 텍스트 항목을 지워서 "
"새 내용을 입력할 수 있게 하십시오.프로그램을 다시 빌드하고 실행한 후 여러분 "
"자신이 직접 테스트해보십시오."

#. (itstool) path: section/title
#: C/message-board.c.page:290
msgid "Make it look better with CSS"
msgstr "CSS로 더 멋지게 만들기"

#. (itstool) path: section/p
#: C/message-board.c.page:292
msgid ""
"At this point, your program is completely functional, but not very pretty. "
"You can style the message display with CSS, just like you can with any other "
"HTML page. There are many ways you could attach some CSS to the page: You "
"could add it in the initial HTML document. You could inline it in the "
"<code>style</code> attribute of the <code>div</code> elements. You could "
"even programmatically construct it using the DOM APIs."
msgstr ""
"여기서 프로그램의 기능은 완벽하게 동작하지만 썩 매력있는 편은 아닙니다. 화면"
"에 나타나는 메시지를 다른 HTML페이지를 다루어왔던 것처럼 CSS로 장식할 수 있습"
"니다. 일부 CSS를 페이지에 붙여넣는 방법에는 여러가지가 있는데, 처음 HTML 문서"
"에 추가하는 방법, <code>div</code> 구성 요소의 <code>style</code> 속성에 넣"
"는 방법, DOM API로 프로그래밍 방식으로 넣는 방법이 있습니다."

#. (itstool) path: section/p
#: C/message-board.c.page:299
msgid ""
"In this tutorial, you'll attach the CSS using the <code>user-stylesheet-uri</"
"code> property of the <code>WebKitWebSetting</code> object attached to your "
"web view. In a more complete application, you would want to save and load "
"your HTML file. Keeping the style information outside the actual HTML means "
"that you can change the styling completely within your application, without "
"having to change users' files. You would normally just install a file along "
"with your application, but just to keep everything in one file for this "
"demo, we'll use a trick called a data URI. First, define the CSS as a static "
"string near the top of your file."
msgstr ""
"이 따라하기 지침에서는 웹 뷰에 붙은 <code>WebKitWebSetting</code> 객체의 "
"<code>user-stylesheet-uri</code> 속성으로 CSS를 붙입니다. 좀 더 완벽한 프로그"
"램에서는 HTML 파일을 저장하고 불러오고 싶을 수도 있습니다. HTML의 실제 스타"
"일 정보를 외부에서 유지한다는건, 굳이 사용자 파일을 건드리지 않아도 프로그램"
"에서 완벽하게 스타일을 바꿀 수 있다는 의미가 되겠습니다.  보통 프로그램과 해"
"당 파일을 같이 설치해야 하겠지만 이 시연 프로그램에서는 하나의 파일에 모두 담"
"아두고 데이터 URI로 꼼수를 쓰겠습니다. 우선 파일 상단 부분에 정적 CSS를 정의"
"하십시오."

#. (itstool) path: section/code
#: C/message-board.c.page:308
#, no-wrap
msgid ""
"\n"
"static const guchar CSS[] =\n"
"\"body { margin: 0; padding: 0; }\\n\"\n"
"\"div { \"\n"
"\" -webkit-border-radius: 2px;\"\n"
"\" background: -webkit-gradient(linear, 0% 100%, 0% 0%,\"\n"
"\" from(#f1f1f1), to(white));\"\n"
"\" border: solid 1px #c6c6c6;\"\n"
"\" -webkit-box-shadow: 0px 0px 2px #c6c6c6;\"\n"
"\" margin: 12px; padding: 6px;\"\n"
"\"}\";\n"
msgstr ""
"\n"
"static const guchar CSS[] =\n"
"\"body { margin: 0; padding: 0; }\\n\"\n"
"\"div { \"\n"
"\" -webkit-border-radius: 2px;\"\n"
"\" background: -webkit-gradient(linear, 0% 100%, 0% 0%,\"\n"
"\" from(#f1f1f1), to(white));\"\n"
"\" border: solid 1px #c6c6c6;\"\n"
"\" -webkit-box-shadow: 0px 0px 2px #c6c6c6;\"\n"
"\" margin: 12px; padding: 6px;\"\n"
"\"}\";\n"

#. (itstool) path: section/p
#: C/message-board.c.page:321
msgid ""
"All you have in this example are <code>div</code> elements inside a "
"<code>body</code> element. If you created more complicated HTML, you could "
"use whatever CSS is necessary. In fact, if you're comfortable with CSS, you "
"should trying changing this to something you like better."
msgstr ""
"이 예제에 들어간 모든 내용은 <code>body</code> 구성 요소의 <code>div</code> "
"구성요소입니다. 더 복잡한 HTML을 만든다면 어떤 CSS든 필요합니다. 사실, CSS가 "
"편하다면 여러분이 더 좋아하는 방식대로, 이 코드를 바꿔보시는게 좋습니다."

#. (itstool) path: section/p
#: C/message-board.c.page:326
msgid ""
"To apply the CSS, you set the <code>user-stylesheet-uri</code> in the "
"<code>create_window</code> function, anywhere after <code>view</code> has "
"already been defined."
msgstr ""
"CSS를 적용하려면, <code>view</code> 를 설정한 이후 어디든 "
"<code>create_window</code> 함수에서 <code>user-stylesheet-uri</code>를 설정하"
"십시오."

#. (itstool) path: section/code
#: C/message-board.c.page:332
#, no-wrap
msgid ""
"\n"
"tmp = g_base64_encode (CSS, strlen((gchar *) CSS));\n"
"css = g_strconcat (\"data:text/css;charset=utf-8;base64,\",\n"
"                   tmp, NULL);\n"
"g_object_set (webkit_web_view_get_settings (WEBKIT_WEB_VIEW (view)),\n"
"              \"user-stylesheet-uri\", css, NULL);\n"
"g_free (css);\n"
"g_free (tmp);\n"
msgstr ""
"\n"
"tmp = g_base64_encode (CSS, strlen((gchar *) CSS));\n"
"css = g_strconcat (\"data:text/css;charset=utf-8;base64,\",\n"
"                   tmp, NULL);\n"
"g_object_set (webkit_web_view_get_settings (WEBKIT_WEB_VIEW (view)),\n"
"              \"user-stylesheet-uri\", css, NULL);\n"
"g_free (css);\n"
"g_free (tmp);\n"

#. (itstool) path: section/p
#: C/message-board.c.page:342
msgid ""
"Also, make sure to add variable declarations for <code>tmp</code> and "
"<code>css</code> to the top of <code>create_window</code>."
msgstr ""
"또한 <code>create_window</code> 상단에 <code>tmp</code> 와 <code>css</code> "
"변수 선언을 추가했는지 확인하십시오."

#. (itstool) path: section/code
#: C/message-board.c.page:345
#, no-wrap
msgid ""
"\n"
"gchar *tmp, *css;\n"
msgstr ""
"\n"
"gchar *tmp, *css;\n"

#. (itstool) path: section/p
#: C/message-board.c.page:349
msgid ""
"A data URI starts with <sys>data:</sys> and some information about the "
"content type and how the data is encoded. The actual data follows after a "
"comma, in this case encoded in Base64. Unlike other URI schemes like "
"<sys>http:</sys>, <sys>ftp:</sys>, and <sys>file:</sys>, the <sys>data:</"
"sys> URI scheme doesn't specify where to find a file to load. Rather, it "
"gives the entire contents of the file."
msgstr ""
"<sys>data:</sys>로 시작하는 데이터 URI와 컨텐트 형식 일부 정보, 데이터 인코"
"딩 방식입니다. 실제 데이터는 콤마 뒤에 따라오는데 이 경우에는 Base64 방식으"
"로 인코딩합니다. <sys>http:</sys>, <sys>ftp:</sys>, <sys>file:</sys> 같은 다"
"른 URI 형식과는 다르게 URI 스킴에는 불러올 파일이 어디있는지 지정하지 않습니"
"다. 대신 파일의 전체 내용을 제시해줍니다."

#. (itstool) path: section/p
#: C/message-board.c.page:356
msgid ""
"The code above first encodes your CSS definitions in Base64, then combines "
"that with a fixed string to create a data URI. The <code>g_strconcat</code> "
"function can take any number of string arguments and concatenate them all "
"together, so you have to pass <code>NULL</code> as the final argument so it "
"knows when to stop. And don't forget to free those temporary strings after "
"you set the stylesheet property."
msgstr ""
"위 코드는 우선 CSS 정의를 Base64 방식으로 인코딩한 다음 데이터 URI를 만드는 "
"정적 문자열과 합칩니다. <code>g_strconcat</code> 함수에서는 여러 문자열 인자"
"를 취하여 합칠 수 있으므로, 마지막 인자 값은 <code>NULL</code>로 주어 언제 문"
"자열을 합치는 동작을 멈출 지 알려야합니다. 그리고 스타일 시트를 올바르게 설정"
"하고 나면 잊지 마시고 임시 문자열에 대해 메모리 해제를 반드시 수행하십시오."

#. (itstool) path: section/p
#: C/message-board.c.page:363
msgid ""
"Build and run the program again. It should now work exactly the same as at "
"the end of the last section, except the messages will be nicely styled with "
"a border and a subtle background gradient."
msgstr ""
"프로그램을 다시 빌드하고 실행하십시오. 테두리와 미묘한 백그라운드 그레디언트"
"로 멋지게 장식할 메시지 부분을 제외하고는 섹션의 마지막 부분과 정확히 동일하"
"게 동작합니다."

#. (itstool) path: section/title
#: C/message-board.c.page:369
msgid "Learn more"
msgstr "더 알아보기"

#. (itstool) path: section/p
#: C/message-board.c.page:371
msgid ""
"This tutorial showed you how to create a basic application using GTK+ and "
"WebKit, including showing a document and manipulating its contents. To "
"create a real application, you probably want to do a little bit more. Try "
"adding features on your own. Here are a few ideas:"
msgstr ""
"이 따라하기 지침에서는 GTK+와 웹킷으로 문서를 보여주고 내용을 다루는 기본적"
"인 프로그램을 만드는 방법을 보여줍니다. 실제 프로그램을 만들려면, 프로그램에 "
"좀 더 이것저것 붙여보고 싶을지도 모릅니다. 기능 추가는 여러분이 직접 해보시"
"죠. 몇가지 아이디어를 드리겠습니다:"

#. (itstool) path: item/p
#: C/message-board.c.page:377
msgid ""
"If you're comfortable with CSS, try changing the style of the message "
"display. CSS is easy to get started with, but increasingly more powerful. "
"There is a wealth of CSS tutorials on the Internet, and just about "
"everything you can do on the web, you can do in this application."
msgstr ""
"CSS가 불편하다면 메시지 표시 방식을 바꿔보십시오. CSS는 시작하기 쉬우면서도 "
"다루어 볼수록 점점 강력해집니다. 인터넷에는 다양한 CSS 따라하기 문서가 있으"
"며, 웹에 할 수 있는 모든걸 이 프로그램에서 해볼 수 있습니다."

#. (itstool) path: item/p
#: C/message-board.c.page:383
msgid ""
"Right now, you lose all your messages whenever you close the message board. "
"Try saving the HTML contents after each post, and loading the saved file (if "
"it exists) on startup."
msgstr ""
"바로 지금 게시판을 닫는다면 모든 메시지가 증발합니다. 각 게시물을 올린 다음 "
"HTML 문서를 저장해보고 시작할 때 저장한 파일(있을 경우)을 불려와보십시오."

#. (itstool) path: item/p
#: C/message-board.c.page:391
msgid ""
"If you keep your messages around for a long time, you'll start wondering "
"when you posted them. Add a timestamp to each message when it's posted. "
"You'll probably want to create some additional child <code>div</code> "
"elements with different classes that you can style in the CSS."
msgstr ""
"메시지를 오랫동안 유지했다면 언제 게시했는지 궁금해하실겁니다. 각 메시지를 게"
"시할 때 타임 스탬프를 추가하십시오. 아마도 CSS로 모양새를 갖출 수 있도록 다"
"른 클래스 이름을 부여한 추가 하위 <code>div</code> 구성요소를 만들고 싶을 수"
"도 있습니다."

#. (itstool) path: item/p
#: C/message-board.c.page:398
msgid ""
"This program keeps messages around forever. Think about ways you could allow "
"the user to delete messages. Perhaps you want messages to disappear "
"automatically after they're too old, or after there are a certain number of "
"messages before them. Or you could add a link in each message to delete it. "
"You could even override the context menu when you right-click on a message. "
"These features involve exploring WebKit's DOM API more."
msgstr ""
"이 프로그램은 메시지를 계속 유지합니다. 사용자가 메시지를 지울 수 있게 하는 "
"방법을 생각해보시죠. 아마도 너무 오래됐거나, 일정 갯수가 넘어가면 자동으로 메"
"시지를 사라지게 하고 싶을지도 모릅니다. 아니면 각 메시지에 삭제할 수 있는 링"
"크를 달아둘 수 있습니다. 심지어 메시지에 마우스 단추를 올려두고 오른쪽 단추"
"를 눌렀을 때 단축 메뉴를 띄울 수 있습니다. 이 기능을 구현하려면 웹킷 DOM API"
"를 좀 더 찾아봐야 합니다."

#. (itstool) path: info/title
#: C/messagedialog.c.page:8
msgctxt "text"
msgid "MessageDialog (C)"
msgstr "MessageDialog (C)"

#. (itstool) path: info/desc
#: C/messagedialog.c.page:19 C/messagedialog.py.page:19
#: C/messagedialog.vala.page:18
msgid "A message window"
msgstr "메시지 창"

#. (itstool) path: page/title
#: C/messagedialog.c.page:22 C/messagedialog.js.page:24
#: C/messagedialog.py.page:22 C/messagedialog.vala.page:21
msgid "MessageDialog"
msgstr "MessageDialog"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/messagedialog.c.page:24 C/messagedialog.js.page:25
#: C/messagedialog.py.page:23 C/messagedialog.vala.page:22
msgctxt "_"
msgid ""
"external ref='media/messagedialog.png' md5='1956288274018e2386d9cba96a2101de'"
msgstr ""

#. (itstool) path: page/p
#: C/messagedialog.c.page:25 C/messagedialog.vala.page:23
msgid "A modal message dialog which can cause the world to explode."
msgstr "전 세계를 폭발하게 만들 수 있는 모달 메시지 대화상자입니다."

#. (itstool) path: note/p
#: C/messagedialog.c.page:26
msgid ""
"To test out the application once it has started running, you can click on "
"the \"Message Dialog\" tab that appears in the top menubar of the screen."
msgstr ""
"프로그램을 시작하고 나서 시험해보려면, 화면 상단에 메뉴 표시줄을 띄우는 “메시"
"지 대화 상자” 탭을 눌러볼 수 있습니다."

#. (itstool) path: page/code
#: C/messagedialog.c.page:30
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* Callback function in which reacts to the \"response\" signal from the user in\n"
" * the message dialog window.\n"
" * This function is used to interact with the user in the terminal.\n"
" */\n"
"static void\n"
"on_response (GtkDialog *dialog,\n"
"             gint       response_id,\n"
"             gpointer   user_data)\n"
"{\n"
"  /* If the button clicked gives response OK (response_id being -5) */\n"
"  if (response_id == GTK_RESPONSE_OK) \n"
"     g_print (\"*boom*\\n\");\n"
"\n"
"  /* If the button clicked gives response CANCEL (response_id being -6) */\n"
"  else if (response_id == GTK_RESPONSE_CANCEL)\n"
"     g_print (\"good choice\\n\");\n"
"\n"
"  /* If the message dialog is destroyed (for example by pressing escape) */\n"
"  else if (response_id == GTK_RESPONSE_DELETE_EVENT)\n"
"     g_print (\"dialog closed or cancelled\\n\");\n"
"\n"
"  /* Destroy the dialog after one of the above actions have taken place */\n"
"  gtk_widget_destroy (GTK_WIDGET (dialog));\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the response signal \"activate\" related to the SimpleAction\n"
" * message_action.\n"
" * This function is used to cause the message dialog window to popup.\n"
" */\n"
"static void\n"
"message_cb (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   /* the parent variable in this case represents the window */\n"
"   GtkWidget *message_dialog;\n"
"   GtkWindow *parent = user_data;\n"
"   \n"
"   /* Create a new message dialog, and set the parameters as follows:\n"
"    * Dialog Flags - make the constructed dialog modal \n"
"    * (modal windows prevent interaction with other windows in the application)\n"
"    * Message Type - nonfatal warning message\n"
"    * Buttons Type - use the ok and cancel buttons\n"
"    * message_format - text that you want the user to see in the window \n"
"    */\n"
"   message_dialog = gtk_message_dialog_new (parent, GTK_DIALOG_MODAL, \n"
"                                            GTK_MESSAGE_WARNING, \n"
"                                            GTK_BUTTONS_OK_CANCEL, \n"
"                                            \"This action will cause the universe to stop existing.\");\n"
"\n"
"   gtk_widget_show_all (message_dialog);\n"
"\n"
"   g_signal_connect (GTK_DIALOG (message_dialog), \"response\", \n"
"                    G_CALLBACK (on_response), NULL);\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"\n"
"  GSimpleAction *message_action;\n"
"\n"
"  /* Create a window with a title and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"GMenu Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 400, 200);\n"
"\n"
"  /* Create a label and add it to the window */\n"
"  label = gtk_label_new (\"This application goes boom!\");\n"
"  gtk_container_add (GTK_CONTAINER (window), label);\n"
"\n"
"  /* Create a new simple action, giving it a NULL parameter type. It will \n"
"   * always be NULL for actions invoked from a menu. (e.g clicking on an \"ok\" \n"
"   * or \"cancel\" button)\n"
"   */\n"
"  message_action = g_simple_action_new (\"message\", NULL); \n"
"\n"
"  /* Connect the \"activate\" signal to the appropriate callback function */\n"
"  g_signal_connect (message_action, \"activate\", G_CALLBACK (message_cb), \n"
"                    GTK_WINDOW (window));\n"
"\n"
"  /* Adds the message_action to the overall action map. An Action map is an \n"
"   * interface that contains a number of named GAction instances \n"
"   * (such as message_action) \n"
"   */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (message_action));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the response signal \"activate\" from the \"quit\" action \n"
" * in the function directly below.\n"
" */ \n"
"static void\n"
"quit_cb (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the menu we are creating in this sample */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GMenu *menu;\n"
"  GSimpleAction *quit_action;\n"
"\n"
"  /* Initialize the GMenu, and add a menu item with label \"Message\" and action \n"
"   * \"win.message\". Also add another menu item with label \"Quit\" and action \n"
"   * \"app.quit\" \n"
"   */\n"
"  menu = g_menu_new ();\n"
"  g_menu_append (menu, \"Message\", \"win.message\");\n"
"  g_menu_append (menu, \"Quit\", \"app.quit\");\n"
"\n"
"  /* Create a new simple action for the application. (In this case it is the \n"
"   * \"quit\" action.\n"
"   */\n"
"  quit_action = g_simple_action_new (\"quit\", NULL);\n"
"\n"
"  /* Ensure that the menu we have just created is set for the overall application */\n"
"  gtk_application_set_app_menu (GTK_APPLICATION (app), G_MENU_MODEL (menu));\n"
"\n"
"  g_signal_connect (quit_action, \n"
"                    \"activate\", \n"
"                    G_CALLBACK (quit_cb), \n"
"                    app);\n"
"\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (quit_action));\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the application */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* Callback function in which reacts to the \"response\" signal from the user in\n"
" * the message dialog window.\n"
" * This function is used to interact with the user in the terminal.\n"
" */\n"
"static void\n"
"on_response (GtkDialog *dialog,\n"
"             gint       response_id,\n"
"             gpointer   user_data)\n"
"{\n"
"  /* If the button clicked gives response OK (response_id being -5) */\n"
"  if (response_id == GTK_RESPONSE_OK) \n"
"     g_print (\"*boom*\\n\");\n"
"\n"
"  /* If the button clicked gives response CANCEL (response_id being -6) */\n"
"  else if (response_id == GTK_RESPONSE_CANCEL)\n"
"     g_print (\"good choice\\n\");\n"
"\n"
"  /* If the message dialog is destroyed (for example by pressing escape) */\n"
"  else if (response_id == GTK_RESPONSE_DELETE_EVENT)\n"
"     g_print (\"dialog closed or cancelled\\n\");\n"
"\n"
"  /* Destroy the dialog after one of the above actions have taken place */\n"
"  gtk_widget_destroy (GTK_WIDGET (dialog));\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the response signal \"activate\" related to the SimpleAction\n"
" * message_action.\n"
" * This function is used to cause the message dialog window to popup.\n"
" */\n"
"static void\n"
"message_cb (GSimpleAction *simple,\n"
"            GVariant      *parameter,\n"
"            gpointer       user_data)\n"
"{\n"
"   /* the parent variable in this case represents the window */\n"
"   GtkWidget *message_dialog;\n"
"   GtkWindow *parent = user_data;\n"
"   \n"
"   /* Create a new message dialog, and set the parameters as follows:\n"
"    * Dialog Flags - make the constructed dialog modal \n"
"    * (modal windows prevent interaction with other windows in the application)\n"
"    * Message Type - nonfatal warning message\n"
"    * Buttons Type - use the ok and cancel buttons\n"
"    * message_format - text that you want the user to see in the window \n"
"    */\n"
"   message_dialog = gtk_message_dialog_new (parent, GTK_DIALOG_MODAL, \n"
"                                            GTK_MESSAGE_WARNING, \n"
"                                            GTK_BUTTONS_OK_CANCEL, \n"
"                                            \"This action will cause the universe to stop existing.\");\n"
"\n"
"   gtk_widget_show_all (message_dialog);\n"
"\n"
"   g_signal_connect (GTK_DIALOG (message_dialog), \"response\", \n"
"                    G_CALLBACK (on_response), NULL);\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"\n"
"  GSimpleAction *message_action;\n"
"\n"
"  /* Create a window with a title and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"GMenu Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 400, 200);\n"
"\n"
"  /* Create a label and add it to the window */\n"
"  label = gtk_label_new (\"This application goes boom!\");\n"
"  gtk_container_add (GTK_CONTAINER (window), label);\n"
"\n"
"  /* Create a new simple action, giving it a NULL parameter type. It will \n"
"   * always be NULL for actions invoked from a menu. (e.g clicking on an \"ok\" \n"
"   * or \"cancel\" button)\n"
"   */\n"
"  message_action = g_simple_action_new (\"message\", NULL); \n"
"\n"
"  /* Connect the \"activate\" signal to the appropriate callback function */\n"
"  g_signal_connect (message_action, \"activate\", G_CALLBACK (message_cb), \n"
"                    GTK_WINDOW (window));\n"
"\n"
"  /* Adds the message_action to the overall action map. An Action map is an \n"
"   * interface that contains a number of named GAction instances \n"
"   * (such as message_action) \n"
"   */\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (message_action));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the response signal \"activate\" from the \"quit\" action \n"
" * in the function directly below.\n"
" */ \n"
"static void\n"
"quit_cb (GSimpleAction *simple,\n"
"         GVariant      *parameter,\n"
"         gpointer       user_data)\n"
"{\n"
"  GApplication *application = user_data;\n"
"\n"
"  g_application_quit (application);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the menu we are creating in this sample */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GMenu *menu;\n"
"  GSimpleAction *quit_action;\n"
"\n"
"  /* Initialize the GMenu, and add a menu item with label \"Message\" and action \n"
"   * \"win.message\". Also add another menu item with label \"Quit\" and action \n"
"   * \"app.quit\" \n"
"   */\n"
"  menu = g_menu_new ();\n"
"  g_menu_append (menu, \"Message\", \"win.message\");\n"
"  g_menu_append (menu, \"Quit\", \"app.quit\");\n"
"\n"
"  /* Create a new simple action for the application. (In this case it is the \n"
"   * \"quit\" action.\n"
"   */\n"
"  quit_action = g_simple_action_new (\"quit\", NULL);\n"
"\n"
"  /* Ensure that the menu we have just created is set for the overall application */\n"
"  gtk_application_set_app_menu (GTK_APPLICATION (app), G_MENU_MODEL (menu));\n"
"\n"
"  g_signal_connect (quit_action, \n"
"                    \"activate\", \n"
"                    G_CALLBACK (quit_cb), \n"
"                    app);\n"
"\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (quit_action));\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the application */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/messagedialog.c.page:37
msgid ""
"<link href=\"http://developer.gnome.org/gio/stable/GApplication.html"
"\">GApplication</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gio/stable/GApplication.html"
"\">GApplication</link>"

#. (itstool) path: item/p
#: C/messagedialog.c.page:39
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkMessageDialog.html"
"\">GtkMessageDialog</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkMessageDialog.html"
"\">GtkMessageDialog</link>"

#. (itstool) path: item/p
#: C/messagedialog.c.page:40
msgid ""
"<link href=\"http://developer.gnome.org/gio/stable/GSimpleAction.html#g-"
"simple-action-new\">GSimpleAction</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gio/stable/GSimpleAction.html#g-"
"simple-action-new\">GSimpleAction</link>"

#. (itstool) path: info/title
#: C/messagedialog.js.page:8
msgctxt "text"
msgid "MessageDialog (JavaScript)"
msgstr "MessageDialog(JavaScript)"

#. (itstool) path: info/desc
#: C/messagedialog.js.page:21
msgid "A popup message attached to a window"
msgstr "창에 붙여 띄우는 메시지"

#. (itstool) path: page/p
#: C/messagedialog.js.page:26
msgid ""
"A MessageDialog is a modal message dialog, which means a popup that you have "
"to respond to before you get back to what you were doing in the window that "
"it's attached to. This one can cause the world to explode (or at least it "
"says that it can). To make the popup appear when you run this sample, click "
"on \"Message\" inside of its application menu -- that's the menu that "
"appears when you click on an application's name in the upper-left screen "
"corner, next to Activities."
msgstr ""
"MessageDialog는 모달 메시지 대화상자인데, 대화상자가 붙어 어떤 일을 하던 창으"
"로 돌아가려면 반드시 응답해야 하는 팝업입니다. 이렇게 해서 전세계를 폭발하게 "
"할 수 있습니다(아니면 최소한 그럴 수 있다고 해두죠). 이 예제를 실행할 때 팝업"
"을 나타내려면, 프로그램 메뉴의 “Message”를 누르십시오. 좌측 상단 화면 구석에 "
"있는 현재 활동 옆 프로그램 이름을 누르면 나타나는 메뉴입니다."

#. (itstool) path: note/p
#: C/messagedialog.js.page:27
msgid ""
"The difference between a MessageDialog and a <link xref=\"dialog.js"
"\">Dialog</link> is that a Dialog can contain whatever widgets and content "
"you want to put in it, whereas a MessageDialog is just a convenient way to "
"make popups appear with a basic message and buttons."
msgstr ""
"MessageDialog와 <link xref=\"dialog.js\">Dialog</link> 의 차이점은 Dialog는 "
"어떤 위젯이든 넣고 여러분이 넣고 싶은 컨텐트를 넣을- 수 있습니다, 다만 "
"MessageDialog는 기본 메시지와 단추로 팝업을 띄우는 편의 수단일 뿐입니다."

#. (itstool) path: section/code
#: C/messagedialog.js.page:44
#, no-wrap
msgid ""
"\n"
"const MessageDialogExample = new Lang.Class ({\n"
"    Name: 'MessageDialog Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jsmessagedialog',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._initMenus();\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const MessageDialogExample = new Lang.Class ({\n"
"    Name: 'MessageDialog Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jsmessagedialog',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._initMenus();\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: note/p
#: C/messagedialog.js.page:71 C/switch.js.page:76
msgid ""
"Before we call _buildUI to create the window and the widgets inside it, we "
"need to call _initMenus, which tells GNOME to create the menu. We can put "
"the actual code for _initMenus after the code for _buildUI, since it doesn't "
"matter what order we put them in so long as _initMenus is called first in "
"_onStartup."
msgstr ""
"창을 만들고 위젯을 그 안에 넣으려 _buildUI를 호출할 수 있기 전, 그놈에 메뉴"
"를 만들어주라고 지시하는 _initMenus를 호출해야합니다. _onStartup에서 "
"_initMenus를 우선 호출하는 동안 어떤 순서로 두는지는 중요하지 않으니, "
"_buildUI 코드 다음에 _initMenus의 실제 코드를 둘 수 있습니다."

#. (itstool) path: section/code
#: C/messagedialog.js.page:72
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Gtk.MessageDialog Example\",\n"
"            default_height: 200,\n"
"            default_width: 400 });\n"
msgstr ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Gtk.MessageDialog Example\",\n"
"            default_height: 200,\n"
"            default_width: 400 });\n"

#. (itstool) path: section/code
#: C/messagedialog.js.page:86
#, no-wrap
msgid ""
"\n"
"        // Create a silly warning message and add it to the window\n"
"        this.warningLabel = new Gtk.Label ({\n"
"            label: \"This application goes boom! (Not really.)\"});\n"
"        this._window.add (this.warningLabel);\n"
msgstr ""
"\n"
"        // Create a silly warning message and add it to the window\n"
"        this.warningLabel = new Gtk.Label ({\n"
"            label: \"This application goes boom! (Not really.)\"});\n"
"        this._window.add (this.warningLabel);\n"

#. (itstool) path: section/p
#: C/messagedialog.js.page:92
msgid ""
"For this example, all that we have in the window the popup comes out of is a "
"silly warning <link xref=\"label.js\">Label</link>."
msgstr ""
"이 예제에서는 창에 모든걸 넣고, 저기에서 띄워줄 문장은 유치한 경고 <link "
"xref=\"label.js\">Label</link>입니다."

#. (itstool) path: section/title
#: C/messagedialog.js.page:96
msgid "Creating the application's menu"
msgstr "프로그램 메뉴 만들기"

#. (itstool) path: section/code
#: C/messagedialog.js.page:97
#, no-wrap
msgid ""
"\n"
"    // Build the application menu, including the button that calls the dialog\n"
"    _initMenus: function() {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"Message\",'app.message');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // This pops up a MessageDialog when \"Message\" is clicked in the menu\n"
"        let messageAction = new Gio.SimpleAction ({ name: 'message' });\n"
"        messageAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showMessageDialog();\n"
"            }));\n"
"        this.application.add_action(messageAction);\n"
"\n"
"        // This closes the window when \"Quit\" is clicked in the menu\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
msgstr ""
"\n"
"    // Build the application menu, including the button that calls the dialog\n"
"    _initMenus: function() {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"Message\",'app.message');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // This pops up a MessageDialog when \"Message\" is clicked in the menu\n"
"        let messageAction = new Gio.SimpleAction ({ name: 'message' });\n"
"        messageAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showMessageDialog();\n"
"            }));\n"
"        this.application.add_action(messageAction);\n"
"\n"
"        // This closes the window when \"Quit\" is clicked in the menu\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"

#. (itstool) path: section/p
#: C/messagedialog.js.page:122
msgid ""
"Here, we build the <link xref=\"gmenu.js\">GMenu</link> where we'll be "
"putting the \"Message\" button which triggers the popup MessageDialog. The "
"GMenu is the menu that appears when you click the application's name in the "
"upper-left corner of the screen, next to the Activities menu. Our menu only "
"has two options in it: Message, and Quit."
msgstr ""
"여기서 우리가 나중에 팝업 MessageDialog를 실행할 \"Message\" 단추를 두는 "
"<link xref=\"gmenu.js\">GMenu</link>를 만들겠습니다. GMenu는 화면의 좌측 상"
"단, 현재 활동 옆에 프로그램 이름을 눌렀을 때 프로그램 이름을 나타내는 메뉴입"
"니다. 우리가 쓰는 메뉴는 옵션을 Message, Quit 두 개만 두었습니다."

#. (itstool) path: section/title
#: C/messagedialog.js.page:126
msgid "Creating the MessageDialog"
msgstr "MessageDialog 만들기"

#. (itstool) path: section/code
#: C/messagedialog.js.page:127
#, no-wrap
msgid ""
"\n"
"    _showMessageDialog: function () {\n"
"\n"
"        // Create a modal MessageDialog whose parent is the window\n"
"        this._messageDialog = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            buttons: Gtk.ButtonsType.OK_CANCEL,\n"
"            message_type: Gtk.MessageType.WARNING,\n"
"            text: \"This action will cause the universe to stop existing.\" });\n"
"\n"
"        this._messageDialog.connect ('response', Lang.bind(this, this._response_cb));\n"
"        this._messageDialog.show();\n"
"    },\n"
msgstr ""
"\n"
"    _showMessageDialog: function () {\n"
"\n"
"        // Create a modal MessageDialog whose parent is the window\n"
"        this._messageDialog = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            buttons: Gtk.ButtonsType.OK_CANCEL,\n"
"            message_type: Gtk.MessageType.WARNING,\n"
"            text: \"This action will cause the universe to stop existing.\" });\n"
"\n"
"        this._messageDialog.connect ('response', Lang.bind(this, this._response_cb));\n"
"        this._messageDialog.show();\n"
"    },\n"

#. (itstool) path: section/p
#: C/messagedialog.js.page:142
msgid ""
"To make our MessageDialog a popup attached to the main window, we set its "
"modal property to true and set it to be \"transient_for\" _window. After "
"that, we can set what kind of buttons it has and what kind of message it is "
"(which determines what icon appears next to the message), and write out the "
"text inside it, before connecting its \"response\" signal to the callback "
"function which handles it."
msgstr ""
"MessageDialog 팝업을 메인 창에 붙이려면, 모달 속성을 True로 설정하고 "
"\"transient_for\" 창을 설정합니다. 다음 단추 종류를 설정하고 어떤 메시지를 보"
"여줄지 설정(메시지 옆 아이콘 표시 종류를 결정)할 수 있으며, \"response\" 시그"
"널을 처리할 콜백 함수에 연결하기 전에 텍스트를 넣을 수 있습니다."

#. (itstool) path: note/p
#: C/messagedialog.js.page:143
msgid "Here are some resources for making your own MessageDialogs:"
msgstr "여기에 MessageDialog를 만들 때 몇가지 참고할 자료가 있습니다:"

#. (itstool) path: item/p
#: C/messagedialog.js.page:145
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkMessageDialog."
"html#GtkButtonsType\">List of button types</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkMessageDialog."
"html#GtkButtonsType\">단추 형식 목록</link>"

#. (itstool) path: item/p
#: C/messagedialog.js.page:146
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkMessageDialog."
"html#GtkMessageType\">List of message types</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkMessageDialog."
"html#GtkMessageType\">메시지 형식 목록</link>"

#. (itstool) path: section/code
#: C/messagedialog.js.page:150
#, no-wrap
msgid ""
"\n"
"    // Callback function (aka signal handler) for the response signal\n"
"    _response_cb: function (messagedialog, response_id) {\n"
"\n"
"        // A simple switch that changes the main window's label\n"
"        switch (response_id) {\n"
"            case Gtk.ResponseType.OK:\n"
"                this.warningLabel.set_label (\"*BOOM*\\n\");\n"
"                break;\n"
"            case Gtk.ResponseType.CANCEL:\n"
"                this.warningLabel.set_label (\"Good choice!\\n\");\n"
"                break;\n"
"            case Gtk.ResponseType.DELETE_EVENT:\n"
"                this.warningLabel.set_label (\"Dialog closed or cancelled.\\n\");\n"
"                break;\n"
"        }\n"
"\n"
"        this._messageDialog.destroy();\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    // Callback function (aka signal handler) for the response signal\n"
"    _response_cb: function (messagedialog, response_id) {\n"
"\n"
"        // A simple switch that changes the main window's label\n"
"        switch (response_id) {\n"
"            case Gtk.ResponseType.OK:\n"
"                this.warningLabel.set_label (\"*BOOM*\\n\");\n"
"                break;\n"
"            case Gtk.ResponseType.CANCEL:\n"
"                this.warningLabel.set_label (\"Good choice!\\n\");\n"
"                break;\n"
"            case Gtk.ResponseType.DELETE_EVENT:\n"
"                this.warningLabel.set_label (\"Dialog closed or cancelled.\\n\");\n"
"                break;\n"
"        }\n"
"\n"
"        this._messageDialog.destroy();\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/messagedialog.js.page:173
msgid ""
"This function takes two parameters, the MessageDialog and its response_id, "
"both of which are automatically supplied (you don't have to manually pass "
"them to it for it to work). Here we use a simple switch to change the "
"\"warning label\"'s text, depending on which option you select. The "
"DELETE_EVENT occurs if you press Escape to cancel the MessageDialog, instead "
"of clicking OK or Cancel. Whatever you select, the popup is destroyed "
"afterwards."
msgstr ""
"이 함수에는 MessageDialog와 response_id 두 매개변수가 있는데, 두 매개 변수 값"
"은 자동으로 들어갑니다(동작하게 할 때 직접 넣을 필요는 없습니다). 여기서, 선"
"택한 옵션에 따라 “warning label”의 텍스트를 바꾸는 간단한 스위치를 사용하겠습"
"니다. DELETE_EVENT는 확인 또는 취소를 누르는 대신 MessageDialog 처리를 취소하"
"려고 Escape 키를 누를 경우 발생합니다. 무얼 선택하든지간에 팝업은 나중에 해체"
"됩니다."

#. (itstool) path: section/code
#: C/messagedialog.js.page:175
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new MessageDialogExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Run the application\n"
"let app = new MessageDialogExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/messagedialog.js.page:180
msgid ""
"Finally, we create a new instance of the finished MessageDialogExample "
"class, and set the application running."
msgstr ""
"마지막으로 작성을 끝낸 MessageDialogExample 클래스의 새 인스턴스를 만들고 프"
"로그램 실행을 설정하겠습니다."

#. (itstool) path: section/code
#: C/messagedialog.js.page:185
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const MessageDialogExample = new Lang.Class ({\n"
"    Name: 'MessageDialog Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jsmessagedialog',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._initMenus();\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Gtk.MessageDialog Example\",\n"
"            default_height: 200,\n"
"            default_width: 400 });\n"
"\n"
"        // Create a silly warning message and add it to the window\n"
"        this.warningLabel = new Gtk.Label ({\n"
"            label: \"This application goes boom! (Not really.)\"});\n"
"        this._window.add (this.warningLabel);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application menu, including the button that calls the dialog\n"
"    _initMenus: function() {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"Message\",'app.message');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // This pops up a MessageDialog when \"Message\" is clicked in the menu\n"
"        let messageAction = new Gio.SimpleAction ({ name: 'message' });\n"
"        messageAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showMessageDialog();\n"
"            }));\n"
"        this.application.add_action(messageAction);\n"
"\n"
"        // This closes the window when \"Quit\" is clicked in the menu\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"\n"
"\n"
"    _showMessageDialog: function () {\n"
"\n"
"        // Create a modal MessageDialog whose parent is the window\n"
"        this._messageDialog = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            buttons: Gtk.ButtonsType.OK_CANCEL,\n"
"            message_type: Gtk.MessageType.WARNING,\n"
"            text: \"This action will cause the universe to stop existing.\" });\n"
"\n"
"        this._messageDialog.connect ('response', Lang.bind(this, this._response_cb));\n"
"        this._messageDialog.show();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Callback function (aka signal handler) for the response signal\n"
"    _response_cb: function (messagedialog, response_id) {\n"
"\n"
"        // A simple switch that changes the main window's label\n"
"        switch (response_id) {\n"
"            case Gtk.ResponseType.OK:\n"
"                this.warningLabel.set_label (\"*BOOM*\\n\");\n"
"                break;\n"
"            case Gtk.ResponseType.CANCEL:\n"
"                this.warningLabel.set_label (\"Good choice!\\n\");\n"
"                break;\n"
"            case Gtk.ResponseType.DELETE_EVENT:\n"
"                this.warningLabel.set_label (\"Dialog closed or cancelled.\\n\");\n"
"                break;\n"
"        }\n"
"\n"
"        this._messageDialog.destroy();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new MessageDialogExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const MessageDialogExample = new Lang.Class ({\n"
"    Name: 'MessageDialog Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jsmessagedialog',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal initializes menus and builds the UI\n"
"    _onStartup: function () {\n"
"        this._initMenus();\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Gtk.MessageDialog Example\",\n"
"            default_height: 200,\n"
"            default_width: 400 });\n"
"\n"
"        // Create a silly warning message and add it to the window\n"
"        this.warningLabel = new Gtk.Label ({\n"
"            label: \"This application goes boom! (Not really.)\"});\n"
"        this._window.add (this.warningLabel);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application menu, including the button that calls the dialog\n"
"    _initMenus: function() {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"Message\",'app.message');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // This pops up a MessageDialog when \"Message\" is clicked in the menu\n"
"        let messageAction = new Gio.SimpleAction ({ name: 'message' });\n"
"        messageAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showMessageDialog();\n"
"            }));\n"
"        this.application.add_action(messageAction);\n"
"\n"
"        // This closes the window when \"Quit\" is clicked in the menu\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"\n"
"\n"
"    _showMessageDialog: function () {\n"
"\n"
"        // Create a modal MessageDialog whose parent is the window\n"
"        this._messageDialog = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            buttons: Gtk.ButtonsType.OK_CANCEL,\n"
"            message_type: Gtk.MessageType.WARNING,\n"
"            text: \"This action will cause the universe to stop existing.\" });\n"
"\n"
"        this._messageDialog.connect ('response', Lang.bind(this, this._response_cb));\n"
"        this._messageDialog.show();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Callback function (aka signal handler) for the response signal\n"
"    _response_cb: function (messagedialog, response_id) {\n"
"\n"
"        // A simple switch that changes the main window's label\n"
"        switch (response_id) {\n"
"            case Gtk.ResponseType.OK:\n"
"                this.warningLabel.set_label (\"*BOOM*\\n\");\n"
"                break;\n"
"            case Gtk.ResponseType.CANCEL:\n"
"                this.warningLabel.set_label (\"Good choice!\\n\");\n"
"                break;\n"
"            case Gtk.ResponseType.DELETE_EVENT:\n"
"                this.warningLabel.set_label (\"Dialog closed or cancelled.\\n\");\n"
"                break;\n"
"        }\n"
"\n"
"        this._messageDialog.destroy();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new MessageDialogExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: info/title
#: C/messagedialog.py.page:8
msgctxt "text"
msgid "MessageDialog (Python)"
msgstr "MessageDialog(Python)"

#. (itstool) path: page/p
#: C/messagedialog.py.page:24
msgid ""
"A message dialog which prints messages on the terminal, depending on your "
"choices."
msgstr "선택에 따라 메시지를 터미널에 출력하는 메시지 대화 상자입니다."

#. (itstool) path: section/code
#: C/messagedialog.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    # constructor for a window (the parent window) with a label\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GMenu Example\", application=app)\n"
"        self.set_default_size(400, 200)\n"
"        label = Gtk.Label()\n"
"        label.set_text(\"This application goes boom!\")\n"
"        self.add(label)\n"
"\n"
"        # create the message_action (a Gio.SimpleAction) - for the window\n"
"        message_action = Gio.SimpleAction.new(\"message\", None)\n"
"        # connect the signal from the action to the function message_cb()\n"
"        message_action.connect(\"activate\", self.message_cb)\n"
"        # add the action to the application\n"
"        app.add_action(message_action)\n"
"\n"
"    # callback function for the signal \"activate\" from the message_action\n"
"    # in the menu of the parent window\n"
"    def message_cb(self, action, parameter):\n"
"        # a Gtk.MessageDialog\n"
"        messagedialog = Gtk.MessageDialog(parent=self,\n"
"                                          flags=Gtk.DialogFlags.MODAL,\n"
"                                          type=Gtk.MessageType.WARNING,\n"
"                                          buttons=Gtk.ButtonsType.OK_CANCEL,\n"
"                                          message_format=\"This action will cause the universe to stop existing.\")\n"
"        # connect the response (of the button clicked) to the function\n"
"        # dialog_response()\n"
"        messagedialog.connect(\"response\", self.dialog_response)\n"
"        # show the messagedialog\n"
"        messagedialog.show()\n"
"\n"
"    def dialog_response(self, widget, response_id):\n"
"        # if the button clicked gives response OK (-5)\n"
"        if response_id == Gtk.ResponseType.OK:\n"
"            print(\"*boom*\")\n"
"        # if the button clicked gives response CANCEL (-6)\n"
"        elif response_id == Gtk.ResponseType.CANCEL:\n"
"            print(\"good choice\")\n"
"        # if the messagedialog is destroyed (by pressing ESC)\n"
"        elif response_id == Gtk.ResponseType.DELETE_EVENT:\n"
"            print(\"dialog closed or cancelled\")\n"
"        # finally, destroy the messagedialog\n"
"        widget.destroy()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def quit_cb(self, action, parameter):\n"
"        self.quit()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # create a menu (a Gio.Menu)\n"
"        menu = Gio.Menu()\n"
"        # append a menu item with label \"Message\" and action \"app.message\"\n"
"        menu.append(\"Message\", \"app.message\")\n"
"        # append a menu item with label \"Quit\" and action \"app.quit\"\n"
"        menu.append(\"Quit\", \"app.quit\")\n"
"        # set menu as the menu for the application\n"
"        self.set_app_menu(menu)\n"
"\n"
"        # a new simpleaction - for the application\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_cb)\n"
"        self.add_action(quit_action)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    # constructor for a window (the parent window) with a label\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"GMenu Example\", application=app)\n"
"        self.set_default_size(400, 200)\n"
"        label = Gtk.Label()\n"
"        label.set_text(\"This application goes boom!\")\n"
"        self.add(label)\n"
"\n"
"        # create the message_action (a Gio.SimpleAction) - for the window\n"
"        message_action = Gio.SimpleAction.new(\"message\", None)\n"
"        # connect the signal from the action to the function message_cb()\n"
"        message_action.connect(\"activate\", self.message_cb)\n"
"        # add the action to the application\n"
"        app.add_action(message_action)\n"
"\n"
"    # callback function for the signal \"activate\" from the message_action\n"
"    # in the menu of the parent window\n"
"    def message_cb(self, action, parameter):\n"
"        # a Gtk.MessageDialog\n"
"        messagedialog = Gtk.MessageDialog(parent=self,\n"
"                                          flags=Gtk.DialogFlags.MODAL,\n"
"                                          type=Gtk.MessageType.WARNING,\n"
"                                          buttons=Gtk.ButtonsType.OK_CANCEL,\n"
"                                          message_format=\"This action will cause the universe to stop existing.\")\n"
"        # connect the response (of the button clicked) to the function\n"
"        # dialog_response()\n"
"        messagedialog.connect(\"response\", self.dialog_response)\n"
"        # show the messagedialog\n"
"        messagedialog.show()\n"
"\n"
"    def dialog_response(self, widget, response_id):\n"
"        # if the button clicked gives response OK (-5)\n"
"        if response_id == Gtk.ResponseType.OK:\n"
"            print(\"*boom*\")\n"
"        # if the button clicked gives response CANCEL (-6)\n"
"        elif response_id == Gtk.ResponseType.CANCEL:\n"
"            print(\"good choice\")\n"
"        # if the messagedialog is destroyed (by pressing ESC)\n"
"        elif response_id == Gtk.ResponseType.DELETE_EVENT:\n"
"            print(\"dialog closed or cancelled\")\n"
"        # finally, destroy the messagedialog\n"
"        widget.destroy()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def quit_cb(self, action, parameter):\n"
"        self.quit()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # create a menu (a Gio.Menu)\n"
"        menu = Gio.Menu()\n"
"        # append a menu item with label \"Message\" and action \"app.message\"\n"
"        menu.append(\"Message\", \"app.message\")\n"
"        # append a menu item with label \"Quit\" and action \"app.quit\"\n"
"        menu.append(\"Quit\", \"app.quit\")\n"
"        # set menu as the menu for the application\n"
"        self.set_app_menu(menu)\n"
"\n"
"        # a new simpleaction - for the application\n"
"        quit_action = Gio.SimpleAction.new(\"quit\", None)\n"
"        quit_action.connect(\"activate\", self.quit_cb)\n"
"        self.add_action(quit_action)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/messagedialog.py.page:36
msgid "Useful methods for a MessageDialog widget"
msgstr "MessageDialog 위젯에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/messagedialog.py.page:37
msgid ""
"In line 18 the signal <code>\"activate\"</code> is connected to the callback "
"function <code>message_cb()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"18번째 줄에서 <code>\"activate\"</code> 시그널은 <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code> 함수로  "
"<code>message_cb()</code> 콜백 함수에 연결했습니다. 더 자세한 설명은 <link "
"xref=\"signals-callbacks.py\"/>를 참조하십시오."

#. (itstool) path: item/p
#: C/messagedialog.py.page:39
msgid ""
"In the constructor of MessageDialog we could set flags as <code>Gtk."
"DialogFlags.DESTROY_WITH_PARENT</code> (to destroy the messagedialog window "
"when its parent window is destroyed) or as <code>Gtk.DialogFlags.MODAL</"
"code> (no interaction with other windows of the application)."
msgstr ""
"MessageDialog 생성자에서 <code>Gtk.DialogFlags.DESTROY_WITH_PARENT</code> 플"
"래그(상위 창을 해체할 때 messagedialog 창을 해체) 또는 <code>Gtk.DialogFlags."
"MODAL</code> 플래그(프로그램의 다른 창과 동작하지 않음)을 설정할 수 있습니다."

#. (itstool) path: item/p
#: C/messagedialog.py.page:40
msgid ""
"In the constructor of MessageDialog we could set type as any of <code>Gtk."
"MessageType.INFO, Gtk.MessageType.WARNING, Gtk.MessageType.QUESTION, Gtk."
"MessageType.ERROR, Gtk.MessageType.OTHER</code> depending on what type of "
"message we want."
msgstr ""
"MessageDialog 생성자에서 원하는 메시지 형식에 따라 <code>Gtk.MessageType."
"INFO, Gtk.MessageType.WARNING, Gtk.MessageType.QUESTION, Gtk.MessageType."
"ERROR, Gtk.MessageType.OTHER</code> 중 하나를 설정할 수 있습니다."

#. (itstool) path: item/p
#: C/messagedialog.py.page:41
msgid ""
"In the constructor of MessageDialog we could set buttons as any of <code>Gtk."
"ButtonsType.NONE, Gtk.ButtonsType.OK, Gtk.ButtonsType.CLOSE, Gtk.ButtonsType."
"CANCEL, Gtk.ButtonsType.YES_NO, Gtk.ButtonsType.OK_CANCEL</code>, or any "
"button using <code>add_button()</code> as in Gtk.Dialog."
msgstr ""
"MessageDialog 생성자에서 <code>Gtk.ButtonsType.NONE, Gtk.ButtonsType.OK, Gtk."
"ButtonsType.CLOSE, Gtk.ButtonsType.CANCEL, Gtk.ButtonsType.YES_NO, Gtk."
"ButtonsType.OK_CANCEL</code> 또는 Gtk.Dialog에서와 같이 <code>add_button()</"
"code>를 활용한 그 어떤 요소든 단추로 설정할 수 있습니다."

#. (itstool) path: item/p
#: C/messagedialog.py.page:42
msgid ""
"We could substitute the default image of the MessageDialog with another "
"image using"
msgstr "다른 그림을 활용하여 MessageDialog의 기본 그림을 대신할 수 있습니다."

#. (itstool) path: item/code
#: C/messagedialog.py.page:43
#, no-wrap
msgid ""
"\n"
"image = Gtk.Image()\n"
"image.set_from_stock(Gtk.STOCK_CAPS_LOCK_WARNING, Gtk.IconSize.DIALOG)\n"
"image.show()\n"
"messagedialog.set_image(image)"
msgstr ""
"\n"
"image = Gtk.Image()\n"
"image.set_from_stock(Gtk.STOCK_CAPS_LOCK_WARNING, Gtk.IconSize.DIALOG)\n"
"image.show()\n"
"messagedialog.set_image(image)"

#. (itstool) path: item/p
#: C/messagedialog.py.page:48
msgid ""
"where <code>Gtk.STOCK_CAPS_LOCK_WARNING</code> is any image from <link href="
"\"http://developer.gnome.org/gtk3/unstable/gtk3-Stock-Items.html\">Stock "
"Items</link>. We could also set any image as in the Image widget, as "
"<code>image.set_from_file(\"filename.png\")</code>."
msgstr ""
"<code>Gtk.STOCK_CAPS_LOCK_WARNING</code>은 <link href=\"http://developer."
"gnome.org/gtk3/unstable/gtk3-Stock-Items.html\">스톡 항목</link>의 그림입니"
"다. <code>image.set_from_file(\"filename.png\")</code> 코드로 그림 위젯처럼 "
"어떤 그림이든 설정할 수 있습니다."

#. (itstool) path: item/p
#: C/messagedialog.py.page:49
msgid ""
"<code>format_secondary_text(\"some secondary message\")</code> sets a "
"secondary message. The primary text becomes bold."
msgstr ""
"<code>format_secondary_text(\"some secondary message\")</code>는 부차적인 메"
"시지를 설정합니다. 주 텍스트는 굵은 글씨로 나타납니다."

#. (itstool) path: item/p
#: C/messagedialog.py.page:59
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkMessageDialog.html"
"\">GtkMessageDialog</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkMessageDialog.html"
"\">GtkMessageDialog</link>"

#. (itstool) path: item/p
#: C/messagedialog.py.page:63
msgid ""
"<link href=\"http://developer.gnome.org/gio/unstable/GActionMap.html"
"\">GActionMap</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gio/unstable/GActionMap.html"
"\">GActionMap</link>"

#. (itstool) path: info/title
#: C/messagedialog.vala.page:8
msgctxt "text"
msgid "MessageDialog (Vala)"
msgstr "MessageDialog(Vala)"

#. (itstool) path: page/code
#: C/messagedialog.vala.page:25
#, no-wrap
msgid ""
"\n"
"//A window in the application\n"
"public class Window : Gtk.ApplicationWindow {\n"
"\tpublic Window (Application app) {\n"
"\t\tObject (application: app, title: \"Gtk.MessageDialog Example\");\n"
"\n"
"\t\tvar label = new Gtk.Label (\"This application goes boom!\");\n"
"\t\tthis.add (label);\n"
"\n"
"\t\tvar message_action = new SimpleAction (\"message\", null);\n"
"\t\tmessage_action.activate.connect (message);\n"
"\t\tthis.add_action (message_action);\n"
"\n"
"\t\tthis.set_default_size (400, 200);\n"
"\t\tthis.show_all ();\n"
"\t}\n"
"\n"
"\tvoid dialog_response (Gtk.Dialog dialog, int response_id) {\n"
"\t\tswitch (response_id) {\n"
"\t\t\tcase Gtk.ResponseType.OK:\n"
"\t\t\t\tprint (\"*boom*\\n\");\n"
"\t\t\t\tbreak;\n"
"\t\t\tcase Gtk.ResponseType.CANCEL:\n"
"\t\t\t\tprint (\"good choice\\n\");\n"
"\t\t\t\tbreak;\n"
"\t\t\tcase Gtk.ResponseType.DELETE_EVENT:\n"
"\t\t\t\tprint (\"dialog closed or cancelled\\n\");\n"
"\t\t\t\tbreak;\n"
"\t\t}\n"
"\t\t\tdialog.destroy();\n"
"\t}\n"
"\n"
"\tvoid message (SimpleAction simple, Variant? parameter) {\n"
"\t\tvar messagedialog = new Gtk.MessageDialog (this,\n"
"                            Gtk.DialogFlags.MODAL,\n"
"                            Gtk.MessageType.WARNING,\n"
"                            Gtk.ButtonsType.OK_CANCEL,\n"
"                            \"This action will cause the universe to stop existing.\");\n"
"\n"
"\t\tmessagedialog.response.connect (dialog_response);\n"
"\t\tmessagedialog.show ();\n"
"\t}\n"
"}\n"
"\n"
"//This is the Application\n"
"public class Application : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew Window (this);\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\tvar menu = new Menu ();\n"
"\t\tmenu.append (\"Message\", \"win.message\");\n"
"\t\tmenu.append (\"Quit\", \"app.quit\");\n"
"\t\tthis.app_menu = menu;\n"
"\n"
"\t\tvar quit_action = new SimpleAction (\"quit\", null);\n"
"\t\t//quit_action.activate.connect (this.quit);\n"
"\t\tthis.add_action (quit_action);\n"
"\t}\n"
"\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.application\");\n"
"\t}\n"
"}\n"
"\n"
"//main function creates Application and runs it\n"
"int main (string[] args) {\n"
"\treturn new Application ().run (args);\n"
"}\n"
msgstr ""
"\n"
"//A window in the application\n"
"public class Window : Gtk.ApplicationWindow {\n"
"\tpublic Window (Application app) {\n"
"\t\tObject (application: app, title: \"Gtk.MessageDialog Example\");\n"
"\n"
"\t\tvar label = new Gtk.Label (\"This application goes boom!\");\n"
"\t\tthis.add (label);\n"
"\n"
"\t\tvar message_action = new SimpleAction (\"message\", null);\n"
"\t\tmessage_action.activate.connect (message);\n"
"\t\tthis.add_action (message_action);\n"
"\n"
"\t\tthis.set_default_size (400, 200);\n"
"\t\tthis.show_all ();\n"
"\t}\n"
"\n"
"\tvoid dialog_response (Gtk.Dialog dialog, int response_id) {\n"
"\t\tswitch (response_id) {\n"
"\t\t\tcase Gtk.ResponseType.OK:\n"
"\t\t\t\tprint (\"*boom*\\n\");\n"
"\t\t\t\tbreak;\n"
"\t\t\tcase Gtk.ResponseType.CANCEL:\n"
"\t\t\t\tprint (\"good choice\\n\");\n"
"\t\t\t\tbreak;\n"
"\t\t\tcase Gtk.ResponseType.DELETE_EVENT:\n"
"\t\t\t\tprint (\"dialog closed or cancelled\\n\");\n"
"\t\t\t\tbreak;\n"
"\t\t}\n"
"\t\t\tdialog.destroy();\n"
"\t}\n"
"\n"
"\tvoid message (SimpleAction simple, Variant? parameter) {\n"
"\t\tvar messagedialog = new Gtk.MessageDialog (this,\n"
"                            Gtk.DialogFlags.MODAL,\n"
"                            Gtk.MessageType.WARNING,\n"
"                            Gtk.ButtonsType.OK_CANCEL,\n"
"                            \"This action will cause the universe to stop existing.\");\n"
"\n"
"\t\tmessagedialog.response.connect (dialog_response);\n"
"\t\tmessagedialog.show ();\n"
"\t}\n"
"}\n"
"\n"
"//This is the Application\n"
"public class Application : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew Window (this);\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\tvar menu = new Menu ();\n"
"\t\tmenu.append (\"Message\", \"win.message\");\n"
"\t\tmenu.append (\"Quit\", \"app.quit\");\n"
"\t\tthis.app_menu = menu;\n"
"\n"
"\t\tvar quit_action = new SimpleAction (\"quit\", null);\n"
"\t\t//quit_action.activate.connect (this.quit);\n"
"\t\tthis.add_action (quit_action);\n"
"\t}\n"
"\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.application\");\n"
"\t}\n"
"}\n"
"\n"
"//main function creates Application and runs it\n"
"int main (string[] args) {\n"
"\treturn new Application ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/messagedialog.vala.page:31
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ResponseType.html\">Gtk."
"ResponseType</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ResponseType.html\">Gtk."
"ResponseType</link>"

#. (itstool) path: item/p
#: C/messagedialog.vala.page:32
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.MessageDialog.html\">Gtk."
"MessageDialog</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.MessageDialog.html\">Gtk."
"MessageDialog</link>"

#. (itstool) path: item/p
#: C/messagedialog.vala.page:33
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.DialogFlags.html\">Gtk."
"DialogFlags</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.DialogFlags.html\">Gtk."
"DialogFlags</link>"

#. (itstool) path: item/p
#: C/messagedialog.vala.page:34
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.MessageType.html\">Gtk."
"MessageType</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.MessageType.html\">Gtk."
"MessageType</link>"

#. (itstool) path: item/p
#: C/messagedialog.vala.page:35
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ButtonsType.html\">Gtk."
"ButtonsType</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ButtonsType.html\">Gtk."
"ButtonsType</link>"

#. (itstool) path: info/title
#: C/model-view-controller.py.page:9
msgctxt "text"
msgid "The Model/View/Controller design (Python)"
msgstr "모델/뷰/컨트롤러 설계(Python)"

#. (itstool) path: info/desc
#. (itstool) path: page/title
#: C/model-view-controller.py.page:14 C/model-view-controller.py.page:27
msgid "The Model/View/Controller design"
msgstr "MessageDialog"

#. (itstool) path: section/title
#: C/model-view-controller.py.page:32 C/properties.py.page:32
#: C/signals-callbacks.py.page:32
msgid "Overview"
msgstr "개요"

#. (itstool) path: section/p
#: C/model-view-controller.py.page:34
msgid ""
"Both the <link xref=\"treeview_simple_liststore.py\">TreeView</link> and the "
"<link xref=\"combobox.py\">ComboBox</link> widgets are built on the "
"<em>Model/View/Controller</em> design. The <em>Model</em> (an implementation "
"of <code>Gtk.TreeModel</code>, usually <code>Gtk.TreeStore</code> or "
"<code>Gtk.ListStore</code>) stores the data; the <em>View</em> (e.g. "
"<code>Gtk.TreeView</code>, <code>Gtk.ComboBox</code>, or <code>Gtk."
"ComboBoxText</code>) gets change notifications and displays the content of "
"the model. The <em>Controller</em>, finally, changes the state of the model "
"(via some methods in the model's implementation - such as <code>append()</"
"code> or <code>remove()</code>) and notifies the view of these changes (via "
"signals like <code>\"changed\"</code>)."
msgstr ""
"<link xref=\"treeview_simple_liststore.py\">TreeView</link> 와 <link xref="
"\"combobox.py\">ComboBox</link> 위젯은 <em>모델/뷰/컨트롤러</em> 디자인을 기"
"반으로 만들었습니다. <em>모델</em>(<code>Gtk.TreeModel</code> 구현체는 보통 "
"<code>Gtk.TreeStore</code> 또는 <code>Gtk.ListStore</code> 입니다)은 데이터"
"를 저장하고, <em>뷰</em>(예를 들어 <code>Gtk.TreeView</code>, <code>Gtk."
"ComboBox</code>, <code>Gtk.ComboBoxText</code>가 있습니다)는 바뀐 알림을 보여"
"주고 모델 내용을 보여줍니다. 마지막으로 <em>Controller</em>는 모델의 상태를 "
"(<code>append()</code> 또는 <code>remote()</code> 같은 모델 구현체의 일부 메"
"서드로) 바꾸며, 이 바꾼 내용의 뷰를 (<code>\"changed\"</code> 같은 시그널)로 "
"알립니다."

#. (itstool) path: section/title
#: C/model-view-controller.py.page:39
msgid "The Model"
msgstr "모델"

#. (itstool) path: section/p
#: C/model-view-controller.py.page:41
msgid ""
"The main difference between the two main implementations of <code>Gtk."
"TreeModel</code> is that <code>Gtk.ListStore</code> contains simple rows of "
"data without children, whereas <code>Gtk.TreeStore</code> also contains rows "
"of data, but each row may have child rows (which in turn can have child "
"rows, and so on)."
msgstr ""
"<code>Gtk.TreeModel</code>의 주요 구현체 두가지에 대한 차이점은 <code>Gtk."
"ListStore</code>에 하위 요소 없이 데이터 한 줄이 있지만, <code>Gtk."
"TreeStore</code>에는 데이터 한 줄이 들어있고, 각 줄에 하위 줄(이 하위 줄에 하"
"위 줄을 또 넣을 수 있습니다)이 있습니다."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:43
msgid ""
"The data in the Model can be retrieved or modified using the tree iter and "
"column index, or <code>Gtk.TreeIter</code>, or <code>Gtk.TreePath</code>."
msgstr ""
"모델의 데이터는 TreeIter나 열 인덱스, <code>Gtk.TreeIter</code>, <code>Gtk."
"TreePath</code>를 사용하여 가져오거나 수정할 수 있습니다."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:45
msgid ""
"As with Python's built-in list object you can use <code>len()</code> to get "
"the number of rows and use slices to retrieve or set values. Otherwise, the "
"method <code>append()</code> returns a <code>Gtk.TreeIter</code> instance, "
"which points to the location of the newly inserted row. You can also "
"retrieve a <code>Gtk.TreeIter</code> by calling <code>get_iter()</code>."
msgstr ""
"파이썬 내장 목록 객체에서 마찬가지로 값을 가져오거나 설정할 수많은 행 갯수를 "
"가져올 <code>len()</code>을 사용하거나 슬라이스를 사용할 수 있습니다. 아니면 "
"<code>append()</code> 메서드에서 새로 삽입한 행 위치를 가리키는 <code>Gtk."
"TreeIter</code> 인스턴스를 반환합니다. 또한 <code>get_iter()</code>를 호출하"
"여 <code>Gtk.TreeIter</code>를 가져올 수 있습니다."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:47
msgid ""
"As <code>Gtk.ListStore</code> contains only one level, i.e. nodes do not "
"have any child nodes, a path is essentially the index of the row you want to "
"access. In the case of <code>Gtk.TreeStore</code>, a path is a list of "
"indexes or a string. The string form is a list of numbers separated by a "
"colon. Each number refers to the offset at that level. Thus, the path <code>"
"\"0\"</code> refers to the root node and the path <code>\"2:4\"</code> "
"refers to the fifth child of the third node."
msgstr ""
"각각의 노드는 하위 노드를 둘 수 없어 <code>Gtk.ListStore</code>에 한 계층만 "
"넣을 수 있기에, 각 노드의 경로는 접근하고자 하는 행의 인덱스입니다. "
"<code>Gtk.TreeStore</code>의 경우 경로는 인덱스 목록 또는 문자열입니다. 문자"
"열로 된 모양새는 쉼표로 구분한 숫자 목록입니다. 각 숫자는 해당 레벨의 오프셋"
"입니다. 따라서 <code>\"0\"</code>번째 경로는 최상위(루트) 노드이며, <code>"
"\"2:4\"</code> 경로는 세번째 노드의 다섯번째 하위 노드입니다."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:49
msgid "Useful methods for a <code>Gtk.TreeModel</code>:"
msgstr "<code>Gtk.TreeModel</code>에 쓸만한 메서드:"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:51
msgid ""
"<code>get_iter(path)</code> returns a <code>Gtk.TreeIter</code> instance "
"pointing to <code>path</code>. This is expected to be a colon-separated list "
"of numbers, or a tuple. For example, the string <code>\"10:4:0\"</code> is "
"equivalent to the tuple <code>(10, 4, 0)</code>, as both would create a path "
"of depth 3 pointing to the 11th child of the root node, the 5th child of "
"that 11th child, and the 1st child of that 5th child."
msgstr ""
"<code>get_iter(path)</code>는 <code>path</code>를 가리키는 <code>Gtk."
"TreeIter</code> 인스턴스를 반환합니다. 콜론으로 구분한 숫자 목록 또는 튜플 값"
"을 넣습니다. 예를 들어 <code>\"10:4:0\"</code> 문자열은 <code>(10, 4, 0)</"
"code> 튜플과 동일하며, 두 값으로 루트로부터 11번째 떨어진 하위 노드를 가리키"
"도록 깊이 3의 경로를 만듭니다. 11번째의 하위 노드는 5번째 노드, 5번째 하위 노"
"드는 첫번째 노드입니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:52
msgid ""
"<code>iter_next(treeiter)</code> returns a <code>Gtk.TreeIter</code> "
"instance pointing the node following treeiter at the current level or "
"<code>None</code> if there is no next iter."
msgstr ""
"<code>iter_next(treeiter)</code>는 현재 레벨의 treeiter를 따르는 노드를 가리"
"키는 <code>Gtk.TreeIter</code> 인스턴스를 반환하거나 다음 iter가 없으면 "
"<code>Node</code> 합니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:53
msgid ""
"<code>iter_has_child(treeiter)</code> returns <code>True</code> if "
"<code>treeiter</code> has children, <code>False</code> otherwise."
msgstr ""
"<code>iter_has_child(treeiter)</code>는 <code>treeiter</code>에 하위 구성요소"
"가 있으면 <code>True</code>를, 그렇지 않으면 <code>False</code>를 반환합니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:54
msgid ""
"<code>iter_children(treeiter)</code> returns a <code>Gtk.TreeIter</code> "
"instance pointing to the first child of <code>treeiter</code> or <code>None</"
"code> if <code>treeiter</code> has no children."
msgstr ""
"<code>iter_children(treeiter)</code> <code>treeiter</code>의 첫 하위 노드를 "
"가리키는 <code>Gtk.TreeIter</code> 인스턴스를 반환합니다. <code>treeiter</"
"code>에 하위 노드가 없으면 <code>None</code>을 반환합니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:55
msgid ""
"<code>get_iter_first()</code> returns a <code>Gtk.TreeIter</code> instance "
"pointing to the first iterator in the tree (the one at the path <code>\"0\"</"
"code>) or <code>None</code> if the tree is empty."
msgstr ""
"<code>get_iter_first()</code>는 트리(경로의 <code>\"0\"</code>번째)의 첫 "
"Iterator를 가리키는 <code>Gtk.TreeIter</code> 인스턴스를 반환하며 트리가 비어"
"있을 경우는 <code>None</code>을 반환합니다."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:58
msgid "Useful methods for a <code>Gtk.ListStore</code>:"
msgstr "<code>Gtk.ListStore</code>에 쓸만한 메서드:"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:60
msgid ""
"<code>append(row)</code> appends a new row to this list store, where "
"<code>row</code> can be a list of values for each column; <code>row</code> "
"can also be omitted or <code>None</code>, and in that case an empty row will "
"be appended. The method returns a <code>Gtk.TreeIter</code> pointing to the "
"appended row."
msgstr ""
"<code>append(row)</code>는 리스트 스토어에 각각의 열에 대한 목록 값이 될 수 "
"있는 새 <code>row</code>를 붙입니다. <code>row</code> 값은 생략하거나 "
"<code>None</code> 값을 넣을 수 있으며, 어떨 때는 빈 row를 붙일 수 있습니다. "
"메서드에서는 붙인 row를 가리키는 <code>Gtk.TreeIter</code>를 반환합니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:61 C/model-view-controller.py.page:67
msgid ""
"<code>remove(iter)</code> removes <code>iter</code> from the <code>Gtk."
"ListStore</code>, and returns <code>True</code> if the iter is valid, and "
"<code>False</code> if the iter is not. After being removed, <code>iter</"
"code> is set to be the next valid row."
msgstr ""
"<code>remove(iter)</code>는 <code>Gtk.ListStore</code>의 <code>iter</code>를 "
"제거하며, iter 값이 유효하면 <code>True</code>를, 그렇지 않으면 <code>False</"
"code>를 반환합니다. 제거하고 나면 <code>iter</code>를 다음 유효 행이 되도록 "
"설정합니다."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:64
msgid "Useful methods for a <code>Gtk.TreeStore</code>:"
msgstr "<code>Gtk.TreeStore</code>에 쓸만한 메서드:"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:66
msgid ""
"<code>append(parent, row)</code> appends a new row to this tree store; "
"<code>parent</code> must be a valid Gtk.TreeIter. If parent is not "
"<code>None</code>, then it will append the new row after the last child of "
"parent, otherwise it will append a row to the top level; <code>row</code> "
"can be a list of values for each column, or it can be omitted or <code>None</"
"code>; in this latter case an empty row will be appended. The method returns "
"a <code>Gtk.TreeIter</code> pointing to the appended row."
msgstr ""
"<code>append(parent, row)</code>는 트리 스토어에 새 행을 붙입니다. "
"<code>parent</code>는 올바른 Gtk.TreeIter여야 합니다. 상위 요소가 "
"<code>None</code>이면, 상위 요소의 마지막 하위 요소 다음에 새 행을 붙이며, 상"
"위요소가 <code>None</code>이 아니면, 최상위 레벨에 행을 붙입니다. <code>row</"
"code>은 각 열에 대한 값 목록이거나, 생략하거나, <code>None</code>값일 수 있습"
"니다. 마지막의 경우 빈 행을 붙입니다. 메서드는 붙인 행을 가리키는 <code>Gtk."
"TreeIter</code>를 반환합니다."

#. (itstool) path: section/title
#: C/model-view-controller.py.page:73
msgid "The View: the TreeView case"
msgstr "뷰: TreeView의 경우"

#. (itstool) path: section/p
#: C/model-view-controller.py.page:75
msgid ""
"A Treeview shows the structure of children and parent items as a tree. See "
"for instance <link xref=\"treeview_treestore.py\">this example</link>."
msgstr ""
"트리뷰는 하위 구성 요소와 상위 항목을 트리로 보여줍니다. 예시를 보려면 <link "
"xref=\"treeview_treestore.py\">이 예제</link>를 참고하십시오."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:77
msgid ""
"The <code>Gtk.TreeViewColumn</code> is used to organize the vertical columns."
msgstr ""
"<code>Gtk.TreeViewColumn</code>는 수직 방향 열을 모아 보여줄 때 사용합니다."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:79
msgid "Useful methods for a <code>Gtk.TreeView</code>:"
msgstr "<code>Gtk.TreeView</code>에 쓸만한 메서드:"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:81
msgid ""
"<code>set_model(model)</code> sets the model for this tree view. If this "
"tree view already has a model set, it will remove it before setting the new "
"model. If model is <code>None</code>, then it will unset the old model."
msgstr ""
"<code>set_model(model)</code>은 이 트리뷰의 모델을 설정합니다. 이 트리뷰가 이"
"미 모델 세트을 들고 있다면, 새 모델을 설정하기 전에 제거랍니다. 모델이 "
"<code>None</code> 상태라면 이전 모델의 설정을 해제합니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:82
msgid ""
"<code>get_model()</code> returns the model this tree view is based on, "
"<code>None</code> if the model is unset."
msgstr ""
"<code>get_model()</code>은 이 트리 뷰의 기반 모델을 반환합니다. 모델이 없으"
"면 <code>None</code>을 반환합니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:83
msgid ""
"<code>append_column(column)</code> appends <code>column</code> to the list "
"of columns."
msgstr ""
"<code>append_column(column)</code>은 열 목록에 <code>column</code>을 추가합니"
"다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:84
msgid ""
"<code>get_selection()</code> gets the <code>Gtk.TreeSelection</code> "
"associated with this tree view."
msgstr ""
"<code>get_selection()</code>은 트리뷰 관련  <code>Gtk.TreeSelection</code>을 "
"가져옵니다."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:87
msgid "Useful methods for a <code>Gtk.TreeViewColumn</code>:"
msgstr "<code>Gtk.TreeViewColumn</code>에 쓸만한 메서드:"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:89
msgid ""
"<code>add_attribute(renderer, attribute, value)</code> adds an attribute "
"mapping to this column. <code>attribute</code> is the parameter on "
"<code>renderer</code> to be set from the <code>value</code>"
msgstr ""
"<code>add_attribute(renderer, attribute, value)</code>는 이 열에 속성 매핑을 "
"추가합니다. <code>attribute</code>는 <code>value</code>에서 설정할 "
"<code>renderer</code>의 매개변수입니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:90
msgid ""
"<code>pack_start(renderer, expand)</code> packs <code>renderer</code> into "
"the beginning of this column. If <code>expand</code> is <code>False</code>, "
"then <code>renderer</code> is allocated no more space than it needs. Any "
"unused space is divided evenly between cells for which expand is <code>True</"
"code>."
msgstr ""
"<code>pack_start(renderer, expand)</code>는 이 열의 시작 부분에 "
"<code>renderer</code>를 패킹합니다. <code>expand</code> 값이 <code>False</"
"code>면, <code>renderer</code>는 필요한 만큼보다 적은 공간을 할당합니다. 활용"
"하지 않은 공간은 expand 값이 <code>True</code>인 각각의 셀을 균등하게 나눕니"
"다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:91
msgid ""
"<code>pack_end(renderer, expand)</code> adds <code>renderer</code> to end of "
"this column. If <code>expand</code> is <code>False</code>, then "
"<code>renderer</code> is allocated no more space than it needs. Any unused "
"space is divided evenly between cells for which <code>expand</code> is "
"<code>True</code>."
msgstr ""
"<code>pack_end(renderer, expand)</code>는 열의 마지막 부분의 <code>renderer</"
"code>를 추가합니다. <code>expand</code>값이 <code>False</code>면, "
"<code>renderer</code>는 필요한 만큼보다 적은 공간을 할당합니다. 활용하지 않"
"은 공간은 expand 값이 <code>True</code>인 각각의 셀을 균등하게 나눕니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:92
msgid ""
"<code>set_sort_column_id(sort_column_id)</code> sets the column of the model "
"by which this column (of the view) should be sorted. This also makes the "
"column header clickable."
msgstr ""
"<code>set_sort_column_id(sort_column_id)</code>는 정렬할 (뷰의) 열 기준으로 "
"모델 열을 설정합니다. 열 헤더를 누를 수 있게 합니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:93
msgid ""
"<code>set_sort_indicator(setting)</code> sets whether a little arrow is "
"displayed in the column header; <code>setting</code> can either be "
"<code>True</code> (indicator is shown) or <code>False</code>."
msgstr ""
"<code>set_sort_indicator(setting)</code>는 열 헤더에 작은 화살표를 나타낼 지 "
"여부를 설정합니다. <code>setting</code> 값은 <code>True</code>(화살표가 나타"
"남) 또는 <code>False</code>일 수 있습니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:94
msgid ""
"<code>set_sort_order(order)</code> changes the order by which the column is "
"sorted; <code>order</code> can either be <code>Gtk.SortType.ASCENDING</code> "
"or <code>Gtk.SortType.DESCENDING</code>."
msgstr ""
"<code>set_sort_order(order)</code>는 어떤 열을 정렬할 지 정렬 기준을 바꿉니"
"다. <code>order</code> 값은 <code>Gtk.SortType.ASCENDING</code> 또는 "
"<code>Gtk.SortType.DESCENDING</code> 일 수 있습니다."

#. (itstool) path: section/title
#: C/model-view-controller.py.page:100
msgid "The View: the ComboBox case"
msgstr "뷰: ComboBox의 경우"

#. (itstool) path: section/p
#: C/model-view-controller.py.page:102
msgid ""
"A <code>Gtk.ComboBox</code> allows for the selection of an item from a "
"dropdown menu, see for instance <link xref=\"combobox.py\">this example</"
"link>. For a list of textual choices, one can also use the simpler <code>Gtk."
"ComboBoxText</code>. Both <code>Gtk.ComboBox</code> and <code>Gtk."
"ComboBoxText</code> can contain an entry."
msgstr ""
"<code>Gtk.ComboBox</code> 는 드롭 다운 메뉴의 항목 섹션을 허용합니다. 예시는 "
"<link xref=\"combobox.py\">이 예제</link>를 참고하십시오. 텍스트 방식의 목록"
"을 선택한다면 더 단순한 <code>Gtk.ComboBoxText</code>를 활용할 수 있습니다. "
"<code>Gtk.ComboBox</code> 와 <code>Gtk.ComboBoxText</code>에는 항목을 넣을 "
"수 있습니다."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:104
msgid "Useful methods for a <code>Gtk.ComboBox</code>:"
msgstr "<code>Gtk.ComboBox</code>에 쓸만한 메서드:"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:106
msgid ""
"The static method <code>new_with_entry()</code> creates a new empty "
"<code>Gtk.ComboBox</code> with an entry; the static method "
"<code>new_with_model(model)</code> creates a new one with the model "
"initialized to <code>model</code>; and the static method "
"<code>new_with_model_and_entry(model)</code> is a combination of the two."
msgstr ""
"<code>new_with_entry()</code> 정적 메서드에서는 항목으로 비어있는 새 "
"<code>Gtk.ComboBox</code> 를 만들며, <code>new_with_model(model)</code> 정적 "
"메서드에서는 <code>model</code>로 초기화 한 새 모델로 만듭니다. 그리고 "
"<code>new_with_model_and_entry(model)</code> 정적 메서드는 이 두가지 경우를 "
"모두 수행합니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:107
msgid ""
"<code>get_active_iter()</code> returns a <code>Gtk.TreeIter</code> pointing "
"to the current active item. If no active item exists, <code>None</code> is "
"returned."
msgstr ""
"<code>get_active_iter()</code>는 현재 활성 항목을 가리키는 <code>Gtk."
"TreeIter</code>를 반환합니다. 활성 항목이 없으면 <code>None</code>을 반환합니"
"다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:108
msgid ""
"<code>set_model(model)</code> sets the model used by this combo box to be "
"<code>model</code>, and it will unset a previously set model (if there is "
"any). If <code>model</code> is <code>None</code>, then it will unset the "
"model. Note that this function does not clear the cell renderers."
msgstr ""
"<code>set_model(model)</code> 는 콤보 상자의 모델을 <code>model</code>로 설정"
"하며, 이전에 설정한 모델(이 있다면) 설정을 해제합니다. <code>model</code> 값"
"이 <code>None</code>이면, 이미 있던 모델 설정을 해제합니다. 참고로 이 함수는 "
"셀 렌더러 자체를 지우지 않습니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:109
msgid ""
"<code>set_entry_text_column(text_column)</code> sets the model column which "
"this combo box should use to get strings from to be <code>text_column</"
"code>. The column <code>text_column</code> in the model of this combo box "
"must be of type <code>str</code> (this is only relevant if this combo box "
"has been created with the “has-entry” property set to True)."
msgstr ""
"<code>set_entry_text_column(text_column)</code>은 문자열을 가져올 콤보 상자 "
"모델 열을 <code>text_column</code>으로 설정합니다. 이 콤보 상자 모델의 "
"<code>text_column</code>은 <code>str</code> 형식이어야합니다(이 콤보 상자의 "
"\"has-entry\" 속성을 True로 설정했을 때만 해당합니다)."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:110
msgid ""
"<code>set_wrap_width(width)</code> sets the wrap width of this combo box to "
"be <code>width</code>. The wrap width is basically the preferred number of "
"columns when you want the popup to be layed out in a grid."
msgstr ""
"<code>set_wrap_width(width)</code> 함수는 콤보 박스의 줄바꿈 너비를 "
"<code>width</code>로 설정합니다. 줄바꿈 너비는 기본적으로 그리드에 팝업을 두"
"고자 할 때 원하는 열 갯수입니다."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:113
msgid "Useful methods for a <code>Gtk.ComboBoxText</code>:"
msgstr "<code>Gtk.ComboBoxText</code>에 쓸만한 메서드:"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:115
msgid ""
"The static method <code>new_with_entry()</code> creates a new empty "
"<code>Gtk.ComboBoxText</code> with an entry."
msgstr ""
"<code>new_with_entry()</code> 정적 메서드는 비어있는 새 <code>Gtk."
"ComboBoxText</code>를 항목을 넣어 만듭니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:116
msgid ""
"<code>append_text(text)</code> appends <code>text</code> to the list of "
"strings stored in this combo box."
msgstr ""
"<code>append_text(text)</code>는 콤보 박스에 저장한 문자열 목록에 "
"<code>text</code>를 추가합니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:117
msgid ""
"<code>get_active_text()</code> returns the currently active string in this "
"combo box, or <code>None</code> if none is selected. If this combo box "
"contains an entry, this function will return its contents (which will not "
"necessarily be an item from the list)."
msgstr ""
"<code>get_active_text()</code>는 콤보 박스의 현재 활성 문자열을 반환하거나 선"
"택한 항목이 없을 경우는 <code>None</code>을 반환합니다. 콤보 박스에 항목이 있"
"다면 이 함수는 항목의 내용을 반환합니다(꼭 목록 항목일 필요는 없습니다)."

#. (itstool) path: section/title
#: C/model-view-controller.py.page:123
msgid "The View: the Cellrenderers"
msgstr "뷰: CellRenderer의 경우"

#. (itstool) path: section/p
#: C/model-view-controller.py.page:125
msgid ""
"The View makes use of <code>Gtk.CellRenderer</code>s of various types to "
"draw the data."
msgstr ""
"다양한 형식의 <code>Gtk.CellRenderer</code>를 활용하여 데이터를 그리는 뷰입니"
"다."

#. (itstool) path: section/p
#: C/model-view-controller.py.page:127
msgid "Implementations of <code>Gtk.CellRenderer</code> and useful methods:"
msgstr "<code>Gtk.CellRenderer</code> 구현체와 쓸만한 메서드:"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:129
msgid "<code>Gtk.CellRendererText</code> - renders text in a cell"
msgstr "<code>Gtk.CellRendererText</code> - 셀에 텍스트를 보여줍니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:130
msgid ""
"<code>Gtk.CellRendererToggle</code> - renders a toggle or radio button in a "
"cell. Useful methods:"
msgstr ""
"<code>Gtk.CellRendererToggle</code> - 토글 단추 또는 라디오 단추를 셀에 보여"
"줍니다 쓸만한 메서드는:"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:132
msgid ""
"<code>set_active(setting)</code> - activates or deactivates a cell renderer"
msgstr ""
"<code>set_active(setting)</code> - 셀 렌더러를 활성 처리하거나 비활성 처리합"
"니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:133
msgid "<code>get_active()</code> - returns whether the cell renderer is active"
msgstr "<code>get_active()</code> - 셀 렌더러 활성화 혀부를 반환합니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:134
msgid ""
"<code>set_radio(radio)</code> - if radio is <code>True</code>, the cell "
"renderer renders a radio toggle (i.e. a toggle in a group of mutually-"
"exclusive toggles); if <code>False</code>, it renders a check toggle (a "
"standalone boolean option)"
msgstr ""
"<code>set_radio(radio)</code> - radio가 참이면 셀 렌더러는 라디오 토글을 나타"
"냅니다(예: 그룹 단위로 상호 배타적으로 토글). <code>False</code> 값을 설정하"
"면 확인 상자로 나타냅니다(단독 부울린 옵션)."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:135
msgid ""
"<code>get_radio()</code> - returns whether we are rendering radio toggles "
"rather than checkboxes."
msgstr ""
"<code>get_radio()</code> - 확인 상자 대신 라디오 토글을 보여줄 지 여부를 반환"
"합니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:138
msgid "<code>Gtk.CellRendererPixbuf</code> - renders an image in a cell"
msgstr "<code>Gtk.CellRendererPixbuf</code> - 셀 그림을 보여줍니다"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:139
msgid ""
"<code>Gtk.CellRendererCombo</code> - renders text in a cell; but while "
"<code>Gtk.CellRendererText</code> offers a simple entry to edit the text, "
"<code>Gtk.CellRendererCombo</code> offers a <code>Gtk.ComboBox</code> widget "
"to edit the text. It can be used with and without an associated Gtk.Entry "
"widget, depending on the value of the “has-entry” property."
msgstr ""
"<code>Gtk.CellRendererCombo</code> - 셀 텍스트를 보여줍니다만 <code>Gtk."
"CellRendererText</code>는 텍스트를 편집할 간단한 항목을 제공하지만 <code>Gtk."
"CellRendererCombo</code> 에는 텍스트를 편집할 <code>Gtk.ComboBox</code>  위젯"
"도 들어있습니다. 관련 Gtk.Entry 위젯을 넣든 아니든 사용할 수 있으며,  “has-"
"entry” 속성 값에 따라 다릅니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:140
msgid ""
"<code>Gtk.CellRendererProgress</code> - renders a numeric value as a "
"progress bar in a cell; it can display a text on top of the progress bar"
msgstr ""
"<code>Gtk.CellRendererProgress</code> - 셀에서 진행 표시줄처럼 숫자 값을 나타"
"냅니다. 진행 표시줄의 상단 텍스트로 표시할 수 있습니다"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:141
msgid ""
"<code>Gtk.CellRendererSpinner</code> - renders a spinning animation in a cell"
msgstr ""
"<code>Gtk.CellRendererSpinner</code> - 셀에서 스핀 움직임 동작을 나타냅니다"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:142
msgid "<code>Gtk.CellRendererSpin</code> - renders a spin button in a cell"
msgstr "<code>Gtk.CellRendererSpin</code> - 셀에서 스핀 단추를 나타냅니다"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:143
msgid ""
"<code>Gtk.CellRendererAccel</code> - renders a keyboard accelerator in a cell"
msgstr ""
"<code>Gtk.CellRendererAccel</code>- 셀에서 키보드 바로 가기 키를 나타냅니다"

#. (itstool) path: section/title
#: C/model-view-controller.py.page:149
msgid "The Controller: the Selection"
msgstr "컨트롤러: Selection"

#. (itstool) path: section/p
#: C/model-view-controller.py.page:151
msgid ""
"Most applications will need to not only deal with displaying data, but also "
"receiving input events from users. To do this, simply get a reference to a "
"selection object and connect to the <code>\"changed\"</code> signal."
msgstr ""
"대부분 프로글매에서는 데이터를 표시할 뿐만 아니라 사용자로부터 입력 이벤트를 "
"받아 처리합니다. 이 때, 간단하게 선택 객체 참조를 가져온 후 <code>\"changed"
"\"</code> 시그널에 연결합니다."

#. (itstool) path: section/code
#: C/model-view-controller.py.page:153
#, no-wrap
msgid ""
"\n"
"select = tree.get_selection()\n"
"select.connect(\"changed\", on_tree_selection_changed)\n"
msgstr ""
"\n"
"select = tree.get_selection()\n"
"select.connect(\"changed\", on_tree_selection_changed)\n"

#. (itstool) path: section/p
#: C/model-view-controller.py.page:158
msgid "Then to retrieve data for the row selected:"
msgstr "그 다음 선택한 행 데이터를 가져오려면:"

#. (itstool) path: section/code
#: C/model-view-controller.py.page:160
#, no-wrap
msgid ""
"\n"
"def on_tree_selection_changed(selection):\n"
"    model, treeiter = selection.get_selected()\n"
"    if treeiter != None:\n"
"        print \"You selected\", model[treeiter][0]\n"
msgstr ""
"\n"
"def on_tree_selection_changed(selection):\n"
"    model, treeiter = selection.get_selected()\n"
"    if treeiter != None:\n"
"        print \"You selected\", model[treeiter][0]\n"

#. (itstool) path: section/p
#: C/model-view-controller.py.page:167
msgid "Useful methods for a <code>Gtk.TreeSelection</code>:"
msgstr "<code>Gtk.TreeSelection</code>에 쓸만한 메서드:"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:170
msgid ""
"<code>set_mode(type)</code> sets the type of selection, where type is one of"
msgstr "<code>set_mode(type)</code>는 다음 중 선택 형식을 설정합니다"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:172
msgid "<code>Gtk.SelectionMode.NONE</code> - no selection is possible"
msgstr "<code>Gtk.SelectionMode.NONE</code> - 가능하면 아무것도 선택하지 않음"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:173
msgid ""
"<code>Gtk.SelectionMode.SINGLE</code> - zero or one element may be selected"
msgstr "<code>Gtk.SelectionMode.SINGLE</code> - 한 개 이하로 선택할 수 있음"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:174
msgid ""
"<code>Gtk.SelectionMode.BROWSE</code> - exactly one element is selected. In "
"some circumstances, such as initially or during a search operation, it’s "
"possible for no element to be selected. What is really enforced is that the "
"user can’t deselect a currently selected element except by selecting another "
"element."
msgstr ""
"<code>Gtk.SelectionMode.BROWSE</code> - 정확히 요소 한개만 선택합니다. 검색 "
"동작 초기 또는 진행 단계인 경우, 아무것도 선택하지 않을 수도 있습니다. 다른 "
"요소를 선택할 때를 제외하고는 현재 선택한 요소의 선택 상태를 해제할 수 없도"
"록 강제합니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:175
msgid ""
"<code>Gtk.SelectionMode.MULTIPLE</code> -any number of elements may be "
"selected. Clicks toggle the state of an item. The Ctrl key may be used to "
"enlarge the selection, and Shift key to select between the focus and the "
"child pointed to. Some widgets may also allow Click-drag to select a range "
"of elements."
msgstr ""
"<code>Gtk.SelectionMode.MULTIPLE</code> - 몇가지든 선택할 수 있습니다. 항목"
"을 누를 때마다 선택 상태를 바꿉니다. Ctrl키로 선택 갯수를 늘릴 수 있고, Shift"
"키로 현재 선택한 항목 부터 다음 선택한 하위 항목까지 쭉 선택할 수 있습니다. "
"일부 위젯에서는 눌러서 끄는 방식으로 일정 범위 항목을 선택할 수 있습니다."

#. (itstool) path: item/p
#: C/model-view-controller.py.page:178
msgid ""
"<code>get_selected()</code> returns a tuple <code>(model, treeiter)</code>, "
"where <code>model</code> is the current model and <code>treeiter</code> a "
"<code>Gtk.TreeIter</code> pointing to the currently selected row, or None if "
"no rows are selected. The method does not work if the selection mode is set "
"to <code>Gtk.SelectionMode.MULTIPLE</code>; in that case, use "
"<code>get_selected_rows()</code> instead, which Returns a list of <code>Gtk."
"TreePath</code> instances of all selected rows."
msgstr ""
"<code>get_selected()</code>는 현재 모델을 의미하는 <code>model</code>과 현재 "
"선택한 행을 가리키는 <code>Gtk.TreeIter</code>인 <code>treeiter</code> 또는 "
"아무 행도 선택하지 않았을 경우 None 값이 들어가는 <code>(model, treeiter)</"
"code> 튜플을 반환합니다. 이 메서드는 선택 모드를 <code>Gtk.SelectionMode."
"MULTIPLE</code>로 선택했을 때는 동작하지 않습니다. 이 경우, 선택한 행의 "
"<code>Gtk.TreePath</code> 안스턴스 목록을 반환하는 "
"<code>get_selected_rows()</code>를 대신 사용하십시오."

#. (itstool) path: section/title
#: C/model-view-controller.py.page:184 C/properties.py.page:57
#: C/signals-callbacks.py.page:46 C/strings.py.page:112
msgid "References"
msgstr "참고 자료"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:187 C/treeview_advanced_liststore.py.page:45
#: C/treeview_cellrenderertoggle.py.page:45
#: C/treeview_simple_liststore.py.page:46 C/treeview_treestore.py.page:45
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeModel.html"
"\">GtkTreeModel</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeModel.html"
"\">GtkTreeModel</link>"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:188 C/treeview_advanced_liststore.py.page:44
#: C/treeview_cellrenderertoggle.py.page:44
#: C/treeview_simple_liststore.py.page:45 C/treeview_treestore.py.page:44
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeView.html"
"\">GtkTreeView</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeView.html"
"\">GtkTreeView</link>"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:189 C/treeview_advanced_liststore.py.page:48
#: C/treeview_cellrenderertoggle.py.page:49
#: C/treeview_simple_liststore.py.page:49 C/treeview_treestore.py.page:48
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeViewColumn.html"
"\">GtkTreeViewColumn</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeViewColumn.html"
"\">GtkTreeViewColumn</link>"

#. (itstool) path: item/p
#: C/model-view-controller.py.page:191
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRenderer.html"
"\">GtkCellRenderer</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRenderer.html"
"\">GtkCellRenderer</link>"

#. (itstool) path: info/title
#: C/paned.c.page:8
msgctxt "text"
msgid "Paned (C)"
msgstr "Paned(C)"

#. (itstool) path: info/desc
#: C/paned.c.page:18 C/paned.js.page:18 C/paned.py.page:19 C/paned.vala.page:18
msgid "A widget with two adjustable panes"
msgstr "크기 조절 가능한 두 창을 가진 위젯입니다"

#. (itstool) path: page/title
#: C/paned.c.page:21 C/paned.js.page:21 C/paned.py.page:22 C/paned.vala.page:21
msgid "Paned"
msgstr "Paned"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/paned.c.page:22 C/paned.js.page:22 C/paned.py.page:23 C/paned.vala.page:22
msgctxt "_"
msgid "external ref='media/paned.png' md5='8c7e1df065395c9aafcd65036a293d8a'"
msgstr ""

#. (itstool) path: page/p
#: C/paned.c.page:23 C/paned.js.page:23 C/paned.py.page:24 C/paned.vala.page:23
msgid "Two images in two adjustable panes, horizontally aligned."
msgstr "크기 조절 가능한 두 창에 그림 둘을 두고 수평 방향으로 정렬합니다."

#. (itstool) path: section/code
#: C/paned.c.page:29
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *paned;\n"
"  GtkWidget *window;\n"
"  GtkWidget *image1;\n"
"  GtkWidget *image2;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Paned Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 450, 350);\n"
"\n"
"  paned = gtk_paned_new (GTK_ORIENTATION_HORIZONTAL);\n"
"  image1 = gtk_image_new_from_file (\"gnome-image.png\");\n"
"  image2 = gtk_image_new_from_file (\"tux.png\");\n"
"\n"
"  gtk_paned_add1 (GTK_PANED (paned), image1);\n"
"  gtk_paned_add2 (GTK_PANED (paned), image2);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), paned);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *paned;\n"
"  GtkWidget *window;\n"
"  GtkWidget *image1;\n"
"  GtkWidget *image2;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Paned Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 450, 350);\n"
"\n"
"  paned = gtk_paned_new (GTK_ORIENTATION_HORIZONTAL);\n"
"  image1 = gtk_image_new_from_file (\"gnome-image.png\");\n"
"  image2 = gtk_image_new_from_file (\"tux.png\");\n"
"\n"
"  gtk_paned_add1 (GTK_PANED (paned), image1);\n"
"  gtk_paned_add2 (GTK_PANED (paned), image2);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), paned);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/paned.c.page:36 C/paned.py.page:42
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkPaned.html"
"\">GtkPaned</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkPaned.html"
"\">GtkPaned</link>"

#. (itstool) path: item/p
#: C/paned.c.page:37 C/paned.js.page:37 C/paned.py.page:43 C/paned.vala.page:37
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/gtk3-Standard-"
"Enumerations.html#GtkOrientation\">Standard Enumerations</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/gtk3-Standard-"
"Enumerations.html#GtkOrientation\">표준 에뮬레이션</link>"

#. (itstool) path: info/title
#: C/paned.js.page:8
msgctxt "text"
msgid "Paned (JavaScript)"
msgstr "Paned (JavaScript)"

#. (itstool) path: section/code
#: C/paned.js.page:29
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const PanedExample = new Lang.Class ({\n"
"    Name: 'Paned Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application({ application_id: 'org.example.panedexample' });\n"
"\n"
"       // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"        // Create the application window\n"
"        this.window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                    window_position: Gtk.WindowPosition.CENTER,\n"
"                                                    title: \"Paned Window Example\",\n"
"                                                    default_width: 450,\n"
"                                                    default_height: 350,\n"
"                                                    border_width: 10 });\n"
"\n"
"        // a new widget with two adjustable panes,\n"
"        // one on the left and one on the right\n"
"        this.paned = Gtk.Paned.new(Gtk.Orientation.HORIZONTAL);\n"
"\n"
"        // two images\n"
"        this.image1 = new Gtk.Image();\n"
"        this.image1.set_from_file(\"gnome-image.png\");\n"
"        this.image2 = new Gtk.Image();\n"
"        this.image2.set_from_file(\"tux.png\");\n"
"\n"
"        // add the first image to the left pane\n"
"        this.paned.add1(this.image1);\n"
"        // add the second image to the right pane\n"
"        this.paned.add2(this.image2)\n"
"\n"
"        // add the panes to the window\n"
"        this.window.add(this.paned)\n"
"        this.window.show_all();\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new PanedExample();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const PanedExample = new Lang.Class ({\n"
"    Name: 'Paned Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application({ application_id: 'org.example.panedexample' });\n"
"\n"
"       // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"        // Create the application window\n"
"        this.window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                    window_position: Gtk.WindowPosition.CENTER,\n"
"                                                    title: \"Paned Window Example\",\n"
"                                                    default_width: 450,\n"
"                                                    default_height: 350,\n"
"                                                    border_width: 10 });\n"
"\n"
"        // a new widget with two adjustable panes,\n"
"        // one on the left and one on the right\n"
"        this.paned = Gtk.Paned.new(Gtk.Orientation.HORIZONTAL);\n"
"\n"
"        // two images\n"
"        this.image1 = new Gtk.Image();\n"
"        this.image1.set_from_file(\"gnome-image.png\");\n"
"        this.image2 = new Gtk.Image();\n"
"        this.image2.set_from_file(\"tux.png\");\n"
"\n"
"        // add the first image to the left pane\n"
"        this.paned.add1(this.image1);\n"
"        // add the second image to the right pane\n"
"        this.paned.add2(this.image2)\n"
"\n"
"        // add the panes to the window\n"
"        this.window.add(this.paned)\n"
"        this.window.show_all();\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new PanedExample();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/paned.js.page:36
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Paned.html"
"\">GtkPaned</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Paned.html"
"\">GtkPaned</link>"

#. (itstool) path: item/p
#: C/paned.js.page:38 C/scrolledwindow.js.page:38
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Image.html"
"\">GtkImage</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Image.html"
"\">GtkImage</link>"

#. (itstool) path: info/title
#: C/paned.py.page:8
msgctxt "text"
msgid "Paned (Python)"
msgstr "Paned (Python)"

#. (itstool) path: section/code
#: C/paned.py.page:30
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Paned Example\", application=app)\n"
"        self.set_default_size(450, 350)\n"
"\n"
"        # a new widget with two adjustable panes,\n"
"        # one on the left and one on the right\n"
"        paned = Gtk.Paned.new(Gtk.Orientation.HORIZONTAL)\n"
"\n"
"        # two images\n"
"        image1 = Gtk.Image()\n"
"        image1.set_from_file(\"gnome-image.png\")\n"
"        image2 = Gtk.Image()\n"
"        image2.set_from_file(\"tux.png\")\n"
"\n"
"        # add the first image to the left pane\n"
"        paned.add1(image1)\n"
"        # add the second image to the right pane\n"
"        paned.add2(image2)\n"
"\n"
"        # add the panes to the window\n"
"        self.add(paned)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Paned Example\", application=app)\n"
"        self.set_default_size(450, 350)\n"
"\n"
"        # a new widget with two adjustable panes,\n"
"        # one on the left and one on the right\n"
"        paned = Gtk.Paned.new(Gtk.Orientation.HORIZONTAL)\n"
"\n"
"        # two images\n"
"        image1 = Gtk.Image()\n"
"        image1.set_from_file(\"gnome-image.png\")\n"
"        image2 = Gtk.Image()\n"
"        image2.set_from_file(\"tux.png\")\n"
"\n"
"        # add the first image to the left pane\n"
"        paned.add1(image1)\n"
"        # add the second image to the right pane\n"
"        paned.add2(image2)\n"
"\n"
"        # add the panes to the window\n"
"        self.add(paned)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/paned.py.page:34
msgid "Useful methods for a Paned widget"
msgstr "Paned 위젯에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/paned.py.page:35
msgid ""
"To have two vertically aligned panes, use <code>Gtk.Orientation.VERTICAL</"
"code> instead of <code>Gtk.Orientation.HORIZONTAL</code>. The method "
"<code>add1(widget1)</code> will add the <code>widget1</code> to the top "
"pane, and <code>add2(widget2)</code> will add the <code>widget2</code> to "
"the bottom pane."
msgstr ""
"수직 처리 창을 두려면 <code>Gtk.Orientation.HORIZONTAL</code> 대신 <code>Gtk."
"Orientation.VERTICAL</code>를 사용하십시오. <code>add1(widget1)</code> 메서드"
"는, 최상단 창에 <code>widget1</code>를 추가하며, <code>add2(widget2)</code> "
"메서드는 하단 창에 <code>widget2</code>를 추가합니다."

#. (itstool) path: info/title
#: C/paned.vala.page:8
msgctxt "text"
msgid "Paned (Vala)"
msgstr "Paned (Vala)"

#. (itstool) path: section/code
#: C/paned.vala.page:29
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"Paned Example\";\n"
"\t\twindow.set_default_size (450,350);\n"
"\n"
"\t\t// a new widget with two adjustable panes,\n"
"\t\t// one on the left and one on the right\n"
"\t\tvar paned = new Gtk.Paned (Gtk.Orientation.HORIZONTAL);\n"
"\n"
"\t\t/* two images */\n"
"\t\tvar image1 = new Gtk.Image ();\n"
"\t\timage1.set_from_file (\"gnome-image.png\");\n"
"\t\tvar image2 = new Gtk.Image ();\n"
"\t\timage2.set_from_file (\"tux.png\");\n"
"\n"
"\t\t/* add the first image to the left pane */\n"
"\t\tpaned.add1 (image1);\n"
"\n"
"\t\t/* add the second image to the right pane */\n"
"\t\tpaned.add2 (image2);\n"
"\n"
"\t\t/* add the panes to the window */\n"
"\t\twindow.add (paned);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"Paned Example\";\n"
"\t\twindow.set_default_size (450,350);\n"
"\n"
"\t\t// a new widget with two adjustable panes,\n"
"\t\t// one on the left and one on the right\n"
"\t\tvar paned = new Gtk.Paned (Gtk.Orientation.HORIZONTAL);\n"
"\n"
"\t\t/* two images */\n"
"\t\tvar image1 = new Gtk.Image ();\n"
"\t\timage1.set_from_file (\"gnome-image.png\");\n"
"\t\tvar image2 = new Gtk.Image ();\n"
"\t\timage2.set_from_file (\"tux.png\");\n"
"\n"
"\t\t/* add the first image to the left pane */\n"
"\t\tpaned.add1 (image1);\n"
"\n"
"\t\t/* add the second image to the right pane */\n"
"\t\tpaned.add2 (image2);\n"
"\n"
"\t\t/* add the panes to the window */\n"
"\t\twindow.add (paned);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/paned.vala.page:36
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Paned.html\">GtkPaned</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Paned.html\">GtkPaned</link>"

#. (itstool) path: info/title
#: C/photo-wall.c.page:7
msgctxt "text"
msgid "Photo wall (C)"
msgstr "Photo wall(C)"

#. (itstool) path: info/desc
#: C/photo-wall.c.page:10
msgid "A Clutter image viewer"
msgstr "클러터 그림 보기"

#. (itstool) path: credit/name
#: C/photo-wall.c.page:14
msgid "Chris Kühl"
msgstr "Chris Kühl"

#. (itstool) path: page/title
#: C/photo-wall.c.page:28
msgid "Photo wall"
msgstr "포토 월"

#. (itstool) path: synopsis/p
#: C/photo-wall.c.page:31
msgid ""
"For this example we will build a simple image viewer using Clutter. You will "
"learn:"
msgstr ""
"이 예제에서는 클러터로 간단한 그림 보기 프로그램을 만들겠습니다. 다음을 익히"
"는 과정입니다:"

#. (itstool) path: item/p
#: C/photo-wall.c.page:33
msgid "How to size and position <code>ClutterActor</code>s"
msgstr "<code>ClutterActor</code>에서 크기 위치 설정하는 방법"

#. (itstool) path: item/p
#: C/photo-wall.c.page:34
msgid "How to place an image in a <code>ClutterActor</code>"
msgstr "<code>ClutterActor</code>에서 그림 배치하는 방법"

#. (itstool) path: item/p
#: C/photo-wall.c.page:35
msgid "How to do simple transitions using Clutter's animation framework"
msgstr "클러터 애니메이션 프레임워크로 간단하게 트랜지션 처리하는 방법"

#. (itstool) path: item/p
#: C/photo-wall.c.page:36
msgid "How to make <code>ClutterActor</code>s respond to mouse events"
msgstr "마우스 이벤트에 대해 <code>ClutterActor</code>에서 응답하는 방법"

#. (itstool) path: item/p
#: C/photo-wall.c.page:37
msgid "How to get file names from a directory"
msgstr "디렉터리에서 파일 이름 가져오기"

#. (itstool) path: section/title
#: C/photo-wall.c.page:42 C/record-collection.js.page:40
msgid "Introduction"
msgstr "도입부"

#. (itstool) path: section/p
#: C/photo-wall.c.page:43
msgid ""
"Clutter is a library for creating dynamic user interfaces using OpenGL for "
"hardware acceleration. This example demonstrates a small, but central, part "
"of the Clutter library to create a simple but attractive image viewing "
"program."
msgstr ""
"클러터는 하드웨어 가속 OpenGL을 활용하여 동적 사용자 인터페이스를 만드는 라이"
"브러리입니다. 이 예제는 작은 일부를 보여주지만, 중심적으로는, 간단하지만 매력"
"적인 그림 보기 프로그램을 만드는 클러터 라이브러리의 일부 동작을 시연합니다."

#. (itstool) path: section/p
#: C/photo-wall.c.page:46
msgid ""
"To help us reach our goal we will be utilising a few other common pieces of "
"GLib as well. Most importantly, we'll use one <code>GPtrArray</code>, a "
"dynamic array of pointers, to hold the file path names. We will also use "
"<code>GDir</code>, a utility for working with directories, to access our "
"image directory and gather file paths."
msgstr ""
"목적을 위해 GLib 같은 일부 일반적인 부분도 마찬가지로 활용합니다. 상당히 중요"
"하게 <code>GPtrArray</code> 동적 포인터 배열을 활용하여 파일 경로 이름을 넣어"
"두겠습니다. 또한 디렉터리를 다루는 <code>GDir</code>로 그림 디렉터리에 접근하"
"고 경로를 가져올 때 활용하겠습니다."

#. (itstool) path: item/p
#: C/photo-wall.c.page:59
msgid ""
"Choose <gui>GTK+ (simple)</gui> from the <gui>C</gui> tab, click "
"<gui>Continue</gui>, and fill out your details on the next few pages. Use "
"<file>photo-wall</file> as project name and directory."
msgstr ""
"<gui>C</gui> 탭에서 <gui>GTK+ (단순)</gui>를 선택하고, <gui>계속</gui>을 누"
"른 다음, 나타난 페이지에서 몇가지 자세한 내용을 입력하십시오. 프로젝트 이름"
"과 디렉터리에 <file>photo-wall</file>을 입력하십시오."

#. (itstool) path: item/p
#: C/photo-wall.c.page:62
msgid ""
"Make sure that <gui>Use GtkBuilder for user interface</gui> is disabled as "
"we will create the UI manually in this tutorial. Check the <link xref="
"\"guitar-tuner.c\">Guitar-Tuner</link> tutorial using the interface builder."
msgstr ""
"앞서 따라하기 지침을 통해 사용자 인터페이스를 직접 만들 예정이므로 <gui>사용"
"자 인터페이스에 GtkBuilder 사용</gui> 설정을 껐는지 확인하십시오. 인터페이스 "
"빌더 사용법을 알아보려면 <link xref=\"guitar-tuner.c\">기타 조율 프로그램</"
"link> 따라하기 지침서를 확인하십시오."

#. (itstool) path: item/p
#: C/photo-wall.c.page:67
msgid ""
"Enable <gui>Configure external packages</gui>. On the next page, select "
"<em>clutter-1.0</em> from the list to include the Clutter library in your "
"project."
msgstr ""
"<gui>외부 패키지 설정</gui>을 <gui>켬</gui>으로 설정했는지 확인하십시오. 다"
"음 페이지의 목록에서 <em>gstreamer-0.10</em>를 선택하여 프로젝트에 지스트리"
"머 라이브러리를 넣으십시오."

#. (itstool) path: section/title
#: C/photo-wall.c.page:80
msgid "A look at Photo Wall"
msgstr "포토 월 살펴보기"

#. (itstool) path: section/p
#: C/photo-wall.c.page:81
msgid "Our image viewer presents the user with a wall of images."
msgstr "그립 보기 프로그램에서는 그림 벽으로 사용자를 나타냅니다."

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/photo-wall.c.page:84
msgctxt "_"
msgid ""
"external ref='media/photo-wall.png' md5='f19590d97e8ec029cda3c44b769c11cd'"
msgstr ""

#. (itstool) path: section/p
#: C/photo-wall.c.page:85
msgid ""
"When an image is clicked, it is animated to fill the viewing area. When the "
"image having focus is clicked it is returned to its original position using "
"an animation with the same duration of 500 milliseconds."
msgstr ""
"그림을 누르면 보기 영역을 채울 때 움직입니다. 포커스를 획득한 그림이 눌린 상"
"태면, 500 밀리초 동안 움직임을 활용하여 원래 위치로 돌아옵니다."

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/photo-wall.c.page:87
msgctxt "_"
msgid ""
"external ref='media/photo-wall-focused.png' "
"md5='9f1ceecf3a28c1e468597b093a10cbae'"
msgstr ""

#. (itstool) path: section/title
#: C/photo-wall.c.page:91
msgid "Initial setup"
msgstr "초기 설정"

#. (itstool) path: section/p
#: C/photo-wall.c.page:92
msgid ""
"The following code segment contains many of the defines and variables we "
"will be using in the following sections. Use this as a reference for later "
"sections. Copy this code to the beginning of <file>src/main.c</file>:"
msgstr ""
"다음 코드 일부에는 다음 섹션에서 활용할 정의와 변수 대부분이 들어갑니다. 이 "
"부분을 다음 섹션 참고 용도로 활용하십시오. 이 코드를 <file>src/main.c</file> "
"시작 부분에 복사해두십시오:"

#. (itstool) path: section/code
#: C/photo-wall.c.page:95
#, no-wrap
msgid ""
"\n"
"#include &lt;gdk-pixbuf/gdk-pixbuf.h&gt;\n"
"#include &lt;clutter/clutter.h&gt;\n"
"\n"
"#define STAGE_WIDTH  800\n"
"#define STAGE_HEIGHT 600\n"
"\n"
"#define THUMBNAIL_SIZE 200\n"
"#define ROW_COUNT (STAGE_HEIGHT / THUMBNAIL_SIZE)\n"
"#define COL_COUNT (STAGE_WIDTH  / THUMBNAIL_SIZE)\n"
"#define THUMBNAIL_COUNT (ROW_COUNT * COL_COUNT)\n"
"\n"
"#define ANIMATION_DURATION_MS 500\n"
"\n"
"#define IMAGE_DIR_PATH \"./berlin_images/\"\n"
"\n"
"static GPtrArray *img_paths;\n"
"\n"
"static ClutterPoint unfocused_pos;\n"
"\n"
msgstr ""
"\n"
"#include &lt;gdk-pixbuf/gdk-pixbuf.h&gt;\n"
"#include &lt;clutter/clutter.h&gt;\n"
"\n"
"#define STAGE_WIDTH  800\n"
"#define STAGE_HEIGHT 600\n"
"\n"
"#define THUMBNAIL_SIZE 200\n"
"#define ROW_COUNT (STAGE_HEIGHT / THUMBNAIL_SIZE)\n"
"#define COL_COUNT (STAGE_WIDTH  / THUMBNAIL_SIZE)\n"
"#define THUMBNAIL_COUNT (ROW_COUNT * COL_COUNT)\n"
"\n"
"#define ANIMATION_DURATION_MS 500\n"
"\n"
"#define IMAGE_DIR_PATH \"./berlin_images/\"\n"
"\n"
"static GPtrArray *img_paths;\n"
"\n"
"static ClutterPoint unfocused_pos;\n"
"\n"

#. (itstool) path: section/title
#: C/photo-wall.c.page:119
msgid "Jumping into the code"
msgstr "코드로 넘어가기"

#. (itstool) path: section/p
#: C/photo-wall.c.page:120
msgid ""
"We will start by taking a look at the <code>main()</code> function as a "
"whole. Then we'll discuss the other code sections in detail. Change the "
"<file>src/main.c</file> to contain this <code>main()</code> function. You "
"can delete the <code>create_window()</code> function as we don't need it in "
"this example."
msgstr ""
"<code>main()</code> 함수를 전체로서 먼저 살펴보겠습니다. 그 다음 다른 코드 부"
"분을 자세하게 살펴보면서 이야기하겠습니다. <file>src/main.c</file> 파일을 이 "
"<code>main()</code> 함수 코드가 들어가도록 바꾸십시오. 이 예제를 실행할 때 "
"<code>create_window()</code> 함수는 필요 없으므로 삭제할 수 있습니다."

#. (itstool) path: section/code
#: C/photo-wall.c.page:123
#, no-wrap
msgid ""
"\n"
"int\n"
"main(int argc, char *argv[])\n"
"{\n"
"    ClutterColor stage_color = { 16, 16, 16, 255 };\n"
"    ClutterActor *stage = NULL;\n"
"\n"
"    if (clutter_init (&amp;argc, &amp;argv) != CLUTTER_INIT_SUCCESS)\n"
"        return 1;\n"
"\n"
"    stage = clutter_stage_new();\n"
"    clutter_actor_set_size(stage, STAGE_WIDTH, STAGE_HEIGHT);\n"
"    clutter_actor_set_background_color(stage, &amp;stage_color);\n"
"    clutter_stage_set_title(CLUTTER_STAGE (stage), \"Photo Wall\");\n"
"    g_signal_connect(stage, \"destroy\", G_CALLBACK(clutter_main_quit), NULL);\n"
"\n"
"    load_image_path_names();\n"
"\n"
"    guint row = 0;\n"
"    guint col = 0;\n"
"    for(row=0; row &lt; ROW_COUNT; ++row)\n"
"    {\n"
"        for(col=0; col &lt; COL_COUNT; ++col)\n"
"        {\n"
"            const char *img_path = g_ptr_array_index(img_paths, (row * COL_COUNT) + col);\n"
"            GdkPixbuf *pixbuf = gdk_pixbuf_new_from_file_at_size(img_path, STAGE_HEIGHT, STAGE_HEIGHT, NULL);\n"
"            ClutterContent *image = clutter_image_new ();\n"
"            ClutterActor *actor = clutter_actor_new ();\n"
"\n"
"            if (pixbuf != NULL)\n"
"            {\n"
"                clutter_image_set_data(CLUTTER_IMAGE(image),\n"
"                                       gdk_pixbuf_get_pixels(pixbuf),\n"
"                                       gdk_pixbuf_get_has_alpha(pixbuf)\n"
"                                           ? COGL_PIXEL_FORMAT_RGBA_8888\n"
"                                           : COGL_PIXEL_FORMAT_RGB_888,\n"
"                                       gdk_pixbuf_get_width(pixbuf),\n"
"                                       gdk_pixbuf_get_height(pixbuf),\n"
"                                       gdk_pixbuf_get_rowstride(pixbuf),\n"
"                                       NULL);\n"
"            }\n"
"\n"
"            clutter_actor_set_content(actor, image);\n"
"            g_object_unref(image);\n"
"            g_object_unref(pixbuf);\n"
"\n"
"            initialize_actor(actor, row, col);\n"
"            clutter_actor_add_child(stage, actor);\n"
"        }\n"
"    }\n"
"\n"
"    /* Show the stage. */\n"
"    clutter_actor_show(stage);\n"
"\n"
"    /* Start the clutter main loop. */\n"
"    clutter_main();\n"
"\n"
"    g_ptr_array_unref(img_paths);\n"
"\n"
"    return 0;\n"
"}"
msgstr ""
"\n"
"int\n"
"main(int argc, char *argv[])\n"
"{\n"
"    ClutterColor stage_color = { 16, 16, 16, 255 };\n"
"    ClutterActor *stage = NULL;\n"
"\n"
"    if (clutter_init (&amp;argc, &amp;argv) != CLUTTER_INIT_SUCCESS)\n"
"        return 1;\n"
"\n"
"    stage = clutter_stage_new();\n"
"    clutter_actor_set_size(stage, STAGE_WIDTH, STAGE_HEIGHT);\n"
"    clutter_actor_set_background_color(stage, &amp;stage_color);\n"
"    clutter_stage_set_title(CLUTTER_STAGE (stage), \"Photo Wall\");\n"
"    g_signal_connect(stage, \"destroy\", G_CALLBACK(clutter_main_quit), NULL);\n"
"\n"
"    load_image_path_names();\n"
"\n"
"    guint row = 0;\n"
"    guint col = 0;\n"
"    for(row=0; row &lt; ROW_COUNT; ++row)\n"
"    {\n"
"        for(col=0; col &lt; COL_COUNT; ++col)\n"
"        {\n"
"            const char *img_path = g_ptr_array_index(img_paths, (row * COL_COUNT) + col);\n"
"            GdkPixbuf *pixbuf = gdk_pixbuf_new_from_file_at_size(img_path, STAGE_HEIGHT, STAGE_HEIGHT, NULL);\n"
"            ClutterContent *image = clutter_image_new ();\n"
"            ClutterActor *actor = clutter_actor_new ();\n"
"\n"
"            if (pixbuf != NULL)\n"
"            {\n"
"                clutter_image_set_data(CLUTTER_IMAGE(image),\n"
"                                       gdk_pixbuf_get_pixels(pixbuf),\n"
"                                       gdk_pixbuf_get_has_alpha(pixbuf)\n"
"                                           ? COGL_PIXEL_FORMAT_RGBA_8888\n"
"                                           : COGL_PIXEL_FORMAT_RGB_888,\n"
"                                       gdk_pixbuf_get_width(pixbuf),\n"
"                                       gdk_pixbuf_get_height(pixbuf),\n"
"                                       gdk_pixbuf_get_rowstride(pixbuf),\n"
"                                       NULL);\n"
"            }\n"
"\n"
"            clutter_actor_set_content(actor, image);\n"
"            g_object_unref(image);\n"
"            g_object_unref(pixbuf);\n"
"\n"
"            initialize_actor(actor, row, col);\n"
"            clutter_actor_add_child(stage, actor);\n"
"        }\n"
"    }\n"
"\n"
"    /* Show the stage. */\n"
"    clutter_actor_show(stage);\n"
"\n"
"    /* Start the clutter main loop. */\n"
"    clutter_main();\n"
"\n"
"    g_ptr_array_unref(img_paths);\n"
"\n"
"    return 0;\n"
"}"

#. (itstool) path: item/p
#: C/photo-wall.c.page:185
msgid ""
"Line 4: <code>ClutterColor</code> is defined by setting the red, green, blue "
"and transparency (alpha) values. The values range from 0-255. For "
"transparency a value of 255 is opaque."
msgstr ""
"4번째 줄: <code>ClutterColor</code>는 적색, 녹색, 청색, 투명도(alpha) 값을 설"
"정하여 정의합니다. 값 범위는 0부터 255까지입니다. 255는 투명 수치가 가장 낮습"
"니다."

#. (itstool) path: item/p
#: C/photo-wall.c.page:186
msgid ""
"Line 7: You must initialize Clutter. If you forget to do this, you will get "
"very strange errors. Be warned."
msgstr ""
"7번째 줄: 클러터를 초기화해야 합니다. 까먹었다면 이상한 오류가 납니다. 유의하"
"세요."

#. (itstool) path: item/p
#: C/photo-wall.c.page:187
msgid ""
"Lines 10‒14: Here we create a new <code>ClutterStage</code> . We then set "
"the size using the defines from the previous section and the address of the "
"<code>ClutterColor</code> we just defined."
msgstr ""
"10~14번째 줄: 여기서 새 <code>ClutterStage</code>를 만듭니다. 앞 부분에서 정"
"의한 코드로 사이즈를 설정하고 방금 정의한 <code>ClutterColor</code> 의 위치"
"를 정의합니다."

#. (itstool) path: note/p
#: C/photo-wall.c.page:188
msgid ""
"A <code>ClutterStage</code> is the top-level <code>ClutterActor</code> onto "
"which other <code>ClutterActor</code>s are placed."
msgstr ""
"<code>ClutterStage</code>는 다른 <code>ClutterActor</code>가 놓인 곳의 최상"
"위 <code>ClutterActor</code> 입니다."

#. (itstool) path: item/p
#: C/photo-wall.c.page:190
msgid ""
"Line 16: Here we call our function for getting the image file paths. We'll "
"look at this in a bit."
msgstr ""
"16번째 줄: 여기서 그림 파일 경로를 가져오는 함수를 호출합니다. 이 부분을 조"
"금 살펴보겠습니다."

#. (itstool) path: item/p
#: C/photo-wall.c.page:191
msgid ""
"Lines 18‒49: This is where we set up the <code>ClutterActor</code>s, load "
"the images and place them into their spot in the image wall. We will look at "
"this in detail in the next section."
msgstr ""
"18~49번째 줄: 이 부분은 그림을 불러오고 그림 벽 부분에 두는 "
"<code>ClutterActor</code>을 설정하는 부분입니다. 다음 섹션에서 자세하게 이 부"
"분을 살펴보겠습니다."

#. (itstool) path: item/p
#: C/photo-wall.c.page:192
msgid ""
"Line 52: Show the stage and <em>all its children</em>, meaning our images."
msgstr "52번째 줄: 그림의 스테이지와 <em>하위 요소</em>를 나타냅니다."

#. (itstool) path: item/p
#: C/photo-wall.c.page:193
msgid "Line 55: Start the Clutter main loop."
msgstr "55번째 줄: 클러터 메인 루프를 시작합니다."

#. (itstool) path: section/title
#: C/photo-wall.c.page:198
msgid "Setting up our image actors"
msgstr "그림 액터 구성"

#. (itstool) path: note/p
#: C/photo-wall.c.page:199
msgid ""
"In Clutter, an actor is the most basic visual element. Basically, everything "
"you see is an actor."
msgstr ""
"클러터에서 액터는 사장 기본적인 시각 구성 요소입니다. 근본적으로 여러분이 보"
"는 모든 구성 요소는 액터입니다."

#. (itstool) path: section/p
#: C/photo-wall.c.page:200
msgid ""
"In this section, we are going to take a closer look at the loop used for "
"setting up the <code>ClutterActor</code>s that will display our images."
msgstr ""
"이 부분에서는 그림을 나타내는 <code>ClutterActor</code>를 설정하는 루프를 더 "
"자세하게 살펴보겠습니다."

#. (itstool) path: section/code
#: C/photo-wall.c.page:203
#, no-wrap
msgid ""
"\n"
"guint row = 0;\n"
"guint col = 0;\n"
"for(row=0; row &lt; ROW_COUNT; ++row)\n"
"{\n"
"    for(col=0; col &lt; COL_COUNT; ++col)\n"
"    {\n"
"        const char *img_path = g_ptr_array_index(img_paths, (row * COL_COUNT) + col);\n"
"        GdkPixbuf *pixbuf = gdk_pixbuf_new_from_file_at_size(img_path, STAGE_HEIGHT, STAGE_HEIGHT, NULL);\n"
"        ClutterContent *image = clutter_image_new ();\n"
"        ClutterActor *actor = clutter_actor_new ();\n"
"\n"
"        if (pixbuf != NULL)\n"
"        {\n"
"            clutter_image_set_data(CLUTTER_IMAGE(image),\n"
"                                   gdk_pixbuf_get_pixels(pixbuf),\n"
"                                   gdk_pixbuf_get_has_alpha(pixbuf)\n"
"                                       ? COGL_PIXEL_FORMAT_RGBA_8888\n"
"                                       : COGL_PIXEL_FORMAT_RGB_888,\n"
"                                   gdk_pixbuf_get_width(pixbuf),\n"
"                                   gdk_pixbuf_get_height(pixbuf),\n"
"                                   gdk_pixbuf_get_rowstride(pixbuf),\n"
"                                   NULL);\n"
"        }\n"
"\n"
"        clutter_actor_set_content(actor, image);\n"
"        g_object_unref(image);\n"
"        g_object_unref(pixbuf);\n"
"\n"
"        initialize_actor(actor, row, col);\n"
"        clutter_actor_add_child(stage, actor);\n"
"    }\n"
"}\n"
"\n"
msgstr ""
"\n"
"guint row = 0;\n"
"guint col = 0;\n"
"for(row=0; row &lt; ROW_COUNT; ++row)\n"
"{\n"
"    for(col=0; col &lt; COL_COUNT; ++col)\n"
"    {\n"
"        const char *img_path = g_ptr_array_index(img_paths, (row * COL_COUNT) + col);\n"
"        GdkPixbuf *pixbuf = gdk_pixbuf_new_from_file_at_size(img_path, STAGE_HEIGHT, STAGE_HEIGHT, NULL);\n"
"        ClutterContent *image = clutter_image_new ();\n"
"        ClutterActor *actor = clutter_actor_new ();\n"
"\n"
"        if (pixbuf != NULL)\n"
"        {\n"
"            clutter_image_set_data(CLUTTER_IMAGE(image),\n"
"                                   gdk_pixbuf_get_pixels(pixbuf),\n"
"                                   gdk_pixbuf_get_has_alpha(pixbuf)\n"
"                                       ? COGL_PIXEL_FORMAT_RGBA_8888\n"
"                                       : COGL_PIXEL_FORMAT_RGB_888,\n"
"                                   gdk_pixbuf_get_width(pixbuf),\n"
"                                   gdk_pixbuf_get_height(pixbuf),\n"
"                                   gdk_pixbuf_get_rowstride(pixbuf),\n"
"                                   NULL);\n"
"        }\n"
"\n"
"        clutter_actor_set_content(actor, image);\n"
"        g_object_unref(image);\n"
"        g_object_unref(pixbuf);\n"
"\n"
"        initialize_actor(actor, row, col);\n"
"        clutter_actor_add_child(stage, actor);\n"
"    }\n"
"}\n"
"\n"

#. (itstool) path: item/p
#: C/photo-wall.c.page:239
msgid ""
"Line 7: Here we want to get the path at the <var>n</var>th location in the "
"<code>GPtrArray</code> that is holding our image path names. The <var>n</"
"var>th position is calculated based on <code>row</code> and <code>col</code>."
msgstr ""
"7번째 줄:  여기서는 그림 경로 이름을 넣는 <code>GPtrArray</code>의 <var>n</"
"var>번째 위치에서 경로를 가져오려고 합니다. <var>n</var>번째  위치는 <code>행"
"</code>과 <code>열</code> 기반으로 계산합니다."

#. (itstool) path: item/p
#: C/photo-wall.c.page:241
msgid ""
"Line 8‒23: This is where we actually create the <code>ClutterActor</code> "
"and place the image into the actor. The first argument is the path which we "
"access through our <code>GSList</code> node. The second argument is for "
"error reporting but we are ignoring that to keep things short."
msgstr ""
"8~23번째 줄: 실제로 <code>ClutterActor</code>를 만들고 액터에 그림을 넣는 부"
"분입니다. 첫 인자는 <code>GSList</code> 노드로 접근할 경로입니다. 두번째 인자"
"는 오류 보고용이지만 단순성을 유지할 목적으로 무시합니다."

#. (itstool) path: item/p
#: C/photo-wall.c.page:243
msgid ""
"Line 47: This adds the <code>ClutterActor</code> to the stage, which is a "
"container. It also assumes ownership of the <code>ClutterActor</code> which "
"is something you'll want to look into as you get deeper into GNOME "
"development. See the <link href=\"http://library.gnome.org/devel/gobject/"
"stable/gobject-memory.html\"><code>GObject</code> documentation</link> for "
"the gory details."
msgstr ""
"47번째 줄: <code>ClutterActor</code>를 컨테이너 스테이지에 추가합니다. 또한 "
"여러분이 그놈 개발상 깊숙한 부분을 보려는 <code>ClutterActor</code>의 소유자"
"를 간주합니다. 적나라한 세부 내용은 <link href=\"http://library.gnome.org/"
"devel/gobject/stable/gobject-memory.html\"><code>GObject</code> 문서</link>"
"를 참고하십시오."

#. (itstool) path: section/title
#: C/photo-wall.c.page:249
msgid "Loading the images"
msgstr "그림 불러오기"

#. (itstool) path: section/p
#: C/photo-wall.c.page:250
msgid ""
"Let's take a short break from Clutter to see how we can get the file names "
"from our image directory."
msgstr ""
"그림 디렉터리에서 파일 이름을 가져오는 방법을 살펴볼 참에 클러터 내용 다루는 "
"부분은 잠시 접어두겠습니다."

#. (itstool) path: section/code
#: C/photo-wall.c.page:251
#, no-wrap
msgid ""
"\n"
"static void\n"
"load_image_path_names()\n"
"{\n"
"    /* Ensure we can access the directory. */\n"
"    GError *error = NULL;\n"
"    GDir *dir = g_dir_open(IMAGE_DIR_PATH, 0, &amp;error);\n"
"    if(error)\n"
"    {\n"
"        g_warning(\"g_dir_open() failed with error: %s\\n\", error-&gt;message);\n"
"        g_clear_error(&amp;error);\n"
"        return;\n"
"    }\n"
"\n"
"    img_paths = g_ptr_array_new_with_free_func (g_free);\n"
"\n"
"    const gchar *filename = g_dir_read_name(dir);\n"
"    while(filename)\n"
"    {\n"
"        if(g_str_has_suffix(filename, \".jpg\") || g_str_has_suffix(filename, \".png\"))\n"
"        {\n"
"            gchar *path = g_build_filename(IMAGE_DIR_PATH, filename, NULL);\n"
"            g_ptr_array_add (img_paths, path);\n"
"        }\n"
"        filename = g_dir_read_name(dir);\n"
"    }\n"
"}"
msgstr ""
"\n"
"static void\n"
"load_image_path_names()\n"
"{\n"
"    /* Ensure we can access the directory. */\n"
"    GError *error = NULL;\n"
"    GDir *dir = g_dir_open(IMAGE_DIR_PATH, 0, &amp;error);\n"
"    if(error)\n"
"    {\n"
"        g_warning(\"g_dir_open() failed with error: %s\\n\", error-&gt;message);\n"
"        g_clear_error(&amp;error);\n"
"        return;\n"
"    }\n"
"\n"
"    img_paths = g_ptr_array_new_with_free_func (g_free);\n"
"\n"
"    const gchar *filename = g_dir_read_name(dir);\n"
"    while(filename)\n"
"    {\n"
"        if(g_str_has_suffix(filename, \".jpg\") || g_str_has_suffix(filename, \".png\"))\n"
"        {\n"
"            gchar *path = g_build_filename(IMAGE_DIR_PATH, filename, NULL);\n"
"            g_ptr_array_add (img_paths, path);\n"
"        }\n"
"        filename = g_dir_read_name(dir);\n"
"    }\n"
"}"

#. (itstool) path: item/p
#: C/photo-wall.c.page:279
msgid ""
"Lines 5 and 12: This opens our directory or, if an error occurred, returns "
"after printing an error message."
msgstr ""
"5~12번째 줄: 디렉터리를 열거나 오류가 발생했을 경우 오류 메시지를 출력한 후 "
"값을 반환합니다."

#. (itstool) path: item/p
#: C/photo-wall.c.page:280
msgid ""
"Lines 16‒25: The first line gets another file name from the <code>GDir</"
"code> we opened earlier. If there was an image file (which we check by "
"looking at its extension, \".png\" or \".jpg\") in the directory we proceed "
"to prepend the image directory path to the filename and prepend that to the "
"list we set up earlier. Lastly we attempt to get the next path name and "
"reenter the loop if another file was found."
msgstr ""
"16~25번째 줄: 첫 줄은 앞서 열어둔 <code>GDir</code>에서 다른 파일 이름을 가져"
"옵니다. 디렉터리에 그림 파일(\".png\" 또는 \".jpg\" 확장자를 보고 확인)이 있"
"다면 파일 이름에 그림 디렉터리 경로를 붙이고 앞서 설정한 목록에 추가합니다. "
"마지막으로, 그 다음 경로 이름을 가져온 다음, 해당 경로에서 다른 파일을 찾으"
"면 반복문에 다시 들어갑니다."

#. (itstool) path: section/title
#: C/photo-wall.c.page:285
msgid "Set up the actors"
msgstr "액터 구성"

#. (itstool) path: section/p
#: C/photo-wall.c.page:286
msgid ""
"We now take a look at the sizing and positioning of <code>ClutterActor</"
"code>s and also readying the <code>ClutterActor</code> for user interaction."
msgstr ""
"이제 <code>ClutterActor</code>의 크기 조절 및 위치 설정, 사용자 반응 대기 부"
"분을 살펴보겠습니다."

#. (itstool) path: section/code
#: C/photo-wall.c.page:289
#, no-wrap
msgid ""
"\n"
"/* This function handles setting up and placing the rectangles. */\n"
"static void\n"
"initialize_actor(ClutterActor *actor, guint row, guint col)\n"
"{\n"
"    clutter_actor_set_size(actor, THUMBNAIL_SIZE, THUMBNAIL_SIZE);\n"
"    clutter_actor_set_position(actor, col * THUMBNAIL_SIZE, row * THUMBNAIL_SIZE);\n"
"    clutter_actor_set_reactive(actor, TRUE);\n"
"\n"
"    g_signal_connect(actor,\n"
"                     \"button-press-event\",\n"
"                     G_CALLBACK(actor_clicked_cb),\n"
"                     NULL);\n"
"}"
msgstr ""
"\n"
"/* This function handles setting up and placing the rectangles. */\n"
"static void\n"
"initialize_actor(ClutterActor *actor, guint row, guint col)\n"
"{\n"
"    clutter_actor_set_size(actor, THUMBNAIL_SIZE, THUMBNAIL_SIZE);\n"
"    clutter_actor_set_position(actor, col * THUMBNAIL_SIZE, row * THUMBNAIL_SIZE);\n"
"    clutter_actor_set_reactive(actor, TRUE);\n"
"\n"
"    g_signal_connect(actor,\n"
"                     \"button-press-event\",\n"
"                     G_CALLBACK(actor_clicked_cb),\n"
"                     NULL);\n"
"}"

#. (itstool) path: item/p
#: C/photo-wall.c.page:305
msgid ""
"Line 7: Setting an actor reactive means that it reacts to events, such as "
"<code>button-press-event</code> in our case. For Photo Wall, all "
"<code>ClutterActor</code>s in the wall should initially be reactive."
msgstr ""
"7번째 줄: 액터 반응 설정은 액터가 <code>button-press-event</code> 같은 이벤트"
"에 반응하게 합니다. 포토 월에서는 벽에 있는 모든 <code>ClutterActor</code>에 "
"반응 규칙을 초기화해야합니다."

#. (itstool) path: item/p
#: C/photo-wall.c.page:308
msgid ""
"Line 9‒12: Now we connect the <code>button-press-event</code> to the "
"<code>actor_clicked_cb</code> callback which we will look at next."
msgstr ""
"9~12번째 줄: 이제 <code>button-press-event</code> 이벤트를 다음에 살펴볼 "
"<code>actor_clicked_cb</code> 콜백 함수에 연결합니다."

#. (itstool) path: section/p
#: C/photo-wall.c.page:311
msgid "At this point we've got a wall of images that are ready to be viewed."
msgstr "여기서 볼 준비를 마친 그림 벽을 가져옵니다."

#. (itstool) path: section/title
#: C/photo-wall.c.page:315
msgid "Reacting to the clicks"
msgstr "누름 동작에 반응"

#. (itstool) path: section/code
#: C/photo-wall.c.page:319
#, no-wrap
msgid ""
"\n"
"static gboolean\n"
"actor_clicked_cb(ClutterActor *actor,\n"
"                 ClutterEvent *event,\n"
"                 gpointer      user_data)\n"
"{\n"
"    /* Flag to keep track of our state. */\n"
"    static gboolean is_focused = FALSE;\n"
"    ClutterActorIter iter;\n"
"    ClutterActor *child;\n"
"\n"
"    /* Reset the focus state on all the images */\n"
"    clutter_actor_iter_init (&amp;iter, clutter_actor_get_parent(actor));\n"
"    while (clutter_actor_iter_next(&amp;iter, &amp;child))\n"
"      clutter_actor_set_reactive(child, is_focused);\n"
"\n"
"    clutter_actor_save_easing_state(actor);\n"
"    clutter_actor_set_easing_duration(actor, ANIMATION_DURATION_MS);\n"
"\n"
"    if(is_focused)\n"
"    {\n"
"        /* Restore the old location and size. */\n"
"        clutter_actor_set_position(actor, unfocused_pos.x, unfocused_pos.y);\n"
"        clutter_actor_set_size(actor, THUMBNAIL_SIZE, THUMBNAIL_SIZE);\n"
"    }\n"
"    else\n"
"    {\n"
"        /* Save the current location before animating. */\n"
"        clutter_actor_get_position(actor, &amp;unfocused_pos.x, &amp;unfocused_pos.y);\n"
"        /* Only the currently focused image should receive events. */\n"
"        clutter_actor_set_reactive(actor, TRUE);\n"
"\n"
"        /* Put the focused image on top. */\n"
"        clutter_actor_set_child_above_sibling(clutter_actor_get_parent(actor), actor, NULL);\n"
"\n"
"        clutter_actor_set_position(actor, (STAGE_WIDTH - STAGE_HEIGHT) / 2.0, 0);\n"
"        clutter_actor_set_size(actor, STAGE_HEIGHT, STAGE_HEIGHT);\n"
"    }\n"
"\n"
"    clutter_actor_restore_easing_state(actor);\n"
"\n"
"    /* Toggle our flag. */\n"
"    is_focused = !is_focused;\n"
"\n"
"    return TRUE;\n"
"}"
msgstr ""
"\n"
"static gboolean\n"
"actor_clicked_cb(ClutterActor *actor,\n"
"                 ClutterEvent *event,\n"
"                 gpointer      user_data)\n"
"{\n"
"    /* Flag to keep track of our state. */\n"
"    static gboolean is_focused = FALSE;\n"
"    ClutterActorIter iter;\n"
"    ClutterActor *child;\n"
"\n"
"    /* Reset the focus state on all the images */\n"
"    clutter_actor_iter_init (&amp;iter, clutter_actor_get_parent(actor));\n"
"    while (clutter_actor_iter_next(&amp;iter, &amp;child))\n"
"      clutter_actor_set_reactive(child, is_focused);\n"
"\n"
"    clutter_actor_save_easing_state(actor);\n"
"    clutter_actor_set_easing_duration(actor, ANIMATION_DURATION_MS);\n"
"\n"
"    if(is_focused)\n"
"    {\n"
"        /* Restore the old location and size. */\n"
"        clutter_actor_set_position(actor, unfocused_pos.x, unfocused_pos.y);\n"
"        clutter_actor_set_size(actor, THUMBNAIL_SIZE, THUMBNAIL_SIZE);\n"
"    }\n"
"    else\n"
"    {\n"
"        /* Save the current location before animating. */\n"
"        clutter_actor_get_position(actor, &amp;unfocused_pos.x, &amp;unfocused_pos.y);\n"
"        /* Only the currently focused image should receive events. */\n"
"        clutter_actor_set_reactive(actor, TRUE);\n"
"\n"
"        /* Put the focused image on top. */\n"
"        clutter_actor_set_child_above_sibling(clutter_actor_get_parent(actor), actor, NULL);\n"
"\n"
"        clutter_actor_set_position(actor, (STAGE_WIDTH - STAGE_HEIGHT) / 2.0, 0);\n"
"        clutter_actor_set_size(actor, STAGE_HEIGHT, STAGE_HEIGHT);\n"
"    }\n"
"\n"
"    clutter_actor_restore_easing_state(actor);\n"
"\n"
"    /* Toggle our flag. */\n"
"    is_focused = !is_focused;\n"
"\n"
"    return TRUE;\n"
"}"

#. (itstool) path: item/p
#: C/photo-wall.c.page:366
msgid ""
"Lines 1‒4: We have to make sure our callback function matches the signature "
"required for the <code>button_clicked_event</code> signal. For our example, "
"we will only use the first argument, the <code>ClutterActor</code> that is "
"actually clicked."
msgstr ""
"1~4번째 줄: <code>button_clicked_event</code> 시그널에 필요한 시그니쳐에 일치"
"하는 콜백 함수를 확인해야합니다. 예를 들면 실제로 누를 <code>ClutterActor</"
"code>가 들어가는 첫번째 인자만 씁니다."

#. (itstool) path: note/p
#: C/photo-wall.c.page:368
msgid ""
"A few words on the arguments we are not using in this example. The "
"<code>ClutterEvent</code> is different depending on what event is being "
"handled. For example, a key event produces a <code>ClutterKeyEvent</code> "
"from which you can get the key being pressed among other information. For "
"mouse click events you get a <code>ClutterButtonEvent</code> from which you "
"can get the <code>x</code> and <code>y</code> values. See the Clutter "
"documentation for other <code>ClutterEvent</code> types."
msgstr ""
"이 예제에서 사용하지 않는 인자에 대해 몇가지 알아둘 내용이 있습니다. "
"<code>ClutterEvent</code>는 어떤 이벤트를 처리할지에 따라 다릅니다. 예를 들"
"면, 키 이벤트는 여러 이벤트 중에 키누름 이벤트를 받을 수 있는 "
"<code>ClutterKeyEvent</code>를 내보냅니다. 마우스 단추 누름 이벤트 상황에선 "
"<code>x</code>, <code>y</code> 값을 받을 수 있는 <code>ClutterButtonEvent</"
"code>를 취할 수 있습니다. 다른 <code>ClutterEvent</code> 형식을 알아보려면 클"
"러터 문서를 참고하십시오."

#. (itstool) path: note/p
#: C/photo-wall.c.page:369
msgid ""
"The <code>user_data</code> is what one uses to pass data into the function. "
"A pointer to any data type can be passed in. If you need multiple data to be "
"passed into the callback, you can place the data into a struct and pass its "
"address in."
msgstr ""
"<code>user_data</code>는 함수에 데이터를 전달할 때 활용합니다. 어떤 데이터 형"
"식의 포인터든 전달할 수 있습니다. 콜백에 여러 데이터를 넘겨야 한다면, 구조체"
"에 데이터를 넣고 전달할 수 있습니다."

#. (itstool) path: item/p
#: C/photo-wall.c.page:373
msgid ""
"Line 7: We set up a static flag to track which state we are in: wall mode or "
"focus mode. We start out in wall mode so no image has focus. Thus, we set "
"the flag to <code>FALSE</code> initially."
msgstr ""
"7번째 줄: 우리가 보는 상태를 보여줄 정적 플래그 벽 모드 또는 포커스 모드를 설"
"정합니다. 벽 모드로 시작해서 어떤 이미지에도 포커스를 맞추지 않도록 합니다. "
"따라서 초기 플래그 값은 <code>FALSE</code> 입니다."

#. (itstool) path: item/p
#: C/photo-wall.c.page:374
msgid ""
"Line 12‒14: These set the image actors to receive events if they are focused."
msgstr ""
"12~14번째 줄: 이 부분에서 그림에 포커스를 맞췄을 때 이벤트를 받을 그림 액터"
"를 설정합니다."

#. (itstool) path: item/p
#: C/photo-wall.c.page:375
msgid ""
"Line 16‒17: Here we set the animation duration and save the current state."
msgstr "16~17번째 줄: 여기서 움직임 시간을 설정하고 현재 상태를 저장합니다."

#. (itstool) path: item/p
#: C/photo-wall.c.page:376
msgid ""
"Lines 21‒23: Reaching this code means that one image currently has focus and "
"we want to return to wall mode. Setting a position on a <code>ClutterActor</"
"code> begins an animation with the duration that we set in line 17."
msgstr ""
"21~23번째 줄: 이 코드에 도달한다는 건 그림 하나에 포커스를 맞췄으며, 벽 모드"
"로 돌아가려 함을 의미합니다. <code>ClutterActor</code>에 위치를 설정하면 17번"
"째 줄에서 설정한 시간만큼 그림 움직임을 시작합니다."

#. (itstool) path: item/p
#: C/photo-wall.c.page:378
msgid ""
"Line 24: Reaching this line of code means we are currently in the wall state "
"and are about to give a <code>ClutterActor</code> focus. Here we save the "
"starting position so that we can return to it later."
msgstr ""
"24번째 줄: 이 코드 줄에 도달하면 현재 벽 상태에 있으며 <code>ClutterActor</"
"code> 포커스를 주려는 상황입니다. 여기서 시작 위치를 저장하여 나중에 다시 이 "
"위치로 돌아올 수 있습니다."

#. (itstool) path: item/p
#: C/photo-wall.c.page:379
msgid ""
"Line 25: Setting the <code>ClutterActor</code>'s <code>reactive</code> "
"property to <code>TRUE</code> makes this <code>ClutterActor</code> react to "
"events. In this focused state the only <code>ClutterActor</code> that we "
"want to receive events will be the <code>ClutterActor</code> being viewed. "
"Clicking on the <code>ClutterActor</code> will return it to its starting "
"position."
msgstr ""
"25번째 줄: <code>ClutterActor</code>의 <code>reactive</code> 속성을 "
"<code>TRUE</code>로 설정하면, <code>ClutterActor</code>에서 이벤트에 반응합니"
"다. 이 포커스 상태에서 우리가 이벤트를 받으려는 <code>ClutterActor</code>는 "
"우리가 보고 있는 <code>ClutterActor</code>입니다. <code>ClutterActor</code>"
"를 누르면 액터의 시작 위치로 돌아갑니다."

#. (itstool) path: item/p
#: C/photo-wall.c.page:380
msgid ""
"Lines 27‒36: This is where we save the current position of the image, set it "
"to receive events and then make it appear above the other images and start "
"animating it to fill the stage."
msgstr ""
"27~36번째 줄: 이 부분은 그림의 현재 위치를 저장하고, 이벤트를 받도록 설정하"
"며, 다른 그림 위로 나타나 스테이지를 채우는 움직임을 시작하는 부분입니다."

#. (itstool) path: item/p
#: C/photo-wall.c.page:381
msgid ""
"Line 39: Here we restore the easing state to what was set before we changed "
"it in line 16."
msgstr ""
"39번째 줄: 이 부분에서는 16번째 줄에서 바꾸기 전의 움직임 처리 상태로 복원합"
"니다."

#. (itstool) path: item/p
#: C/photo-wall.c.page:382
msgid ""
"Line 42: Here we toggle the <code>is_focused</code> flag to the current "
"state."
msgstr ""
"42번째 줄: 여기서 <code>is_focused</code> 값을 현재 상태 값으로 바꿉니다."

#. (itstool) path: item/p
#: C/photo-wall.c.page:383
msgid ""
"As mentioned previously, the <code>ClutterActor</code>s with higher "
"<code>depth</code> values receive events but can allow <code>ClutterActor</"
"code>s below them to also receive events. Returning <code>TRUE</code> will "
"stop events from being passed down, while <code>FALSE</code> will pass "
"events down."
msgstr ""
"앞에서 말씀드린대로, 좀 더 큰 <code>depth</code> 값이 들어간 "
"<code>ClutterActor</code>에서 이벤트를 받는데 <code>ClutterActor</code>의 아"
"래에 있는 <code>ClutterActor</code>도 이벤트를 받을 수 있습니다. <code>TRUE</"
"code>를 반환하면 이벤트를 전달해 내려가는 과정을 멈추며, <code>FALSE</code>"
"를 반환하면 이벤트를 계속 하부로 전달해내려갑니다."

#. (itstool) path: note/p
#: C/photo-wall.c.page:385
msgid ""
"Remember, however, that to receive events the <code>ClutterActor</code>s "
"must be set <code>reactive</code>."
msgstr ""
"허나, <code>ClutterActor</code> 이벤트를 받으려면 <code>reactive</code>를 설"
"정해야합니다."

#. (itstool) path: section/p
#: C/photo-wall.c.page:393
msgid ""
"All of the code should now be ready to go. All you need now is some pictures "
"to load. By default, the pictures are loaded from a <file>berlin_images</"
"file> directory. If you want, you can change the <code>#define "
"IMAGE_DIR_PATH</code> line near the top to refer to your photo directory, or "
"create a <file>berlin_images</file> directory by clicking "
"<guiseq><gui>Project</gui><gui>New Directory...</gui></guiseq> and creating "
"a <file>berlin_images</file> directory as a subdirectory of the <file>photo-"
"wall</file> directory. Make sure to put at least twelve images in the "
"directory!"
msgstr ""
"모든 코드 준비가 끝났습니다. 이제 그림을 불러오는 일이 필요합니다. 기본적으"
"로 그림은 <file>berlin_images</file> 디렉터리에서 불러옵니다. 원한다면 사진 "
"디렉터리 또는 <guiseq><gui>프로젝트</gui><gui>새 디렉터리…</gui></guiseq>를 "
"누른 후 <file>photo-wall</file> 디렉터리의 하위 디렉터리로 "
"<file>berlin_images</file> 디렉터리를 만든 후 참조하도록 상단 근처의 "
"<code>#define IMAGE_DIR_PATH</code> 줄을 바꿀 수 있습니다. 디렉터리에 그림을 "
"최소한 12개 넣었는지 확인하십시오."

#. (itstool) path: section/p
#: C/photo-wall.c.page:395
msgid ""
"When you have done that, click <guiseq><gui>Build</gui><gui>Build Project</"
"gui></guiseq> to build everything again, then <guiseq><gui>Run</"
"gui><gui>Execute</gui></guiseq> to start the application."
msgstr ""
"다 끝났으면 <guiseq><gui>빌드</gui><gui>프로젝트 빌드</gui></guiseq>를 눌러 "
"모두 다시 빌드하고, <guiseq><gui>실행</gui><gui>실행</gui></guiseq>을 눌러 프"
"로그램을 시작하십시오."

#. (itstool) path: section/p
#: C/photo-wall.c.page:396
msgid ""
"If you haven't already done so, choose the <file>Debug/src/photo-wall</file> "
"application in the dialog that appears. Finally, hit <gui>Run</gui> and "
"enjoy!"
msgstr ""
"아직 마무리가 안됐다면 나타나는 대화상자에서 <file>Debug/src/photo-wall</"
"file> 프로그램을 선택하십시오. 마지막으로 <gui>실행</gui>을 치고 즐기시죠!"

#. (itstool) path: section/p
#: C/photo-wall.c.page:401
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"photo-wall/photo-wall.c\">reference code</link>."
msgstr ""
"지침서를 따라하는 실행하는 과정에 문제가 있다면, <link href=\"photo-wall/"
"photo-wall.c\">참조 코드</link>와 여러분의 코드를 비교해보십시오."

#. (itstool) path: info/title
#: C/progressbar.c.page:8
msgctxt "text"
msgid "ProgressBar (C)"
msgstr "ProgressBar(C)"

#. (itstool) path: info/desc
#: C/progressbar.c.page:19 C/progressbar.vala.page:18
msgid "A widget which indicates progress visually"
msgstr "진행 과정을 눈에 보이게 나타내는 위젯"

#. (itstool) path: page/title
#: C/progressbar.c.page:22 C/progressbar.js.page:20 C/progressbar.py.page:22
#: C/progressbar.vala.page:21
msgid "ProgressBar"
msgstr "ProgressBar"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/progressbar.c.page:24 C/progressbar.vala.page:22
msgctxt "_"
msgid ""
"external ref='media/progressbar_fill.ogv' "
"md5='287763d1d3f4a328212ea2243910f5e4'"
msgstr ""

#. (itstool) path: page/p
#: C/progressbar.c.page:25 C/progressbar.vala.page:23
msgid ""
"This ProgressBar \"fills in\" by a fraction of the bar until it is full."
msgstr "ProgressBar는 막대 칸이 찰 때까지 막대 비율 값을 \"채워 넣습니다\"."

#. (itstool) path: page/code
#: C/progressbar.c.page:27
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"static gboolean\n"
"fill (gpointer   user_data)\n"
"{\n"
"  GtkWidget *progress_bar = user_data;\n"
"\n"
"  /*Get the current progress*/\n"
"  gdouble fraction;\n"
"  fraction = gtk_progress_bar_get_fraction (GTK_PROGRESS_BAR (progress_bar));\n"
"\n"
"  /*Increase the bar by 10% each time this function is called*/\n"
"  fraction += 0.1;\n"
"\n"
"  /*Fill in the bar with the new fraction*/\n"
"  gtk_progress_bar_set_fraction (GTK_PROGRESS_BAR (progress_bar), fraction);\n"
"\n"
"  /*Ensures that the fraction stays below 1.0*/\n"
"  if (fraction &lt; 1.0) \n"
"    return TRUE;\n"
"  \n"
"  return FALSE;\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *progress_bar;\n"
"\n"
"  gdouble fraction = 0.0;\n"
"\n"
"  /*Create a window with a title, and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"ProgressBar Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 220, 20);\n"
" \n"
"  /*Create a progressbar and add it to the window*/\n"
"  progress_bar = gtk_progress_bar_new ();\n"
"  gtk_container_add (GTK_CONTAINER (window), progress_bar);\n"
"\n"
"  /*Fill in the given fraction of the bar. Has to be between 0.0-1.0 inclusive*/\n"
"  gtk_progress_bar_set_fraction (GTK_PROGRESS_BAR (progress_bar), fraction);\n"
"\n"
"  /*Use the created fill function every 500 milliseconds*/\n"
"  g_timeout_add (500, fill, GTK_PROGRESS_BAR (progress_bar));\n"
" \n"
"  gtk_widget_show_all (window);\n"
"}\n"
" \n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
" \n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
" \n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"static gboolean\n"
"fill (gpointer   user_data)\n"
"{\n"
"  GtkWidget *progress_bar = user_data;\n"
"\n"
"  /*Get the current progress*/\n"
"  gdouble fraction;\n"
"  fraction = gtk_progress_bar_get_fraction (GTK_PROGRESS_BAR (progress_bar));\n"
"\n"
"  /*Increase the bar by 10% each time this function is called*/\n"
"  fraction += 0.1;\n"
"\n"
"  /*Fill in the bar with the new fraction*/\n"
"  gtk_progress_bar_set_fraction (GTK_PROGRESS_BAR (progress_bar), fraction);\n"
"\n"
"  /*Ensures that the fraction stays below 1.0*/\n"
"  if (fraction &lt; 1.0) \n"
"    return TRUE;\n"
"  \n"
"  return FALSE;\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *progress_bar;\n"
"\n"
"  gdouble fraction = 0.0;\n"
"\n"
"  /*Create a window with a title, and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"ProgressBar Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 220, 20);\n"
" \n"
"  /*Create a progressbar and add it to the window*/\n"
"  progress_bar = gtk_progress_bar_new ();\n"
"  gtk_container_add (GTK_CONTAINER (window), progress_bar);\n"
"\n"
"  /*Fill in the given fraction of the bar. Has to be between 0.0-1.0 inclusive*/\n"
"  gtk_progress_bar_set_fraction (GTK_PROGRESS_BAR (progress_bar), fraction);\n"
"\n"
"  /*Use the created fill function every 500 milliseconds*/\n"
"  g_timeout_add (500, fill, GTK_PROGRESS_BAR (progress_bar));\n"
" \n"
"  gtk_widget_show_all (window);\n"
"}\n"
" \n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
" \n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
" \n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/progressbar.c.page:36
msgid ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop."
"html#g-timeout-add\">G_Timeout</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop."
"html#g-timeout-add\">G_Timeout</link>"

#. (itstool) path: info/title
#: C/progressbar.js.page:7
msgctxt "text"
msgid "ProgressBar (JavaScript)"
msgstr "ProgressBar (JavaScript)"

#. (itstool) path: info/desc
#: C/progressbar.js.page:17
msgid "A bar which animates to indicate progress"
msgstr "진행 상황을 움직임으로 나타내는 표시줄입니다"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/progressbar.js.page:21 C/progressbar.py.page:23
msgctxt "_"
msgid ""
"external ref='media/progressbar.ogv' md5='36deab3dd4b5be968828fa2ef416d612'"
msgstr ""

#. (itstool) path: div/p
#: C/progressbar.js.page:25 C/progressbar.py.page:27
msgid "Pressing any key stops and starts this ProgressBar."
msgstr "아무 키나 눌러서 ProgressBar 동작을 멈추거나 시작합니다."

#. (itstool) path: page/p
#: C/progressbar.js.page:32 C/progressbar.py.page:34
msgid "This ProgressBar is stopped and started by pressing any key."
msgstr "이 ProgressBar는 어떤 키든 눌렀을 때 동작을 멈추거나 시작합니다."

#. (itstool) path: page/code
#: C/progressbar.js.page:34
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ProgressBarExample = new Lang.Class({\n"
"    Name: 'ProgressBar Example',\n"
"\n"
"    // Create the application itself\n"
"        _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsprogressbar',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                       window_position: Gtk.WindowPosition.CENTER,\n"
"                                                       default_height: 20,\n"
"                                                       default_width: 220,\n"
"                                                       title: \"ProgressBar Example\"});\n"
"\n"
"        // Create the progress bar\n"
"        this.progressBar = new Gtk.ProgressBar ();\n"
"        this._window.add(this.progressBar);\n"
"\n"
"        // Start the function that pulses the bar every 100 milliseconds\n"
"        this.sourceID = GLib.timeout_add(GLib.PRIORITY_DEFAULT, 100, Lang.bind(this, this._barPulse));\n"
"\n"
"        // Connect a keypress event to the function that toggles the bar to start or stop pulsing\n"
"        this._window.connect(\"key-press-event\", Lang.bind(this, this._onKeyPress));\n"
"\n"
"            // Show the window and all child widgets\n"
"            this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Pulse the progressbar (unless it has been disabled by a keypress)\n"
"    _barPulse: function() {\n"
"        this.progressBar.pulse();\n"
"        return true;\n"
"    },\n"
"\n"
"    // Start or stop the progressbar when a key is pressed\n"
"    _onKeyPress: function() {\n"
"        if (this.sourceID == 0)\n"
"            this.sourceID = GLib.timeout_add(GLib.PRIORITY_DEFAULT, 100, Lang.bind(this, this._barPulse));\n"
"        else {\n"
"            GLib.source_remove(this.sourceID);\n"
"            this.sourceID = 0;\n"
"        }\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ProgressBarExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ProgressBarExample = new Lang.Class({\n"
"    Name: 'ProgressBar Example',\n"
"\n"
"    // Create the application itself\n"
"        _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsprogressbar',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"            this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                       window_position: Gtk.WindowPosition.CENTER,\n"
"                                                       default_height: 20,\n"
"                                                       default_width: 220,\n"
"                                                       title: \"ProgressBar Example\"});\n"
"\n"
"        // Create the progress bar\n"
"        this.progressBar = new Gtk.ProgressBar ();\n"
"        this._window.add(this.progressBar);\n"
"\n"
"        // Start the function that pulses the bar every 100 milliseconds\n"
"        this.sourceID = GLib.timeout_add(GLib.PRIORITY_DEFAULT, 100, Lang.bind(this, this._barPulse));\n"
"\n"
"        // Connect a keypress event to the function that toggles the bar to start or stop pulsing\n"
"        this._window.connect(\"key-press-event\", Lang.bind(this, this._onKeyPress));\n"
"\n"
"            // Show the window and all child widgets\n"
"            this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Pulse the progressbar (unless it has been disabled by a keypress)\n"
"    _barPulse: function() {\n"
"        this.progressBar.pulse();\n"
"        return true;\n"
"    },\n"
"\n"
"    // Start or stop the progressbar when a key is pressed\n"
"    _onKeyPress: function() {\n"
"        if (this.sourceID == 0)\n"
"            this.sourceID = GLib.timeout_add(GLib.PRIORITY_DEFAULT, 100, Lang.bind(this, this._barPulse));\n"
"        else {\n"
"            GLib.source_remove(this.sourceID);\n"
"            this.sourceID = 0;\n"
"        }\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ProgressBarExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/progressbar.js.page:39
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/GLib.html\">GLib</"
"link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/GLib.html\">GLib</"
"link>"

#. (itstool) path: info/title
#: C/progressbar.py.page:8
msgctxt "text"
msgid "ProgressBar (Python)"
msgstr "ProgressBar (Python)"

#. (itstool) path: info/desc
#: C/progressbar.py.page:19
msgid "A widget which indicates progress visually."
msgstr "진행 상황을 눈으로 알 수 있게 나타냅니다."

#. (itstool) path: section/code
#: C/progressbar.py.page:41
#, no-wrap
msgid ""
"from gi.repository import GLib\n"
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"ProgressBar Example\", application=app)\n"
"        self.set_default_size(220, 20)\n"
"\n"
"        # a progressbar\n"
"        self.progress_bar = Gtk.ProgressBar()\n"
"        # add the progressbar to the window\n"
"        self.add(self.progress_bar)\n"
"\n"
"        # the method self.pulse is called each 100 milliseconds\n"
"        # and self.source_id is set to be the ID of the event source\n"
"        # (i.e. the bar changes position every 100 milliseconds)\n"
"        self.source_id = GLib.timeout_add(100, self.pulse)\n"
"\n"
"    # event handler\n"
"    # any signal from the keyboard controls if the progressbar stops/starts\n"
"    def do_key_press_event(self, event):\n"
"        # if the progressbar has been stopped (therefore source_id == 0 - see\n"
"        # \"else\" below), turn it back on\n"
"        if (self.source_id == 0):\n"
"            self.source_id = GLib.timeout_add(100, self.pulse)\n"
"        # if the bar is moving, remove the source with the ID of source_id\n"
"        # from the main context (stop the bar) and set the source_id to 0\n"
"        else:\n"
"            GLib.source_remove(self.source_id)\n"
"            self.source_id = 0\n"
"        # stop the signal emission\n"
"        return True\n"
"\n"
"    # source function\n"
"    # the progressbar is in \"activity mode\" when this method is called\n"
"    def pulse(self):\n"
"        self.progress_bar.pulse()\n"
"        # call the function again\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import GLib\n"
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"ProgressBar Example\", application=app)\n"
"        self.set_default_size(220, 20)\n"
"\n"
"        # a progressbar\n"
"        self.progress_bar = Gtk.ProgressBar()\n"
"        # add the progressbar to the window\n"
"        self.add(self.progress_bar)\n"
"\n"
"        # the method self.pulse is called each 100 milliseconds\n"
"        # and self.source_id is set to be the ID of the event source\n"
"        # (i.e. the bar changes position every 100 milliseconds)\n"
"        self.source_id = GLib.timeout_add(100, self.pulse)\n"
"\n"
"    # event handler\n"
"    # any signal from the keyboard controls if the progressbar stops/starts\n"
"    def do_key_press_event(self, event):\n"
"        # if the progressbar has been stopped (therefore source_id == 0 - see\n"
"        # \"else\" below), turn it back on\n"
"        if (self.source_id == 0):\n"
"            self.source_id = GLib.timeout_add(100, self.pulse)\n"
"        # if the bar is moving, remove the source with the ID of source_id\n"
"        # from the main context (stop the bar) and set the source_id to 0\n"
"        else:\n"
"            GLib.source_remove(self.source_id)\n"
"            self.source_id = 0\n"
"        # stop the signal emission\n"
"        return True\n"
"\n"
"    # source function\n"
"    # the progressbar is in \"activity mode\" when this method is called\n"
"    def pulse(self):\n"
"        self.progress_bar.pulse()\n"
"        # call the function again\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/progressbar.py.page:46
msgid "Useful methods for a ProgressBar widget"
msgstr "ProgressBar 위젯에 쓸만한 메서드"

#. (itstool) path: item/p
#: C/progressbar.py.page:48
msgid ""
"Instead of <code>pulse()</code>, that makes the bar go back and forth, if we "
"want the ProgressBar to \"fill in\" a fraction (a <code>float</code> between "
"<code>0.0</code> and <code>1.0</code> included) of the bar that has been "
"completed, use <code>set_fraction(fraction)</code>."
msgstr ""
"표시줄을 앞뒤로 왔다갔다 하게 하는 <code>pulse()</code> 대신, ProgressBar를 "
"표시줄 비율(<code>0.0</code>과 <code>1.0</code> 값도 해당하는 사이 "
"<code>float</code> 값)만큼 완료 의미로 \"채워 넣는\"다면, "
"<code>set_fraction(fraction)</code>을 사용하십시오."

#. (itstool) path: item/p
#: C/progressbar.py.page:49
msgid ""
"To set a text and show it (superimposed over the bar) use "
"<code>set_text(<var>\"text\"</var>)</code> and <code>set_show_text(True)</"
"code>. If a text is not set and <code>set_show_text(True)</code> the text "
"will be the percentage of the work that has been completed."
msgstr ""
"텍스트를 설정하고 보여주려면 (표시줄에 겹쳐 나타남) <code>set_text(<var>"
"\"text\"</var>)</code>와 <code>set_show_text(True)</code>를 사용하십시오. 텍"
"스트를 설정하지 않았고 <code>set_show_text(True)</code> 함수를 호출하면 나타"
"나는 텍스트는 작업 완료 백분율입니다."

#. (itstool) path: item/p
#: C/progressbar.py.page:57
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkProgressBar.html"
"\">GtkProgressBar</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkProgressBar.html"
"\">GtkProgressBar</link>"

#. (itstool) path: item/p
#: C/progressbar.py.page:58
msgid ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop."
"html\">GLib - The Main Event Loop</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop."
"html\">GLib - 메인 이벤트 루프</link>"

#. (itstool) path: item/p
#: C/progressbar.py.page:59
msgid ""
"<link href=\"http://developer.gnome.org/gdk/stable/gdk-Keyboard-Handling"
"\">Gdk - Key Values</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gdk/stable/gdk-Keyboard-Handling"
"\">Gdk - 키 값</link>"

#. (itstool) path: info/title
#: C/progressbar.vala.page:8
msgctxt "text"
msgid "ProgressBar (Vala)"
msgstr "ProgressBar (Vala)"

#. (itstool) path: page/code
#: C/progressbar.vala.page:25
#, no-wrap
msgid ""
"public class MyApplication : Gtk.Application {\n"
"\n"
"\tGtk.ProgressBar progress_bar;\n"
"\n"
"\tprotected override void activate () {\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.set_title (\"ProgressBar Example\");\n"
"\t\twindow.set_default_size (220, 20);\n"
"\n"
"\t\tprogress_bar = new Gtk.ProgressBar ();\n"
"\t\twindow.add (progress_bar);\n"
"\t\twindow.show_all ();\n"
"\n"
"\t\tdouble fraction = 0.0;\n"
"\t\tprogress_bar.set_fraction (fraction);\n"
"\t\tGLib.Timeout.add (500, fill);\n"
"\t}\n"
"\n"
"\tbool fill () {\n"
"\t\tdouble fraction = progress_bar.get_fraction (); //get current progress\n"
"\t\tfraction += 0.1; //increase by 10% each time this function is called\n"
"\n"
"\t\tprogress_bar.set_fraction (fraction);\n"
"\n"
"\t\t/* This function is only called by GLib.Timeout.add while it returns true; */\n"
"\t\tif (fraction &lt; 1.0)\n"
"\t\t\treturn true;\n"
"\t\treturn false;\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\tvar progress_bar_application = new MyApplication ();\n"
"\tint status =  progress_bar_application.run (args);\n"
"\treturn status;\n"
"}\n"
msgstr ""
"public class MyApplication : Gtk.Application {\n"
"\n"
"\tGtk.ProgressBar progress_bar;\n"
"\n"
"\tprotected override void activate () {\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.set_title (\"ProgressBar Example\");\n"
"\t\twindow.set_default_size (220, 20);\n"
"\n"
"\t\tprogress_bar = new Gtk.ProgressBar ();\n"
"\t\twindow.add (progress_bar);\n"
"\t\twindow.show_all ();\n"
"\n"
"\t\tdouble fraction = 0.0;\n"
"\t\tprogress_bar.set_fraction (fraction);\n"
"\t\tGLib.Timeout.add (500, fill);\n"
"\t}\n"
"\n"
"\tbool fill () {\n"
"\t\tdouble fraction = progress_bar.get_fraction (); //get current progress\n"
"\t\tfraction += 0.1; //increase by 10% each time this function is called\n"
"\n"
"\t\tprogress_bar.set_fraction (fraction);\n"
"\n"
"\t\t/* This function is only called by GLib.Timeout.add while it returns true; */\n"
"\t\tif (fraction &lt; 1.0)\n"
"\t\t\treturn true;\n"
"\t\treturn false;\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\tvar progress_bar_application = new MyApplication ();\n"
"\tint status =  progress_bar_application.run (args);\n"
"\treturn status;\n"
"}\n"

#. (itstool) path: item/p
#: C/progressbar.vala.page:30
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ProgressBar.html\">Gtk."
"ProgressBar</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ProgressBar.html\">Gtk."
"ProgressBar</link>"

#. (itstool) path: item/p
#: C/progressbar.vala.page:31
msgid ""
"<link href=\"http://www.valadoc.org/glib-2.0/GLib.Timeout.html\">GLib."
"Timeout</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/glib-2.0/GLib.Timeout.html\">GLib."
"Timeout</link>"

#. (itstool) path: info/title
#: C/properties.py.page:9
msgctxt "text"
msgid "Properties (Python)"
msgstr "속성(Python)"

#. (itstool) path: info/desc
#: C/properties.py.page:14
msgid "An explanation of properties, getters and setters."
msgstr "속성, 게터함수, 세터함수를 설명합니다."

#. (itstool) path: page/title
#: C/properties.py.page:27
msgid "Properties"
msgstr "속성"

#. (itstool) path: section/p
#: C/properties.py.page:34
msgid ""
"<em>Properties</em> describe the configuration and state of widgets. Each "
"widget has its own particular set of properties. For example, a widget such "
"as a button has the property <code>label</code> which contains the text of "
"the widget. You can specify the name and value of any number of properties "
"as keyword arguments when creating an instance of a widget. For example, to "
"create a label with the text “Hello World”, an angle of 25 degrees, and "
"aligned to the right, you can use:"
msgstr ""
"<em>속성</em>은 설정과 위젯 상태를 설명합니다. 각 위젯에는 몇가지 특별한 속"
"성 모음이 있습니다. 예를 들어 단추 같은 위젯에는 위젯 텍스트를 넣을 수 있는 "
"<code>label</code> 속성이 있습니다. 위젯 인스턴스를 만들 때 키워드 인자로 여"
"러가지 프로퍼티의 이름과 값을 지정할 수 있습니다. 예를 들어, \"Hello world\" "
"레이블을 25도 기울여서 오른쪽 정렬 상태로 만들려면:"

#. (itstool) path: section/code
#: C/properties.py.page:41
#, no-wrap
msgid ""
"\n"
"label = Gtk.Label(label=\"Hello World\", angle=25, halign=Gtk.Align.END)"
msgstr ""
"\n"
"label = Gtk.Label(label=\"Hello World\", angle=25, halign=Gtk.Align.END)"

#. (itstool) path: section/p
#: C/properties.py.page:44
msgid ""
"Alternatively, you can define these properties separately by using the "
"method associated with it."
msgstr "대신, 관련 메서드를 사용하여 속성을 따로 설정할 수 있습니다."

#. (itstool) path: section/code
#: C/properties.py.page:45
#, no-wrap
msgid ""
"\n"
"label = Gtk.Label()\n"
"label.set_label(\"Hello World\")\n"
"label.set_angle(25)\n"
"label.set_halign(Gtk.Align.END)"
msgstr ""
"\n"
"label = Gtk.Label()\n"
"label.set_label(\"Hello World\")\n"
"label.set_angle(25)\n"
"label.set_halign(Gtk.Align.END)"

#. (itstool) path: section/p
#: C/properties.py.page:51
msgid ""
"Once you have created such a label, you can get the text of the label with "
"<code>label.get_label()</code>, and analogously for the other properties."
msgstr ""
"레이블 같은걸 만들고 나면 <code>label.get_label()</code> 함수로 텍스트를 가져"
"올 수 있으며, 다른 속성에 대해서도 비슷합니다."

#. (itstool) path: section/p
#: C/properties.py.page:53
msgid ""
"Instead of using getters and setters you can also get and set the properties "
"with <code>get_property(<var>\"prop-name\"</var>)</code> and "
"<code>set_property(<var>\"prop-name\"</var>, <var>value</var>)</code>, "
"respectively."
msgstr ""
"게터, 세터 함수를 사용하는 대신 <code>get_property(<var>\"prop-name\"</"
"var>)</code>함수와 <code>set_property(<var>\"prop-name\"</var>, <var>value</"
"var>)</code>함수를 각각 사용하여 속성 값을 가져오고 설정할 수 있습니다."

#. (itstool) path: section/p
#: C/properties.py.page:59
msgid ""
"<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/basics."
"html\">Basics - Properties</link> in Python GTK+ 3 Tutorial"
msgstr ""
"파이썬 GTK+ 3 따라하기 지침서의 <link href=\"http://python-gtk-3-tutorial."
"readthedocs.org/en/latest/basics.html\">속성 기본</link>"

#. (itstool) path: info/title
#: C/py.page:7
msgctxt "link"
msgid "Python"
msgstr "파이썬"

#. (itstool) path: page/title
#: C/py.page:21
msgid "Tutorials, code samples and platform demos in Python"
msgstr "파이썬용 따라하기 지침서, 코드 예제, 플랫폼 데모"

#. (itstool) path: section/title
#. (itstool) path: page/title
#: C/py.page:26 C/tutorial.py.page:31
msgid "Tutorial for beginners"
msgstr "초보자용 따라하기 지침서"

#. (itstool) path: info/title
#: C/radiobutton.c.page:8
msgctxt "text"
msgid "RadioButton (C)"
msgstr "RadioButton (C)"

#. (itstool) path: info/desc
#: C/radiobutton.c.page:20
msgid "A choice from multiple checkbuttons"
msgstr "여러 확인 단추를 선택합니다"

#. (itstool) path: page/title
#: C/radiobutton.c.page:23 C/radiobutton.js.page:21 C/radiobutton.py.page:23
#: C/radiobutton.vala.page:24
msgid "RadioButton"
msgstr "RadioButton"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/radiobutton.c.page:25 C/radiobutton.py.page:24 C/radiobutton.vala.page:25
msgctxt "_"
msgid ""
"external ref='media/radiobutton.png' md5='d115460280d8e41493dd98054b5822a5'"
msgstr ""

#. (itstool) path: page/p
#: C/radiobutton.c.page:26
msgid "These radiobuttons report their activity in the terminal."
msgstr "이 RadioButton은 터미널의 활동을 알려줍니다."

#. (itstool) path: page/code
#: C/radiobutton.c.page:28
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Signal handler for the \"toggled\" signal of the RadioButton*/\n"
"static void\n"
"button_toggled_cb (GtkWidget *button,\n"
"                   gpointer   user_data)\n"
"{\n"
"  char *b_state;\n"
"  const char *button_label;\n"
"\n"
"  if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (button)))\n"
"          b_state = \"on\";\n"
"  else {\n"
"          b_state = \"off\";\n"
"          g_print (\"\\n\");\n"
"  }\n"
"\n"
"  button_label = gtk_button_get_label (GTK_BUTTON (button));\n"
"\n"
"  g_print (\"%s was turned %s\\n\", button_label, b_state);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"\n"
"  GtkWidget *button1;\n"
"  GtkWidget *button2;\n"
"  GtkWidget *button3;\n"
"\n"
"  /*Create a window with a set title and default size.\n"
"  Also, set a border width for the amount of space to leave\n"
"  inside the window*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"RadioButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 250, 100);\n"
"  gtk_container_set_border_width (GTK_CONTAINER(window), 20);\n"
"\n"
"\n"
"  /*Create an initial radio button*/\n"
"  button1 = gtk_radio_button_new_with_label (NULL, \"Button 1\");\n"
"\n"
"  /*Create a second radio button, and add it to the same group as Button 1*/\n"
"  button2 = gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (button1), \n"
"                                                         \"Button 2\");\n"
"\n"
"  /*Create a third button, and add it to the same group as Button 1*/\n"
"  button3 = gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (button1), \n"
"                                                         \"Button 3\");\n"
"\n"
"\n"
"  /*Create a grid, attach the buttons, and position them accordingly*/\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_attach (GTK_GRID (grid), button1, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), button2, 0, 1, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), button3, 0, 2, 1, 1);\n"
"\n"
"  /*Be sure to set the initial state of each button*/\n"
"  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button2), TRUE);\n"
"  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button1), FALSE);\n"
"  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button3), FALSE);\n"
"\n"
"  /*Connect the signal handlers (aka Callback functions) to the buttons*/\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (button1), \"toggled\", \n"
"                    G_CALLBACK (button_toggled_cb), window);\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (button2), \"toggled\", \n"
"                    G_CALLBACK (button_toggled_cb), window);\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (button3), \"toggled\", \n"
"                    G_CALLBACK (button_toggled_cb), window);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Signal handler for the \"toggled\" signal of the RadioButton*/\n"
"static void\n"
"button_toggled_cb (GtkWidget *button,\n"
"                   gpointer   user_data)\n"
"{\n"
"  char *b_state;\n"
"  const char *button_label;\n"
"\n"
"  if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (button)))\n"
"          b_state = \"on\";\n"
"  else {\n"
"          b_state = \"off\";\n"
"          g_print (\"\\n\");\n"
"  }\n"
"\n"
"  button_label = gtk_button_get_label (GTK_BUTTON (button));\n"
"\n"
"  g_print (\"%s was turned %s\\n\", button_label, b_state);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"\n"
"  GtkWidget *button1;\n"
"  GtkWidget *button2;\n"
"  GtkWidget *button3;\n"
"\n"
"  /*Create a window with a set title and default size.\n"
"  Also, set a border width for the amount of space to leave\n"
"  inside the window*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"RadioButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 250, 100);\n"
"  gtk_container_set_border_width (GTK_CONTAINER(window), 20);\n"
"\n"
"\n"
"  /*Create an initial radio button*/\n"
"  button1 = gtk_radio_button_new_with_label (NULL, \"Button 1\");\n"
"\n"
"  /*Create a second radio button, and add it to the same group as Button 1*/\n"
"  button2 = gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (button1), \n"
"                                                         \"Button 2\");\n"
"\n"
"  /*Create a third button, and add it to the same group as Button 1*/\n"
"  button3 = gtk_radio_button_new_with_label_from_widget (GTK_RADIO_BUTTON (button1), \n"
"                                                         \"Button 3\");\n"
"\n"
"\n"
"  /*Create a grid, attach the buttons, and position them accordingly*/\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_attach (GTK_GRID (grid), button1, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), button2, 0, 1, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), button3, 0, 2, 1, 1);\n"
"\n"
"  /*Be sure to set the initial state of each button*/\n"
"  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button2), TRUE);\n"
"  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button1), FALSE);\n"
"  gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (button3), FALSE);\n"
"\n"
"  /*Connect the signal handlers (aka Callback functions) to the buttons*/\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (button1), \"toggled\", \n"
"                    G_CALLBACK (button_toggled_cb), window);\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (button2), \"toggled\", \n"
"                    G_CALLBACK (button_toggled_cb), window);\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (button3), \"toggled\", \n"
"                    G_CALLBACK (button_toggled_cb), window);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/radiobutton.c.page:38 C/switch.c.page:36
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkSwitch.html"
"\">GtkSwitch</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkSwitch.html"
"\">GtkSwitch</link>"

#. (itstool) path: info/title
#: C/radiobutton.js.page:8
msgctxt "text"
msgid "RadioButton (JavaScript)"
msgstr "RadioButton (JavaScript)"

#. (itstool) path: info/desc
#: C/radiobutton.js.page:18
msgid "Only one can be selected at a time"
msgstr "한번에 하나만 선택할 수 있습니다"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/radiobutton.js.page:22
msgctxt "_"
msgid ""
"external ref='media/radiobuttontravel.png' "
"md5='0c5f01ee160bb42716ccf5dccbd080c0'"
msgstr ""

#. (itstool) path: page/p
#: C/radiobutton.js.page:23
msgid ""
"RadioButtons are named after old-style car radios, which had buttons for "
"switching between channel presets. Because the radio could only be tuned to "
"one station at a time, only one button could be pressed in at a time; if you "
"pressed a new one, the one that was already pressed in would pop back out. "
"That's how these buttons work, too."
msgstr ""
"RadioButton 이름은 미리 설정해둔 채널을 전환할 때 사용하는 단추의 모양새 동작"
"에 착안하여 구식 자동차 라디오에서 왔습니다. 라디오 채널 설정은 한번에 하나"
"만 할 수 있기 때문에, 오직 하나의 단추만 눌립니다. 새 단추를 누르면 먼저 눌려"
"있던 단추는 도로 튀어나옵니다. 이게 바로 라디오 단추가 동작하는 방식입니다."

#. (itstool) path: page/p
#: C/radiobutton.js.page:24
msgid ""
"Each RadioButton needs a text label and a group. Only one button in a group "
"can be selected at a time. You don't name each group; you just set new "
"RadioButtons to be part of the same group as an existing one. If you create "
"a new one outside of a group, it automatically creates a new group for it to "
"be part of."
msgstr ""
"각 라디오 단추는 텍스트 레이블을 넣고 그룹으로 묶어야합니다. 그룹에서는 한번"
"에 하나의 단추만 선택할 수 있습니다. 각 그룹에 이름을 달 수는 없습니다. 새 "
"RadioButton은 기존의 단추와 마찬가지로 동일한 그룹의 일부로 설정합니다. 그룹"
"의 밖에 새 단추를 넣으면, 이 단추는 자동으로 새 그룹의 일부가 됩니다."

#. (itstool) path: section/code
#: C/radiobutton.js.page:41
#, no-wrap
msgid ""
"\n"
"const RadioButtonExample = new Lang.Class({\n"
"    Name: 'RadioButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsradiobutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const RadioButtonExample = new Lang.Class({\n"
"    Name: 'RadioButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsradiobutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/radiobutton.js.page:67 C/togglebutton.js.page:67
msgid ""
"All the code for this sample goes in the RadioButtonExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.Application.html\">Gtk.Application</link> for our widgets and window to "
"go in."
msgstr ""
"이 예제의 모든 코드는 RadioButtonExample 클래스에 들어갑니다. 위 코드는 위젯"
"과 창이 들어가는 <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.Application.html\">Gtk.Application</link>을 만듭니다."

#. (itstool) path: section/code
#: C/radiobutton.js.page:68
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Travel Planning\"});\n"
msgstr ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Travel Planning\"});\n"

#. (itstool) path: section/title
#: C/radiobutton.js.page:83
msgid "Creating the radiobuttons"
msgstr "RadioButton 만들기"

#. (itstool) path: section/code
#: C/radiobutton.js.page:84
#, no-wrap
msgid ""
"\n"
"        // Create a label for the first group of buttons\n"
"        this._placeLabel = new Gtk.Label ({label: \"Where would you like to travel to?\"});\n"
msgstr ""
"\n"
"        // Create a label for the first group of buttons\n"
"        this._placeLabel = new Gtk.Label ({label: \"Where would you like to travel to?\"});\n"

#. (itstool) path: section/p
#: C/radiobutton.js.page:89
msgid ""
"We use a <link xref=\"label.js\">Gtk.Label</link> to set each group of "
"RadioButtons apart. Nothing will stop you from putting RadioButtons from all "
"different groups wherever you want, so if you want people to know which ones "
"go together you need to organize things accordingly."
msgstr ""
"그룹에 있는 각 RadioButton 부분 부분마다 <link xref=\"label.js\">Gtk.Label</"
"link>을 설정 용도로 사용합니다. 원하는 어디든 모든 다른 그룹에 RadioButton을 "
"넣지 못하게 하진 않습니다. 따라서 사용자가 어떤 단추를 한 묶음으로 두었는지 "
"알 수 있게 하려면 묶음별로 정리해야합니다."

#. (itstool) path: section/code
#: C/radiobutton.js.page:91
#, no-wrap
msgid ""
"\n"
"        // Create three radio buttons three different ways\n"
"        this._place1 = new Gtk.RadioButton ({label: \"The Beach\"});\n"
"\n"
"        this._place2 = Gtk.RadioButton.new_from_widget (this._place1);\n"
"        this._place2.set_label (\"The Moon\");\n"
"\n"
"        this._place3 = Gtk.RadioButton.new_with_label_from_widget (this._place1, \"Antarctica\");\n"
"        // this._place3.set_active (true);\n"
msgstr ""
"\n"
"        // Create three radio buttons three different ways\n"
"        this._place1 = new Gtk.RadioButton ({label: \"The Beach\"});\n"
"\n"
"        this._place2 = Gtk.RadioButton.new_from_widget (this._place1);\n"
"        this._place2.set_label (\"The Moon\");\n"
"\n"
"        this._place3 = Gtk.RadioButton.new_with_label_from_widget (this._place1, \"Antarctica\");\n"
"        // this._place3.set_active (true);\n"

#. (itstool) path: section/p
#: C/radiobutton.js.page:102
msgid ""
"Here are three different ways to create RadioButtons. The first is the usual "
"way, where we create a new Gtk.RadioButton and assign its properties at the "
"same time. The second and third use functions which automatically handle "
"some of the properties; new_from_widget takes a single argument, the "
"RadioButton that you want to put this new one in the same group as. "
"Meanwhile, new_with_label_from_widget takes that and the RadioButton's label "
"at the same time."
msgstr ""
"RadioButton을 만드는 방법은 세가지가 있습니다. 첫번째는 Gtk.RadioButton을 새"
"로 만들고 속성을 동시에 지정하는 일반적인 방법, 두번째와 세번째는 일부 속성 "
"값을 자동으로 처리하는 함수를 사용하는 방법입니다. new_from_widget은 동일한 "
"그룹에 새 단추를 넣으려고 할 때 넣을 RadioButton 단일 인자를 취하지만, "
"new_with_label_from_widget은 RadioButton 레이블을 함께 취합니다."

#. (itstool) path: section/p
#: C/radiobutton.js.page:103
msgid ""
"The first RadioButton in a group is the one that's selected by default. Try "
"uncommenting the last line in this sample code to see how you can set a "
"different one to be the default selection."
msgstr ""
"그룹의 처음 RadioButton은 기본으로 선택하는 항목입니다. 이 예제 코드의 마지"
"막 줄 주석 표시를 제거해보셔서 다른 항목을 어떻게 기본으로 선택할 수 있는지 "
"확인해보십시오."

#. (itstool) path: section/code
#: C/radiobutton.js.page:105
#, no-wrap
msgid ""
"\n"
"        // Create a label for the second group of buttons\n"
"        this._thingLabel = new Gtk.Label ({label: \"And what would you like to bring?\" });\n"
"\n"
"        // Create three more radio buttons\n"
"        this._thing1 = new Gtk.RadioButton ({label: \"Penguins\" });\n"
"        this._thing2 = new Gtk.RadioButton ({label: \"Sunscreen\", group: this._thing1 });\n"
"        this._thing3 = new Gtk.RadioButton ({label: \"A spacesuit\", group: this._thing1 });\n"
msgstr ""
"\n"
"        // Create a label for the second group of buttons\n"
"        this._thingLabel = new Gtk.Label ({label: \"And what would you like to bring?\" });\n"
"\n"
"        // Create three more radio buttons\n"
"        this._thing1 = new Gtk.RadioButton ({label: \"Penguins\" });\n"
"        this._thing2 = new Gtk.RadioButton ({label: \"Sunscreen\", group: this._thing1 });\n"
"        this._thing3 = new Gtk.RadioButton ({label: \"A spacesuit\", group: this._thing1 });\n"

#. (itstool) path: section/p
#: C/radiobutton.js.page:114
msgid ""
"Here we create the label for the second group of buttons, and then create "
"them all the same way."
msgstr ""
"여기서 그룹의 두번째 단추에 레이블을 만들어넣고, 나머지 단추에 대해서도 동일"
"한 방식으로 만듭니다."

#. (itstool) path: section/title
#: C/radiobutton.js.page:118 C/textview.js.page:132
msgid "Creating the rest of the user interface"
msgstr "사용자 인터페이스 나머지 부분 만들기"

#. (itstool) path: section/code
#: C/radiobutton.js.page:120
#, no-wrap
msgid ""
"\n"
"        // Create a stock OK button\n"
"        this._okButton = new Gtk.Button ({\n"
"            label: 'gtk-ok',\n"
"            use_stock: 'true',\n"
"            halign: Gtk.Align.END });\n"
"\n"
"        // Connect the button to the function which handles clicking it\n"
"        this._okButton.connect ('clicked', Lang.bind (this, this._okClicked));\n"
msgstr ""
"\n"
"        // Create a stock OK button\n"
"        this._okButton = new Gtk.Button ({\n"
"            label: 'gtk-ok',\n"
"            use_stock: 'true',\n"
"            halign: Gtk.Align.END });\n"
"\n"
"        // Connect the button to the function which handles clicking it\n"
"        this._okButton.connect ('clicked', Lang.bind (this, this._okClicked));\n"

#. (itstool) path: section/p
#: C/radiobutton.js.page:130
msgid ""
"This code creates a <link xref=\"button.js\">Gtk.Button</link> and binds it "
"to a function which will show people a silly message when they click OK, "
"depending on which RadioButtons were selected."
msgstr ""
"이 코드는 <link xref=\"button.js\">Gtk.Button</link>을 만들고 함수에 바인딩하"
"여, 사용자가 확인을 누르면 어떤 RadioButton을 선택했느냐에 따라 유치한 메시지"
"를 보여줍니다."

#. (itstool) path: section/p
#: C/radiobutton.js.page:131
msgid ""
"To make sure the button's \"OK\" label shows up properly in every language "
"that GNOME is translated into, remember to use one of Gtk's <link href="
"\"https://developer.gnome.org/gtk3/3.4/gtk3-Stock-Items.html\">stock button "
"types</link>."
msgstr ""
"단추의 \"확인\" 레이블을 그놈에서 번역한대로 각 언어로 올바르게 나타나게 하려"
"면, GTK <link href=\"https://developer.gnome.org/gtk3/3.4/gtk3-Stock-Items."
"html\">스톡 단추 형식</link> 활용 방식을 기억에서 되살려보십시오."

#. (itstool) path: section/code
#: C/radiobutton.js.page:133
#, no-wrap
msgid ""
"\n"
"        // Create a grid to put the \"place\" items in\n"
"        this._places = new Gtk.Grid ();\n"
"\n"
"        // Attach the \"place\" items to the grid\n"
"        this._places.attach (this._placeLabel, 0, 0, 1, 1);\n"
"        this._places.attach (this._place1, 0, 1, 1, 1);\n"
"        this._places.attach (this._place2, 0, 2, 1, 1);\n"
"        this._places.attach (this._place3, 0, 3, 1, 1);\n"
"\n"
"        // Create a grid to put the \"thing\" items in\n"
"        this._things = new Gtk.Grid ({ margin_top: 50 });\n"
"\n"
"        // Attach the \"thing\" items to the grid\n"
"        this._things.attach (this._thingLabel, 0, 0, 1, 1);\n"
"        this._things.attach (this._thing1, 0, 1, 1, 1);\n"
"        this._things.attach (this._thing2, 0, 2, 1, 1);\n"
"        this._things.attach (this._thing3, 0, 3, 1, 1);\n"
"\n"
"        // Create a grid to put everything in\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_left: 40,\n"
"            margin_right: 50 });\n"
"\n"
"        // Attach everything to the grid\n"
"        this._grid.attach (this._places, 0, 0, 1, 1);\n"
"        this._grid.attach (this._things, 0, 1, 1, 1);\n"
"        this._grid.attach (this._okButton, 0, 2, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
msgstr ""
"\n"
"        // Create a grid to put the \"place\" items in\n"
"        this._places = new Gtk.Grid ();\n"
"\n"
"        // Attach the \"place\" items to the grid\n"
"        this._places.attach (this._placeLabel, 0, 0, 1, 1);\n"
"        this._places.attach (this._place1, 0, 1, 1, 1);\n"
"        this._places.attach (this._place2, 0, 2, 1, 1);\n"
"        this._places.attach (this._place3, 0, 3, 1, 1);\n"
"\n"
"        // Create a grid to put the \"thing\" items in\n"
"        this._things = new Gtk.Grid ({ margin_top: 50 });\n"
"\n"
"        // Attach the \"thing\" items to the grid\n"
"        this._things.attach (this._thingLabel, 0, 0, 1, 1);\n"
"        this._things.attach (this._thing1, 0, 1, 1, 1);\n"
"        this._things.attach (this._thing2, 0, 2, 1, 1);\n"
"        this._things.attach (this._thing3, 0, 3, 1, 1);\n"
"\n"
"        // Create a grid to put everything in\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_left: 40,\n"
"            margin_right: 50 });\n"
"\n"
"        // Attach everything to the grid\n"
"        this._grid.attach (this._places, 0, 0, 1, 1);\n"
"        this._grid.attach (this._things, 0, 1, 1, 1);\n"
"        this._grid.attach (this._okButton, 0, 2, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"

#. (itstool) path: section/p
#: C/radiobutton.js.page:167
msgid ""
"We use a separate <link xref=\"grid.js\">Gtk.Grid</link> to organize each "
"group of radio buttons. This way we can change the layout with less fuss "
"later on. The second Grid has a margin on top, to visually separate the two "
"sets of choices."
msgstr ""
"라디오 단추를 각 그룹으로 묶는 용도로 <link xref=\"grid.js\">Gtk.Grid</link> "
"를 따로 사용합니다. 이 방식대로라면 나중에 덜 난리나는 방식으로 배치를 바꿀 "
"수 있습니다. 두번째 그리드는 상단에 여백을 두었는데 두 선택 그룹을 눈으로 보"
"기에 따로 나뉘어 보기에 한 부분입니다."

#. (itstool) path: section/p
#: C/radiobutton.js.page:168
msgid ""
"After we've organized them, we put them into a third, master Grid, along "
"with the OK button. Then we attach that to the window."
msgstr ""
"이렇게 정돈한 다음에는 세번째로 마스터 그리드를 넣고, 그 안에 확인 단추를 넣"
"습니다. 이 과정이 끝나면 마스터 그리드를 창에 넣습니다."

#. (itstool) path: section/p
#: C/radiobutton.js.page:176
msgid ""
"Finally, we tell the window and everything inside it to become visible when "
"the application is run."
msgstr ""
"마지막으로 프로그램을 실행할 때 창과 창에 있는 모든 요소를 나타내라고 하겠습"
"니다."

#. (itstool) path: section/code
#: C/radiobutton.js.page:182
#, no-wrap
msgid ""
"\n"
"    _okClicked: function () {\n"
"\n"
"        // Create a popup that shows a silly message\n"
"        this._travel = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            message_type: Gtk.MessageType.OTHER,\n"
"            buttons: Gtk.ButtonsType.OK,\n"
"            text: this._messageText() });\n"
"\n"
"        // Show the popup\n"
"        this._travel.show();\n"
"\n"
"        // Bind the OK button to the function that closes the popup\n"
"        this._travel.connect (\"response\", Lang.bind (this, this._clearTravelPopUp));\n"
"\n"
"    },\n"
msgstr ""
"\n"
"    _okClicked: function () {\n"
"\n"
"        // Create a popup that shows a silly message\n"
"        this._travel = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            message_type: Gtk.MessageType.OTHER,\n"
"            buttons: Gtk.ButtonsType.OK,\n"
"            text: this._messageText() });\n"
"\n"
"        // Show the popup\n"
"        this._travel.show();\n"
"\n"
"        // Bind the OK button to the function that closes the popup\n"
"        this._travel.connect (\"response\", Lang.bind (this, this._clearTravelPopUp));\n"
"\n"
"    },\n"

#. (itstool) path: section/p
#: C/radiobutton.js.page:201
msgid ""
"When you click OK, a <link xref=\"messagedialog.js\">Gtk.MessageDialog</"
"link> appears. This function creates and displays the popup window, then "
"binds its OK button to a function that closes it. What text appears in the "
"popup depends on the _messageText() function, which returns a different "
"value depending on which set of options you chose."
msgstr ""
"확인을 누르면 <link xref=\"messagedialog.js\">Gtk.MessageDialog</link>가 나타"
"납니다. 이 함수는 팝업 창을 만들어 띄운 후 창을 닫는 확인 단추에 함수를 연결"
"합니다. 여러분이 선택한 옵션 설정에 따라 다른 값을 반환하는 _messageText() 함"
"수에서 반환하는 값에 따라 팝업 창에 나타나는 텍스트가 달라집니다."

#. (itstool) path: section/code
#: C/radiobutton.js.page:203
#, no-wrap
msgid ""
"\n"
"    _messageText: function() {\n"
"\n"
"        // Create a silly message for the popup depending on what you selected\n"
"        var stringMessage = \"\";\n"
"\n"
"        if (this._place1.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"Penguins love the beach, too!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"Make sure to put on that sunscreen!\";\n"
"\n"
"            else stringMessage = \"Are you going to the beach in space?\";\n"
"\n"
"        }\n"
"\n"
"        else if (this._place2.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"The penguins will take over the moon!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"A lack of sunscreen will be the least of your problems!\";\n"
"\n"
"            else stringMessage = \"You'll probably want a spaceship, too!\";\n"
"        }\n"
"\n"
"        else if (this._place3.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"The penguins will be happy to be back home!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"Antarctic sunbathing may be hazardous to your health!\";\n"
"\n"
"            else stringMessage = \"Try bringing a parka instead!\";\n"
"        }\n"
"\n"
"        return stringMessage;\n"
"\n"
"    },\n"
msgstr ""
"\n"
"    _messageText: function() {\n"
"\n"
"        // Create a silly message for the popup depending on what you selected\n"
"        var stringMessage = \"\";\n"
"\n"
"        if (this._place1.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"Penguins love the beach, too!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"Make sure to put on that sunscreen!\";\n"
"\n"
"            else stringMessage = \"Are you going to the beach in space?\";\n"
"\n"
"        }\n"
"\n"
"        else if (this._place2.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"The penguins will take over the moon!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"A lack of sunscreen will be the least of your problems!\";\n"
"\n"
"            else stringMessage = \"You'll probably want a spaceship, too!\";\n"
"        }\n"
"\n"
"        else if (this._place3.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"The penguins will be happy to be back home!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"Antarctic sunbathing may be hazardous to your health!\";\n"
"\n"
"            else stringMessage = \"Try bringing a parka instead!\";\n"
"        }\n"
"\n"
"        return stringMessage;\n"
"\n"
"    },\n"

#. (itstool) path: section/p
#: C/radiobutton.js.page:247
msgid ""
"The get_active() method is how we can tell which RadioButton's pressed in. "
"This function returns a different silly message depending on which set of "
"buttons was pressed. Its return value is used as the MessageDialog's text "
"property."
msgstr ""
"get_active() 메서드는 지금 눌린 RadioButton이 뭔지 알아볼 수 있는 수단입니"
"다. 이 함수에는 어떤 단추를 눌렀느냐에 따라 각기 다른 유치한 메시지를 반환합"
"니다. 반환 값은 MessageDialog의 텍스트 속성 값으로 활용합니다."

#. (itstool) path: section/code
#: C/radiobutton.js.page:249
#, no-wrap
msgid ""
"\n"
"    _clearTravelPopUp: function () {\n"
"\n"
"        this._travel.destroy();\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _clearTravelPopUp: function () {\n"
"\n"
"        this._travel.destroy();\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/radiobutton.js.page:258
msgid ""
"This function is called when the MessageDialog's OK button is pressed. It "
"simply makes the popup go away."
msgstr "이 함수는 MessageDialog의 확인 단추를 누를 때 호출합니다."

#. (itstool) path: section/code
#: C/radiobutton.js.page:260
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new RadioButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Run the application\n"
"let app = new RadioButtonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/radiobutton.js.page:265 C/togglebutton.js.page:144
msgid ""
"Finally, we create a new instance of the finished RadioButtonExample class, "
"and set the application running."
msgstr ""
"마지막으로, 마무리 지은 RadioButtonExample 클래스의 새 인스턴스를 만들고 프로"
"그램 실행을 설정하겠습니다."

#. (itstool) path: section/code
#: C/radiobutton.js.page:270
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const RadioButtonExample = new Lang.Class({\n"
"    Name: 'RadioButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsradiobutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Travel Planning\"});\n"
"\n"
"        // Create a label for the first group of buttons\n"
"        this._placeLabel = new Gtk.Label ({label: \"Where would you like to travel to?\"});\n"
"\n"
"        // Create three radio buttons three different ways\n"
"        this._place1 = new Gtk.RadioButton ({label: \"The Beach\"});\n"
"\n"
"        this._place2 = Gtk.RadioButton.new_from_widget (this._place1);\n"
"        this._place2.set_label (\"The Moon\");\n"
"\n"
"        this._place3 = Gtk.RadioButton.new_with_label_from_widget (this._place1, \"Antarctica\");\n"
"        // this._place3.set_active (true);\n"
"\n"
"        // Create a label for the second group of buttons\n"
"        this._thingLabel = new Gtk.Label ({label: \"And what would you like to bring?\" });\n"
"\n"
"        // Create three more radio buttons\n"
"        this._thing1 = new Gtk.RadioButton ({label: \"Penguins\" });\n"
"        this._thing2 = new Gtk.RadioButton ({label: \"Sunscreen\", group: this._thing1 });\n"
"        this._thing3 = new Gtk.RadioButton ({label: \"A spacesuit\", group: this._thing1 });\n"
"\n"
"        // Create a stock OK button\n"
"        this._okButton = new Gtk.Button ({\n"
"            label: 'gtk-ok',\n"
"            use_stock: 'true',\n"
"            halign: Gtk.Align.END });\n"
"\n"
"        // Connect the button to the function which handles clicking it\n"
"        this._okButton.connect ('clicked', Lang.bind (this, this._okClicked));\n"
"\n"
"        // Create a grid to put the \"place\" items in\n"
"        this._places = new Gtk.Grid ();\n"
"\n"
"        // Attach the \"place\" items to the grid\n"
"        this._places.attach (this._placeLabel, 0, 0, 1, 1);\n"
"        this._places.attach (this._place1, 0, 1, 1, 1);\n"
"        this._places.attach (this._place2, 0, 2, 1, 1);\n"
"        this._places.attach (this._place3, 0, 3, 1, 1);\n"
"\n"
"        // Create a grid to put the \"thing\" items in\n"
"        this._things = new Gtk.Grid ({ margin_top: 50 });\n"
"\n"
"        // Attach the \"thing\" items to the grid\n"
"        this._things.attach (this._thingLabel, 0, 0, 1, 1);\n"
"        this._things.attach (this._thing1, 0, 1, 1, 1);\n"
"        this._things.attach (this._thing2, 0, 2, 1, 1);\n"
"        this._things.attach (this._thing3, 0, 3, 1, 1);\n"
"\n"
"        // Create a grid to put everything in\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_left: 40,\n"
"            margin_right: 50 });\n"
"\n"
"        // Attach everything to the grid\n"
"        this._grid.attach (this._places, 0, 0, 1, 1);\n"
"        this._grid.attach (this._things, 0, 1, 1, 1);\n"
"        this._grid.attach (this._okButton, 0, 2, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _okClicked: function () {\n"
"\n"
"        // Create a popup that shows a silly message\n"
"        this._travel = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            message_type: Gtk.MessageType.OTHER,\n"
"            buttons: Gtk.ButtonsType.OK,\n"
"            text: this._messageText() });\n"
"\n"
"        // Show the popup\n"
"        this._travel.show();\n"
"\n"
"        // Bind the OK button to the function that closes the popup\n"
"        this._travel.connect (\"response\", Lang.bind (this, this._clearTravelPopUp));\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _messageText: function() {\n"
"\n"
"        // Create a silly message for the popup depending on what you selected\n"
"        var stringMessage = \"\";\n"
"\n"
"        if (this._place1.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"Penguins love the beach, too!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"Make sure to put on that sunscreen!\";\n"
"\n"
"            else stringMessage = \"Are you going to the beach in space?\";\n"
"\n"
"        }\n"
"\n"
"        else if (this._place2.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"The penguins will take over the moon!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"A lack of sunscreen will be the least of your problems!\";\n"
"\n"
"            else stringMessage = \"You'll probably want a spaceship, too!\";\n"
"        }\n"
"\n"
"        else if (this._place3.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"The penguins will be happy to be back home!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"Antarctic sunbathing may be hazardous to your health!\";\n"
"\n"
"            else stringMessage = \"Try bringing a parka instead!\";\n"
"        }\n"
"\n"
"        return stringMessage;\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"\n"
"    _clearTravelPopUp: function () {\n"
"\n"
"        this._travel.destroy();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new RadioButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const RadioButtonExample = new Lang.Class({\n"
"    Name: 'RadioButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsradiobutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Travel Planning\"});\n"
"\n"
"        // Create a label for the first group of buttons\n"
"        this._placeLabel = new Gtk.Label ({label: \"Where would you like to travel to?\"});\n"
"\n"
"        // Create three radio buttons three different ways\n"
"        this._place1 = new Gtk.RadioButton ({label: \"The Beach\"});\n"
"\n"
"        this._place2 = Gtk.RadioButton.new_from_widget (this._place1);\n"
"        this._place2.set_label (\"The Moon\");\n"
"\n"
"        this._place3 = Gtk.RadioButton.new_with_label_from_widget (this._place1, \"Antarctica\");\n"
"        // this._place3.set_active (true);\n"
"\n"
"        // Create a label for the second group of buttons\n"
"        this._thingLabel = new Gtk.Label ({label: \"And what would you like to bring?\" });\n"
"\n"
"        // Create three more radio buttons\n"
"        this._thing1 = new Gtk.RadioButton ({label: \"Penguins\" });\n"
"        this._thing2 = new Gtk.RadioButton ({label: \"Sunscreen\", group: this._thing1 });\n"
"        this._thing3 = new Gtk.RadioButton ({label: \"A spacesuit\", group: this._thing1 });\n"
"\n"
"        // Create a stock OK button\n"
"        this._okButton = new Gtk.Button ({\n"
"            label: 'gtk-ok',\n"
"            use_stock: 'true',\n"
"            halign: Gtk.Align.END });\n"
"\n"
"        // Connect the button to the function which handles clicking it\n"
"        this._okButton.connect ('clicked', Lang.bind (this, this._okClicked));\n"
"\n"
"        // Create a grid to put the \"place\" items in\n"
"        this._places = new Gtk.Grid ();\n"
"\n"
"        // Attach the \"place\" items to the grid\n"
"        this._places.attach (this._placeLabel, 0, 0, 1, 1);\n"
"        this._places.attach (this._place1, 0, 1, 1, 1);\n"
"        this._places.attach (this._place2, 0, 2, 1, 1);\n"
"        this._places.attach (this._place3, 0, 3, 1, 1);\n"
"\n"
"        // Create a grid to put the \"thing\" items in\n"
"        this._things = new Gtk.Grid ({ margin_top: 50 });\n"
"\n"
"        // Attach the \"thing\" items to the grid\n"
"        this._things.attach (this._thingLabel, 0, 0, 1, 1);\n"
"        this._things.attach (this._thing1, 0, 1, 1, 1);\n"
"        this._things.attach (this._thing2, 0, 2, 1, 1);\n"
"        this._things.attach (this._thing3, 0, 3, 1, 1);\n"
"\n"
"        // Create a grid to put everything in\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_left: 40,\n"
"            margin_right: 50 });\n"
"\n"
"        // Attach everything to the grid\n"
"        this._grid.attach (this._places, 0, 0, 1, 1);\n"
"        this._grid.attach (this._things, 0, 1, 1, 1);\n"
"        this._grid.attach (this._okButton, 0, 2, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _okClicked: function () {\n"
"\n"
"        // Create a popup that shows a silly message\n"
"        this._travel = new Gtk.MessageDialog ({\n"
"            transient_for: this._window,\n"
"            modal: true,\n"
"            message_type: Gtk.MessageType.OTHER,\n"
"            buttons: Gtk.ButtonsType.OK,\n"
"            text: this._messageText() });\n"
"\n"
"        // Show the popup\n"
"        this._travel.show();\n"
"\n"
"        // Bind the OK button to the function that closes the popup\n"
"        this._travel.connect (\"response\", Lang.bind (this, this._clearTravelPopUp));\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _messageText: function() {\n"
"\n"
"        // Create a silly message for the popup depending on what you selected\n"
"        var stringMessage = \"\";\n"
"\n"
"        if (this._place1.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"Penguins love the beach, too!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"Make sure to put on that sunscreen!\";\n"
"\n"
"            else stringMessage = \"Are you going to the beach in space?\";\n"
"\n"
"        }\n"
"\n"
"        else if (this._place2.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"The penguins will take over the moon!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"A lack of sunscreen will be the least of your problems!\";\n"
"\n"
"            else stringMessage = \"You'll probably want a spaceship, too!\";\n"
"        }\n"
"\n"
"        else if (this._place3.get_active()) {\n"
"\n"
"            if (this._thing1.get_active())\n"
"                stringMessage = \"The penguins will be happy to be back home!\";\n"
"\n"
"            else if (this._thing2.get_active())\n"
"                stringMessage = \"Antarctic sunbathing may be hazardous to your health!\";\n"
"\n"
"            else stringMessage = \"Try bringing a parka instead!\";\n"
"        }\n"
"\n"
"        return stringMessage;\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"\n"
"    _clearTravelPopUp: function () {\n"
"\n"
"        this._travel.destroy();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new RadioButtonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/radiobutton.js.page:278 C/statusbar.js.page:225 C/textview.js.page:252
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Button.html"
"\">Gtk.Button</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Button.html"
"\">Gtk.Button</link>"

#. (itstool) path: item/p
#: C/radiobutton.js.page:279 C/scale.js.page:213 C/spinbutton.js.page:204
#: C/switch.js.page:270 C/textview.js.page:253 C/togglebutton.js.page:157
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Grid.html"
"\">Gtk.Grid</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Grid.html"
"\">Gtk.Grid</link>"

#. (itstool) path: item/p
#: C/radiobutton.js.page:280 C/scale.js.page:214 C/spinbutton.js.page:205
#: C/switch.js.page:272 C/textview.js.page:254
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Label.html"
"\">Gtk.Label</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Label.html"
"\">Gtk.Label</link>"

#. (itstool) path: item/p
#: C/radiobutton.js.page:281 C/textview.js.page:255
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.RadioButton."
"html\">Gtk.RadioButton</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.RadioButton."
"html\">Gtk.RadioButton</link>"

#. (itstool) path: info/title
#: C/radiobutton.py.page:8
msgctxt "text"
msgid "RadioButton (Python)"
msgstr "RadioButton (Python)"

#. (itstool) path: info/desc
#: C/radiobutton.py.page:20
msgid "Mutually exclusive buttons."
msgstr "상호 배타적 관계의 단추입니다."

#. (itstool) path: page/p
#: C/radiobutton.py.page:25
msgid ""
"Three RadioButtons. You can see in the terminal if they are turned off or on."
msgstr ""
"RadioButton이 세개가 있습니다. 터미널에서 켜고 끈 단추를 볼 수 있습니다."

#. (itstool) path: section/code
#: C/radiobutton.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"RadioButton Example\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(20)\n"
"\n"
"        # a new radiobutton with a label\n"
"        button1 = Gtk.RadioButton(label=\"Button 1\")\n"
"        # connect the signal \"toggled\" emitted by the radiobutton\n"
"        # with the callback function toggled_cb\n"
"        button1.connect(\"toggled\", self.toggled_cb)\n"
"\n"
"        # another radiobutton, in the same group as button1\n"
"        button2 = Gtk.RadioButton.new_from_widget(button1)\n"
"        # with label \"Button 2\"\n"
"        button2.set_label(\"Button 2\")\n"
"        # connect the signal \"toggled\" emitted by the radiobutton\n"
"        # with the callback function toggled_cb\n"
"        button2.connect(\"toggled\", self.toggled_cb)\n"
"        # set button2 not active by default\n"
"        button2.set_active(False)\n"
"\n"
"        # another radiobutton, in the same group as button1,\n"
"        # with label \"Button 3\"\n"
"        button3 = Gtk.RadioButton.new_with_label_from_widget(\n"
"            button1, \"Button 3\")\n"
"        # connect the signal \"toggled\" emitted by the radiobutton\n"
"        # with the callback function toggled_cb\n"
"        button3.connect(\"toggled\", self.toggled_cb)\n"
"        # set button3 not active by default\n"
"        button3.set_active(False)\n"
"\n"
"        # a grid to place the buttons\n"
"        grid = Gtk.Grid.new()\n"
"        grid.attach(button1, 0, 0, 1, 1)\n"
"        grid.attach(button2, 0, 1, 1, 1)\n"
"        grid.attach(button3, 0, 2, 1, 1)\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # callback function\n"
"    def toggled_cb(self, button):\n"
"        # a string to describe the state of the button\n"
"        state = \"unknown\"\n"
"        # whenever the button is turned on, state is on\n"
"        if button.get_active():\n"
"            state = \"on\"\n"
"        # else state is off\n"
"        else:\n"
"            state = \"off\"\n"
"        # whenever the function is called (a button is turned on or off)\n"
"        # print on the terminal which button was turned on/off\n"
"        print(button.get_label() + \" was turned \" + state)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"RadioButton Example\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(20)\n"
"\n"
"        # a new radiobutton with a label\n"
"        button1 = Gtk.RadioButton(label=\"Button 1\")\n"
"        # connect the signal \"toggled\" emitted by the radiobutton\n"
"        # with the callback function toggled_cb\n"
"        button1.connect(\"toggled\", self.toggled_cb)\n"
"\n"
"        # another radiobutton, in the same group as button1\n"
"        button2 = Gtk.RadioButton.new_from_widget(button1)\n"
"        # with label \"Button 2\"\n"
"        button2.set_label(\"Button 2\")\n"
"        # connect the signal \"toggled\" emitted by the radiobutton\n"
"        # with the callback function toggled_cb\n"
"        button2.connect(\"toggled\", self.toggled_cb)\n"
"        # set button2 not active by default\n"
"        button2.set_active(False)\n"
"\n"
"        # another radiobutton, in the same group as button1,\n"
"        # with label \"Button 3\"\n"
"        button3 = Gtk.RadioButton.new_with_label_from_widget(\n"
"            button1, \"Button 3\")\n"
"        # connect the signal \"toggled\" emitted by the radiobutton\n"
"        # with the callback function toggled_cb\n"
"        button3.connect(\"toggled\", self.toggled_cb)\n"
"        # set button3 not active by default\n"
"        button3.set_active(False)\n"
"\n"
"        # a grid to place the buttons\n"
"        grid = Gtk.Grid.new()\n"
"        grid.attach(button1, 0, 0, 1, 1)\n"
"        grid.attach(button2, 0, 1, 1, 1)\n"
"        grid.attach(button3, 0, 2, 1, 1)\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # callback function\n"
"    def toggled_cb(self, button):\n"
"        # a string to describe the state of the button\n"
"        state = \"unknown\"\n"
"        # whenever the button is turned on, state is on\n"
"        if button.get_active():\n"
"            state = \"on\"\n"
"        # else state is off\n"
"        else:\n"
"            state = \"off\"\n"
"        # whenever the function is called (a button is turned on or off)\n"
"        # print on the terminal which button was turned on/off\n"
"        print(button.get_label() + \" was turned \" + state)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/radiobutton.py.page:35
msgid "Useful methods for a RadioButton widget"
msgstr "RadioButton 위젯에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/radiobutton.py.page:36
msgid ""
"In line 16 the signal <code>\"toggled\"</code> is connected to the callback "
"function <code>toggled_cb()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"16번째 줄에서 <code>\"toggled\"</code> 시그널은 <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code> 함수로  "
"<code>toggled_cb()</code> 콜백 함수에 연결했습니다. 더 자세한 설명은 <link "
"xref=\"signals-callbacks.py\"/>를 참조하십시오."

#. (itstool) path: section/p
#: C/radiobutton.py.page:38
msgid ""
"As seen in <link xref=\"properties.py\"/>, instead of <code>button1 = Gtk."
"RadioButton(label=\"Button 1\")</code> we could create the button and label "
"it with"
msgstr ""
"<link xref=\"properties.py\"/>에서 보신 바와 같이 <code>, button1 = Gtk."
"RadioButton(label=\"Button 1\")</code> 대신 다음 코드로 단추와 레이블을 만들 "
"수 있습니다"

#. (itstool) path: section/code
#: C/radiobutton.py.page:39
#, no-wrap
msgid ""
"\n"
"button1 = Gtk.RadioButton()\n"
"button1.set_label(\"Button 1\")."
msgstr ""
"\n"
"button1 = Gtk.RadioButton()\n"
"button1.set_label(\"Button 1\")."

#. (itstool) path: section/p
#: C/radiobutton.py.page:42
msgid ""
"Yet another way to create a new RadioButton with a label is <code>button1 = "
"Gtk.RadioButton.new_with_label(None, \"Button 1\")</code> (the first "
"argument is the group of the radiobuttons, which we can get with "
"<code>get_group()</code>, the second argument is the label)."
msgstr ""
"레이블을 붙여서 새 RadioButton을 만드는 또 다른 방법은 <code>button1 = Gtk."
"RadioButton.new_with_label(None, \"Button 1\")</code>(처음 인자는 "
"<code>get_group()</code>으로 가져올 수 있는 라디오 단추의 그룹, 두번째 인자"
"는 레이블입니다) 코드를 활용하는 방법입니다."

#. (itstool) path: item/p
#: C/radiobutton.py.page:51
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkRadioButton.html"
"\">GtkRadioButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkRadioButton.html"
"\">GtkRadioButton</link>"

#. (itstool) path: info/title
#: C/radiobutton.vala.page:8
msgctxt "text"
msgid "RadioButton (Vala)"
msgstr "RadioButton (Vala)"

#. (itstool) path: info/desc
#: C/radiobutton.vala.page:21
msgid "A choice from multiple CheckButtons."
msgstr "여러 CheckButton으로 선택합니다."

#. (itstool) path: page/p
#: C/radiobutton.vala.page:26
msgid "These RadioButtons report their activity in the terminal."
msgstr "이 RadioButton은 터미널에 해당 활동을 알립니다."

#. (itstool) path: page/code
#: C/radiobutton.vala.page:28
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"RadioButton Example\");\n"
"\n"
"\t\tthis.border_width = 20;\n"
"\t\tthis.set_default_size (250, 100);\n"
"\n"
"\t\t/* We demonstrate 3 different RadioButton creation methods */\n"
"\n"
"\t\t//Create a Radio Button\n"
"\t\tvar button1 = new Gtk.RadioButton (null);\n"
"\t\tbutton1.set_label (\"Button 1\");\n"
"\n"
"\t\t//Create a RadioButton with a label, and add it to the same group as button1.\n"
"\t\tvar button2 = new Gtk.RadioButton.with_label (button1.get_group(),\"Button 2\");\n"
"\n"
"\t\t//Create a RadioButton with a label, adding it to button1's group.\n"
"\t\tvar button3 = new Gtk.RadioButton.with_label_from_widget (button1, \"Button 3\");\n"
"\n"
"\t\t//Attach the buttons to a grid.\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.attach (button1, 0, 0, 1, 1);\n"
"\t\tgrid.attach (button2, 0, 1, 1, 1);\n"
"\t\tgrid.attach (button3, 0, 2, 1, 1);\n"
"\n"
"\t\t//Add the button to the window.\n"
"\t\tthis.add (grid);\n"
"\n"
"\t\t//Connect the signal handlers (aka. callback functions) to the buttons.\n"
"\t\tbutton1.toggled.connect (button_toggled_cb);\n"
"\t\tbutton2.toggled.connect (button_toggled_cb);\n"
"\t\tbutton3.toggled.connect (button_toggled_cb);\n"
"\t}\n"
"\n"
"\tvoid button_toggled_cb (Gtk.ToggleButton button)\n"
"\t{\n"
"\t\tvar state = \"unknown\";\n"
"\n"
"\t\tif (button.get_active ())\n"
"\t\t\tstate = \"on\";\n"
"\t\telse {\n"
"\t\t\tstate = \"off\";\n"
"\t\t\tprint (\"\\n\");\n"
"\t\t}\n"
"\t\tprint (button.get_label() + \" was turned \" + state + \"\\n\");\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t//Show all of the things.\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"RadioButton Example\");\n"
"\n"
"\t\tthis.border_width = 20;\n"
"\t\tthis.set_default_size (250, 100);\n"
"\n"
"\t\t/* We demonstrate 3 different RadioButton creation methods */\n"
"\n"
"\t\t//Create a Radio Button\n"
"\t\tvar button1 = new Gtk.RadioButton (null);\n"
"\t\tbutton1.set_label (\"Button 1\");\n"
"\n"
"\t\t//Create a RadioButton with a label, and add it to the same group as button1.\n"
"\t\tvar button2 = new Gtk.RadioButton.with_label (button1.get_group(),\"Button 2\");\n"
"\n"
"\t\t//Create a RadioButton with a label, adding it to button1's group.\n"
"\t\tvar button3 = new Gtk.RadioButton.with_label_from_widget (button1, \"Button 3\");\n"
"\n"
"\t\t//Attach the buttons to a grid.\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.attach (button1, 0, 0, 1, 1);\n"
"\t\tgrid.attach (button2, 0, 1, 1, 1);\n"
"\t\tgrid.attach (button3, 0, 2, 1, 1);\n"
"\n"
"\t\t//Add the button to the window.\n"
"\t\tthis.add (grid);\n"
"\n"
"\t\t//Connect the signal handlers (aka. callback functions) to the buttons.\n"
"\t\tbutton1.toggled.connect (button_toggled_cb);\n"
"\t\tbutton2.toggled.connect (button_toggled_cb);\n"
"\t\tbutton3.toggled.connect (button_toggled_cb);\n"
"\t}\n"
"\n"
"\tvoid button_toggled_cb (Gtk.ToggleButton button)\n"
"\t{\n"
"\t\tvar state = \"unknown\";\n"
"\n"
"\t\tif (button.get_active ())\n"
"\t\t\tstate = \"on\";\n"
"\t\telse {\n"
"\t\t\tstate = \"off\";\n"
"\t\t\tprint (\"\\n\");\n"
"\t\t}\n"
"\t\tprint (button.get_label() + \" was turned \" + state + \"\\n\");\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t//Show all of the things.\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.MyApplication\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/radiobutton.vala.page:33
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.RadioButton.html\">Gtk."
"RadioButton</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.RadioButton.html\">Gtk."
"RadioButton</link>"

#. (itstool) path: info/title
#: C/record-collection.js.page:8
msgctxt "text"
msgid "Record collection (JavaScript)"
msgstr "레코드 수집(JavaScript)"

#. (itstool) path: info/desc
#: C/record-collection.js.page:11
msgid "Create a small database application for ordering your music collection"
msgstr "음악 모음을 정렬하는 간단한 데이터베이스 프로그램을 만듭니다"

#. (itstool) path: page/title
#: C/record-collection.js.page:29
msgid "Record collection"
msgstr "레코드 수집"

#. (itstool) path: item/p
#: C/record-collection.js.page:34
msgid "How to connect to a database using libgda"
msgstr "libgda로 데이터베이스 연결하기"

#. (itstool) path: item/p
#: C/record-collection.js.page:35
msgid "How to insert and browse records in a database table"
msgstr "데이터베이스 테이블로의 레코드 삽입 및 테이블 탐색"

#. (itstool) path: section/p
#: C/record-collection.js.page:41
msgid ""
"This demo uses the Javascript language. We are going to demonstrate how to "
"connect and use a database from a GTK program, by using the GDA (GNOME Data "
"Access) library. Thus you also need this library installed."
msgstr ""
"이 시연 프로그램에서는 Javascript 언어를 활용합니다. GTK 프로그램에서 GDA(그"
"놈 데이터 액세스) 라이브러리로 데이터베이스를 연결하고 활용하는 방법을 보여드"
"리겠습니다. 고로, 이 라이브러리도 설치해야합니다."

#. (itstool) path: section/p
#: C/record-collection.js.page:44
msgid ""
"GNOME Data Access (GDA) is library whose purpose is to provide universal "
"access to different kinds and types of data sources. This goes from "
"traditional relational database systems, to any imaginable kind of data "
"source such as a mail server, a LDAP directory, etc. For more information, "
"and for a full API and documentation, visit the <link href=\"http://library."
"gnome.org/devel/libgda/stable/\">GDA website</link>."
msgstr ""
"그놈 데이터 액세스(GDA)는 다양한 종류와 형식의 데이터 공급원에 통합 방식으로 "
"접근하는 수단을 제공합니다. 전통적인 관계형 데이터베이스 시스템에서 시작하여 "
"메일 서버, LDAP 디렉터리 등과 같은 상상할 수 있는 데이터 공급원을 다룹니다. "
"더 많은 내용, 전체 API, 문서를 확인해보시려면  <link href=\"http://library."
"gnome.org/devel/libgda/stable/\">GDA 웹사이트</link>를 방문해보십시오."

#. (itstool) path: section/p
#: C/record-collection.js.page:47
msgid ""
"Although a big part of the code is related to user interface (GUI), we are "
"going to focus our tutorial on the database parts (we might mention other "
"parts we think are relevant though). To know more about Javascript programs "
"in GNOME, see the <link xref=\"image-viewer.js\">Image Viewer program</link> "
"tutorial."
msgstr ""
"비록 코드 상당 부분이 사용자 인터페이스(GUI)와 관련 있지만, 데이터베이스 부분"
"의 따라하기 지침에 역점을 두었습니다(아마도 관련이 있는 다른 부분에도 언급할"
"지도 모릅니다). 그놈 Javascript 프로그래밍을 더 알아보려면 <link xref="
"\"image-viewer.js\">그림 보기 프로그램</link> 따라하기 지침 부분을 참고하십시"
"오."

#. (itstool) path: item/p
#: C/record-collection.js.page:60
msgid ""
"Choose <gui>Generic Javascript</gui> from the <gui>JS</gui> tab, click "
"<gui>Forward</gui>, and fill-out your details on the next few pages. Use "
"<file>record-collection</file> as project name and directory."
msgstr ""
"<gui>JS</gui> 탭에서 <gui>일반 Javascript</gui>를 선택하고, <gui>앞으로</gui>"
"을 누른 다음, 나타난 페이지에서 몇가지 자세한 내용을 입력하십시오. 프로젝트 "
"이름과 디렉터리에 <file>record-collection</file>을 입력하십시오."

#. (itstool) path: item/p
#: C/record-collection.js.page:63
msgid ""
"Click <gui>Finished</gui> and the project will be created for you. Open "
"<file>src/main.js</file> from the <gui>Project</gui> or <gui>File</gui> "
"tabs. It contains very basic example code."
msgstr ""
"<gui>마침</gui>을 누르면 프로젝트를 만들어줍니다. <gui>프로젝트</gui>나 <gui>"
"파일</gui>탭에서 <file>src/main.js</file> 파일을 여십시오. 매우 기본적인 예"
"제 코드가 있습니다."

#. (itstool) path: section/title
#: C/record-collection.js.page:69
msgid "Program Structure"
msgstr "프로그램 구조"

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/record-collection.js.page:70
msgctxt "_"
msgid ""
"external ref='media/record-collection.png' "
"md5='2d645997687ed5aacd36aafafc16e072'"
msgstr ""

#. (itstool) path: section/p
#: C/record-collection.js.page:71
msgid ""
"This demo is a simple GTK application (with a single window) capable of "
"inserting records into a database table as well as browsing all records of "
"the table. The table has two fields: <code>id</code>, an integer, and "
"<code>name</code>, a varchar. The first section (on the top) of the "
"application allows you to insert a record into the table. The last section "
"(bottom) allows you to see all the records of that table. Its content is "
"refreshed every time a new record is inserted and on the application startup."
msgstr ""
"이 시연 프로그램은 데이터베이스 테이브의 모든 레코드를 탐색할 뿐만 아니라 레"
"코드를 넣는 기능도 있는 간단한(단일 창)  GTK 프로그램입니다. 테이블에는 정수"
"형 값을 넣는 <code>id</code> 필드와 가변 문자열(varchar) 형식의 <code>name</"
"code> 필드가 있습니다. 프로그램의 (상단) 처음 섹션에서는 테이블에 레코드를 넣"
"을 수 있습니다. 프로그램의 마지막 섹션(바닥)에서는 테이블의 모든 레코드를 살"
"펴볼 수 있습니다. 이 내용은 새 레코드를 넣을때와 프로그램을 시작할 때마다 새"
"로 고쳐서 보여줍니다."

#. (itstool) path: section/title
#: C/record-collection.js.page:76
msgid "Starting the fun"
msgstr "재미로 시작하기"

#. (itstool) path: section/p
#: C/record-collection.js.page:77
msgid "Let's start by examining the skeleton of the program:"
msgstr "프로그램 뼈대 검토를 우선 시작하겠습니다:"

#. (itstool) path: section/code
#: C/record-collection.js.page:78
#, no-wrap
msgid ""
"\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Gda = imports.gi.Gda;\n"
"const Lang = imports.lang;\n"
"\n"
"function Demo () {\n"
"  this._init ();\n"
"}\n"
"\n"
"Demo.prototype = {\n"
"\n"
"  _init: function () {\n"
"    this.setupWindow ();\n"
"    this.setupDatabase ();\n"
"    this.selectData ();\n"
"  }\n"
"}\n"
"\n"
"Gtk.init (null, null);\n"
"\n"
"var demo = new Demo ();\n"
"\n"
"Gtk.main ();"
msgstr ""
"\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Gda = imports.gi.Gda;\n"
"const Lang = imports.lang;\n"
"\n"
"function Demo () {\n"
"  this._init ();\n"
"}\n"
"\n"
"Demo.prototype = {\n"
"\n"
"  _init: function () {\n"
"    this.setupWindow ();\n"
"    this.setupDatabase ();\n"
"    this.selectData ();\n"
"  }\n"
"}\n"
"\n"
"Gtk.init (null, null);\n"
"\n"
"var demo = new Demo ();\n"
"\n"
"Gtk.main ();"

#. (itstool) path: item/p
#: C/record-collection.js.page:103
msgid ""
"Lines 1‒4: Initial imports. Pay special attention to line 3, which tells "
"Javascript to import the GDA library, our focus in this tutorial."
msgstr ""
"1~4번째 줄: 초기 임포팅입니다. JavaScript로 GDA 라이브러리를 가져오는 이 따라"
"하기 지침의 핵심부분인 세번째 줄에 특히 주목하십시오."

#. (itstool) path: item/p
#: C/record-collection.js.page:104
msgid ""
"Lines 6‒17: Define our <code>Demo</code> class. Pay special attention to "
"lines 13‒15, where we call 3 methods which will do the whole job. They will "
"be detailed below."
msgstr ""
"6~17번째 줄: <code>Demo</code> 클래스를 정의합니다. 전체 작업을 담당하는 메서"
"드 3개를 호출하는 13~15번째 줄에 주목하십시오. 자세한 내용은 아래에서 설명하"
"겠습니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:105
msgid "Lines 19‒23: Start the application."
msgstr "19~23번째 줄: 프로그램을 시작합니다."

#. (itstool) path: section/title
#: C/record-collection.js.page:110
msgid "Designing the application"
msgstr "프로그램 설계"

#. (itstool) path: section/p
#: C/record-collection.js.page:111
msgid ""
"Let's take a look at the <code>setupWindow</code> method. It is responsible "
"for creating the User Interface (UI). As UI is not our focus, we will "
"explain only the relevant parts."
msgstr ""
"<code>setupWindow</code> 메서드를 살펴보겠습니다. 이 메서드는 사용자 인터페이"
"스(UI)를 만드는 역할을 합니다. UI는 중요한 부분이 아니니 관련 부분만 설명하겠"
"습니다."

#. (itstool) path: section/code
#: C/record-collection.js.page:112
#, no-wrap
msgid ""
"\n"
"  setupWindow: function () {\n"
"    this.window = new Gtk.Window ({title: \"Data Access Demo\", height_request: 350});\n"
"    this.window.connect (\"delete-event\", function () {\n"
"      Gtk.main_quit();\n"
"      return true;\n"
"      });\n"
"\n"
"    // main box\n"
"    var main_box = new Gtk.Box ({orientation: Gtk.Orientation.VERTICAL, spacing: 5});\n"
"    this.window.add (main_box);\n"
"\n"
"    // first label\n"
"    var info1 = new Gtk.Label ({label: \"&lt;b&gt;Insert a record&lt;/b&gt;\", xalign: 0, use_markup: true});\n"
"    main_box.pack_start (info1, false, false, 5);\n"
"\n"
"    // \"insert a record\" horizontal box\n"
"    var insert_box = new Gtk.Box ({orientation: Gtk.Orientation.HORIZONTAL, spacing: 5});\n"
"    main_box.pack_start (insert_box, false, false, 5);\n"
"\n"
"    // ID field\n"
"    insert_box.pack_start (new Gtk.Label ({label: \"ID:\"}), false, false, 5);\n"
"    this.id_entry = new Gtk.Entry ();\n"
"    insert_box.pack_start (this.id_entry, false, false, 5);\n"
"\n"
"    // Name field\n"
"    insert_box.pack_start (new Gtk.Label ({label: \"Name:\"}), false, false, 5);\n"
"    this.name_entry = new Gtk.Entry ({activates_default: true});\n"
"    insert_box.pack_start (this.name_entry, true, true, 5);\n"
"\n"
"    // Insert button\n"
"    var insert_button = new Gtk.Button ({label: \"Insert\", can_default: true});\n"
"    insert_button.connect (\"clicked\", Lang.bind (this, this._insertClicked));\n"
"    insert_box.pack_start (insert_button, false, false, 5);\n"
"    insert_button.grab_default ();\n"
"\n"
"    // Browse textview\n"
"    var info2 = new Gtk.Label ({label: \"&lt;b&gt;Browse the table&lt;/b&gt;\", xalign: 0, use_markup: true});\n"
"    main_box.pack_start (info2, false, false, 5);\n"
"    this.text = new Gtk.TextView ({editable: false});\n"
"    var sw = new Gtk.ScrolledWindow ({shadow_type:Gtk.ShadowType.IN});\n"
"    sw.add (this.text);\n"
"    main_box.pack_start (sw, true, true, 5);\n"
"\n"
"    this.count_label = new Gtk.Label ({label: \"\", xalign: 0, use_markup: true});\n"
"    main_box.pack_start (this.count_label, false, false, 0);\n"
"\n"
"    this.window.show_all ();\n"
"  },"
msgstr ""
"\n"
"  setupWindow: function () {\n"
"    this.window = new Gtk.Window ({title: \"Data Access Demo\", height_request: 350});\n"
"    this.window.connect (\"delete-event\", function () {\n"
"      Gtk.main_quit();\n"
"      return true;\n"
"      });\n"
"\n"
"    // main box\n"
"    var main_box = new Gtk.Box ({orientation: Gtk.Orientation.VERTICAL, spacing: 5});\n"
"    this.window.add (main_box);\n"
"\n"
"    // first label\n"
"    var info1 = new Gtk.Label ({label: \"&lt;b&gt;Insert a record&lt;/b&gt;\", xalign: 0, use_markup: true});\n"
"    main_box.pack_start (info1, false, false, 5);\n"
"\n"
"    // \"insert a record\" horizontal box\n"
"    var insert_box = new Gtk.Box ({orientation: Gtk.Orientation.HORIZONTAL, spacing: 5});\n"
"    main_box.pack_start (insert_box, false, false, 5);\n"
"\n"
"    // ID field\n"
"    insert_box.pack_start (new Gtk.Label ({label: \"ID:\"}), false, false, 5);\n"
"    this.id_entry = new Gtk.Entry ();\n"
"    insert_box.pack_start (this.id_entry, false, false, 5);\n"
"\n"
"    // Name field\n"
"    insert_box.pack_start (new Gtk.Label ({label: \"Name:\"}), false, false, 5);\n"
"    this.name_entry = new Gtk.Entry ({activates_default: true});\n"
"    insert_box.pack_start (this.name_entry, true, true, 5);\n"
"\n"
"    // Insert button\n"
"    var insert_button = new Gtk.Button ({label: \"Insert\", can_default: true});\n"
"    insert_button.connect (\"clicked\", Lang.bind (this, this._insertClicked));\n"
"    insert_box.pack_start (insert_button, false, false, 5);\n"
"    insert_button.grab_default ();\n"
"\n"
"    // Browse textview\n"
"    var info2 = new Gtk.Label ({label: \"&lt;b&gt;Browse the table&lt;/b&gt;\", xalign: 0, use_markup: true});\n"
"    main_box.pack_start (info2, false, false, 5);\n"
"    this.text = new Gtk.TextView ({editable: false});\n"
"    var sw = new Gtk.ScrolledWindow ({shadow_type:Gtk.ShadowType.IN});\n"
"    sw.add (this.text);\n"
"    main_box.pack_start (sw, true, true, 5);\n"
"\n"
"    this.count_label = new Gtk.Label ({label: \"\", xalign: 0, use_markup: true});\n"
"    main_box.pack_start (this.count_label, false, false, 0);\n"
"\n"
"    this.window.show_all ();\n"
"  },"

#. (itstool) path: item/p
#: C/record-collection.js.page:162
msgid ""
"Lines 22 and 27: Create the 2 entries (for the two fields) in which users "
"will type something to get inserted in the database."
msgstr ""
"22번째, 27번째 줄: 어떤 사용자가 데이터베이스에 들어간 내용을 입력하는 항목 2"
"개(필드 2개)를 만듭니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:163
msgid ""
"Lines 31‒34: Create the Insert button. We connect its <code>clicked</code> "
"signal to the <code>_insertClicked</code> private method of the class. This "
"method is detailed below."
msgstr ""
"31~34번째 줄: 삽입 단추를 만듭니다. <code>clicked</code> 시그널을 클래스의 "
"<code>_insertClicked</code> private 메서드에 연결했습니다. 이 메서드는 아래에"
"서 자세히 설명하겠습니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:164
msgid ""
"Line 39: Create the widget (<code>TextView</code>) where we will show the "
"contents of the table."
msgstr ""
"39번째 줄: 테이블의 내용을 보여줄 위젯(<code>TextView</code>)을 만듭니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:165
msgid ""
"Line 44: Create the label where we will show the number of records in the "
"table. Initially it's empty, it will be updated later."
msgstr ""
"44번째 줄: 테이블의 여러 레코드를 보여줄 레이블을 만듭니다. 초기에는 비어있습"
"니다만, 나중에 업데이트합니다."

#. (itstool) path: section/title
#: C/record-collection.js.page:170
msgid "Connecting to and initializing the database"
msgstr "데이터베이스 연결 및 초기화"

#. (itstool) path: section/p
#: C/record-collection.js.page:171
msgid ""
"The code which makes the connection to the database is in the "
"<code>setupDatabase</code> method below:"
msgstr ""
"<code>setupDatabase</code> 메서드에서 데이터베이스를 연결하는 코드는 아래와 "
"같습니다:"

#. (itstool) path: section/code
#: C/record-collection.js.page:174
#, no-wrap
msgid ""
"\n"
"  setupDatabase: function () {\n"
"    this.connection = new Gda.Connection ({provider: Gda.Config.get_provider(\"SQLite\"),\n"
"                                          cnc_string:\"DB_DIR=\" + GLib.get_home_dir () + \";DB_NAME=gnome_demo\"});\n"
"    this.connection.open ();\n"
"\n"
"    try {\n"
"      var dm = this.connection.execute_select_command (\"select * from demo\");\n"
"    } catch (e) {\n"
"      this.connection.execute_non_select_command (\"create table demo (id integer, name varchar(100))\");\n"
"    }\n"
"  },"
msgstr ""
"\n"
"  setupDatabase: function () {\n"
"    this.connection = new Gda.Connection ({provider: Gda.Config.get_provider(\"SQLite\"),\n"
"                                          cnc_string:\"DB_DIR=\" + GLib.get_home_dir () + \";DB_NAME=gnome_demo\"});\n"
"    this.connection.open ();\n"
"\n"
"    try {\n"
"      var dm = this.connection.execute_select_command (\"select * from demo\");\n"
"    } catch (e) {\n"
"      this.connection.execute_non_select_command (\"create table demo (id integer, name varchar(100))\");\n"
"    }\n"
"  },"

#. (itstool) path: item/p
#: C/record-collection.js.page:188
msgid ""
"Lines 2‒3: Create the GDA's <code>Connection</code> object. We must supply "
"to its constructor some properties:"
msgstr ""
"2~3번쨰 줄: GDA의 <code>Connection</code> 객체를 만듭니다. 생성자에 속성 몇가"
"지를 넣어야합니다:"

#. (itstool) path: item/p
#: C/record-collection.js.page:191
msgid ""
"<code>provider</code>: One of GDA's supported providers. GDA supports "
"SQLite, MySQL, PostgreSQL, Oracle and many others. For demo purposes we will "
"use a SQLite database, as it comes installed by default in most "
"distributions and it is simple to use (it just uses a file as a database)."
msgstr ""
"<code>provider</code>: GDA에서 지원하는 프로파이더 중 하나입니다. GDA에서는 "
"SQLite, MySQL, PostSQL, Oracle 등 수많은 데이터베이스 엔진을 지원합니다. 시"
"연 목적으로, 대부분의 배포판에서 기본적으로 SQLite를 설치하며 쓰기 쉽기 때문"
"에(파일을 데이터베이스로 활용) SQLite 데이터베이스를 사용하겠습니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:194
msgid ""
"<code>cnc_string</code>: The connection string. It may change from provider "
"to provider. The syntax for SQLite is: <code>DB_DIR=<var>PATH</var>;"
"DB_NAME=<var>FILENAME</var></code>. In this demo we are accessing a database "
"called gnome_demo in the user home dir (note the call to GLib's "
"<code>get_home_dir</code> function)."
msgstr ""
"<code>cnc_string</code>: 연결 문자열. 프로바이더를 바꿉니다. SQLite용 문법은 "
"<code>DB_DIR=<var>PATH</var>;DB_NAME=<var>FILENAME</var></code> 입니다. 시연 "
"프로그램에서는 사용자 주 디렉터리(GLib의 <code>get_home_dir</code> 함수 호출 "
"참고)에 둔 gnome_demo 데이터베이스에 접근하겠습니다."

#. (itstool) path: note/p
#: C/record-collection.js.page:198
msgid ""
"If the provider is not supported by GDA, or if the connection string is "
"missing some element, line 2 will raise an exception. So, in real life we "
"should handle it with JavaScript's statement <code>try</code>...<code>catch</"
"code>."
msgstr ""
"GDA에서 지원하지 않는 프로바이더가 있고, 연결 문자열에 어떤 구성 요소가 빠지"
"면, 2번째 줄에 예외가 일어납니다. 따라서 실제로 JavaScript의 구문 <code>try</"
"code>...<code>catch</code>로 처리해야합니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:202
msgid ""
"Line 4: Open the connection. In the SQLite provider, if the database does "
"not exist, it will be created in this step."
msgstr ""
"4번째 줄: 연결합니다. SQLite 프로바이더에서 데이터베이스가 없으면 이 단계에"
"서 만듭니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:204
msgid ""
"Lines 6‒10: Try to do a simple select to check if the table exists (line 7). "
"If it does not exist (because the database was just created), this command "
"will raise an exception, which is handled by the <code>try</code>..."
"<code>catch</code> block. If it is the case, we run the create table "
"statement (line 9)."
msgstr ""
"6~10번째 줄: 테이블이 있는지(7번째 줄) 간단하게 SELECT 문을 시도해봅니다. (데"
"이터베이스를 방금 만들어서)테이블이 없으면, 이 명령에서 <code>try</code>..."
"<code>catch</code> 블록에서 처리할 예외가 나타납니다. 이 경우 CREATE TABLE 구"
"문을 실행합니다(9번째 줄)."

#. (itstool) path: item/p
#: C/record-collection.js.page:205
msgid ""
"In order to run the SQL commands above we are using the GDA connection "
"methods <code>execute_select_command</code> and "
"<code>execute_non_select_command</code>. They are simple to use, and just "
"require two arguments: The <code>Connection</code> object and the SQL "
"command to be parsed."
msgstr ""
"GDA 연결용 <code>execute_select_command</code> 메서드와 "
"<code>execute_non_select_command</code> 메서드로 위 SQL 명령을 실행합니다. 사"
"용법은 단순하며  <code>Connection</code> 객체와 해석할 SQL 명령을 두 매개변"
"수 값으로 활용하므로 단순합니다."

#. (itstool) path: section/p
#: C/record-collection.js.page:209
msgid "At this point we have the database set up, and are ready to use it."
msgstr "이 시점에 데이터베이스를 설정했고 사용할 준비가 끝났습니다."

#. (itstool) path: section/title
#: C/record-collection.js.page:213
msgid "Selecting"
msgstr "선택"

#. (itstool) path: section/p
#: C/record-collection.js.page:214
msgid ""
"After connecting to the database, our demo's constructor calls the "
"<code>selectData</code> method. It is responsible for getting all the "
"records in the table and showing them on the <code>TextView</code> widget. "
"Let's take a look at it:"
msgstr ""
"데이터베이스를 연결하고 나면, 데모 생성자에서 <code>selectData</code> 메서드"
"를 호출합니다. 이 메서드는 테이블의 모든 레코드를 가져와서 <code>TextView</"
"code> 위젯에 나타냅니다. 이제 살펴보도록 하겠습니다:"

#. (itstool) path: section/code
#: C/record-collection.js.page:217
#, no-wrap
msgid ""
"\n"
"  selectData: function () {\n"
"    var dm = this.connection.execute_select_command  (\"select * from demo order by 1, 2\");\n"
"    var iter = dm.create_iter ();\n"
"\n"
"    var text = \"\";\n"
"\n"
"    while (iter.move_next ()) {\n"
"      var id_field = Gda.value_stringify (iter.get_value_at (0));\n"
"      var name_field = Gda.value_stringify (iter.get_value_at (1));\n"
"\n"
"      text += id_field + \"\\t=&gt;\\t\" + name_field + '\\n';\n"
"    }\n"
"\n"
"    this.text.buffer.text = text;\n"
"    this.count_label.label = \"&lt;i&gt;\" + dm.get_n_rows () + \" record(s)&lt;/i&gt;\";\n"
"  },"
msgstr ""
"\n"
"  selectData: function () {\n"
"    var dm = this.connection.execute_select_command  (\"select * from demo order by 1, 2\");\n"
"    var iter = dm.create_iter ();\n"
"\n"
"    var text = \"\";\n"
"\n"
"    while (iter.move_next ()) {\n"
"      var id_field = Gda.value_stringify (iter.get_value_at (0));\n"
"      var name_field = Gda.value_stringify (iter.get_value_at (1));\n"
"\n"
"      text += id_field + \"\\t=&gt;\\t\" + name_field + '\\n';\n"
"    }\n"
"\n"
"    this.text.buffer.text = text;\n"
"    this.count_label.label = \"&lt;i&gt;\" + dm.get_n_rows () + \" record(s)&lt;/i&gt;\";\n"
"  },"

#. (itstool) path: item/p
#: C/record-collection.js.page:235
msgid ""
"Line 2: The <code>SELECT</code> command. We are using the GDA connection's "
"<code>execute_select_command</code> method for that. It returns a "
"<code>DataModel</code> object, which is later used to retrieve the rows."
msgstr ""
"2번째 줄: <code>SELECT</code> 명령. GDA 연결의 <code>execute_select_command</"
"code> 메서드를 이 목적으로 활용합니다. 나중에 레코드 행을 가져올 때 사용할 "
"<code>DataModel</code>을 반환합니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:236
msgid ""
"Line 3: Create an <code>Iter</code> object, which is used to iterate over "
"the <code>DataModel</code>'s records."
msgstr ""
"3번째 줄: <code>DataModel</code>의 여러 레코드를 순회할 때 활용할 "
"<code>Iter</code> 객체를 만듭니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:237
msgid ""
"Line 7: Loop through all the records, fetching them with the help of the "
"<code>Iter</code> object. At this point, the <code>iter</code> variable "
"contains the actual, retrieved data. Its <code>move_next</code> method "
"returns <code>false</code> when it reaches the last record."
msgstr ""
"7번째 줄: 레코드 전체를 반복문으로 돌고 <code>Iter</code> 객체의 도움으로 가"
"져옵니다. 여기서 <code>iter</code> 변수에는 실제로 가져온 데이터가 들어갑니"
"다. <code>move_next</code> 메서드에서 마지막 레코드에 도달하면 <code>false</"
"code>를 반환합니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:239
msgid "Lines 8‒9: We do two things in each line:"
msgstr "8~9번째 줄: 다음 두가지 동작을 각 줄 별로 행합니다:"

#. (itstool) path: item/p
#: C/record-collection.js.page:241
msgid ""
"Use <code>Iter</code>'s method <code>get_value_at</code>, which requires "
"only one argument: the column number to retrieve, starting at 0. As our "
"<code>SELECT</code> command returns only two columns, we are retrieving "
"columns 0 and 1."
msgstr ""
"하나의 인자만 필요한 <code>Iter</code>의 <code>get_value_at</code> 메서드를 "
"활용합니다. 이 인자에는 가져올 열 번호가 들어가며 0번 부터 시작합니다. "
"<code>SELECT</code> 명령에서 열 두개만 반환하므로 0번과 1번 열만 가져옵니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:242
msgid ""
"The method <code>get_value_at</code> returns the field in GLib's "
"<code>GValue</code> format. A simple way to convert this format to a string "
"is by using GDA's global function <code>value_stringify</code>. That's what "
"we are doing here, and we store the results in the variables <code>id_field</"
"code> and <code>name_field</code>."
msgstr ""
"<code>get_value_at</code> 메서드에서 GLib의 <code>GValue</code> 형식 필드를 "
"반환합니다. 이 형식을 문자열로 변환하는 가장 쉬운 방법은 GDA의 전역 함수 "
"<code>value_stringify</code>를 사용하면 됩니다. 이게 여기서 우리가 처리하려"
"는 일이며,  <code>id_field</code>, <code>name_field</code> 변수에 결과를 저장"
"합니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:245
msgid ""
"Line 11: Concatenate the two fields to make one text line, separated by "
"<code>\"=&gt;\"</code>, and store it in the <code>text</code> variable."
msgstr ""
"11번째 줄: 두 필드 문자열을 하나로 합치며, 사이에 <code>\"=&gt;\"</code> 문자"
"열을 넣고 <code>text</code>변수에 저장합니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:246
msgid ""
"Line 14: After the loop is finished, we have all the records formatted in "
"the <code>text</code> variable. In this line we just set the contents of the "
"<code>TextView</code> with that variable."
msgstr ""
"14번째 줄: 반복문 실행이 끝나면 <code>text</code> 변수에 형식을 갖추어 저장"
"한 모든 레코드를 확보합니다. 이 줄에서는 해당 변수를 <code>TextView</code> "
"의 내용으로 설정합니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:247
msgid ""
"Line 15: Display the number of records in the table, making use of the "
"<code>DataModel</code>'s <code>get_n_rows</code> method."
msgstr ""
"15번째 줄: <code>DataModel</code>의 <code>get_n_rows</code> 메서드를 활용하"
"여 테이블의 수많은 레코드를 표시합니다."

#. (itstool) path: section/title
#: C/record-collection.js.page:252
msgid "Inserting"
msgstr "삽입"

#. (itstool) path: section/p
#: C/record-collection.js.page:253
msgid ""
"OK, we know how to connect to a database and how to select rows from a "
"table. Now it's time to do an <code>INSERT</code> on the table. Do you "
"remember above, in the method <code>setupWindow</code> we connected the "
"<gui>Insert</gui> button's <code>clicked</code> signal to the method "
"<code>_insertClicked</code>? Let's see the implementation of this method."
msgstr ""
"좋습니다. 데이터베이스에 연결하고 테이블에서 행을 선택하는 방법을 알았습니"
"다. 이제 테이블에 대해 <code>INSERT</code> 구문을 수행할 시간입니다. "
"<code>setupWindow</code> 메서드에서 <gui>Insert</gui> 단추의  <code>clicked</"
"code> 시그널을 <code>_insertClicked</code> 메서드에 연결한 부분을 기억하시"
"죠? 이 메서드의 구현부를 살펴보겠습니다."

#. (itstool) path: section/code
#: C/record-collection.js.page:256
#, no-wrap
msgid ""
"\n"
"  _insertClicked: function () {\n"
"    if (!this._validateFields ())\n"
"      return;\n"
"\n"
"    // Gda.execute_non_select_command (this.connection,\n"
"    //   \"insert into demo values ('\" + this.id_entry.text + \"', '\" + this.name_entry.text + \"')\");\n"
"\n"
"    var b = new Gda.SqlBuilder ({stmt_type:Gda.SqlStatementType.INSERT});\n"
"    b.set_table (\"demo\");\n"
"    b.add_field_value_as_gvalue (\"id\", this.id_entry.text);\n"
"    b.add_field_value_as_gvalue (\"name\", this.name_entry.text);\n"
"    var stmt = b.get_statement ();\n"
"    this.connection.statement_execute_non_select (stmt, null);\n"
"\n"
"    this._clearFields ();\n"
"    this.selectData ();\n"
"  },"
msgstr ""
"\n"
"  _insertClicked: function () {\n"
"    if (!this._validateFields ())\n"
"      return;\n"
"\n"
"    // Gda.execute_non_select_command (this.connection,\n"
"    //   \"insert into demo values ('\" + this.id_entry.text + \"', '\" + this.name_entry.text + \"')\");\n"
"\n"
"    var b = new Gda.SqlBuilder ({stmt_type:Gda.SqlStatementType.INSERT});\n"
"    b.set_table (\"demo\");\n"
"    b.add_field_value_as_gvalue (\"id\", this.id_entry.text);\n"
"    b.add_field_value_as_gvalue (\"name\", this.name_entry.text);\n"
"    var stmt = b.get_statement ();\n"
"    this.connection.statement_execute_non_select (stmt, null);\n"
"\n"
"    this._clearFields ();\n"
"    this.selectData ();\n"
"  },"

#. (itstool) path: section/p
#: C/record-collection.js.page:274
msgid ""
"We have learned how to use the GDA connection's methods "
"<code>execute_select_command</code> and <code>execute_non_select_command</"
"code> to quickly execute SQL commands on the database. GDA allows one to "
"build a SQL statement indirectly, by using its <code>SqlBuilder</code> "
"object. What are the benefits of this? GDA will generate the SQL statement "
"dynamically, and it will be valid for the connection provider used (it will "
"use the same SQL dialect the provider uses). Let's study the code:"
msgstr ""
"GDA 연결의 메서드 <code>execute_select_command</code>, "
"<code>execute_non_select_command</code>를 활용하여 데이터베이스에서 SQL 명령"
"을 빠르게 실행하는 방법을 알았습니다. GDA 에서는 <code>SqlBuilder</code> 객체"
"로 SQL 구문을 간접적으로 만듭니다. 어떤 장점이 있을까요? GDA에서는 SQL 구문"
"을 동적으로 만들어, 활용하는 연결 제공자에서 올바른 구문으로 간주합니다(프로"
"바이더에서 사용하는 동일한 SQL 변형 문법도 할용합니다). 코드를 살펴보겠습니"
"다:"

#. (itstool) path: item/p
#: C/record-collection.js.page:278
msgid ""
"Lines 2‒3: Check if the user filled all the fields. The code for the private "
"method <code>_validateFields</code> is really simple and you can read it in "
"the full demo source code."
msgstr ""
"2~3번쨰 줄: 사용자가 모든 필드를 채웠는지 확인합니다. 자체 메서드 "
"<code>_validateFields</code>의 코드는 정말 단순하며 전체 시연 소스코드에서 알"
"아볼 수 있습니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:279
msgid ""
"Line 5: The faster way of doing the <code>INSERT</code>. It's commented out "
"as we want to show how to use the <code>SqlBuilder</code> object to build a "
"SQL statement portable across databases."
msgstr ""
"5번째 줄: <code>INSERT</code> 구문을 실행하는 빠른 방법입니다. 전 데이터베이"
"스에 걸쳐 어디든 이식할 수 있는 SQL 구문을 만드는 <code>SqlBuilder</code> 활"
"용법을 보고 싶으면 이 부분 주석을 제거하시면 됩니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:280
msgid ""
"Line 7: Create the <code>SqlBuilder</code> object. We must pass the type of "
"statement we are going to build. It can be <code>SELECT</code>, "
"<code>UPDATE</code>, <code>INSERT</code> or <code>DELETE</code>."
msgstr ""
"7번째 줄:  <code>SqlBuilder</code> 객체를 만듭니다. 빌드할 구문 형식을 넘겨야"
"합니다. <code>SELECT</code>, <code>UPDATE</code>, <code>INSERT</code>, "
"<code>DELETE</code> 중 하나입니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:281
msgid ""
"Line 8: Set the name of the table on which the built statement will operate "
"(it will generate <code>INSERT INTO demo</code>)"
msgstr ""
"8번째 줄: 만들어둔 구문을 수행할 테이블 이름을 설정합니다(<code>INSERT INTO "
"demo</code> 구문을 만듬)"

#. (itstool) path: item/p
#: C/record-collection.js.page:282
msgid ""
"Lines 9‒10: Set the fields and its values that will be part of the "
"statement. The first argument is the field name (as in the table). The "
"second one is the value for that field."
msgstr ""
"9~10번째 줄: 구문의 일부로 필드 이름과 값을 설정합니다. 첫번째 인자는 필드 이"
"름(테이블에 있는 그대로), 두번째 인자는 필드의 값입니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:283
msgid ""
"Line 11: Get the dynamically generated <code>Statement</code> object, which "
"represents a SQL statement."
msgstr ""
"11번째 줄: 동적으로 만든 SQL 구문 <code>Statement</code> 객체를 가져옵니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:284
msgid "Line 12: Finally, execute the SQL statement (<code>INSERT</code>)."
msgstr "12번째 줄: 마지막으로 SQL 구문(<code>INSERT</code>)을 실행합니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:285
msgid ""
"Line 14: Clear the id and name fields on the screen. The code for the "
"private method <code>_clearFields</code> is really simple and you can read "
"it in the full demo source code."
msgstr ""
"14번째 줄: 화면의 id와 name 필드를 지웁니다. private 메서드 "
"<code>_clearFields</code>의 코드는 정말 단순하며 전체 시연 소스 코드에서 확인"
"해볼 수 있습니다."

#. (itstool) path: item/p
#: C/record-collection.js.page:286
msgid ""
"Line 15: Refresh the view on the screen by doing another <code>SELECT</code>."
msgstr ""
"15번쨰 줄: 다른 <code>SELECT</code> 구문을 실행하며 화면의 뷰를 새로 고칩니"
"다."

#. (itstool) path: note/p
#: C/record-collection.js.page:288
msgid ""
"You can also make use of parameters while building the statement. By using "
"the <code>SqlBuilder</code> objects and parameters you are less subject to "
"attacks like SQL injection. Check the <link href=\"http://library.gnome.org/"
"devel/libgda/stable/\">GDA documentation</link> for more information about "
"parameters."
msgstr ""
"구문을 만들 때 매개변수를 사용할 수도 있습니다.  <code>SqlBuilder</code> 객체"
"와 매개변수를 활용하여 SQL 인젝션 같은 공격을 덜 받을 수 있습니다. 매개변수"
"에 대한 자세한 정보는 <link href=\"http://library.gnome.org/devel/libgda/"
"stable/\">GDA 문서</link>를 참고하십시오."

#. (itstool) path: section/p
#: C/record-collection.js.page:293
msgid ""
"All of the code you need should now be in place, so try running the code. "
"You now have a database for your record collection!"
msgstr ""
"필요한 모든 코드를 제자리에 넣었으니 코드를 실행해보겠습니다. 제대로 동작할겝"
"니다. 이렇게 하여 레코드 수집용 데이터베이스를 만들었습니다!"

#. (itstool) path: section/p
#: C/record-collection.js.page:298
msgid ""
"If you run into problems with the tutorial, compare your code with this "
"<link href=\"record-collection/record-collection.js\">reference code</link>."
msgstr ""
"지침서를 따라하는 실행하는 과정에 문제가 있다면, <link href=\"record-"
"collection/record-collection.js\">참조 코드</link>와 여러분의 코드를 비교해보"
"십시오."

#. (itstool) path: page/title
#: C/response-type.page:17
msgid "enum ResponseType"
msgstr "enum ResponseType"

#. (itstool) path: item/title
#: C/response-type.page:21
msgid "ResponseType.NONE = -1"
msgstr "ResponseType.NONE = -1"

#. (itstool) path: item/p
#: C/response-type.page:22
msgid ""
"Returned if an action widget has no response id, or if the dialog gets "
"programmatically hidden or destroyed"
msgstr ""
"동작 위젯에 응답 ID가 없거나 대화상자가 프로그램 진행상 숨겨졌거나 해체됐을 "
"경우 반환합니다"

#. (itstool) path: item/title
#: C/response-type.page:25
msgid "ResponseType.REJECT = -2"
msgstr "ResponseType.REJECT = -2"

#. (itstool) path: item/p
#: C/response-type.page:26 C/response-type.page:30
msgid "Generic response id, not used by GTK+ dialogs"
msgstr "GTK+ 대화 상자에서 사용하지 않는 일반 응답 ID"

#. (itstool) path: item/title
#: C/response-type.page:29
msgid "ResponseType.ACCEPT = -3"
msgstr "ResponseType.ACCEPT = -3"

#. (itstool) path: item/title
#: C/response-type.page:33
msgid "ResponseType.DELETE_EVENT = -4"
msgstr "ResponseType.DELETE_EVENT = -4"

#. (itstool) path: item/p
#: C/response-type.page:34
msgid "Returned if the dialog is deleted"
msgstr "대화 상자를 삭제했을 경우 반환합니다"

#. (itstool) path: item/title
#: C/response-type.page:37
msgid "ResponseType.OK = -5"
msgstr "ResponseType.OK = -5"

#. (itstool) path: item/p
#: C/response-type.page:38
msgid "Returned by OK buttons in GTK+ dialogs"
msgstr "GTK+ 대화 상자에서 확인 단추를 누르면 반환합니다"

#. (itstool) path: item/title
#: C/response-type.page:41
msgid "ResponseType.CANCEL = -6"
msgstr "ResponseType.CANCEL = -6"

#. (itstool) path: item/p
#: C/response-type.page:42
msgid "Returned by Cancel buttons in GTK+ dialogs"
msgstr "GTK+ 대화 상자에서 취소를 누르면 반환합니다"

#. (itstool) path: item/title
#: C/response-type.page:45
msgid "ResponseType.CLOSE = -7"
msgstr "ResponseType.CLOSE = -7"

#. (itstool) path: item/p
#: C/response-type.page:46
msgid "Returned by Close buttons in GTK+ dialogs"
msgstr "GTK+ 대화 상자에서 닫기를 누르면 반환합니다"

#. (itstool) path: item/title
#: C/response-type.page:49
msgid "ResponseType.YES = -8"
msgstr "ResponseType.YES = -8"

#. (itstool) path: item/p
#: C/response-type.page:50
msgid "Returned by Yes buttons in GTK+ dialogs"
msgstr "GTK+ 대화 상자에서 예를 누르면 반환합니다"

#. (itstool) path: item/title
#: C/response-type.page:53
msgid "ResponseType.NO = -9"
msgstr "ResponseType.NO = -9"

#. (itstool) path: item/p
#: C/response-type.page:54
msgid "Returned by No buttons in GTK+ dialogs"
msgstr "GTK+ 대화 상자에서 아니요를 누르면 반환합니다"

#. (itstool) path: item/title
#: C/response-type.page:57
msgid "ResponseType.APPLY = -10"
msgstr "ResponseType.APPLY = -10"

#. (itstool) path: item/p
#: C/response-type.page:58
msgid "Returned by Apply buttons in GTK+ dialogs"
msgstr "GTK+ 대화 상자에서 적용을 누르면 반환합니다"

#. (itstool) path: item/title
#: C/response-type.page:61
msgid "ResponseType.HELP = -11"
msgstr "ResponseType.HELP = -11"

#. (itstool) path: item/p
#: C/response-type.page:62
msgid "Returned by Help buttons in GTK+ dialogs"
msgstr "GTK+ 대화 상자에서 도움말을 누르면 반환합니다"

#. (itstool) path: info/title
#: C/scale.c.page:8
msgctxt "text"
msgid "Scale (C)"
msgstr "Scale (C)"

#. (itstool) path: info/desc
#: C/scale.c.page:20 C/scale.py.page:20 C/scale.vala.page:20
msgid "A slider widget for selecting a value from a range"
msgstr "일정 범위 내에서 값을 선택하는 슬라이더 위젯"

#. (itstool) path: page/title
#: C/scale.c.page:23 C/scale.js.page:21 C/scale.py.page:23 C/scale.vala.page:23
msgid "Scale"
msgstr "Scale"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/scale.c.page:25
msgctxt "_"
msgid "external ref='media/scale2.png' md5='ae2ba0a6675f3d9cdcd961cdf32f1a5c'"
msgstr ""

#. (itstool) path: page/p
#: C/scale.c.page:26 C/scale.py.page:25 C/scale.vala.page:25
msgid "Slide the scales!"
msgstr "Scale 손잡이를 잡고 끌어봅시다!"

#. (itstool) path: page/code
#: C/scale.c.page:28
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* This is the callback function. \n"
" * It is a handler function which reacts to the signal. \n"
" * In this case, it will notify the user the value of their scale as a label.\n"
" */\n"
"static void\n"
"hscale_moved (GtkRange *range,\n"
"              gpointer  user_data)\n"
"{\n"
"   GtkWidget *label = user_data;\n"
"\n"
"   /* Get the value of the range, and convert it into a string which will be\n"
"    * used as a new label for the horizontal scale.\n"
"    * %.0f - stands for a double that will have 0 decimal places.\n"
"    */\n"
"   gdouble pos = gtk_range_get_value (range);\n"
"   /* Note: Using g_strdup_printf returns a string that must be freed. \n"
"    * (In which is done below)\n"
"    */\n"
"   gchar *str = g_strdup_printf (\"Horizontal scale is %.0f\", pos);\n"
"   gtk_label_set_text (GTK_LABEL (label), str);\n"
"\n"
"   g_free(str);\n"
"}\n"
"\n"
"\n"
"\n"
"/* This is the second callback function. It is a handler function which \n"
" * reacts to the signal. It does the same thing as the function above, except with\n"
" * the vertical scale.\n"
" */\n"
"vscale_moved (GtkRange *range,\n"
"              gpointer  user_data)\n"
"{\n"
"   GtkWidget *label = user_data;\n"
"   \n"
"   gdouble pos = gtk_range_get_value (range);\n"
"   /* %.1f - stands for a double that will have 1 decimal place */\n"
"   gchar *str = g_strdup_printf (\"Vertical scale is %.1f\", pos);\n"
"   gtk_label_set_text (GTK_LABEL (label), str);\n"
"\n"
"   \n"
"   g_free (str);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Declare variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *h_scale;\n"
"  GtkWidget *v_scale;\n"
"  GtkWidget *hlabel;\n"
"  GtkWidget *vlabel;\n"
"  GtkWidget *grid;\n"
"\n"
"  /* The Adjustment object represents a value \n"
"   * which has an associated lower and upper bound.\n"
"   */\n"
"  GtkAdjustment *hadjustment;\n"
"  GtkAdjustment *vadjustment;\n"
"\n"
"  /* Create a window with a title and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Scale Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 400, 300);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 5);\n"
"\n"
"  /* Two labels to be shown in the window */\n"
"  hlabel = gtk_label_new (\"Move the scale handle...\");\n"
"  vlabel = gtk_label_new (\"Move the scale handle...\");\n"
"\n"
"   \n"
"  /* gtk_adjustment_new takes six parameters, three of which \n"
"   * may be difficult to understand:\n"
"   * step increment- move the handle with the arrow keys on your keyboard to see.\n"
"   * page increment - move the handle by clicking away from it \n"
"   * on the scale to see.\n"
"   * page size - not used here.\n"
"   */\n"
"  hadjustment = gtk_adjustment_new (0, 0, 100, 5, 10, 0);\n"
"  vadjustment = gtk_adjustment_new (50, 0, 100, 5, 10, 0); \n"
"\n"
"  /* Create the Horizontal scale, making sure the \n"
"   * digits used have no decimals.\n"
"   */\n"
"  h_scale = gtk_scale_new (GTK_ORIENTATION_HORIZONTAL, hadjustment);\n"
"  gtk_scale_set_digits (GTK_SCALE (h_scale), 0); \n"
"\n"
"  /* Allow it to expand horizontally (if there's space), and \n"
"   * set the vertical alignment\n"
"   */\n"
"  gtk_widget_set_hexpand (h_scale, TRUE);\n"
"  gtk_widget_set_valign (h_scale, GTK_ALIGN_START);\n"
"  \n"
"  /* Connecting the \"value-changed\" signal for the horizontal scale \n"
"   * to the appropriate callback function. \n"
"   * take note that GtkRange is part of GtkScale's Object Hierarchy.\n"
"   */\n"
"  g_signal_connect (h_scale, \n"
"                    \"value-changed\", \n"
"                    G_CALLBACK (hscale_moved), \n"
"                    hlabel);\n"
"\n"
"\n"
"\n"
"  /* Create the Vertical scale. This time, we will see what happens \n"
"   * when the digits arent initially set.\n"
"   */\n"
"  v_scale = gtk_scale_new (GTK_ORIENTATION_VERTICAL, vadjustment);\n"
"  gtk_widget_set_vexpand (v_scale, TRUE);\n"
"\n"
"  /* Connecting the \"value-changed\" signal for the vertical scale to \n"
"   * the appropriate callback function.\n"
"   */\n"
"  g_signal_connect (v_scale, \n"
"                    \"value-changed\", \n"
"                    G_CALLBACK (vscale_moved), \n"
"                    vlabel);\n"
"\n"
"  /* Create a grid and arrange everything accordingly */\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_set_column_spacing (GTK_GRID (grid), 10);\n"
"  gtk_grid_set_column_homogeneous (GTK_GRID (grid), TRUE);\n"
"  gtk_grid_attach (GTK_GRID (grid), h_scale, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), v_scale, 1, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), hlabel, 0, 1, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), vlabel, 1, 1, 1, 1);\n"
"  \n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* This is the callback function. \n"
" * It is a handler function which reacts to the signal. \n"
" * In this case, it will notify the user the value of their scale as a label.\n"
" */\n"
"static void\n"
"hscale_moved (GtkRange *range,\n"
"              gpointer  user_data)\n"
"{\n"
"   GtkWidget *label = user_data;\n"
"\n"
"   /* Get the value of the range, and convert it into a string which will be\n"
"    * used as a new label for the horizontal scale.\n"
"    * %.0f - stands for a double that will have 0 decimal places.\n"
"    */\n"
"   gdouble pos = gtk_range_get_value (range);\n"
"   /* Note: Using g_strdup_printf returns a string that must be freed. \n"
"    * (In which is done below)\n"
"    */\n"
"   gchar *str = g_strdup_printf (\"Horizontal scale is %.0f\", pos);\n"
"   gtk_label_set_text (GTK_LABEL (label), str);\n"
"\n"
"   g_free(str);\n"
"}\n"
"\n"
"\n"
"\n"
"/* This is the second callback function. It is a handler function which \n"
" * reacts to the signal. It does the same thing as the function above, except with\n"
" * the vertical scale.\n"
" */\n"
"vscale_moved (GtkRange *range,\n"
"              gpointer  user_data)\n"
"{\n"
"   GtkWidget *label = user_data;\n"
"   \n"
"   gdouble pos = gtk_range_get_value (range);\n"
"   /* %.1f - stands for a double that will have 1 decimal place */\n"
"   gchar *str = g_strdup_printf (\"Vertical scale is %.1f\", pos);\n"
"   gtk_label_set_text (GTK_LABEL (label), str);\n"
"\n"
"   \n"
"   g_free (str);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Declare variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *h_scale;\n"
"  GtkWidget *v_scale;\n"
"  GtkWidget *hlabel;\n"
"  GtkWidget *vlabel;\n"
"  GtkWidget *grid;\n"
"\n"
"  /* The Adjustment object represents a value \n"
"   * which has an associated lower and upper bound.\n"
"   */\n"
"  GtkAdjustment *hadjustment;\n"
"  GtkAdjustment *vadjustment;\n"
"\n"
"  /* Create a window with a title and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Scale Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 400, 300);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 5);\n"
"\n"
"  /* Two labels to be shown in the window */\n"
"  hlabel = gtk_label_new (\"Move the scale handle...\");\n"
"  vlabel = gtk_label_new (\"Move the scale handle...\");\n"
"\n"
"   \n"
"  /* gtk_adjustment_new takes six parameters, three of which \n"
"   * may be difficult to understand:\n"
"   * step increment- move the handle with the arrow keys on your keyboard to see.\n"
"   * page increment - move the handle by clicking away from it \n"
"   * on the scale to see.\n"
"   * page size - not used here.\n"
"   */\n"
"  hadjustment = gtk_adjustment_new (0, 0, 100, 5, 10, 0);\n"
"  vadjustment = gtk_adjustment_new (50, 0, 100, 5, 10, 0); \n"
"\n"
"  /* Create the Horizontal scale, making sure the \n"
"   * digits used have no decimals.\n"
"   */\n"
"  h_scale = gtk_scale_new (GTK_ORIENTATION_HORIZONTAL, hadjustment);\n"
"  gtk_scale_set_digits (GTK_SCALE (h_scale), 0); \n"
"\n"
"  /* Allow it to expand horizontally (if there's space), and \n"
"   * set the vertical alignment\n"
"   */\n"
"  gtk_widget_set_hexpand (h_scale, TRUE);\n"
"  gtk_widget_set_valign (h_scale, GTK_ALIGN_START);\n"
"  \n"
"  /* Connecting the \"value-changed\" signal for the horizontal scale \n"
"   * to the appropriate callback function. \n"
"   * take note that GtkRange is part of GtkScale's Object Hierarchy.\n"
"   */\n"
"  g_signal_connect (h_scale, \n"
"                    \"value-changed\", \n"
"                    G_CALLBACK (hscale_moved), \n"
"                    hlabel);\n"
"\n"
"\n"
"\n"
"  /* Create the Vertical scale. This time, we will see what happens \n"
"   * when the digits arent initially set.\n"
"   */\n"
"  v_scale = gtk_scale_new (GTK_ORIENTATION_VERTICAL, vadjustment);\n"
"  gtk_widget_set_vexpand (v_scale, TRUE);\n"
"\n"
"  /* Connecting the \"value-changed\" signal for the vertical scale to \n"
"   * the appropriate callback function.\n"
"   */\n"
"  g_signal_connect (v_scale, \n"
"                    \"value-changed\", \n"
"                    G_CALLBACK (vscale_moved), \n"
"                    vlabel);\n"
"\n"
"  /* Create a grid and arrange everything accordingly */\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_set_column_spacing (GTK_GRID (grid), 10);\n"
"  gtk_grid_set_column_homogeneous (GTK_GRID (grid), TRUE);\n"
"  gtk_grid_attach (GTK_GRID (grid), h_scale, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), v_scale, 1, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), hlabel, 0, 1, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), vlabel, 1, 1, 1, 1);\n"
"  \n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/scale.c.page:36
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkScale.html"
"\">GtkScale</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkScale.html"
"\">GtkScale</link>"

#. (itstool) path: item/p
#: C/scale.c.page:37
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkRange.html"
"\">GtkRange</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkRange.html"
"\">GtkRange</link>"

#. (itstool) path: item/p
#: C/scale.c.page:38 C/spinbutton.c.page:39
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkAdjustment.html"
"\">GtkAdjustment</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkAdjustment.html"
"\">GtkAdjustment</link>"

#. (itstool) path: item/p
#: C/scale.c.page:39
msgid ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-String-Utility-"
"Functions.html#g-strdup-printf\">String Utility Functions</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-String-Utility-"
"Functions.html#g-strdup-printf\">문자열 유틸리티 함수</link>"

#. (itstool) path: info/title
#: C/scale.js.page:8
msgctxt "text"
msgid "Scale (JavaScript)"
msgstr "Scale (JavaScript)"

#. (itstool) path: info/desc
#: C/scale.js.page:18
msgid "A slider which corresponds to a numerical value"
msgstr "숫자 값을 설정하는 슬라이더"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/scale.js.page:22
msgctxt "_"
msgid ""
"external ref='media/scalepenguins.png' md5='2dbe6a833fec86fde71a5ddb421e2cd5'"
msgstr ""

#. (itstool) path: page/p
#: C/scale.js.page:23
msgid ""
"A Scale is a horizontal or vertical slider, that represents a value inside a "
"numerical range. When you create a new Scale, you set what its default "
"position is, what the numbers at the top and bottom of the range are, and "
"things like how much it moves up or down when you click on the Scale to "
"either side of the knob. To keep from having to type all that in every time "
"you create a new Scale, you can create an object called an Adjustment which "
"keeps track of all that, then tell each new Scale to use that Adjustment."
msgstr ""
"Scale은 숫자값 범위 내의 값을 나타내는 수평 수직 방향의 슬라이더입니다. 새 "
"Scale을 만들 때 기본 위치, 최소 최대 값, Scale의 손잡이를 양 끝에서 눌렀을 "
"때 얼마나 옮길지를 설정합니다. 새 Scale을 만들 때마다 언제든 형식을 지키도"
"록  Scale 값을 기억하는 Adjustment 객체를 만들고 새 Scale에 Adjustment를 사용"
"하게 할 수 있습니다."

#. (itstool) path: page/p
#: C/scale.js.page:24
msgid ""
"This scale is a simple widget that lets you adjust the size of an iceberg "
"that penguins live on. The number of penguins on the iceberg is the product "
"of the values of the two sliders. Try playing with them and seeing what "
"happens."
msgstr ""
"이 Scale은 펭귄이 살 빙산의 크기를 조절하는 간단한 위젯입니다. 빙산 위에 사"
"는 수많은 펭귄은 슬라이더 두개의 값으로 만듭니다. 다루어보시고 어떤 일이 일어"
"나는지 확인해보시죠."

#. (itstool) path: section/code
#: C/scale.js.page:41
#, no-wrap
msgid ""
"\n"
"const ScaleExample = new Lang.Class({\n"
"    Name: 'Scale Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsscale'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const ScaleExample = new Lang.Class({\n"
"    Name: 'Scale Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsscale'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/scale.js.page:66
msgid ""
"All the code for this sample goes in the ScaleExample class. The above code "
"creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"Application.html\">Gtk.Application</link> for our widgets and window to go "
"in."
msgstr ""
"이 예제의 모든 코드는 ScaleExample 클래스에 있습니다. 위 코드는 위젯과 창을 "
"넣을 <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"Application.html\">Gtk.Application</link>을 만듭니다."

#. (itstool) path: section/code
#: C/scale.js.page:67
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Birds on a Floe\"});\n"
msgstr ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Birds on a Floe\"});\n"

#. (itstool) path: section/title
#: C/scale.js.page:82
msgid "Creating the scales"
msgstr "Scale 만들기"

#. (itstool) path: section/code
#: C/scale.js.page:83
#, no-wrap
msgid ""
"\n"
"        // Create the horizontal scale\n"
"        this._hScale = Gtk.Scale.new_with_range (Gtk.Orientation.HORIZONTAL, 0.0, 100.0, 5.0);\n"
"        this._hScale.set_valign (Gtk.Align.START);\n"
"        this._hScale.set_value (50);\n"
"        this._hScale.set_digits (0);\n"
"        // this._hScale.set_draw_value (false);\n"
msgstr ""
"\n"
"        // Create the horizontal scale\n"
"        this._hScale = Gtk.Scale.new_with_range (Gtk.Orientation.HORIZONTAL, 0.0, 100.0, 5.0);\n"
"        this._hScale.set_valign (Gtk.Align.START);\n"
"        this._hScale.set_value (50);\n"
"        this._hScale.set_digits (0);\n"
"        // this._hScale.set_draw_value (false);\n"

#. (itstool) path: section/p
#: C/scale.js.page:92
msgid ""
"The new_with_range method is one way to create a new Scale widget. The "
"parameters it takes are a <link href=\"http://www.roojs.org/seed/gir-1.2-"
"gtk-3.0/gjs/Gtk.Orientation.html\">Gtk.Orientation</link>, the minimum "
"value, the maximum value, and the increment for a single step. After that we "
"use the Scale's methods to set its starting value, and how many decimal "
"places it runs to. We also set its vertical alignment in this case, to "
"control where it appears in the window."
msgstr ""
"new_with_range 메서드는 새 Scale 위젯을 만드는 수단입니다. 매개변수에는 "
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Orientation."
"html\">Gtk.Orientation</link>, 최소값, 최대 값, 증가 단계 값이 들어갑니다. "
"그 다음 Scale 메서드를 활용하여 시작 값과, 10진 값을 얼마나 둘지를 설정합니"
"다. 또한 창에 나타내는 모양새를 수직으로 두게끔 설정하기도 합니다."

#. (itstool) path: section/p
#: C/scale.js.page:93
msgid ""
"We can use the set_draw_value method to tell it whether or not to show the "
"number next to the sliding scale. It's commented out in this example."
msgstr ""
"슬라이딩 눈금에 숫자를 표시할 지 여부를 set_draw_value 메서드를 활용하여 설정"
"할 수 있습니다. 이 예제에서는 주석 처리했습니다."

#. (itstool) path: section/code
#: C/scale.js.page:95
#, no-wrap
msgid ""
"\n"
"        // Create a master adjustment to use for the vertical (or any other) scale\n"
"        this._adjustment = new Gtk.Adjustment ({\n"
"            value: 95,\n"
"            lower: 0,\n"
"            upper: 100,\n"
"            step_increment: 5,\n"
"            page_increment: 10 });\n"
msgstr ""
"\n"
"        // Create a master adjustment to use for the vertical (or any other) scale\n"
"        this._adjustment = new Gtk.Adjustment ({\n"
"            value: 95,\n"
"            lower: 0,\n"
"            upper: 100,\n"
"            step_increment: 5,\n"
"            page_increment: 10 });\n"

#. (itstool) path: section/p
#: C/scale.js.page:105
msgid ""
"An Adjustment is an object we can use to simplify things when creating a new "
"Scale. The Adjustment's \"value\" property is what the Scale's default value "
"is, while \"upper\" and \"lower\" make the high and low ends of the "
"numerical range. Meanwhile, the increment values show how much the slider "
"moves when you do things like click on it."
msgstr ""
"Adjustment는 새 Scale을 만들 때 간단하게 활용할 수 있는 객체입니다. "
"Adjustments의 \"value\" 속성은 Scale 기본 값, \"upper\"는 최대, \"lower\"는 "
"최소 값을 나타냅니다. 한편 증가값은 Slider를 클릭했을 때 옮겨갈 단계 값을 보"
"여줍니다."

#. (itstool) path: section/code
#: C/scale.js.page:107
#, no-wrap
msgid ""
"\n"
"        // Create a vertical scale using the adjustment we just made\n"
"        this._vScale = new Gtk.Scale ({\n"
"            orientation: Gtk.Orientation.VERTICAL,\n"
"            adjustment: this._adjustment,\n"
"            digits: 0,\n"
"            // draw_value: false,\n"
"            margin_left: 10 });\n"
msgstr ""
"\n"
"        // Create a vertical scale using the adjustment we just made\n"
"        this._vScale = new Gtk.Scale ({\n"
"            orientation: Gtk.Orientation.VERTICAL,\n"
"            adjustment: this._adjustment,\n"
"            digits: 0,\n"
"            // draw_value: false,\n"
"            margin_left: 10 });\n"

#. (itstool) path: section/p
#: C/scale.js.page:117
msgid ""
"Here we create a new Scale object using _adjustment as its \"adjustment\" "
"property. This is a great shortcut. We still have to tell it to round off "
"the decimal place, though. Note that the draw_value property is commented "
"out; this is how you tell it not to show the number next to the Scale when "
"you're creating one this way."
msgstr ""
"여기서 우리는 _adjustment를 \"adjustment\" 속성으로 활용하여 새 Scale 객체를 "
"만들었습니다. 굉장한 편의 수단입니다. 여전히 소숫점 영역을 반올림 해야 하긴 "
"하지만요. 참고로 draw_value 속성은 주석처리했습니다. 이런 방식으로 Scale을 만"
"들 때 Scale에 숫자를 표시하지 않는 방편이기 때문입니다."

#. (itstool) path: section/code
#: C/scale.js.page:119
#, no-wrap
msgid ""
"\n"
"        // Create the label that shows the product of the two values\n"
"        this._product = (this._hScale.get_value() * this._vScale.get_value());\n"
"        this._label = new Gtk.Label ({\n"
"            label: (String(this._product) + \" penguins on the iceberg.\"),\n"
"            height_request: 200,\n"
"            width_request: 200,\n"
"            wrap: true});\n"
"\n"
"        // Connect the two scales to functions which recalculate the label\n"
"        this._hScale.connect (\"value-changed\", Lang.bind (this, this._recalc));\n"
"        this._vScale.connect (\"value-changed\", Lang.bind (this, this._recalc));\n"
msgstr ""
"\n"
"        // Create the label that shows the product of the two values\n"
"        this._product = (this._hScale.get_value() * this._vScale.get_value());\n"
"        this._label = new Gtk.Label ({\n"
"            label: (String(this._product) + \" penguins on the iceberg.\"),\n"
"            height_request: 200,\n"
"            width_request: 200,\n"
"            wrap: true});\n"
"\n"
"        // Connect the two scales to functions which recalculate the label\n"
"        this._hScale.connect (\"value-changed\", Lang.bind (this, this._recalc));\n"
"        this._vScale.connect (\"value-changed\", Lang.bind (this, this._recalc));\n"

#. (itstool) path: section/p
#: C/scale.js.page:133
msgid ""
"We can use the get_value method to find out the numerical value a Scale is "
"set at. We can then do whatever we want with it, including multiply the two "
"Scales' values together and have a <link xref=\"label.js\">Label</link> show "
"us the product. We set the label's text to wrap around, because we're having "
"it display a silly message too."
msgstr ""
"Scale에 설정한 숫자 값을 가져올 때 get_value 메서드를 사용할 수 있습니다. 그 "
"다음 Scale 두 개의 값을 곱한 값을 <link xref=\"label.js\">Label</link>에 보여"
"주는 등 우리가 원하는 어떤 것이든 할 수 있습니다. 레이블의 텍스트는 줄을 바"
"꿀 수 있는데, 줄을 바꾸지 않으면 말도 안되는 메시지를 화면에 보여주기 떄문입"
"니다."

#. (itstool) path: section/p
#: C/scale.js.page:134
msgid ""
"After we create the Label, we connect the two Scales' \"value-changed\" "
"signals to _recalc, a function that will recalculate the number of penguins "
"on the iceberg and come up with a new message."
msgstr ""
"Label을 만들고 나면 Scale의 \"value-changed\" 시그널을 빙산의 펭귄 수를 다시 "
"계산해서 새 메시지로 띄우는 _recalc  함수에 연결하겠습니다."

#. (itstool) path: section/code
#: C/scale.js.page:136
#, no-wrap
msgid ""
"\n"
"        // Create a grid to arrange things in\n"
"        this._UIGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_top: 20,\n"
"            margin_left: 20});\n"
"\n"
"        // Attach everything to the grid\n"
"        this._UIGrid.attach (this._label, 0, 0, 1, 1);\n"
"        this._UIGrid.attach (this._hScale, 0, 1, 1, 1);\n"
"        this._UIGrid.attach (this._vScale, 1, 0, 1, 1);\n"
msgstr ""
"\n"
"        // Create a grid to arrange things in\n"
"        this._UIGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_top: 20,\n"
"            margin_left: 20});\n"
"\n"
"        // Attach everything to the grid\n"
"        this._UIGrid.attach (this._label, 0, 0, 1, 1);\n"
"        this._UIGrid.attach (this._hScale, 0, 1, 1, 1);\n"
"        this._UIGrid.attach (this._vScale, 1, 0, 1, 1);\n"

#. (itstool) path: section/p
#: C/scale.js.page:149
msgid ""
"Here we create a <link xref=\"grid.js\">Grid</link> to put everything in, "
"then attach all our widgets to it. Note that here and on some of the widgets "
"themselves we're using margins to keep things neatly spaced."
msgstr ""
"여기서 모든 위젯을 넣을 <link xref=\"grid.js\">Grid</link>를 만들고 Grid에 "
"다 넣겠습니다. 참고로 여기 그리고 일부 위젯 자체에 여백을 주어 정돈된 느낌을 "
"주는 공간을 확보합니다."

#. (itstool) path: section/code
#: C/scale.js.page:150
#, no-wrap
msgid ""
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._UIGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._UIGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"

#. (itstool) path: section/p
#: C/scale.js.page:158
msgid ""
"Finally, we add the Grid to the window, then tell the window to show itself "
"and all the widgets inside of it."
msgstr ""
"마지막으로 Grid를 창에 추가하고 창 자체와 그 안에 있는 모든 위젯을 화면에 나"
"타내게 하겠습니다."

#. (itstool) path: section/title
#: C/scale.js.page:162
msgid "Function which handles the scales' values changing"
msgstr "Scale 값을 바꾸는 함수"

#. (itstool) path: section/code
#: C/scale.js.page:164
#, no-wrap
msgid ""
"\n"
"    _recalc: function() {\n"
"\n"
"        // Figure out what the product of the two scales' values is\n"
"        var product = (this._hScale.get_value() * this._vScale.get_value());\n"
"\n"
"        // Create a blank comment line in case there isn't a silly comment to make\n"
"        var comment = \"\";\n"
"\n"
"        // Make a silly comment based on the number of penguins\n"
"        if (product &gt; 9000) {\n"
"            comment = \"It's over 9000!\";\n"
"        }\n"
"        else if (product &lt; 1000 &amp;&amp; product &gt; 0) {\n"
"            comment = \"They're getting lonely.\";\n"
"        }\n"
"        else if (product == 0) {\n"
"            comment = \"They're all gone ...\";\n"
"        }\n"
"        else comment = \"\";\n"
"\n"
"        // Set ._label's new text\n"
"        this._label.set_label (String (product) + \" penguins on the iceberg. \" + comment);\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _recalc: function() {\n"
"\n"
"        // Figure out what the product of the two scales' values is\n"
"        var product = (this._hScale.get_value() * this._vScale.get_value());\n"
"\n"
"        // Create a blank comment line in case there isn't a silly comment to make\n"
"        var comment = \"\";\n"
"\n"
"        // Make a silly comment based on the number of penguins\n"
"        if (product &gt; 9000) {\n"
"            comment = \"It's over 9000!\";\n"
"        }\n"
"        else if (product &lt; 1000 &amp;&amp; product &gt; 0) {\n"
"            comment = \"They're getting lonely.\";\n"
"        }\n"
"        else if (product == 0) {\n"
"            comment = \"They're all gone ...\";\n"
"        }\n"
"        else comment = \"\";\n"
"\n"
"        // Set ._label's new text\n"
"        this._label.set_label (String (product) + \" penguins on the iceberg. \" + comment);\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/scale.js.page:192
msgid ""
"Remember, we can get a Scale's value using its get_value method. Here we "
"simply recalculate what the product of the two values is after one of the "
"Scales is moved, add in a silly message depending on how many penguins are "
"left, and change the wording on _label to show the new number and message."
msgstr ""
"기억하실지 모르겠지만, Scale 값을 get_value 메서드로 가져올 수 있습니다. 여기"
"서는, 간단하게 Scale을 움직인 다음 두 Scale의 값을 다시 계산하고 펭귄이 몇마"
"리가 남는지 어설픈 메시지를 추가한 다음, 동작 중인 _label을 바꿔 새 숫자가 들"
"어간 메시지를 보여주겠습니다."

#. (itstool) path: section/code
#: C/scale.js.page:194
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new ScaleExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Run the application\n"
"let app = new ScaleExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/scale.js.page:199
msgid ""
"Finally, we create a new instance of the finished ScaleExample class, and "
"set the application running."
msgstr ""
"마지막으로, 마무리한 ScaleExample 클래스의 새 인스턴스를 만들고 프로그램을 실"
"행하도록 설정하겠습니다."

#. (itstool) path: section/code
#: C/scale.js.page:204
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ScaleExample = new Lang.Class({\n"
"    Name: 'Scale Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsscale'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Birds on a Floe\"});\n"
"\n"
"        // Create the horizontal scale\n"
"        this._hScale = Gtk.Scale.new_with_range (Gtk.Orientation.HORIZONTAL, 0.0, 100.0, 5.0);\n"
"        this._hScale.set_valign (Gtk.Align.START);\n"
"        this._hScale.set_value (50);\n"
"        this._hScale.set_digits (0);\n"
"        // this._hScale.set_draw_value (false);\n"
"\n"
"        // Create a master adjustment to use for the vertical (or any other) scale\n"
"        this._adjustment = new Gtk.Adjustment ({\n"
"            value: 95,\n"
"            lower: 0,\n"
"            upper: 100,\n"
"            step_increment: 5,\n"
"            page_increment: 10 });\n"
"\n"
"        // Create a vertical scale using the adjustment we just made\n"
"        this._vScale = new Gtk.Scale ({\n"
"            orientation: Gtk.Orientation.VERTICAL,\n"
"            adjustment: this._adjustment,\n"
"            digits: 0,\n"
"            // draw_value: false,\n"
"            margin_left: 10 });\n"
"\n"
"        // Create the label that shows the product of the two values\n"
"        this._product = (this._hScale.get_value() * this._vScale.get_value());\n"
"        this._label = new Gtk.Label ({\n"
"            label: (String(this._product) + \" penguins on the iceberg.\"),\n"
"            height_request: 200,\n"
"            width_request: 200,\n"
"            wrap: true});\n"
"\n"
"        // Connect the two scales to functions which recalculate the label\n"
"        this._hScale.connect (\"value-changed\", Lang.bind (this, this._recalc));\n"
"        this._vScale.connect (\"value-changed\", Lang.bind (this, this._recalc));\n"
"\n"
"        // Create a grid to arrange things in\n"
"        this._UIGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_top: 20,\n"
"            margin_left: 20});\n"
"\n"
"        // Attach everything to the grid\n"
"        this._UIGrid.attach (this._label, 0, 0, 1, 1);\n"
"        this._UIGrid.attach (this._hScale, 0, 1, 1, 1);\n"
"        this._UIGrid.attach (this._vScale, 1, 0, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._UIGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _recalc: function() {\n"
"\n"
"        // Figure out what the product of the two scales' values is\n"
"        var product = (this._hScale.get_value() * this._vScale.get_value());\n"
"\n"
"        // Create a blank comment line in case there isn't a silly comment to make\n"
"        var comment = \"\";\n"
"\n"
"        // Make a silly comment based on the number of penguins\n"
"        if (product &gt; 9000) {\n"
"            comment = \"It's over 9000!\";\n"
"        }\n"
"        else if (product &lt; 1000 &amp;&amp; product &gt; 0) {\n"
"            comment = \"They're getting lonely.\";\n"
"        }\n"
"        else if (product == 0) {\n"
"            comment = \"They're all gone ...\";\n"
"        }\n"
"        else comment = \"\";\n"
"\n"
"        // Set ._label's new text\n"
"        this._label.set_label (String (product) + \" penguins on the iceberg. \" + comment);\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ScaleExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ScaleExample = new Lang.Class({\n"
"    Name: 'Scale Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsscale'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Birds on a Floe\"});\n"
"\n"
"        // Create the horizontal scale\n"
"        this._hScale = Gtk.Scale.new_with_range (Gtk.Orientation.HORIZONTAL, 0.0, 100.0, 5.0);\n"
"        this._hScale.set_valign (Gtk.Align.START);\n"
"        this._hScale.set_value (50);\n"
"        this._hScale.set_digits (0);\n"
"        // this._hScale.set_draw_value (false);\n"
"\n"
"        // Create a master adjustment to use for the vertical (or any other) scale\n"
"        this._adjustment = new Gtk.Adjustment ({\n"
"            value: 95,\n"
"            lower: 0,\n"
"            upper: 100,\n"
"            step_increment: 5,\n"
"            page_increment: 10 });\n"
"\n"
"        // Create a vertical scale using the adjustment we just made\n"
"        this._vScale = new Gtk.Scale ({\n"
"            orientation: Gtk.Orientation.VERTICAL,\n"
"            adjustment: this._adjustment,\n"
"            digits: 0,\n"
"            // draw_value: false,\n"
"            margin_left: 10 });\n"
"\n"
"        // Create the label that shows the product of the two values\n"
"        this._product = (this._hScale.get_value() * this._vScale.get_value());\n"
"        this._label = new Gtk.Label ({\n"
"            label: (String(this._product) + \" penguins on the iceberg.\"),\n"
"            height_request: 200,\n"
"            width_request: 200,\n"
"            wrap: true});\n"
"\n"
"        // Connect the two scales to functions which recalculate the label\n"
"        this._hScale.connect (\"value-changed\", Lang.bind (this, this._recalc));\n"
"        this._vScale.connect (\"value-changed\", Lang.bind (this, this._recalc));\n"
"\n"
"        // Create a grid to arrange things in\n"
"        this._UIGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_top: 20,\n"
"            margin_left: 20});\n"
"\n"
"        // Attach everything to the grid\n"
"        this._UIGrid.attach (this._label, 0, 0, 1, 1);\n"
"        this._UIGrid.attach (this._hScale, 0, 1, 1, 1);\n"
"        this._UIGrid.attach (this._vScale, 1, 0, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._UIGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _recalc: function() {\n"
"\n"
"        // Figure out what the product of the two scales' values is\n"
"        var product = (this._hScale.get_value() * this._vScale.get_value());\n"
"\n"
"        // Create a blank comment line in case there isn't a silly comment to make\n"
"        var comment = \"\";\n"
"\n"
"        // Make a silly comment based on the number of penguins\n"
"        if (product &gt; 9000) {\n"
"            comment = \"It's over 9000!\";\n"
"        }\n"
"        else if (product &lt; 1000 &amp;&amp; product &gt; 0) {\n"
"            comment = \"They're getting lonely.\";\n"
"        }\n"
"        else if (product == 0) {\n"
"            comment = \"They're all gone ...\";\n"
"        }\n"
"        else comment = \"\";\n"
"\n"
"        // Set ._label's new text\n"
"        this._label.set_label (String (product) + \" penguins on the iceberg. \" + comment);\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ScaleExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/scale.js.page:210 C/spinbutton.js.page:201
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Adjustment."
"html\">Gtk.Adjustment</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Adjustment."
"html\">Gtk.Adjustment</link>"

#. (itstool) path: item/p
#: C/scale.js.page:215
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Scale.html"
"\">Gtk.Scale</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Scale.html"
"\">Gtk.Scale</link>"

#. (itstool) path: info/title
#: C/scale.py.page:8
msgctxt "text"
msgid "Scale (Python)"
msgstr "Scale (Python)"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/scale.py.page:24 C/scale.vala.page:24
msgctxt "_"
msgid "external ref='media/scale.png' md5='462c52a53b773cb9e8c62c646bf88452'"
msgstr ""

#. (itstool) path: section/code
#: C/scale.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Scale Example\", application=app)\n"
"        self.set_default_size(400, 300)\n"
"        self.set_border_width(5)\n"
"\n"
"        # two adjustments (initial value, min value, max value,\n"
"        # step increment - press cursor keys to see!,\n"
"        # page increment - click around the handle to see!,\n"
"        # page size - not used here)\n"
"        ad1 = Gtk.Adjustment(0, 0, 100, 5, 10, 0)\n"
"        ad2 = Gtk.Adjustment(50, 0, 100, 5, 10, 0)\n"
"\n"
"        # an horizontal scale\n"
"        self.h_scale = Gtk.Scale(\n"
"            orientation=Gtk.Orientation.HORIZONTAL, adjustment=ad1)\n"
"        # of integers (no digits)\n"
"        self.h_scale.set_digits(0)\n"
"        # that can expand horizontally if there is space in the grid (see\n"
"        # below)\n"
"        self.h_scale.set_hexpand(True)\n"
"        # that is aligned at the top of the space allowed in the grid (see\n"
"        # below)\n"
"        self.h_scale.set_valign(Gtk.Align.START)\n"
"\n"
"        # we connect the signal \"value-changed\" emitted by the scale with the callback\n"
"        # function scale_moved\n"
"        self.h_scale.connect(\"value-changed\", self.scale_moved)\n"
"\n"
"        # a vertical scale\n"
"        self.v_scale = Gtk.Scale(\n"
"            orientation=Gtk.Orientation.VERTICAL, adjustment=ad2)\n"
"        # that can expand vertically if there is space in the grid (see below)\n"
"        self.v_scale.set_vexpand(True)\n"
"\n"
"        # we connect the signal \"value-changed\" emitted by the scale with the callback\n"
"        # function scale_moved\n"
"        self.v_scale.connect(\"value-changed\", self.scale_moved)\n"
"\n"
"        # a label\n"
"        self.label = Gtk.Label()\n"
"        self.label.set_text(\"Move the scale handles...\")\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.set_column_spacing(10)\n"
"        grid.set_column_homogeneous(True)\n"
"        grid.attach(self.h_scale, 0, 0, 1, 1)\n"
"        grid.attach_next_to(\n"
"            self.v_scale, self.h_scale, Gtk.PositionType.RIGHT, 1, 1)\n"
"        grid.attach(self.label, 0, 1, 2, 1)\n"
"\n"
"        self.add(grid)\n"
"\n"
"    # any signal from the scales is signaled to the label the text of which is\n"
"    # changed\n"
"    def scale_moved(self, event):\n"
"        self.label.set_text(\"Horizontal scale is \" + str(int(self.h_scale.get_value())) +\n"
"                            \"; vertical scale is \" + str(self.v_scale.get_value()) + \".\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Scale Example\", application=app)\n"
"        self.set_default_size(400, 300)\n"
"        self.set_border_width(5)\n"
"\n"
"        # two adjustments (initial value, min value, max value,\n"
"        # step increment - press cursor keys to see!,\n"
"        # page increment - click around the handle to see!,\n"
"        # page size - not used here)\n"
"        ad1 = Gtk.Adjustment(0, 0, 100, 5, 10, 0)\n"
"        ad2 = Gtk.Adjustment(50, 0, 100, 5, 10, 0)\n"
"\n"
"        # an horizontal scale\n"
"        self.h_scale = Gtk.Scale(\n"
"            orientation=Gtk.Orientation.HORIZONTAL, adjustment=ad1)\n"
"        # of integers (no digits)\n"
"        self.h_scale.set_digits(0)\n"
"        # that can expand horizontally if there is space in the grid (see\n"
"        # below)\n"
"        self.h_scale.set_hexpand(True)\n"
"        # that is aligned at the top of the space allowed in the grid (see\n"
"        # below)\n"
"        self.h_scale.set_valign(Gtk.Align.START)\n"
"\n"
"        # we connect the signal \"value-changed\" emitted by the scale with the callback\n"
"        # function scale_moved\n"
"        self.h_scale.connect(\"value-changed\", self.scale_moved)\n"
"\n"
"        # a vertical scale\n"
"        self.v_scale = Gtk.Scale(\n"
"            orientation=Gtk.Orientation.VERTICAL, adjustment=ad2)\n"
"        # that can expand vertically if there is space in the grid (see below)\n"
"        self.v_scale.set_vexpand(True)\n"
"\n"
"        # we connect the signal \"value-changed\" emitted by the scale with the callback\n"
"        # function scale_moved\n"
"        self.v_scale.connect(\"value-changed\", self.scale_moved)\n"
"\n"
"        # a label\n"
"        self.label = Gtk.Label()\n"
"        self.label.set_text(\"Move the scale handles...\")\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.set_column_spacing(10)\n"
"        grid.set_column_homogeneous(True)\n"
"        grid.attach(self.h_scale, 0, 0, 1, 1)\n"
"        grid.attach_next_to(\n"
"            self.v_scale, self.h_scale, Gtk.PositionType.RIGHT, 1, 1)\n"
"        grid.attach(self.label, 0, 1, 2, 1)\n"
"\n"
"        self.add(grid)\n"
"\n"
"    # any signal from the scales is signaled to the label the text of which is\n"
"    # changed\n"
"    def scale_moved(self, event):\n"
"        self.label.set_text(\"Horizontal scale is \" + str(int(self.h_scale.get_value())) +\n"
"                            \"; vertical scale is \" + str(self.v_scale.get_value()) + \".\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/scale.py.page:35
msgid "Useful methods for a Scale widget"
msgstr "Scale 위젯에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/scale.py.page:36
msgid ""
"A Gtk.Adjustment is needed to construct the Gtk.Scale. This is the "
"representation of a value with a lower and upper bound, together with step "
"and page increments, and a page size, and it is constructed as <code>Gtk."
"Adjustment(value, lower, upper, step_increment, page_increment, page_size)</"
"code> where the fields are of type <code>float</code>; <code>step_increment</"
"code> is the increment/decrement that is obtained by using the cursor keys, "
"<code>page_increment</code> the one that is obtained clicking on the scale "
"itself. Note that <code>page_size</code> is not used in this case, it should "
"be set to <code>0</code>."
msgstr ""
"Gtk.Adjustment는 Gtk.Scale을 만들떄 필요합니다. 상한 값, 하한 값, 단계 및 페"
"이지 증가 값을 저장하며, <code>Gtk.Adjustment(value, lower, upper, "
"step_increment, page_increment, page_size)</code>로 구성합니다. 여기서 각 값"
"은 <code>float</code>형식입니다. <code>step_increment</code>는 커서 키를 활용"
"할 때 가져올 증가 감소 값이며, <code>page_increment</code>는 Scale 자체를 눌"
"렀을 떄 가져올 값입니다. 참고로 지금과 같은 경우는 <code>page_size</code> 값"
"을 활용하지 않으므로 <code>0</code> 값으로 설정해야합니다."

#. (itstool) path: section/p
#: C/scale.py.page:37
msgid ""
"In line 28 the signal <code>\"value-changed\"</code> is connected to the "
"callback function <code>scale_moved()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"28번째 줄에서 <code>\"value-changed\"</code> 시그널은 <code><var>widget</"
"var>.connect(<var>signal</var>, <var>callback function</var>)</code> 함수로  "
"<code>scale_moved()</code> 콜백 함수에 연결했습니다. 더 자세한 설명은 <link "
"xref=\"signals-callbacks.py\"/>를 참조하십시오."

#. (itstool) path: item/p
#: C/scale.py.page:39
msgid ""
"<code>get_value()</code> retrieves the current value of the scale; "
"<code>set_value(value)</code> sets it (if the <code>value</code>, of type "
"<code>float</code>, is outside the minimum or maximum range, it will be "
"clamped to fit inside them). These are methods of the class Gtk.Range."
msgstr ""
"<code>get_value()</code> 함수는 Scale의 현재 값을 가져옵니다. "
"<code>set_value(value)</code> 함수는 Scale 값을 설정합니다(<code>float</"
"code> 형식의 <code>value</code> 값이 최소 최대 값 범위를 벗어나면, 범위내 값"
"으로 바뀝니다). 이 메서드는 Gtk.Range 클래스에 있습니다."

#. (itstool) path: item/p
#: C/scale.py.page:40
msgid ""
"Use <code>set_draw_value(False)</code> to avoid displaying the current value "
"as a string next to the slider."
msgstr ""
"슬라이더 옆에 현재 값을 나타나지 않게 하려면 <code>set_draw_value(False)</"
"code> 함수를 사용하십시오."

#. (itstool) path: item/p
#: C/scale.py.page:41
msgid ""
"To highlight the part of the scale between the origin and the current value:"
msgstr "초기 값과 현재 값 사이의 Scale 부분을 강조하려면:"

#. (itstool) path: item/code
#: C/scale.py.page:42
#, no-wrap
msgid ""
"\n"
"self.h_scale.set_restrict_to_fill_level(False)\n"
"self.h_scale.set_fill_level(self.h_scale.get_value())\n"
"self.h_scale.set_show_fill_level(True)"
msgstr ""
"\n"
"self.h_scale.set_restrict_to_fill_level(False)\n"
"self.h_scale.set_fill_level(self.h_scale.get_value())\n"
"self.h_scale.set_show_fill_level(True)"

#. (itstool) path: item/p
#: C/scale.py.page:46
msgid ""
"in the callback function of the \"value-changed\" signal, so to have the new "
"filling every time the value is changed. These are methods of the class Gtk."
"Range."
msgstr ""
"\"value-changed\" 시그널의 콜백 함수에서는 값이 바뀔 때마다 새로 채워넣습니"
"다. 이 메서드는 Gtk.Range 클래스에 있습니다."

#. (itstool) path: item/p
#: C/scale.py.page:48
msgid ""
"<code>add_mark(value, position, markup)</code> adds a mark at the "
"<code>value</code> (<code>float</code> or <code>int</code> if that is the "
"precision of the scale), in <code>position</code> (<code>Gtk.PositionType."
"LEFT, Gtk.PositionType.RIGHT, Gtk.PositionType.TOP, Gtk.PositionType.BOTTOM</"
"code>) with text <code>Null</code> or <code>markup</code> in the Pango "
"Markup Language. To clear marks, <code>clear_marks()</code>."
msgstr ""
"<code>add_mark(value, position, markup)</code> 함수는 <code>value</code> 값 "
"위치에, <code>position</code> 방향(<code>Gtk.PositionType.LEFT, Gtk."
"PositionType.RIGHT, Gtk.PositionType.TOP, Gtk.PositionType.BOTTOM</code>)으"
"로,  <code>Null</code> 또는 팡고 마크업 언어인 <code>markup</code> 값 텍스트"
"를 붙여 표시를 추가합니다(Scale에서 허용하는 값일 경우 <code>float</code>형 "
"또는 <code>int</code>형). 마크를 지우려면 <code>clear_marks()</code> 함수를 "
"사용하십시오."

#. (itstool) path: item/p
#: C/scale.py.page:49
msgid ""
"<code>set_digits(digits)</code> sets the precision of the scale at "
"<code>digits</code> digits."
msgstr ""
"<code>set_digits(digits)</code> 함수는 Scale 정밀도 자리수를 <code>digits</"
"code> 자리로 설정합니다."

#. (itstool) path: item/p
#: C/scale.py.page:57
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkScale.html"
"\">GtkScale</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkScale.html"
"\">GtkScale</link>"

#. (itstool) path: item/p
#: C/scale.py.page:58 C/spinbutton.py.page:50
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkAdjustment.html"
"\">GtkAdjustment</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkAdjustment.html"
"\">GtkAdjustment</link>"

#. (itstool) path: item/p
#: C/scale.py.page:59 C/scrolledwindow.js.page:37 C/scrolledwindow.py.page:46
#: C/textview.py.page:100
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/gtk3-Standard-"
"Enumerations.html\">Standard Enumerations</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/gtk3-Standard-"
"Enumerations.html\">표준 서수형 값 목록</link>"

#. (itstool) path: info/title
#: C/scale.vala.page:8
msgctxt "text"
msgid "Scale (Vala)"
msgstr "Scale (Vala)"

#. (itstool) path: page/code
#: C/scale.vala.page:27
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\tGtk.Scale h_scale;\n"
"\tGtk.Scale v_scale;\n"
"\tGtk.Label label;\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"Scale Example\";\n"
"\t\twindow.set_default_size (400, 300);\n"
"\t\twindow.set_border_width (5);\n"
"\n"
"\t\th_scale = new Gtk.Scale.with_range (Gtk.Orientation.HORIZONTAL, 0.0, 100.0, 5.0);\n"
"\t\th_scale.set_digits (0); //number of decimal places displayed\n"
"\t\th_scale.set_valign (Gtk.Align.START); //horizontal alignment\n"
"\n"
"\t\tvar adjustment = new Gtk.Adjustment (42.0, 0.0, 100.0, 5.0, 10.0, 0.0);\n"
"\t\tv_scale = new Gtk.Scale (Gtk.Orientation.VERTICAL, adjustment);\n"
"\t\tv_scale.set_vexpand(true);\n"
"\n"
"\t\tlabel = new Gtk.Label (\"Move the scale handles...\");\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.set_column_spacing (10); //amount of space between columns\n"
"\t\tgrid.set_column_homogeneous (true); //all columns same width\n"
"\t\tgrid.attach (h_scale, 0, 0, 1, 1);\n"
"\t\tgrid.attach_next_to (v_scale, h_scale, Gtk.PositionType.RIGHT, 1, 1);\n"
"\t\tgrid.attach (label, 0, 1, 2, 1);\n"
"\n"
"\t\th_scale.value_changed.connect (scale_moved);\n"
"\t\tv_scale.value_changed.connect (scale_moved);\n"
"\n"
"\t\twindow.add (grid);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"\n"
"\t/* Callback function for \"value-changed\" signal.\n"
"\t * The parameter refers to the scale which emitted the signal.\n"
"\t * Since we are accessing the values of not one, but two scales,\n"
"\t * we made the ranges instance variables, and ignore the\n"
"\t * parameter.\n"
"\t */\n"
"\tvoid scale_moved (Gtk.Range range) {\n"
"\t\tlabel.set_text (\"Horizontal scale is %.1f; vertical scale is %.1f.\".printf (h_scale.get_value (), v_scale.get_value ()));\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\tGtk.Scale h_scale;\n"
"\tGtk.Scale v_scale;\n"
"\tGtk.Label label;\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"Scale Example\";\n"
"\t\twindow.set_default_size (400, 300);\n"
"\t\twindow.set_border_width (5);\n"
"\n"
"\t\th_scale = new Gtk.Scale.with_range (Gtk.Orientation.HORIZONTAL, 0.0, 100.0, 5.0);\n"
"\t\th_scale.set_digits (0); //number of decimal places displayed\n"
"\t\th_scale.set_valign (Gtk.Align.START); //horizontal alignment\n"
"\n"
"\t\tvar adjustment = new Gtk.Adjustment (42.0, 0.0, 100.0, 5.0, 10.0, 0.0);\n"
"\t\tv_scale = new Gtk.Scale (Gtk.Orientation.VERTICAL, adjustment);\n"
"\t\tv_scale.set_vexpand(true);\n"
"\n"
"\t\tlabel = new Gtk.Label (\"Move the scale handles...\");\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.set_column_spacing (10); //amount of space between columns\n"
"\t\tgrid.set_column_homogeneous (true); //all columns same width\n"
"\t\tgrid.attach (h_scale, 0, 0, 1, 1);\n"
"\t\tgrid.attach_next_to (v_scale, h_scale, Gtk.PositionType.RIGHT, 1, 1);\n"
"\t\tgrid.attach (label, 0, 1, 2, 1);\n"
"\n"
"\t\th_scale.value_changed.connect (scale_moved);\n"
"\t\tv_scale.value_changed.connect (scale_moved);\n"
"\n"
"\t\twindow.add (grid);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"\n"
"\t/* Callback function for \"value-changed\" signal.\n"
"\t * The parameter refers to the scale which emitted the signal.\n"
"\t * Since we are accessing the values of not one, but two scales,\n"
"\t * we made the ranges instance variables, and ignore the\n"
"\t * parameter.\n"
"\t */\n"
"\tvoid scale_moved (Gtk.Range range) {\n"
"\t\tlabel.set_text (\"Horizontal scale is %.1f; vertical scale is %.1f.\".printf (h_scale.get_value (), v_scale.get_value ()));\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/scale.vala.page:32
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Scale.html\">Gtk.Scale</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Scale.html\">Gtk.Scale</"
"link>"

#. (itstool) path: item/p
#: C/scale.vala.page:33
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Adjustment.html\">Gtk."
"Adjustment</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Adjustment.html\">Gtk."
"Adjustment</link>"

#. (itstool) path: item/p
#: C/scale.vala.page:34
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.PositionType.html\">Gtk."
"PositionType</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.PositionType.html\">Gtk."
"PositionType</link>"

#. (itstool) path: item/p
#: C/scale.vala.page:35
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Orientation.html\">Gtk."
"Orientation</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Orientation.html\">Gtk."
"Orientation</link>"

#. (itstool) path: info/title
#: C/scrolledwindow.c.page:8
msgctxt "text"
msgid "ScrolledWindow (C)"
msgstr "ScrolledWindow (C)"

#. (itstool) path: info/desc
#: C/scrolledwindow.c.page:20 C/scrolledwindow.js.page:18
#: C/scrolledwindow.py.page:19 C/scrolledwindow.vala.page:19
msgid "Adds scrollbars to its child widget"
msgstr "스크롤 표시줄을 하위 위젯에 추가합니다."

#. (itstool) path: page/title
#: C/scrolledwindow.c.page:23 C/scrolledwindow.js.page:21
#: C/scrolledwindow.py.page:22 C/scrolledwindow.vala.page:22
msgid "ScrolledWindow"
msgstr "ScrolledWindow"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/scrolledwindow.c.page:25 C/scrolledwindow.js.page:22
#: C/scrolledwindow.py.page:23 C/scrolledwindow.vala.page:23
msgctxt "_"
msgid ""
"external ref='media/scrolledwindow.png' "
"md5='697bb3205d5c4fb0b4ea8db435843157'"
msgstr ""

#. (itstool) path: page/p
#: C/scrolledwindow.c.page:26 C/scrolledwindow.js.page:23
#: C/scrolledwindow.py.page:24 C/scrolledwindow.vala.page:24
msgid "An image in a scrolled window."
msgstr "스크롤 창에 이미지를 나타냅니다."

#. (itstool) path: page/code
#: C/scrolledwindow.c.page:28
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Declare variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *scrolled_window;\n"
"  GtkWidget *image;\n"
"\n"
"  /* Create a window with a title, and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"ScrolledWindow Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 220, 200);\n"
"\n"
"  /* Create the scrolled window. Usually NULL is passed for both parameters so\n"
"   * that it creates the horizontal/vertical adjustments automatically. Setting\n"
"   * the scrollbar policy to automatic allows the scrollbars to only show up\n"
"   * when needed.\n"
"   */\n"
"  scrolled_window = gtk_scrolled_window_new (NULL, NULL);\n"
"  /* Set the border width */\n"
"  gtk_container_set_border_width (GTK_CONTAINER (scrolled_window), 10);\n"
"  /* Extract our desired image from a file that we have */\n"
"  image = gtk_image_new_from_file (\"gnome-image.png\");\n"
"  /* And add it to the scrolled window */\n"
"  gtk_scrolled_window_add_with_viewport (GTK_SCROLLED_WINDOW (scrolled_window), image);\n"
"  /* Set the policy of the horizontal and vertical scrollbars to automatic.\n"
"   * What this means is that the scrollbars are only present if needed.\n"
"   */\n"
"  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window),\n"
"                                  GTK_POLICY_AUTOMATIC,\n"
"                                  GTK_POLICY_AUTOMATIC);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), scrolled_window);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Declare variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *scrolled_window;\n"
"  GtkWidget *image;\n"
"\n"
"  /* Create a window with a title, and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"ScrolledWindow Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 220, 200);\n"
"\n"
"  /* Create the scrolled window. Usually NULL is passed for both parameters so\n"
"   * that it creates the horizontal/vertical adjustments automatically. Setting\n"
"   * the scrollbar policy to automatic allows the scrollbars to only show up\n"
"   * when needed.\n"
"   */\n"
"  scrolled_window = gtk_scrolled_window_new (NULL, NULL);\n"
"  /* Set the border width */\n"
"  gtk_container_set_border_width (GTK_CONTAINER (scrolled_window), 10);\n"
"  /* Extract our desired image from a file that we have */\n"
"  image = gtk_image_new_from_file (\"gnome-image.png\");\n"
"  /* And add it to the scrolled window */\n"
"  gtk_scrolled_window_add_with_viewport (GTK_SCROLLED_WINDOW (scrolled_window), image);\n"
"  /* Set the policy of the horizontal and vertical scrollbars to automatic.\n"
"   * What this means is that the scrollbars are only present if needed.\n"
"   */\n"
"  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window),\n"
"                                  GTK_POLICY_AUTOMATIC,\n"
"                                  GTK_POLICY_AUTOMATIC);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), scrolled_window);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/scrolledwindow.c.page:37
msgid ""
"<link href=\"http://developer.gnome.org/gtk/stable/gtk3-Standard-"
"Enumerations.html#GtkPolicyType\">GtkPolicyType</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk/stable/gtk3-Standard-"
"Enumerations.html#GtkPolicyType\">GtkPolicyType</link>"

#. (itstool) path: info/title
#: C/scrolledwindow.js.page:8
msgctxt "text"
msgid "ScrolledWindow (JavaScript)"
msgstr "ScrolledWindow (JavaScript)"

#. (itstool) path: section/code
#: C/scrolledwindow.js.page:29
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ScrolledWindowExample = new Lang.Class ({\n"
"    Name: 'ScrolledWindow Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application({ application_id: 'org.example.jscrolledwindow' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"        // Create the application window\n"
"        this.window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                    window_position: Gtk.WindowPosition.CENTER,\n"
"                                                    title: \"ScrolledWindow Example\",\n"
"                                                    default_width: 200,\n"
"                                                    default_height: 200,\n"
"                                                    border_width: 10 });\n"
"        // the scrolledwindow\n"
"        this.scrolledWindow = new Gtk.ScrolledWindow();\n"
"        this.scrolledWindow.set_border_width(10);\n"
"        // there is always the scrollbar (otherwise: AUTOMATIC - only if needed - or NEVER)\n"
"        this.scrolledWindow.set_policy(Gtk.PolicyType.ALWAYS, Gtk.PolicyType.ALWAYS);\n"
"        // an image - slightly larger than the window\n"
"        this.image = new Gtk.Image();\n"
"        this.image.set_from_file(\"gnome-image.png\");\n"
"\n"
"        // add the image to the scrolledwindow\n"
"        this.scrolledWindow.add_with_viewport(this.image);\n"
"\n"
"        // add the scrolledwindow to the window\n"
"        this.window.add(this.scrolledWindow);\n"
"        this.window.show_all();\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ScrolledWindowExample();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ScrolledWindowExample = new Lang.Class ({\n"
"    Name: 'ScrolledWindow Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application({ application_id: 'org.example.jscrolledwindow' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"        // Create the application window\n"
"        this.window = new Gtk.ApplicationWindow  ({ application: this.application,\n"
"                                                    window_position: Gtk.WindowPosition.CENTER,\n"
"                                                    title: \"ScrolledWindow Example\",\n"
"                                                    default_width: 200,\n"
"                                                    default_height: 200,\n"
"                                                    border_width: 10 });\n"
"        // the scrolledwindow\n"
"        this.scrolledWindow = new Gtk.ScrolledWindow();\n"
"        this.scrolledWindow.set_border_width(10);\n"
"        // there is always the scrollbar (otherwise: AUTOMATIC - only if needed - or NEVER)\n"
"        this.scrolledWindow.set_policy(Gtk.PolicyType.ALWAYS, Gtk.PolicyType.ALWAYS);\n"
"        // an image - slightly larger than the window\n"
"        this.image = new Gtk.Image();\n"
"        this.image.set_from_file(\"gnome-image.png\");\n"
"\n"
"        // add the image to the scrolledwindow\n"
"        this.scrolledWindow.add_with_viewport(this.image);\n"
"\n"
"        // add the scrolledwindow to the window\n"
"        this.window.add(this.scrolledWindow);\n"
"        this.window.show_all();\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ScrolledWindowExample();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/scrolledwindow.js.page:36
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"ScrolledWindow.html\">GtkScrolledWindow</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"ScrolledWindow.html\">GtkScrolledWindow</link>"

#. (itstool) path: info/title
#: C/scrolledwindow.py.page:8
msgctxt "text"
msgid "ScrolledWindow (Python)"
msgstr "ScrolledWindow (Python)"

#. (itstool) path: section/code
#: C/scrolledwindow.py.page:30
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(\n"
"            self, title=\"ScrolledWindow Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"\n"
"        # the scrolledwindow\n"
"        scrolled_window = Gtk.ScrolledWindow()\n"
"        scrolled_window.set_border_width(10)\n"
"        # there is always the scrollbar (otherwise: AUTOMATIC - only if needed\n"
"        # - or NEVER)\n"
"        scrolled_window.set_policy(\n"
"            Gtk.PolicyType.ALWAYS, Gtk.PolicyType.ALWAYS)\n"
"\n"
"        # an image - slightly larger than the window...\n"
"        image = Gtk.Image()\n"
"        image.set_from_file(\"gnome-image.png\")\n"
"\n"
"        # add the image to the scrolledwindow\n"
"        scrolled_window.add_with_viewport(image)\n"
"\n"
"        # add the scrolledwindow to the window\n"
"        self.add(scrolled_window)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(\n"
"            self, title=\"ScrolledWindow Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"\n"
"        # the scrolledwindow\n"
"        scrolled_window = Gtk.ScrolledWindow()\n"
"        scrolled_window.set_border_width(10)\n"
"        # there is always the scrollbar (otherwise: AUTOMATIC - only if needed\n"
"        # - or NEVER)\n"
"        scrolled_window.set_policy(\n"
"            Gtk.PolicyType.ALWAYS, Gtk.PolicyType.ALWAYS)\n"
"\n"
"        # an image - slightly larger than the window...\n"
"        image = Gtk.Image()\n"
"        image.set_from_file(\"gnome-image.png\")\n"
"\n"
"        # add the image to the scrolledwindow\n"
"        scrolled_window.add_with_viewport(image)\n"
"\n"
"        # add the scrolledwindow to the window\n"
"        self.add(scrolled_window)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/scrolledwindow.py.page:33
msgid "Useful methods for a ScrolledWindow widget"
msgstr "ScrolledWindow 위젯에 쓸만한 메서드"

#. (itstool) path: item/p
#: C/scrolledwindow.py.page:35
msgid ""
"<code>set_policy(hscrollbar_policy, vscrollbar_policy)</code> where each of "
"the arguments is one of <code>Gtk.Policy.AUTOMATIC, Gtk.Policy.ALWAYS, Gtk."
"Policy.NEVER</code> regulates whether the horizontal and vertical scrollbars "
"should appear: with <code>AUTOMATIC</code> they appear only if needed, "
"<code>ALWAYS</code> and <code>NEVER</code> are self-explanatory."
msgstr ""
"<code>set_policy(hscrollbar_policy, vscrollbar_policy)</code> 함수에서 각 인"
"자에는 수평 수직 방향으로 스크롤 표시줄을 나타낼지 여부를 정규화 한 "
"<code>Gtk.Policy.AUTOMATIC, Gtk.Policy.ALWAYS, Gtk.Policy.NEVER</code> 값 중 "
"하나가 들어갑니다. <code>AUTOMATIC</code> 값을 넣으면 필요할 경우 나타내며, "
"<code>ALWAYS</code>, <code>NEVER</code>는 값에서 설명하는 의미와 같습니다."

#. (itstool) path: item/p
#: C/scrolledwindow.py.page:36
msgid ""
"<code>add_with_viewport(widget)</code> is used to add the Gtk.Widget "
"<code>widget</code> without native scrolling capabilities inside the window."
msgstr ""
"<code>add_with_viewport(widget)</code> 함수는 창에 자체 스크롤 기능을 넣지 않"
"고 Gtk.Widget <code>widget</code>을 추가하는데 사용합니다."

#. (itstool) path: item/p
#: C/scrolledwindow.py.page:37
msgid ""
"<code>set_placement(window_placement)</code> sets the placement of the "
"contents with respect to the scrollbars for the scrolled window. The options "
"for the argument are <code>Gtk.CornerType.TOP_LEFT</code> (default: the "
"scrollbars are on the bottom and on the right of the window), <code>Gtk."
"CornerType.TOP_RIGHT, Gtk.CornerType.BOTTOM_LEFT, Gtk.CornerType."
"BOTTOM_RIGHT</code>."
msgstr ""
"<code>set_placement(window_placement)</code> 함수는 스크롤 창에서 스크롤 표시"
"줄을 나타낼 컨텐트 위치를 설정합니다. 인자 옵션은 <code>Gtk.CornerType."
"TOP_LEFT</code> (기본값: 스크롤 표시줄을 창 하단과 우측에 나타냄), <code>Gtk."
"CornerType.TOP_RIGHT, Gtk.CornerType.BOTTOM_LEFT, Gtk.CornerType."
"BOTTOM_RIGHT</code>가 있습니다."

#. (itstool) path: item/p
#: C/scrolledwindow.py.page:38
msgid ""
"<code>set_hadjustment(adjustment)</code> and "
"<code>set_vadjustment(adjustment)</code> set the Gtk.Adjustment "
"<code>adjustment</code>. This is the representation of a value with a lower "
"and upper bound, together with step and page increments, and a page size, "
"and it is constructed as <code>Gtk.Adjustment(value, lower, upper, "
"step_increment, page_increment, page_size)</code> where the fields are of "
"type <code>float</code>. (Note that <code>step_increment</code> is not used "
"in this case, it can be set to <code>0</code>.)"
msgstr ""
"<code>set_hadjustment(adjustment)</code> 함수와 "
"<code>set_vadjustment(adjustment)</code> 함수는 각각 Gtk.Adjustment "
"<code>adjustment</code>를 설정합니다. 상한 값, 하한 값, 단계/페이지 증가 값, "
"페이지 크기를 나타내며, <code>Gtk.Adjustment(value, lower, upper, "
"step_increment, page_increment, page_size)</code>로 만듭니다. 여기서 각 필드 "
"값은 <code>float</code> 형식입니다. (참고로 지금 같은 경우는 "
"<code>step_increment</code>를 사용하지 않으므로 <code>0</code> 값으로 설정합"
"니다)."

#. (itstool) path: item/p
#: C/scrolledwindow.py.page:45 C/textview.py.page:99
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkScrolledWindow.html"
"\">GtkScrolledWindow</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkScrolledWindow.html"
"\">GtkScrolledWindow</link>"

#. (itstool) path: info/title
#: C/scrolledwindow.vala.page:8
msgctxt "text"
msgid "ScrolledWindow (Vala)"
msgstr "ScrolledWindow (Vala)"

#. (itstool) path: page/code
#: C/scrolledwindow.vala.page:26
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\t/* Create the window of this application. */\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"ScrolledWindow Example\";\n"
"\t\twindow.set_default_size (200, 200);\n"
"\n"
"\t\tvar scrolled_window = new Gtk.ScrolledWindow (null, null);\n"
"\t\tscrolled_window.set_border_width (10);\n"
"\t\tscrolled_window.add_with_viewport (new Gtk.Image.from_file (\"gnome-image.png\"));\n"
"\t\tscrolled_window.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);\n"
"\n"
"\t\twindow.add (scrolled_window);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\t/* Create the window of this application. */\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"ScrolledWindow Example\";\n"
"\t\twindow.set_default_size (200, 200);\n"
"\n"
"\t\tvar scrolled_window = new Gtk.ScrolledWindow (null, null);\n"
"\t\tscrolled_window.set_border_width (10);\n"
"\t\tscrolled_window.add_with_viewport (new Gtk.Image.from_file (\"gnome-image.png\"));\n"
"\t\tscrolled_window.set_policy (Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC);\n"
"\n"
"\t\twindow.add (scrolled_window);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/scrolledwindow.vala.page:31 C/textview.vala.page:37
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ScrolledWindow.html\">Gtk."
"ScrolledWindow</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ScrolledWindow.html\">Gtk."
"ScrolledWindow</link>"

#. (itstool) path: item/p
#: C/scrolledwindow.vala.page:32 C/textview.vala.page:39
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.PolicyType.html\">Gtk."
"PolicyType</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.PolicyType.html\">Gtk."
"PolicyType</link>"

#. (itstool) path: info/title
#: C/separator.c.page:8
msgctxt "text"
msgid "Separator (C)"
msgstr "구분선(C)"

#. (itstool) path: info/desc
#: C/separator.c.page:19 C/separator.py.page:20 C/separator.vala.page:21
msgid "A separator widget"
msgstr "구분선 위젯"

#. (itstool) path: page/title
#: C/separator.c.page:22 C/separator.py.page:23 C/separator.vala.page:24
msgid "Separator"
msgstr "구분선"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/separator.c.page:24 C/separator.py.page:25 C/separator.vala.page:26
msgctxt "_"
msgid ""
"external ref='media/separator.png' md5='8769b27662ce5c77f99e9ce33751a21a'"
msgstr ""

#. (itstool) path: page/p
#: C/separator.c.page:25 C/separator.py.page:26 C/separator.vala.page:27
msgid "A horizontal and a vertical separator divide some labels."
msgstr "몇가지 레이블을 나누는 수평, 수직 구분선입니다."

#. (itstool) path: section/code
#: C/separator.c.page:31
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"  GtkWidget *label1;\n"
"  GtkWidget *label2;\n"
"  GtkWidget *label3;\n"
"  GtkWidget *hseparator;\n"
"  GtkWidget *vseparator;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Separator Example\");\n"
"\n"
"  label1 = gtk_label_new (\"Below, a horizontal separator.\");\n"
"  label2 = gtk_label_new (\"On the right, a vertical separator.\");\n"
"  label3 = gtk_label_new (\"On the left, a vertical separator.\");\n"
"\n"
"  vseparator = gtk_separator_new (GTK_ORIENTATION_VERTICAL);\n"
"  hseparator = gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);\n"
"\n"
"  grid = gtk_grid_new ();\n"
"\n"
"  gtk_grid_attach (GTK_GRID (grid), label1, 0, 0, 3, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), hseparator, 0, 1, 3, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), label2, 0, 2, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), vseparator, 1, 2, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), label3, 2, 2, 1, 1);\n"
"\n"
"  gtk_grid_set_column_homogeneous (GTK_GRID (grid), TRUE);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"  GtkWidget *label1;\n"
"  GtkWidget *label2;\n"
"  GtkWidget *label3;\n"
"  GtkWidget *hseparator;\n"
"  GtkWidget *vseparator;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Separator Example\");\n"
"\n"
"  label1 = gtk_label_new (\"Below, a horizontal separator.\");\n"
"  label2 = gtk_label_new (\"On the right, a vertical separator.\");\n"
"  label3 = gtk_label_new (\"On the left, a vertical separator.\");\n"
"\n"
"  vseparator = gtk_separator_new (GTK_ORIENTATION_VERTICAL);\n"
"  hseparator = gtk_separator_new (GTK_ORIENTATION_HORIZONTAL);\n"
"\n"
"  grid = gtk_grid_new ();\n"
"\n"
"  gtk_grid_attach (GTK_GRID (grid), label1, 0, 0, 3, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), hseparator, 0, 1, 3, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), label2, 0, 2, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), vseparator, 1, 2, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), label3, 2, 2, 1, 1);\n"
"\n"
"  gtk_grid_set_column_homogeneous (GTK_GRID (grid), TRUE);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"

#. (itstool) path: section/title
#: C/separator.c.page:35 C/separator.py.page:36 C/separator.vala.page:37
msgid "API Reference"
msgstr "API 참고"

#. (itstool) path: item/p
#: C/separator.c.page:39 C/separator.py.page:40
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkSeparator.html"
"\">GtkSeparator</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkSeparator.html"
"\">GtkSeparator</link>"

#. (itstool) path: info/title
#: C/separator.py.page:8
msgctxt "text"
msgid "Separator (Python)"
msgstr "구분선(Python)"

#. (itstool) path: section/code
#: C/separator.py.page:32
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Separator Example\", application=app)\n"
"\n"
"        # three labels\n"
"        label1 = Gtk.Label()\n"
"        label1.set_text(\"Below, a horizontal separator.\")\n"
"\n"
"        label2 = Gtk.Label()\n"
"        label2.set_text(\"On the right, a vertical separator.\")\n"
"\n"
"        label3 = Gtk.Label()\n"
"        label3.set_text(\"On the left, a vertical separator.\")\n"
"\n"
"        # a horizontal separator\n"
"        hseparator = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)\n"
"        # a vertical separator\n"
"        vseparator = Gtk.Separator(orientation=Gtk.Orientation.VERTICAL)\n"
"\n"
"        # a grid to attach labels and separators\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(label1, 0, 0, 3, 1)\n"
"        grid.attach(hseparator, 0, 1, 3, 1)\n"
"        grid.attach(label2, 0, 2, 1, 1)\n"
"        grid.attach(vseparator, 1, 2, 1, 1)\n"
"        grid.attach(label3, 2, 2, 1, 1)\n"
"        grid.set_column_homogeneous(True)\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Separator Example\", application=app)\n"
"\n"
"        # three labels\n"
"        label1 = Gtk.Label()\n"
"        label1.set_text(\"Below, a horizontal separator.\")\n"
"\n"
"        label2 = Gtk.Label()\n"
"        label2.set_text(\"On the right, a vertical separator.\")\n"
"\n"
"        label3 = Gtk.Label()\n"
"        label3.set_text(\"On the left, a vertical separator.\")\n"
"\n"
"        # a horizontal separator\n"
"        hseparator = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)\n"
"        # a vertical separator\n"
"        vseparator = Gtk.Separator(orientation=Gtk.Orientation.VERTICAL)\n"
"\n"
"        # a grid to attach labels and separators\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(label1, 0, 0, 3, 1)\n"
"        grid.attach(hseparator, 0, 1, 3, 1)\n"
"        grid.attach(label2, 0, 2, 1, 1)\n"
"        grid.attach(vseparator, 1, 2, 1, 1)\n"
"        grid.attach(label3, 2, 2, 1, 1)\n"
"        grid.set_column_homogeneous(True)\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: info/title
#: C/separator.vala.page:8
msgctxt "text"
msgid "Separator (Vala)"
msgstr "구분선(Vala)"

#. (itstool) path: section/code
#: C/separator.vala.page:33
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class Application : Gtk.Application {\n"
"\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.window\");\n"
"\t}\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application,\n"
"\t * which is inherited by Gtk.Application. */\n"
"\tpublic override void activate () {\n"
"\n"
"\t\tvar window = new Gtk.Window ();\n"
"\t\twindow.title = \"Separator Example\";\n"
"\n"
"\t\tvar label1 = new Gtk.Label (\"Below, a horizontal separator.\");\n"
"\t\tvar label2 = new Gtk.Label (\"On the right, a vertical separator.\");\n"
"\t\tvar label3 = new Gtk.Label (\"On the left, a vertical separator.\");\n"
"\n"
"\t\tvar hseparator = new Gtk.Separator (Gtk.Orientation.HORIZONTAL);\n"
"\t\tvar vseparator = new Gtk.Separator (Gtk.Orientation.VERTICAL);\n"
"\n"
"\t\tvar grid = new Gtk.Grid();\n"
"\n"
"\t\tgrid.attach (label1, 0, 0, 3, 1);\n"
"\t\tgrid.attach (hseparator, 0, 1, 3, 1);\n"
"\t\tgrid.attach (label2, 0, 2, 1, 1);\n"
"\t\tgrid.attach (vseparator, 1, 2, 1, 1);\n"
"\t\tgrid.attach (label3, 2, 2, 1, 1);\n"
"\n"
"\t\tgrid.set_column_homogeneous(true);\n"
"\n"
"\t\twindow.add (grid);\n"
"\t\tthis.add_window (window);\n"
"\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates the application and runs it.*/\n"
"int main (string[] args) {\n"
"\tvar app = new Application ();\n"
"\treturn app.run (args);\n"
"}\n"
msgstr ""
"/* This is the application. */\n"
"public class Application : Gtk.Application {\n"
"\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.window\");\n"
"\t}\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application,\n"
"\t * which is inherited by Gtk.Application. */\n"
"\tpublic override void activate () {\n"
"\n"
"\t\tvar window = new Gtk.Window ();\n"
"\t\twindow.title = \"Separator Example\";\n"
"\n"
"\t\tvar label1 = new Gtk.Label (\"Below, a horizontal separator.\");\n"
"\t\tvar label2 = new Gtk.Label (\"On the right, a vertical separator.\");\n"
"\t\tvar label3 = new Gtk.Label (\"On the left, a vertical separator.\");\n"
"\n"
"\t\tvar hseparator = new Gtk.Separator (Gtk.Orientation.HORIZONTAL);\n"
"\t\tvar vseparator = new Gtk.Separator (Gtk.Orientation.VERTICAL);\n"
"\n"
"\t\tvar grid = new Gtk.Grid();\n"
"\n"
"\t\tgrid.attach (label1, 0, 0, 3, 1);\n"
"\t\tgrid.attach (hseparator, 0, 1, 3, 1);\n"
"\t\tgrid.attach (label2, 0, 2, 1, 1);\n"
"\t\tgrid.attach (vseparator, 1, 2, 1, 1);\n"
"\t\tgrid.attach (label3, 2, 2, 1, 1);\n"
"\n"
"\t\tgrid.set_column_homogeneous(true);\n"
"\n"
"\t\twindow.add (grid);\n"
"\t\tthis.add_window (window);\n"
"\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates the application and runs it.*/\n"
"int main (string[] args) {\n"
"\tvar app = new Application ();\n"
"\treturn app.run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/separator.vala.page:41
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window.html\">GtkWindow</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window.html\">GtkWindow</"
"link>"

#. (itstool) path: item/p
#: C/separator.vala.page:42
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Separator.html"
"\">GtkSeparator</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Separator.html"
"\">GtkSeparator</link>"

#. (itstool) path: item/p
#: C/separator.vala.page:43
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Grid.html\">GtkGrid</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Grid.html\">GtkGrid</link>"

#. (itstool) path: item/p
#: C/separator.vala.page:44
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Label.html\">GtkLabel</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Label.html\">GtkLabel</link>"

#. (itstool) path: page/title
#: C/set-up-gedit.js.page:19
msgid "Set up gedit for JavaScript development"
msgstr "JavaScript 개발용 지에디트 설정"

#. (itstool) path: page/p
#: C/set-up-gedit.js.page:20
msgid ""
"This tutorial will show you how to set up <link href=\"http://projects.gnome."
"org/gedit/\">gedit</link>, GNOME's basic text editor, so that it has a "
"handful of extra features which are useful for writing JavaScript code."
msgstr ""
"이 따라하기 지침서는 그놈 기본 텍스트 편집기 <link href=\"http://projects."
"gnome.org/gedit/\">지에디트</link> 설정 방법을 보여주어 JavaScript 코드 작성"
"에 쓸만한 추가 기능을 활성화할 수 있게 합니다."

#. (itstool) path: section/title
#: C/set-up-gedit.js.page:23
msgid "Making code clearer"
msgstr "코드를 명확하게 하기"

#. (itstool) path: section/p
#: C/set-up-gedit.js.page:24
msgid ""
"Click on <gui>Edit</gui> in gedit's menu bar, then click on "
"<gui>Preferences</gui>. You should see something like this:"
msgstr ""
"지에디트 메뉴 표시줄에서 <gui>편집</gui>을 누르고 <gui>기본 설정</gui>을 누르"
"십시오. 다음과 같은 화면을 볼 수 있습니다:"

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/set-up-gedit.js.page:25
msgctxt "_"
msgid ""
"external ref='media/geditview.png' md5='f1438295662d95f56fcd1d8200efaaf2'"
msgstr ""

#. (itstool) path: section/p
#: C/set-up-gedit.js.page:26
msgid "Here are the options you want to make sure are turned on."
msgstr "활성화 여부를 확인할 옵션은 다음과 같습니다."

#. (itstool) path: item/p
#: C/set-up-gedit.js.page:28
msgid ""
"<gui>Display line numbers</gui> will help you compare the code you type in "
"with the original, and make it easier to see which line is causing an error "
"if there is a bug."
msgstr ""
"<gui>줄 번호 표시</gui> 옵션은 원래 여러분이 입력한 코드를 비교할 때 도움을 "
"주며, 버그가 있을 경우 오류가 난 줄을 쉽게 찾아볼 수 있습니다."

#. (itstool) path: item/p
#: C/set-up-gedit.js.page:29
msgid ""
"<gui>Highlight current line</gui> makes it easier to see which line you're "
"on, when you have to go back and forth a lot."
msgstr ""
"<gui>현재 줄 강조</gui> 옵션은 줄 위아래로 왔다갔다 하고 있을 때 몇번째 줄을 "
"편집하고 있는지 쉽게 살펴볼 수 있게 합니다."

#. (itstool) path: item/p
#: C/set-up-gedit.js.page:30
msgid ""
"<gui>Highlight matching brackets</gui> helps you make sure you didn't leave "
"out a bracket by accident."
msgstr ""
"<gui>일치하는 대괄호 강조</gui> 옵션은 실수로 괄호를 빼먹었는지 확인할 수 있"
"게 합니다."

#. (itstool) path: section/title
#: C/set-up-gedit.js.page:35
msgid "Making editing easier"
msgstr "코드 편집을 쉽게 하기"

#. (itstool) path: section/p
#: C/set-up-gedit.js.page:36
msgid ""
"In gedit's <gui>Preferences</gui> dialog, click on the <gui>Editor</gui> "
"tab. You should see something like this:"
msgstr ""
"지에디트의 <gui>기본 설정</gui> 대화상자에서  <gui>편집기</gui> 탭을 누르십시"
"오. 다음과 같은 화면을 볼 수 있습니다:"

#. (itstool) path: section/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/set-up-gedit.js.page:37
msgctxt "_"
msgid ""
"external ref='media/gediteditor.png' md5='50db1ee8f2c545744879ee9fba5b4b24'"
msgstr ""

#. (itstool) path: section/p
#: C/set-up-gedit.js.page:38
msgid ""
"Here, you want to have <gui>Enable automatic indentation</gui> turned on. "
"This means that when you hit <key>Enter</key> the cursor stays indented as "
"far as the last line was. This is extremely useful when writing JavaScript "
"code, since it uses indentation to make it clearer which parts do what."
msgstr ""
"<gui>자동 들여 쓰기 사용</gui>을 원하실지도 모르겠습니다. <key>Enter</key>키"
"를 치면 마지막 줄을 들여쓴 만큼 커서를 둡니다. 들여쓸 부분에 들여쓰기를 사용"
"하여 코드를 더 알아보기 쉽게 하므로, JavaScript 코드를 작성할 때 상당히 쓸만"
"합니다."

#. (itstool) path: note/p
#: C/set-up-gedit.js.page:39
msgid ""
"If you want to share code with other people who write GNOME JavaScript "
"applications, you'll also want to set <gui>Tab width</gui> to 4 and turn on "
"<gui>Insert spaces instead of tabs</gui>."
msgstr ""
"그놈 JavaScript 프로그램을 작성하는 다른 사람과 코드를 공유하려 한다면, <gui>"
"탭 간격</gui> 을 4로 설정하고 <gui>탭 대신 공백 입력</gui>을 사용하십시오."

#. (itstool) path: info/title
#: C/signals-callbacks.py.page:9
msgctxt "text"
msgid "Signals and callbacks (Python)"
msgstr "시그널과 콜백 함수(Python)"

#. (itstool) path: info/desc
#: C/signals-callbacks.py.page:14
msgid "An explanation of signals and callbacks in GTK+."
msgstr "GTK+의 시그널과 콜백 함수를 설명합니다."

#. (itstool) path: page/title
#: C/signals-callbacks.py.page:27
msgid "Signals and callbacks"
msgstr "시그널과 콜백 함수"

#. (itstool) path: section/p
#: C/signals-callbacks.py.page:34
msgid ""
"Like most GUI toolkits, GTK+ uses an event-driven programming model. When "
"the user is doing nothing, GTK+ sits in the main loop and waits for input. "
"If the user performs some action - say, a mouse click - then the main loop "
"\"wakes up\" and delivers an event to GTK+."
msgstr ""
"GUI 툴킷처럼 GTK+ 에도 이벤트 주도 프로그래밍 모델을 사용합니다. 사용자가 아"
"무 동작도 취하지 않으면 GTK+는 메인 루프상에 머무르며 입력을 기다립니다. 사용"
"자가 어떤 동작을 취하면 - 마우스 클릭이라 칩시다 - 메인 루프가 \"깨어나고\" "
"GTK+에 이벤트를 전달합니다."

#. (itstool) path: section/p
#: C/signals-callbacks.py.page:36
msgid ""
"When widgets receive an event, they frequently emit one or more signals. "
"Signals notify your program that \"something interesting happened\" by "
"invoking functions you have connected to the signal. Such functions are "
"commonly known as callbacks. When your callbacks are invoked, you would "
"typically take some action. After a callback finishes, GTK+ will return to "
"the main loop and await more user input."
msgstr ""
"위젯에서 이벤트를 받으면 하나 이상의 시그널을 내보냅니다. 시그널은 프로그램"
"에 \"기다리고 있던 무슨 일이 일어났다\"는 사실을 시그널에 연결한 함수를 실행"
"하여 알립니다. 이런 함수는 보통 콜백이라고 합니다. 콜백 함수를 실행하면 보통 "
"어떤 동작을 취합니다. 콜백 함수 실행이 끝나면 GTK+에서 메인 루프로 돌아와서 "
"다른 사용자의 입력을 기다립니다."

#. (itstool) path: section/p
#: C/signals-callbacks.py.page:38
msgid ""
"A generic example is: <code>handler_id = widget.connect(\"event\", callback, "
"data)</code>. <code>widget</code> is an instance of a widget we created "
"earlier. Next, the <code>event</code> we are interested in. Each widget has "
"its own particular events which can occur. For instance, if you have a Gtk."
"Button you usually want to connect to the \"clicked\" event: this means that "
"when the button is clicked, the signal is issued. Another example is the "
"<code>notify::property</code> signal: whenever a <link xref=\"properties.py"
"\">property</link> is modified on a GObject, instead of just emitting the "
"<code>notify</code> signal, GObject associates as a detail to this signal "
"emission the name of the property modified. This allows clients who wish to "
"be notified of changes to only one property to filter most events before "
"receiving them. Thirdly, the callback argument is the name of the callback "
"function, which contains the code which runs when signals of the specified "
"type are issued. Finally, the optional data argument includes any data which "
"should be passed when the signal is issued."
msgstr ""
"일반적인 예를 들자면 <code>handler_id = widget.connect(\"event\", callback, "
"data)</code> 코드가 있습니다. <code>widget</code>는 우리가 앞서 만든 인스턴스"
"입니다. 그 다음 <code>event</code>는 우리가 기다리는 부분입니다. 각 위젯은 사"
"용자의 동작으로 나타나는 자체 이벤트가 있습니다. 예를 들어 Gtk.Button에서 보"
"통 여러분은 \"clicked\" 이벤트에 연결하고 싶어합니다. 단추를 누르면 시그널이 "
"나온단 얘깁니다. 다른 예를 들자면 <code>notify::property</code> 시그널을 들 "
"수 있습니다. GObject에서 언제든 <link xref=\"properties.py\">property</link>"
"를 수정했든지간에 <code>notify</code> 시그널을 내보내는 대신, GObject에서 수"
"정한 속성 이름으로 더욱 자세한 상황을 시그널로 내보냅니다. 이런 방식을 통해 "
"여러 이벤트 중 오직 하나의 속성이 바뀐 사실에 대해서만 받을 수 있습니다. 세번"
"째로 이 콜백 매개변수는 콜백 함수의 인자 이름이며, 이 매개변수에는 지정 형식"
"으로 시그널을 내보냈을때 실행할 코드가 들어있습니다. 마지막으로, 추가 데이터 "
"인자에는 시그널을 내보냈을 떄 전달해야 할 데이터가 들어갑니다."

#. (itstool) path: section/p
#: C/signals-callbacks.py.page:40
msgid ""
"The function returns a number (the <code>handler_id</code>) that identifies "
"this particular signal-callback pair. This number is required to disconnect "
"from a signal such that the callback function will not be called during any "
"future or currently ongoing emissions of the signal it has been connected "
"to, as in <code>widget.disconnect(handler_id)</code>."
msgstr ""
"함수에서는 이 시그널-콜백 함수 쌍을 구분하는 번호(<code>handler_id</code>) 값"
"을 반환합니다. 이 번호 값은 <code>widget.disconnect(handler_id)</code> 처럼 "
"시그널에서 앞으로 쓸 일이 없는 콜백 함수를 끊거나 시그널을 계속 내보내는 상황"
"일 경우 필요합니다."

#. (itstool) path: section/p
#: C/signals-callbacks.py.page:47
msgid ""
"<link href=\"http://developer.gnome.org/gobject/stable/signal.html"
"\">Signals</link> in GObject documentation"
msgstr ""
"GObject 문서의 <link href=\"http://developer.gnome.org/gobject/stable/signal."
"html\">시그널</link>"

#. (itstool) path: section/p
#: C/signals-callbacks.py.page:48
msgid ""
"<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/basics."
"html\">Basics - Main loop and Signals</link> in Python GTK+ 3 Tutorial"
msgstr ""
"Python GTK+ 3 따라하기 지침의 <link href=\"http://python-gtk-3-tutorial."
"readthedocs.org/en/latest/basics.html\">메인 루프와 시그널 기본</link>"

#. (itstool) path: info/title
#: C/spinbutton.c.page:8
msgctxt "text"
msgid "SpinButton (C)"
msgstr "SpinButton (C)"

#. (itstool) path: info/desc
#: C/spinbutton.c.page:21
msgid "Retrieve an integer or floating point number"
msgstr "정수 또는 소수를 가져옵니다"

#. (itstool) path: page/title
#: C/spinbutton.c.page:24 C/spinbutton.js.page:24 C/spinbutton.py.page:23
#: C/spinbutton.vala.page:23
msgid "SpinButton"
msgstr "SpinButton"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/spinbutton.c.page:26 C/spinbutton.py.page:24 C/spinbutton.vala.page:24
msgctxt "_"
msgid ""
"external ref='media/spinbutton.png' md5='993cbb7d9bd271a329727a926195712a'"
msgstr ""

#. (itstool) path: page/p
#: C/spinbutton.c.page:27 C/spinbutton.py.page:25 C/spinbutton.vala.page:25
msgid "Choose a number, by entering it or by clicking on the -/+ buttons!"
msgstr "숫자를 입력하거나 -/+ 단추를 눌러 입력 숫자를 선택합니다!"

#. (itstool) path: page/code
#: C/spinbutton.c.page:29
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* This is the callback function. \n"
" * It is a handler function which reacts to the signal. \n"
" * In this case, it will notify the user the value of their spinbutton \n"
" * as a label.\n"
" */\n"
"static void\n"
"spin_clicked (GtkSpinButton *spinbutton,\n"
"              gpointer       user_data)\n"
"{\n"
"   GtkWidget *label = user_data;\n"
"   gint value = gtk_spin_button_get_value_as_int (spinbutton);\n"
"\n"
"   /* %d - Is used when printing integers.\n"
"    * Note: Using g_strdup_printf returns a string that must be freed. \n"
"    * (In which is done below)\n"
"    */\n"
"   gchar *str = g_strdup_printf (\"The number you selected is %d.\", value);\n"
"   gtk_label_set_text (GTK_LABEL (label), str);\n"
"\n"
"   g_free(str);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Declare variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"  GtkWidget *grid;\n"
"  GtkWidget *spin_button;\n"
"  GtkAdjustment *adjustment;\n"
"\n"
"\n"
"  /* Create a window with a title, a border width, and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"SpinButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 210, 70);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 5);\n"
"\n"
"  /* Create a label to be shown in the window */\n"
"  label = gtk_label_new (\"Choose a number\");\n"
"\n"
"  /* Create an adjustment representing an adjustable bounded value */\n"
"  adjustment = gtk_adjustment_new (0, 0, 100, 1, 0, 0);\n"
"\n"
"\n"
"  /* Create a spin button that is to be as wide as possible */\n"
"  spin_button = gtk_spin_button_new (adjustment, 1, 0);\n"
"  gtk_widget_set_hexpand (spin_button, TRUE);\n"
"  \n"
"  /* Connecting the \"value-changed\" signal for the spinbutton \n"
"   * to the appropriate callback function. \n"
"   */\n"
"  g_signal_connect (spin_button, \n"
"                    \"value-changed\", \n"
"                    G_CALLBACK (spin_clicked), \n"
"                    label);\n"
"\n"
"\n"
"  /* Create a grid and arrange everything accordingly */\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_set_column_spacing (GTK_GRID (grid), 10);\n"
"  gtk_grid_set_column_homogeneous (GTK_GRID (grid), TRUE);\n"
"  gtk_grid_attach (GTK_GRID (grid), spin_button, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), label, 0, 1, 1, 1);\n"
"  \n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/* This is the callback function. \n"
" * It is a handler function which reacts to the signal. \n"
" * In this case, it will notify the user the value of their spinbutton \n"
" * as a label.\n"
" */\n"
"static void\n"
"spin_clicked (GtkSpinButton *spinbutton,\n"
"              gpointer       user_data)\n"
"{\n"
"   GtkWidget *label = user_data;\n"
"   gint value = gtk_spin_button_get_value_as_int (spinbutton);\n"
"\n"
"   /* %d - Is used when printing integers.\n"
"    * Note: Using g_strdup_printf returns a string that must be freed. \n"
"    * (In which is done below)\n"
"    */\n"
"   gchar *str = g_strdup_printf (\"The number you selected is %d.\", value);\n"
"   gtk_label_set_text (GTK_LABEL (label), str);\n"
"\n"
"   g_free(str);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Declare variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"  GtkWidget *grid;\n"
"  GtkWidget *spin_button;\n"
"  GtkAdjustment *adjustment;\n"
"\n"
"\n"
"  /* Create a window with a title, a border width, and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"SpinButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 210, 70);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 5);\n"
"\n"
"  /* Create a label to be shown in the window */\n"
"  label = gtk_label_new (\"Choose a number\");\n"
"\n"
"  /* Create an adjustment representing an adjustable bounded value */\n"
"  adjustment = gtk_adjustment_new (0, 0, 100, 1, 0, 0);\n"
"\n"
"\n"
"  /* Create a spin button that is to be as wide as possible */\n"
"  spin_button = gtk_spin_button_new (adjustment, 1, 0);\n"
"  gtk_widget_set_hexpand (spin_button, TRUE);\n"
"  \n"
"  /* Connecting the \"value-changed\" signal for the spinbutton \n"
"   * to the appropriate callback function. \n"
"   */\n"
"  g_signal_connect (spin_button, \n"
"                    \"value-changed\", \n"
"                    G_CALLBACK (spin_clicked), \n"
"                    label);\n"
"\n"
"\n"
"  /* Create a grid and arrange everything accordingly */\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_set_column_spacing (GTK_GRID (grid), 10);\n"
"  gtk_grid_set_column_homogeneous (GTK_GRID (grid), TRUE);\n"
"  gtk_grid_attach (GTK_GRID (grid), spin_button, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), label, 0, 1, 1, 1);\n"
"  \n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/spinbutton.c.page:37
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkSpinButton.html"
"\">GtkSpinButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkSpinButton.html"
"\">GtkSpinButton</link>"

#. (itstool) path: info/title
#: C/spinbutton.js.page:8
msgctxt "text"
msgid "SpinButton (JavaScript)"
msgstr "SpinButton (JavaScript)"

#. (itstool) path: info/desc
#: C/spinbutton.js.page:21
msgid "A number entry field that has + and - buttons"
msgstr "+ 단추와 - 단추가 있는 숫자 항목 필드"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/spinbutton.js.page:25
msgctxt "_"
msgid ""
"external ref='media/spinbuttonkittens.png' "
"md5='577cce8a902140aacbab73fe8a76a010'"
msgstr ""

#. (itstool) path: page/p
#: C/spinbutton.js.page:26
msgid ""
"A SpinButton is not related to a <link xref=\"spinner.js\">Spinner</link>. "
"It's a text entry field which only accepts numbers, and which has plus and "
"minus buttons to let you change the value without having to type anything in."
msgstr ""
"SpinButton은 <link xref=\"spinner.js\">Spinner</link>와는 관련이 없습니다. 숫"
"자 값만 받는 텍스트 항목 빌드이며, 더하기 빼기 단추가 있어 직접 입력받지 않고"
"도 숫자 값을 입력 받을 수 있습니다."

#. (itstool) path: page/p
#: C/spinbutton.js.page:27
msgid ""
"It's best used when it's obvious that only a number can be entered into it. "
"In this example, two SpinButtons are used for the number of kittens and "
"number of cans of tuna to give them."
msgstr ""
"숫자만 입력할 수 있다는게 명백하다면 최상의 용도입니다. 이 예제에서는 "
"SpinButton 두개를 활용하여 고양이 수랑 참치캔 수를 입력합니다."

#. (itstool) path: section/code
#: C/spinbutton.js.page:44
#, no-wrap
msgid ""
"\n"
"const SpinButtonExample = new Lang.Class({\n"
"    Name: 'SpinButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsspinbutton'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const SpinButtonExample = new Lang.Class({\n"
"    Name: 'SpinButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsspinbutton'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/spinbutton.js.page:69
msgid ""
"All the code for this sample goes in the SpinButtonExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.Application.html\">Gtk.Application</link> for our widgets and window to "
"go in."
msgstr ""
"이 예제의 모든 코드는 SpinButtonExample 클래스에 들어갑니다. 위 코드는 위젯"
"과 창이 들어가는 <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.Application.html\">Gtk.Application</link>을 만듭니다."

#. (itstool) path: section/code
#: C/spinbutton.js.page:70
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Kitten Feeder\"});\n"
msgstr ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Kitten Feeder\"});\n"

#. (itstool) path: section/title
#: C/spinbutton.js.page:85
msgid "Creating the SpinButtons"
msgstr "SpinButton 만들기"

#. (itstool) path: section/code
#: C/spinbutton.js.page:86
#, no-wrap
msgid ""
"\n"
"        // Create the first spinbutton using a function\n"
"        this._kittens = Gtk.SpinButton.new_with_range (1, 9001, 1);\n"
"        this._kittens.connect (\"value-changed\", Lang.bind (this, this._newValue));\n"
msgstr ""
"\n"
"        // Create the first spinbutton using a function\n"
"        this._kittens = Gtk.SpinButton.new_with_range (1, 9001, 1);\n"
"        this._kittens.connect (\"value-changed\", Lang.bind (this, this._newValue));\n"

#. (itstool) path: section/p
#: C/spinbutton.js.page:92
msgid ""
"We can use the new_with_range function to create a new SpinButton quickly. "
"Its first parameter is the SpinButton's starting value, its second is the "
"maximum value, and its third is how much to increment it when the plus or "
"minus buttons are pressed."
msgstr ""
"new_with_range 함수를 사용하여 새 SpinButton을 빨리 만들 수 있습니다. 첫번째 "
"매개변수는 SpinButton의 시작 값, 두번째는 최대 값, 세번째는 더하기 빼기 단추"
"를 눌렀을 때 적용할 증가 감소 값입니다."

#. (itstool) path: section/p
#: C/spinbutton.js.page:93
msgid ""
"After we create the first SpinButton, we connect its value-changed signal to "
"a function which handles what happens when the number inside either "
"SpinButton changes."
msgstr ""
"첫 SpinButton을 만들고 나면, value-changed 시그널을 SpinButton의 숫지 값이 바"
"뀌었을 때 처리할 함수에 연결하겠습니다."

#. (itstool) path: section/code
#: C/spinbutton.js.page:95
#, no-wrap
msgid ""
"\n"
"        // Create an adjustment to use for the second spinbutton\n"
"        this._adjustment = new Gtk.Adjustment ({\n"
"            value: 1,\n"
"            lower: 0,\n"
"            upper: 9001,\n"
"            step_increment: 1,\n"
"            page_increment: 10 });\n"
"\n"
"        // Create the second spinbutton\n"
"        this._tuna = new Gtk.SpinButton ({ adjustment: this._adjustment });\n"
"        this._tuna.connect (\"value-changed\", Lang.bind (this, this._newValue));\n"
"\n"
"        // this._tuna.set_digits (1);\n"
"        // this._tuna.set_wrap (true);\n"
msgstr ""
"\n"
"        // Create an adjustment to use for the second spinbutton\n"
"        this._adjustment = new Gtk.Adjustment ({\n"
"            value: 1,\n"
"            lower: 0,\n"
"            upper: 9001,\n"
"            step_increment: 1,\n"
"            page_increment: 10 });\n"
"\n"
"        // Create the second spinbutton\n"
"        this._tuna = new Gtk.SpinButton ({ adjustment: this._adjustment });\n"
"        this._tuna.connect (\"value-changed\", Lang.bind (this, this._newValue));\n"
"\n"
"        // this._tuna.set_digits (1);\n"
"        // this._tuna.set_wrap (true);\n"

#. (itstool) path: section/p
#: C/spinbutton.js.page:112
msgid ""
"If you want more fine-grained control over a SpinButton, or want to create a "
"bunch of SpinButtons which all use the same parameters, you can create an "
"object called an <link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.Adjustment.html\">Adjustment</link>. Then you can use that object as a "
"new SpinButton's adjustment property, and it sets all the values at once. "
"Afterwards, you can change all the SpinButtons which use that adjustment by "
"changing the Adjustment object's properties."
msgstr ""
"SpinButton을 더 세밀하게 조절하려거나, 모든 SpinButtons에서 동일한 매개 변수"
"를 활용하게 하려면 <link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/"
"gjs/Gtk.Adjustment.html\">Adjustment</link> 객체를 만들 수 있습니다. 그 다음 "
"SpinButton의 adjustment 새 속성값으로 이 객체를 사용하며, 모든 값을 한번에 설"
"정합니다. 이렇게 하면, Adjustment 객체 속성 값을 바꾸어서 모든 SpinButton의 "
"adjustment 속성 값을 바꿀 수 있습니다."

#. (itstool) path: section/p
#: C/spinbutton.js.page:113
msgid ""
"The commented-out lines here show things you can do to customize your "
"SpinButton. You can set the number of digits which go after the decimal "
"point, for example, or tell it to wrap the number around if it goes past the "
"upper or lower bounds that you set."
msgstr ""
"여기서 주석 표시를 날린 부분은 SpinButton의 속성을 개별적으로 설정할 수 있습"
"니다. 예를 들면 소숫점 다음에 표시할 숫자 갯수를 설정하거나, 여러분이 설정한 "
"자릿수 범위 위아래를 벗어나면 숫자 값이 시작 값 내지는 끝 값으로 돌아가도록 "
"설정할 수 있습니다."

#. (itstool) path: note/p
#: C/spinbutton.js.page:114
msgid ""
"For the kitties' sake, please don't use set_digits to allow a decimal number "
"of kittens."
msgstr ""
"고양이 수 처리를 목적으로, 고양이 숫자 값을 받을 때 set_digits를 사용하지 마"
"십시오."

#. (itstool) path: section/title
#: C/spinbutton.js.page:118
msgid "Creating the rest of the UI"
msgstr "나머지 UI 만들기"

#. (itstool) path: section/code
#: C/spinbutton.js.page:120
#, no-wrap
msgid ""
"\n"
"        // Create the text labels to go with the spinbuttons\n"
"        this._startLabel = new Gtk.Label ({ label: \"There are \" });\n"
"        this._kittenLabel = new Gtk.Label ({ label: \" kitten(s), and \"});\n"
"        this._tunaLabel = new Gtk.Label ({ label: \" can(s) of tuna.\"});\n"
"        this.perKitten = Math.floor((this._tuna.get_value() / this._kittens.get_value()));\n"
"        this._lastLabel = new Gtk.Label ({\n"
"            label: \"That's \" + this.perKitten + \" can(s) of tuna per kitten.\" });\n"
msgstr ""
"\n"
"        // Create the text labels to go with the spinbuttons\n"
"        this._startLabel = new Gtk.Label ({ label: \"There are \" });\n"
"        this._kittenLabel = new Gtk.Label ({ label: \" kitten(s), and \"});\n"
"        this._tunaLabel = new Gtk.Label ({ label: \" can(s) of tuna.\"});\n"
"        this.perKitten = Math.floor((this._tuna.get_value() / this._kittens.get_value()));\n"
"        this._lastLabel = new Gtk.Label ({\n"
"            label: \"That's \" + this.perKitten + \" can(s) of tuna per kitten.\" });\n"

#. (itstool) path: section/p
#: C/spinbutton.js.page:129
msgid ""
"We create each <link xref=\"label.js\">Label</link> individually, and then "
"string them together along with the SpinButtons. The last label needs to "
"show the number of cans of tuna per kitten, so it has a variable in the "
"middle, which corresponds to an equation that uses the SpinButtons' "
"get_value functions to find out what they're set at. JavaScript's Math "
"function's floor method is used to round the number of cans of tuna per "
"kitten down to the nearest whole number."
msgstr ""
"각 <link xref=\"label.js\">Label</link>을 만들고 SpinButtons에 문자열을 넣겠"
"습니다. 마지막 레이블에는 고양이 한마리당 참치캔 갯수를 보여주어야 하므로, 각"
"각의 SpinButton에 어떤 값을 설정했는지 가져오는 get_value 함수를 활용하여 공"
"식에 해당하는 변수를 둡니다. JavaScript의 Math 함수 중 floor 메서드는 고양이 "
"한마리당 필요한 참치캔 갯수가 소수로 나왔을 경우 소숫점 아래를 버릴때 씁니다."

#. (itstool) path: section/code
#: C/spinbutton.js.page:131
#, no-wrap
msgid ""
"\n"
"        // Create a grid to put the spinbuttons and their labels in\n"
"        this._spinGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_bottom: 20 });\n"
"\n"
"        // Attach everything to the grid\n"
"        this._spinGrid.attach (this._startLabel, 0, 0, 1, 1);\n"
"        this._spinGrid.attach (this._kittens, 1, 0, 1, 1);\n"
"        this._spinGrid.attach (this._kittenLabel, 2, 0, 1, 1);\n"
"        this._spinGrid.attach (this._tuna, 3, 0, 1, 1);\n"
"        this._spinGrid.attach (this._tunaLabel, 4, 0, 1, 1);\n"
"\n"
"        // Create a main grid to hold it and the last label\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Attach the smaller grid and the last label to the main grid\n"
"        this._mainGrid.attach (this._spinGrid, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._lastLabel, 0, 1, 1, 1);\n"
msgstr ""
"\n"
"        // Create a grid to put the spinbuttons and their labels in\n"
"        this._spinGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_bottom: 20 });\n"
"\n"
"        // Attach everything to the grid\n"
"        this._spinGrid.attach (this._startLabel, 0, 0, 1, 1);\n"
"        this._spinGrid.attach (this._kittens, 1, 0, 1, 1);\n"
"        this._spinGrid.attach (this._kittenLabel, 2, 0, 1, 1);\n"
"        this._spinGrid.attach (this._tuna, 3, 0, 1, 1);\n"
"        this._spinGrid.attach (this._tunaLabel, 4, 0, 1, 1);\n"
"\n"
"        // Create a main grid to hold it and the last label\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Attach the smaller grid and the last label to the main grid\n"
"        this._mainGrid.attach (this._spinGrid, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._lastLabel, 0, 1, 1, 1);\n"

#. (itstool) path: section/p
#: C/spinbutton.js.page:155
msgid ""
"Here we use <link xref=\"grid.js\">Grid</link> widgets to keep everything "
"organized. One Grid holds the labels and SpinButtons in order, while the "
"next puts that Grid on top and the final Label on the bottom."
msgstr ""
"여기서 모든 위젯을 모아두려 <link xref=\"grid.js\">Grid</link> 위젯을 사용하"
"겠습니다. 그리드 하나는 레이블과 SpinButton를 순서대로 유지하며 그 다음 둘 내"
"용은 그리스 상단에, 마지막으로 레이블은 하단에 둡니다."

#. (itstool) path: section/p
#: C/spinbutton.js.page:156
msgid ""
"There isn't a wrong way to organize things in Grids, so long as you like how "
"it turns out. In this case, the top Grid has a margin on the bottom to keep "
"it evenly spaced from the bottom Label, and the bottom Label is inside a "
"separate Grid so it will be centered relative to the Labels and SpinButtons "
"on the top."
msgstr ""
"여러분이 바라는대로 결과가 나오는 동안 그리드에 무언가를 정돈해넣는 잘못된 방"
"식은 없습니다. 이 경우 그리드 하단에 여백이 있는데, 하단 레이블과 균등한 간격"
"을 유지하고, 하단 레이블은 별도의 그리드에 두어, 상단의 레이블과 SpinButton"
"과 견주어 봤을 떄 상대적으로 가운데에 들어갑니다."

#. (itstool) path: section/code
#: C/spinbutton.js.page:158
#, no-wrap
msgid ""
"\n"
"        // Add the main grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""
"\n"
"        // Add the main grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"

#. (itstool) path: section/p
#: C/spinbutton.js.page:166 C/switch.js.page:154
msgid ""
"Finally, we add the larger Grid to the window, then tell the window to show "
"itself and all the widgets inside of it."
msgstr ""
"마지막으로 창에 제일 큰 그리드를 추가하고, 창에서 창 자신과 그 안에 들어간 위"
"젯을 모두 보여주도록 하겠습니다."

#. (itstool) path: section/title
#: C/spinbutton.js.page:170
msgid "Function which handles the SpinButtons' numerical values being adjusted"
msgstr "SpinButton의 숫자 값 조절을 처리하는 함수"

#. (itstool) path: section/code
#: C/spinbutton.js.page:172
#, no-wrap
msgid ""
"\n"
"    _newValue: function () {\n"
"\n"
"        // Update the label which shows how many cans there are per kitten\n"
"        this.perKitten = Math.floor((this._tuna.get_value() / this._kittens.get_value()))\n"
"        this._lastLabel.set_label (\"That's \" + this.perKitten + \" can(s) of tuna per kitten.\");\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _newValue: function () {\n"
"\n"
"        // Update the label which shows how many cans there are per kitten\n"
"        this.perKitten = Math.floor((this._tuna.get_value() / this._kittens.get_value()))\n"
"        this._lastLabel.set_label (\"That's \" + this.perKitten + \" can(s) of tuna per kitten.\");\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/spinbutton.js.page:183
msgid ""
"Here we update the perKitten variable based on the SpinButtons' new values, "
"and use the set_label property to refresh what _lastLabel shows. Since both "
"SpinButtons have their value-changed signal connected to this function, "
"every time either of the numbers changes this function will update the Label."
msgstr ""
"여기에서는 SpinButton의 새 값에 따라 perKitten 값을 업데이트하며, set_label "
"속성으로 _lastLabel에서 보여줄 내용을 새로 고칩니다. 두 SpinButton에는 앞에 "
"언급한 함수와 연결한 value-changed 시그널이 있기 때문에, 숫자가 바뀔 때마다 "
"이 함수를 통해 레이블의 내용을 새로 고칩니다."

#. (itstool) path: section/code
#: C/spinbutton.js.page:185
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new SpinButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Run the application\n"
"let app = new SpinButtonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/spinbutton.js.page:190
msgid ""
"Finally, we create a new instance of the finished SpinButtonExample class, "
"and set the application running."
msgstr ""
"마지막으로 마무리한 SpinButtonExample 클래스의 새 인스턴스를 만들고 프로그램 "
"실행을 설정합니다."

#. (itstool) path: section/code
#: C/spinbutton.js.page:195
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const SpinButtonExample = new Lang.Class({\n"
"    Name: 'SpinButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsspinbutton'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Kitten Feeder\"});\n"
"\n"
"        // Create the first spinbutton using a function\n"
"        this._kittens = Gtk.SpinButton.new_with_range (1, 9001, 1);\n"
"        this._kittens.connect (\"value-changed\", Lang.bind (this, this._newValue));\n"
"\n"
"        // Create an adjustment to use for the second spinbutton\n"
"        this._adjustment = new Gtk.Adjustment ({\n"
"            value: 1,\n"
"            lower: 0,\n"
"            upper: 9001,\n"
"            step_increment: 1,\n"
"            page_increment: 10 });\n"
"\n"
"        // Create the second spinbutton\n"
"        this._tuna = new Gtk.SpinButton ({ adjustment: this._adjustment });\n"
"        this._tuna.connect (\"value-changed\", Lang.bind (this, this._newValue));\n"
"\n"
"        // this._tuna.set_digits (1);\n"
"        // this._tuna.set_wrap (true);\n"
"\n"
"        // Create the text labels to go with the spinbuttons\n"
"        this._startLabel = new Gtk.Label ({ label: \"There are \" });\n"
"        this._kittenLabel = new Gtk.Label ({ label: \" kitten(s), and \"});\n"
"        this._tunaLabel = new Gtk.Label ({ label: \" can(s) of tuna.\"});\n"
"        this.perKitten = Math.floor((this._tuna.get_value() / this._kittens.get_value()));\n"
"        this._lastLabel = new Gtk.Label ({\n"
"            label: \"That's \" + this.perKitten + \" can(s) of tuna per kitten.\" });\n"
"\n"
"        // Create a grid to put the spinbuttons and their labels in\n"
"        this._spinGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_bottom: 20 });\n"
"\n"
"        // Attach everything to the grid\n"
"        this._spinGrid.attach (this._startLabel, 0, 0, 1, 1);\n"
"        this._spinGrid.attach (this._kittens, 1, 0, 1, 1);\n"
"        this._spinGrid.attach (this._kittenLabel, 2, 0, 1, 1);\n"
"        this._spinGrid.attach (this._tuna, 3, 0, 1, 1);\n"
"        this._spinGrid.attach (this._tunaLabel, 4, 0, 1, 1);\n"
"\n"
"        // Create a main grid to hold it and the last label\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Attach the smaller grid and the last label to the main grid\n"
"        this._mainGrid.attach (this._spinGrid, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._lastLabel, 0, 1, 1, 1);\n"
"\n"
"        // Add the main grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _newValue: function () {\n"
"\n"
"        // Update the label which shows how many cans there are per kitten\n"
"        this.perKitten = Math.floor((this._tuna.get_value() / this._kittens.get_value()))\n"
"        this._lastLabel.set_label (\"That's \" + this.perKitten + \" can(s) of tuna per kitten.\");\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new SpinButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const SpinButtonExample = new Lang.Class({\n"
"    Name: 'SpinButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsspinbutton'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Kitten Feeder\"});\n"
"\n"
"        // Create the first spinbutton using a function\n"
"        this._kittens = Gtk.SpinButton.new_with_range (1, 9001, 1);\n"
"        this._kittens.connect (\"value-changed\", Lang.bind (this, this._newValue));\n"
"\n"
"        // Create an adjustment to use for the second spinbutton\n"
"        this._adjustment = new Gtk.Adjustment ({\n"
"            value: 1,\n"
"            lower: 0,\n"
"            upper: 9001,\n"
"            step_increment: 1,\n"
"            page_increment: 10 });\n"
"\n"
"        // Create the second spinbutton\n"
"        this._tuna = new Gtk.SpinButton ({ adjustment: this._adjustment });\n"
"        this._tuna.connect (\"value-changed\", Lang.bind (this, this._newValue));\n"
"\n"
"        // this._tuna.set_digits (1);\n"
"        // this._tuna.set_wrap (true);\n"
"\n"
"        // Create the text labels to go with the spinbuttons\n"
"        this._startLabel = new Gtk.Label ({ label: \"There are \" });\n"
"        this._kittenLabel = new Gtk.Label ({ label: \" kitten(s), and \"});\n"
"        this._tunaLabel = new Gtk.Label ({ label: \" can(s) of tuna.\"});\n"
"        this.perKitten = Math.floor((this._tuna.get_value() / this._kittens.get_value()));\n"
"        this._lastLabel = new Gtk.Label ({\n"
"            label: \"That's \" + this.perKitten + \" can(s) of tuna per kitten.\" });\n"
"\n"
"        // Create a grid to put the spinbuttons and their labels in\n"
"        this._spinGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_bottom: 20 });\n"
"\n"
"        // Attach everything to the grid\n"
"        this._spinGrid.attach (this._startLabel, 0, 0, 1, 1);\n"
"        this._spinGrid.attach (this._kittens, 1, 0, 1, 1);\n"
"        this._spinGrid.attach (this._kittenLabel, 2, 0, 1, 1);\n"
"        this._spinGrid.attach (this._tuna, 3, 0, 1, 1);\n"
"        this._spinGrid.attach (this._tunaLabel, 4, 0, 1, 1);\n"
"\n"
"        // Create a main grid to hold it and the last label\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Attach the smaller grid and the last label to the main grid\n"
"        this._mainGrid.attach (this._spinGrid, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._lastLabel, 0, 1, 1, 1);\n"
"\n"
"        // Add the main grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _newValue: function () {\n"
"\n"
"        // Update the label which shows how many cans there are per kitten\n"
"        this.perKitten = Math.floor((this._tuna.get_value() / this._kittens.get_value()))\n"
"        this._lastLabel.set_label (\"That's \" + this.perKitten + \" can(s) of tuna per kitten.\");\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new SpinButtonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/spinbutton.js.page:206
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.SpinButton."
"html\">Gtk.SpinButton</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.SpinButton."
"html\">Gtk.SpinButton</link>"

#. (itstool) path: info/title
#: C/spinbutton.py.page:8
msgctxt "text"
msgid "SpinButton (Python)"
msgstr "SpinButton (Python)"

#. (itstool) path: info/desc
#: C/spinbutton.py.page:20
msgid "Retrieve an integer or floating-point number from the user."
msgstr "사용자로 부터 정수나 소수 값을 받습니다."

#. (itstool) path: section/code
#: C/spinbutton.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"SpinButton Example\", application=app)\n"
"        self.set_default_size(210, 70)\n"
"        self.set_border_width(5)\n"
"\n"
"        # an adjustment (initial value, min value, max value,\n"
"        # step increment - press cursor keys or +/- buttons to see!,\n"
"        # page increment - not used here,\n"
"        # page size - not used here)\n"
"        ad = Gtk.Adjustment(0, 0, 100, 1, 0, 0)\n"
"\n"
"        # a spin button for integers (digits=0)\n"
"        self.spin = Gtk.SpinButton(adjustment=ad, climb_rate=1, digits=0)\n"
"        # as wide as possible\n"
"        self.spin.set_hexpand(True)\n"
"\n"
"        # we connect the signal \"value-changed\" emitted by the spinbutton with the callback\n"
"        # function spin_selected\n"
"        self.spin.connect(\"value-changed\", self.spin_selected)\n"
"\n"
"        # a label\n"
"        self.label = Gtk.Label()\n"
"        self.label.set_text(\"Choose a number\")\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(self.spin, 0, 0, 1, 1)\n"
"        grid.attach(self.label, 0, 1, 2, 1)\n"
"\n"
"        self.add(grid)\n"
"\n"
"    # callback function: the signal of the spinbutton is used to change the\n"
"    # text of the label\n"
"    def spin_selected(self, event):\n"
"        self.label.set_text(\n"
"            \"The number you selected is \" + str(self.spin.get_value_as_int()) + \".\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"SpinButton Example\", application=app)\n"
"        self.set_default_size(210, 70)\n"
"        self.set_border_width(5)\n"
"\n"
"        # an adjustment (initial value, min value, max value,\n"
"        # step increment - press cursor keys or +/- buttons to see!,\n"
"        # page increment - not used here,\n"
"        # page size - not used here)\n"
"        ad = Gtk.Adjustment(0, 0, 100, 1, 0, 0)\n"
"\n"
"        # a spin button for integers (digits=0)\n"
"        self.spin = Gtk.SpinButton(adjustment=ad, climb_rate=1, digits=0)\n"
"        # as wide as possible\n"
"        self.spin.set_hexpand(True)\n"
"\n"
"        # we connect the signal \"value-changed\" emitted by the spinbutton with the callback\n"
"        # function spin_selected\n"
"        self.spin.connect(\"value-changed\", self.spin_selected)\n"
"\n"
"        # a label\n"
"        self.label = Gtk.Label()\n"
"        self.label.set_text(\"Choose a number\")\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(self.spin, 0, 0, 1, 1)\n"
"        grid.attach(self.label, 0, 1, 2, 1)\n"
"\n"
"        self.add(grid)\n"
"\n"
"    # callback function: the signal of the spinbutton is used to change the\n"
"    # text of the label\n"
"    def spin_selected(self, event):\n"
"        self.label.set_text(\n"
"            \"The number you selected is \" + str(self.spin.get_value_as_int()) + \".\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/spinbutton.py.page:35
msgid "Useful methods for a SpinButton widget"
msgstr "SpinButton 위젯에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/spinbutton.py.page:36
msgid ""
"A Gtk.Adjustment is needed to construct the Gtk.SpinButton. This is the "
"representation of a value with a lower and upper bound, together with step "
"and page increments, and a page size, and it is constructed as <code>Gtk."
"Adjustment(value, lower, upper, step_increment, page_increment, page_size)</"
"code> where the fields are of type <code>float</code>; <code>step_increment</"
"code> is the increment/decrement that is obtained by using the cursor keys "
"or the buttons of the spinbutton. Note that <code>page_increment</code> and "
"<code>page_size</code> are not used in this case, and they should be set to "
"<code>0</code>."
msgstr ""
"Gtk.Adjustment는 Gtk.SpinButton을 만들떄 씁니다. 이 객체는 상한값, 하한값, 단"
"계값, 페이지 증가 값, 페이지 크기를 나타내며 <code>Gtk.Adjustment(value, "
"lower, upper, step_increment, page_increment, page_size)</code>  생성자로 만"
"듭니다. 여기서 필드 값은 <code>float</code>입니다. <code>step_increment</"
"code> 은 커서 키를 사용할 떄 또는 SpinButton의 증감 단추를 사용할 때 가져올 "
"증가 감소 값입니다. 참고로,  <code>page_increment</code>와 <code>page_size</"
"code>는 이 상황에 활용하지 않으므로 <code>0</code> 값으로 설정해야합니다."

#. (itstool) path: section/p
#: C/spinbutton.py.page:37
msgid ""
"In line 23 the signal <code>\"value-changed\"</code> is connected to the "
"callback function <code>spin_selected()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"23번째 줄에서 <code>\"value-changed\"</code> 시그널은 <code><var>widget</"
"var>.connect(<var>signal</var>, <var>callback function</var>)</code> 함수로  "
"<code>spin_selected()</code> 콜백 함수에 연결했습니다. 더 자세한 설명은 "
"<link xref=\"signals-callbacks.py\"/>를 참조하십시오."

#. (itstool) path: item/p
#: C/spinbutton.py.page:39
msgid ""
"If you want the value of the spinbutton to wrap around when they exceed the "
"maximum or the minimum, set <code>set_wrap(True)</code>. The <code>\"wrapped"
"\"</code> signal is emitted when this happens."
msgstr ""
"SpinButton 값이 최대 최소 값을 넘어설 경우 시작 값 내지는 끝 값으로 돌아가게 "
"하려면 <code>set_wrap(True)</code> 함수를 설정하십시오. 이 상황이 일어나면 "
"<code>\"wrapped\"</code> 시그널을 내보냅니다."

#. (itstool) path: item/p
#: C/spinbutton.py.page:40
msgid ""
"<code>set_digits(digits)</code> sets the precision to be displayed by the "
"spinbutton, up to 20 digits."
msgstr ""
"<code>set_digits(digits)</code> 함수는 SpinButton에 나타낼 수 있는 자리수를 "
"최대 20자리까지 설정합니다."

#. (itstool) path: item/p
#: C/spinbutton.py.page:41
msgid ""
"To get the value of the spinbutton as an integer, use "
"<code>get_value_as_int()</code>."
msgstr ""
"SpinButton에서 정수 값을 받으려면 <code>get_value_as_int()</code> 함수를 사용"
"하십시오."

#. (itstool) path: item/p
#: C/spinbutton.py.page:49
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkSpinButton.html"
"\">GtkSpinButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkSpinButton.html"
"\">GtkSpinButton</link>"

#. (itstool) path: info/title
#: C/spinbutton.vala.page:8
msgctxt "text"
msgid "SpinButton (Vala)"
msgstr "SpinButton (Vala)"

#. (itstool) path: info/desc
#: C/spinbutton.vala.page:20
msgid "Retrieve an integer or floating point number."
msgstr "정수값 또는 소수 값을 받습니다."

#. (itstool) path: page/code
#: C/spinbutton.vala.page:27
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\tGtk.Label label;\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"SpinButton Example\";\n"
"\t\twindow.set_default_size (210, 70);\n"
"\t\twindow.set_border_width (5);\n"
"\n"
"\t\tvar spinbutton = new Gtk.SpinButton.with_range (0, 100, 1);\n"
"\t\tspinbutton.set_hexpand (true);\n"
"\n"
"\t\tlabel = new Gtk.Label (\"Choose a number\");\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.attach (spinbutton, 0, 0, 1, 1);\n"
"\t\tgrid.attach (label, 0, 1, 1, 1);\n"
"\n"
"\t\tspinbutton.value_changed.connect (this.value_changed_cb);\n"
"\n"
"\t\twindow.add (grid);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"\n"
"\tvoid value_changed_cb (Gtk.SpinButton spin) {\n"
"\t\tlabel.set_text (\"The number you selected is %.0f.\".printf (spin.get_value()));\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\tGtk.Label label;\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\tvar window = new Gtk.ApplicationWindow (this);\n"
"\t\twindow.title = \"SpinButton Example\";\n"
"\t\twindow.set_default_size (210, 70);\n"
"\t\twindow.set_border_width (5);\n"
"\n"
"\t\tvar spinbutton = new Gtk.SpinButton.with_range (0, 100, 1);\n"
"\t\tspinbutton.set_hexpand (true);\n"
"\n"
"\t\tlabel = new Gtk.Label (\"Choose a number\");\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.attach (spinbutton, 0, 0, 1, 1);\n"
"\t\tgrid.attach (label, 0, 1, 1, 1);\n"
"\n"
"\t\tspinbutton.value_changed.connect (this.value_changed_cb);\n"
"\n"
"\t\twindow.add (grid);\n"
"\t\twindow.show_all ();\n"
"\t}\n"
"\n"
"\tvoid value_changed_cb (Gtk.SpinButton spin) {\n"
"\t\tlabel.set_text (\"The number you selected is %.0f.\".printf (spin.get_value()));\n"
"\t}\n"
"}\n"
"\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/spinbutton.vala.page:32
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.SpinButton.html\">Gtk."
"SpinButton</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.SpinButton.html\">Gtk."
"SpinButton</link>"

#. (itstool) path: info/title
#: C/spinner.c.page:8
msgctxt "text"
msgid "Spinner (C)"
msgstr "Spinner (C)"

#. (itstool) path: info/desc
#: C/spinner.c.page:19 C/spinner.js.page:18 C/spinner.py.page:19
#: C/spinner.vala.page:18
msgid "A spinner animation"
msgstr "스피너 애니메이션"

#. (itstool) path: page/title
#: C/spinner.c.page:22 C/spinner.js.page:21 C/spinner.py.page:22
#: C/spinner.vala.page:21
msgid "Spinner"
msgstr "Spinner"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/spinner.c.page:24 C/spinner.js.page:22 C/spinner.py.page:23
#: C/spinner.vala.page:22
msgctxt "_"
msgid "external ref='media/spinner.png' md5='d04f2d81f1d72c6c2f97e8729947dfed'"
msgstr ""

#. (itstool) path: page/p
#: C/spinner.c.page:25 C/spinner.js.page:23 C/spinner.py.page:24
#: C/spinner.vala.page:23
msgid "This Spinner is stopped and started by pressing the spacebar."
msgstr "이 스피너는 스페이스바를 누르면 회전 동작을 멈추거나 시작합니다."

#. (itstool) path: page/code
#: C/spinner.c.page:27
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
" \n"
"\n"
"\n"
" /*Global variable used to indicate active state of the\n"
"spinner. TRUE = active, FALSE = not-active. This is because \n"
"there isn't a current function for C that does this for us*/\n"
"gboolean active;  \n"
" \n"
"\n"
"\n"
"/*This is the callback function. It is a handler function \n"
"which reacts to the signal. In this case, it will cause the \n"
"spinner to start and stop according to how many times the user \n"
"presses the spacebar.*/ \n"
"static gboolean\n"
"key_pressed_event (GtkWidget *widget,\n"
"                   GdkEvent  *event,\n"
"                   gpointer   user_data)\n"
"{\n"
"  GtkWidget *spinner = user_data;\n"
"  guint keyval;\n"
"  \n"
"  /*Extracts the keyval from an event. And stores it in the  variable \n"
"  \"keyval\" (we give the function the address). In this case, the \n"
"  event is GdkEventKey, a key press event*/\n"
"  gdk_event_get_keyval (event, &amp;keyval);  \n"
"\n"
"  /*Grabbing the boolean value from the spinner*/\n"
"  g_object_get (GTK_SPINNER (spinner), \"active\", &amp;active, NULL);\n"
"  \n"
"  if (keyval == GDK_KEY_space) {\n"
"     if (active) {\n"
"         gtk_spinner_stop (GTK_SPINNER (spinner));\n"
"     }\n"
"     else {\n"
"         gtk_spinner_start (GTK_SPINNER (spinner));\n"
"     } \n"
"  }\n"
"  \n"
"return TRUE;\n"
"}\n"
" \n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *spinner;\n"
" \n"
"  /*Create a window with a title, border width and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
" \n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Spinner Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);\n"
"  gtk_container_set_border_width (GTK_CONTAINER(window), 30);\n"
" \n"
"  /*Create a spinner, with extra horizontal and vertical space*/\n"
"  spinner = gtk_spinner_new ();\n"
"  gtk_spinner_start (GTK_SPINNER (spinner));\n"
"  \n"
"  gtk_container_add (GTK_CONTAINER (window), spinner);\n"
" \n"
"  /*Connecting the key-press-event signal to the callback*/\n"
"  g_signal_connect (GTK_WINDOW (window), \"key-press-event\", \n"
"                    G_CALLBACK (key_pressed_event), spinner);\n"
" \n"
"  gtk_widget_show_all (window);\n"
"}\n"
" \n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
" \n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
" \n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
" \n"
"\n"
"\n"
" /*Global variable used to indicate active state of the\n"
"spinner. TRUE = active, FALSE = not-active. This is because \n"
"there isn't a current function for C that does this for us*/\n"
"gboolean active;  \n"
" \n"
"\n"
"\n"
"/*This is the callback function. It is a handler function \n"
"which reacts to the signal. In this case, it will cause the \n"
"spinner to start and stop according to how many times the user \n"
"presses the spacebar.*/ \n"
"static gboolean\n"
"key_pressed_event (GtkWidget *widget,\n"
"                   GdkEvent  *event,\n"
"                   gpointer   user_data)\n"
"{\n"
"  GtkWidget *spinner = user_data;\n"
"  guint keyval;\n"
"  \n"
"  /*Extracts the keyval from an event. And stores it in the  variable \n"
"  \"keyval\" (we give the function the address). In this case, the \n"
"  event is GdkEventKey, a key press event*/\n"
"  gdk_event_get_keyval (event, &amp;keyval);  \n"
"\n"
"  /*Grabbing the boolean value from the spinner*/\n"
"  g_object_get (GTK_SPINNER (spinner), \"active\", &amp;active, NULL);\n"
"  \n"
"  if (keyval == GDK_KEY_space) {\n"
"     if (active) {\n"
"         gtk_spinner_stop (GTK_SPINNER (spinner));\n"
"     }\n"
"     else {\n"
"         gtk_spinner_start (GTK_SPINNER (spinner));\n"
"     } \n"
"  }\n"
"  \n"
"return TRUE;\n"
"}\n"
" \n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *spinner;\n"
" \n"
"  /*Create a window with a title, border width and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
" \n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Spinner Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 200, 200);\n"
"  gtk_container_set_border_width (GTK_CONTAINER(window), 30);\n"
" \n"
"  /*Create a spinner, with extra horizontal and vertical space*/\n"
"  spinner = gtk_spinner_new ();\n"
"  gtk_spinner_start (GTK_SPINNER (spinner));\n"
"  \n"
"  gtk_container_add (GTK_CONTAINER (window), spinner);\n"
" \n"
"  /*Connecting the key-press-event signal to the callback*/\n"
"  g_signal_connect (GTK_WINDOW (window), \"key-press-event\", \n"
"                    G_CALLBACK (key_pressed_event), spinner);\n"
" \n"
"  gtk_widget_show_all (window);\n"
"}\n"
" \n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
" \n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
" \n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/spinner.c.page:35
msgid ""
"<link href=\"http://developer.gnome.org/gobject/stable/gobject-The-Base-"
"Object-Type.html#g-object-get\">GObject</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gobject/stable/gobject-The-Base-"
"Object-Type.html#g-object-get\">GObject</link>"

#. (itstool) path: item/p
#: C/spinner.c.page:36 C/togglebutton.c.page:38
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkSpinner.html"
"\">GtkSpinner</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkSpinner.html"
"\">GtkSpinner</link>"

#. (itstool) path: info/title
#: C/spinner.js.page:8
msgctxt "text"
msgid "Spinner (JavaScript)"
msgstr "Spinner (JavaScript)"

#. (itstool) path: page/code
#: C/spinner.js.page:25
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Gdk = imports.gi.Gdk;\n"
"const Lang = imports.lang;\n"
"\n"
"const SpinnerExample = new Lang.Class ({\n"
"    Name: 'Spinner Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jsspinner',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Spinner Example\",\n"
"            default_height: 200,\n"
"            default_width: 200,\n"
"            border_width: 30 });\n"
"\n"
"        // Create a spinner which starts spinning automatically\n"
"        this._spinner = new Gtk.Spinner ({active: true});\n"
"        this._window.add (this._spinner);\n"
"\n"
"        // Connect a keypress event to the function that makes it start or stop spinning\n"
"        this._window.connect(\"key-press-event\", Lang.bind(this, this._onKeyPress));\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onKeyPress: function(widget, event) {\n"
"\n"
"        // Get the value of the key that was pressed\n"
"        let keyval = event.get_keyval()[1];\n"
"\n"
"        // If it was the spacebar, toggle the spinner to start or stop\n"
"        if (keyval == Gdk.KEY_space) {\n"
"            if (this._spinner.active == true)\n"
"                this._spinner.stop();\n"
"            else\n"
"                this._spinner.start();\n"
"        }\n"
"    }\n"
"\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new SpinnerExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Gdk = imports.gi.Gdk;\n"
"const Lang = imports.lang;\n"
"\n"
"const SpinnerExample = new Lang.Class ({\n"
"    Name: 'Spinner Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jsspinner',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Spinner Example\",\n"
"            default_height: 200,\n"
"            default_width: 200,\n"
"            border_width: 30 });\n"
"\n"
"        // Create a spinner which starts spinning automatically\n"
"        this._spinner = new Gtk.Spinner ({active: true});\n"
"        this._window.add (this._spinner);\n"
"\n"
"        // Connect a keypress event to the function that makes it start or stop spinning\n"
"        this._window.connect(\"key-press-event\", Lang.bind(this, this._onKeyPress));\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onKeyPress: function(widget, event) {\n"
"\n"
"        // Get the value of the key that was pressed\n"
"        let keyval = event.get_keyval()[1];\n"
"\n"
"        // If it was the spacebar, toggle the spinner to start or stop\n"
"        if (keyval == Gdk.KEY_space) {\n"
"            if (this._spinner.active == true)\n"
"                this._spinner.stop();\n"
"            else\n"
"                this._spinner.start();\n"
"        }\n"
"    }\n"
"\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new SpinnerExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/spinner.js.page:30
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gdk.html\">Gdk - "
"Key Values</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gdk.html\">Gdk - "
"키 값</link>"

#. (itstool) path: item/p
#: C/spinner.js.page:33 C/togglebutton.js.page:158
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Spinner.html"
"\">Gtk.Spinner</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Spinner.html"
"\">Gtk.Spinner</link>"

#. (itstool) path: info/title
#: C/spinner.py.page:8
msgctxt "text"
msgid "Spinner (Python)"
msgstr "Spinner (Python)"

#. (itstool) path: section/code
#: C/spinner.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Spinner Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"        self.set_border_width(30)\n"
"\n"
"        # a spinner\n"
"        self.spinner = Gtk.Spinner()\n"
"        # that by default spins\n"
"        self.spinner.start()\n"
"        # add the spinner to the window\n"
"        self.add(self.spinner)\n"
"\n"
"    # event handler\n"
"    # a signal from the keyboard (space) controls if the spinner stops/starts\n"
"    def do_key_press_event(self, event):\n"
"        # keyname is the symbolic name of the key value given by the event\n"
"        keyname = Gdk.keyval_name(event.keyval)\n"
"        # if it is \"space\"\n"
"        if keyname == \"space\":\n"
"            # and the spinner is active\n"
"            if self.spinner.get_property(\"active\"):\n"
"                # stop the spinner\n"
"                self.spinner.stop()\n"
"            # if the spinner is not active\n"
"            else:\n"
"                # start it again\n"
"                self.spinner.start()\n"
"        # stop the signal emission\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Spinner Example\", application=app)\n"
"        self.set_default_size(200, 200)\n"
"        self.set_border_width(30)\n"
"\n"
"        # a spinner\n"
"        self.spinner = Gtk.Spinner()\n"
"        # that by default spins\n"
"        self.spinner.start()\n"
"        # add the spinner to the window\n"
"        self.add(self.spinner)\n"
"\n"
"    # event handler\n"
"    # a signal from the keyboard (space) controls if the spinner stops/starts\n"
"    def do_key_press_event(self, event):\n"
"        # keyname is the symbolic name of the key value given by the event\n"
"        keyname = Gdk.keyval_name(event.keyval)\n"
"        # if it is \"space\"\n"
"        if keyname == \"space\":\n"
"            # and the spinner is active\n"
"            if self.spinner.get_property(\"active\"):\n"
"                # stop the spinner\n"
"                self.spinner.stop()\n"
"            # if the spinner is not active\n"
"            else:\n"
"                # start it again\n"
"                self.spinner.start()\n"
"        # stop the signal emission\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: note/p
#: C/spinner.py.page:33
msgid ""
"<code>Gdk.keyval_name(event.keyval)</code> converts the key value "
"<code>event.keyval</code> into a symbolic name. The names and corresponding "
"key values can be found <link href=\"http://git.gnome.org/browse/gtk+/tree/"
"gdk/gdkkeysyms.h\">here</link>,but for instance <code>GDK_KEY_BackSpace</"
"code> becomes the string <code>\"BackSpace\"</code>."
msgstr ""
"<code>Gdk.keyval_name(event.keyval)</code>은  <code>event.keyval</code> 키 값"
"을 심볼릭 이름으로 변환합니다. 이름과 관련 키 값은 <link href=\"http://git."
"gnome.org/browse/gtk+/tree/gdk/gdkkeysyms.h\">여기</link>에서 알아볼 수 있지"
"만, 예를 들어 <code>GDK_KEY_BackSpace</code> 인스턴스는 <code>\"BackSpace\"</"
"code> 문자열입니다."

#. (itstool) path: item/p
#: C/spinner.py.page:42 C/togglebutton.py.page:46
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkSpinner.html"
"\">GtkSpinner</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkSpinner.html"
"\">GtkSpinner</link>"

#. (itstool) path: item/p
#: C/spinner.py.page:43
msgid ""
"<link href=\"http://developer.gnome.org/gdk/stable/gdk-Keyboard-Handling.html"
"\">Key Values</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gdk/stable/gdk-Keyboard-Handling.html"
"\">Key Values</link>"

#. (itstool) path: info/title
#: C/spinner.vala.page:8
msgctxt "text"
msgid "Spinner (Vala)"
msgstr "Spinner (Vala)"

#. (itstool) path: page/code
#: C/spinner.vala.page:25
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Widget spinner;\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\n"
"\t\tObject (application: app, title: \"Spinner Example\");\n"
"\n"
"\t\tthis.set_default_size (200, 200);\n"
"\t\tthis.border_width = 30;\n"
"\n"
"\t\tspinner = new Gtk.Spinner ();\n"
"\n"
"\t\tthis.add (spinner);\n"
"\t\t(spinner as Gtk.Spinner).active = true;\n"
"\t\tspinner.show ();\n"
"\t}\n"
"\n"
"\tprotected override bool key_press_event (Gdk.EventKey event) {\n"
"\n"
"\t\t//print (Gdk.keyval_name(event.keyval) +\"\\n\");\n"
"\t\tif (Gdk.keyval_name(event.keyval) == \"space\") {\n"
"\n"
"\t\t\tif ((spinner as Gtk.Spinner).active) {\n"
"\t\t\t\t(spinner as Gtk.Spinner).stop ();\n"
"\t\t\t\t//spinner.visible = false;\n"
"\t\t\t}\n"
"\t\t\telse {\n"
"\t\t\t\t(spinner as Gtk.Spinner).start ();\n"
"\t\t\t\t//spinner.visible = true;\n"
"\t\t\t}\n"
"\t\t}\n"
"\t\treturn true;\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\n"
"\tprotected override void activate () {\n"
"\t\tMyWindow window = new MyWindow (this);\n"
"\t\twindow.show ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.spinner\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Widget spinner;\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\n"
"\t\tObject (application: app, title: \"Spinner Example\");\n"
"\n"
"\t\tthis.set_default_size (200, 200);\n"
"\t\tthis.border_width = 30;\n"
"\n"
"\t\tspinner = new Gtk.Spinner ();\n"
"\n"
"\t\tthis.add (spinner);\n"
"\t\t(spinner as Gtk.Spinner).active = true;\n"
"\t\tspinner.show ();\n"
"\t}\n"
"\n"
"\tprotected override bool key_press_event (Gdk.EventKey event) {\n"
"\n"
"\t\t//print (Gdk.keyval_name(event.keyval) +\"\\n\");\n"
"\t\tif (Gdk.keyval_name(event.keyval) == \"space\") {\n"
"\n"
"\t\t\tif ((spinner as Gtk.Spinner).active) {\n"
"\t\t\t\t(spinner as Gtk.Spinner).stop ();\n"
"\t\t\t\t//spinner.visible = false;\n"
"\t\t\t}\n"
"\t\t\telse {\n"
"\t\t\t\t(spinner as Gtk.Spinner).start ();\n"
"\t\t\t\t//spinner.visible = true;\n"
"\t\t\t}\n"
"\t\t}\n"
"\t\treturn true;\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\n"
"\tprotected override void activate () {\n"
"\t\tMyWindow window = new MyWindow (this);\n"
"\t\twindow.show ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.spinner\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/spinner.vala.page:30
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Widget.html\">Gtk.Widget</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Widget.html\">Gtk.Widget</"
"link>"

#. (itstool) path: item/p
#: C/spinner.vala.page:31
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Spinner.html\">Gtk.Spinner</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Spinner.html\">Gtk.Spinner</"
"link>"

#. (itstool) path: item/p
#: C/spinner.vala.page:32
msgid ""
"<link href=\"http://www.valadoc.org/gdk-3.0/Gdk.keyval_name.html\">Gdk."
"keyval_name</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gdk-3.0/Gdk.keyval_name.html\">Gdk."
"keyval_name</link>"

#. (itstool) path: info/title
#: C/statusbar.c.page:8
msgctxt "text"
msgid "Statusbar (C)"
msgstr "Statusbar (C)"

#. (itstool) path: info/desc
#: C/statusbar.c.page:22 C/statusbar.py.page:20 C/statusbar.vala.page:21
msgid "Report messages of minor importance to the user"
msgstr "별로 중요하지 않은 메시지를 사용자에게 알립니다"

#. (itstool) path: page/title
#: C/statusbar.c.page:25 C/statusbar.js.page:21 C/statusbar.py.page:23
#: C/statusbar.vala.page:24
msgid "Statusbar"
msgstr "Statusbar"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/statusbar.c.page:27
msgctxt "_"
msgid ""
"external ref='media/statusbar3.png' md5='60c71604fb44656237ee66dfb39a8689'"
msgstr ""

#. (itstool) path: page/p
#: C/statusbar.c.page:28
msgid ""
"This statusbar is used to demonstrate how messages are stacked in a last-in-"
"first-out order. The message at the top of the stack is always the one "
"displayed."
msgstr ""
"Statusbar는 가장 나중에 넣은 메시지를 먼저 빼내는 순으로 스택에 메시지를 넣"
"어 다루는 방법을 보여줍니다. 항상 스택 상단의 메시지만 나타납니다."

#. (itstool) path: page/code
#: C/statusbar.c.page:30
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Callback function in which pushes an item onto the statusbar*/\n"
"static void \n"
"push_item (GtkWidget *widget,\n"
"           gpointer   data)\n"
"{\n"
"  GtkWidget *status_bar = data;\n"
"\n"
"  /*Create a context id, which is used to uniquely identify \n"
"   *the source of a message*/\n"
"  guint context_id = gtk_statusbar_get_context_id (GTK_STATUSBAR (status_bar), \n"
"                                                   \"Statusbar example\");\n"
"\n"
"  /*Count is used to keep track of the amount of items \n"
"  the user is pushing/popping*/\n"
"  static int count = 1;\n"
"  char hold_output[20];\n"
"  \n"
"  /*This is a safer form of the standard sprintf () function. The output is \n"
"  guaranteed in this case to not exceed 20 characters, and the result is stored\n"
"  into the 'hold_output' variable*/\n"
"  g_snprintf (hold_output, 20, \"Item %d\", count++);\n"
"  gtk_statusbar_push (GTK_STATUSBAR (status_bar), \n"
"                     context_id, \n"
"                     hold_output);\n"
"}\n"
"\n"
"\n"
"\n"
"/*Callback function that is used to pop an item off the statusbar*/\n"
"static void \n"
"pop_item (GtkWidget *widget,\n"
"          gpointer   data )\n"
"{\n"
"  GtkWidget *status_bar = data;\n"
"  guint context_id = gtk_statusbar_get_context_id (GTK_STATUSBAR (status_bar), \n"
"                                                   \"Statusbar example\");\n"
"\n"
"  gtk_statusbar_pop (GTK_STATUSBAR (status_bar), context_id);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"    GtkWidget *grid;\n"
"    GtkWidget *window;\n"
"    GtkWidget *status_bar;\n"
"    GtkWidget *pop_button;\n"
"    GtkWidget *push_button;\n"
"\n"
"    /*Create a window with a title, border width, and a default size**/\n"
"    window = gtk_application_window_new (app);\n"
"    gtk_window_set_default_size (GTK_WINDOW (window), 220, 100);\n"
"    gtk_window_set_title (GTK_WINDOW (window), \"Statusbar Example\");\n"
"    gtk_container_set_border_width (GTK_CONTAINER(window), 10);\n"
"    \n"
"    /*Create the status bar, which is held in the global variable*/\n"
"    status_bar = gtk_statusbar_new ();      \n"
"    \n"
"    /*Create the buttons with labels*/\n"
"    push_button = gtk_button_new_with_label (\"push item\");\n"
"    pop_button = gtk_button_new_with_label (\"pop last item\");\n"
"    \n"
"    /*Create the grid, and attach the buttons/statusbar accordingly*/\n"
"    grid = gtk_grid_new ();\n"
"    gtk_grid_attach (GTK_GRID (grid), push_button, 0,1,1,1);\n"
"    gtk_grid_attach (GTK_GRID (grid), pop_button, 0,2,1,1);\n"
"    gtk_grid_attach (GTK_GRID (grid), status_bar, 0,3,1,1);\n"
"    \n"
"    /*Connecting the clicked signals to the corresponding callback functions*/\n"
"    g_signal_connect (GTK_BUTTON (push_button), \"clicked\", \n"
"                      G_CALLBACK (push_item), status_bar);\n"
"    g_signal_connect (GTK_BUTTON (pop_button), \"clicked\", \n"
"                      G_CALLBACK (pop_item), status_bar);\n"
"    \n"
"    /*Attach the grid holding the child widgets onto the window, and show all*/\n"
"    gtk_container_add (GTK_CONTAINER (window), grid);\n"
"    gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Callback function in which pushes an item onto the statusbar*/\n"
"static void \n"
"push_item (GtkWidget *widget,\n"
"           gpointer   data)\n"
"{\n"
"  GtkWidget *status_bar = data;\n"
"\n"
"  /*Create a context id, which is used to uniquely identify \n"
"   *the source of a message*/\n"
"  guint context_id = gtk_statusbar_get_context_id (GTK_STATUSBAR (status_bar), \n"
"                                                   \"Statusbar example\");\n"
"\n"
"  /*Count is used to keep track of the amount of items \n"
"  the user is pushing/popping*/\n"
"  static int count = 1;\n"
"  char hold_output[20];\n"
"  \n"
"  /*This is a safer form of the standard sprintf () function. The output is \n"
"  guaranteed in this case to not exceed 20 characters, and the result is stored\n"
"  into the 'hold_output' variable*/\n"
"  g_snprintf (hold_output, 20, \"Item %d\", count++);\n"
"  gtk_statusbar_push (GTK_STATUSBAR (status_bar), \n"
"                     context_id, \n"
"                     hold_output);\n"
"}\n"
"\n"
"\n"
"\n"
"/*Callback function that is used to pop an item off the statusbar*/\n"
"static void \n"
"pop_item (GtkWidget *widget,\n"
"          gpointer   data )\n"
"{\n"
"  GtkWidget *status_bar = data;\n"
"  guint context_id = gtk_statusbar_get_context_id (GTK_STATUSBAR (status_bar), \n"
"                                                   \"Statusbar example\");\n"
"\n"
"  gtk_statusbar_pop (GTK_STATUSBAR (status_bar), context_id);\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"    GtkWidget *grid;\n"
"    GtkWidget *window;\n"
"    GtkWidget *status_bar;\n"
"    GtkWidget *pop_button;\n"
"    GtkWidget *push_button;\n"
"\n"
"    /*Create a window with a title, border width, and a default size**/\n"
"    window = gtk_application_window_new (app);\n"
"    gtk_window_set_default_size (GTK_WINDOW (window), 220, 100);\n"
"    gtk_window_set_title (GTK_WINDOW (window), \"Statusbar Example\");\n"
"    gtk_container_set_border_width (GTK_CONTAINER(window), 10);\n"
"    \n"
"    /*Create the status bar, which is held in the global variable*/\n"
"    status_bar = gtk_statusbar_new ();      \n"
"    \n"
"    /*Create the buttons with labels*/\n"
"    push_button = gtk_button_new_with_label (\"push item\");\n"
"    pop_button = gtk_button_new_with_label (\"pop last item\");\n"
"    \n"
"    /*Create the grid, and attach the buttons/statusbar accordingly*/\n"
"    grid = gtk_grid_new ();\n"
"    gtk_grid_attach (GTK_GRID (grid), push_button, 0,1,1,1);\n"
"    gtk_grid_attach (GTK_GRID (grid), pop_button, 0,2,1,1);\n"
"    gtk_grid_attach (GTK_GRID (grid), status_bar, 0,3,1,1);\n"
"    \n"
"    /*Connecting the clicked signals to the corresponding callback functions*/\n"
"    g_signal_connect (GTK_BUTTON (push_button), \"clicked\", \n"
"                      G_CALLBACK (push_item), status_bar);\n"
"    g_signal_connect (GTK_BUTTON (pop_button), \"clicked\", \n"
"                      G_CALLBACK (pop_item), status_bar);\n"
"    \n"
"    /*Attach the grid holding the child widgets onto the window, and show all*/\n"
"    gtk_container_add (GTK_CONTAINER (window), grid);\n"
"    gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/statusbar.c.page:38
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkStatusbar.html"
"\">GtkStatusBar</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkStatusbar.html"
"\">GtkStatusBar</link>"

#. (itstool) path: item/p
#: C/statusbar.c.page:39
msgid ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-String-Utility-"
"Functions.html#g-snprintf\">String Utility Functions</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/glib/stable/glib-String-Utility-"
"Functions.html#g-snprintf\">String Utility Functions</link>"

#. (itstool) path: info/title
#: C/statusbar.js.page:8
msgctxt "text"
msgid "Statusbar (JavaScript)"
msgstr "Statusbar (JavaScript)"

#. (itstool) path: info/desc
#: C/statusbar.js.page:18
msgid "Show notifications in a dedicated statusbar"
msgstr "지정 상태 표시줄에 알림 표시"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/statusbar.js.page:22
msgctxt "_"
msgid ""
"external ref='media/statusbar2.png' md5='ff6f7e5b270827ca98b2d5f7087aa766'"
msgstr ""

#. (itstool) path: page/p
#: C/statusbar.js.page:23
msgid ""
"This statusbar keeps track of how many times you've clicked a button. "
"Applications like <link href=\"http://projects.gnome.org/gedit/\">gedit</"
"link> use statusbars to display information at a glance, and show "
"notifications without interrupting the user."
msgstr ""
"이 상태 표시줄은 단추를 얼마나 눌렀는지 횟수 정보를 지니고 있습니다. <link "
"href=\"http://projects.gnome.org/gedit/\">지에디트</link>의 경우는 상태 표시"
"줄을 활용하여 잠깐 살펴볼 정보를 나타내고 사용자의 일을 방해하지 않으면서 알"
"림을 보여줍니다."

#. (itstool) path: page/p
#: C/statusbar.js.page:24
msgid ""
"Messages pushed to a statusbar go on top of its stack, and can be popped off "
"to show the next-most recent one. You can also clear away every message of a "
"specific type all at once. This sample application demonstrates these "
"functions."
msgstr ""
"상태 표시줄에 밀어넣은 메시지는 스택의 상단에 있으며, 가장 최근에 밀어넣은 순"
"으로 보여주면서 빼낼 수 있습니다. 지정 형식의 모든 메시지를 한번에 빼낼 수 있"
"습니다. 이 예제 프로그램에서는 이런 기능을 보여드립니다."

#. (itstool) path: section/code
#: C/statusbar.js.page:41
#, no-wrap
msgid ""
"\n"
"const StatusbarExample = new Lang.Class({\n"
"    Name: 'Statusbar Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsstatusbar',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const StatusbarExample = new Lang.Class({\n"
"    Name: 'Statusbar Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsstatusbar',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/statusbar.js.page:67
msgid ""
"All the code for this sample goes in the StatusbarExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.Application.html\">Gtk.Application</link> for our widgets and window to "
"go in."
msgstr ""
"이 예제의 모든 코드는 StatusbarExample 클래스에 들어갑니다. 위 코드는 위젯과 "
"창을 넣는 <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"Application.html\">Gtk.Application</link>을 만듭니다."

#. (itstool) path: section/code
#: C/statusbar.js.page:68
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 120,\n"
"            default_width: 300,\n"
"            title: \"Button Clicker\"});\n"
"\n"
"        // Create a paned interface\n"
"        this._panes = new Gtk.Paned ({\n"
"            orientation: Gtk.Orientation.VERTICAL });\n"
msgstr ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 120,\n"
"            default_width: 300,\n"
"            title: \"Button Clicker\"});\n"
"\n"
"        // Create a paned interface\n"
"        this._panes = new Gtk.Paned ({\n"
"            orientation: Gtk.Orientation.VERTICAL });\n"

#. (itstool) path: section/p
#: C/statusbar.js.page:84
msgid ""
"The _buildUI function is where we put all the code to create the "
"application's user interface. The first step is creating a new <link href="
"\"GtkApplicationWindow.js.page\">Gtk.ApplicationWindow</link> to put all our "
"widgets into. The next step is to create a vertically-oriented Gtk.Paned "
"interface, to divide the window up into two sections. This way the statusbar "
"looks like those used in other applications, and it stays at the bottom of "
"the window, even if the user resizes it."
msgstr ""
"_buildUI 함수는 프로그램 사용자 인터페이스를 만들 모든 코드를 넣는 곳입니다. "
"첫번째 단계에서는 모든 위젯을 넣을 새 <link href=\"GtkApplicationWindow.js."
"page\">Gtk.ApplicationWindow</link>를 만듭니다. 그 다음 단계에서는 수직 방향 "
"Gtk.Paned 인터페이스를 만들어 창을 두 부분으로 나눕니다. 이 방식으로 상태 표"
"시줄을 다른 프로그램에서 나타나는 것처럼 표시하고, 사용자가 창 크기를 조절하"
"더라도 창 하단에 머물러 있습니다."

#. (itstool) path: section/title
#: C/statusbar.js.page:88
msgid "Creating the buttons"
msgstr "단추 만들기"

#. (itstool) path: section/code
#: C/statusbar.js.page:89
#, no-wrap
msgid ""
"\n"
"        // Create the main button\n"
"        this._clickMe = new Gtk.Button ({\n"
"            label: \"Click Me!\" });\n"
"        this._clickMe.connect (\"clicked\", Lang.bind (this, this._clicked));\n"
"\n"
"        // Create the back button\n"
"        this._backButton = new Gtk.Button ({\n"
"            label: \"gtk-go-back\",\n"
"            use_stock: true });\n"
"        this._backButton.connect (\"clicked\", Lang.bind (this, this._back));\n"
"\n"
"        // Create the clear button\n"
"        this._clearButton = new Gtk.Button ({\n"
"            label: \"gtk-clear\",\n"
"            use_stock: true });\n"
"        this._clearButton.connect (\"clicked\", Lang.bind (this, this._clear));\n"
msgstr ""
"\n"
"        // Create the main button\n"
"        this._clickMe = new Gtk.Button ({\n"
"            label: \"Click Me!\" });\n"
"        this._clickMe.connect (\"clicked\", Lang.bind (this, this._clicked));\n"
"\n"
"        // Create the back button\n"
"        this._backButton = new Gtk.Button ({\n"
"            label: \"gtk-go-back\",\n"
"            use_stock: true });\n"
"        this._backButton.connect (\"clicked\", Lang.bind (this, this._back));\n"
"\n"
"        // Create the clear button\n"
"        this._clearButton = new Gtk.Button ({\n"
"            label: \"gtk-clear\",\n"
"            use_stock: true });\n"
"        this._clearButton.connect (\"clicked\", Lang.bind (this, this._clear));\n"

#. (itstool) path: section/p
#: C/statusbar.js.page:107
msgid ""
"This code creates the three <link href=\"button.js.page\">Gtk.Buttons</link> "
"we'll use to push a new message to the statusbar, pop the last one off, and "
"clear all existing messages. The \"back\" and \"clear\" buttons are <link "
"href=\"https://developer.gnome.org/gtk3/3.4/gtk3-Stock-Items.html\">stock "
"buttons</link>, which are automatically translated into any language GNOME "
"supports."
msgstr ""
"이 코드는 상태 표시줄에서 새 메시지를 밀어넣고, 마지막 매시지를 빼내며, 기존 "
"모든 메시지를 지울 때 쓸 <link href=\"button.js.page\">Gtk.Buttons</link> 세 "
"개를 만듭니다. \"뒤로\"와 \"지우기\" 단추는 그놈에서 지원하는 언어로 이미 자"
"동으로 번역해주는 <link href=\"https://developer.gnome.org/gtk3/3.4/gtk3-"
"Stock-Items.html\">스톡 단추</link> 입니다."

#. (itstool) path: section/code
#: C/statusbar.js.page:109
#, no-wrap
msgid ""
"\n"
"        // Put the buttons in a grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"        this._grid.attach (this._backButton, 0, 0, 1, 1);\n"
"        this._grid.attach_next_to (this._clickMe, this._backButton, Gtk.PositionType.RIGHT, 1, 1);\n"
"        this._grid.attach_next_to (this._clearButton, this._clickMe, Gtk.PositionType.RIGHT, 1, 1);\n"
"\n"
"        // Put the grid in a large frame that fills most of the window\n"
"        this._topFrame = new Gtk.Frame ({\n"
"            border_width: 20,\n"
"            height_request: 90,\n"
"            width_request: 300});\n"
"        this._topFrame.add (this._grid);\n"
msgstr ""
"\n"
"        // Put the buttons in a grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"        this._grid.attach (this._backButton, 0, 0, 1, 1);\n"
"        this._grid.attach_next_to (this._clickMe, this._backButton, Gtk.PositionType.RIGHT, 1, 1);\n"
"        this._grid.attach_next_to (this._clearButton, this._clickMe, Gtk.PositionType.RIGHT, 1, 1);\n"
"\n"
"        // Put the grid in a large frame that fills most of the window\n"
"        this._topFrame = new Gtk.Frame ({\n"
"            border_width: 20,\n"
"            height_request: 90,\n"
"            width_request: 300});\n"
"        this._topFrame.add (this._grid);\n"

#. (itstool) path: section/p
#: C/statusbar.js.page:125
msgid ""
"This code creates the <link href=\"grid.js.page\">Gtk.Grid</link> that we'll "
"use to organize the buttons, and attaches the buttons to it in order. It "
"then creates a <link href=\"paned.js.page\">Gtk.Frame</link> which will take "
"up most of the window and has a large amount of padding around the buttons, "
"and adds the Grid to the Frame. Note that we still need to put the Frame "
"into the Paned interface, and then add it to the ApplicationWindow."
msgstr ""
"단추를 모아 정돈하고 순서대로 단추를 붙여넣는데 쓸 <link href=\"grid.js.page"
"\">Gtk.Grid</link>를 만듭니다. 그 다음 대부분 창을  차지하고, 단추 주변에 상"
"당히 많은 여백을 차지하는 <link href=\"paned.js.page\">Gtk.Frame</link>를 만"
"들고 그리드를 프레임에 추가합니다. 참고로 프레임을 Pane 인터페이스에 넣고 "
"ApplicationWindow에 추가해야합니다."

#. (itstool) path: section/title
#: C/statusbar.js.page:129
msgid "Creating the statusbar"
msgstr "상태 표시줄 만들기"

#. (itstool) path: section/code
#: C/statusbar.js.page:130
#, no-wrap
msgid ""
"\n"
"        // Create the statusbar\n"
"        this._statusbar = new Gtk.Statusbar();\n"
"\n"
"        // Keep track of the number of times the button has been clicked\n"
"        this.Clicks = 0;\n"
"        this.ContextID = this._statusbar.get_context_id (\"Number of Clicks\");\n"
"\n"
"        // Give the statusbar an initial message\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"        // Put the statusbar in its own frame at the bottom\n"
"        this._barFrame = new Gtk.Frame ({\n"
"            height_request: 30 });\n"
"        this._barFrame.add (this._statusbar);\n"
msgstr ""
"\n"
"        // Create the statusbar\n"
"        this._statusbar = new Gtk.Statusbar();\n"
"\n"
"        // Keep track of the number of times the button has been clicked\n"
"        this.Clicks = 0;\n"
"        this.ContextID = this._statusbar.get_context_id (\"Number of Clicks\");\n"
"\n"
"        // Give the statusbar an initial message\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"        // Put the statusbar in its own frame at the bottom\n"
"        this._barFrame = new Gtk.Frame ({\n"
"            height_request: 30 });\n"
"        this._barFrame.add (this._statusbar);\n"

#. (itstool) path: section/p
#: C/statusbar.js.page:146
msgid ""
"Here we create the Gtk.Statusbar, and push a message to it to start off "
"with. Then we give it its own narrow frame at the bottom of the window."
msgstr ""
"Gtk.Statusbar를 만들고 시작할 때 메시지를 밀어넣습니다. 그 다음 창 하단에 좁"
"은 틀을 확보합니다."

#. (itstool) path: section/p
#: C/statusbar.js.page:147
msgid ""
"Every message needs to have a context id, which is an integer value you can "
"get from the statusbar with the get_context_id() function. Its only "
"parameter is the string value you use to describe that particular context "
"id. Normally, you'll get a new context id for different kinds of messages, "
"so that you can use the remove() function to remove a specific message and "
"not just the most recent one on the stack. This is a simple example with "
"only one kind of message, though, so we're just using one for everything."
msgstr ""
"모든 메시지에는 컨텍스트 ID가 필요한데 get_context_id() 함수로 상태 표시줄에"
"서 가져올 수 있는 정수값입니다. 각각의 컨텍스트 ID를 설명할 때 여러분이 활용"
"할 유일한 매개 변수는 문자열 값 뿐입니다. 보통 메시지의 다양한 유형에 대해 "
"새 컨텍스트 ID를 받기에 remove() 함수는 스택에 있는 최근 메시지가 아닌 지정 "
"메시지를 제거할 목적으로 활용할 수 있습니다. 이 부분은 어떤 종류의 메시지에 "
"대한 예제이므로 모든 경우에 대해 한가지만 활용하겠습니다."

#. (itstool) path: section/p
#: C/statusbar.js.page:148
msgid ""
"We use the push() function to push a new message onto the stack. Its first "
"parameter is the context id, and its second is the message."
msgstr ""
"스택에 새 메시지를 밀어넣을때는 push() 함수를 사용합니다. 처음 매개변수는 컨"
"텍스트 ID며 두번째는 메시지입니다."

#. (itstool) path: section/code
#: C/statusbar.js.page:149
#, no-wrap
msgid ""
"\n"
"        // Assemble the frames into the paned interface\n"
"        this._panes.pack1 (this._topFrame, true, false);\n"
"        this._panes.pack2 (this._barFrame, false, false);\n"
"\n"
"        // Put the panes into the window\n"
"        this._window.add (this._panes);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""
"\n"
"        // Assemble the frames into the paned interface\n"
"        this._panes.pack1 (this._topFrame, true, false);\n"
"        this._panes.pack2 (this._barFrame, false, false);\n"
"\n"
"        // Put the panes into the window\n"
"        this._window.add (this._panes);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"

#. (itstool) path: section/p
#: C/statusbar.js.page:161
msgid ""
"This code finishes up creating the window, by packing the frames into the "
"pane, adding it to the window, and telling the window to show all child "
"widgets."
msgstr ""
"이 코드는 하위 창에 프레임을 패킹해넣고 창에 추가한 다음, 창에게 하위 위젯을 "
"나타내도록 지시하여 창 만들기를 끝냅니다."

#. (itstool) path: section/title
#: C/statusbar.js.page:165
msgid "Functions for interacting with the statusbar"
msgstr "상태 표시줄을 다루는 함수"

#. (itstool) path: section/code
#: C/statusbar.js.page:166
#, no-wrap
msgid ""
"\n"
"    _clicked: function() {\n"
"\n"
"        // Increment the number of clicks by 1\n"
"        this.Clicks++;\n"
"\n"
"        // Update the statusbar with the new number of clicks\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _back: function () {\n"
"\n"
"        // If there have been any clicks, decrement by 1 and remove last statusbar update\n"
"        if (this.Clicks &gt; 0 ) {\n"
"            this.Clicks--;\n"
"            this._statusbar.pop (this.ContextID);\n"
"        };\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _clear: function () {\n"
"\n"
"        // Reset the number of clicks\n"
"        this.Clicks = 0;\n"
"\n"
"        // Wipe out all the messages pushed to the statusbar\n"
"        this._statusbar.remove_all (this.ContextID);\n"
"\n"
"        // Reset the statusbar's message\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _clicked: function() {\n"
"\n"
"        // Increment the number of clicks by 1\n"
"        this.Clicks++;\n"
"\n"
"        // Update the statusbar with the new number of clicks\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _back: function () {\n"
"\n"
"        // If there have been any clicks, decrement by 1 and remove last statusbar update\n"
"        if (this.Clicks &gt; 0 ) {\n"
"            this.Clicks--;\n"
"            this._statusbar.pop (this.ContextID);\n"
"        };\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _clear: function () {\n"
"\n"
"        // Reset the number of clicks\n"
"        this.Clicks = 0;\n"
"\n"
"        // Wipe out all the messages pushed to the statusbar\n"
"        this._statusbar.remove_all (this.ContextID);\n"
"\n"
"        // Reset the statusbar's message\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/statusbar.js.page:206
msgid ""
"Here we have functions which demonstrate pushing a message onto the stack, "
"popping the top one off of it, and clearing all messages of a particular "
"context id. The pop() function just takes one parameter, which is the "
"context id for the type of message you want to pop off the most recent one "
"of. The remove_all() function works the same way, except it removes all "
"messages of that type from the stack."
msgstr ""
"여기서 메시지를 스택에 밀어넣고, 상단의 메시지를 빼내며, context ID를 가진 일"
"부 메시지를 모두 지우는 함수가 있습니다. pop() 함수는 여러분이 빼고자 하는 최"
"근 추가 메시지 형식에 대한 context ID 매개 변수만을 가지며, 설정 형식의 모든 "
"메시지를 스택에서 제거했을 경우는 제외됩니다."

#. (itstool) path: section/code
#: C/statusbar.js.page:207
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new StatusbarExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Run the application\n"
"let app = new StatusbarExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/statusbar.js.page:212
msgid ""
"Finally, we create a new instance of the finished StatusbarExample class, "
"and set the application running."
msgstr ""
"마지막으로, StatusbarExample 클래스에서 새 인스턴스를 만들고 프로그램 실행을 "
"설정하겠습니다."

#. (itstool) path: section/code
#: C/statusbar.js.page:217
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const StatusbarExample = new Lang.Class({\n"
"    Name: 'Statusbar Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsstatusbar',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 120,\n"
"            default_width: 300,\n"
"            title: \"Button Clicker\"});\n"
"\n"
"        // Create a paned interface\n"
"        this._panes = new Gtk.Paned ({\n"
"            orientation: Gtk.Orientation.VERTICAL });\n"
"\n"
"        // Create the main button\n"
"        this._clickMe = new Gtk.Button ({\n"
"            label: \"Click Me!\" });\n"
"        this._clickMe.connect (\"clicked\", Lang.bind (this, this._clicked));\n"
"\n"
"        // Create the back button\n"
"        this._backButton = new Gtk.Button ({\n"
"            label: \"gtk-go-back\",\n"
"            use_stock: true });\n"
"        this._backButton.connect (\"clicked\", Lang.bind (this, this._back));\n"
"\n"
"        // Create the clear button\n"
"        this._clearButton = new Gtk.Button ({\n"
"            label: \"gtk-clear\",\n"
"            use_stock: true });\n"
"        this._clearButton.connect (\"clicked\", Lang.bind (this, this._clear));\n"
"\n"
"        // Put the buttons in a grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"        this._grid.attach (this._backButton, 0, 0, 1, 1);\n"
"        this._grid.attach_next_to (this._clickMe, this._backButton, Gtk.PositionType.RIGHT, 1, 1);\n"
"        this._grid.attach_next_to (this._clearButton, this._clickMe, Gtk.PositionType.RIGHT, 1, 1);\n"
"\n"
"        // Put the grid in a large frame that fills most of the window\n"
"        this._topFrame = new Gtk.Frame ({\n"
"            border_width: 20,\n"
"            height_request: 90,\n"
"            width_request: 300});\n"
"        this._topFrame.add (this._grid);\n"
"\n"
"        // Create the statusbar\n"
"        this._statusbar = new Gtk.Statusbar();\n"
"\n"
"        // Keep track of the number of times the button has been clicked\n"
"        this.Clicks = 0;\n"
"        this.ContextID = this._statusbar.get_context_id (\"Number of Clicks\");\n"
"\n"
"        // Give the statusbar an initial message\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"        // Put the statusbar in its own frame at the bottom\n"
"        this._barFrame = new Gtk.Frame ({\n"
"            height_request: 30 });\n"
"        this._barFrame.add (this._statusbar);\n"
"\n"
"        // Assemble the frames into the paned interface\n"
"        this._panes.pack1 (this._topFrame, true, false);\n"
"        this._panes.pack2 (this._barFrame, false, false);\n"
"\n"
"        // Put the panes into the window\n"
"        this._window.add (this._panes);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _clicked: function() {\n"
"\n"
"        // Increment the number of clicks by 1\n"
"        this.Clicks++;\n"
"\n"
"        // Update the statusbar with the new number of clicks\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _back: function () {\n"
"\n"
"        // If there have been any clicks, decrement by 1 and remove last statusbar update\n"
"        if (this.Clicks &gt; 0 ) {\n"
"            this.Clicks--;\n"
"            this._statusbar.pop (this.ContextID);\n"
"        };\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _clear: function () {\n"
"\n"
"        // Reset the number of clicks\n"
"        this.Clicks = 0;\n"
"\n"
"        // Wipe out all the messages pushed to the statusbar\n"
"        this._statusbar.remove_all (this.ContextID);\n"
"\n"
"        // Reset the statusbar's message\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new StatusbarExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const StatusbarExample = new Lang.Class({\n"
"    Name: 'Statusbar Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsstatusbar',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 120,\n"
"            default_width: 300,\n"
"            title: \"Button Clicker\"});\n"
"\n"
"        // Create a paned interface\n"
"        this._panes = new Gtk.Paned ({\n"
"            orientation: Gtk.Orientation.VERTICAL });\n"
"\n"
"        // Create the main button\n"
"        this._clickMe = new Gtk.Button ({\n"
"            label: \"Click Me!\" });\n"
"        this._clickMe.connect (\"clicked\", Lang.bind (this, this._clicked));\n"
"\n"
"        // Create the back button\n"
"        this._backButton = new Gtk.Button ({\n"
"            label: \"gtk-go-back\",\n"
"            use_stock: true });\n"
"        this._backButton.connect (\"clicked\", Lang.bind (this, this._back));\n"
"\n"
"        // Create the clear button\n"
"        this._clearButton = new Gtk.Button ({\n"
"            label: \"gtk-clear\",\n"
"            use_stock: true });\n"
"        this._clearButton.connect (\"clicked\", Lang.bind (this, this._clear));\n"
"\n"
"        // Put the buttons in a grid\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"        this._grid.attach (this._backButton, 0, 0, 1, 1);\n"
"        this._grid.attach_next_to (this._clickMe, this._backButton, Gtk.PositionType.RIGHT, 1, 1);\n"
"        this._grid.attach_next_to (this._clearButton, this._clickMe, Gtk.PositionType.RIGHT, 1, 1);\n"
"\n"
"        // Put the grid in a large frame that fills most of the window\n"
"        this._topFrame = new Gtk.Frame ({\n"
"            border_width: 20,\n"
"            height_request: 90,\n"
"            width_request: 300});\n"
"        this._topFrame.add (this._grid);\n"
"\n"
"        // Create the statusbar\n"
"        this._statusbar = new Gtk.Statusbar();\n"
"\n"
"        // Keep track of the number of times the button has been clicked\n"
"        this.Clicks = 0;\n"
"        this.ContextID = this._statusbar.get_context_id (\"Number of Clicks\");\n"
"\n"
"        // Give the statusbar an initial message\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"        // Put the statusbar in its own frame at the bottom\n"
"        this._barFrame = new Gtk.Frame ({\n"
"            height_request: 30 });\n"
"        this._barFrame.add (this._statusbar);\n"
"\n"
"        // Assemble the frames into the paned interface\n"
"        this._panes.pack1 (this._topFrame, true, false);\n"
"        this._panes.pack2 (this._barFrame, false, false);\n"
"\n"
"        // Put the panes into the window\n"
"        this._window.add (this._panes);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _clicked: function() {\n"
"\n"
"        // Increment the number of clicks by 1\n"
"        this.Clicks++;\n"
"\n"
"        // Update the statusbar with the new number of clicks\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _back: function () {\n"
"\n"
"        // If there have been any clicks, decrement by 1 and remove last statusbar update\n"
"        if (this.Clicks &gt; 0 ) {\n"
"            this.Clicks--;\n"
"            this._statusbar.pop (this.ContextID);\n"
"        };\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _clear: function () {\n"
"\n"
"        // Reset the number of clicks\n"
"        this.Clicks = 0;\n"
"\n"
"        // Wipe out all the messages pushed to the statusbar\n"
"        this._statusbar.remove_all (this.ContextID);\n"
"\n"
"        // Reset the statusbar's message\n"
"        this._statusbar.push (this.ContextID, \"Number of clicks: \" + this.Clicks);\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new StatusbarExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/statusbar.js.page:226
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Frame.html"
"\">Gtk.Frame</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Frame.html"
"\">Gtk.Frame</link>"

#. (itstool) path: item/p
#: C/statusbar.js.page:227
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Paned.html"
"\">Gtk.Paned</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Paned.html"
"\">Gtk.Paned</link>"

#. (itstool) path: item/p
#: C/statusbar.js.page:228
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Statusbar.html"
"\">Gtk.Statusbar</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Statusbar.html"
"\">Gtk.Statusbar</link>"

#. (itstool) path: info/title
#: C/statusbar.py.page:8
msgctxt "text"
msgid "Statusbar (Python)"
msgstr "Statusbar (Python)"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/statusbar.py.page:24 C/statusbar.vala.page:25
msgctxt "_"
msgid ""
"external ref='media/statusbar.png' md5='eb1aca55315d6cda57b12a5f36058ba8'"
msgstr ""

#. (itstool) path: page/p
#: C/statusbar.py.page:25
msgid ""
"This statusbar tells you if you click the button or if you press any key "
"(and which key)."
msgstr ""
"이 상태 표시줄은 단추를 누르거나 아무 키(어떤 키)를 눌렀을 때 알려줍니다."

#. (itstool) path: section/code
#: C/statusbar.py.page:32
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"StatusBar Example\", application=app)\n"
"        self.set_default_size(200, 100)\n"
"\n"
"        # a label\n"
"        label = Gtk.Label(label=\"Press any key or \")\n"
"\n"
"        # a button\n"
"        button = Gtk.Button(label=\"click me.\")\n"
"        # connected to a callback\n"
"        button.connect(\"clicked\", self.button_clicked_cb)\n"
"\n"
"        # the statusbar\n"
"        self.statusbar = Gtk.Statusbar()\n"
"        # its context_id - not shown in the UI but needed to uniquely identify\n"
"        # the source of a message\n"
"        self.context_id = self.statusbar.get_context_id(\"example\")\n"
"        # we push a message onto the statusbar's stack\n"
"        self.statusbar.push(\n"
"            self.context_id, \"Waiting for you to do something...\")\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.set_column_spacing(5)\n"
"        grid.set_column_homogeneous(True)\n"
"        grid.set_row_homogeneous(True)\n"
"        grid.attach(label, 0, 0, 1, 1)\n"
"        grid.attach_next_to(button, label, Gtk.PositionType.RIGHT, 1, 1)\n"
"        grid.attach(self.statusbar, 0, 1, 2, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # callback function for the button clicked\n"
"    # if the button is clicked the event is signaled to the statusbar\n"
"    # onto which we push a new status\n"
"    def button_clicked_cb(self, button):\n"
"        self.statusbar.push(self.context_id, \"You clicked the button.\")\n"
"\n"
"    # event handler\n"
"    def do_key_press_event(self, event):\n"
"    # any signal from the keyboard is signaled to the statusbar\n"
"    # onto which we push a new status with the symbolic name\n"
"    # of the key pressed\n"
"        self.statusbar.push(self.context_id, Gdk.keyval_name(event.keyval) +\n"
"                            \" key was pressed.\")\n"
"        # stop the signal emission\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"StatusBar Example\", application=app)\n"
"        self.set_default_size(200, 100)\n"
"\n"
"        # a label\n"
"        label = Gtk.Label(label=\"Press any key or \")\n"
"\n"
"        # a button\n"
"        button = Gtk.Button(label=\"click me.\")\n"
"        # connected to a callback\n"
"        button.connect(\"clicked\", self.button_clicked_cb)\n"
"\n"
"        # the statusbar\n"
"        self.statusbar = Gtk.Statusbar()\n"
"        # its context_id - not shown in the UI but needed to uniquely identify\n"
"        # the source of a message\n"
"        self.context_id = self.statusbar.get_context_id(\"example\")\n"
"        # we push a message onto the statusbar's stack\n"
"        self.statusbar.push(\n"
"            self.context_id, \"Waiting for you to do something...\")\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.set_column_spacing(5)\n"
"        grid.set_column_homogeneous(True)\n"
"        grid.set_row_homogeneous(True)\n"
"        grid.attach(label, 0, 0, 1, 1)\n"
"        grid.attach_next_to(button, label, Gtk.PositionType.RIGHT, 1, 1)\n"
"        grid.attach(self.statusbar, 0, 1, 2, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # callback function for the button clicked\n"
"    # if the button is clicked the event is signaled to the statusbar\n"
"    # onto which we push a new status\n"
"    def button_clicked_cb(self, button):\n"
"        self.statusbar.push(self.context_id, \"You clicked the button.\")\n"
"\n"
"    # event handler\n"
"    def do_key_press_event(self, event):\n"
"    # any signal from the keyboard is signaled to the statusbar\n"
"    # onto which we push a new status with the symbolic name\n"
"    # of the key pressed\n"
"        self.statusbar.push(self.context_id, Gdk.keyval_name(event.keyval) +\n"
"                            \" key was pressed.\")\n"
"        # stop the signal emission\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: note/p
#: C/statusbar.py.page:34
msgid ""
"<code>Gdk.keyval_name(event.keyval)</code> converts the key value "
"<code>event.keyval</code> into a symbolic name. The names and corresponding "
"key values can be found <link href=\"http://git.gnome.org/browse/gtk+/tree/"
"gdk/gdkkeysyms.h\">here</link>, but for instance <code>GDK_KEY_BackSpace</"
"code> becomes the string <code>\"BackSpace\"</code>."
msgstr ""
"<code>Gdk.keyval_name(event.keyval)</code>은  <code>event.keyval</code> 키 값"
"을 심볼릭 이름으로 변환합니다. 이름과 관련 키 값은 <link href=\"http://git."
"gnome.org/browse/gtk+/tree/gdk/gdkkeysyms.h\">여기</link>에서 알아볼 수 있지"
"만, 예를 들어 <code>GDK_KEY_BackSpace</code> 인스턴스는 <code>\"BackSpace\"</"
"code> 문자열입니다."

#. (itstool) path: section/title
#: C/statusbar.py.page:40
msgid "Useful methods for a Statusbar widget"
msgstr "Statusbar 위젯에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/statusbar.py.page:41
msgid ""
"In line 17 the signal <code>\"clicked\"</code> is connected to the callback "
"function <code>button_clicked_cb()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"17번째 줄에서 <code>\"clicked\"</code> 시그널은 <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code> 함수로  "
"<code>button_clicked_cb()</code> 콜백 함수에 연결했습니다. 더 자세한 설명은 "
"<link xref=\"signals-callbacks.py\"/>를 참조하십시오."

#. (itstool) path: item/p
#: C/statusbar.py.page:43
msgid ""
"<code>pop(context_id)</code> removes the first message in the statusbar "
"stack with the given <code>context_id</code>."
msgstr ""
"<code>pop(context_id)</code> 함수는 상태 표시줄 스택에서 <code>context_id</"
"code>가 주어진 처음 메시지를 제거합니다."

#. (itstool) path: item/p
#: C/statusbar.py.page:44
msgid ""
"<code>remove_all(context_id)</code> removes all the messages in the "
"statusbar stack with the given <code>context_id</code>."
msgstr ""
"<code>remove_all(context_id)</code> 함수는 상태 표시줄 스택에서 "
"<code>context_id</code>가 주어진 모든 메시지를 제거합니다."

#. (itstool) path: item/p
#: C/statusbar.py.page:45
msgid ""
"<code>remove(context_id, message_id)</code> removes the message with the "
"given <code>message_id</code> in the statusbar stack with the given "
"<code>context_id</code>. The <code>message_id</code> is returned by "
"<code>push(context_id, \"the message\")</code> when pushing the message on "
"the statusbar."
msgstr ""
"<code>remove(context_id, message_id)</code> 함수는 상태 표시줄 스택에서 "
"<code>message_id</code>가 주어진 메시지를 제거합니다. <code>message_id</code>"
"는 <code>push(context_id, \"the message\")</code> 함수로 상태 표시줄에 메시지"
"를 밀어넣을 때 반환합니다."

#. (itstool) path: item/p
#: C/statusbar.py.page:53
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkStatusbar.html"
"\">GtkStatusbar</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkStatusbar.html"
"\">GtkStatusbar</link>"

#. (itstool) path: item/p
#: C/statusbar.py.page:54
msgid ""
"<link href=\"http://developer.gnome.org/gdk/stable/gdk-Keyboard-Handling.html"
"\">Gdk - Key Values</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gdk/stable/gdk-Keyboard-Handling.html"
"\">Gdk - 키 값</link>"

#. (itstool) path: info/title
#: C/statusbar.vala.page:8
msgctxt "text"
msgid "Statusbar (Vala)"
msgstr "Statusbar (Vala)"

#. (itstool) path: page/p
#: C/statusbar.vala.page:26
msgid "This statusbar tells you what's going on."
msgstr "상태 표시줄은 무슨 일이 일어나는지 알려줍니다."

#. (itstool) path: page/code
#: C/statusbar.vala.page:28
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Statusbar statusbar;\n"
"\tuint context_id;\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Statusbar Example\");\n"
"\n"
"\t\tstatusbar = new Gtk.Statusbar ();\n"
"\t\tcontext_id = statusbar.get_context_id (\"example\");\n"
"\t\tstatusbar.push (context_id, \"Waiting for you to do something...\");\n"
"\n"
"\t\t//set the default size of the window\n"
"\t\tthis.set_default_size (200, 100);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tvar label = new Gtk.Label (\"Press any key or \");\n"
"\n"
"\t\tgrid.attach (label, 0, 0, 1, 1);\n"
"\t\tlabel.show ();\n"
"\n"
"\t\tvar button = new Gtk.Button.with_label (\"click me.\");\n"
"\t\tgrid.attach_next_to (button, label, Gtk.PositionType.RIGHT, 1, 1);\n"
"\t\tbutton.show ();\n"
"\n"
"\t\tgrid.attach (statusbar, 0, 1, 2, 1);\n"
"\t\tstatusbar.show ();\n"
"\n"
"\t\tgrid.set_column_spacing (5);\n"
"\t\tgrid.set_column_homogeneous (true);\n"
"\t\tgrid.set_row_homogeneous (true);\n"
"\n"
"\t\tthis.add (grid);\n"
"\t\tgrid.show ();\n"
"\n"
"\t\tbutton.clicked.connect(button_clicked_cb);\n"
"\t}\n"
"\n"
"\t/* Since the key-press-event is a signal received by the window, we don't need to connect\n"
"\tthe window to a callback function.  We can just override key_press_event. */\n"
"\tprotected override bool key_press_event (Gdk.EventKey event) {\n"
"\t\tstatusbar.push (context_id, Gdk.keyval_name(event.keyval) + \" key was pressed.\");\n"
"\t\treturn true;\n"
"\t}\n"
"\n"
"\tvoid button_clicked_cb (Gtk.Button button) {\n"
"\t\tstatusbar.push (context_id, \"You clicked the button.\");\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.status\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Statusbar statusbar;\n"
"\tuint context_id;\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Statusbar Example\");\n"
"\n"
"\t\tstatusbar = new Gtk.Statusbar ();\n"
"\t\tcontext_id = statusbar.get_context_id (\"example\");\n"
"\t\tstatusbar.push (context_id, \"Waiting for you to do something...\");\n"
"\n"
"\t\t//set the default size of the window\n"
"\t\tthis.set_default_size (200, 100);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tvar label = new Gtk.Label (\"Press any key or \");\n"
"\n"
"\t\tgrid.attach (label, 0, 0, 1, 1);\n"
"\t\tlabel.show ();\n"
"\n"
"\t\tvar button = new Gtk.Button.with_label (\"click me.\");\n"
"\t\tgrid.attach_next_to (button, label, Gtk.PositionType.RIGHT, 1, 1);\n"
"\t\tbutton.show ();\n"
"\n"
"\t\tgrid.attach (statusbar, 0, 1, 2, 1);\n"
"\t\tstatusbar.show ();\n"
"\n"
"\t\tgrid.set_column_spacing (5);\n"
"\t\tgrid.set_column_homogeneous (true);\n"
"\t\tgrid.set_row_homogeneous (true);\n"
"\n"
"\t\tthis.add (grid);\n"
"\t\tgrid.show ();\n"
"\n"
"\t\tbutton.clicked.connect(button_clicked_cb);\n"
"\t}\n"
"\n"
"\t/* Since the key-press-event is a signal received by the window, we don't need to connect\n"
"\tthe window to a callback function.  We can just override key_press_event. */\n"
"\tprotected override bool key_press_event (Gdk.EventKey event) {\n"
"\t\tstatusbar.push (context_id, Gdk.keyval_name(event.keyval) + \" key was pressed.\");\n"
"\t\treturn true;\n"
"\t}\n"
"\n"
"\tvoid button_clicked_cb (Gtk.Button button) {\n"
"\t\tstatusbar.push (context_id, \"You clicked the button.\");\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.status\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/statusbar.vala.page:33
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Statusbar.html\">Gtk."
"Statusbar</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Statusbar.html\">Gtk."
"Statusbar</link>"

#. (itstool) path: info/title
#: C/strings.py.page:9
msgctxt "text"
msgid "Strings (Python)"
msgstr "Strings (Python)"

#. (itstool) path: info/desc
#: C/strings.py.page:14
msgid "An explanation of how to deal with strings in Python and GTK+."
msgstr "파이썬과 GTK+에서 문자열을 다루는 방법을 설명합니다."

#. (itstool) path: page/title
#: C/strings.py.page:27
msgid "Strings"
msgstr "문자열"

#. (itstool) path: note/p
#: C/strings.py.page:31
msgid "GNOME strongly encourages the use of Python 3 for writing applications!"
msgstr "그놈은 프로그램을 작성할 때 파이썬 3 활용을 강력하게 권장합니다!"

#. (itstool) path: section/title
#: C/strings.py.page:34
msgid "Strings in Python 2"
msgstr "파이썬 2의 문자열"

#. (itstool) path: section/p
#: C/strings.py.page:36
msgid ""
"Python 2 comes with two different kinds of objects that can be used to "
"represent strings, <code>str</code> and <code>unicode</code>. Instances of "
"<code>unicode</code> are used to express Unicode strings, whereas instances "
"of the <code>str</code> type are byte representations (the encoded string). "
"Under the hood, Python represents Unicode strings as either 16- or 32-bit "
"integers, depending on how the Python interpreter was compiled."
msgstr ""
"파이썬 2에서는 문자열을 표현하는 두가지 다른 객체 형식이 있는데 <code>str</"
"code>과 <code>unicode</code>가 있습니다. <code>unicode</code> 인스턴스는 유니"
"코드 문자열을 표현할 때 활용하며, <code>str</code>형식은 인코딩한 문자열 바이"
"트를 표현할 때 활용합니다. 내부적으로 파이썬에서는 파이썬 인터프리터를 어떻"
"게 컴파일했느냐에 따라 유니코드 문자열을 16비트 내지는 32비트 정수로 표현합니"
"다."

#. (itstool) path: section/code
#: C/strings.py.page:38
#, no-wrap
msgid ""
"\n"
"&gt;&gt;&gt; unicode_string = u\"Fu\\u00dfb\\u00e4lle\"\n"
"&gt;&gt;&gt; print unicode_string\n"
"Fußbälle\n"
msgstr ""
"\n"
"&gt;&gt;&gt; unicode_string = u\"Fu\\u00dfb\\u00e4lle\"\n"
"&gt;&gt;&gt; print unicode_string\n"
"Fußbälle\n"

#. (itstool) path: section/p
#: C/strings.py.page:44
msgid ""
"Unicode strings can be converted to 8-bit strings with <code>unicode."
"encode()</code>. Python’s 8-bit strings have a <code>str.decode()</code> "
"method that interprets the string using the given encoding (that is, it is "
"the inverse of the <code>unicode.encode()</code>):"
msgstr ""
"유니코드 문자열은 <code>unicode.encode()</code>로 8비트 문자열로 바꿀 수 있습"
"니다. 파이썬의 8비트 문자열은 주어진 인코딩으로 문자열을 해석하는 <code>str."
"decode()</code> 메서드가 있습니다(그 말인 즉슨, <code>unicode.encode()</code>"
"의 반대 개념입니다):"

#. (itstool) path: section/code
#: C/strings.py.page:46
#, no-wrap
msgid ""
"\n"
"&gt;&gt;&gt; type(unicode_string)\n"
"&lt;type 'unicode'&gt;\n"
"&gt;&gt;&gt; unicode_string.encode(\"utf-8\")\n"
"'Fu\\xc3\\x9fb\\xc3\\xa4lle'\n"
"&gt;&gt;&gt; utf8_string = unicode_string.encode(\"utf-8\")\n"
"&gt;&gt;&gt; type(utf8_string)\n"
"&lt;type 'str'&gt;\n"
"&gt;&gt;&gt; unicode_string == utf8_string.decode(\"utf-8\")\n"
"True"
msgstr ""
"\n"
"&gt;&gt;&gt; type(unicode_string)\n"
"&lt;type 'unicode'&gt;\n"
"&gt;&gt;&gt; unicode_string.encode(\"utf-8\")\n"
"'Fu\\xc3\\x9fb\\xc3\\xa4lle'\n"
"&gt;&gt;&gt; utf8_string = unicode_string.encode(\"utf-8\")\n"
"&gt;&gt;&gt; type(utf8_string)\n"
"&lt;type 'str'&gt;\n"
"&gt;&gt;&gt; unicode_string == utf8_string.decode(\"utf-8\")\n"
"True"

#. (itstool) path: section/p
#: C/strings.py.page:57
msgid ""
"Unfortunately, Python 2.x allows you to mix <code>unicode</code> and "
"<code>str</code> if the 8-bit string happened to contain only 7-bit (ASCII) "
"bytes, but would get <sys>UnicodeDecodeError</sys> if it contained non-ASCII "
"values."
msgstr ""
"불행하게도 파이썬 2.x에서는 8비트 문자열에 7비트(아스키) 바이트가 들어가지만 "
"ASCII 값이 아닌 경우 <sys>UnicodeDecodeError</sys>가 발생하므로, "
"<code>unicode</code>와 <code>str</code> 의 혼용을 허용하지 않습니다."

#. (itstool) path: section/title
#: C/strings.py.page:62
msgid "Strings in Python 3"
msgstr "파이썬 3의 문자열"

#. (itstool) path: section/p
#: C/strings.py.page:64
msgid ""
"Since Python 3.0, all strings are stored as Unicode in an instance of the "
"<code>str</code> type. Encoded strings on the other hand are represented as "
"binary data in the form of instances of the bytes type. Conceptionally, "
"<code>str</code> refers to text, whereas bytes refers to data. Use "
"<code>encode()</code> to go from <code>str</code> to <code>bytes</code>, and "
"<code>decode()</code> to go from <code>bytes</code> to <code>str</code>."
msgstr ""
"파이썬 3.0 부터는 모든 문자열을 <code>str</code> 형식의 인스턴스에 유니코드"
"로 저장합니다. 다른 방식으로 인코딩한 문자는 바이트 타입의 인스턴스에 이진 데"
"이터로 표현합니다. 개념적으로 <code>str</code>은 텍스트를 참조하고 bytes는 데"
"이터를 참조합니다. <code>str</code> 형식에서 <code>bytes</code> 형식으로 변환"
"할 때는 <code>encode()</code> 함수를, <code>bytes</code> 형식에서 <code>str</"
"code> 형식으로 변환할 때는 <code>decode()</code> 함수를 사용하십시오."

#. (itstool) path: section/p
#: C/strings.py.page:66
msgid ""
"In addition, it is no longer possible to mix Unicode strings with encoded "
"strings, because it will result in a <code>TypeError</code>:"
msgstr ""
"게다가, 더이상 유니코드 문자열과 인코딩 문자열을 혼용할 수 없는데, 결과적으"
"로 <code>TypeError</code>가 발생하기 때문입니다:"

#. (itstool) path: section/code
#: C/strings.py.page:68
#, no-wrap
msgid ""
"\n"
"&gt;&gt;&gt; text = \"Fu\\u00dfb\\u00e4lle\"\n"
"&gt;&gt;&gt; data = b\" sind rund\"\n"
"&gt;&gt;&gt; text + data\n"
"Traceback (most recent call last):\n"
"  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n"
"TypeError: Can't convert 'bytes' object to str implicitly\n"
"&gt;&gt;&gt; text + data.decode(\"utf-8\")\n"
"'Fußbälle sind rund'\n"
"&gt;&gt;&gt; text.encode(\"utf-8\") + data\n"
"b'Fu\\xc3\\x9fb\\xc3\\xa4lle sind rund'"
msgstr ""
"\n"
"&gt;&gt;&gt; text = \"Fu\\u00dfb\\u00e4lle\"\n"
"&gt;&gt;&gt; data = b\" sind rund\"\n"
"&gt;&gt;&gt; text + data\n"
"Traceback (most recent call last):\n"
"  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n"
"TypeError: Can't convert 'bytes' object to str implicitly\n"
"&gt;&gt;&gt; text + data.decode(\"utf-8\")\n"
"'Fußbälle sind rund'\n"
"&gt;&gt;&gt; text.encode(\"utf-8\") + data\n"
"b'Fu\\xc3\\x9fb\\xc3\\xa4lle sind rund'"

#. (itstool) path: section/title
#: C/strings.py.page:83
msgid "Unicode in GTK+"
msgstr "GTK+의 유니코드"

#. (itstool) path: section/p
#: C/strings.py.page:85
msgid ""
"GTK+ uses UTF-8 encoded strings for all text. This means that if you call a "
"method that returns a string you will always obtain an instance of the "
"<code>str</code> type. The same applies to methods that expect one or more "
"strings as parameter, they must be UTF-8 encoded. However, for convenience "
"PyGObject will automatically convert any unicode instance to str if supplied "
"as argument:"
msgstr ""
"GTK+에서는 UTF-8 인코딩 문자열을 모든 텍스트에 사용합니다. 무슨 이야기냐면, "
"문자열을 반환하는 메서드를 호출하면 <code>str</code> 형식 인스턴스를 받습니"
"다. 하나 이상의 문자열을 받는 메서드에도 동일하게 적용하며, UTF-8로 인코딩해"
"야합니다. 그러나 PyGObject에서는 인자에 데이터가 들어오면 어떤 유니코드 인스"
"턴스든 문자열로 자동으로 바꿔줍니다:"

#. (itstool) path: section/code
#: C/strings.py.page:87
#, no-wrap
msgid ""
"\n"
"&gt;&gt;&gt; from gi.repository import Gtk\n"
"&gt;&gt;&gt; label = Gtk.Label()\n"
"&gt;&gt;&gt; unicode_string = u\"Fu\\u00dfb\\u00e4lle\"\n"
"&gt;&gt;&gt; label.set_text(unicode_string)\n"
"&gt;&gt;&gt; txt = label.get_text()\n"
"&gt;&gt;&gt; type(txt)\n"
"&lt;type 'str'&gt;"
msgstr ""
"\n"
"&gt;&gt;&gt; from gi.repository import Gtk\n"
"&gt;&gt;&gt; label = Gtk.Label()\n"
"&gt;&gt;&gt; unicode_string = u\"Fu\\u00dfb\\u00e4lle\"\n"
"&gt;&gt;&gt; label.set_text(unicode_string)\n"
"&gt;&gt;&gt; txt = label.get_text()\n"
"&gt;&gt;&gt; type(txt)\n"
"&lt;type 'str'&gt;"

#. (itstool) path: section/p
#: C/strings.py.page:96
msgid "Furthermore:"
msgstr "게다가:"

#. (itstool) path: section/code
#: C/strings.py.page:98
#, no-wrap
msgid ""
"\n"
"&gt;&gt;&gt; txt == unicode_string"
msgstr ""
"\n"
"&gt;&gt;&gt; txt == unicode_string"

#. (itstool) path: section/p
#: C/strings.py.page:101
msgid ""
"would return <code>False</code>, with the warning <code>__main__:1: "
"UnicodeWarning: Unicode equal comparison failed to convert both arguments to "
"Unicode - interpreting them as being unequal</code> (<code>Gtk.Label."
"get_text()</code> will always return a <code>str</code> instance; therefore, "
"<code>txt</code> and <code>unicode_string</code> are not equal)."
msgstr ""
"는 <code>False</code>값을 반환하며, <code>__main__:1: UnicodeWarning: "
"Unicode equal comparison failed to convert both arguments to Unicode - "
"interpreting them as being unequal</code> (<code>Gtk.Label.get_text()</code> "
"는 항상 <code>str</code> 인스턴스를 내보내기 때문에, <code>txt</code> 와 "
"<code>unicode_string</code> 은 다릅니다) 경고를 내보냅니다.."

#. (itstool) path: section/p
#: C/strings.py.page:103
msgid ""
"This is especially important if you want to internationalize your program "
"using <link href=\"http://docs.python.org/library/gettext.html"
"\"><code>gettext</code></link>. You have to make sure that <code>gettext</"
"code> will return UTF-8 encoded 8-bit strings for all languages."
msgstr ""
"<link href=\"http://docs.python.org/library/gettext.html\"><code>gettext</"
"code></link>로 프로그램을 국제화할 경우 특히 더 중요합니다. <code>gettext</"
"code>에서 모든 언어에 대해 항상 UTF-8로 인코딩한 8비트 문자열을 반환하는지 확"
"인하셔야합니다."

#. (itstool) path: section/p
#: C/strings.py.page:105
msgid ""
"In general it is recommended to not use <code>unicode</code> objects in GTK+ "
"applications at all, and only use UTF-8 encoded <code>str</code> objects "
"since GTK+ does not fully integrate with <code>unicode</code> objects."
msgstr ""
"일반적으로 GTK+ 프로그램 전체에서 <code>unicode</code> 객체를 안 쓰는게 좋으"
"며, GTK+가 <code>unicode</code>를 완전히 통합하지 않았기에,  UTF-8로 인코딩"
"한 <code>str</code> 객체만 씁니다."

#. (itstool) path: section/p
#: C/strings.py.page:107
msgid ""
"String encoding is more consistent in Python 3.x because PyGObject will "
"automatically encode/decode to/from UTF-8 if you pass a string to a method "
"or a method returns a string. Strings, or text, will always be represented "
"as instances of <code>str</code> only."
msgstr ""
"문자열 인코딩은 파이썬 3.x에서 좀 더 일관성이 있는데 PyGObject는 메서드로 문"
"자열을 넘겨주거나 메서드에서 문자열을 반환할 때 자동으로 UTF-8로/부터 인코딩/"
"디코딩을 처리합니다. 문자열, 텍스트는 항상 <code>str</code> 인스턴스로만 표현"
"합니다."

#. (itstool) path: section/p
#: C/strings.py.page:114
msgid ""
"<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/unicode."
"html\">How To Deal With Strings - The Python GTK+ 3 Tutorial</link>"
msgstr ""
"<link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/unicode."
"html\">문자열 다루기 - Python GTK+ 3 따라하기 지침서</link>"

#. (itstool) path: info/title
#: C/switch.c.page:8
msgctxt "text"
msgid "Switch (C)"
msgstr "Switch (C)"

#. (itstool) path: info/desc
#: C/switch.c.page:18 C/switch.py.page:19 C/switch.vala.page:22
msgid "A \"light switch\" style toggle"
msgstr "\"조명 스위치\" 방식 토글"

#. (itstool) path: page/title
#: C/switch.c.page:21 C/switch.js.page:21 C/switch.py.page:22
#: C/switch.vala.page:25
msgid "Switch"
msgstr "Switch"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/switch.c.page:23 C/switch.py.page:23 C/switch.vala.page:26
msgctxt "_"
msgid ""
"external ref='media/switch_off.png' md5='211a2962708800697ad5373dcc86ad6d'"
msgstr ""

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/switch.c.page:24 C/switch.py.page:24 C/switch.vala.page:27
msgctxt "_"
msgid ""
"external ref='media/switch_on.png' md5='95e8769f758c2d95ace0fa8ecf30b29d'"
msgstr ""

#. (itstool) path: page/p
#: C/switch.c.page:25
msgid "This switch toggles the title of the window."
msgstr "이 스위치는 창 제목의 표시 여부를 바꿉니다."

#. (itstool) path: page/code
#: C/switch.c.page:27
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Signal handler for the \"active\" signal of the Switch*/\n"
"static void\n"
"activate_cb (GObject    *switcher,\n"
"             GParamSpec *pspec,\n"
"             gpointer    user_data)\n"
"{\n"
"  GtkWindow *window = user_data;\n"
"\n"
"  if (gtk_switch_get_active (GTK_SWITCH (switcher)))\n"
"    gtk_window_set_title (GTK_WINDOW (window), \"Switch Example\");\n"
"  else\n"
"    gtk_window_set_title (GTK_WINDOW (window), \"\");\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"  GtkWidget *switcher;\n"
"\n"
"  /*Create a window with a set title and default size.\n"
"  Also, set a border width for the amount of space to leave\n"
"  inside the window*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Switch Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 100);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 10);\n"
"\n"
"  /*Create a label*/\n"
"  label = gtk_label_new (\"Title\");\n"
"\n"
"  /*Create a switch with a default active state*/\n"
"  switcher = gtk_switch_new ();\n"
"  gtk_switch_set_active (GTK_SWITCH (switcher), TRUE);\n"
"\n"
"  /*Create a grid and set the column spacing, attach the label and\n"
"  switch onto the grid and position them accordingly*/\n"
"  grid = gtk_grid_new();\n"
"  gtk_grid_set_column_spacing (GTK_GRID (grid), 10);\n"
"  gtk_grid_attach (GTK_GRID (grid), label, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), switcher, 1, 0, 1, 1);\n"
"\n"
"  /*Connecting the clicked signal to the callback function*/\n"
"  g_signal_connect (GTK_SWITCH (switcher), \n"
"                    \"notify::active\", \n"
"                    G_CALLBACK (activate_cb), \n"
"                    window);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*Signal handler for the \"active\" signal of the Switch*/\n"
"static void\n"
"activate_cb (GObject    *switcher,\n"
"             GParamSpec *pspec,\n"
"             gpointer    user_data)\n"
"{\n"
"  GtkWindow *window = user_data;\n"
"\n"
"  if (gtk_switch_get_active (GTK_SWITCH (switcher)))\n"
"    gtk_window_set_title (GTK_WINDOW (window), \"Switch Example\");\n"
"  else\n"
"    gtk_window_set_title (GTK_WINDOW (window), \"\");\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"  GtkWidget *label;\n"
"  GtkWidget *switcher;\n"
"\n"
"  /*Create a window with a set title and default size.\n"
"  Also, set a border width for the amount of space to leave\n"
"  inside the window*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Switch Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 100);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (window), 10);\n"
"\n"
"  /*Create a label*/\n"
"  label = gtk_label_new (\"Title\");\n"
"\n"
"  /*Create a switch with a default active state*/\n"
"  switcher = gtk_switch_new ();\n"
"  gtk_switch_set_active (GTK_SWITCH (switcher), TRUE);\n"
"\n"
"  /*Create a grid and set the column spacing, attach the label and\n"
"  switch onto the grid and position them accordingly*/\n"
"  grid = gtk_grid_new();\n"
"  gtk_grid_set_column_spacing (GTK_GRID (grid), 10);\n"
"  gtk_grid_attach (GTK_GRID (grid), label, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), switcher, 1, 0, 1, 1);\n"
"\n"
"  /*Connecting the clicked signal to the callback function*/\n"
"  g_signal_connect (GTK_SWITCH (switcher), \n"
"                    \"notify::active\", \n"
"                    G_CALLBACK (activate_cb), \n"
"                    window);\n"
"\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: info/title
#: C/switch.js.page:8
msgctxt "text"
msgid "Switch (JavaScript)"
msgstr "Switch (JavaScript)"

#. (itstool) path: info/desc
#: C/switch.js.page:18
msgid "A sliding switch that can be flipped on and off"
msgstr "켬/끔 상태를 뒤집을 수 있는 슬라이딩 스위치"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/switch.js.page:22
msgctxt "_"
msgid ""
"external ref='media/switchanimals.png' md5='513ae15dcf68e15eef30b76420b8c714'"
msgstr ""

#. (itstool) path: page/p
#: C/switch.js.page:23
msgid ""
"A Switch has two positions, on and off. This example shows how you can use "
"multiple switches together to control which <link xref=\"image.js\">Image</"
"link> is shown in the window. The pictures used in this example <link href="
"\"https://live.gnome.org/TarynFox?action=AttachFile&amp;do=get&amp;"
"target=Animal+Photos.zip\">can be downloaded here</link>."
msgstr ""
"스위치 위치는 켬과 끔이 있습니다. 이 예제에서는 어떤 <link xref=\"image.js"
"\">Image</link>를 창에 보여줄 지 여러 스위치로 동시에 제어하는 방법을 보여드"
"립니다. 이 예제에서 사용한 그림은 <link href=\"https://live.gnome.org/"
"TarynFox?action=AttachFile&amp;do=get&amp;target=Animal+Photos.zip\">여기에"
"서 다운로드할 수 있습니다</link>."

#. (itstool) path: note/p
#: C/switch.js.page:24
msgid ""
"The window will contain a \"broken image\" icon instead of a picture if "
"picture files named <file>redfox.png</file>, <file>muteswan.png</file>, "
"<file>fruitbat.png</file>, and <file>gentoopenguin.png</file> aren't in the "
"same directory. You can change the code and the pictures around as you like, "
"but the Creative Commons-licensed photos used in this example were taken "
"from the following sources and cropped to 640x425:"
msgstr ""
"<file>redfox.png</file>, <file>muteswan.png</file>, <file>fruitbat.png</"
"file>, <file>gentoopenguin.png</file> 파일이 동일한 디렉터리에 없으면 창에는 "
"그림 대신 \"깨진 그림\" 아이콘이 나타납니다. 원하는 대로 코드와 그림 이곳저곳"
"을 바꿀 수 있지만 이 예제에서 크리에이티브 커먼즈 라이선스 기반으로 활용하는 "
"사진은 다음 원본을 가져왔으며 640x425 크기로 잘랐습니다:"

#. (itstool) path: item/p
#: C/switch.js.page:26
msgid ""
"<link href=\"http://en.wikipedia.org/wiki/File:Fuzzy_Freddy.jpg\">Red fox "
"photo</link> by Rob Lee, licensed <link href=\"http://creativecommons.org/"
"licenses/by/2.0/deed.en\">CC-By</link>"
msgstr ""
"Rob Lee의 <link href=\"http://en.wikipedia.org/wiki/File:Fuzzy_Freddy.jpg"
"\">Red fox photo</link>는 <link href=\"http://creativecommons.org/licenses/"
"by/2.0/deed.en\">CC-By</link> 라이선스를 따릅니다"

#. (itstool) path: item/p
#: C/switch.js.page:27
msgid ""
"<link href=\"http://en.wikipedia.org/wiki/File:Pygoscelis_papua_-"
"Nagasaki_Penguin_Aquarium_-swimming_underwater-8a.jpg\">Gentoo penguin "
"photo</link> by Ken Funakoshi, licensed <link href=\"http://creativecommons."
"org/licenses/by-sa/2.0/deed.en\">CC-By-SA</link>"
msgstr ""
"Ken Funakoshi의 <link href=\"http://en.wikipedia.org/wiki/File:"
"Pygoscelis_papua_-Nagasaki_Penguin_Aquarium_-swimming_underwater-8a.jpg"
"\">Gentoo penguin photo</link>는 <link href=\"http://creativecommons.org/"
"licenses/by-sa/2.0/deed.en\">CC-By-SA</link> 라이선스를 따릅니다"

#. (itstool) path: item/p
#: C/switch.js.page:28
msgid ""
"<link href=\"http://www.flickr.com/photos/shekgraham/127431519/in/"
"photostream/\">Fruit bat photo</link> by Shek Graham, licensed <link href="
"\"http://creativecommons.org/licenses/by/2.0/deed.en\">CC-By</link>"
msgstr ""
"Shek Graham의 <link href=\"http://www.flickr.com/photos/shekgraham/127431519/"
"in/photostream/\">Fruit bat photo</link>는 <link href=\"http://"
"creativecommons.org/licenses/by/2.0/deed.en\">CC-By</link> 라이선스를 따릅니"
"다"

#. (itstool) path: item/p
#: C/switch.js.page:29
msgid ""
"<link href=\"http://commons.wikimedia.org/wiki/File:Mute_Swan-"
"Mindaugas_Urbonas.jpg\">Mute swan photo</link> by Mindaugas Urbonas, "
"licensed <link href=\"http://creativecommons.org/licenses/by-sa/2.5/deed.en"
"\">CC-By-SA</link>"
msgstr ""
"Mindaugas Urbonas의 <link href=\"http://commons.wikimedia.org/wiki/File:"
"Mute_Swan-Mindaugas_Urbonas.jpg\">Mute swan photo</link>는 <link href="
"\"http://creativecommons.org/licenses/by-sa/2.5/deed.en\">CC-By-SA</link> 라"
"이선스를 따릅니다"

#. (itstool) path: note/p
#: C/switch.js.page:31
msgid ""
"Photo credits and licensing information are shown in the application's <link "
"xref=\"aboutdialog.js\">AboutDialog</link>. Always remember to credit the "
"original artist when using <link href=\"http://creativecommons.org"
"\">Creative Commons-licensed works!</link>"
msgstr ""
"그놈 사진의 제작자와 라이선스 정보는 프로그램의 <link xref=\"aboutdialog.js"
"\">AboutDialog</link>로 나타냅니다. 항상 <link href=\"http://creativecommons."
"org\">크리에이티브 커먼즈 라이선스 작품</link>을 사용할 때 원 저작자 저작 정"
"보 기입을 기억하십시오!"

#. (itstool) path: section/code
#: C/switch.js.page:48
#, no-wrap
msgid ""
"\n"
"const SwitchExample = new Lang.Class({\n"
"    Name: 'Switch Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsswitch',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal creates the menu and builds the UI\n"
"    _onStartup: function() {\n"
"        this._initMenus();\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const SwitchExample = new Lang.Class({\n"
"    Name: 'Switch Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsswitch',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal creates the menu and builds the UI\n"
"    _onStartup: function() {\n"
"        this._initMenus();\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/switch.js.page:75
msgid ""
"All the code for this sample goes in the SwitchExample class. The above code "
"creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"Application.html\">Gtk.Application</link> for our widgets and window to go "
"in."
msgstr ""
"이 예제의 모든 코드는 SwitchExample 클래스에 들어갔습니다. 위 코드는 위젯과 "
"창이 들어가는 <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"Application.html\">Gtk.Application</link>을 만듭니다."

#. (itstool) path: section/code
#: C/switch.js.page:77
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Animal Creator\"});\n"
msgstr ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Animal Creator\"});\n"

#. (itstool) path: section/title
#: C/switch.js.page:92
msgid "Creating the switches"
msgstr "스위치 만들기"

#. (itstool) path: section/code
#: C/switch.js.page:93
#, no-wrap
msgid ""
"\n"
"        // Create the image widget and set its default picture\n"
"        this._image = new Gtk.Image ({file: \"redfox.png\"});\n"
msgstr ""
"\n"
"        // Create the image widget and set its default picture\n"
"        this._image = new Gtk.Image ({file: \"redfox.png\"});\n"

#. (itstool) path: section/p
#: C/switch.js.page:98
msgid ""
"We first create the <link xref=\"image.js\">Image</link> that the switches "
"will control. Remember that a file named <file>redfox.png</file> needs to be "
"in the same directory as this application."
msgstr ""
"우선 스위치가 제어할 <link xref=\"image.js\">Image</link>를 만들겠습니다. 이 "
"프로그램과 동일한 디렉터리에 <file>redfox.png</file> 그림을 두어야 함을 기억"
"하십시오."

#. (itstool) path: section/code
#: C/switch.js.page:100
#, no-wrap
msgid ""
"\n"
"        // Create a label for the first switch\n"
"        this._flyLabel = new Gtk.Label ({\n"
"            label: \"Make it fly\",\n"
"            margin_right: 30});\n"
"\n"
"        // Create the first switch and set its default position\n"
"        this._flySwitch = new Gtk.Switch ({active: false});\n"
"        this._flySwitch.connect ('notify::active', Lang.bind (this, this._switchFlip));\n"
"\n"
"        // Create a label for the second switch\n"
"        this._birdLabel = new Gtk.Label ({\n"
"            label: \"Make it a bird\",\n"
"            margin_right: 30});\n"
"\n"
"        // Create the second switch\n"
"        this._birdSwitch = new Gtk.Switch ({active: false});\n"
"        this._birdSwitch.connect ('notify::active', Lang.bind (this, this._switchFlip));\n"
msgstr ""
"\n"
"        // Create a label for the first switch\n"
"        this._flyLabel = new Gtk.Label ({\n"
"            label: \"Make it fly\",\n"
"            margin_right: 30});\n"
"\n"
"        // Create the first switch and set its default position\n"
"        this._flySwitch = new Gtk.Switch ({active: false});\n"
"        this._flySwitch.connect ('notify::active', Lang.bind (this, this._switchFlip));\n"
"\n"
"        // Create a label for the second switch\n"
"        this._birdLabel = new Gtk.Label ({\n"
"            label: \"Make it a bird\",\n"
"            margin_right: 30});\n"
"\n"
"        // Create the second switch\n"
"        this._birdSwitch = new Gtk.Switch ({active: false});\n"
"        this._birdSwitch.connect ('notify::active', Lang.bind (this, this._switchFlip));\n"

#. (itstool) path: section/p
#: C/switch.js.page:120
msgid ""
"We use a <link xref=\"label.js\">Label</link> to mark each Switch, and give "
"them a bit of a margin on the right so that they aren't crammed right next "
"to the Switches. After that we create the Switches, and set them to be "
"switched off by default."
msgstr ""
"각 스위치에 표시할 <link xref=\"label.js\">Label</link>을 만들고 우측에 약간"
"의 여백을 주어 스위치 뒤에서 쑤셔 넣은 느낌이 안나게 하겠습니다. 그 다음 스위"
"치를 만들고 기본적으로 스위치를 꺼둔 상태로 설정하겠습니다."

#. (itstool) path: section/p
#: C/switch.js.page:121
msgid ""
"The signal a switch sends out when it's flipped on or off is called notify::"
"active. After we create each switch, we connect its notify::active signal to "
"a function called _switchFlip. If you have multiple switches that each do "
"something different, you might want to connect them to different functions, "
"but here they're both used for the same thing: To control what picture's "
"displayed by _image."
msgstr ""
"스위치를 다른 방향으로 제낄 경우 스위치에서 내보내는 시그널은 notify::active"
"입니다. 스위치를 만들고 나면 notify::active 시그널을 _switchFlip 함수에 연결"
"합니다. 여러 스위치가 서로 다른 동작을 한다면 다른 함수에 연결해야 합니다만, "
"이 스위치는 _image로 표시한 그림을 처리하는 동일한 동작을 하는데 씁니다."

#. (itstool) path: section/code
#: C/switch.js.page:123
#, no-wrap
msgid ""
"\n"
"        // Create a grid for the labels and switches beneath the picture\n"
"        this._UIGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_top: 20});\n"
"\n"
"        // Attach the labels and switches to that grid\n"
"        this._UIGrid.attach (this._flyLabel, 0, 0, 1, 1);\n"
"        this._UIGrid.attach (this._flySwitch, 1, 0, 1, 1);\n"
"        this._UIGrid.attach (this._birdLabel, 0, 1, 1, 1);\n"
"        this._UIGrid.attach (this._birdSwitch, 1, 1, 1, 1);\n"
"\n"
"        // Create a master grid to put both the UI and the picture into\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Attach the picture and the UI grid to the master grid\n"
"        this._mainGrid.attach (this._image, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._UIGrid, 0, 1, 1, 1);\n"
msgstr ""
"\n"
"        // Create a grid for the labels and switches beneath the picture\n"
"        this._UIGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_top: 20});\n"
"\n"
"        // Attach the labels and switches to that grid\n"
"        this._UIGrid.attach (this._flyLabel, 0, 0, 1, 1);\n"
"        this._UIGrid.attach (this._flySwitch, 1, 0, 1, 1);\n"
"        this._UIGrid.attach (this._birdLabel, 0, 1, 1, 1);\n"
"        this._UIGrid.attach (this._birdSwitch, 1, 1, 1, 1);\n"
"\n"
"        // Create a master grid to put both the UI and the picture into\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Attach the picture and the UI grid to the master grid\n"
"        this._mainGrid.attach (this._image, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._UIGrid, 0, 1, 1, 1);\n"

#. (itstool) path: section/p
#: C/switch.js.page:145
msgid ""
"We create a <link xref=\"grid.js\">Grid</link> for the Labels and Switches "
"first, so that we can organize them in a 2x2 layout with a margin between it "
"and the Image. Then we put that Grid into a larger 2x1 Grid that has the "
"Image on top, and the Grid with the Labels and Switches on the bottom."
msgstr ""
"레이블과 스위치를 넣을 <link xref=\"grid.js\">Grid</link>를 먼저 만들어, 그"
"림 사이에 간격을 준 2x2 배치로 모아둘 수 있습니다. 그 다음 더 큰 2x1 그리드"
"를 활용하여 상단에 그림을 넣도록 하고 레이블과 스위치는 하단에 넣도록 합니다."

#. (itstool) path: section/code
#: C/switch.js.page:146
#, no-wrap
msgid ""
"\n"
"        // Add the master grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""
"\n"
"        // Add the master grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"

#. (itstool) path: section/title
#: C/switch.js.page:158
msgid "Function which handles the switches being flipped"
msgstr "스위치 전환을 처리하는 함수"

#. (itstool) path: section/code
#: C/switch.js.page:160
#, no-wrap
msgid ""
"\n"
"    _switchFlip: function() {\n"
"\n"
"        // Change the picture depending on which switches are flipped\n"
"        if (this._flySwitch.get_active()) {\n"
"\n"
"            if (this._birdSwitch.get_active()) this._image.set_from_file (\"muteswan.png\");\n"
"\n"
"            else this._image.set_from_file (\"fruitbat.png\");\n"
"        }\n"
"\n"
"        else {\n"
"\n"
"            if (this._birdSwitch.get_active()) this._image.set_from_file (\"gentoopenguin.png\");\n"
"\n"
"            else this._image.set_from_file (\"redfox.png\");\n"
"\n"
"        }\n"
"\n"
"    },\n"
msgstr ""
"\n"
"    _switchFlip: function() {\n"
"\n"
"        // Change the picture depending on which switches are flipped\n"
"        if (this._flySwitch.get_active()) {\n"
"\n"
"            if (this._birdSwitch.get_active()) this._image.set_from_file (\"muteswan.png\");\n"
"\n"
"            else this._image.set_from_file (\"fruitbat.png\");\n"
"        }\n"
"\n"
"        else {\n"
"\n"
"            if (this._birdSwitch.get_active()) this._image.set_from_file (\"gentoopenguin.png\");\n"
"\n"
"            else this._image.set_from_file (\"redfox.png\");\n"
"\n"
"        }\n"
"\n"
"    },\n"

#. (itstool) path: section/p
#: C/switch.js.page:181
msgid ""
"Each time a Switch is flipped, this function checks to see which of the two "
"Switches are active afterwards, using the Switches' built-in get_active() "
"function. It then changes the Image accordingly. You can change the "
"filenames around as you like, so long as you have pictures to go with them."
msgstr ""
"스위치를 제낄 때마다, 이 함수는 두 스위치 중 어떤 스위치가 동작했는지 스위치 "
"내장 get_active() 함수로 나중에 확인합니다. 그 다음 그림을 바로 바꿉니다. 이"
"미 그림이 있다 하더라도 원하는 대로 그림을 바꿀 수 있습니다."

#. (itstool) path: section/title
#: C/switch.js.page:185
msgid "Creating the AboutDialog"
msgstr "AboutDialog 만들기"

#. (itstool) path: section/code
#: C/switch.js.page:186
#, no-wrap
msgid ""
"\n"
"    _initMenus: function() {\n"
"\n"
"        // Build the application's menu so we can have an \"About\" button\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"About\", 'app.about');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // Bind the \"About\" button to the _showAbout() function\n"
"        let aboutAction = new Gio.SimpleAction ({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        // Bind the \"Quit\" button to the function that closes the window\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
msgstr ""
"\n"
"    _initMenus: function() {\n"
"\n"
"        // Build the application's menu so we can have an \"About\" button\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"About\", 'app.about');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // Bind the \"About\" button to the _showAbout() function\n"
"        let aboutAction = new Gio.SimpleAction ({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        // Bind the \"Quit\" button to the function that closes the window\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"

#. (itstool) path: section/p
#: C/switch.js.page:212
msgid ""
"The first step is building the <link xref=\"gmenu.js\">GMenu</link> that the "
"\"About\" button goes into. This is the menu that appears when you click the "
"application's name in the upper-left corner of the screen, next to the "
"Activities menu. Our menu only has two options in it: About, and Quit."
msgstr ""
"첫 단계에서는 \"정보\" 단추를 넣을 <link xref=\"gmenu.js\">GMenu</link>를 만"
"듭니다. 화면의 좌측 상단 구석에 뜰 프로그램 이름을 눌렀을 떄 현재 활동 옆에 "
"나타나는 메뉴입니다. 우리가 만든 메뉴에는 정보, 끝내기 옵션 두개를 넣습니다."

#. (itstool) path: section/code
#: C/switch.js.page:214
#, no-wrap
msgid ""
"\n"
"    _showAbout: function () {\n"
"\n"
"        // String arrays of the names of the people involved in the project\n"
"        var artists = ['Rob Lee http://en.wikipedia.org/wiki/File:Fuzzy_Freddy.jpg', 'Ken Funakoshi http://en.wikipedia.org/wiki/File:Pygoscelis_papua_-Nagasaki_Penguin_Aquarium_-swimming_underwater-8a.jpg', 'Shek Graham http://www.flickr.com/photos/shekgraham/127431519/in/photostream/', 'Mindaugas Urbonas http://commons.wikimedia.org/wiki/File:Mute_Swan-Mindaugas_Urbonas.jpg'];\n"
"        var authors = [\"GNOME Documentation Team\"];\n"
"        var documenters = [\"GNOME Documentation Team\"];\n"
"\n"
"        // Create the About dialog\n"
"        let aboutDialog = new Gtk.AboutDialog({\n"
"            title: \"AboutDialog Example\",\n"
"            program_name: \"Animal Creator\",\n"
"            copyright: \"Copyright \\xa9 2012 GNOME Documentation Team\\n\\nRed fox photo licensed CC-By by Rob Lee\\nGentoo penguin photo licensed CC-By-SA by Ken Funakoshi\\nFruit bat photo licensed CC-By by Shek Graham\\nMute swan photo licensed CC-By-SA by Mindaugas Urbonas\\nLinks to the originals are available under Credits.\\n\\nHave you hugged a penguin today?\",\n"
"            artists: artists,\n"
"            authors: authors,\n"
"            documenters: documenters,\n"
"            website: \"http://developer.gnome.org\",\n"
"            website_label: \"GNOME Developer Website\" });\n"
"\n"
"        // Attach the About dialog to the window\n"
"        aboutDialog.modal = true;\n"
"        aboutDialog.transient_for = this._window;\n"
"\n"
"        // Show the About dialog\n"
"        aboutDialog.show();\n"
"\n"
"        // Connect the Close button to the destroy signal for the dialog\n"
"        aboutDialog.connect('response', function() {\n"
"            aboutDialog.destroy();\n"
"        });\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _showAbout: function () {\n"
"\n"
"        // String arrays of the names of the people involved in the project\n"
"        var artists = ['Rob Lee http://en.wikipedia.org/wiki/File:Fuzzy_Freddy.jpg', 'Ken Funakoshi http://en.wikipedia.org/wiki/File:Pygoscelis_papua_-Nagasaki_Penguin_Aquarium_-swimming_underwater-8a.jpg', 'Shek Graham http://www.flickr.com/photos/shekgraham/127431519/in/photostream/', 'Mindaugas Urbonas http://commons.wikimedia.org/wiki/File:Mute_Swan-Mindaugas_Urbonas.jpg'];\n"
"        var authors = [\"GNOME Documentation Team\"];\n"
"        var documenters = [\"GNOME Documentation Team\"];\n"
"\n"
"        // Create the About dialog\n"
"        let aboutDialog = new Gtk.AboutDialog({\n"
"            title: \"AboutDialog Example\",\n"
"            program_name: \"Animal Creator\",\n"
"            copyright: \"Copyright \\xa9 2012 GNOME Documentation Team\\n\\nRed fox photo licensed CC-By by Rob Lee\\nGentoo penguin photo licensed CC-By-SA by Ken Funakoshi\\nFruit bat photo licensed CC-By by Shek Graham\\nMute swan photo licensed CC-By-SA by Mindaugas Urbonas\\nLinks to the originals are available under Credits.\\n\\nHave you hugged a penguin today?\",\n"
"            artists: artists,\n"
"            authors: authors,\n"
"            documenters: documenters,\n"
"            website: \"http://developer.gnome.org\",\n"
"            website_label: \"GNOME Developer Website\" });\n"
"\n"
"        // Attach the About dialog to the window\n"
"        aboutDialog.modal = true;\n"
"        aboutDialog.transient_for = this._window;\n"
"\n"
"        // Show the About dialog\n"
"        aboutDialog.show();\n"
"\n"
"        // Connect the Close button to the destroy signal for the dialog\n"
"        aboutDialog.connect('response', function() {\n"
"            aboutDialog.destroy();\n"
"        });\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/switch.js.page:248
msgid ""
"An <link xref=\"aboutdialog.js\">AboutDialog</link> has a lot of different "
"things you can set, to credit everyone who worked on the application and "
"leave a note to whomever reads it. In this case, the copyright section "
"contains our note and credits the original photographers, while the artists "
"section shows you a list of the photographers with links to the original "
"photos when you click the Credits button. The web URLs put after their names "
"in the array turn their names into clickable links in the Credits section."
msgstr ""
"<link xref=\"aboutdialog.js\">AboutDialog</link>에는 여러분이 설정할 수 있는 "
"여러 다른 요소가 있는데, 프로그램을 만들 때 기여한 모든 사람, 그리고 이 부분"
"을 봐야 할 독자에게 보여줄 참고 내용을 담습니다. 이 경우 저작권 섹션에 참고 "
"메모와 만든 사람의 사진 원본 촬영자 목록을 올려둡니다. 다만, 아티스트 섹션에"
"는 만든 사람 단추를 눌렀을 때 원본 사진 링크와 사진사 목록을 보여줍니다. 웹 "
"URL은 만든 사람 섹션에서 누를 수 있는 항목으로 이름에 걸어두겠습니다."

#. (itstool) path: section/code
#: C/switch.js.page:250
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new SwitchExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Run the application\n"
"let app = new SwitchExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/switch.js.page:255
msgid ""
"Finally, we create a new instance of the finished SwitchExample class, and "
"set the application running."
msgstr ""
"마지막으로, 마무리한 SwitchExample 클래스의 새 인스턴스를 만들고, 프로그램 실"
"행을 설정합니다."

#. (itstool) path: section/code
#: C/switch.js.page:260
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const SwitchExample = new Lang.Class({\n"
"    Name: 'Switch Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsswitch'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal creates the menu and builds the UI\n"
"    _onStartup: function() {\n"
"        this._initMenus();\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Animal Creator\"});\n"
"\n"
"        // Create the image widget and set its default picture\n"
"        this._image = new Gtk.Image ({file: \"redfox.png\"});\n"
"\n"
"        // Create a label for the first switch\n"
"        this._flyLabel = new Gtk.Label ({\n"
"            label: \"Make it fly\",\n"
"            margin_right: 30});\n"
"\n"
"        // Create the first switch and set its default position\n"
"        this._flySwitch = new Gtk.Switch ({active: false});\n"
"        this._flySwitch.connect ('notify::active', Lang.bind (this, this._switchFlip));\n"
"\n"
"        // Create a label for the second switch\n"
"        this._birdLabel = new Gtk.Label ({\n"
"            label: \"Make it a bird\",\n"
"            margin_right: 30});\n"
"\n"
"        // Create the second switch\n"
"        this._birdSwitch = new Gtk.Switch ({active: false});\n"
"        this._birdSwitch.connect ('notify::active', Lang.bind (this, this._switchFlip));\n"
"\n"
"        // Create a grid for the labels and switches beneath the picture\n"
"        this._UIGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_top: 20});\n"
"\n"
"        // Attach the labels and switches to that grid\n"
"        this._UIGrid.attach (this._flyLabel, 0, 0, 1, 1);\n"
"        this._UIGrid.attach (this._flySwitch, 1, 0, 1, 1);\n"
"        this._UIGrid.attach (this._birdLabel, 0, 1, 1, 1);\n"
"        this._UIGrid.attach (this._birdSwitch, 1, 1, 1, 1);\n"
"\n"
"        // Create a master grid to put both the UI and the picture into\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Attach the picture and the UI grid to the master grid\n"
"        this._mainGrid.attach (this._image, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._UIGrid, 0, 1, 1, 1);\n"
"\n"
"        // Add the master grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _switchFlip: function() {\n"
"\n"
"        // Change the picture depending on which switches are flipped\n"
"        if (this._flySwitch.get_active()) {\n"
"\n"
"            if (this._birdSwitch.get_active()) this._image.set_from_file (\"muteswan.png\");\n"
"\n"
"            else this._image.set_from_file (\"fruitbat.png\");\n"
"        }\n"
"\n"
"        else {\n"
"\n"
"            if (this._birdSwitch.get_active()) this._image.set_from_file (\"gentoopenguin.png\");\n"
"\n"
"            else this._image.set_from_file (\"redfox.png\");\n"
"\n"
"        }\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _initMenus: function() {\n"
"\n"
"        // Build the application's menu so we can have an \"About\" button\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"About\", 'app.about');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // Bind the \"About\" button to the _showAbout() function\n"
"        let aboutAction = new Gio.SimpleAction ({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        // Bind the \"Quit\" button to the function that closes the window\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"\n"
"\n"
"    _showAbout: function () {\n"
"\n"
"        // String arrays of the names of the people involved in the project\n"
"        var artists = ['Rob Lee http://en.wikipedia.org/wiki/File:Fuzzy_Freddy.png', 'Ken Funakoshi http://en.wikipedia.org/wiki/File:Pygoscelis_papua_-Nagasaki_Penguin_Aquarium_-swimming_underwater-8a.png', 'Shek Graham http://www.flickr.com/photos/shekgraham/127431519/in/photostream/', 'Mindaugas Urbonas http://commons.wikimedia.org/wiki/File:Mute_Swan-Mindaugas_Urbonas.png'];\n"
"        var authors = [\"GNOME Documentation Team\"];\n"
"        var documenters = [\"GNOME Documentation Team\"];\n"
"\n"
"        // Create the About dialog\n"
"        let aboutDialog = new Gtk.AboutDialog({\n"
"            title: \"AboutDialog Example\",\n"
"            program_name: \"Animal Creator\",\n"
"            copyright: \"Copyright \\xa9 2012 GNOME Documentation Team\\n\\nRed fox photo licensed CC-By by Rob Lee\\nGentoo penguin photo licensed CC-By-SA by Ken Funakoshi\\nFruit bat photo licensed CC-By by Shek Graham\\nMute swan photo licensed CC-By-SA by Mindaugas Urbonas\\nLinks to the originals are available under Credits.\\n\\nHave you hugged a penguin today?\",\n"
"            artists: artists,\n"
"            authors: authors,\n"
"            documenters: documenters,\n"
"            website: \"http://developer.gnome.org\",\n"
"            website_label: \"GNOME Developer Website\" });\n"
"\n"
"        // Attach the About dialog to the window\n"
"        aboutDialog.modal = true;\n"
"        aboutDialog.transient_for = this._window;\n"
"\n"
"        // Show the About dialog\n"
"        aboutDialog.show();\n"
"\n"
"        // Connect the Close button to the destroy signal for the dialog\n"
"        aboutDialog.connect('response', function() {\n"
"            aboutDialog.destroy();\n"
"        });\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new SwitchExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const SwitchExample = new Lang.Class({\n"
"    Name: 'Switch Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jsswitch'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal creates the menu and builds the UI\n"
"    _onStartup: function() {\n"
"        this._initMenus();\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            border_width: 20,\n"
"            title: \"Animal Creator\"});\n"
"\n"
"        // Create the image widget and set its default picture\n"
"        this._image = new Gtk.Image ({file: \"redfox.png\"});\n"
"\n"
"        // Create a label for the first switch\n"
"        this._flyLabel = new Gtk.Label ({\n"
"            label: \"Make it fly\",\n"
"            margin_right: 30});\n"
"\n"
"        // Create the first switch and set its default position\n"
"        this._flySwitch = new Gtk.Switch ({active: false});\n"
"        this._flySwitch.connect ('notify::active', Lang.bind (this, this._switchFlip));\n"
"\n"
"        // Create a label for the second switch\n"
"        this._birdLabel = new Gtk.Label ({\n"
"            label: \"Make it a bird\",\n"
"            margin_right: 30});\n"
"\n"
"        // Create the second switch\n"
"        this._birdSwitch = new Gtk.Switch ({active: false});\n"
"        this._birdSwitch.connect ('notify::active', Lang.bind (this, this._switchFlip));\n"
"\n"
"        // Create a grid for the labels and switches beneath the picture\n"
"        this._UIGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER,\n"
"            margin_top: 20});\n"
"\n"
"        // Attach the labels and switches to that grid\n"
"        this._UIGrid.attach (this._flyLabel, 0, 0, 1, 1);\n"
"        this._UIGrid.attach (this._flySwitch, 1, 0, 1, 1);\n"
"        this._UIGrid.attach (this._birdLabel, 0, 1, 1, 1);\n"
"        this._UIGrid.attach (this._birdSwitch, 1, 1, 1, 1);\n"
"\n"
"        // Create a master grid to put both the UI and the picture into\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Attach the picture and the UI grid to the master grid\n"
"        this._mainGrid.attach (this._image, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._UIGrid, 0, 1, 1, 1);\n"
"\n"
"        // Add the master grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _switchFlip: function() {\n"
"\n"
"        // Change the picture depending on which switches are flipped\n"
"        if (this._flySwitch.get_active()) {\n"
"\n"
"            if (this._birdSwitch.get_active()) this._image.set_from_file (\"muteswan.png\");\n"
"\n"
"            else this._image.set_from_file (\"fruitbat.png\");\n"
"        }\n"
"\n"
"        else {\n"
"\n"
"            if (this._birdSwitch.get_active()) this._image.set_from_file (\"gentoopenguin.png\");\n"
"\n"
"            else this._image.set_from_file (\"redfox.png\");\n"
"\n"
"        }\n"
"\n"
"    },\n"
"\n"
"\n"
"\n"
"    _initMenus: function() {\n"
"\n"
"        // Build the application's menu so we can have an \"About\" button\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"About\", 'app.about');\n"
"        menu.append(\"Quit\",'app.quit');\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        // Bind the \"About\" button to the _showAbout() function\n"
"        let aboutAction = new Gio.SimpleAction ({ name: 'about' });\n"
"        aboutAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._showAbout();\n"
"            }));\n"
"        this.application.add_action(aboutAction);\n"
"\n"
"        // Bind the \"Quit\" button to the function that closes the window\n"
"        let quitAction = new Gio.SimpleAction ({ name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"\n"
"\n"
"    _showAbout: function () {\n"
"\n"
"        // String arrays of the names of the people involved in the project\n"
"        var artists = ['Rob Lee http://en.wikipedia.org/wiki/File:Fuzzy_Freddy.png', 'Ken Funakoshi http://en.wikipedia.org/wiki/File:Pygoscelis_papua_-Nagasaki_Penguin_Aquarium_-swimming_underwater-8a.png', 'Shek Graham http://www.flickr.com/photos/shekgraham/127431519/in/photostream/', 'Mindaugas Urbonas http://commons.wikimedia.org/wiki/File:Mute_Swan-Mindaugas_Urbonas.png'];\n"
"        var authors = [\"GNOME Documentation Team\"];\n"
"        var documenters = [\"GNOME Documentation Team\"];\n"
"\n"
"        // Create the About dialog\n"
"        let aboutDialog = new Gtk.AboutDialog({\n"
"            title: \"AboutDialog Example\",\n"
"            program_name: \"Animal Creator\",\n"
"            copyright: \"Copyright \\xa9 2012 GNOME Documentation Team\\n\\nRed fox photo licensed CC-By by Rob Lee\\nGentoo penguin photo licensed CC-By-SA by Ken Funakoshi\\nFruit bat photo licensed CC-By by Shek Graham\\nMute swan photo licensed CC-By-SA by Mindaugas Urbonas\\nLinks to the originals are available under Credits.\\n\\nHave you hugged a penguin today?\",\n"
"            artists: artists,\n"
"            authors: authors,\n"
"            documenters: documenters,\n"
"            website: \"http://developer.gnome.org\",\n"
"            website_label: \"GNOME Developer Website\" });\n"
"\n"
"        // Attach the About dialog to the window\n"
"        aboutDialog.modal = true;\n"
"        aboutDialog.transient_for = this._window;\n"
"\n"
"        // Show the About dialog\n"
"        aboutDialog.show();\n"
"\n"
"        // Connect the Close button to the destroy signal for the dialog\n"
"        aboutDialog.connect('response', function() {\n"
"            aboutDialog.destroy();\n"
"        });\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new SwitchExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/switch.js.page:271
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Image.html"
"\">Gtk.Image</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Image.html"
"\">Gtk.Image</link>"

#. (itstool) path: item/p
#: C/switch.js.page:273
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Switch.html"
"\">Gtk.Switch</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Switch.html"
"\">Gtk.Switch</link>"

#. (itstool) path: info/title
#: C/switch.py.page:8
msgctxt "text"
msgid "Switch (Python)"
msgstr "Switch (Python)"

#. (itstool) path: page/p
#: C/switch.py.page:26
msgid "This Switch makes the title appears and disappear."
msgstr "이 스위치는 제목을 나타나게 하거나 사라지게 합니다."

#. (itstool) path: section/code
#: C/switch.py.page:33
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Switch Example\", application=app)\n"
"        self.set_default_size(300, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a switch\n"
"        switch = Gtk.Switch()\n"
"        # turned on by default\n"
"        switch.set_active(True)\n"
"        # connect the signal notify::active emitted by the switch\n"
"        # to the callback function activate_cb\n"
"        switch.connect(\"notify::active\", self.activate_cb)\n"
"\n"
"        # a label\n"
"        label = Gtk.Label()\n"
"        label.set_text(\"Title\")\n"
"\n"
"        # a grid to allocate the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.set_column_spacing(10)\n"
"        grid.attach(label, 0, 0, 1, 1)\n"
"        grid.attach(switch, 1, 0, 1, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # Callback function. Since the signal is notify::active\n"
"    # we need the argument 'active'\n"
"    def activate_cb(self, button, active):\n"
"        # if the button (i.e. the switch) is active, set the title\n"
"        # of the window to \"Switch Example\"\n"
"        if button.get_active():\n"
"            self.set_title(\"Switch Example\")\n"
"        # else, set it to \"\" (empty string)\n"
"        else:\n"
"            self.set_title(\"\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Switch Example\", application=app)\n"
"        self.set_default_size(300, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a switch\n"
"        switch = Gtk.Switch()\n"
"        # turned on by default\n"
"        switch.set_active(True)\n"
"        # connect the signal notify::active emitted by the switch\n"
"        # to the callback function activate_cb\n"
"        switch.connect(\"notify::active\", self.activate_cb)\n"
"\n"
"        # a label\n"
"        label = Gtk.Label()\n"
"        label.set_text(\"Title\")\n"
"\n"
"        # a grid to allocate the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.set_column_spacing(10)\n"
"        grid.attach(label, 0, 0, 1, 1)\n"
"        grid.attach(switch, 1, 0, 1, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # Callback function. Since the signal is notify::active\n"
"    # we need the argument 'active'\n"
"    def activate_cb(self, button, active):\n"
"        # if the button (i.e. the switch) is active, set the title\n"
"        # of the window to \"Switch Example\"\n"
"        if button.get_active():\n"
"            self.set_title(\"Switch Example\")\n"
"        # else, set it to \"\" (empty string)\n"
"        else:\n"
"            self.set_title(\"\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/switch.py.page:37
msgid "Useful methods for a Switch widget"
msgstr "Switch 위젯에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/switch.py.page:38
msgid ""
"In line 17 the signal <code>\"notify::active\"</code> is connected to the "
"callback function <code>activate_cb()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"17번째 줄에서 <code>\"notify::active\"</code> 시그널은 <code><var>widget</"
"var>.connect(<var>signal</var>, <var>callback function</var>)</code> 함수로  "
"<code>activate_cb()</code> 콜백 함수에 연결했습니다. 더 자세한 설명은 <link "
"xref=\"signals-callbacks.py\"/>를 참조하십시오."

#. (itstool) path: item/p
#: C/switch.py.page:45
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkSwitch.html"
"\">GtkSwitch</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkSwitch.html"
"\">GtkSwitch</link>"

#. (itstool) path: info/title
#: C/switch.vala.page:8
msgctxt "text"
msgid "Switch (Vala)"
msgstr "Switch (Vala)"

#. (itstool) path: page/p
#: C/switch.vala.page:29
msgid "This Switch toggles the title."
msgstr "이 스위치는 제목을 바꿉니다."

#. (itstool) path: page/code
#: C/switch.vala.page:31
#, no-wrap
msgid ""
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Switch Example\");\n"
"\n"
"\t\tthis.set_default_size (300, 100);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tvar label = new Gtk.Label (\"Title\");\n"
"\t\tvar switcher = new Gtk.Switch ();\n"
"\n"
"\t\tswitcher.set_active (true);\n"
"\n"
"\t\tswitcher.notify[\"active\"].connect (switcher_cb);\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.set_column_spacing (10);\n"
"\t\tgrid.attach (label, 0, 0, 1, 1);\n"
"\t\tgrid.attach (switcher, 1, 0, 1, 1);\n"
"\n"
"\t\tthis.add (grid);\n"
"\t}\n"
"\n"
"\tvoid switcher_cb (Object switcher, ParamSpec pspec) {\n"
"\t\tif ((switcher as Gtk.Switch).get_active())\n"
"\t\t\tthis.set_title (\"Switch Example\");\n"
"\t\telse\n"
"\t\t\tthis.set_title (\"\");\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\n"
"\t\tvar window = new MyWindow (this);\n"
"\t\twindow.show_all (); //show all the things\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.checkbutton\");\n"
"\t}\n"
"}\n"
"\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Switch Example\");\n"
"\n"
"\t\tthis.set_default_size (300, 100);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tvar label = new Gtk.Label (\"Title\");\n"
"\t\tvar switcher = new Gtk.Switch ();\n"
"\n"
"\t\tswitcher.set_active (true);\n"
"\n"
"\t\tswitcher.notify[\"active\"].connect (switcher_cb);\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.set_column_spacing (10);\n"
"\t\tgrid.attach (label, 0, 0, 1, 1);\n"
"\t\tgrid.attach (switcher, 1, 0, 1, 1);\n"
"\n"
"\t\tthis.add (grid);\n"
"\t}\n"
"\n"
"\tvoid switcher_cb (Object switcher, ParamSpec pspec) {\n"
"\t\tif ((switcher as Gtk.Switch).get_active())\n"
"\t\t\tthis.set_title (\"Switch Example\");\n"
"\t\telse\n"
"\t\t\tthis.set_title (\"\");\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\n"
"\t\tvar window = new MyWindow (this);\n"
"\t\twindow.show_all (); //show all the things\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.checkbutton\");\n"
"\t}\n"
"}\n"
"\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/switch.vala.page:36
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Switch.html\">Gtk.Switch</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Switch.html\">Gtk.Switch</"
"link>"

#. (itstool) path: info/title
#: C/textview.c.page:8
msgctxt "text"
msgid "TextView (C)"
msgstr "TextView (C)"

#. (itstool) path: info/desc
#: C/textview.c.page:18 C/textview.vala.page:18
msgid "Widget which displays a GtkTextBuffer"
msgstr "GtkTextBuffer를 나타내는 위젯"

#. (itstool) path: page/title
#: C/textview.c.page:21 C/textview.vala.page:21
msgid "TextView widget"
msgstr "TextView 위젯"

#. (itstool) path: note/p
#: C/textview.c.page:22 C/textview.py.page:33 C/textview.vala.page:22
msgid "If we press \"enter\", we have a new line."
msgstr "\"enter\" 키를 누르면 줄이 바뀝니다."

#. (itstool) path: note/p
#: C/textview.c.page:23 C/textview.vala.page:23
msgid ""
"If we press \"enter\" more times then there are lines in the default sized "
"window, then a vertical scrollbar appears."
msgstr ""
"\"enter\" 키를 더 누르면 기본 크기 창 안에 줄이 더 생기며, 창 크기를 넘으면"
"서 수직 스크롤 표시줄이 나타납니다."

#. (itstool) path: note/p
#: C/textview.c.page:24 C/textview.vala.page:24
msgid ""
"If we write a long sentence, the text will wrap breaking lines between words."
msgstr "긴 문장을 적어넣으면 문장에 있는 단어 사이에서 줄바꿈이 일어납니다."

#. (itstool) path: note/p
#: C/textview.c.page:25
msgid ""
"If we have a loooooooooooooooooooooooooooooooooooong (that was long) word, "
"a* horizontal scrollbar will appear."
msgstr ""
"기이이이이이이이이이이이이이이이이이이인 단어가 있다면(길었다면), 수평 스크"
"롤 표시줄이 나타납니다."

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/textview.c.page:27 C/textview.py.page:39 C/textview.vala.page:27
msgctxt "_"
msgid ""
"external ref='media/textview.png' md5='049e859ed1af2d7c93d8cb5cfd9f7792'"
msgstr ""

#. (itstool) path: page/p
#: C/textview.c.page:28 C/textview.vala.page:28
msgid "This is an example of Gtk.TextView"
msgstr "Gtk.TextView 예제입니다"

#. (itstool) path: page/code
#: C/textview.c.page:30
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Declare variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *text_view;\n"
"  GtkWidget *scrolled_window;\n"
"\n"
"  GtkTextBuffer *buffer;\n"
"\n"
"\n"
"  /* Create a window with a title, and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"TextView Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 220, 200);\n"
"\n"
"\n"
"  /* The text buffer represents the text being edited */\n"
"  buffer = gtk_text_buffer_new (NULL);\n"
"  \n"
"\n"
"  /* Text view is a widget in which can display the text buffer. \n"
"   * The line wrapping is set to break lines in between words.\n"
"   */\n"
"  text_view = gtk_text_view_new_with_buffer (buffer);\n"
"  gtk_text_view_set_wrap_mode (GTK_TEXT_VIEW (text_view), GTK_WRAP_WORD); \n"
"\n"
"\n"
"  /* Create the scrolled window. Usually NULL is passed for both parameters so \n"
"   * that it creates the horizontal/vertical adjustments automatically. Setting \n"
"   * the scrollbar policy to automatic allows the scrollbars to only show up \n"
"   * when needed. \n"
"   */\n"
"  scrolled_window = gtk_scrolled_window_new (NULL, NULL);\n"
"  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window), \n"
"                                  GTK_POLICY_AUTOMATIC, \n"
"                                  GTK_POLICY_AUTOMATIC); \n"
"  /* The function directly below is used to add children to the scrolled window \n"
"   * with scrolling capabilities (e.g text_view), otherwise, \n"
"   * gtk_scrolled_window_add_with_viewport() would have been used\n"
"   */\n"
"  gtk_container_add (GTK_CONTAINER (scrolled_window), \n"
"                                         text_view);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (scrolled_window), 5);\n"
" \n"
"  \n"
"  gtk_container_add (GTK_CONTAINER (window), scrolled_window);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Declare variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *text_view;\n"
"  GtkWidget *scrolled_window;\n"
"\n"
"  GtkTextBuffer *buffer;\n"
"\n"
"\n"
"  /* Create a window with a title, and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"TextView Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 220, 200);\n"
"\n"
"\n"
"  /* The text buffer represents the text being edited */\n"
"  buffer = gtk_text_buffer_new (NULL);\n"
"  \n"
"\n"
"  /* Text view is a widget in which can display the text buffer. \n"
"   * The line wrapping is set to break lines in between words.\n"
"   */\n"
"  text_view = gtk_text_view_new_with_buffer (buffer);\n"
"  gtk_text_view_set_wrap_mode (GTK_TEXT_VIEW (text_view), GTK_WRAP_WORD); \n"
"\n"
"\n"
"  /* Create the scrolled window. Usually NULL is passed for both parameters so \n"
"   * that it creates the horizontal/vertical adjustments automatically. Setting \n"
"   * the scrollbar policy to automatic allows the scrollbars to only show up \n"
"   * when needed. \n"
"   */\n"
"  scrolled_window = gtk_scrolled_window_new (NULL, NULL);\n"
"  gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window), \n"
"                                  GTK_POLICY_AUTOMATIC, \n"
"                                  GTK_POLICY_AUTOMATIC); \n"
"  /* The function directly below is used to add children to the scrolled window \n"
"   * with scrolling capabilities (e.g text_view), otherwise, \n"
"   * gtk_scrolled_window_add_with_viewport() would have been used\n"
"   */\n"
"  gtk_container_add (GTK_CONTAINER (scrolled_window), \n"
"                                         text_view);\n"
"  gtk_container_set_border_width (GTK_CONTAINER (scrolled_window), 5);\n"
" \n"
"  \n"
"  gtk_container_add (GTK_CONTAINER (window), scrolled_window);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/textview.c.page:41
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkContainer.html"
"\">GtkContainer</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkContainer.html"
"\">GtkContainer</link>"

#. (itstool) path: info/title
#: C/textview.js.page:8
msgctxt "text"
msgid "TextView (JavaScript)"
msgstr "TextView (JavaScript)"

#. (itstool) path: info/desc
#: C/textview.js.page:22
msgid "A multiline text editor"
msgstr "다중 행 텍스트 편집기"

#. (itstool) path: page/title
#: C/textview.js.page:25 C/textview.py.page:30
msgid "TextView"
msgstr "TextView"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/textview.js.page:26
msgctxt "_"
msgid ""
"external ref='media/textviewpenguinchat.png' "
"md5='0dd6f6aa44aaeab7901bd90162ed4c9a'"
msgstr ""

#. (itstool) path: page/p
#: C/textview.js.page:27
msgid ""
"A TextView is really (or at least usually) a nested set of three objects."
msgstr ""
"TextView는 정말(아니면 최소한 보통) 세 객체의 모음으로 이루어져있습니다."

#. (itstool) path: item/p
#: C/textview.js.page:29
msgid ""
"At the bottom there is a <link href=\"http://www.roojs.org/seed/gir-1.2-"
"gtk-3.0/gjs/Gtk.TextBuffer.html\">TextBuffer</link>. This holds the text "
"itself."
msgstr ""
"하단에는 <link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"TextBuffer.html\">TextBuffer</link>가 있습니다. TextBuffer는 텍스트를 저장해"
"둡니다."

#. (itstool) path: item/p
#: C/textview.js.page:30
msgid ""
"In the middle there is the <link href=\"http://www.roojs.org/seed/gir-1.2-"
"gtk-3.0/gjs/Gtk.TextView.html\">TextView</link>, which is a widget that lets "
"you see and edit the text in the buffer. It automatically resizes itself "
"depending on how much text there is."
msgstr ""
"가운데에는 <link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"TextView.html\">TextView</link>가 있는데 버퍼의 텍스트를 보고 편집할 수 있게 "
"하는 위젯입니다. 텍스트가 얼마나 있느냐에 따라 자동으로 크기 조절 합니다."

#. (itstool) path: item/p
#: C/textview.js.page:31
msgid ""
"Since the automatic resizing can make a TextView unwieldy, you normally "
"place it inside of a ScrolledWindow. Despite the name, it's not an actual "
"window in terms of having a title bar and an X button; it's a widget you put "
"on the application you're making, which acts like a window onto a more "
"manageable chunk of a TextView. If the text in the buffer is too big to fit, "
"scrollbars will appear."
msgstr ""
"자동으로 크기 조절을 해서 TextView를 이상하게 보이지 않게 할 수 있으므로, 보"
"통 ScrolledWindow의 안에 둡니다. 이름이 있는데도 불구, 제목 표시줄과 X 단추"
"가 있는 실제 창이 아닙니다. 더 관리하기 쉬운 TextView에서 창처럼 동작하며, 여"
"러분이 만들려는 프로그램에 넣을 수 있는 위젯입니다. 버퍼의 텍스트가 공간을 맞"
"추기에 너무 많다면, 스크롤 표시줄이 나타납니다."

#. (itstool) path: page/p
#: C/textview.js.page:33
msgid ""
"If you want to change what text is displayed in the TextView, you act on the "
"TextBuffer, since it's what actually holds the text. The same goes for if "
"you want to see what text someone typed in. This sample application lets you "
"talk to a (make-believe) penguin, and checks the TextBuffer to see if you "
"typed the word \"fish\" anywhere in it."
msgstr ""
"TextView에 나타난 텍스트를 바꾸려면 TextBuffer가 실제로 텍스트 내용을 가지고 "
"있으니 TextBuffer에서 처리하십시오. 누가 어떤 텍스트를 입력하는지 여러분이 보"
"려고 할 떄도 동일합니다. 여기 예제 프로그램에서는 펭귄으로 가장한 누군가와 대"
"화하고, \"fish\" 단어가 어딘가에 있는지 TextBuffer를 확인합니다."

#. (itstool) path: note/p
#: C/textview.js.page:34
msgid ""
"Real-life penguin populations are declining fast, because climate change is "
"melting the ice that they live on and killing the fish that they eat. If "
"you'd like to play a (somewhat silly) GNOME game based on this premise, take "
"a look at <link href=\"http://pingus.seul.org/\">Pingus</link>."
msgstr ""
"실제로 수많은 펭귄의 수가 빠르게 줄어가고 있는데, 기후가 바뀌어 펭귄이 살아"
"갈 터전의 빙하가 녹고 펭귄이 먹는 물고기가 줄어가기 때문입니다. 이 전제를 기"
"반으로 만든 (약간은 바보 같을지도 모르는) 그놈 게임을 즐겨보고 싶으시다면 "
"<link href=\"http://pingus.seul.org/\">핑구스</link>를 찾아보십시오."

#. (itstool) path: section/code
#: C/textview.js.page:50
#, no-wrap
msgid ""
"\n"
"const TextViewExample = new Lang.Class ({\n"
"    Name: 'TextView Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jstextview' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const TextViewExample = new Lang.Class ({\n"
"    Name: 'TextView Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jstextview' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/textview.js.page:74
msgid ""
"All the code for this sample goes in the TextViewExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.Application.html\">Gtk.Application</link> for our widgets and window to "
"go in."
msgstr ""
"이 예제의 모든 코드는 TextViewExample 클래스에 들어갑니다. 위 코드는 위젯과 "
"창이 들어가는 <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"Application.html\">Gtk.Application</link>를 만듭니다."

#. (itstool) path: section/code
#: C/textview.js.page:75
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Talk to a Penguin\",\n"
"            default_height: 400,\n"
"            default_width: 440,\n"
"            border_width: 20 });\n"
msgstr ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Talk to a Penguin\",\n"
"            default_height: 400,\n"
"            default_width: 440,\n"
"            border_width: 20 });\n"

#. (itstool) path: section/title
#: C/textview.js.page:92
msgid "Creating the TextView"
msgstr "TextView 만들기"

#. (itstool) path: section/code
#: C/textview.js.page:93
#, no-wrap
msgid ""
"\n"
"        // Create a label for the penguin to talk to you\n"
"        this._penguin = new Gtk.Label ({\n"
"            height_request: 180,\n"
"            width_request: 400,\n"
"            label: \"Squaaaak?\",\n"
"            wrap: true });\n"
msgstr ""
"\n"
"        // Create a label for the penguin to talk to you\n"
"        this._penguin = new Gtk.Label ({\n"
"            height_request: 180,\n"
"            width_request: 400,\n"
"            label: \"Squaaaak?\",\n"
"            wrap: true });\n"

#. (itstool) path: section/p
#: C/textview.js.page:102
msgid ""
"Our first step in this example is to create the <link xref=\"label.js"
"\">Label</link> that the penguin will use to talk to you. We set the text in "
"it to wrap by setting its wrap property to true, but we'll use a different "
"method on the TextView itself that allows for more fine-grained control."
msgstr ""
"이 예제의 첫단계에서는 펭귄이 여러분에게 무언가 할 말을 넣을 때 쓸 <link "
"xref=\"label.js\">Label</link>을 만듭니다. 줄바꿈 속성을 true로 설정하여 텍스"
"트 줄을 알아서 바꾸게 한 채로 텍스트를 설정하겠지만, TextView 자체에서 더 세"
"밀한 설정이 가능하기에 다른 방식으로 해보겠습니다."

#. (itstool) path: section/code
#: C/textview.js.page:104
#, no-wrap
msgid ""
"\n"
"        // Create a textview for you to talk to the penguin\n"
"        this.buffer = new Gtk.TextBuffer();\n"
"        this._textView = new Gtk.TextView ({\n"
"            buffer: this.buffer,\n"
"            editable: true,\n"
"            wrap_mode: Gtk.WrapMode.WORD });\n"
msgstr ""
"\n"
"        // Create a textview for you to talk to the penguin\n"
"        this.buffer = new Gtk.TextBuffer();\n"
"        this._textView = new Gtk.TextView ({\n"
"            buffer: this.buffer,\n"
"            editable: true,\n"
"            wrap_mode: Gtk.WrapMode.WORD });\n"

#. (itstool) path: section/p
#: C/textview.js.page:113
msgid ""
"Our first step is to create a TextBuffer to put the words into. After that "
"we create the TextView, and tell it to use the TextBuffer we created as its "
"buffer. We also set it to be editable, since we want to be able to type new "
"things in."
msgstr ""
"첫 단계로 내용을 넣을 TextButter를 만듭니다. 그 다음 TextView를 만들고, 앞서 "
"만든 TextButter를 버퍼로 활용하라고 지시하겠습니다. 또한 새로운 내용을 입력"
"할 수 있게 할 목적으로 편집 가능하게 설정하겠습니다."

#. (itstool) path: section/p
#: C/textview.js.page:114
msgid ""
"The wrap_mode property lets you select from four different <link href="
"\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.WrapMode.html"
"\">WrapModes</link>. Gtk.WrapMode.CHAR, for instance, starts wrapping around "
"in the middle of a word if you keep typing when it gets to the edge. Most "
"people are probably used to Gtk.WrapMode.WORD, which will automatically put "
"the word you're typing on the next line if it gets to be too long."
msgstr ""
"wrap_mode 속성은 네가지 각각의 <link href=\"http://www.roojs.org/seed/"
"gir-1.2-gtk-3.0/gjs/Gtk.WrapMode.html\">WrapModes</link> 중 하나를 선택하게 "
"합니다. 예로, Gtk.WrapMode.CHAR는 페이지 모서리에 줄 끝이 도달하면 단어 중간"
"을 잘라 줄을 바꿉니다. 대부분 사람은 줄이 너무 길면 단어 단위로 자동으로 줄"
"을 바꿔주는 Gtk.WrapMode.WORD 옵션을 사용할지도 모릅니다."

#. (itstool) path: section/code
#: C/textview.js.page:116
#, no-wrap
msgid ""
"\n"
"        // Create a \"scrolled window\" to put your textview in so it will scroll\n"
"        this._scrolled = new Gtk.ScrolledWindow ({\n"
"            hscrollbar_policy: Gtk.PolicyType.AUTOMATIC,\n"
"            vscrollbar_policy: Gtk.PolicyType.AUTOMATIC,\n"
"            shadow_type: Gtk.ShadowType.ETCHED_IN,\n"
"            height_request: 180,\n"
"            width_request: 400, });\n"
"\n"
"        // Put the textview into the scrolled window\n"
"        this._scrolled.add_with_viewport (this._textView);\n"
msgstr ""
"\n"
"        // Create a \"scrolled window\" to put your textview in so it will scroll\n"
"        this._scrolled = new Gtk.ScrolledWindow ({\n"
"            hscrollbar_policy: Gtk.PolicyType.AUTOMATIC,\n"
"            vscrollbar_policy: Gtk.PolicyType.AUTOMATIC,\n"
"            shadow_type: Gtk.ShadowType.ETCHED_IN,\n"
"            height_request: 180,\n"
"            width_request: 400, });\n"
"\n"
"        // Put the textview into the scrolled window\n"
"        this._scrolled.add_with_viewport (this._textView);\n"

#. (itstool) path: section/p
#: C/textview.js.page:128
msgid ""
"Here we create a ScrolledWindow, and set it to automatically scroll if it "
"gets to be too big horizontally or vertically. We also give it a nice-"
"looking ETCHED_IN border. After that, we put our TextView inside, and tell "
"the ScrolledWindow to give us a viewport onto it."
msgstr ""
"ScrolledWindow를 만들고 수직 수평 방향으로 너무 크면 자동으로 스크롤하게 설정"
"하겠습니다. 또한 멋들어지게 보이도록 잘 다듬은 테두리를 설정하겠습니다. 그 다"
"음, TextView에 넣고 ScrolledWindow에 뷰포트를 제공하라고 지시하겠습니다."

#. (itstool) path: section/code
#: C/textview.js.page:134
#, no-wrap
msgid ""
"\n"
"        // Create a grid to organize them in\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Put the label and textview in the grid one on top of the other\n"
"        this._grid.attach (this._penguin, 0, 0, 1, 1);\n"
"        this._grid.attach (this._scrolled, 0, 1, 1, 1);\n"
msgstr ""
"\n"
"        // Create a grid to organize them in\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Put the label and textview in the grid one on top of the other\n"
"        this._grid.attach (this._penguin, 0, 0, 1, 1);\n"
"        this._grid.attach (this._scrolled, 0, 1, 1, 1);\n"

#. (itstool) path: section/p
#: C/textview.js.page:144
msgid ""
"The first <link xref=\"grid.js\">Grid</link> we create only has the Label "
"and the ScrolledWindow inside it."
msgstr ""
"처음 <link xref=\"grid.js\">Grid</link> 부분에서 Label과 ScrolledWindow를 만"
"들어넣겠습니다."

#. (itstool) path: section/code
#: C/textview.js.page:146
#, no-wrap
msgid ""
"\n"
"        // Create a button to send your message to the penguin\n"
"        this._send = new Gtk.Button ({\n"
"            halign: Gtk.Align.END,\n"
"            margin_top: 20,\n"
"            label: \"Send\" });\n"
"        this._send.connect ('clicked', Lang.bind (this, this._chat));\n"
"\n"
"        // Create a grid that will have the other grid on top and the button on bottom\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Add the other grid and the button to the main grid\n"
"        this._mainGrid.attach (this._grid, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._send, 0, 1, 1, 1);\n"
msgstr ""
"\n"
"        // Create a button to send your message to the penguin\n"
"        this._send = new Gtk.Button ({\n"
"            halign: Gtk.Align.END,\n"
"            margin_top: 20,\n"
"            label: \"Send\" });\n"
"        this._send.connect ('clicked', Lang.bind (this, this._chat));\n"
"\n"
"        // Create a grid that will have the other grid on top and the button on bottom\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Add the other grid and the button to the main grid\n"
"        this._mainGrid.attach (this._grid, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._send, 0, 1, 1, 1);\n"

#. (itstool) path: section/p
#: C/textview.js.page:163
msgid ""
"We create a <link xref=\"button.js\">Button</link> to send your message to "
"the penguin, and a new Grid that has the other one on top and the Button on "
"the bottom. The Button has a margin on top, so that it isn't squished up "
"against the ScrolledWindow."
msgstr ""
"펭귄에게 메시지를 보낼 <link xref=\"button.js\">Button</link>를 만들고, 상단"
"에는 다른 새 Grid를 하단에는 Button을 넣겠습니다. 이 Button에는 상단에 여백"
"을 주어 ScrolledWindow와 찰싹 붙어있지 않게 하겠습니다."

#. (itstool) path: section/code
#: C/textview.js.page:165
#, no-wrap
msgid ""
"\n"
"        // Attach the main grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""
"\n"
"        // Attach the main grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"

#. (itstool) path: section/p
#: C/textview.js.page:174
msgid ""
"Finally, we attach the main Grid to the window, then we tell the window and "
"everything inside it to become visible when the application is run."
msgstr ""
"마지막으로 창에 메인 Grid를 붙이고, 프로그램을 실행할 때 창과 창 안에 있는 모"
"든 요소를 나타내게 하겠습니다."

#. (itstool) path: section/title
#: C/textview.js.page:179
msgid "Function which handles the penguin's response"
msgstr "펭귄의 응답을 처리하는 함수"

#. (itstool) path: section/code
#: C/textview.js.page:180
#, no-wrap
msgid ""
"\n"
"    _chat: function () {\n"
"\n"
"        // Create a random number to determine what the penguin says\n"
"        this.number = Math.floor ((Math.random() * 3) + 1);\n"
"\n"
"        // Did you actually say anything?\n"
"        if (this.buffer.text) {\n"
"\n"
"            // Did you mention fish?\n"
"            if (this.buffer.text.match (/fish/gi)) {\n"
"\n"
"                // Have the penguin squaak about fish\n"
"                if (this.number == 1)\n"
"                    this._penguin.set_label (\"FISH!\");\n"
"\n"
"                else if (this.number == 2)\n"
"                    this._penguin.set_label (\"Fish fish fish fish. Fish!\");\n"
"\n"
"                else\n"
"                    this._penguin.set_label (\"Fish? Fish fish fish. Fish fish. FISH!\");\n"
"\n"
"            }\n"
"\n"
"            // I guess you didn't mention fish\n"
"            else {\n"
"\n"
"                // Have the penguin talk about penguinny stuff\n"
"                if (this.number == 1)\n"
"                    this._penguin.set_label (\"SQUAAK!\");\n"
"\n"
"                else if (this.number == 2)\n"
"                    this._penguin.set_label (\"Ork ork ork ork squaak. Squaak squaak! *waves flippers*\");\n"
"\n"
"                else\n"
"                    this._penguin.set_label (\"Ork ork ork ork ork?\");\n"
"\n"
"            }\n"
"\n"
"        }\n"
"\n"
"        // Clear the buffer\n"
"        this.buffer.text = \"\";\n"
"\n"
"        // Give focus back to the textview so you don't have to click it again\n"
"        this._textView.has_focus = true;\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _chat: function () {\n"
"\n"
"        // Create a random number to determine what the penguin says\n"
"        this.number = Math.floor ((Math.random() * 3) + 1);\n"
"\n"
"        // Did you actually say anything?\n"
"        if (this.buffer.text) {\n"
"\n"
"            // Did you mention fish?\n"
"            if (this.buffer.text.match (/fish/gi)) {\n"
"\n"
"                // Have the penguin squaak about fish\n"
"                if (this.number == 1)\n"
"                    this._penguin.set_label (\"FISH!\");\n"
"\n"
"                else if (this.number == 2)\n"
"                    this._penguin.set_label (\"Fish fish fish fish. Fish!\");\n"
"\n"
"                else\n"
"                    this._penguin.set_label (\"Fish? Fish fish fish. Fish fish. FISH!\");\n"
"\n"
"            }\n"
"\n"
"            // I guess you didn't mention fish\n"
"            else {\n"
"\n"
"                // Have the penguin talk about penguinny stuff\n"
"                if (this.number == 1)\n"
"                    this._penguin.set_label (\"SQUAAK!\");\n"
"\n"
"                else if (this.number == 2)\n"
"                    this._penguin.set_label (\"Ork ork ork ork squaak. Squaak squaak! *waves flippers*\");\n"
"\n"
"                else\n"
"                    this._penguin.set_label (\"Ork ork ork ork ork?\");\n"
"\n"
"            }\n"
"\n"
"        }\n"
"\n"
"        // Clear the buffer\n"
"        this.buffer.text = \"\";\n"
"\n"
"        // Give focus back to the textview so you don't have to click it again\n"
"        this._textView.has_focus = true;\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/textview.js.page:231
msgid ""
"Here we use some basic JavaScript functions to have the penguins say "
"something random. Penguins like fish, though, so if you mention fish we want "
"the penguin to respond to that. To do that, we use the JavaScript String "
"object's match method on <file>this.buffer.text</file>, which returns the "
"contents of our TextBuffer."
msgstr ""
"여기에 펭귄이 아무렇게나 말하는 JavaScript 기본 함수를 사용합니다. 펭귄은 물"
"고기를 좋아하니, 물고기를 언급하면 펭귄이 대답하게 하겠습니다. 따라서, "
"TextBuffer에 내용을 반환하는 JavaScript 문자열 객체의 <file>this.buffer."
"text</file>에 있는 match 메서드를 사용하겠습니다."

#. (itstool) path: section/p
#: C/textview.js.page:232
msgid ""
"Since we want to clear out the TextBuffer after each time you click Send, we "
"set <file>this.buffer.text</file> to contain an empty string afterwards. "
"Then we return focus to our TextView, so that you can keep typing without "
"having to click on it beforehand."
msgstr ""
"보내기를 누를 떄마다 TextBuffer를 지울테니, 과정이 끝나면 <file>this.buffer."
"text</file> 값을 빈 문자열로 넣겠습니다. 그 다음 TextView에 포커스를 반환하"
"여 입력하기 전에 굳이 누르지 않아도 계속 입력할 수 있게 하겠습니다."

#. (itstool) path: section/code
#: C/textview.js.page:234
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new TextViewExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Run the application\n"
"let app = new TextViewExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/textview.js.page:239
msgid ""
"Finally, we create a new instance of the finished TextViewExample class, and "
"set the application running."
msgstr ""
"마지막으로 마무리한 TextViewExample 클래스의 새 인스턴스를 만들고 프로그램을 "
"실행하도록 설정하겠습니다."

#. (itstool) path: section/code
#: C/textview.js.page:244
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const TextViewExample = new Lang.Class ({\n"
"    Name: 'TextView Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jstextview' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Talk to a Penguin\",\n"
"            default_height: 400,\n"
"            default_width: 440,\n"
"            border_width: 20 });\n"
"\n"
"        // Create a label for the penguin to talk to you\n"
"        this._penguin = new Gtk.Label ({\n"
"            height_request: 180,\n"
"            width_request: 400,\n"
"            label: \"Squaaaak?\",\n"
"            wrap: true });\n"
"\n"
"        // Create a textview for you to talk to the penguin\n"
"        this.buffer = new Gtk.TextBuffer();\n"
"        this._textView = new Gtk.TextView ({\n"
"            buffer: this.buffer,\n"
"            editable: true,\n"
"            wrap_mode: Gtk.WrapMode.WORD });\n"
"\n"
"        // Create a \"scrolled window\" to put your textview in so it will scroll\n"
"        this._scrolled = new Gtk.ScrolledWindow ({\n"
"            hscrollbar_policy: Gtk.PolicyType.AUTOMATIC,\n"
"            vscrollbar_policy: Gtk.PolicyType.AUTOMATIC,\n"
"            shadow_type: Gtk.ShadowType.ETCHED_IN,\n"
"            height_request: 180,\n"
"            width_request: 400, });\n"
"\n"
"        // Put the textview into the scrolled window\n"
"        this._scrolled.add_with_viewport (this._textView);\n"
"\n"
"        // Create a grid to organize them in\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Put the label and textview in the grid one on top of the other\n"
"        this._grid.attach (this._penguin, 0, 0, 1, 1);\n"
"        this._grid.attach (this._scrolled, 0, 1, 1, 1);\n"
"\n"
"        // Create a button to send your message to the penguin\n"
"        this._send = new Gtk.Button ({\n"
"            halign: Gtk.Align.END,\n"
"            margin_top: 20,\n"
"            label: \"Send\" });\n"
"        this._send.connect ('clicked', Lang.bind (this, this._chat));\n"
"\n"
"        // Create a grid that will have the other grid on top and the button on bottom\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Add the other grid and the button to the main grid\n"
"        this._mainGrid.attach (this._grid, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._send, 0, 1, 1, 1);\n"
"\n"
"        // Attach the main grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _chat: function () {\n"
"\n"
"        // Create a random number to determine what the penguin says\n"
"        this.number = Math.floor ((Math.random() * 3) + 1);\n"
"\n"
"        // Did you actually say anything?\n"
"        if (this.buffer.text) {\n"
"\n"
"            // Did you mention fish?\n"
"            if (this.buffer.text.match (/fish/gi)) {\n"
"\n"
"                // Have the penguin squaak about fish\n"
"                if (this.number == 1)\n"
"                    this._penguin.set_label (\"FISH!\");\n"
"\n"
"                else if (this.number == 2)\n"
"                    this._penguin.set_label (\"Fish fish fish fish. Fish!\");\n"
"\n"
"                else\n"
"                    this._penguin.set_label (\"Fish? Fish fish fish. Fish fish. FISH!\");\n"
"\n"
"            }\n"
"\n"
"            // I guess you didn't mention fish\n"
"            else {\n"
"\n"
"                // Have the penguin talk about penguinny stuff\n"
"                if (this.number == 1)\n"
"                    this._penguin.set_label (\"SQUAAK!\");\n"
"\n"
"                else if (this.number == 2)\n"
"                    this._penguin.set_label (\"Ork ork ork ork squaak. Squaak squaak! *waves flippers*\");\n"
"\n"
"                else\n"
"                    this._penguin.set_label (\"Ork ork ork ork ork?\");\n"
"\n"
"            }\n"
"\n"
"        }\n"
"\n"
"        // Clear the buffer\n"
"        this.buffer.text = \"\";\n"
"\n"
"        // Give focus back to the textview so you don't have to click it again\n"
"        this._textView.has_focus = true;\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new TextViewExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const TextViewExample = new Lang.Class ({\n"
"    Name: 'TextView Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.jstextview' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function () {\n"
"        this._window.present ();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow  ({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            title: \"Talk to a Penguin\",\n"
"            default_height: 400,\n"
"            default_width: 440,\n"
"            border_width: 20 });\n"
"\n"
"        // Create a label for the penguin to talk to you\n"
"        this._penguin = new Gtk.Label ({\n"
"            height_request: 180,\n"
"            width_request: 400,\n"
"            label: \"Squaaaak?\",\n"
"            wrap: true });\n"
"\n"
"        // Create a textview for you to talk to the penguin\n"
"        this.buffer = new Gtk.TextBuffer();\n"
"        this._textView = new Gtk.TextView ({\n"
"            buffer: this.buffer,\n"
"            editable: true,\n"
"            wrap_mode: Gtk.WrapMode.WORD });\n"
"\n"
"        // Create a \"scrolled window\" to put your textview in so it will scroll\n"
"        this._scrolled = new Gtk.ScrolledWindow ({\n"
"            hscrollbar_policy: Gtk.PolicyType.AUTOMATIC,\n"
"            vscrollbar_policy: Gtk.PolicyType.AUTOMATIC,\n"
"            shadow_type: Gtk.ShadowType.ETCHED_IN,\n"
"            height_request: 180,\n"
"            width_request: 400, });\n"
"\n"
"        // Put the textview into the scrolled window\n"
"        this._scrolled.add_with_viewport (this._textView);\n"
"\n"
"        // Create a grid to organize them in\n"
"        this._grid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Put the label and textview in the grid one on top of the other\n"
"        this._grid.attach (this._penguin, 0, 0, 1, 1);\n"
"        this._grid.attach (this._scrolled, 0, 1, 1, 1);\n"
"\n"
"        // Create a button to send your message to the penguin\n"
"        this._send = new Gtk.Button ({\n"
"            halign: Gtk.Align.END,\n"
"            margin_top: 20,\n"
"            label: \"Send\" });\n"
"        this._send.connect ('clicked', Lang.bind (this, this._chat));\n"
"\n"
"        // Create a grid that will have the other grid on top and the button on bottom\n"
"        this._mainGrid = new Gtk.Grid ({\n"
"            halign: Gtk.Align.CENTER,\n"
"            valign: Gtk.Align.CENTER });\n"
"\n"
"        // Add the other grid and the button to the main grid\n"
"        this._mainGrid.attach (this._grid, 0, 0, 1, 1);\n"
"        this._mainGrid.attach (this._send, 0, 1, 1, 1);\n"
"\n"
"        // Attach the main grid to the window\n"
"        this._window.add (this._mainGrid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _chat: function () {\n"
"\n"
"        // Create a random number to determine what the penguin says\n"
"        this.number = Math.floor ((Math.random() * 3) + 1);\n"
"\n"
"        // Did you actually say anything?\n"
"        if (this.buffer.text) {\n"
"\n"
"            // Did you mention fish?\n"
"            if (this.buffer.text.match (/fish/gi)) {\n"
"\n"
"                // Have the penguin squaak about fish\n"
"                if (this.number == 1)\n"
"                    this._penguin.set_label (\"FISH!\");\n"
"\n"
"                else if (this.number == 2)\n"
"                    this._penguin.set_label (\"Fish fish fish fish. Fish!\");\n"
"\n"
"                else\n"
"                    this._penguin.set_label (\"Fish? Fish fish fish. Fish fish. FISH!\");\n"
"\n"
"            }\n"
"\n"
"            // I guess you didn't mention fish\n"
"            else {\n"
"\n"
"                // Have the penguin talk about penguinny stuff\n"
"                if (this.number == 1)\n"
"                    this._penguin.set_label (\"SQUAAK!\");\n"
"\n"
"                else if (this.number == 2)\n"
"                    this._penguin.set_label (\"Ork ork ork ork squaak. Squaak squaak! *waves flippers*\");\n"
"\n"
"                else\n"
"                    this._penguin.set_label (\"Ork ork ork ork ork?\");\n"
"\n"
"            }\n"
"\n"
"        }\n"
"\n"
"        // Clear the buffer\n"
"        this.buffer.text = \"\";\n"
"\n"
"        // Give focus back to the textview so you don't have to click it again\n"
"        this._textView.has_focus = true;\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new TextViewExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/textview.js.page:256
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"ScrolledWindow.html\">Gtk.ScrolledWindow</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"ScrolledWindow.html\">Gtk.ScrolledWindow</link>"

#. (itstool) path: item/p
#: C/textview.js.page:257
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TextBuffer."
"html\">Gtk.TextBuffer</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TextBuffer."
"html\">Gtk.TextBuffer</link>"

#. (itstool) path: item/p
#: C/textview.js.page:258
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TextView.html"
"\">Gtk.TextView</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TextView.html"
"\">Gtk.TextView</link>"

#. (itstool) path: info/title
#: C/textview.py.page:8
msgctxt "text"
msgid "TextView (Python)"
msgstr "TextView (Python)"

#. (itstool) path: info/desc
#: C/textview.py.page:27
msgid "Widget that displays a GtkTextBuffer"
msgstr "GtkTextBuffer를 나타내는 위젯"

#. (itstool) path: note/p
#: C/textview.py.page:32
msgid "This is an example of Gtk.TextView."
msgstr "Gtk.TextView 예제입니다."

#. (itstool) path: note/p
#: C/textview.py.page:34
msgid ""
"But we can also have a new line if we write a long sentence (the text will "
"wrap breaking lines between words)."
msgstr ""
"그러나 긴 문장을 쓸 경우 줄을 바꿀 수 있습니다(문장을 단어 단위로 나누어 줄"
"을 바꿉니다)."

#. (itstool) path: note/p
#: C/textview.py.page:35
msgid "If we have a loooooooooooooooooooooooooooooooooooong"
msgstr "기이이이이이이이이이이이이이이이이이이인"

#. (itstool) path: note/p
#: C/textview.py.page:36
msgid "(that was long)"
msgstr "(길었다면)"

#. (itstool) path: note/p
#: C/textview.py.page:37
msgid "word, an horizontal scrollbar will appear."
msgstr "단어가 있다면, 수평 스크롤 표시줄이 나타납니다."

#. (itstool) path: section/code
#: C/textview.py.page:46
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"TextView Example\", application=app)\n"
"        self.set_default_size(300, 450)\n"
"\n"
"        # a scrollbar for the child widget (that is going to be the textview)\n"
"        scrolled_window = Gtk.ScrolledWindow()\n"
"        scrolled_window.set_border_width(5)\n"
"        # we scroll only if needed\n"
"        scrolled_window.set_policy(\n"
"            Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)\n"
"\n"
"        # a text buffer (stores text)\n"
"        buffer1 = Gtk.TextBuffer()\n"
"\n"
"        # a textview (displays the buffer)\n"
"        textview = Gtk.TextView(buffer=buffer1)\n"
"        # wrap the text, if needed, breaking lines in between words\n"
"        textview.set_wrap_mode(Gtk.WrapMode.WORD)\n"
"\n"
"        # textview is scrolled\n"
"        scrolled_window.add(textview)\n"
"\n"
"        self.add(scrolled_window)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"TextView Example\", application=app)\n"
"        self.set_default_size(300, 450)\n"
"\n"
"        # a scrollbar for the child widget (that is going to be the textview)\n"
"        scrolled_window = Gtk.ScrolledWindow()\n"
"        scrolled_window.set_border_width(5)\n"
"        # we scroll only if needed\n"
"        scrolled_window.set_policy(\n"
"            Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)\n"
"\n"
"        # a text buffer (stores text)\n"
"        buffer1 = Gtk.TextBuffer()\n"
"\n"
"        # a textview (displays the buffer)\n"
"        textview = Gtk.TextView(buffer=buffer1)\n"
"        # wrap the text, if needed, breaking lines in between words\n"
"        textview.set_wrap_mode(Gtk.WrapMode.WORD)\n"
"\n"
"        # textview is scrolled\n"
"        scrolled_window.add(textview)\n"
"\n"
"        self.add(scrolled_window)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/textview.py.page:50
msgid "Useful methods for a TextView widget"
msgstr "TextView 위젯에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/textview.py.page:51
msgid ""
"A <code>Gtk.TextView</code> displays the text stored in a <code>Gtk."
"TextBuffer</code>. However, most text manipulation is accomplished with "
"iterators, represented by a <code>Gtk.TextIter</code> - a position between "
"two characters in the text buffer. Iterators are not valid indefinitely; "
"whenever the buffer is modified in a way that affects the contents of the "
"buffer, all outstanding iterators become invalid. Because of this, iterators "
"can’t be used to preserve positions across buffer modifications. To preserve "
"a position, we use a <code>Gtk.TextMark</code>, that can be set visible with "
"<code>visible(True)</code>. A text buffer contains two built-in marks; an "
"\"insert\" mark (the position of the cursor) and the \"selection_bound\" "
"mark."
msgstr ""
"<code>Gtk.TextView</code>는 <code>Gtk.TextBuffer</code>에 저장한 텍스트를 나"
"타냅니다. 그러나, 대부분 텍스트 처리는 텍스트 버퍼의 두 문자간 위치 "
"<code>Gtk.TextIter</code>로 표현하는 반복자로 끝냅니다. 반복자는 항상 유효한 "
"존재는 아닙니다. 버퍼의 내용에 영향을 주어 버퍼의 내용이 바뀌면 이 부분을 알"
"고 있든 반복자는 무효화 처리됩니다. 이 때문에, 반복자는 버퍼를 수정할 때 위"
"치 정보를 보관할 목적으로 사용할 수 없습니다. 위치 정보를 어딘가에 보관할 때 "
"<code>visible(True)</code> 함수로 눈에 띄게 나타낼 수 있는 <code>Gtk."
"TextMark</code>를 사용합니다. 텍스트 버퍼에는 자체적으로 내장한 \"insert\" 마"
"크(커서 위치)와 \"selection_bound\"마크가 있습니다."

#. (itstool) path: section/p
#: C/textview.py.page:52
msgid "Methods for a TextView widget:"
msgstr "TextView 위젯의 메서드는 다음과 같습니다:"

#. (itstool) path: item/p
#: C/textview.py.page:54
msgid ""
"The TextView widget is by default editable. If you prefer otherwise, use "
"<code>set_editable(False)</code>. If the buffer has no editable text, it "
"might be a good idea to use <code>set_cursor_visible(False)</code> as well."
msgstr ""
"TextView 위젯은 기본적으로 편집할 수 있습니다. 편집할 수 없게 하려면  "
"<code>set_editable(False)</code> 함수를 사용하십시오 버퍼에 편집할 수 있는 텍"
"스트가 없다면, 마찬가지로 <code>set_cursor_visible(False)</code> 함수를 사용"
"하시는것이 좋습니다."

#. (itstool) path: item/p
#: C/textview.py.page:55
msgid ""
"The justification of the text is set with <code>set_justification(Gtk."
"Justification.JUSTIFICATION)</code> where <code>JUSTIFICATION</code> is one "
"of <code>LEFT, RIGHT, CENTER, FILL</code>."
msgstr ""
"텍스트 정렬은 <code>set_justification(Gtk.Justification.JUSTIFICATION)</"
"code> 함수로 설정합니다. 여기서 <code>JUSTIFICATION</code>은 <code>LEFT, "
"RIGHT, CENTER, FILL</code> 값 중 하나가 들어갑니다."

#. (itstool) path: item/p
#: C/textview.py.page:56
msgid ""
"The line wrapping of the text is set with <code>set_wrap_mode(Gtk.WrapMode."
"WRAP)</code> where <code>WRAP</code> is one of <code>NONE</code> (the text "
"area is made wider), <code>CHAR</code> (break lines anywhere the cursor can "
"appear), <code>WORD</code> (break lines between words), <code>WORD_CHAR</"
"code> (break lines between words, but if that is not enough between "
"characters)."
msgstr ""
"텍스트 줄 바꿈은 <code>set_wrap_mode(Gtk.WrapMode.WRAP)</code> 함수로 설정합"
"니다. 여기서 <code>WRAP</code> 값은 <code>NONE</code> (텍스트 영역이 더 넓어"
"짐), <code>CHAR</code> (커서가 나타날 수 있는 어디든 줄 바꿈), <code>WORD</"
"code> (단어 사이 줄 바꿈), <code>WORD_CHAR</code> (단어 사이에 줄을 바꾸지만 "
"문자를 더 넣을 여력이 안되면 문자 사이를 줄바꿈) 값 중 하나입니다."

#. (itstool) path: section/p
#: C/textview.py.page:58
msgid "Methods for a TextBuffer widget:"
msgstr "TextBuffer 위젯의 메서드:"

#. (itstool) path: item/p
#: C/textview.py.page:60
msgid ""
"<code>get_insert()</code> returns the <code>Gtk.TextMark</code> that "
"represents the cursor, that is the insertion point."
msgstr ""
"<code>get_insert()</code> 함수에서는 삽입 지점 커서를 나타내는 <code>Gtk."
"TextMark</code>를 반환합니다."

#. (itstool) path: item/p
#: C/textview.py.page:61
msgid ""
"<code>get_selection_bound()</code> returns the <code>Gtk.TextMark</code> "
"that represents the selection bound."
msgstr ""
"<code>get_selection_bound()</code> 함수는 선택 범위를 나타내는 <code>Gtk."
"TextMark</code>를 반환합니다."

#. (itstool) path: item/p
#: C/textview.py.page:62
msgid ""
"<code>set_text(\"some text\", length)</code> where <code>length</code> is a "
"positive integer or <code>-1</code>, sets the content of the buffer as the "
"first <code>length</code> characters of the <code>\"some text\"</code> text. "
"If <code>length</code> is omitted or <code>-1</code>, the text is inserted "
"completely. The content of the buffer, if there is any, is destroyed."
msgstr ""
"<code>length</code>에 양의 정수 또는 <code>-1</code>을 넣을 수 있는 "
"<code>set_text(\"some text\", length)</code> 함수는 <code>\"some text\"</"
"code> 텍스트를 처음 <code>length</code> 글자 만큼 버퍼에 내용을 넣습니다. "
"<code>length</code> 값을 생략하거나 <code>-1</code>로 두면, 텍스트를 전부 넣"
"습니다. 어떤 값이 들어가면 버퍼의 내용을 해체합니다."

#. (itstool) path: item/p
#: C/textview.py.page:63
msgid ""
"<code>insert(iter, \"some text\", length)</code> where <code>iter</code> is "
"a text iterator and <code>length</code> is a positive integer or <code>-1</"
"code>, inserts in the buffer at <code>iter</code> the first <code>length</"
"code> characters of the <code>\"some text\"</code> text. If <code>length</"
"code> is omitted or <code>-1</code>, the text is inserted completely."
msgstr ""
"<code>iter</code> 에 텍스트 반복자가 들어가고 <code>length</code>에 양의 정"
"수 또는 <code>-1</code>을 넣을 수 있는 <code>insert(iter, \"some text\", "
"length)</code> 함수에는 <code>\"some text\"</code> 텍스트 중 처음 "
"<code>length</code> 글자를 버퍼의 <code>iter</code> 위치에 삽입합니다. "
"<code>length</code> 값을 생략하거나 <code>-1</code>로 두면, 텍스트를 전부 넣"
"습니다."

#. (itstool) path: item/p
#: C/textview.py.page:64
msgid ""
"<code>insert_at_cursor(\"some text\", length)</code> does the same as "
"<code>insert(iter, \"some text\", length)</code>, with the current cursor "
"taken as <code>iter</code>."
msgstr ""
"<code>insert_at_cursor(\"some text\", length)</code> 함수는 "
"<code>insert(iter, \"some text\", length)</code> 함수와 동일한 동작을 취하지"
"만 현재 커서 위치를 <code>iter</code>로 취합니다."

#. (itstool) path: item/p
#: C/textview.py.page:65
msgid ""
"<code>create_mark(\"mark_name\", iter, left_gravity)</code> where "
"<code>iter</code> is a <code>Gtk.TextIter</code> and <code>left_gravity</"
"code> is a boolean, creates a <code>Gtk.TextMark</code> at the position of "
"<code>iter</code>. If <code>\"mark_name\"</code> is <code>None</code>, the "
"mark is anonymous; otherwise, the mark can be retrieved by name using "
"<code>get_mark()</code>. If a mark has left gravity, and text is inserted at "
"the mark’s current location, the mark will be moved to the left of the newly-"
"inserted text. If <code>left_gravity</code> is omitted, it defaults to "
"<code>False</code>."
msgstr ""
"<code>iter</code>는 <code>Gtk.TextIter</code>이고, <code>left_gravity</code> "
"값은 부울린 값인 <code>create_mark(\"mark_name\", iter, left_gravity)</code> "
"함수는 <code>Gtk.TextMark</code>를 <code>iter</code> 위치에 만듭니다. <code>"
"\"mark_name\"</code>을 <code>None</code>으로 설정하면, 익명으로 표시합니다. "
"그렇지 않으면 <code>get_mark()</code> 함수를 활용할 때 지정 이름으로 표시 항"
"목을 가져올 수 있습니다. 마크가 왼쪽 정렬 상태고 마크 현재 위치에 텍스트를 넣"
"으면, 마크는 새로 넣은 텍스트의 왼편으로 갑니다. <code>left_gravity</code> 매"
"개변수 값을 생략하면 기본값은 <code>False</code>로 들어갑니다."

#. (itstool) path: item/p
#: C/textview.py.page:67
msgid ""
"To specify that some text in the buffer should have specific formatting, you "
"must define a tag to hold that formatting information, and then apply that "
"tag to the region of text using <code>create_tag(\"tag name\", property)</"
"code> and <code>apply_tag(tag, start_iter, end_iter)</code> as in, for "
"instance:"
msgstr ""
"버퍼에 임의의 텍스트를 특정 형식으로 지정하려면, 형식 정보를 유지하는 태그를 "
"지정해야하며, 다음과 같이  <code>create_tag(\"tag name\", property)</code> 함"
"수와 <code>apply_tag(tag, start_iter, end_iter)</code> 함수로 태그를 텍스트 "
"영역에 적용해야합니다:"

#. (itstool) path: item/code
#: C/textview.py.page:68
#, no-wrap
msgid ""
"\n"
"tag = textbuffer.create_tag(\"orange_bg\", background=\"orange\")\n"
"textbuffer.apply_tag(tag, start_iter, end_iter)"
msgstr ""
"\n"
"tag = textbuffer.create_tag(\"orange_bg\", background=\"orange\")\n"
"textbuffer.apply_tag(tag, start_iter, end_iter)"

#. (itstool) path: item/p
#: C/textview.py.page:71
msgid "The following are some of the common styles applied to text:"
msgstr "다음은 텍스트에 적용하는 일반 모양새 일부입니다:"

#. (itstool) path: item/p
#: C/textview.py.page:73
msgid "Background colour (\"background\" property)"
msgstr "배경 색상(\"background\" 속성)"

#. (itstool) path: item/p
#: C/textview.py.page:74
msgid "Foreground colour (\"foreground\" property)"
msgstr "전경 색상(\"foreground\" 속성)"

#. (itstool) path: item/p
#: C/textview.py.page:75
msgid "Underline (\"underline\" property)"
msgstr "밑줄(\"underline\" 속성)"

#. (itstool) path: item/p
#: C/textview.py.page:76
msgid "Bold (\"weight\" property)"
msgstr "굵게(\"weight\" 속성)"

#. (itstool) path: item/p
#: C/textview.py.page:77
msgid "Italics (\"style\" property)"
msgstr "기울임(\"style\" 속성)"

#. (itstool) path: item/p
#: C/textview.py.page:78
msgid "Strikethrough (\"strikethrough\" property)"
msgstr "취소선(\"strikethrough\" 속성)"

#. (itstool) path: item/p
#: C/textview.py.page:79
msgid "Justification (\"justification\" property)"
msgstr "양쪽배분(\"justification\" 속성)"

#. (itstool) path: item/p
#: C/textview.py.page:80
msgid "Size (\"size\" and \"size-points\" properties)"
msgstr "크기(\"size\"와 \"size-points\" 속성)"

#. (itstool) path: item/p
#: C/textview.py.page:81
msgid "Text wrapping (\"wrap-mode\" property)"
msgstr "텍스트 줄바꿈(\"wrap-mode\" 속성)"

#. (itstool) path: item/p
#: C/textview.py.page:83
msgid ""
"You can also delete particular tags later using <code>remove_tag()</code> or "
"delete all tags in a given region by calling <code>remove_all_tags()</code>."
msgstr ""
"<code>remove_tag()</code> 함수로 태그 일부를 삭제하거나 "
"<code>remove_all_tags()</code> 함수를 호출하여 주어진 영역의 모든 태그를 삭제"
"할 수 있습니다."

#. (itstool) path: section/p
#: C/textview.py.page:85
msgid "Methods for a TextIter widget"
msgstr "TextIter 위젯 메서드"

#. (itstool) path: item/p
#: C/textview.py.page:87
msgid ""
"<code>forward_search(needle, flags, limit)</code> searches forward for "
"<code>needle</code>. The search will not continue past the <code>Gtk."
"TextIter</code> limit. The <code>flags</code> can be set to one of the "
"following, or any combination of it by concatenating them with the bitwise-"
"OR operator <code>|</code>: <code>0</code> (the match must be exact); "
"<code>Gtk.TextSearchFlags.VISIBLE_ONLY</code> (the match may have invisible "
"text interspersed in needle); <code>Gtk.TextSearchFlags.TEXT_ONLY</code> "
"(the match may have pixbufs or child widgets mixed inside the matched "
"range); <code>Gtk.TextSearchFlags.CASE_INSENSITIVE</code> (the text will be "
"matched regardless of what case it is in). The method returns a tuple "
"containing a <code>Gtk.TextIter</code> pointing to the start and to the "
"first character after the match; if no match is found, <code>None</code> is "
"returned."
msgstr ""
"<code>forward_search(needle, flags, limit)</code>는 <code>needle</code>을 앞"
"방향으로 검색합니다. <code>Gtk.TextIter</code>에서 지정한 한계값에 도달하면 "
"검색을 계속하지 않습니다. <code>flags</code> 는 <code>0</code>(결과 일치 내용"
"이 정확해야함), <code>Gtk.TextSearchFlags.VISIBLE_ONLY</code> (보이지 않는 글"
"자가 needle에 있을 수도 있음); <code>Gtk.TextSearchFlags.TEXT_ONLY</code> (일"
"치 범위에 있는 내용에 픽셀 버퍼 또는 하위 위젯의 조합으로 이루어짐); "
"<code>Gtk.TextSearchFlags.CASE_INSENSITIVE</code> (대소문자 관계 없이 일치하"
"면 됨)값 중 하나로 지정하거나 비트-OR 연산자 <code>|</code>로 지정할 수 있습"
"니다. 메서드에서는 시작 지점을 가리키는 <code>Gtk.TextIter</code>와 일치 결과"
"를 찾은 지점 다음의 첫번째 문자를 튜플 형태로 반환합니다. 만약 일치 결과가 없"
"으면 <code>None</code>을 반환합니다."

#. (itstool) path: item/p
#: C/textview.py.page:88
msgid ""
"<code>backward_search(needle, flags, limit)</code> does the same as "
"<code>forward_search()</code>, but moving backwards."
msgstr ""
"<code>backward_search(needle, flags, limit)</code> 함수는 "
"<code>forward_search()</code>와 동일하게 동작하지만 뒷 방향으로 검색합니다."

#. (itstool) path: item/p
#: C/textview.py.page:96
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTextView.html"
"\">GtkTextView</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTextView.html"
"\">GtkTextView</link>"

#. (itstool) path: item/p
#: C/textview.py.page:97
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTextBuffer.html"
"\">GtkTextBuffer</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTextBuffer.html"
"\">GtkTextBuffer</link>"

#. (itstool) path: item/p
#: C/textview.py.page:98
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTextTag.html"
"\">GtkTextTag</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTextTag.html"
"\">GtkTextTag</link>"

#. (itstool) path: info/title
#: C/textview.vala.page:8
msgctxt "text"
msgid "TextView (Vala)"
msgstr "TextView (Vala)"

#. (itstool) path: note/p
#: C/textview.vala.page:25
msgid ""
"If we have a loooooooooooooooooooooooooooooooooooong word, a horizontal "
"scrollbar will appear."
msgstr ""
"기이이이이이이이이이이이이이이이이이이인 단어가 있다면 수평 스크롤 표시줄이 "
"나타납니다."

#. (itstool) path: page/code
#: C/textview.vala.page:30
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\t/* Create the window of this application. */\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* This is the window. */\n"
"class MyWindow: Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"TextView Example\");\n"
"\t\tthis.set_default_size (220, 200);\n"
"\n"
"\t\tvar buffer = new Gtk.TextBuffer (null); //stores text to be displayed\n"
"\t\tvar textview = new Gtk.TextView.with_buffer (buffer); //displays TextBuffer\n"
"\t\ttextview.set_wrap_mode (Gtk.WrapMode.WORD); //sets line wrapping\n"
"\n"
"\t\tvar scrolled_window = new Gtk.ScrolledWindow (null, null);\n"
"\t\tscrolled_window.set_policy (Gtk.PolicyType.AUTOMATIC,\n"
"\t\t                            Gtk.PolicyType.AUTOMATIC);\n"
"\n"
"\t\tscrolled_window.add (textview);\n"
"\t\tscrolled_window.set_border_width (5);\n"
"\n"
"\t\tthis.add (scrolled_window);\n"
"\t}\n"
"}\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* This is the application. */\n"
"public class MyApplication : Gtk.Application {\n"
"\t/* Override the 'activate' signal of GLib.Application. */\n"
"\tprotected override void activate () {\n"
"\t\t/* Create the window of this application. */\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"}\n"
"\n"
"/* This is the window. */\n"
"class MyWindow: Gtk.ApplicationWindow {\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"TextView Example\");\n"
"\t\tthis.set_default_size (220, 200);\n"
"\n"
"\t\tvar buffer = new Gtk.TextBuffer (null); //stores text to be displayed\n"
"\t\tvar textview = new Gtk.TextView.with_buffer (buffer); //displays TextBuffer\n"
"\t\ttextview.set_wrap_mode (Gtk.WrapMode.WORD); //sets line wrapping\n"
"\n"
"\t\tvar scrolled_window = new Gtk.ScrolledWindow (null, null);\n"
"\t\tscrolled_window.set_policy (Gtk.PolicyType.AUTOMATIC,\n"
"\t\t                            Gtk.PolicyType.AUTOMATIC);\n"
"\n"
"\t\tscrolled_window.add (textview);\n"
"\t\tscrolled_window.set_border_width (5);\n"
"\n"
"\t\tthis.add (scrolled_window);\n"
"\t}\n"
"}\n"
"/* main creates and runs the application. */\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/textview.vala.page:35
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.TextBuffer.html\">Gtk."
"TextBuffer</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.TextBuffer.html\">Gtk."
"TextBuffer</link>"

#. (itstool) path: item/p
#: C/textview.vala.page:36
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.TextView.html\">Gtk."
"TextView</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.TextView.html\">Gtk."
"TextView</link>"

#. (itstool) path: item/p
#: C/textview.vala.page:38
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.WrapMode.html\">Gtk."
"WrapMode</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.WrapMode.html\">Gtk."
"WrapMode</link>"

#. (itstool) path: info/title
#: C/togglebutton.c.page:8
msgctxt "text"
msgid "ToggleButton (C)"
msgstr "ToggleButton (C)"

#. (itstool) path: info/desc
#: C/togglebutton.c.page:22 C/togglebutton.py.page:19
#: C/togglebutton.vala.page:21
msgid "A button which retains state"
msgstr "상태를 유지하는 단추"

#. (itstool) path: page/title
#: C/togglebutton.c.page:25 C/togglebutton.js.page:21 C/togglebutton.py.page:22
#: C/togglebutton.vala.page:24
msgid "ToggleButton"
msgstr "ToggleButton"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/togglebutton.c.page:27 C/togglebutton.js.page:22 C/togglebutton.py.page:23
#: C/togglebutton.vala.page:25
msgctxt "_"
msgid ""
"external ref='media/togglebutton.png' md5='791e062613d4f9bd5936390b0aa18448'"
msgstr ""

#. (itstool) path: page/p
#: C/togglebutton.c.page:28 C/togglebutton.py.page:24
#: C/togglebutton.vala.page:26
msgid "When this ToggleButton is in an active state, the spinner spins."
msgstr "ToggleButton을 활성 상태로 두면 스피너가 돌아갑니다."

#. (itstool) path: page/code
#: C/togglebutton.c.page:30
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*This is the callback function. It is a handler function \n"
"which reacts to the signal. In this case, it will cause the \n"
"spinner to start and stop according to how many times the user \n"
"presses the button.*/\n"
"static void\n"
"button_toggled_cb (GtkWidget *button,\n"
"                   gpointer   user_data)\n"
"{\n"
"  GtkWidget *spinner = user_data;\n"
"\n"
"  if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON(button)))\n"
"          gtk_spinner_start (GTK_SPINNER (spinner));\n"
"  else {\n"
"          gtk_spinner_stop (GTK_SPINNER (spinner));\n"
"  }\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *button;\n"
"  GtkWidget *grid;\n"
"  GtkWidget *spinner;\n"
"\n"
"  /*Create a window with a title, border width and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"ToggleButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 300);\n"
"  gtk_container_set_border_width(GTK_CONTAINER(window), 30);\n"
"\n"
"  /*Create a togglebutton with a label*/\n"
"  button = gtk_toggle_button_new_with_label (\"Start/Stop\");\n"
"\n"
"  /*Create a spinner, with extra horizontal and vertical space*/\n"
"  spinner = gtk_spinner_new ();\n"
"  gtk_widget_set_hexpand (spinner, TRUE);\n"
"  gtk_widget_set_vexpand (spinner, TRUE);\n"
"\n"
"  /*Create a grid and set the row spacing, attach the togglebutton \n"
"  and spinner onto the grid and position them accordingly*/\n"
"  grid = gtk_grid_new();\n"
"  gtk_grid_set_row_homogeneous (GTK_GRID (grid), FALSE);\n"
"  gtk_grid_set_row_spacing (GTK_GRID (grid), 15);\n"
"  gtk_grid_attach (GTK_GRID (grid), spinner, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), button, 0, 1, 1, 1);\n"
"  \n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  /*Connecting the toggled signal to the callback*/\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (button), \"toggled\", \n"
"                    G_CALLBACK (button_toggled_cb), spinner);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"\n"
"\n"
"/*This is the callback function. It is a handler function \n"
"which reacts to the signal. In this case, it will cause the \n"
"spinner to start and stop according to how many times the user \n"
"presses the button.*/\n"
"static void\n"
"button_toggled_cb (GtkWidget *button,\n"
"                   gpointer   user_data)\n"
"{\n"
"  GtkWidget *spinner = user_data;\n"
"\n"
"  if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON(button)))\n"
"          gtk_spinner_start (GTK_SPINNER (spinner));\n"
"  else {\n"
"          gtk_spinner_stop (GTK_SPINNER (spinner));\n"
"  }\n"
"}\n"
"\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"  GtkWidget *button;\n"
"  GtkWidget *grid;\n"
"  GtkWidget *spinner;\n"
"\n"
"  /*Create a window with a title, border width and a default size*/\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"ToggleButton Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 300, 300);\n"
"  gtk_container_set_border_width(GTK_CONTAINER(window), 30);\n"
"\n"
"  /*Create a togglebutton with a label*/\n"
"  button = gtk_toggle_button_new_with_label (\"Start/Stop\");\n"
"\n"
"  /*Create a spinner, with extra horizontal and vertical space*/\n"
"  spinner = gtk_spinner_new ();\n"
"  gtk_widget_set_hexpand (spinner, TRUE);\n"
"  gtk_widget_set_vexpand (spinner, TRUE);\n"
"\n"
"  /*Create a grid and set the row spacing, attach the togglebutton \n"
"  and spinner onto the grid and position them accordingly*/\n"
"  grid = gtk_grid_new();\n"
"  gtk_grid_set_row_homogeneous (GTK_GRID (grid), FALSE);\n"
"  gtk_grid_set_row_spacing (GTK_GRID (grid), 15);\n"
"  gtk_grid_attach (GTK_GRID (grid), spinner, 0, 0, 1, 1);\n"
"  gtk_grid_attach (GTK_GRID (grid), button, 0, 1, 1, 1);\n"
"  \n"
"  gtk_container_add (GTK_CONTAINER (window), grid);\n"
"\n"
"  /*Connecting the toggled signal to the callback*/\n"
"  g_signal_connect (GTK_TOGGLE_BUTTON (button), \"toggled\", \n"
"                    G_CALLBACK (button_toggled_cb), spinner);\n"
"\n"
"  gtk_widget_show_all (window);\n"
"}\n"
"\n"
"\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/togglebutton.c.page:39
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkToggleButton.html"
"\">GtkTogglebutton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkToggleButton.html"
"\">GtkTogglebutton</link>"

#. (itstool) path: info/title
#: C/togglebutton.js.page:8
msgctxt "text"
msgid "ToggleButton (JavaScript)"
msgstr "ToggleButton (JavaScript)"

#. (itstool) path: info/desc
#: C/togglebutton.js.page:18
msgid "Stays pressed until you click it again"
msgstr "다시 클릭하기 전에는 눌린 상태를 유지합니다"

#. (itstool) path: page/p
#: C/togglebutton.js.page:23
msgid ""
"A ToggleButton is like a normal <link xref=\"button.js\">Button</link>, "
"except that it stays pressed in when you click it. You can use it like an on/"
"off switch, to control things like the <link xref=\"spinner.js\">Spinner</"
"link> in this example."
msgstr ""
"ToggleButton은 보통 <link xref=\"button.js\">Button</link>이지만 눌렀을 때 눌"
"린 상태라는 점은 다릅니다. 이 예제에서 <link xref=\"spinner.js\">Spinner</"
"link>와 같은 매개를 다룰때 켬/끔 스위치로 사용할 수 있습니다."

#. (itstool) path: page/p
#: C/togglebutton.js.page:24
msgid ""
"A ToggleButton's get_active method returns true if it's pressed in, and "
"false if it's not. Its set_active method is used if you want to change its "
"state without needing to click on it. When it changes state from pressed in "
"to popped out and vice-versa, it sends out the \"toggled\" signal, which you "
"can connect to a function to do something."
msgstr ""
"ToggleButton의 <code>get_active()</code> 메서드는 눌렸을 때 true를 반환합니"
"다. 그리고 눌린 상태가 아니면 false를 반환합니다. <code>set_active()</code> "
"메서드는 단추를 누르지 않아도 상태를 설정하고 싶을 때 사용합니다. 눌려있거나 "
"튀어나왔거나 하는 상태를 바꿀 때, 어떤 함수와 연결할 수 있는 \"toggled\" 시그"
"널을 내보냅니다."

#. (itstool) path: section/code
#: C/togglebutton.js.page:41
#, no-wrap
msgid ""
"\n"
"const ToggleButtonExample = new Lang.Class({\n"
"    Name: 'ToggleButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jstogglebutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const ToggleButtonExample = new Lang.Class({\n"
"    Name: 'ToggleButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jstogglebutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/code
#: C/togglebutton.js.page:68
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 300,\n"
"            default_width: 300,\n"
"            border_width: 30,\n"
"            title: \"ToggleButton Example\"});\n"
msgstr ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 300,\n"
"            default_width: 300,\n"
"            border_width: 30,\n"
"            title: \"ToggleButton Example\"});\n"

#. (itstool) path: section/title
#: C/togglebutton.js.page:85
msgid "Creating the ToggleButton and other widgets"
msgstr "ToggleButton과 다른 위젯 만들기"

#. (itstool) path: section/code
#: C/togglebutton.js.page:86
#, no-wrap
msgid ""
"\n"
"        // Create the spinner that the button stops and starts\n"
"        this._spinner = new Gtk.Spinner ({hexpand: true, vexpand: true});\n"
msgstr ""
"\n"
"        // Create the spinner that the button stops and starts\n"
"        this._spinner = new Gtk.Spinner ({hexpand: true, vexpand: true});\n"

#. (itstool) path: section/p
#: C/togglebutton.js.page:91
msgid ""
"We want this <link xref=\"spinner.js\">Spinner</link> to expand vertically "
"and horizontally, to take up as much space as possible inside the window."
msgstr ""
"여기 <link xref=\"spinner.js\">Spinner</link>를 가로 세로 망향으로 확장하여 "
"창 안에서 최대한의 공간을 취할 수 있도록 하려고 합니다."

#. (itstool) path: section/code
#: C/togglebutton.js.page:93
#, no-wrap
msgid ""
"\n"
"        // Create the togglebutton that starts and stops the spinner\n"
"        this._toggleButton = new Gtk.ToggleButton ({label: \"Start/Stop\"});\n"
"        this._toggleButton.connect ('toggled', Lang.bind (this, this._onToggle));\n"
msgstr ""
"\n"
"        // Create the togglebutton that starts and stops the spinner\n"
"        this._toggleButton = new Gtk.ToggleButton ({label: \"Start/Stop\"});\n"
"        this._toggleButton.connect ('toggled', Lang.bind (this, this._onToggle));\n"

#. (itstool) path: section/p
#: C/togglebutton.js.page:99
msgid ""
"Creating a ToggleButton is a lot like creating a normal <link xref=\"button."
"js\">Button</link>. The biggest difference is that you're handling a "
"\"toggled\" signal instead of a \"clicked\" signal. This code binds the "
"_onToggle function to that signal, so that it's called whenever our "
"ToggleButton is toggled."
msgstr ""
"ToggleButton을 만드는 과정은 보통 <link xref=\"button.js\">Button</link>을 만"
"드는 과정과 비슷합니다. \"clicked\" 시그널이 아닌 \"toggled\" 시그널을 처리한"
"다는게 큰 차이점입니다. 이 코드에서는 _onToggle 함수를 시그널에 연결하여 "
"ToggleButton의 상태가 바뀌었을 때 호출합니다."

#. (itstool) path: section/code
#: C/togglebutton.js.page:101
#, no-wrap
msgid ""
"\n"
"        // Create a grid and put everything in it\n"
"        this._grid = new Gtk.Grid ({\n"
"            row_homogeneous: false,\n"
"            row_spacing: 15});\n"
"        this._grid.attach (this._spinner, 0, 0, 1, 1);\n"
"        this._grid.attach (this._toggleButton, 0, 1, 1, 1);\n"
msgstr ""
"\n"
"        // Create a grid and put everything in it\n"
"        this._grid = new Gtk.Grid ({\n"
"            row_homogeneous: false,\n"
"            row_spacing: 15});\n"
"        this._grid.attach (this._spinner, 0, 0, 1, 1);\n"
"        this._grid.attach (this._toggleButton, 0, 1, 1, 1);\n"

#. (itstool) path: section/p
#: C/togglebutton.js.page:109
msgid ""
"Here we create a simple <link xref=\"grid.js\">Grid</link> to organize "
"everything in, then attach the Spinner and ToggleButton to it."
msgstr ""
"여기서 우리는 모든 위젯을 모아두는 간단한 <link xref=\"grid.js\">Grid</link>"
"를 만들고 Spinner와 ToggleButton을 붙여두겠습니다."

#. (itstool) path: section/code
#: C/togglebutton.js.page:111
#, no-wrap
msgid ""
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"

#. (itstool) path: section/p
#: C/togglebutton.js.page:119
msgid ""
"Now we add the Grid to the Window, and tell the Window to show itself and "
"its child widgets when the application is started."
msgstr ""
"이제 창에 Grid를 추가하고, 프로그램을 시작할 때 창 자체를 나타낸 다음 하위 위"
"젯을 나타내라고 하겠습니다."

#. (itstool) path: section/title
#: C/togglebutton.js.page:123
msgid "Making something happen when the ToggleButton is toggled"
msgstr "ToggleButton 상태가 바뀔때 동작 만들기"

#. (itstool) path: section/code
#: C/togglebutton.js.page:125
#, no-wrap
msgid ""
"\n"
"    _onToggle: function() {\n"
"\n"
"        // Start or stop the spinner\n"
"        if (this._toggleButton.get_active ())\n"
"            this._spinner.start ();\n"
"        else this._spinner.stop ();\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _onToggle: function() {\n"
"\n"
"        // Start or stop the spinner\n"
"        if (this._toggleButton.get_active ())\n"
"            this._spinner.start ();\n"
"        else this._spinner.stop ();\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/togglebutton.js.page:137
msgid ""
"Whenever someone toggles the button, this function checks what its state is "
"afterwards using get_active and starts or stops the spinner accordingly. We "
"want it to spin only while the button is pressed in, so if get_active "
"returns true we start the spinner. Otherwise, we tell it to stop."
msgstr ""
"단추 눌린 상태를 누군가가 바꾸면, 이 함수에서 get_active() 함수를 사용하여 상"
"태를 확인한 다음에 바로 스피너 동작을 시작하거나 멈춥니다. 우리는 단추가 눌"
"린 동안에만 스피너가 돌아가게 하려고 하기에 get_active에서 true를 반환할 경우"
"에 스피너 회전을 시작하겠습니다. 아니면 멈추라고 하고요."

#. (itstool) path: section/code
#: C/togglebutton.js.page:139
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new ToggleButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Run the application\n"
"let app = new ToggleButtonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/code
#: C/togglebutton.js.page:149
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ToggleButtonExample = new Lang.Class({\n"
"    Name: 'ToggleButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jstogglebutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 300,\n"
"            default_width: 300,\n"
"            border_width: 30,\n"
"            title: \"ToggleButton Example\"});\n"
"\n"
"        // Create the spinner that the button stops and starts\n"
"        this._spinner = new Gtk.Spinner ({hexpand: true, vexpand: true});\n"
"\n"
"        // Create the togglebutton that starts and stops the spinner\n"
"        this._toggleButton = new Gtk.ToggleButton ({label: \"Start/Stop\"});\n"
"        this._toggleButton.connect ('toggled', Lang.bind (this, this._onToggle));\n"
"\n"
"        // Create a grid and put everything in it\n"
"        this._grid = new Gtk.Grid ({\n"
"            row_homogeneous: false,\n"
"            row_spacing: 15});\n"
"        this._grid.attach (this._spinner, 0, 0, 1, 1);\n"
"        this._grid.attach (this._toggleButton, 0, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onToggle: function() {\n"
"\n"
"        // Start or stop the spinner\n"
"        if (this._toggleButton.get_active ())\n"
"            this._spinner.start ();\n"
"        else this._spinner.stop ();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ToggleButtonExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const ToggleButtonExample = new Lang.Class({\n"
"    Name: 'ToggleButton Example',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jstogglebutton',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 300,\n"
"            default_width: 300,\n"
"            border_width: 30,\n"
"            title: \"ToggleButton Example\"});\n"
"\n"
"        // Create the spinner that the button stops and starts\n"
"        this._spinner = new Gtk.Spinner ({hexpand: true, vexpand: true});\n"
"\n"
"        // Create the togglebutton that starts and stops the spinner\n"
"        this._toggleButton = new Gtk.ToggleButton ({label: \"Start/Stop\"});\n"
"        this._toggleButton.connect ('toggled', Lang.bind (this, this._onToggle));\n"
"\n"
"        // Create a grid and put everything in it\n"
"        this._grid = new Gtk.Grid ({\n"
"            row_homogeneous: false,\n"
"            row_spacing: 15});\n"
"        this._grid.attach (this._spinner, 0, 0, 1, 1);\n"
"        this._grid.attach (this._toggleButton, 0, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onToggle: function() {\n"
"\n"
"        // Start or stop the spinner\n"
"        if (this._toggleButton.get_active ())\n"
"            this._spinner.start ();\n"
"        else this._spinner.stop ();\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new ToggleButtonExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/togglebutton.js.page:159
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ToggleButton."
"html\">Gtk.ToggleButton</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ToggleButton."
"html\">Gtk.ToggleButton</link>"

#. (itstool) path: info/title
#: C/togglebutton.py.page:8
msgctxt "text"
msgid "ToggleButton (Python)"
msgstr "ToggleButton (Python)"

#. (itstool) path: section/code
#: C/togglebutton.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(\n"
"            self, title=\"ToggleButton Example\", application=app)\n"
"        self.set_default_size(300, 300)\n"
"        self.set_border_width(30)\n"
"\n"
"        # a spinner animation\n"
"        self.spinner = Gtk.Spinner()\n"
"        # with extra horizontal space\n"
"        self.spinner.set_hexpand(True)\n"
"        # with extra vertical space\n"
"        self.spinner.set_vexpand(True)\n"
"\n"
"        # a togglebutton\n"
"        button = Gtk.ToggleButton.new_with_label(\"Start/Stop\")\n"
"        # connect the signal \"toggled\" emitted by the togglebutton\n"
"        # when its state is changed to the callback function toggled_cb\n"
"        button.connect(\"toggled\", self.toggled_cb)\n"
"\n"
"        # a grid to allocate the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.set_row_homogeneous(False)\n"
"        grid.set_row_spacing(15)\n"
"        grid.attach(self.spinner, 0, 0, 1, 1)\n"
"        grid.attach(button, 0, 1, 1, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # callback function for the signal \"toggled\"\n"
"    def toggled_cb(self, button):\n"
"        # if the togglebutton is active, start the spinner\n"
"        if button.get_active():\n"
"            self.spinner.start()\n"
"        # else, stop it\n"
"        else:\n"
"            self.spinner.stop()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"    # a window\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(\n"
"            self, title=\"ToggleButton Example\", application=app)\n"
"        self.set_default_size(300, 300)\n"
"        self.set_border_width(30)\n"
"\n"
"        # a spinner animation\n"
"        self.spinner = Gtk.Spinner()\n"
"        # with extra horizontal space\n"
"        self.spinner.set_hexpand(True)\n"
"        # with extra vertical space\n"
"        self.spinner.set_vexpand(True)\n"
"\n"
"        # a togglebutton\n"
"        button = Gtk.ToggleButton.new_with_label(\"Start/Stop\")\n"
"        # connect the signal \"toggled\" emitted by the togglebutton\n"
"        # when its state is changed to the callback function toggled_cb\n"
"        button.connect(\"toggled\", self.toggled_cb)\n"
"\n"
"        # a grid to allocate the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.set_row_homogeneous(False)\n"
"        grid.set_row_spacing(15)\n"
"        grid.attach(self.spinner, 0, 0, 1, 1)\n"
"        grid.attach(button, 0, 1, 1, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    # callback function for the signal \"toggled\"\n"
"    def toggled_cb(self, button):\n"
"        # if the togglebutton is active, start the spinner\n"
"        if button.get_active():\n"
"            self.spinner.start()\n"
"        # else, stop it\n"
"        else:\n"
"            self.spinner.stop()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/togglebutton.py.page:36
msgid "Useful methods for a ToggleButton widget"
msgstr "ToggleButton 위젯에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/togglebutton.py.page:37
msgid ""
"In line 22 the signal <code>\"toggled\"</code> is connected to the callback "
"function <code>toggled_cb()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"22번째 줄에서 <code>\"toggled\"</code> 시그널은 <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code> 함수로  "
"<code>toggled_cb()</code> 콜백 함수에 연결했습니다. 더 자세한 설명은 <link "
"xref=\"signals-callbacks.py\"/>를 참조하십시오."

#. (itstool) path: item/p
#: C/togglebutton.py.page:45 C/toolbar.py.page:60 C/toolbar_builder.py.page:198
#: C/widget_drawing.py.page:38
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkWidget.html"
"\">GtkWidget</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkWidget.html"
"\">GtkWidget</link>"

#. (itstool) path: info/title
#: C/togglebutton.vala.page:8
msgctxt "text"
msgid "ToggleButton (Vala)"
msgstr "ToggleButton (Vala)"

#. (itstool) path: page/code
#: C/togglebutton.vala.page:28
#, no-wrap
msgid ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Spinner spinner;\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"ToggleButton Example\");\n"
"\n"
"\t\tthis.set_default_size (300, 300);\n"
"\t\tthis.border_width = 30;\n"
"\n"
"\t\t/*Spinner*/\n"
"\t\tspinner = new Gtk.Spinner ();\n"
"\t\tspinner.set_hexpand (true);\n"
"\t\tspinner.set_vexpand (true);\n"
"\n"
"\t\t/*ToggleButton*/\n"
"\t\tvar togglebutton = new Gtk.ToggleButton.with_label (\"Start/Stop\");\n"
"\t\ttogglebutton.toggled.connect (toggled_cb);\n"
"\n"
"\t\t/*Grid*/\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.set_row_homogeneous (false);\n"
"\t\tgrid.set_row_spacing (15);\n"
"\t\tgrid.attach (spinner, 0, 0, 1, 1);\n"
"\t\tgrid.attach (togglebutton, 0, 1, 1, 1);\n"
"\n"
"\t\tthis.add (grid);\n"
"\t}\n"
"\n"
"\tvoid toggled_cb (Gtk.ToggleButton button) {\n"
"\t\tif (button.get_active()) {\n"
"\t\t\tspinner.start ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tspinner.stop ();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t//Show all the things\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.spinner\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Spinner spinner;\n"
"\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"ToggleButton Example\");\n"
"\n"
"\t\tthis.set_default_size (300, 300);\n"
"\t\tthis.border_width = 30;\n"
"\n"
"\t\t/*Spinner*/\n"
"\t\tspinner = new Gtk.Spinner ();\n"
"\t\tspinner.set_hexpand (true);\n"
"\t\tspinner.set_vexpand (true);\n"
"\n"
"\t\t/*ToggleButton*/\n"
"\t\tvar togglebutton = new Gtk.ToggleButton.with_label (\"Start/Stop\");\n"
"\t\ttogglebutton.toggled.connect (toggled_cb);\n"
"\n"
"\t\t/*Grid*/\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tgrid.set_row_homogeneous (false);\n"
"\t\tgrid.set_row_spacing (15);\n"
"\t\tgrid.attach (spinner, 0, 0, 1, 1);\n"
"\t\tgrid.attach (togglebutton, 0, 1, 1, 1);\n"
"\n"
"\t\tthis.add (grid);\n"
"\t}\n"
"\n"
"\tvoid toggled_cb (Gtk.ToggleButton button) {\n"
"\t\tif (button.get_active()) {\n"
"\t\t\tspinner.start ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tspinner.stop ();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"public class MyApplication : Gtk.Application {\n"
"\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t//Show all the things\n"
"\t\tnew MyWindow (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"org.example.spinner\");\n"
"\t}\n"
"}\n"
"\n"
"public int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/togglebutton.vala.page:33
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ToggleButton.html\">Gtk."
"ToggleButton</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ToggleButton.html\">Gtk."
"ToggleButton</link>"

#. (itstool) path: info/title
#: C/toolbar.c.page:8
msgctxt "text"
msgid "Toolbar (C)"
msgstr "Toolbar (C)"

#. (itstool) path: info/desc
#: C/toolbar.c.page:20 C/toolbar.vala.page:19 C/toolbar_builder.vala.page:20
msgid "A bar of buttons"
msgstr "단추 표시줄"

#. (itstool) path: page/title
#: C/toolbar.c.page:23 C/toolbar.js.page:21 C/toolbar.py.page:23
#: C/toolbar.vala.page:22
msgid "Toolbar"
msgstr "Toolbar"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar.c.page:25 C/toolbar.js.page:22 C/toolbar.py.page:25
#: C/toolbar.vala.page:24 C/toolbar_builder.py.page:38
#: C/toolbar_builder.vala.page:25
msgctxt "_"
msgid "external ref='media/toolbar.png' md5='f0350855eedf6343952b72d6d906f738'"
msgstr ""

#. (itstool) path: page/p
#: C/toolbar.c.page:26 C/toolbar.js.page:23 C/toolbar.vala.page:25
msgid ""
"Toolbar can contain either text or stock icons. In this sample we use stock "
"icons. This example has fullscreen functionality."
msgstr ""
"Toolbar에는 텍스트나 스톡 아이콘을 넣을 수 있습니다. 이 예제에서는 스톡 아이"
"콘을 사용하겠습니다. 이 예제에는 전체 화면 기능이 있습니다."

#. (itstool) path: page/p
#: C/toolbar.c.page:27
msgid ""
"This example uses SimpleActions (window and app). App actions can easily be "
"added to the app menu."
msgstr ""
"SimpleAction(창과 앱)을 활용하는 예제입니다. 앱 동작은 앱 메뉴에서 쉽게 추가"
"할 수 있습니다."

#. (itstool) path: page/code
#: C/toolbar.c.page:29
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"/* Declare these two Toolbuttons, as they will be used in both the fullscreen\n"
" * action callback as well as the activate function.\n"
" */\n"
"GtkToolItem *fullscreen_button;\n"
"GtkToolItem *leavefullscreen_button;\n"
"\n"
"\n"
"\n"
"/* Callback function for the undo action */\n"
"static void\n"
"undo_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"Undo\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the fullscreen action */\n"
"static void\n"
"fullscreen_callback (GSimpleAction *simple,\n"
"                     GVariant      *parameter,\n"
"                     gpointer       user_data)\n"
"{\n"
"  GdkWindow *window = gtk_widget_get_window (GTK_WIDGET (user_data));\n"
"\n"
"  GdkWindowState current_state = gdk_window_get_state (window);\n"
"\n"
"  /* If the window is currently in fullscreen mode */\n"
"  if ( (current_state &amp; GDK_WINDOW_STATE_FULLSCREEN) != 0)\n"
"    {\n"
"      /* Minimize the window and change to the fullscreen button */\n"
"      gdk_window_unfullscreen (window);\n"
"      gtk_widget_hide (GTK_WIDGET(leavefullscreen_button));\n"
"      gtk_widget_show (GTK_WIDGET(fullscreen_button));\n"
"    }\n"
"  else\n"
"    {\n"
"      /* Maximize the window, and change to the unfullscreen button */\n"
"      gdk_window_fullscreen (window);\n"
"      gtk_widget_hide (GTK_WIDGET (fullscreen_button));\n"
"      gtk_widget_show (GTK_WIDGET (leavefullscreen_button));\n"
"    }\n"
"}\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Initialize variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *grid;\n"
"  GtkWidget *toolbar;\n"
"\n"
"  GtkToolItem *new_button;\n"
"  GtkToolItem *open_button;\n"
"  GtkToolItem *undo_button;\n"
"\n"
"  GtkStyleContext *style_context;\n"
"\n"
"  GSimpleAction *undo_action;\n"
"  GSimpleAction *fullscreen_action;\n"
"  GSimpleAction *leavefullscreen_action;\n"
"\n"
"  /* Create a window with a title and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Toolbar Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 400, 200);\n"
"\n"
"  /* Here we begin to create the toolbar */\n"
"  toolbar = gtk_toolbar_new ();\n"
"  /* Set the toolbar to be the primary toolbar of the application */\n"
"  style_context = gtk_widget_get_style_context (toolbar);\n"
"  gtk_style_context_add_class (style_context, GTK_STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"  /* Create a button for the \"new\" action, with a stock image */\n"
"  new_button = gtk_tool_button_new_from_stock (GTK_STOCK_NEW);\n"
"  /* Show the \"new\" button's label */\n"
"  gtk_tool_item_set_is_important (new_button, TRUE);\n"
"  /* Insert the button in the desired position within the toolbar */\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), new_button, 0);\n"
"  /* Show the button */\n"
"  gtk_widget_show (GTK_WIDGET (new_button));\n"
"  /* Set the action name for the \"new\" action. We use \"app.new\" to\n"
"   * indicate that the action controls the application.\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (new_button), \"app.new\");\n"
"\n"
"  /* Repeat the same steps for the \"open\" action */\n"
"  open_button = gtk_tool_button_new_from_stock (GTK_STOCK_OPEN);\n"
"  gtk_tool_item_set_is_important (open_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), open_button, 1);\n"
"  gtk_widget_show (GTK_WIDGET (open_button));\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (open_button), \"app.open\");\n"
"\n"
"  /* Repeat the same steps for the \"undo\" action */\n"
"  undo_button = gtk_tool_button_new_from_stock (GTK_STOCK_UNDO);\n"
"  gtk_tool_item_set_is_important (undo_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), undo_button, 2);\n"
"  gtk_widget_show (GTK_WIDGET (undo_button));\n"
"  /* In this case, we use \"win.undo\" to indicate that\n"
"   * the action controls only the window\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (undo_button), \"win.undo\");\n"
"\n"
"  /* Repeat the same steps for the \"fullscreen\" action */\n"
"  fullscreen_button = gtk_tool_button_new_from_stock (GTK_STOCK_FULLSCREEN);\n"
"  gtk_tool_item_set_is_important (fullscreen_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), fullscreen_button, 3);\n"
"  gtk_widget_show (GTK_WIDGET (fullscreen_button));\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (fullscreen_button),\n"
"                                  \"win.fullscreen\");\n"
"\n"
"  /*Repeat the same steps for the \"leavefullscreen\" action */\n"
"  leavefullscreen_button = gtk_tool_button_new_from_stock (GTK_STOCK_LEAVE_FULLSCREEN);\n"
"  gtk_tool_item_set_is_important (leavefullscreen_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), leavefullscreen_button, 3);\n"
"  /* The only difference here is that we don't show the leavefullscreen button,\n"
"   * as it will later replace the fullscreen button.\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (leavefullscreen_button),\n"
"                                  \"win.leavefullscreen\");\n"
"\n"
"  /* Once we've created the bare-bones of the toolbar, we make\n"
"   * sure it has enough horizontal space.\n"
"   */\n"
"  gtk_widget_set_hexpand (toolbar, TRUE);\n"
"  gtk_widget_show (toolbar);\n"
"\n"
"  /* Attach the toolbar to the grid and add it to the overall window */\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_attach (GTK_GRID (grid), toolbar, 0, 0, 1, 1);\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"  gtk_widget_show (GTK_WIDGET (grid));\n"
"\n"
"  /* Use the action names to create the actions that control the window, and\n"
"   * connect them to the appropriate callbackfunctions.\n"
"   */\n"
"  undo_action = g_simple_action_new (\"undo\", NULL);\n"
"  g_signal_connect (undo_action, \"activate\", G_CALLBACK (undo_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (undo_action));\n"
"\n"
"  fullscreen_action = g_simple_action_new (\"fullscreen\", NULL);\n"
"  g_signal_connect (fullscreen_action, \"activate\", G_CALLBACK (fullscreen_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (fullscreen_action));\n"
"\n"
"  leavefullscreen_action = g_simple_action_new (\"leavefullscreen\", NULL);\n"
"  g_signal_connect (leavefullscreen_action, \"activate\", G_CALLBACK (fullscreen_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (leavefullscreen_action));\n"
"\n"
"  gtk_widget_show (window);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the new action */\n"
"static void\n"
"new_callback (GSimpleAction *simple,\n"
"              GVariant      *parameter,\n"
"              gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"New\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the open action */\n"
"static void\n"
"open_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"Open\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* In this function, we create the actions in which control the window, and\n"
" * connect their signals to the appropriate callback function.\n"
" */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GSimpleAction *new_action;\n"
"  GSimpleAction *open_action;\n"
"\n"
"  new_action = g_simple_action_new (\"new\", NULL);\n"
"  g_signal_connect (new_action, \"activate\", G_CALLBACK (new_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (new_action));\n"
"\n"
"  open_action = g_simple_action_new (\"open\", NULL);\n"
"  g_signal_connect (open_action, \"activate\", G_CALLBACK (open_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (open_action));\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the application */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"/* Declare these two Toolbuttons, as they will be used in both the fullscreen\n"
" * action callback as well as the activate function.\n"
" */\n"
"GtkToolItem *fullscreen_button;\n"
"GtkToolItem *leavefullscreen_button;\n"
"\n"
"\n"
"\n"
"/* Callback function for the undo action */\n"
"static void\n"
"undo_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"Undo\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the fullscreen action */\n"
"static void\n"
"fullscreen_callback (GSimpleAction *simple,\n"
"                     GVariant      *parameter,\n"
"                     gpointer       user_data)\n"
"{\n"
"  GdkWindow *window = gtk_widget_get_window (GTK_WIDGET (user_data));\n"
"\n"
"  GdkWindowState current_state = gdk_window_get_state (window);\n"
"\n"
"  /* If the window is currently in fullscreen mode */\n"
"  if ( (current_state &amp; GDK_WINDOW_STATE_FULLSCREEN) != 0)\n"
"    {\n"
"      /* Minimize the window and change to the fullscreen button */\n"
"      gdk_window_unfullscreen (window);\n"
"      gtk_widget_hide (GTK_WIDGET(leavefullscreen_button));\n"
"      gtk_widget_show (GTK_WIDGET(fullscreen_button));\n"
"    }\n"
"  else\n"
"    {\n"
"      /* Maximize the window, and change to the unfullscreen button */\n"
"      gdk_window_fullscreen (window);\n"
"      gtk_widget_hide (GTK_WIDGET (fullscreen_button));\n"
"      gtk_widget_show (GTK_WIDGET (leavefullscreen_button));\n"
"    }\n"
"}\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  /* Initialize variables */\n"
"  GtkWidget *window;\n"
"  GtkWidget *grid;\n"
"  GtkWidget *toolbar;\n"
"\n"
"  GtkToolItem *new_button;\n"
"  GtkToolItem *open_button;\n"
"  GtkToolItem *undo_button;\n"
"\n"
"  GtkStyleContext *style_context;\n"
"\n"
"  GSimpleAction *undo_action;\n"
"  GSimpleAction *fullscreen_action;\n"
"  GSimpleAction *leavefullscreen_action;\n"
"\n"
"  /* Create a window with a title and a default size */\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Toolbar Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 400, 200);\n"
"\n"
"  /* Here we begin to create the toolbar */\n"
"  toolbar = gtk_toolbar_new ();\n"
"  /* Set the toolbar to be the primary toolbar of the application */\n"
"  style_context = gtk_widget_get_style_context (toolbar);\n"
"  gtk_style_context_add_class (style_context, GTK_STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"  /* Create a button for the \"new\" action, with a stock image */\n"
"  new_button = gtk_tool_button_new_from_stock (GTK_STOCK_NEW);\n"
"  /* Show the \"new\" button's label */\n"
"  gtk_tool_item_set_is_important (new_button, TRUE);\n"
"  /* Insert the button in the desired position within the toolbar */\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), new_button, 0);\n"
"  /* Show the button */\n"
"  gtk_widget_show (GTK_WIDGET (new_button));\n"
"  /* Set the action name for the \"new\" action. We use \"app.new\" to\n"
"   * indicate that the action controls the application.\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (new_button), \"app.new\");\n"
"\n"
"  /* Repeat the same steps for the \"open\" action */\n"
"  open_button = gtk_tool_button_new_from_stock (GTK_STOCK_OPEN);\n"
"  gtk_tool_item_set_is_important (open_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), open_button, 1);\n"
"  gtk_widget_show (GTK_WIDGET (open_button));\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (open_button), \"app.open\");\n"
"\n"
"  /* Repeat the same steps for the \"undo\" action */\n"
"  undo_button = gtk_tool_button_new_from_stock (GTK_STOCK_UNDO);\n"
"  gtk_tool_item_set_is_important (undo_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), undo_button, 2);\n"
"  gtk_widget_show (GTK_WIDGET (undo_button));\n"
"  /* In this case, we use \"win.undo\" to indicate that\n"
"   * the action controls only the window\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (undo_button), \"win.undo\");\n"
"\n"
"  /* Repeat the same steps for the \"fullscreen\" action */\n"
"  fullscreen_button = gtk_tool_button_new_from_stock (GTK_STOCK_FULLSCREEN);\n"
"  gtk_tool_item_set_is_important (fullscreen_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), fullscreen_button, 3);\n"
"  gtk_widget_show (GTK_WIDGET (fullscreen_button));\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (fullscreen_button),\n"
"                                  \"win.fullscreen\");\n"
"\n"
"  /*Repeat the same steps for the \"leavefullscreen\" action */\n"
"  leavefullscreen_button = gtk_tool_button_new_from_stock (GTK_STOCK_LEAVE_FULLSCREEN);\n"
"  gtk_tool_item_set_is_important (leavefullscreen_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), leavefullscreen_button, 3);\n"
"  /* The only difference here is that we don't show the leavefullscreen button,\n"
"   * as it will later replace the fullscreen button.\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (leavefullscreen_button),\n"
"                                  \"win.leavefullscreen\");\n"
"\n"
"  /* Once we've created the bare-bones of the toolbar, we make\n"
"   * sure it has enough horizontal space.\n"
"   */\n"
"  gtk_widget_set_hexpand (toolbar, TRUE);\n"
"  gtk_widget_show (toolbar);\n"
"\n"
"  /* Attach the toolbar to the grid and add it to the overall window */\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_attach (GTK_GRID (grid), toolbar, 0, 0, 1, 1);\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"  gtk_widget_show (GTK_WIDGET (grid));\n"
"\n"
"  /* Use the action names to create the actions that control the window, and\n"
"   * connect them to the appropriate callbackfunctions.\n"
"   */\n"
"  undo_action = g_simple_action_new (\"undo\", NULL);\n"
"  g_signal_connect (undo_action, \"activate\", G_CALLBACK (undo_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (undo_action));\n"
"\n"
"  fullscreen_action = g_simple_action_new (\"fullscreen\", NULL);\n"
"  g_signal_connect (fullscreen_action, \"activate\", G_CALLBACK (fullscreen_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (fullscreen_action));\n"
"\n"
"  leavefullscreen_action = g_simple_action_new (\"leavefullscreen\", NULL);\n"
"  g_signal_connect (leavefullscreen_action, \"activate\", G_CALLBACK (fullscreen_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (leavefullscreen_action));\n"
"\n"
"  gtk_widget_show (window);\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the new action */\n"
"static void\n"
"new_callback (GSimpleAction *simple,\n"
"              GVariant      *parameter,\n"
"              gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"New\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* Callback function for the open action */\n"
"static void\n"
"open_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"Open\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"\n"
"/* In this function, we create the actions in which control the window, and\n"
" * connect their signals to the appropriate callback function.\n"
" */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GSimpleAction *new_action;\n"
"  GSimpleAction *open_action;\n"
"\n"
"  new_action = g_simple_action_new (\"new\", NULL);\n"
"  g_signal_connect (new_action, \"activate\", G_CALLBACK (new_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (new_action));\n"
"\n"
"  open_action = g_simple_action_new (\"open\", NULL);\n"
"  g_signal_connect (open_action, \"activate\", G_CALLBACK (open_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (open_action));\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the application */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/toolbar.c.page:35 C/tooltip.c.page:39 C/tooltip.py.page:60
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkToolbar.html"
"\">GtkToolbar</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkToolbar.html"
"\">GtkToolbar</link>"

#. (itstool) path: item/p
#: C/toolbar.c.page:36
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkToolButton.html"
"\">GtkToolbutton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkToolButton.html"
"\">GtkToolbutton</link>"

#. (itstool) path: info/title
#: C/toolbar.js.page:8
msgctxt "text"
msgid "Toolbar (JavaScript)"
msgstr "Toolbar (JavaScript)"

#. (itstool) path: info/desc
#: C/toolbar.js.page:18
msgid "A bar of tools"
msgstr "도구 표시줄"

#. (itstool) path: page/p
#: C/toolbar.js.page:24 C/toolbar.vala.page:26
msgid ""
"This example uses SimpleActions (window and app). App actions can easily be "
"added the the app menu."
msgstr ""
"SimpleAction(창과 앱)을 활용하는 예제입니다. 앱 동작은 앱 메뉴에서 쉽게 추가"
"할 수 있습니다."

#. (itstool) path: page/code
#: C/toolbar.js.page:26
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const Gdk = imports.gi.Gdk;\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.myapp',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"       //connect to 'activate' and 'startup' signals to the callback functions\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI (in this case it's just the ApplicationWindow\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"Toolbar Example\",\n"
"                                                   default_height: 200,\n"
"                                                   default_width: 400 });\n"
"\n"
"        this._grid = new Gtk.Grid();\n"
"        this._window.add(this._grid);\n"
"        this._grid.show();\n"
"\n"
"        this._createToolbar();\n"
"        this._toolbar.set_hexpand(true);\n"
"        this._grid.attach(this._toolbar, 0, 0, 1, 1);\n"
"\n"
"        //show the  toolbar and window\n"
"        this._toolbar.show();\n"
"        this._window.show();\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    //callback function for 'startup' signal\n"
"    _onStartup: function() {\n"
"        this._initMenus();\n"
"        this._buildUI();\n"
"    },\n"
"\n"
"    //create the toolbar, its toolbuttons and their actions\n"
"    _createToolbar: function() {\n"
"\n"
"        this._toolbar = new Gtk.Toolbar();\n"
"        this._toolbar.get_style_context().add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"        //create the \"New\" ToolButton and its SimpleAction.\n"
"        //Using actions allows you to add them to the app menu\n"
"        //without duplicating code.\n"
"        let newAction = new Gio.SimpleAction({ name: 'new'});\n"
"        newAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._newCB();\n"
"            }));\n"
"        this.application.add_action(newAction);//note: this action is added to the app\n"
"\n"
"        this._newButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_NEW);\n"
"        this._newButton.is_important = true;\n"
"        this._toolbar.add(this._newButton);\n"
"        this._newButton.show();\n"
"        this._newButton.action_name = \"app.new\";\n"
"\n"
"        //create the \"Open\" ToolButton and its SimpleAction\n"
"        let openAction = new Gio.SimpleAction({ name: 'open'});\n"
"        openAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._openCB();\n"
"            }));\n"
"        this.application.add_action(openAction);\n"
"\n"
"        this._openButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_OPEN);\n"
"        this._openButton.is_important = true;\n"
"        this._toolbar.add(this._openButton);\n"
"        this._openButton.show();\n"
"        this._openButton.action_name = \"app.open\";\n"
"\n"
"        //create the \"Undo\" ToolButton and its SimpleAction\n"
"        let undoAction = new Gio.SimpleAction({ name: 'undo'});\n"
"        undoAction.connect('activate', Lang.bind (this,\n"
"            function() {\n"
"                this._undoCB();\n"
"            }));\n"
"        this._window.add_action(undoAction);//note this action is added to the window\n"
"\n"
"        this._undoButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_UNDO);\n"
"        this._undoButton.is_important = true;\n"
"        this._toolbar.add(this._undoButton);\n"
"        this._undoButton.show();\n"
"        this._undoButton.action_name = \"win.undo\";\n"
"\n"
"        //create the \"Fullscreen\" ToolButton and its SimpleAction\n"
"        let fullscreenToggleAction = new Gio.SimpleAction ({ name: 'fullscreenToggle' });\n"
"        fullscreenToggleAction.connect ('activate', Lang.bind (this,\n"
"            function () {\n"
"                this._fullscreenToggleCB();\n"
"            }));\n"
"        this._window.add_action(fullscreenToggleAction);\n"
"\n"
"        this._fullscreenButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_FULLSCREEN);\n"
"        this._fullscreenButton.is_important = true;\n"
"        this._toolbar.add(this._fullscreenButton);\n"
"        this._fullscreenButton.show();\n"
"        this._fullscreenButton.action_name = \"win.fullscreenToggle\";\n"
"\n"
"        //create the \"leaveFullscreen\" ToolButton, and set the action name to \"win.fullscreenToggle\"\n"
"        this._leaveFullscreenButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_LEAVE_FULLSCREEN);\n"
"        this._leaveFullscreenButton.is_important = true;\n"
"        this._toolbar.add(this._leaveFullscreenButton);\n"
"        this._leaveFullscreenButton.action_name = \"win.fullscreenToggle\";\n"
"    },\n"
"\n"
"    _initMenus: function () {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"New\", 'app.new');\n"
"        menu.append(\"Open\", 'app.open');\n"
"        menu.append(\"Quit\", 'app.quit');\n"
"\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        let quitAction = new Gio.SimpleAction({name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"    _newCB: function() {\n"
"        print(\"You clicked 'New'.\");\n"
"    },\n"
"\n"
"    _openCB: function() {\n"
"        print(\"You clicked 'Open'.\");\n"
"    },\n"
"\n"
"    _undoCB:function () {\n"
"        print (\"You clicked 'Undo'.\");\n"
"    },\n"
"\n"
"    _fullscreenToggleCB: function() {\n"
"        if ((this._window.get_window().get_state() &amp; Gdk.WindowState.FULLSCREEN) != 0 ) {\n"
"              this._window.unfullscreen();\n"
"              this._leaveFullscreenButton.hide();\n"
"              this._fullscreenButton.show();\n"
"        }\n"
"        else {\n"
"             this._window.fullscreen();\n"
"             this._fullscreenButton.hide();\n"
"             this._leaveFullscreenButton.show();\n"
"        }\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application();\n"
"app.application.run(ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gdk = imports.gi.Gdk;\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.myapp',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"       //connect to 'activate' and 'startup' signals to the callback functions\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"       this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    //create the UI (in this case it's just the ApplicationWindow\n"
"    _buildUI: function() {\n"
"        this._window = new Gtk.ApplicationWindow({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"Toolbar Example\",\n"
"                                                   default_height: 200,\n"
"                                                   default_width: 400 });\n"
"\n"
"        this._grid = new Gtk.Grid();\n"
"        this._window.add(this._grid);\n"
"        this._grid.show();\n"
"\n"
"        this._createToolbar();\n"
"        this._toolbar.set_hexpand(true);\n"
"        this._grid.attach(this._toolbar, 0, 0, 1, 1);\n"
"\n"
"        //show the  toolbar and window\n"
"        this._toolbar.show();\n"
"        this._window.show();\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    //callback function for 'startup' signal\n"
"    _onStartup: function() {\n"
"        this._initMenus();\n"
"        this._buildUI();\n"
"    },\n"
"\n"
"    //create the toolbar, its toolbuttons and their actions\n"
"    _createToolbar: function() {\n"
"\n"
"        this._toolbar = new Gtk.Toolbar();\n"
"        this._toolbar.get_style_context().add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"        //create the \"New\" ToolButton and its SimpleAction.\n"
"        //Using actions allows you to add them to the app menu\n"
"        //without duplicating code.\n"
"        let newAction = new Gio.SimpleAction({ name: 'new'});\n"
"        newAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._newCB();\n"
"            }));\n"
"        this.application.add_action(newAction);//note: this action is added to the app\n"
"\n"
"        this._newButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_NEW);\n"
"        this._newButton.is_important = true;\n"
"        this._toolbar.add(this._newButton);\n"
"        this._newButton.show();\n"
"        this._newButton.action_name = \"app.new\";\n"
"\n"
"        //create the \"Open\" ToolButton and its SimpleAction\n"
"        let openAction = new Gio.SimpleAction({ name: 'open'});\n"
"        openAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._openCB();\n"
"            }));\n"
"        this.application.add_action(openAction);\n"
"\n"
"        this._openButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_OPEN);\n"
"        this._openButton.is_important = true;\n"
"        this._toolbar.add(this._openButton);\n"
"        this._openButton.show();\n"
"        this._openButton.action_name = \"app.open\";\n"
"\n"
"        //create the \"Undo\" ToolButton and its SimpleAction\n"
"        let undoAction = new Gio.SimpleAction({ name: 'undo'});\n"
"        undoAction.connect('activate', Lang.bind (this,\n"
"            function() {\n"
"                this._undoCB();\n"
"            }));\n"
"        this._window.add_action(undoAction);//note this action is added to the window\n"
"\n"
"        this._undoButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_UNDO);\n"
"        this._undoButton.is_important = true;\n"
"        this._toolbar.add(this._undoButton);\n"
"        this._undoButton.show();\n"
"        this._undoButton.action_name = \"win.undo\";\n"
"\n"
"        //create the \"Fullscreen\" ToolButton and its SimpleAction\n"
"        let fullscreenToggleAction = new Gio.SimpleAction ({ name: 'fullscreenToggle' });\n"
"        fullscreenToggleAction.connect ('activate', Lang.bind (this,\n"
"            function () {\n"
"                this._fullscreenToggleCB();\n"
"            }));\n"
"        this._window.add_action(fullscreenToggleAction);\n"
"\n"
"        this._fullscreenButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_FULLSCREEN);\n"
"        this._fullscreenButton.is_important = true;\n"
"        this._toolbar.add(this._fullscreenButton);\n"
"        this._fullscreenButton.show();\n"
"        this._fullscreenButton.action_name = \"win.fullscreenToggle\";\n"
"\n"
"        //create the \"leaveFullscreen\" ToolButton, and set the action name to \"win.fullscreenToggle\"\n"
"        this._leaveFullscreenButton = new Gtk.ToolButton.new_from_stock(Gtk.STOCK_LEAVE_FULLSCREEN);\n"
"        this._leaveFullscreenButton.is_important = true;\n"
"        this._toolbar.add(this._leaveFullscreenButton);\n"
"        this._leaveFullscreenButton.action_name = \"win.fullscreenToggle\";\n"
"    },\n"
"\n"
"    _initMenus: function () {\n"
"        let menu = new Gio.Menu();\n"
"        menu.append(\"New\", 'app.new');\n"
"        menu.append(\"Open\", 'app.open');\n"
"        menu.append(\"Quit\", 'app.quit');\n"
"\n"
"        this.application.set_app_menu(menu);\n"
"\n"
"        let quitAction = new Gio.SimpleAction({name: 'quit' });\n"
"        quitAction.connect('activate', Lang.bind(this,\n"
"            function() {\n"
"                this._window.destroy();\n"
"            }));\n"
"        this.application.add_action(quitAction);\n"
"    },\n"
"\n"
"    _newCB: function() {\n"
"        print(\"You clicked 'New'.\");\n"
"    },\n"
"\n"
"    _openCB: function() {\n"
"        print(\"You clicked 'Open'.\");\n"
"    },\n"
"\n"
"    _undoCB:function () {\n"
"        print (\"You clicked 'Undo'.\");\n"
"    },\n"
"\n"
"    _fullscreenToggleCB: function() {\n"
"        if ((this._window.get_window().get_state() &amp; Gdk.WindowState.FULLSCREEN) != 0 ) {\n"
"              this._window.unfullscreen();\n"
"              this._leaveFullscreenButton.hide();\n"
"              this._fullscreenButton.show();\n"
"        }\n"
"        else {\n"
"             this._window.fullscreen();\n"
"             this._fullscreenButton.hide();\n"
"             this._leaveFullscreenButton.show();\n"
"        }\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application();\n"
"app.application.run(ARGV);\n"

#. (itstool) path: item/p
#: C/toolbar.js.page:31
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Window.html"
"\">Gtk.Window</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Window.html"
"\">Gtk.Window</link>"

#. (itstool) path: item/p
#: C/toolbar.js.page:32
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Toolbar.html"
"\">Gtk.Toolbar</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.Toolbar.html"
"\">Gtk.Toolbar</link>"

#. (itstool) path: item/p
#: C/toolbar.js.page:33
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ToolButton."
"html\">Gtk.ToolButton</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.ToolButton."
"html\">Gtk.ToolButton</link>"

#. (itstool) path: item/p
#: C/toolbar.js.page:34
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.html\">Gtk "
"Stock items</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.html\">Gtk에 "
"들어있는 항목</link>"

#. (itstool) path: item/p
#: C/toolbar.js.page:35
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gdk.WindowState."
"html\">Gdk.WindowState</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gdk.WindowState."
"html\">Gdk.WindowState</link>"

#. (itstool) path: info/title
#: C/toolbar.py.page:8
msgctxt "text"
msgid "Toolbar (Python)"
msgstr "Toolbar (Python)"

#. (itstool) path: info/desc
#: C/toolbar.py.page:20 C/toolbar_builder.py.page:33
msgid "A bar of buttons and other widgets"
msgstr "단추 및 기타 위젯 표시줄"

#. (itstool) path: page/p
#: C/toolbar.py.page:26
msgid "An example of toolbar with buttons (from stock icons)."
msgstr "(스톡 아이콘에서 온)단추를 Toolbar에 넣은 예제입니다."

#. (itstool) path: section/code
#: C/toolbar.py.page:33
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Toolbar Example\", application=app)\n"
"        self.set_default_size(400, 200)\n"
"\n"
"        # a grid to attach the toolbar\n"
"        grid = Gtk.Grid()\n"
"\n"
"        # a toolbar created in the method create_toolbar (see below)\n"
"        toolbar = self.create_toolbar()\n"
"        # with extra horizontal space\n"
"        toolbar.set_hexpand(True)\n"
"        # show the toolbar\n"
"        toolbar.show()\n"
"\n"
"        # attach the toolbar to the grid\n"
"        grid.attach(toolbar, 0, 0, 1, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"        # create the actions that control the window and connect their signal to a\n"
"        # callback method (see below):\n"
"\n"
"        # undo\n"
"        undo_action = Gio.SimpleAction.new(\"undo\", None)\n"
"        undo_action.connect(\"activate\", self.undo_callback)\n"
"        self.add_action(undo_action)\n"
"\n"
"        # fullscreen\n"
"        fullscreen_action = Gio.SimpleAction.new(\"fullscreen\", None)\n"
"        fullscreen_action.connect(\"activate\", self.fullscreen_callback)\n"
"        self.add_action(fullscreen_action)\n"
"\n"
"    # a method to create the toolbar\n"
"    def create_toolbar(self):\n"
"        # a toolbar\n"
"        toolbar = Gtk.Toolbar()\n"
"\n"
"        # which is the primary toolbar of the application\n"
"        toolbar.get_style_context().add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR)\n"
"\n"
"        # create a button for the \"new\" action, with a stock image\n"
"        new_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_NEW)\n"
"        # label is shown\n"
"        new_button.set_is_important(True)\n"
"        # insert the button at position in the toolbar\n"
"        toolbar.insert(new_button, 0)\n"
"        # show the button\n"
"        new_button.show()\n"
"        # set the name of the action associated with the button.\n"
"        # The action controls the application (app)\n"
"        new_button.set_action_name(\"app.new\")\n"
"\n"
"        # button for the \"open\" action\n"
"        open_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_OPEN)\n"
"        open_button.set_is_important(True)\n"
"        toolbar.insert(open_button, 1)\n"
"        open_button.show()\n"
"        open_button.set_action_name(\"app.open\")\n"
"\n"
"        # button for the \"undo\" action\n"
"        undo_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_UNDO)\n"
"        undo_button.set_is_important(True)\n"
"        toolbar.insert(undo_button, 2)\n"
"        undo_button.show()\n"
"        undo_button.set_action_name(\"win.undo\")\n"
"\n"
"        # button for the \"fullscreen/leave fullscreen\" action\n"
"        self.fullscreen_button = Gtk.ToolButton.new_from_stock(\n"
"            Gtk.STOCK_FULLSCREEN)\n"
"        self.fullscreen_button.set_is_important(True)\n"
"        toolbar.insert(self.fullscreen_button, 3)\n"
"        self.fullscreen_button.set_action_name(\"win.fullscreen\")\n"
"\n"
"        # return the complete toolbar\n"
"        return toolbar\n"
"\n"
"    # callback method for undo\n"
"    def undo_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"Undo\\\".\")\n"
"\n"
"    # callback method for fullscreen / leave fullscreen\n"
"    def fullscreen_callback(self, action, parameter):\n"
"        # check if the state is the same as Gdk.WindowState.FULLSCREEN, which\n"
"        # is a bit flag\n"
"        is_fullscreen = self.get_window().get_state(\n"
"        ) &amp; Gdk.WindowState.FULLSCREEN != 0\n"
"        if not is_fullscreen:\n"
"            self.fullscreen_button.set_stock_id(Gtk.STOCK_LEAVE_FULLSCREEN)\n"
"            self.fullscreen()\n"
"        else:\n"
"            self.fullscreen_button.set_stock_id(Gtk.STOCK_FULLSCREEN)\n"
"            self.unfullscreen()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # create the actions that control the window and connect their signal to a\n"
"        # callback method (see below):\n"
"\n"
"        # new\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        app.add_action(new_action)\n"
"\n"
"        # open\n"
"        open_action = Gio.SimpleAction.new(\"open\", None)\n"
"        open_action.connect(\"activate\", self.open_callback)\n"
"        app.add_action(open_action)\n"
"\n"
"    # callback method for new\n"
"    def new_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"New\\\".\")\n"
"\n"
"    # callback method for open\n"
"    def open_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"Open\\\".\")\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Toolbar Example\", application=app)\n"
"        self.set_default_size(400, 200)\n"
"\n"
"        # a grid to attach the toolbar\n"
"        grid = Gtk.Grid()\n"
"\n"
"        # a toolbar created in the method create_toolbar (see below)\n"
"        toolbar = self.create_toolbar()\n"
"        # with extra horizontal space\n"
"        toolbar.set_hexpand(True)\n"
"        # show the toolbar\n"
"        toolbar.show()\n"
"\n"
"        # attach the toolbar to the grid\n"
"        grid.attach(toolbar, 0, 0, 1, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"        # create the actions that control the window and connect their signal to a\n"
"        # callback method (see below):\n"
"\n"
"        # undo\n"
"        undo_action = Gio.SimpleAction.new(\"undo\", None)\n"
"        undo_action.connect(\"activate\", self.undo_callback)\n"
"        self.add_action(undo_action)\n"
"\n"
"        # fullscreen\n"
"        fullscreen_action = Gio.SimpleAction.new(\"fullscreen\", None)\n"
"        fullscreen_action.connect(\"activate\", self.fullscreen_callback)\n"
"        self.add_action(fullscreen_action)\n"
"\n"
"    # a method to create the toolbar\n"
"    def create_toolbar(self):\n"
"        # a toolbar\n"
"        toolbar = Gtk.Toolbar()\n"
"\n"
"        # which is the primary toolbar of the application\n"
"        toolbar.get_style_context().add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR)\n"
"\n"
"        # create a button for the \"new\" action, with a stock image\n"
"        new_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_NEW)\n"
"        # label is shown\n"
"        new_button.set_is_important(True)\n"
"        # insert the button at position in the toolbar\n"
"        toolbar.insert(new_button, 0)\n"
"        # show the button\n"
"        new_button.show()\n"
"        # set the name of the action associated with the button.\n"
"        # The action controls the application (app)\n"
"        new_button.set_action_name(\"app.new\")\n"
"\n"
"        # button for the \"open\" action\n"
"        open_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_OPEN)\n"
"        open_button.set_is_important(True)\n"
"        toolbar.insert(open_button, 1)\n"
"        open_button.show()\n"
"        open_button.set_action_name(\"app.open\")\n"
"\n"
"        # button for the \"undo\" action\n"
"        undo_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_UNDO)\n"
"        undo_button.set_is_important(True)\n"
"        toolbar.insert(undo_button, 2)\n"
"        undo_button.show()\n"
"        undo_button.set_action_name(\"win.undo\")\n"
"\n"
"        # button for the \"fullscreen/leave fullscreen\" action\n"
"        self.fullscreen_button = Gtk.ToolButton.new_from_stock(\n"
"            Gtk.STOCK_FULLSCREEN)\n"
"        self.fullscreen_button.set_is_important(True)\n"
"        toolbar.insert(self.fullscreen_button, 3)\n"
"        self.fullscreen_button.set_action_name(\"win.fullscreen\")\n"
"\n"
"        # return the complete toolbar\n"
"        return toolbar\n"
"\n"
"    # callback method for undo\n"
"    def undo_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"Undo\\\".\")\n"
"\n"
"    # callback method for fullscreen / leave fullscreen\n"
"    def fullscreen_callback(self, action, parameter):\n"
"        # check if the state is the same as Gdk.WindowState.FULLSCREEN, which\n"
"        # is a bit flag\n"
"        is_fullscreen = self.get_window().get_state(\n"
"        ) &amp; Gdk.WindowState.FULLSCREEN != 0\n"
"        if not is_fullscreen:\n"
"            self.fullscreen_button.set_stock_id(Gtk.STOCK_LEAVE_FULLSCREEN)\n"
"            self.fullscreen()\n"
"        else:\n"
"            self.fullscreen_button.set_stock_id(Gtk.STOCK_FULLSCREEN)\n"
"            self.unfullscreen()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # create the actions that control the window and connect their signal to a\n"
"        # callback method (see below):\n"
"\n"
"        # new\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        app.add_action(new_action)\n"
"\n"
"        # open\n"
"        open_action = Gio.SimpleAction.new(\"open\", None)\n"
"        open_action.connect(\"activate\", self.open_callback)\n"
"        app.add_action(open_action)\n"
"\n"
"    # callback method for new\n"
"    def new_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"New\\\".\")\n"
"\n"
"    # callback method for open\n"
"    def open_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"Open\\\".\")\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/toolbar.py.page:37
msgid "Useful methods for a Toolbar widget"
msgstr "Toolbar 위젯에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/toolbar.py.page:38
msgid ""
"In line 32 the signal <code>\"activate\"</code> from the action "
"<code>undo_action</code> is connected to the callback function "
"<code>undo_callback()</code> using <code><var>action</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"32번째 줄에서 <code>undo_action</code> 동작의 <code>\"activate\"</code> 시그"
"널은 <code><var>action</var>.connect(<var>signal</var>, <var>callback "
"function</var>)</code> 함수로 <code>undo_callback()</code> 콜백 함수에 연결했"
"습니다. 더 자세한 설명은 <link xref=\"signals-callbacks.py\"/>를 참조하십시"
"오."

#. (itstool) path: item/p
#: C/toolbar.py.page:41
msgid ""
"Use <code>insert(tool_item, position)</code> to insert the <code>tool_item</"
"code> at <code>position</code>. If <code>position</code> is negative, the "
"item is appended at the end of the toolbar."
msgstr ""
"<code>position</code> 위치에 <code>tool_item</code>을 넣으려면 "
"<code>insert(tool_item, position)</code> 함수를 사용하십시오. "
"<code>position</code> 값이 음수면 해당 항목을 도구 모음 마지막에 붙여넣습니"
"다."

#. (itstool) path: item/p
#: C/toolbar.py.page:42
msgid ""
"<code>get_item_index(tool_item)</code> retrieves the position of "
"<code>tool_item</code> on the toolbar."
msgstr ""
"<code>get_item_index(tool_item)</code> 함수는 도구 모음에서 <code>tool_item</"
"code> 항목의 위치를 가져옵니다."

#. (itstool) path: item/p
#: C/toolbar.py.page:43
msgid ""
"<code>get_n_items()</code> returns the number of items on the toolbar; "
"<code>get_nth_item(position)</code> returns the item in position "
"<code>position</code>."
msgstr ""
"<code>get_n_items()</code> 함수는 도구 모음의 항목 갯수를 가져옵니다. "
"<code>get_nth_item(position)</code> 함수는 <code>position</code> 위치의 항목"
"을 반환합니다."

#. (itstool) path: item/p
#: C/toolbar.py.page:44
msgid ""
"If the toolbar does not have room for all the menu items, and "
"<code>set_show_arrow(True)</code>, the items that do not have room are shown "
"through an overflow menu."
msgstr ""
"모든 메뉴 항목에 대해 ToolBar에서 공간을 가지고 있지 않고, "
"<code>set_show_arrow(True)</code> 함수를 실행했다면, 공간이 없는 항목은 오버"
"플로우 메뉴에 나타납니다."

#. (itstool) path: item/p
#: C/toolbar.py.page:45
msgid ""
"<code>set_icon_size(icon_size)</code> sets the size of icons in the toolbar; "
"<code>icon_size</code> can be one of <code>Gtk.IconSize.INVALID, Gtk."
"IconSize.MENU, Gtk.IconSize.SMALL_TOOLBAR, Gtk.IconSize.LARGE_TOOLBAR, Gtk."
"IconSize.BUTTON, Gtk.IconSize.DND, Gtk.IconSize.DIALOG</code>. This should "
"be used only for special-purpose toolbars, normal application toolbars "
"should respect user preferences for the size of icons. "
"<code>unset_icon_size()</code> unsets the preferences set with "
"<code>set_icon_size(icon_size)</code>, so that user preferences are used to "
"determine the icon size."
msgstr ""
"<code>set_icon_size(icon_size)</code> 함수는 도구 모음의 아이콘 크기를 설정합"
"니다. <code>icon_size</code> 값은 <code>Gtk.IconSize.INVALID, Gtk.IconSize."
"MENU, Gtk.IconSize.SMALL_TOOLBAR, Gtk.IconSize.LARGE_TOOLBAR, Gtk.IconSize."
"BUTTON, Gtk.IconSize.DND, Gtk.IconSize.DIALOG</code> 중 하나가 될 수 있습니"
"다. 도구 모음에 지정 목적을 위해서만 사용해야 하며 일반 프로그램 도구 모음에"
"서는 사용자가 원하는 아이콘 크기 설정을 따라야합니다. "
"<code>unset_icon_size()</code> 함수는 <code>set_icon_size(icon_size)</code> "
"함수로 설정한 항목의 설정을 취소하므로 아이콘 크기를 결정할 때 사용자 설정 값"
"을 사용합니다."

#. (itstool) path: item/p
#: C/toolbar.py.page:46
msgid ""
"<code>set_style(style)</code>, where <code>style</code> is one of <code>Gtk."
"ToolbarStyle.ICONS, Gtk.ToolbarStyle.TEXT, Gtk.ToolbarStyle.BOTH, Gtk."
"ToolbarStyle.BOTH_HORIZ</code>, sets if the toolbar shows only icons, only "
"text, or both (vertically stacked or alongside each other). To let user "
"preferences determine the toolbar style, and unset a toolbar style so set, "
"use <code>unset_style()</code>."
msgstr ""
"<code>style</code> 값을 <code>Gtk.ToolbarStyle.ICONS, Gtk.ToolbarStyle.TEXT, "
"Gtk.ToolbarStyle.BOTH, Gtk.ToolbarStyle.BOTH_HORIZ</code> 중 하나로 사용하는 "
"<code>set_style(style)</code> 함수는 도구 모음에 아이콘만 나타낼 지, 텍스트"
"만 나타낼 지, 아니면 둘 다(수직 방향, 수평 방향) 나타낼 지를 설정합니다. 사용"
"자 설정으로 도구 모음 모양새를 결정하게 하고, 도구 모음 모양새 설정을 취소하"
"려면 <code>unset_style()</code> 함수를 사용하십시오."

#. (itstool) path: item/p
#: C/toolbar.py.page:55
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkToolbar.html"
"\">GtkToolbar</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkToolbar.html"
"\">GtkToolbar</link>"

#. (itstool) path: item/p
#: C/toolbar.py.page:56
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkToolButton.html"
"\">GtkToolButton</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkToolButton.html"
"\">GtkToolButton</link>"

#. (itstool) path: item/p
#: C/toolbar.py.page:57
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkToolItem.html"
"\">GtkToolItem</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkToolItem.html"
"\">GtkToolItem</link>"

#. (itstool) path: item/p
#: C/toolbar.py.page:59
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkActionable.html"
"\">GtkActionable</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkActionable.html"
"\">GtkActionable</link>"

#. (itstool) path: item/p
#: C/toolbar.py.page:61 C/toolbar_builder.py.page:199
msgid ""
"<link href=\"http://developer.gnome.org/gdk3/unstable/gdk3-Event-Structures."
"html#GdkEventWindowState\">Event Structures</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gdk3/unstable/gdk3-Event-Structures."
"html#GdkEventWindowState\">이벤트 구조체</link>"

#. (itstool) path: info/title
#: C/toolbar.vala.page:8
msgctxt "text"
msgid "Toolbar (Vala)"
msgstr "Toolbar (Vala)"

#. (itstool) path: page/code
#: C/toolbar.vala.page:28
#, no-wrap
msgid ""
"/* This is the Window */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Instance variables belonging to the window */\n"
"\tGtk.Toolbar toolbar;\n"
"\tGtk.ToolButton new_button;\n"
"\tGtk.ToolButton open_button;\n"
"\tGtk.ToolButton undo_button;\n"
"\tGtk.ToolButton fullscreen_button;\n"
"\tGtk.ToolButton leave_fullscreen_button;\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Toolbar Example\");\n"
"\n"
"\t\tthis.set_default_size (400, 200);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tthis.add (grid);\n"
"\t\tgrid.show ();\n"
"\n"
"\t\tcreate_toolbar ();\n"
"\t\ttoolbar.set_hexpand (true);\n"
"\t\tgrid.attach (toolbar, 0, 0, 1, 1);\n"
"\t\ttoolbar.show ();\n"
"\n"
"\t\t/* create the \"undo\" window action action */\n"
"\t\tvar undo_action = new SimpleAction (\"undo\", null);\n"
"\t\tundo_action.activate.connect (undo_callback);\n"
"\t\tthis.add_action (undo_action);\n"
"\n"
"\t\t/* create the \"fullscreen\" window action */\n"
"\t\tvar fullscreen_action = new SimpleAction (\"fullscreen\", null);\n"
"\t\tfullscreen_action.activate.connect (fullscreen_callback);\n"
"\t\tthis.add_action (fullscreen_action);\n"
"\t}\n"
"\n"
"\t/* This function creates the toolbar, its  ToolButtons,\n"
"\t * and assigns the actions names to the ToolButtons.*/\n"
"\tvoid create_toolbar () {\n"
"\t\ttoolbar = new Gtk.Toolbar ();\n"
"\t\ttoolbar.get_style_context ().add_class (Gtk.STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"\t\tnew_button = new Gtk.ToolButton.from_stock (Gtk.Stock.NEW);\n"
"\t\tnew_button.is_important = true; //decides whether to show the label\n"
"\t\ttoolbar.add (new_button);\n"
"\t\tnew_button.show ();\n"
"\t\tnew_button.action_name = \"app.new\";\n"
"\n"
"\t\topen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.OPEN);\n"
"\t\topen_button.is_important = true;\n"
"\t\ttoolbar.add (open_button);\n"
"\t\topen_button.show ();\n"
"\t\topen_button.action_name = \"app.open\";\n"
"\n"
"\t\tundo_button = new Gtk.ToolButton.from_stock (Gtk.Stock.UNDO);\n"
"\t\tundo_button.is_important = true;\n"
"\t\ttoolbar.add (undo_button);\n"
"\t\tundo_button.show ();\n"
"\t\tundo_button.action_name = \"win.undo\";\n"
"\n"
"\t\tfullscreen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.FULLSCREEN);\n"
"\t\tfullscreen_button.is_important = true;\n"
"\t\ttoolbar.add (fullscreen_button);\n"
"\t\tfullscreen_button.show ();\n"
"\t\tfullscreen_button.action_name = \"win.fullscreen\";\n"
"\n"
"\t\tleave_fullscreen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.LEAVE_FULLSCREEN)\n"
";\n"
"\t\tleave_fullscreen_button.is_important = true;\n"
"\t\ttoolbar.add (leave_fullscreen_button);\n"
"\n"
"\t\tleave_fullscreen_button.action_name = \"win.fullscreen\";\n"
"\t}\n"
"\n"
"\tvoid undo_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Undo\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid fullscreen_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\tif ((this.get_window ().get_state () &amp; Gdk.WindowState.FULLSCREEN) != 0) {\n"
"\t\t\tthis.unfullscreen ();\n"
"\t\t\tleave_fullscreen_button.hide ();\n"
"\t\t\tfullscreen_button.show ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tthis.fullscreen ();\n"
"\t\t\tfullscreen_button.hide ();\n"
"\t\t\tleave_fullscreen_button.show ();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Create the \"new\" action and add it to the app*/\n"
"\t\tvar new_action = new SimpleAction (\"new\", null);\n"
"\t\tnew_action.activate.connect (new_callback);\n"
"\t\tthis.add_action (new_action);\n"
"\n"
"\t\t/* Create the \"open\" action, and add it to the app */\n"
"\t\tvar open_action = new SimpleAction (\"open\", null);\n"
"\t\topen_action.activate.connect (open_callback);\n"
"\t\tthis.add_action (open_action);\n"
"\n"
"\t\t/* You could also add the action to the app menu\n"
"\t\t * if you wanted to.\n"
"\t\t */\n"
"\t\t//var menu = new Menu ();\n"
"\t\t//menu.append (\"New\", \"app.new\");\n"
"\t\t//this.app_menu = menu;\n"
"\t}\n"
"\n"
"\tvoid new_callback (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"New\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid open_callback (SimpleAction action, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Open\\\".\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates the application and runs it. */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* This is the Window */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Instance variables belonging to the window */\n"
"\tGtk.Toolbar toolbar;\n"
"\tGtk.ToolButton new_button;\n"
"\tGtk.ToolButton open_button;\n"
"\tGtk.ToolButton undo_button;\n"
"\tGtk.ToolButton fullscreen_button;\n"
"\tGtk.ToolButton leave_fullscreen_button;\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Toolbar Example\");\n"
"\n"
"\t\tthis.set_default_size (400, 200);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tthis.add (grid);\n"
"\t\tgrid.show ();\n"
"\n"
"\t\tcreate_toolbar ();\n"
"\t\ttoolbar.set_hexpand (true);\n"
"\t\tgrid.attach (toolbar, 0, 0, 1, 1);\n"
"\t\ttoolbar.show ();\n"
"\n"
"\t\t/* create the \"undo\" window action action */\n"
"\t\tvar undo_action = new SimpleAction (\"undo\", null);\n"
"\t\tundo_action.activate.connect (undo_callback);\n"
"\t\tthis.add_action (undo_action);\n"
"\n"
"\t\t/* create the \"fullscreen\" window action */\n"
"\t\tvar fullscreen_action = new SimpleAction (\"fullscreen\", null);\n"
"\t\tfullscreen_action.activate.connect (fullscreen_callback);\n"
"\t\tthis.add_action (fullscreen_action);\n"
"\t}\n"
"\n"
"\t/* This function creates the toolbar, its  ToolButtons,\n"
"\t * and assigns the actions names to the ToolButtons.*/\n"
"\tvoid create_toolbar () {\n"
"\t\ttoolbar = new Gtk.Toolbar ();\n"
"\t\ttoolbar.get_style_context ().add_class (Gtk.STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"\t\tnew_button = new Gtk.ToolButton.from_stock (Gtk.Stock.NEW);\n"
"\t\tnew_button.is_important = true; //decides whether to show the label\n"
"\t\ttoolbar.add (new_button);\n"
"\t\tnew_button.show ();\n"
"\t\tnew_button.action_name = \"app.new\";\n"
"\n"
"\t\topen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.OPEN);\n"
"\t\topen_button.is_important = true;\n"
"\t\ttoolbar.add (open_button);\n"
"\t\topen_button.show ();\n"
"\t\topen_button.action_name = \"app.open\";\n"
"\n"
"\t\tundo_button = new Gtk.ToolButton.from_stock (Gtk.Stock.UNDO);\n"
"\t\tundo_button.is_important = true;\n"
"\t\ttoolbar.add (undo_button);\n"
"\t\tundo_button.show ();\n"
"\t\tundo_button.action_name = \"win.undo\";\n"
"\n"
"\t\tfullscreen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.FULLSCREEN);\n"
"\t\tfullscreen_button.is_important = true;\n"
"\t\ttoolbar.add (fullscreen_button);\n"
"\t\tfullscreen_button.show ();\n"
"\t\tfullscreen_button.action_name = \"win.fullscreen\";\n"
"\n"
"\t\tleave_fullscreen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.LEAVE_FULLSCREEN)\n"
";\n"
"\t\tleave_fullscreen_button.is_important = true;\n"
"\t\ttoolbar.add (leave_fullscreen_button);\n"
"\n"
"\t\tleave_fullscreen_button.action_name = \"win.fullscreen\";\n"
"\t}\n"
"\n"
"\tvoid undo_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Undo\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid fullscreen_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\tif ((this.get_window ().get_state () &amp; Gdk.WindowState.FULLSCREEN) != 0) {\n"
"\t\t\tthis.unfullscreen ();\n"
"\t\t\tleave_fullscreen_button.hide ();\n"
"\t\t\tfullscreen_button.show ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tthis.fullscreen ();\n"
"\t\t\tfullscreen_button.hide ();\n"
"\t\t\tleave_fullscreen_button.show ();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Create the \"new\" action and add it to the app*/\n"
"\t\tvar new_action = new SimpleAction (\"new\", null);\n"
"\t\tnew_action.activate.connect (new_callback);\n"
"\t\tthis.add_action (new_action);\n"
"\n"
"\t\t/* Create the \"open\" action, and add it to the app */\n"
"\t\tvar open_action = new SimpleAction (\"open\", null);\n"
"\t\topen_action.activate.connect (open_callback);\n"
"\t\tthis.add_action (open_action);\n"
"\n"
"\t\t/* You could also add the action to the app menu\n"
"\t\t * if you wanted to.\n"
"\t\t */\n"
"\t\t//var menu = new Menu ();\n"
"\t\t//menu.append (\"New\", \"app.new\");\n"
"\t\t//this.app_menu = menu;\n"
"\t}\n"
"\n"
"\tvoid new_callback (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"New\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid open_callback (SimpleAction action, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Open\\\".\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates the application and runs it. */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/toolbar.vala.page:34 C/toolbar_builder.vala.page:151
#: C/tooltip.vala.page:40
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Toolbar.html\">Gtk.Toolbar</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Toolbar.html\">Gtk.Toolbar</"
"link>"

#. (itstool) path: item/p
#: C/toolbar.vala.page:35 C/toolbar_builder.vala.page:152
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ToolButton.html\">Gtk."
"Toolbutton</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.ToolButton.html\">Gtk."
"Toolbutton</link>"

#. (itstool) path: item/p
#: C/toolbar.vala.page:36 C/toolbar_builder.vala.page:153
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Stock.html\">Gtk.Stock</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Stock.html\">Gtk.Stock</"
"link>"

#. (itstool) path: info/title
#: C/toolbar_builder.py.page:8
msgctxt "text"
msgid "Toolbar created using Glade (Python)"
msgstr "글레이드로 만든 도구 모음(Python)"

#. (itstool) path: page/title
#: C/toolbar_builder.py.page:36 C/toolbar_builder.vala.page:23
msgid "Toolbar created using Glade"
msgstr "글레이드로 만든 도구 모음"

#. (itstool) path: page/p
#: C/toolbar_builder.py.page:39
msgid ""
"This example is similar to <link xref=\"toolbar.py\"/>, except we use Glade "
"to create the toolbar in an XML .ui file."
msgstr ""
"이 예제는 XML .ui 파일을 만들 때 글레이드를 사용한다는 점만 빼면 <link xref="
"\"toolbar.py\"/>와 유사합니다."

#. (itstool) path: section/title
#: C/toolbar_builder.py.page:44
msgid "Creating the toolbar with Glade"
msgstr "글레이드로 도구 모음 만들기"

#. (itstool) path: section/p
#. (itstool) path: page/p
#: C/toolbar_builder.py.page:45 C/toolbar_builder.vala.page:28
msgid ""
"To create the toolbar using the <link href=\"http://glade.gnome.org/\">Glade "
"Interface Designer</link>:"
msgstr ""
"<link href=\"http://glade.gnome.org/\">글레이드 인터페이스 디자이너</link>로 "
"도구 모음을 만들려면:"

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:49 C/toolbar_builder.vala.page:32
msgid "Open Glade, and save the file as <file>toolbar_builder.ui</file>"
msgstr "글레이드를 열고 <file>toolbar_builder.ui</file> 파일로 저장하십시오"

#. (itstool) path: p/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:50 C/toolbar_builder.vala.page:33
msgctxt "_"
msgid ""
"external ref='media/glade_ui.png' md5='baea74fe213bc12ea934f64f6977215a'"
msgstr ""

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:50 C/toolbar_builder.vala.page:33
msgid ""
"<media type=\"image\" src=\"media/glade_ui.png\" width=\"900\"> Screenshot "
"of Glade ui </media>"
msgstr ""
"<media type=\"image\" src=\"media/glade_ui.png\" width=\"900\"> 글레이드 사용"
"자 인터페이스 스크린샷 </media>"

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:55 C/toolbar_builder.vala.page:38
msgid ""
"Under <gui>Containers</gui> on the left hand side, right click on the "
"toolbar icon and select <gui>Add widget as toplevel</gui>."
msgstr ""
"왼편의 <gui>컨테이너</gui>에서, 도구모음 아이콘에 마우스 커서를 올려둔 후 오"
"른쪽 단추를 누르고 <gui>최상위에 위젯 추가</gui>를 선택하십시오."

#. (itstool) path: p/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:56 C/toolbar_builder.vala.page:39
msgctxt "_"
msgid ""
"external ref='media/glade_select_toolbar.png' "
"md5='f7b5b224050b2e387eb04362fc99df00'"
msgstr ""

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:56 C/toolbar_builder.vala.page:39
msgid ""
"<media type=\"image\" src=\"media/glade_select_toolbar.png\"> Screenshot of "
"toolbar icon in Glade ui </media>"
msgstr ""
"<media type=\"image\" src=\"media/glade_select_toolbar.png\"> 글레이드 UI 도"
"구 모음 아이콘 스크린샷 </media>"

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:61 C/toolbar_builder.vala.page:44
msgid ""
"Under the <gui>General</gui> tab on the bottom right, change the <gui>Name</"
"gui> to <input>toolbar</input> and <gui>Show Arrow</gui> to <gui>No</gui>."
msgstr ""
"하단 우측의 <gui>일반</gui> 탭에서 , <gui>이름</gui>을 <input>toolbar</input>"
"로 바꾸고 <gui>Show Arrow</gui>는 <gui>No</gui>로 바꾸십시오."

#. (itstool) path: p/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:62 C/toolbar_builder.vala.page:45
msgctxt "_"
msgid ""
"external ref='media/glade_toolbar_general.png' "
"md5='e31daba6e8a3e526aca89d5f1622edaa'"
msgstr ""

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:62 C/toolbar_builder.vala.page:45
msgid ""
"<media type=\"image\" src=\"media/glade_toolbar_general.png\"> Screenshot of "
"General tab </media>"
msgstr ""
"<media type=\"image\" src=\"media/glade_toolbar_general.png\"> 일반 탭 스크린"
"샷 </media>"

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:67 C/toolbar_builder.vala.page:50
msgid ""
"Under the <gui>Common</gui> tab, set <gui>Horizontal Expand</gui> to "
"<gui>Yes</gui>."
msgstr ""
"<gui>공통 사항</gui> 탭에서, <gui>수평 확장</gui>을 <gui>Yes</gui>로 설정하십"
"시오."

#. (itstool) path: p/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:68 C/toolbar_builder.vala.page:51
msgctxt "_"
msgid ""
"external ref='media/glade_toolbar_common.png' "
"md5='d5ec6cc0218ca98e195dbd033feb9ac5'"
msgstr ""

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:68 C/toolbar_builder.vala.page:51
msgid ""
"<media type=\"image\" src=\"media/glade_toolbar_common.png\"> Screenshot of "
"Common tab </media>"
msgstr ""
"<media type=\"image\" src=\"media/glade_toolbar_common.png\"> 공통 사항 탭 스"
"크린샷 </media>"

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:73 C/toolbar_builder.vala.page:56
msgid ""
"Right click on the toolbar in the top right and select <gui>Edit</gui>. The "
"<gui>Tool Bar Editor</gui> window will appear."
msgstr ""
"우측 상단의 도구 모음에서 마우스 오른쪽 단추를 누른후 <gui>편집</gui>을 선택"
"하십시오. <gui>도구 모음 편집기</gui> 창이 뜹니다."

#. (itstool) path: p/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:74 C/toolbar_builder.vala.page:57
msgctxt "_"
msgid ""
"external ref='media/glade_toolbar_edit.png' "
"md5='feb1e2b7040d24a4d030f94cf07c81fd'"
msgstr ""

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:74 C/toolbar_builder.vala.page:57
msgid ""
"<media type=\"image\" src=\"media/glade_toolbar_edit.png\"> Screenshot of "
"where to right click to edit toolbar. </media>"
msgstr ""
"<media type=\"image\" src=\"media/glade_toolbar_edit.png\"> 도구 모음을 편집"
"할 때 오른쪽 단추를 누를 부분의 스크린샷. </media>"

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:79 C/toolbar_builder.vala.page:62
msgid ""
"We want to add 5 ToolButtons: New, Open, Undo, Fullscreen and Leave "
"Fullscreen. First, we will add the New ToolButton."
msgstr ""
"새 파일, 열기, 실행 취소, 전체 화면, 전체 화면 나가기 도구 단추 5개를 추가하"
"겠습니다. 우선 새 도구 단추를 추가하겠습니다."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:82 C/toolbar_builder.vala.page:65
msgid "Under <gui>Hierarchy</gui> tab, click <gui>Add</gui>."
msgstr "<gui>계층 구조</gui> 탭에서, <gui>추가</gui>를 누르십시오."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:83 C/toolbar_builder.vala.page:66
msgid "Change the name of the ToolItem to <input>new_button</input>."
msgstr "ToolItem 이름을 <input>new_button</input>으로 바꾸십시오."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:84 C/toolbar_builder.vala.page:67
msgid ""
"Scroll down and set <gui>Is important</gui> to <gui>Yes</gui>. This will "
"cause the label of the ToolButton to be shown, when you view the toolbar."
msgstr ""
"스크롤을 내린 후 <gui>Is important</gui>를 <gui>Yes</gui>로 설정하십시오. 이"
"렇게 설정하면, 도구 모음에서 도구 단추 레이블이 나타납니다."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:85 C/toolbar_builder.vala.page:68
msgid "Enter the <gui>action name</gui>: <input>app.new</input>."
msgstr "<gui>동작 이름</gui>을 <input>app.new</input>로 입력하십시오."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:86 C/toolbar_builder.vala.page:69
msgid "Change the <gui>Label</gui> to <input>New</input>."
msgstr "<gui>레이블</gui>을 <input>New</input>로 바꾸십시오."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:87 C/toolbar_builder.vala.page:70
msgid ""
"Select the <gui>New</gui> Stock Id from the drop down menu, or type "
"<input>gtk-new</input>."
msgstr ""
"드롭 다운 메뉴에서 <gui>새로 만들기</gui>의 스톡 ID를 선택하거나 <input>gtk-"
"new</input>를 입력하십시오."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:89 C/toolbar_builder.vala.page:72
msgid ""
"Repeat the above steps for the remaining ToolButtons, with the following "
"properties:"
msgstr ""
"나머지 ToolButton에 대해 위 단계를 반복하시고, 다음 속성을 설정하십시오:"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:96 C/toolbar_builder.vala.page:79
msgid "Is important"
msgstr "중요 여부"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:97 C/toolbar_builder.vala.page:80
msgid "Action name"
msgstr "동작 이름"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:99 C/toolbar_builder.vala.page:82
msgid "Stock Id"
msgstr "스톡 ID"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:104 C/toolbar_builder.vala.page:87
msgid "open_button"
msgstr "open_button"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:105 C/toolbar_builder.py.page:112
#: C/toolbar_builder.py.page:119 C/toolbar_builder.py.page:126
#: C/toolbar_builder.vala.page:88 C/toolbar_builder.vala.page:95
#: C/toolbar_builder.vala.page:102 C/toolbar_builder.vala.page:109
msgid "Yes"
msgstr "예"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:106 C/toolbar_builder.vala.page:89
msgid "app.open"
msgstr "app.open"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:107 C/toolbar_builder.vala.page:90
msgid "Open"
msgstr "열기"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:108 C/toolbar_builder.vala.page:91
msgid "gtk-open"
msgstr "gtk-open"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:111 C/toolbar_builder.vala.page:94
msgid "undo_button"
msgstr "undo_button"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:113 C/toolbar_builder.vala.page:96
msgid "win.undo"
msgstr "win.undo"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:114 C/toolbar_builder.vala.page:97
msgid "Undo"
msgstr "실행 취소"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:115 C/toolbar_builder.vala.page:98
msgid "gtk-undo"
msgstr "gtk-undo"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:118 C/toolbar_builder.vala.page:101
msgid "fullscreen_button"
msgstr "fullscreen_button"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:120 C/toolbar_builder.py.page:127
#: C/toolbar_builder.vala.page:103 C/toolbar_builder.vala.page:110
msgid "win.fullscreen"
msgstr "win.fullscreen"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:121 C/toolbar_builder.vala.page:104
msgid "Fullscreen"
msgstr "최대 화면"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:122 C/toolbar_builder.vala.page:105
msgid "gtk-fullscreen"
msgstr "gtk-fullscreen"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:125 C/toolbar_builder.vala.page:108
msgid "leave_fullscreen_button"
msgstr "leave_fullscreen_button"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:128 C/toolbar_builder.vala.page:111
msgid "Leave Fullscreen"
msgstr "전체 화면 나가기"

#. (itstool) path: td/p
#: C/toolbar_builder.py.page:129 C/toolbar_builder.vala.page:112
msgid "gtk-leave-fullscreen"
msgstr "gtk-leave-fullscreen"

#. (itstool) path: item/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:133 C/toolbar_builder.vala.page:116
msgctxt "_"
msgid ""
"external ref='media/glade_toolbar_editor.png' "
"md5='8af65241e5ca47d5494a7b36640e6f1c'"
msgstr ""

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:138 C/toolbar_builder.vala.page:121
msgid "Close the <gui>Tool Bar Editor</gui>."
msgstr "<gui>도구 모음 편집기</gui>를 닫으십시오."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:141
msgid ""
"When our program will first start, we do not want the <gui>Leave Fullscreen</"
"gui> ToolButton to be visible, since the application will not be in "
"fullscreen mode. You can set this in the <gui>Common</gui> tab, by clicking "
"the <gui>Visible</gui> property to <gui>No</gui>. The ToolButton will still "
"appear in the interface designer, but will behave correctly when the file is "
"loaded into your program code. Note that the method <code>show_all()</code> "
"would override this setting - so in the code we have to use <code>show()</"
"code> separately on all the elements."
msgstr ""
"프로그램을 처음 시작할 때, 프로그램이 전체 화면 모드가 아니기에 <gui>전체 화"
"면 나가기</gui> ToolButton을 나타내고 싶진 않습니다. 이 설정은 <gui>일반</"
"gui>  탭에서 <gui>Visible</gui>을 누르고 <gui>No</gui>로 설정할 수 있습니다. "
"ToolButton은 인터페이스 디자이너에서 여전히 나타나겠지만 프로그램 코드에 파일"
"을 불러올 때, 상태에 따라 올바르게 나타납니다. 참고로 <code>show_all()</"
"code> 메서드는 이 설정을 무시한 채로 적용합니다. 따라서, 코드에서는 모든 구성"
"요소에 <code>show()</code> 함수를 각각 적용해야합니다."

#. (itstool) path: p/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/toolbar_builder.py.page:142 C/toolbar_builder.vala.page:125
msgctxt "_"
msgid ""
"external ref='media/glade_visible_no.png' "
"md5='dc6c025aa825f4d772fbd283d6330026'"
msgstr ""

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:142 C/toolbar_builder.vala.page:125
msgid ""
"<media type=\"image\" src=\"media/glade_visible_no.png\"> Setting the "
"visible property to No </media>"
msgstr ""
"<media type=\"image\" src=\"media/glade_visible_no.png\"> visible 속성을 No"
"로 설정 </media>"

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:147 C/toolbar_builder.vala.page:130
msgid "Save your work, and close Glade."
msgstr "작업을 저장하고 글레이드를 닫으십시오."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:150 C/toolbar_builder.vala.page:133
msgid ""
"The XML file created by Glade is shown below. This is the description of the "
"toolbar. At the time of this writing, the option to add the class Gtk."
"STYLE_CLASS_PRIMARY_TOOLBAR in the Glade Interface did not exist. We can "
"manually add this to the XML file. To do this, add the following XML code at "
"line 9 of <file>toolbar_builder.ui</file>:"
msgstr ""
"글레이드에서 만든 XML 파일은 아래와 같습니다. 도구 모음의 설명 부분입니다. "
"이 글을 쓰는 시점에서는 글레이드 인터페이스에서 추가할 Gtk."
"STYLE_CLASS_PRIMARY_TOOLBAR 옵션 클래스가 없습니다. 이 옵션 클래스를 XML 파일"
"에 직접 추가할 수 있습니다. 이렇게 하려면, 다음 <file>toolbar_builder.ui</"
"file> XML 코드 9번째 줄에  추가하십시오:"

#. (itstool) path: item/code
#: C/toolbar_builder.py.page:151 C/toolbar_builder.vala.page:134
#, no-wrap
msgid ""
"\n"
"  &lt;style&gt;\n"
"     &lt;class name=\"primary-toolbar\"/&gt;\n"
"  &lt;/style&gt;\n"
"  "
msgstr ""
"\n"
"  &lt;style&gt;\n"
"     &lt;class name=\"primary-toolbar\"/&gt;\n"
"  &lt;/style&gt;\n"
"  "

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:156 C/toolbar_builder.vala.page:139
msgid ""
"If you do not add this, the program will still work fine. The resulting "
"toolbar will however look slightly different then the screenshot at the top "
"of this page."
msgstr ""
"추가하지 않았더라도 프로그램은 여전히 멀쩡하게 동작합니다. Toolbar의 결과는 "
"이 페이지 상단의 스크린샷보다는 약간 다르게 보일 수도 있습니다."

#. (itstool) path: section/code
#. (itstool) path: page/code
#: C/toolbar_builder.py.page:159 C/toolbar_builder.vala.page:142
#, no-wrap
msgid ""
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;!-- interface-requires gtk+ 3.0 --&gt;\n"
"  &lt;object class=\"GtkToolbar\" id=\"toolbar\"&gt;\n"
"    &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"    &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"    &lt;property name=\"hexpand\"&gt;True&lt;/property&gt;\n"
"    &lt;property name=\"show_arrow\"&gt;False&lt;/property&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"new_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;app.new&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;New&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-new&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"open_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;app.open&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;Open&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-open&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"undo_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;win.undo&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;Undo&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-undo&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"fullscreen_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;win.fullscreen&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;Fullscreen&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-fullscreen&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"leave_fullscreen_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;win.fullscreen&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;Leave Fullscreen&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-leave-fullscreen&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"  &lt;/object&gt;\n"
"&lt;/interface&gt;\n"
msgstr ""
"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"
"&lt;interface&gt;\n"
"  &lt;!-- interface-requires gtk+ 3.0 --&gt;\n"
"  &lt;object class=\"GtkToolbar\" id=\"toolbar\"&gt;\n"
"    &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"    &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"    &lt;property name=\"hexpand\"&gt;True&lt;/property&gt;\n"
"    &lt;property name=\"show_arrow\"&gt;False&lt;/property&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"new_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;app.new&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;New&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-new&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"open_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;app.open&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;Open&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-open&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"undo_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;win.undo&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;Undo&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-undo&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"fullscreen_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"visible\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;win.fullscreen&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;Fullscreen&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-fullscreen&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"    &lt;child&gt;\n"
"      &lt;object class=\"GtkToolButton\" id=\"leave_fullscreen_button\"&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"use_action_appearance\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"is_important\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"action_name\"&gt;win.fullscreen&lt;/property&gt;\n"
"        &lt;property name=\"label\" translatable=\"yes\"&gt;Leave Fullscreen&lt;/property&gt;\n"
"        &lt;property name=\"use_underline\"&gt;True&lt;/property&gt;\n"
"        &lt;property name=\"stock_id\"&gt;gtk-leave-fullscreen&lt;/property&gt;\n"
"      &lt;/object&gt;\n"
"      &lt;packing&gt;\n"
"        &lt;property name=\"expand\"&gt;False&lt;/property&gt;\n"
"        &lt;property name=\"homogeneous\"&gt;True&lt;/property&gt;\n"
"      &lt;/packing&gt;\n"
"    &lt;/child&gt;\n"
"  &lt;/object&gt;\n"
"&lt;/interface&gt;\n"

#. (itstool) path: section/p
#. (itstool) path: page/p
#: C/toolbar_builder.py.page:166 C/toolbar_builder.vala.page:144
msgid ""
"We now create the code below, which adds the toolbar from the file we just "
"created."
msgstr ""
"이제 앞서 만들었던 파일로 Toolbar를 추가하는 아래 코드를 작성하겠습니다."

#. (itstool) path: section/code
#: C/toolbar_builder.py.page:167
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Toolbar Example\", application=app)\n"
"        self.set_default_size(400, 200)\n"
"\n"
"        # a grid to attach the toolbar (see below)\n"
"        grid = Gtk.Grid()\n"
"        self.add(grid)\n"
"        # we have to show the grid (and therefore the toolbar) with show(),\n"
"        # as show_all() would show also the buttons in the toolbar that we want to\n"
"        # be hidden (such as the leave_fullscreen button)\n"
"        grid.show()\n"
"\n"
"        # a builder to add the UI designed with Glade to the grid:\n"
"        builder = Gtk.Builder()\n"
"        # get the file (if it is there)\n"
"        try:\n"
"            builder.add_from_file(\"toolbar_builder.ui\")\n"
"        except:\n"
"            print(\"file not found\")\n"
"            sys.exit()\n"
"        # and attach it to the grid\n"
"        grid.attach(builder.get_object(\"toolbar\"), 0, 0, 1, 1)\n"
"\n"
"        # two buttons that will be used later in a method\n"
"        self.fullscreen_button = builder.get_object(\"fullscreen_button\")\n"
"        self.leave_fullscreen_button = builder.get_object(\n"
"            \"leave_fullscreen_button\")\n"
"\n"
"        # create the actions that control the window, connect their signal to a\n"
"        # callback method (see below), add the action to the window:\n"
"\n"
"        # undo\n"
"        undo_action = Gio.SimpleAction.new(\"undo\", None)\n"
"        undo_action.connect(\"activate\", self.undo_callback)\n"
"        self.add_action(undo_action)\n"
"\n"
"        # and fullscreen\n"
"        fullscreen_action = Gio.SimpleAction.new(\"fullscreen\", None)\n"
"        fullscreen_action.connect(\"activate\", self.fullscreen_callback)\n"
"        self.add_action(fullscreen_action)\n"
"\n"
"    # callback for undo\n"
"    def undo_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"Undo\\\".\")\n"
"\n"
"    # callback for fullscreen\n"
"    def fullscreen_callback(self, action, parameter):\n"
"        # check if the state is the same as Gdk.WindowState.FULLSCREEN, which\n"
"        # is a bit flag\n"
"        is_fullscreen = self.get_window().get_state(\n"
"        ) &amp; Gdk.WindowState.FULLSCREEN != 0\n"
"        if is_fullscreen:\n"
"            self.unfullscreen()\n"
"            self.leave_fullscreen_button.hide()\n"
"            self.fullscreen_button.show()\n"
"        else:\n"
"            self.fullscreen()\n"
"            self.fullscreen_button.hide()\n"
"            self.leave_fullscreen_button.show()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        # show the window - with show() not show_all() because that would show also\n"
"        # the leave_fullscreen button\n"
"        win.show()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # actions that control the application: create, connect their signal to a\n"
"        # callback method (see below), add the action to the application\n"
"\n"
"        # new\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        app.add_action(new_action)\n"
"\n"
"        # open\n"
"        open_action = Gio.SimpleAction.new(\"open\", None)\n"
"        open_action.connect(\"activate\", self.open_callback)\n"
"        app.add_action(open_action)\n"
"\n"
"    # callback for new\n"
"    def new_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"New\\\".\")\n"
"\n"
"    # callback for open\n"
"    def open_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"Open\\\".\")\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Toolbar Example\", application=app)\n"
"        self.set_default_size(400, 200)\n"
"\n"
"        # a grid to attach the toolbar (see below)\n"
"        grid = Gtk.Grid()\n"
"        self.add(grid)\n"
"        # we have to show the grid (and therefore the toolbar) with show(),\n"
"        # as show_all() would show also the buttons in the toolbar that we want to\n"
"        # be hidden (such as the leave_fullscreen button)\n"
"        grid.show()\n"
"\n"
"        # a builder to add the UI designed with Glade to the grid:\n"
"        builder = Gtk.Builder()\n"
"        # get the file (if it is there)\n"
"        try:\n"
"            builder.add_from_file(\"toolbar_builder.ui\")\n"
"        except:\n"
"            print(\"file not found\")\n"
"            sys.exit()\n"
"        # and attach it to the grid\n"
"        grid.attach(builder.get_object(\"toolbar\"), 0, 0, 1, 1)\n"
"\n"
"        # two buttons that will be used later in a method\n"
"        self.fullscreen_button = builder.get_object(\"fullscreen_button\")\n"
"        self.leave_fullscreen_button = builder.get_object(\n"
"            \"leave_fullscreen_button\")\n"
"\n"
"        # create the actions that control the window, connect their signal to a\n"
"        # callback method (see below), add the action to the window:\n"
"\n"
"        # undo\n"
"        undo_action = Gio.SimpleAction.new(\"undo\", None)\n"
"        undo_action.connect(\"activate\", self.undo_callback)\n"
"        self.add_action(undo_action)\n"
"\n"
"        # and fullscreen\n"
"        fullscreen_action = Gio.SimpleAction.new(\"fullscreen\", None)\n"
"        fullscreen_action.connect(\"activate\", self.fullscreen_callback)\n"
"        self.add_action(fullscreen_action)\n"
"\n"
"    # callback for undo\n"
"    def undo_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"Undo\\\".\")\n"
"\n"
"    # callback for fullscreen\n"
"    def fullscreen_callback(self, action, parameter):\n"
"        # check if the state is the same as Gdk.WindowState.FULLSCREEN, which\n"
"        # is a bit flag\n"
"        is_fullscreen = self.get_window().get_state(\n"
"        ) &amp; Gdk.WindowState.FULLSCREEN != 0\n"
"        if is_fullscreen:\n"
"            self.unfullscreen()\n"
"            self.leave_fullscreen_button.hide()\n"
"            self.fullscreen_button.show()\n"
"        else:\n"
"            self.fullscreen()\n"
"            self.fullscreen_button.hide()\n"
"            self.leave_fullscreen_button.show()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        # show the window - with show() not show_all() because that would show also\n"
"        # the leave_fullscreen button\n"
"        win.show()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        # actions that control the application: create, connect their signal to a\n"
"        # callback method (see below), add the action to the application\n"
"\n"
"        # new\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        app.add_action(new_action)\n"
"\n"
"        # open\n"
"        open_action = Gio.SimpleAction.new(\"open\", None)\n"
"        open_action.connect(\"activate\", self.open_callback)\n"
"        app.add_action(open_action)\n"
"\n"
"    # callback for new\n"
"    def new_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"New\\\".\")\n"
"\n"
"    # callback for open\n"
"    def open_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"Open\\\".\")\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/toolbar_builder.py.page:172
msgid "Useful methods for Gtk.Builder"
msgstr "Gtk.Builder에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/toolbar_builder.py.page:173
msgid ""
"For the useful methods for a Toolbar widget, see <link xref=\"toolbar.py\"/>"
msgstr ""
"Toolbar 위젯의 쓸만한 메서드를 찾아보려면 <link xref=\"toolbar.py\"/>를 참고"
"하십시오"

#. (itstool) path: section/p
#: C/toolbar_builder.py.page:175
msgid "Gtk.Builder builds an interface from an XML UI definition."
msgstr "Gtk.Builder는 XML UI 정의로 인터페이스를 만듭니다."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:178
msgid ""
"<code>add_from_file(filename)</code> loads and parses the given file and "
"merges it with the current contents of the Gtk.Builder."
msgstr ""
"<code>add_from_file(filename)</code> 함수는 주어진 파일을 불러오고 해석한 다"
"음 Gtk.Builder의 현재 내용과 합칩니다."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:179
msgid ""
"<code>add_from_string(string)</code> parses the given string and merges it "
"with the current contents of the Gtk.Builder."
msgstr ""
"<code>add_from_string(string)</code> 함수는 주어진 문자열을 해석하고 Gtk."
"Builder의 현재 내용과 합칩니다."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:180
msgid ""
"<code>add_objects_from_file(filename, object_ids)</code> is the same as "
"<code>add_from_file()</code>, but it loads only the objects with the ids "
"given in the <code>object_id</code>s list."
msgstr ""
"<code>add_objects_from_file(filename, object_ids)</code> 함수는 "
"<code>add_from_file()</code> 함수와 동일하지만, <code>object_id</code> 목록"
"에 주어진 ID가 딸린 객체만을 불러옵니다."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:181
msgid ""
"<code>add_objects_from_string(string, object_ids)</code> is the same as "
"<code>add_from_string()</code>, but it loads only the objects with the ids "
"given in the <code>object_id</code>s list."
msgstr ""
"<code>add_objects_from_string(string, object_ids)</code> 함수는 "
"<code>add_from_string()</code>함수와 동일하지만, <code>object_id</code> 목록"
"에 주어진 ID의 객체만을 불러옵니다."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:182
msgid ""
"<code>get_object(object_id)</code> retrieves the widget with the id "
"<code>object_id</code> from the loaded objects in the builder."
msgstr ""
"<code>get_object(object_id)</code> 함수는 빌더에서 불러온 객체의 "
"<code>object_id</code> ID를 가진 위젯을 가져옵니다."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:183
msgid "<code>get_objects()</code> returns all loaded objects."
msgstr "<code>get_objects()</code> 함수는 불러온 모든 객체를 반환합니다."

#. (itstool) path: item/p
#: C/toolbar_builder.py.page:184
msgid ""
"<code>connect_signals(handler_object)</code> connects the signals to the "
"methods given in the <code>handler_object</code>. This can be any object "
"which contains keys or attributes that are called like the signal handler "
"names given in the interface description, e.g. a class or a dict. In line 39 "
"the signal <code>\"activate\"</code> from the action <code>undo_action</"
"code> is connected to the callback function <code>undo_callback()</code> "
"using <code><var>action</var>.connect(<var>signal</var>, <var>callback "
"function</var>)</code>. See <link xref=\"signals-callbacks.py\"/> for a more "
"detailed explanation."
msgstr ""
"<code>connect_signals(handler_object)</code> 함수는 <code>handler_object</"
"code>로 지정한 메서드에 시그널을 연결합니다. 이 함수에는 class 또는 dict 처"
"럼 인터페이스 설명에 주어진 시그널 핸들러 이름처럼 키 또는 속성이 들어간 객체"
"가 될 수 있습니다. 39번째 줄에서 <code>undo_action</code> 동작의 <code>"
"\"activate\"</code> 시그널은 <code><var>action</var>.connect(<var>signal</"
"var>, <var>callback function</var>)</code> 함수로 <code>undo_callback()</"
"code> 콜백 함수에 연결했습니다. 더 자세한 설명은 <link xref=\"signals-"
"callbacks.py\"/>를 참조하십시오."

#. (itstool) path: info/title
#: C/toolbar_builder.vala.page:8
msgctxt "text"
msgid "Toolbar created using Glade (Vala)"
msgstr "글레이드로 만든 도구 모음(Vala)"

#. (itstool) path: page/p
#: C/toolbar_builder.vala.page:26
msgid ""
"This example is similar to <link xref=\"toolbar.vala\"/>, except we use "
"Glade to create the toolbar in an XML ui file."
msgstr ""
"이 예제는 XML UI 파일을 사용해 도구 모음을 만들 때 글레이드를 사용할 수 있다"
"는 점은 빼고 <link xref=\"toolbar.vala\"/>와 유사합니다."

#. (itstool) path: item/p
#: C/toolbar_builder.vala.page:124
msgid ""
"When our program will first start, we don't want the <gui>Leave Fullscreen</"
"gui> ToolButton to be visible, since the application will not be in "
"fullscreen mode. You can set this in the <gui>Common</gui> tab, by clicking "
"the <gui>Visible</gui> property to <gui>No</gui>. The ToolButton will still "
"appear in the interface designer, but will behave correctly when the file is "
"loaded into your program code."
msgstr ""
"프로그램을 처음 시작할 때, 프로그램이 전체 화면 모드가 아니기에 <gui>전체 화"
"면 나가기</gui> ToolButton을 나타내고 싶진 않습니다. 이 설정은 <gui>일반</"
"gui>  탭에서 <gui>Visible</gui>을 누르고 <gui>No</gui>로 설정할 수 있습니다. "
"ToolButton은 인터페이스 디자이너에서 여전히 나타나겠지만 프로그램 코드에 파일"
"을 불러올 때, 상태에 따라 올바르게 나타납니다."

#. (itstool) path: page/code
#: C/toolbar_builder.vala.page:145
#, no-wrap
msgid ""
"/* This is the Window */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Declare these two ToolButtons, as we will get them\n"
"\t * from the ui file (see lines 32 and 33), so we can\n"
"\t * hide() and show() them as needed.*/\n"
"\tGtk.ToolButton fullscreen_button;\n"
"\tGtk.ToolButton leave_fullscreen_button;\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Toolbar Example\");\n"
"\n"
"\t\tthis.set_default_size (400, 200);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tthis.add (grid);\n"
"\t\tgrid.show ();\n"
"\n"
"\t\t/* add the toolbar from the ui file */\n"
"\t\tvar builder = new Gtk.Builder ();\n"
"\t\ttry {\n"
"\t\t\tbuilder.add_from_file (\"toolbar_builder.ui\");\n"
"\t\t}\n"
"\t\t/* Handle the exception */\n"
"\t\tcatch (Error e) {\n"
"\t\t\terror (\"Unable to load file: %s\", e.message);\n"
"\t\t}\n"
"\n"
"\t\tgrid.attach (builder.get_object (\"toolbar\") as Gtk.Toolbar, 0, 0, 1, 1);\n"
"\n"
"\t\t/* get these objects from the ui file so we can toggle between them */\n"
"\t\tfullscreen_button = builder.get_object (\"fullscreen_button\") as Gtk.ToolButton;\n"
"\t\tleave_fullscreen_button = builder.get_object (\"leave_fullscreen_button\") as Gtk.ToolButton;\n"
"\n"
"\t\t/* create the \"undo\" window action action */\n"
"\t\tvar undo_action = new SimpleAction (\"undo\", null);\n"
"\t\tundo_action.activate.connect (undo_callback);\n"
"\t\tthis.add_action (undo_action);\n"
"\n"
"\t\t/* create the \"fullscreen\" window action */\n"
"\t\tvar fullscreen_action = new SimpleAction (\"fullscreen\", null);\n"
"\t\tfullscreen_action.activate.connect (fullscreen_callback);\n"
"\t\tthis.add_action (fullscreen_action);\n"
"\t}\n"
"\n"
"\tvoid undo_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Undo\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid fullscreen_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\tif ((this.get_window ().get_state () &amp; Gdk.WindowState.FULLSCREEN) != 0) {\n"
"\t\t\tthis.unfullscreen ();\n"
"\t\t\tleave_fullscreen_button.hide ();\n"
"\t\t\tfullscreen_button.show ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tthis.fullscreen ();\n"
"\t\t\tfullscreen_button.hide ();\n"
"\t\t\tleave_fullscreen_button.show ();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Create the \"new\" action and add it to the app*/\n"
"\t\tvar new_action = new SimpleAction (\"new\", null);\n"
"\t\tnew_action.activate.connect (new_callback);\n"
"\t\tthis.add_action (new_action);\n"
"\n"
"\t\t/* Create the \"open\" action, and add it to the app */\n"
"\t\tvar open_action = new SimpleAction (\"open\", null);\n"
"\t\topen_action.activate.connect (open_callback);\n"
"\t\tthis.add_action (open_action);\n"
"\n"
"\t\t/* You could also add the action to the app menu\n"
"\t\t * if you wanted to.\n"
"\t\t */\n"
"\t\t//var menu = new Menu ();\n"
"\t\t//menu.append (\"New\", \"app.new\");\n"
"\t\t//this.app_menu = menu;\n"
"\t}\n"
"\n"
"\tvoid new_callback (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"New\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid open_callback (SimpleAction action, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Open\\\".\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates the application and runs it. */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* This is the Window */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Declare these two ToolButtons, as we will get them\n"
"\t * from the ui file (see lines 32 and 33), so we can\n"
"\t * hide() and show() them as needed.*/\n"
"\tGtk.ToolButton fullscreen_button;\n"
"\tGtk.ToolButton leave_fullscreen_button;\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Toolbar Example\");\n"
"\n"
"\t\tthis.set_default_size (400, 200);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tthis.add (grid);\n"
"\t\tgrid.show ();\n"
"\n"
"\t\t/* add the toolbar from the ui file */\n"
"\t\tvar builder = new Gtk.Builder ();\n"
"\t\ttry {\n"
"\t\t\tbuilder.add_from_file (\"toolbar_builder.ui\");\n"
"\t\t}\n"
"\t\t/* Handle the exception */\n"
"\t\tcatch (Error e) {\n"
"\t\t\terror (\"Unable to load file: %s\", e.message);\n"
"\t\t}\n"
"\n"
"\t\tgrid.attach (builder.get_object (\"toolbar\") as Gtk.Toolbar, 0, 0, 1, 1);\n"
"\n"
"\t\t/* get these objects from the ui file so we can toggle between them */\n"
"\t\tfullscreen_button = builder.get_object (\"fullscreen_button\") as Gtk.ToolButton;\n"
"\t\tleave_fullscreen_button = builder.get_object (\"leave_fullscreen_button\") as Gtk.ToolButton;\n"
"\n"
"\t\t/* create the \"undo\" window action action */\n"
"\t\tvar undo_action = new SimpleAction (\"undo\", null);\n"
"\t\tundo_action.activate.connect (undo_callback);\n"
"\t\tthis.add_action (undo_action);\n"
"\n"
"\t\t/* create the \"fullscreen\" window action */\n"
"\t\tvar fullscreen_action = new SimpleAction (\"fullscreen\", null);\n"
"\t\tfullscreen_action.activate.connect (fullscreen_callback);\n"
"\t\tthis.add_action (fullscreen_action);\n"
"\t}\n"
"\n"
"\tvoid undo_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Undo\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid fullscreen_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\tif ((this.get_window ().get_state () &amp; Gdk.WindowState.FULLSCREEN) != 0) {\n"
"\t\t\tthis.unfullscreen ();\n"
"\t\t\tleave_fullscreen_button.hide ();\n"
"\t\t\tfullscreen_button.show ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tthis.fullscreen ();\n"
"\t\t\tfullscreen_button.hide ();\n"
"\t\t\tleave_fullscreen_button.show ();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Create the \"new\" action and add it to the app*/\n"
"\t\tvar new_action = new SimpleAction (\"new\", null);\n"
"\t\tnew_action.activate.connect (new_callback);\n"
"\t\tthis.add_action (new_action);\n"
"\n"
"\t\t/* Create the \"open\" action, and add it to the app */\n"
"\t\tvar open_action = new SimpleAction (\"open\", null);\n"
"\t\topen_action.activate.connect (open_callback);\n"
"\t\tthis.add_action (open_action);\n"
"\n"
"\t\t/* You could also add the action to the app menu\n"
"\t\t * if you wanted to.\n"
"\t\t */\n"
"\t\t//var menu = new Menu ();\n"
"\t\t//menu.append (\"New\", \"app.new\");\n"
"\t\t//this.app_menu = menu;\n"
"\t}\n"
"\n"
"\tvoid new_callback (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"New\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid open_callback (SimpleAction action, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Open\\\".\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates the application and runs it. */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: info/title
#: C/tooltip.c.page:8
msgctxt "text"
msgid "Tooltip (C)"
msgstr "Tooltip (C)"

#. (itstool) path: info/desc
#: C/tooltip.c.page:19 C/tooltip.js.page:19 C/tooltip.py.page:20
#: C/tooltip.vala.page:19
msgid "Add tips to your widgets"
msgstr "위젯에 도움말을 추가합니다"

#. (itstool) path: page/title
#: C/tooltip.c.page:22 C/tooltip.js.page:22 C/tooltip.py.page:23
#: C/tooltip.vala.page:22
msgid "Tooltip"
msgstr "Tooltip"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/tooltip.c.page:23 C/tooltip.js.page:23 C/tooltip.py.page:24
#: C/tooltip.vala.page:23
msgctxt "_"
msgid "external ref='media/tooltip.png' md5='41e35860a51e39cb48c71e57bb8fb1d0'"
msgstr ""

#. (itstool) path: page/p
#: C/tooltip.c.page:24 C/tooltip.js.page:24 C/tooltip.py.page:25
#: C/tooltip.vala.page:24
msgid "A toolbar with a tooltip (with an image) for a button."
msgstr "단추에 풍선 도움말(및 그림)을 넣은 도구 모음입니다."

#. (itstool) path: note/p
#: C/tooltip.c.page:26
msgid ""
"This example builds on the <link xref=\"toolbar.c\">Toolbar</link> example."
msgstr "이 예제는 <link xref=\"toolbar.c\">도구 모음</link> 예제로 만듭니다."

#. (itstool) path: section/code
#: C/tooltip.c.page:31
#, no-wrap
msgid ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static gboolean \n"
"undo_tooltip_callback (GtkStatusIcon *status_icon,\n"
"                       gint           x,\n"
"                       gint           y,\n"
"                       gboolean       keyboard_mode,\n"
"                       GtkTooltip    *tooltip,\n"
"                       gpointer       user_data)\n"
"{\n"
"  /* set the text for the tooltip */\n"
"  gtk_tooltip_set_text (tooltip, \"Undo your last action\");\n"
"   \n"
"  /* set an icon fot the tooltip */\n"
"  gtk_tooltip_set_icon_from_stock(tooltip, \"gtk-undo\", GTK_ICON_SIZE_MENU);\n"
"\n"
"  /* show the tooltip */\n"
"  return TRUE;\n"
"}\n"
"\n"
"\n"
"static void\n"
"undo_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"Undo\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"  GtkWidget *toolbar;\n"
"\n"
"  GtkToolItem *new_button;\n"
"  GtkToolItem *open_button;\n"
"  GtkToolItem *undo_button;\n"
"\n"
"  GtkStyleContext *style_context;\n"
"\n"
"  GSimpleAction *undo_action;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Toolbar with Tooltips Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 400, 200);\n"
"\n"
"  /* Here we begin to create the toolbar */\n"
"  toolbar = gtk_toolbar_new ();\n"
"\n"
"  /* Set the toolbar to be the primary toolbar of the application */\n"
"  style_context = gtk_widget_get_style_context (toolbar);\n"
"  gtk_style_context_add_class (style_context, GTK_STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"  /* Create a button for the \"new\" action, with a stock image */\n"
"  new_button = gtk_tool_button_new_from_stock (GTK_STOCK_NEW);\n"
"  gtk_tool_item_set_is_important (new_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), new_button, 0);\n"
"  gtk_widget_show (GTK_WIDGET (new_button));\n"
"\n"
"  /* Set the action name for the \"new\" action. We use \"app.new\" to\n"
"   * indicate that the action controls the application.\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (new_button), \"app.new\");\n"
"\n"
"  /*******************************\n"
"   * Tooltip for the New ToolItem:\n"
"   * a tooltip with text\n"
"   *******************************/\n"
"   gtk_tool_item_set_tooltip_text (new_button, \"Create a new file\");  \n"
"\n"
"  /* \"Open\" */\n"
"  open_button = gtk_tool_button_new_from_stock (GTK_STOCK_OPEN);\n"
"  gtk_tool_item_set_is_important (open_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), open_button, 1);\n"
"  gtk_widget_show (GTK_WIDGET (open_button));\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (open_button), \"app.open\");\n"
"\n"
"  /*******************************\n"
"   * Tooltip for the Open ToolItem:\n"
"   * a tooltip using Pango markup \n"
"   * language\n"
"   *******************************/\n"
"  gtk_tool_item_set_tooltip_text (open_button, \"Open an &lt;i&gt;existing&lt;/i&gt; file\");\n"
"\n"
"  /* \"Undo\" */\n"
"  undo_button = gtk_tool_button_new_from_stock (GTK_STOCK_UNDO);\n"
"  gtk_tool_item_set_is_important (undo_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), undo_button, 2);\n"
"  gtk_widget_show (GTK_WIDGET (undo_button));\n"
"\n"
"  /* In this case, we use \"win.undo\" to indicate that\n"
"   * the action controls only the window\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (undo_button), \"win.undo\");\n"
"\n"
"  /*******************************\n"
"   * Tooltip for the Undo ToolItem:\n"
"   * a tooltip with an image\n"
"   *******************************/\n"
"  gtk_widget_set_has_tooltip (GTK_WIDGET (undo_button), TRUE);\n"
"\n"
"  // Next, we connect the query_tooltip signal\n"
"  g_signal_connect (undo_button, \"query-tooltip\", G_CALLBACK (undo_tooltip_callback), NULL);\n"
"\n"
"  gtk_widget_set_hexpand (toolbar, TRUE);\n"
"  gtk_widget_show (toolbar);\n"
"\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_attach (GTK_GRID (grid), toolbar, 0, 0, 1, 1);\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"  gtk_widget_show (GTK_WIDGET (grid));\n"
"\n"
"  /* Use the action names to create the actions that control the window, and\n"
"   * connect them to the appropriate callbackfunctions.\n"
"   */\n"
"  undo_action = g_simple_action_new (\"undo\", NULL);\n"
"  g_signal_connect (undo_action, \"activate\", G_CALLBACK (undo_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (undo_action));\n"
"\n"
"  gtk_widget_show (window);\n"
"}\n"
"\n"
"\n"
"/* Callback function for the new action */\n"
"static void\n"
"new_callback (GSimpleAction *simple,\n"
"              GVariant      *parameter,\n"
"              gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"New\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"/* Callback function for the open action */\n"
"static void\n"
"open_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"Open\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"/* In this function, we create the actions in which control the window, and\n"
" * connect their signals to the appropriate callback function.\n"
" */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GSimpleAction *new_action;\n"
"  GSimpleAction *open_action;\n"
"\n"
"  new_action = g_simple_action_new (\"new\", NULL);\n"
"  g_signal_connect (new_action, \"activate\", G_CALLBACK (new_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (new_action));\n"
"\n"
"  open_action = g_simple_action_new (\"open\", NULL);\n"
"  g_signal_connect (open_action, \"activate\", G_CALLBACK (open_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (open_action));\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the application */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"
msgstr ""
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static gboolean \n"
"undo_tooltip_callback (GtkStatusIcon *status_icon,\n"
"                       gint           x,\n"
"                       gint           y,\n"
"                       gboolean       keyboard_mode,\n"
"                       GtkTooltip    *tooltip,\n"
"                       gpointer       user_data)\n"
"{\n"
"  /* set the text for the tooltip */\n"
"  gtk_tooltip_set_text (tooltip, \"Undo your last action\");\n"
"   \n"
"  /* set an icon fot the tooltip */\n"
"  gtk_tooltip_set_icon_from_stock(tooltip, \"gtk-undo\", GTK_ICON_SIZE_MENU);\n"
"\n"
"  /* show the tooltip */\n"
"  return TRUE;\n"
"}\n"
"\n"
"\n"
"static void\n"
"undo_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"Undo\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *grid;\n"
"  GtkWidget *window;\n"
"  GtkWidget *toolbar;\n"
"\n"
"  GtkToolItem *new_button;\n"
"  GtkToolItem *open_button;\n"
"  GtkToolItem *undo_button;\n"
"\n"
"  GtkStyleContext *style_context;\n"
"\n"
"  GSimpleAction *undo_action;\n"
"\n"
"  window = gtk_application_window_new (app);\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Toolbar with Tooltips Example\");\n"
"  gtk_window_set_default_size (GTK_WINDOW (window), 400, 200);\n"
"\n"
"  /* Here we begin to create the toolbar */\n"
"  toolbar = gtk_toolbar_new ();\n"
"\n"
"  /* Set the toolbar to be the primary toolbar of the application */\n"
"  style_context = gtk_widget_get_style_context (toolbar);\n"
"  gtk_style_context_add_class (style_context, GTK_STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"  /* Create a button for the \"new\" action, with a stock image */\n"
"  new_button = gtk_tool_button_new_from_stock (GTK_STOCK_NEW);\n"
"  gtk_tool_item_set_is_important (new_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), new_button, 0);\n"
"  gtk_widget_show (GTK_WIDGET (new_button));\n"
"\n"
"  /* Set the action name for the \"new\" action. We use \"app.new\" to\n"
"   * indicate that the action controls the application.\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (new_button), \"app.new\");\n"
"\n"
"  /*******************************\n"
"   * Tooltip for the New ToolItem:\n"
"   * a tooltip with text\n"
"   *******************************/\n"
"   gtk_tool_item_set_tooltip_text (new_button, \"Create a new file\");  \n"
"\n"
"  /* \"Open\" */\n"
"  open_button = gtk_tool_button_new_from_stock (GTK_STOCK_OPEN);\n"
"  gtk_tool_item_set_is_important (open_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), open_button, 1);\n"
"  gtk_widget_show (GTK_WIDGET (open_button));\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (open_button), \"app.open\");\n"
"\n"
"  /*******************************\n"
"   * Tooltip for the Open ToolItem:\n"
"   * a tooltip using Pango markup \n"
"   * language\n"
"   *******************************/\n"
"  gtk_tool_item_set_tooltip_text (open_button, \"Open an &lt;i&gt;existing&lt;/i&gt; file\");\n"
"\n"
"  /* \"Undo\" */\n"
"  undo_button = gtk_tool_button_new_from_stock (GTK_STOCK_UNDO);\n"
"  gtk_tool_item_set_is_important (undo_button, TRUE);\n"
"  gtk_toolbar_insert (GTK_TOOLBAR (toolbar), undo_button, 2);\n"
"  gtk_widget_show (GTK_WIDGET (undo_button));\n"
"\n"
"  /* In this case, we use \"win.undo\" to indicate that\n"
"   * the action controls only the window\n"
"   */\n"
"  gtk_actionable_set_action_name (GTK_ACTIONABLE (undo_button), \"win.undo\");\n"
"\n"
"  /*******************************\n"
"   * Tooltip for the Undo ToolItem:\n"
"   * a tooltip with an image\n"
"   *******************************/\n"
"  gtk_widget_set_has_tooltip (GTK_WIDGET (undo_button), TRUE);\n"
"\n"
"  // Next, we connect the query_tooltip signal\n"
"  g_signal_connect (undo_button, \"query-tooltip\", G_CALLBACK (undo_tooltip_callback), NULL);\n"
"\n"
"  gtk_widget_set_hexpand (toolbar, TRUE);\n"
"  gtk_widget_show (toolbar);\n"
"\n"
"  grid = gtk_grid_new ();\n"
"  gtk_grid_attach (GTK_GRID (grid), toolbar, 0, 0, 1, 1);\n"
"  gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (grid));\n"
"  gtk_widget_show (GTK_WIDGET (grid));\n"
"\n"
"  /* Use the action names to create the actions that control the window, and\n"
"   * connect them to the appropriate callbackfunctions.\n"
"   */\n"
"  undo_action = g_simple_action_new (\"undo\", NULL);\n"
"  g_signal_connect (undo_action, \"activate\", G_CALLBACK (undo_callback),\n"
"                    GTK_WINDOW (window));\n"
"  g_action_map_add_action (G_ACTION_MAP (window), G_ACTION (undo_action));\n"
"\n"
"  gtk_widget_show (window);\n"
"}\n"
"\n"
"\n"
"/* Callback function for the new action */\n"
"static void\n"
"new_callback (GSimpleAction *simple,\n"
"              GVariant      *parameter,\n"
"              gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"New\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"/* Callback function for the open action */\n"
"static void\n"
"open_callback (GSimpleAction *simple,\n"
"               GVariant      *parameter,\n"
"               gpointer       user_data)\n"
"{\n"
"  g_print (\"You clicked \\\"Open\\\".\\n\");\n"
"}\n"
"\n"
"\n"
"/* In this function, we create the actions in which control the window, and\n"
" * connect their signals to the appropriate callback function.\n"
" */\n"
"static void\n"
"startup (GApplication *app,\n"
"         gpointer      user_data)\n"
"{\n"
"  GSimpleAction *new_action;\n"
"  GSimpleAction *open_action;\n"
"\n"
"  new_action = g_simple_action_new (\"new\", NULL);\n"
"  g_signal_connect (new_action, \"activate\", G_CALLBACK (new_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (new_action));\n"
"\n"
"  open_action = g_simple_action_new (\"open\", NULL);\n"
"  g_signal_connect (open_action, \"activate\", G_CALLBACK (open_callback), app);\n"
"  g_action_map_add_action (G_ACTION_MAP (app), G_ACTION (open_action));\n"
"}\n"
"\n"
"\n"
"\n"
"/* Startup function for the application */\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\", G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  g_signal_connect (app, \"startup\", G_CALLBACK (startup), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"\n"
"  return status;\n"
"}\n"

#. (itstool) path: item/p
#: C/tooltip.c.page:38 C/tooltip.py.page:59
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkTooltip.html"
"\">GtkTooltip</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkTooltip.html"
"\">GtkTooltip</link>"

#. (itstool) path: item/p
#: C/tooltip.c.page:40 C/tooltip.py.page:61
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkWidget.html"
"\">GtkWidget</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/GtkWidget.html"
"\">GtkWidget</link>"

#. (itstool) path: item/p
#: C/tooltip.c.page:41 C/tooltip.js.page:40 C/tooltip.py.page:62
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/stable/gtk3-Stock-Items.html"
"\">Stock Items</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/stable/gtk3-Stock-Items.html\">"
"취급 항목</link>"

#. (itstool) path: info/title
#: C/tooltip.js.page:8
msgctxt "text"
msgid "Tooltip (JavaScript)"
msgstr "Tooltip (JavaScript)"

#. (itstool) path: note/p
#: C/tooltip.js.page:25
msgid ""
"This example builds on the <link xref=\"toolbar.js\">Toolbar</link> example."
msgstr "이 예제는 <link xref=\"toolbar.js\">도구 모음</link> 예제로 만듭니다."

#. (itstool) path: section/code
#: C/tooltip.js.page:30
#, no-wrap
msgid ""
"//!/usr/bin/gjs\n"
"\n"
"const Gdk = imports.gi.Gdk;\n"
"const GLib = imports.gi.GLib;\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk; \n"
"const Lang = imports.lang;\n"
"\n"
"const TooltipExample = new Lang.Class ({\n"
"    Name: 'Tooltip Example',\n"
"\n"
"    // Create the application \n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({ application_id: 'org.example.jstooltip' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this.window = new Gtk.ApplicationWindow ({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"Toolbar with Tooltips Example\",\n"
"                                                   default_width: 400,\n"
"                                                   default_height: 200,\n"
"                                                   border_width: 10 });\n"
"\n"
"        this.grid = new Gtk.Grid();\n"
"\n"
"        this.toolbar = this._createToolbar();\n"
"        this.toolbar.set_hexpand(true);\n"
"        this.toolbar.show();\n"
"\n"
"        this.grid.attach(this.toolbar, 0, 0, 1, 1);\n"
"\n"
"        this.window.add(this.grid);\n"
"\n"
"        this._newAction = new Gio.SimpleAction({ name: \"new\" });\n"
"        this._newAction.connect(\"activate\", Lang.bind(this, this._newCallback));\n"
"        this.window.add_action(this._newAction);\n"
"\n"
"        this._openAction = new Gio.SimpleAction({ name: \"open\" });\n"
"        this._openAction.connect(\"activate\", Lang.bind(this, this._openCallback));\n"
"        this.window.add_action(this._openAction);\n"
"\n"
"        this._undoAction = new Gio.SimpleAction({ name: \"undo\" });\n"
"        this._undoAction.connect(\"activate\", Lang.bind(this, this._undoCallback));\n"
"        this.window.add_action(this._undoAction);\n"
"\n"
"        this._fullScreenAction = new Gio.SimpleAction({ name: \"fullscreenToggle\" });\n"
"        this._fullScreenAction.connect(\"activate\", Lang.bind(this, this._fullScreenCallback));\n"
"        this.window.add_action(this._fullScreenAction);\n"
"\n"
"        this.window.show_all();\n"
"   },\n"
"\n"
"     _createToolbar: function(){\n"
"        this.toolbar = new Gtk.Toolbar();\n"
"        this.toolbar.get_style_context().add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"        // button for the \"new\" action\n"
"        this.newButton = Gtk.ToolButton.new_from_stock(Gtk.STOCK_NEW);\n"
"        // with a tooltip with a given text        \n"
"        this.newButton.set_tooltip_text(\"Create a new file\");\n"
"        this.newButton.set_is_important(true);\n"
"        this.toolbar.insert(this.newButton, 0);\n"
"        this.newButton.show();\n"
"        this.newButton.set_action_name(\"win.new\");\n"
"\n"
"        // button for the \"open\" action\n"
"        this.openButton = Gtk.ToolButton.new_from_stock(Gtk.STOCK_OPEN);\n"
"        // with a tooltip with a given text in the Pango markup language        \n"
"        this.openButton.set_tooltip_markup(\"Open an &lt;i&gt;existing&lt;/i&gt; file\");\n"
"        this.openButton.set_is_important(true);\n"
"        this.toolbar.insert(this.openButton, 1);\n"
"        this.openButton.show();\n"
"        this.openButton.set_action_name(\"win.open\");\n"
"\n"
"        // button for the \"undo\" action\n"
"        this.undoButton = Gtk.ToolButton.new_from_stock(Gtk.STOCK_UNDO);\n"
"        // with a tooltip with an image\n"
"        // set true the property \"has-tooltip\"        \n"
"        this.undoButton.set_property(\"has-tooltip\", true);\n"
"        // connect to the callback function that for the tooltip\n"
"        // with the signal \"query-tooltip\"\n"
"        this.undoButton.connect(\"query-tooltip\", Lang.bind(this, this._undoTooltipCallback));\n"
"        this.undoButton.set_is_important(true);\n"
"        this.toolbar.insert(this.undoButton, 2);\n"
"        this.undoButton.show();\n"
"        this.undoButton.set_action_name(\"win.undo\");\n"
"\n"
"        // button for the \"fullscreen/leave fullscreen\" action\n"
"        this.fullscreenButton = Gtk.ToolButton.new_from_stock(Gtk.STOCK_FULLSCREEN);\n"
"        this.fullscreenButton.set_is_important(true);\n"
"        this.toolbar.insert(this.fullscreenButton, 3);\n"
"        this.fullscreenButton.set_action_name(\"win.fullscreenToggle\");\n"
"\n"
"        return this.toolbar;\n"
"    },\n"
"\n"
"    _newCallback: function(action, parameter) {\n"
"        print(\"You clicked \\\"New\\\".\");\n"
"    },\n"
"\n"
"    _openCallback: function(action, parameter) {\n"
"        print(\"You clicked \\\"Open\\\".\");\n"
"    },\n"
"\n"
"    // the callback function for the tooltip of the \"undo\" button\n"
"    _undoTooltipCallback: function(widget, x, y, keyboard_mode, tooltip) {\n"
"        // set the text for the tooltip\n"
"        tooltip.set_text(\"Undo your last action\");\n"
"        // set an icon fot the tooltip\n"
"        tooltip.set_icon_from_stock(Gtk.STOCK_UNDO, Gtk.IconSize.MENU);\n"
"        // show the tooltip\n"
"        return true;\n"
"    },\n"
"\n"
"    _undoCallback: function(action, parameter) {\n"
"        print(\"You clicked \\\"Undo\\\".\");\n"
"    },\n"
"\n"
"    _fullScreenCallback: function() {\n"
"        if ((this.window.get_window().get_state() &amp; Gdk.WindowState.FULLSCREEN) != 0 ){\n"
"            this.fullscreenButton.set_stock_id(Gtk.STOCK_FULLSCREEN);\n"
"            this.fullscreenButton.set_tooltip_text(\"Make your window fullscreen\");\n"
"            this.window.unfullscreen();\n"
"        } else {\n"
"            this.fullscreenButton.set_stock_id(Gtk.STOCK_LEAVE_FULLSCREEN);\n"
"            this.fullscreenButton.set_tooltip_text(\"Leave fullscreen\");\n"
"            this.window.fullscreen();\n"
"        }\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new TooltipExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const Gdk = imports.gi.Gdk;\n"
"const GLib = imports.gi.GLib;\n"
"const Gio = imports.gi.Gio;\n"
"const Gtk = imports.gi.Gtk; \n"
"const Lang = imports.lang;\n"
"\n"
"const TooltipExample = new Lang.Class ({\n"
"    Name: 'Tooltip Example',\n"
"\n"
"    // Create the application \n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({ application_id: 'org.example.jstooltip' });\n"
"\n"
"        // Connect 'activate' and 'startup' signals to the callback functions\n"
"        this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"        this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents windows when active\n"
"    _onActivate: function() {\n"
"        this.window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function () {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function () {\n"
"\n"
"        // Create the application window\n"
"        this.window = new Gtk.ApplicationWindow ({ application: this.application,\n"
"                                                   window_position: Gtk.WindowPosition.CENTER,\n"
"                                                   title: \"Toolbar with Tooltips Example\",\n"
"                                                   default_width: 400,\n"
"                                                   default_height: 200,\n"
"                                                   border_width: 10 });\n"
"\n"
"        this.grid = new Gtk.Grid();\n"
"\n"
"        this.toolbar = this._createToolbar();\n"
"        this.toolbar.set_hexpand(true);\n"
"        this.toolbar.show();\n"
"\n"
"        this.grid.attach(this.toolbar, 0, 0, 1, 1);\n"
"\n"
"        this.window.add(this.grid);\n"
"\n"
"        this._newAction = new Gio.SimpleAction({ name: \"new\" });\n"
"        this._newAction.connect(\"activate\", Lang.bind(this, this._newCallback));\n"
"        this.window.add_action(this._newAction);\n"
"\n"
"        this._openAction = new Gio.SimpleAction({ name: \"open\" });\n"
"        this._openAction.connect(\"activate\", Lang.bind(this, this._openCallback));\n"
"        this.window.add_action(this._openAction);\n"
"\n"
"        this._undoAction = new Gio.SimpleAction({ name: \"undo\" });\n"
"        this._undoAction.connect(\"activate\", Lang.bind(this, this._undoCallback));\n"
"        this.window.add_action(this._undoAction);\n"
"\n"
"        this._fullScreenAction = new Gio.SimpleAction({ name: \"fullscreenToggle\" });\n"
"        this._fullScreenAction.connect(\"activate\", Lang.bind(this, this._fullScreenCallback));\n"
"        this.window.add_action(this._fullScreenAction);\n"
"\n"
"        this.window.show_all();\n"
"   },\n"
"\n"
"     _createToolbar: function(){\n"
"        this.toolbar = new Gtk.Toolbar();\n"
"        this.toolbar.get_style_context().add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"        // button for the \"new\" action\n"
"        this.newButton = Gtk.ToolButton.new_from_stock(Gtk.STOCK_NEW);\n"
"        // with a tooltip with a given text        \n"
"        this.newButton.set_tooltip_text(\"Create a new file\");\n"
"        this.newButton.set_is_important(true);\n"
"        this.toolbar.insert(this.newButton, 0);\n"
"        this.newButton.show();\n"
"        this.newButton.set_action_name(\"win.new\");\n"
"\n"
"        // button for the \"open\" action\n"
"        this.openButton = Gtk.ToolButton.new_from_stock(Gtk.STOCK_OPEN);\n"
"        // with a tooltip with a given text in the Pango markup language        \n"
"        this.openButton.set_tooltip_markup(\"Open an &lt;i&gt;existing&lt;/i&gt; file\");\n"
"        this.openButton.set_is_important(true);\n"
"        this.toolbar.insert(this.openButton, 1);\n"
"        this.openButton.show();\n"
"        this.openButton.set_action_name(\"win.open\");\n"
"\n"
"        // button for the \"undo\" action\n"
"        this.undoButton = Gtk.ToolButton.new_from_stock(Gtk.STOCK_UNDO);\n"
"        // with a tooltip with an image\n"
"        // set true the property \"has-tooltip\"        \n"
"        this.undoButton.set_property(\"has-tooltip\", true);\n"
"        // connect to the callback function that for the tooltip\n"
"        // with the signal \"query-tooltip\"\n"
"        this.undoButton.connect(\"query-tooltip\", Lang.bind(this, this._undoTooltipCallback));\n"
"        this.undoButton.set_is_important(true);\n"
"        this.toolbar.insert(this.undoButton, 2);\n"
"        this.undoButton.show();\n"
"        this.undoButton.set_action_name(\"win.undo\");\n"
"\n"
"        // button for the \"fullscreen/leave fullscreen\" action\n"
"        this.fullscreenButton = Gtk.ToolButton.new_from_stock(Gtk.STOCK_FULLSCREEN);\n"
"        this.fullscreenButton.set_is_important(true);\n"
"        this.toolbar.insert(this.fullscreenButton, 3);\n"
"        this.fullscreenButton.set_action_name(\"win.fullscreenToggle\");\n"
"\n"
"        return this.toolbar;\n"
"    },\n"
"\n"
"    _newCallback: function(action, parameter) {\n"
"        print(\"You clicked \\\"New\\\".\");\n"
"    },\n"
"\n"
"    _openCallback: function(action, parameter) {\n"
"        print(\"You clicked \\\"Open\\\".\");\n"
"    },\n"
"\n"
"    // the callback function for the tooltip of the \"undo\" button\n"
"    _undoTooltipCallback: function(widget, x, y, keyboard_mode, tooltip) {\n"
"        // set the text for the tooltip\n"
"        tooltip.set_text(\"Undo your last action\");\n"
"        // set an icon fot the tooltip\n"
"        tooltip.set_icon_from_stock(Gtk.STOCK_UNDO, Gtk.IconSize.MENU);\n"
"        // show the tooltip\n"
"        return true;\n"
"    },\n"
"\n"
"    _undoCallback: function(action, parameter) {\n"
"        print(\"You clicked \\\"Undo\\\".\");\n"
"    },\n"
"\n"
"    _fullScreenCallback: function() {\n"
"        if ((this.window.get_window().get_state() &amp; Gdk.WindowState.FULLSCREEN) != 0 ){\n"
"            this.fullscreenButton.set_stock_id(Gtk.STOCK_FULLSCREEN);\n"
"            this.fullscreenButton.set_tooltip_text(\"Make your window fullscreen\");\n"
"            this.window.unfullscreen();\n"
"        } else {\n"
"            this.fullscreenButton.set_stock_id(Gtk.STOCK_LEAVE_FULLSCREEN);\n"
"            this.fullscreenButton.set_tooltip_text(\"Leave fullscreen\");\n"
"            this.window.fullscreen();\n"
"        }\n"
"    }\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new TooltipExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/tooltip.js.page:37
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Tooltip.html"
"\">GtkTooltip</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Tooltip.html"
"\">GtkTooltip</link>"

#. (itstool) path: item/p
#: C/tooltip.js.page:38
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Toolbar.html"
"\">GtkToolbar</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Toolbar.html"
"\">GtkToolbar</link>"

#. (itstool) path: item/p
#: C/tooltip.js.page:39
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Widget.html"
"\">GtkWidget</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Widget.html"
"\">GtkWidget</link>"

#. (itstool) path: info/title
#: C/tooltip.py.page:8
msgctxt "text"
msgid "Tooltip (Python)"
msgstr "Tooltip (Python)"

#. (itstool) path: note/p
#: C/tooltip.py.page:26
msgid ""
"This example builds on the <link xref=\"toolbar.py\">Toolbar</link> example."
msgstr "이 예제는 <link xref=\"toolbar.py\">도구 모음</link> 예제로 만듭니다."

#. (itstool) path: section/code
#: C/tooltip.py.page:32
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(\n"
"            self, title=\"Toolbar with Tooltips Example\", application=app)\n"
"        self.set_default_size(400, 200)\n"
"\n"
"        grid = Gtk.Grid()\n"
"\n"
"        toolbar = self.create_toolbar()\n"
"        toolbar.set_hexpand(True)\n"
"        toolbar.show()\n"
"\n"
"        grid.attach(toolbar, 0, 0, 1, 1)\n"
"\n"
"        self.add(grid)\n"
"\n"
"        undo_action = Gio.SimpleAction.new(\"undo\", None)\n"
"        undo_action.connect(\"activate\", self.undo_callback)\n"
"        self.add_action(undo_action)\n"
"\n"
"        fullscreen_action = Gio.SimpleAction.new(\"fullscreen\", None)\n"
"        fullscreen_action.connect(\"activate\", self.fullscreen_callback)\n"
"        self.add_action(fullscreen_action)\n"
"\n"
"    def create_toolbar(self):\n"
"        toolbar = Gtk.Toolbar()\n"
"        toolbar.get_style_context().add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR)\n"
"\n"
"        # button for the \"new\" action\n"
"        new_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_NEW)\n"
"        # with a tooltip with a given text\n"
"        new_button.set_tooltip_text(\"Create a new file\")\n"
"        new_button.set_is_important(True)\n"
"        toolbar.insert(new_button, 0)\n"
"        new_button.show()\n"
"        new_button.set_action_name(\"app.new\")\n"
"\n"
"        # button for the \"open\" action\n"
"        open_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_OPEN)\n"
"        # with a tooltip with a given text in the Pango markup language\n"
"        open_button.set_tooltip_markup(\"Open an &lt;i&gt;existing&lt;/i&gt; file\")\n"
"        open_button.set_is_important(True)\n"
"        toolbar.insert(open_button, 1)\n"
"        open_button.show()\n"
"        open_button.set_action_name(\"app.open\")\n"
"\n"
"        # button for the \"undo\" action\n"
"        undo_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_UNDO)\n"
"        # with a tooltip with an image\n"
"        # set True the property \"has-tooltip\"\n"
"        undo_button.set_property(\"has-tooltip\", True)\n"
"        # connect to the callback function that for the tooltip\n"
"        # with the signal \"query-tooltip\"\n"
"        undo_button.connect(\"query-tooltip\", self.undo_tooltip_callback)\n"
"        undo_button.set_is_important(True)\n"
"        toolbar.insert(undo_button, 2)\n"
"        undo_button.show()\n"
"        undo_button.set_action_name(\"win.undo\")\n"
"\n"
"        # button for the \"fullscreen/leave fullscreen\" action\n"
"        self.fullscreen_button = Gtk.ToolButton.new_from_stock(\n"
"            Gtk.STOCK_FULLSCREEN)\n"
"        self.fullscreen_button.set_is_important(True)\n"
"        toolbar.insert(self.fullscreen_button, 3)\n"
"        self.fullscreen_button.set_action_name(\"win.fullscreen\")\n"
"\n"
"        return toolbar\n"
"\n"
"    # the callback function for the tooltip of the \"undo\" button\n"
"    def undo_tooltip_callback(self, widget, x, y, keyboard_mode, tooltip):\n"
"        # set the text for the tooltip\n"
"        tooltip.set_text(\"Undo your last action\")\n"
"        # set an icon fot the tooltip\n"
"        tooltip.set_icon_from_stock(\"gtk-undo\", Gtk.IconSize.MENU)\n"
"        # show the tooltip\n"
"        return True\n"
"\n"
"    def undo_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"Undo\\\".\")\n"
"\n"
"    def fullscreen_callback(self, action, parameter):\n"
"        is_fullscreen = self.get_window().get_state(\n"
"        ) &amp; Gdk.WindowState.FULLSCREEN != 0\n"
"        if not is_fullscreen:\n"
"            self.fullscreen_button.set_stock_id(Gtk.STOCK_LEAVE_FULLSCREEN)\n"
"            self.fullscreen()\n"
"        else:\n"
"            self.fullscreen_button.set_stock_id(Gtk.STOCK_FULLSCREEN)\n"
"            self.unfullscreen()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        app.add_action(new_action)\n"
"\n"
"        open_action = Gio.SimpleAction.new(\"open\", None)\n"
"        open_action.connect(\"activate\", self.open_callback)\n"
"        app.add_action(open_action)\n"
"\n"
"    def new_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"New\\\".\")\n"
"\n"
"    def open_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"Open\\\".\")\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Gdk\n"
"from gi.repository import Gio\n"
"import sys\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(\n"
"            self, title=\"Toolbar with Tooltips Example\", application=app)\n"
"        self.set_default_size(400, 200)\n"
"\n"
"        grid = Gtk.Grid()\n"
"\n"
"        toolbar = self.create_toolbar()\n"
"        toolbar.set_hexpand(True)\n"
"        toolbar.show()\n"
"\n"
"        grid.attach(toolbar, 0, 0, 1, 1)\n"
"\n"
"        self.add(grid)\n"
"\n"
"        undo_action = Gio.SimpleAction.new(\"undo\", None)\n"
"        undo_action.connect(\"activate\", self.undo_callback)\n"
"        self.add_action(undo_action)\n"
"\n"
"        fullscreen_action = Gio.SimpleAction.new(\"fullscreen\", None)\n"
"        fullscreen_action.connect(\"activate\", self.fullscreen_callback)\n"
"        self.add_action(fullscreen_action)\n"
"\n"
"    def create_toolbar(self):\n"
"        toolbar = Gtk.Toolbar()\n"
"        toolbar.get_style_context().add_class(Gtk.STYLE_CLASS_PRIMARY_TOOLBAR)\n"
"\n"
"        # button for the \"new\" action\n"
"        new_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_NEW)\n"
"        # with a tooltip with a given text\n"
"        new_button.set_tooltip_text(\"Create a new file\")\n"
"        new_button.set_is_important(True)\n"
"        toolbar.insert(new_button, 0)\n"
"        new_button.show()\n"
"        new_button.set_action_name(\"app.new\")\n"
"\n"
"        # button for the \"open\" action\n"
"        open_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_OPEN)\n"
"        # with a tooltip with a given text in the Pango markup language\n"
"        open_button.set_tooltip_markup(\"Open an &lt;i&gt;existing&lt;/i&gt; file\")\n"
"        open_button.set_is_important(True)\n"
"        toolbar.insert(open_button, 1)\n"
"        open_button.show()\n"
"        open_button.set_action_name(\"app.open\")\n"
"\n"
"        # button for the \"undo\" action\n"
"        undo_button = Gtk.ToolButton.new_from_stock(Gtk.STOCK_UNDO)\n"
"        # with a tooltip with an image\n"
"        # set True the property \"has-tooltip\"\n"
"        undo_button.set_property(\"has-tooltip\", True)\n"
"        # connect to the callback function that for the tooltip\n"
"        # with the signal \"query-tooltip\"\n"
"        undo_button.connect(\"query-tooltip\", self.undo_tooltip_callback)\n"
"        undo_button.set_is_important(True)\n"
"        toolbar.insert(undo_button, 2)\n"
"        undo_button.show()\n"
"        undo_button.set_action_name(\"win.undo\")\n"
"\n"
"        # button for the \"fullscreen/leave fullscreen\" action\n"
"        self.fullscreen_button = Gtk.ToolButton.new_from_stock(\n"
"            Gtk.STOCK_FULLSCREEN)\n"
"        self.fullscreen_button.set_is_important(True)\n"
"        toolbar.insert(self.fullscreen_button, 3)\n"
"        self.fullscreen_button.set_action_name(\"win.fullscreen\")\n"
"\n"
"        return toolbar\n"
"\n"
"    # the callback function for the tooltip of the \"undo\" button\n"
"    def undo_tooltip_callback(self, widget, x, y, keyboard_mode, tooltip):\n"
"        # set the text for the tooltip\n"
"        tooltip.set_text(\"Undo your last action\")\n"
"        # set an icon fot the tooltip\n"
"        tooltip.set_icon_from_stock(\"gtk-undo\", Gtk.IconSize.MENU)\n"
"        # show the tooltip\n"
"        return True\n"
"\n"
"    def undo_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"Undo\\\".\")\n"
"\n"
"    def fullscreen_callback(self, action, parameter):\n"
"        is_fullscreen = self.get_window().get_state(\n"
"        ) &amp; Gdk.WindowState.FULLSCREEN != 0\n"
"        if not is_fullscreen:\n"
"            self.fullscreen_button.set_stock_id(Gtk.STOCK_LEAVE_FULLSCREEN)\n"
"            self.fullscreen()\n"
"        else:\n"
"            self.fullscreen_button.set_stock_id(Gtk.STOCK_FULLSCREEN)\n"
"            self.unfullscreen()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"        new_action = Gio.SimpleAction.new(\"new\", None)\n"
"        new_action.connect(\"activate\", self.new_callback)\n"
"        app.add_action(new_action)\n"
"\n"
"        open_action = Gio.SimpleAction.new(\"open\", None)\n"
"        open_action.connect(\"activate\", self.open_callback)\n"
"        app.add_action(open_action)\n"
"\n"
"    def new_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"New\\\".\")\n"
"\n"
"    def open_callback(self, action, parameter):\n"
"        print(\"You clicked \\\"Open\\\".\")\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/tooltip.py.page:36
msgid "Useful methods for a Tooltip widget"
msgstr "Tooltip 위젯에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/tooltip.py.page:38
msgid ""
"<code>set_tooltip_text(text)</code> and <code>set_tooltip_markup(text)</"
"code> can be used to add a tooltip of plain text (or text in the Pango "
"Markup Language) to a widget."
msgstr ""
"<code>set_tooltip_text(text)</code> 함수와 <code>set_tooltip_markup(text)</"
"code> 함수는 일반 텍스트(또는 팡고 마크업 언어 텍스트) 풍선 도움말을 위젯에 "
"추가할 때 활용할 수 있습니다."

#. (itstool) path: section/p
#: C/tooltip.py.page:39
msgid "For more complex tooltips, for instance for a tooltip with an image:"
msgstr "더 복잡한 풍선 도움말은, 그림 위의 풍선 도움말을 예로 들 수 있습니다:"

#. (itstool) path: item/p
#: C/tooltip.py.page:41
msgid ""
"Set the <code>\"has-tooltip\"</code> property of the widget to <code>True</"
"code>; this will make GTK+ monitor the widget for motion and related events "
"which are needed to determine when and where to show a tooltip."
msgstr ""
"위젯의 <code>\"has-tooltip\"</code> 속성을 <code>True</code> 값으로 설정하십"
"시오. GTK+에서 풍선 도움말을 보여줄 때와 위치를 결정할 때 필요한 위젯의 움직"
"임과 관련 이벤트를 지겨보게합니다."

#. (itstool) path: item/p
#: C/tooltip.py.page:42
msgid ""
"Connect to the <code>\"query-tooltip\"</code> signal. This signal will be "
"emitted when a tooltip is supposed to be shown. One of the arguments passed "
"to the signal handler is a GtkTooltip object. This is the object that we are "
"about to display as a tooltip, and can be manipulated in your callback using "
"functions like <code>set_icon()</code>. There are functions for setting the "
"tooltip's markup (<code>set_markup(text)</code>), setting an image from a "
"stock icon (<code>set_icon_from_stock(stock_id, size)</code>), or even "
"putting in a custom widget (<code>set_custom(widget)</code>)."
msgstr ""
"<code>\"query-tooltip\"</code> 시그널에 연결하십시오. 이 시그널은 풍선 도움말"
"을 나타낼 때 내보냅니다. 시그널 핸들러에 보내는 인자 중 하나는 GtkTooptip 객"
"체입니다. 우리가 풍선 도움말로 나타내려는 객체고, <code>set_icon()</code> 같"
"은 함수로 다룰 수 있습니다. 풍선 도움말의 마크업을 설정"
"(<code>set_markup(text)</code>), 스톡 아이콘으로 그림을 설정"
"(<code>set_icon_from_stock(stock_id, size)</code>), 또는 개별 위젯을 두는"
"(<code>set_custom(widget)</code>) 몇가지 함수가 있습니다."

#. (itstool) path: item/p
#: C/tooltip.py.page:43
msgid ""
"Return <code>True</code> from your query-tooltip handler. This causes the "
"tooltip to be show. If you return <code>False</code>, it will not be shown."
msgstr ""
"query-tooltip 핸들러에서 <code>True</code> 값을 반환하십시오. 풍선 도움말을 "
"나타냅니다. <code>False</code> 값을 반환하면 풍선 도움말이 나타나지 않습니다."

#. (itstool) path: section/p
#: C/tooltip.py.page:46
msgid ""
"In the probably rare case where you want to have even more control over the "
"tooltip that is about to be shown, you can set your own GtkWindow which will "
"be used as tooltip window. This works as follows:"
msgstr ""
"풍선 도움말이 나타날 때 즈음에 풍선 도움말에 대해 뭔가를 더 다루는 경우는 흔"
"하지 않는데, 이 경우 풍선 도움말 창으로 활용할 GtkWindow를 설정할 수 있습니"
"다. 다음과 같이 하시면 됩니다:"

#. (itstool) path: item/p
#: C/tooltip.py.page:48
msgid ""
"Set <code>\"has-tooltip\"</code> and connect to <code>\"query-tooltip\"</"
"code> as before."
msgstr ""
"<code>\"has-tooltip\"</code>을 설정하고 이전과 같이 <code>\"query-tooltip\"</"
"code> 에 연결하십시오."

#. (itstool) path: item/p
#: C/tooltip.py.page:49
msgid ""
"Use <code>set_tooltip_window()</code> on the widget to set a GtkWindow "
"created by you as tooltip window."
msgstr ""
"풍선 도움말 창으로 만든 GTKWindow를 설정하려면 <code>set_tooltip_window()</"
"code> 함수를 위젯에서 사용하십시오."

#. (itstool) path: item/p
#: C/tooltip.py.page:50
msgid ""
"In the <code>\"query-tooltip\"</code> callback you can access your window "
"using <code>get_tooltip_window()</code> and manipulate as you wish. The "
"semantics of the return value are exactly as before, return <code>True</"
"code> to show the window, <code>False</code> to not show it."
msgstr ""
"<code>\"query-tooltip\"</code> 콜백에서는 <code>get_tooltip_window()</code> "
"함수로 창에 접근할 수 있고 원하는대로 조절할 수 있습니다. 반환값 의미는 이전"
"에 언급한 바와 같습니다. <code>True</code> 반환 값은 창을 나타내고 "
"<code>False</code>값은 창을 나타내지 않습니다."

#. (itstool) path: info/title
#: C/tooltip.vala.page:8
msgctxt "text"
msgid "Tooltip (Vala)"
msgstr "Tooltip (Vala)"

#. (itstool) path: note/p
#: C/tooltip.vala.page:25
msgid ""
"This example builds on the <link xref=\"toolbar.vala\">Toolbar</link> "
"example."
msgstr ""
"이 예제는 <link xref=\"toolbar.vala\">도구 모음</link> 예제로 만듭니다."

#. (itstool) path: section/code
#: C/tooltip.vala.page:31
#, no-wrap
msgid ""
"/* This is the Window */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Instance variables belonging to the window */\n"
"\tGtk.Toolbar toolbar;\n"
"\tGtk.ToolButton new_button;\n"
"\tGtk.ToolButton open_button;\n"
"\tGtk.ToolButton undo_button;\n"
"\tGtk.ToolButton fullscreen_button;\n"
"\tGtk.ToolButton leave_fullscreen_button;\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Toolbar with Tooltips Example\");\n"
"\n"
"\t\tthis.set_default_size (400, 200);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tthis.add (grid);\n"
"\t\tgrid.show ();\n"
"\n"
"\t\tcreate_toolbar ();\n"
"\t\ttoolbar.set_hexpand (true);\n"
"\t\tgrid.attach (toolbar, 0, 0, 1, 1);\n"
"\t\ttoolbar.show ();\n"
"\n"
"\t\t/* create the \"undo\" window action action */\n"
"\t\tvar undo_action = new SimpleAction (\"undo\", null);\n"
"\t\tundo_action.activate.connect (undo_callback);\n"
"\t\tthis.add_action (undo_action);\n"
"\n"
"\t\t/* create the \"fullscreen\" window action */\n"
"\t\tvar fullscreen_action = new SimpleAction (\"fullscreen\", null);\n"
"\t\tfullscreen_action.activate.connect (fullscreen_callback);\n"
"\t\tthis.add_action (fullscreen_action);\n"
"\t}\n"
"\n"
"\t/* Callback for query_tooltip signal */\n"
"\tbool undo_tooltip_callback (int x, int y, bool keyboard_tooltip, Gtk.Tooltip tooltip) {\n"
"\n"
"\t\t/* set the text for the tooltip */\n"
"        \ttooltip.set_text (\"Undo your last action\");\n"
"\t\t\n"
"\t\t/* set an icon fot the tooltip */\n"
"\t\ttooltip.set_icon_from_stock(\"gtk-undo\", Gtk.IconSize.MENU);\n"
"\n"
"        \t/* show the tooltip */\n"
"        \treturn true;\n"
"\t}\n"
"\n"
"\t/* This function creates the toolbar, its  ToolButtons,\n"
"\t * and assigns the actions names to the ToolButtons.*/\n"
"\tvoid create_toolbar () {\n"
"\t\ttoolbar = new Gtk.Toolbar ();\n"
"\t\ttoolbar.get_style_context ().add_class (Gtk.STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"\t\tnew_button = new Gtk.ToolButton.from_stock (Gtk.Stock.NEW);\n"
"\n"
"\t\t/* tooltip with text */\n"
"\t\tnew_button.set_tooltip_text (\"Create a new file\");\n"
"\n"
"\t\tnew_button.is_important = true; //decides whether to show the label\n"
"\t\ttoolbar.add (new_button);\n"
"\t\tnew_button.show ();\n"
"\t\tnew_button.action_name = \"app.new\";\n"
"\n"
"\t\topen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.OPEN);\n"
"\n"
"\t\t/* a tooltip using Pango markup language */\n"
"\t\topen_button.set_tooltip_markup (\"Open an &lt;i&gt;existing&lt;/i&gt; file\");\n"
"\n"
"\t\topen_button.is_important = true;\n"
"\t\ttoolbar.add (open_button);\n"
"\t\topen_button.show ();\n"
"\t\topen_button.action_name = \"app.open\";\n"
"\n"
"\t\tundo_button = new Gtk.ToolButton.from_stock (Gtk.Stock.UNDO);\n"
"\t\n"
"\t\t/* For a tooltip to have an image, first we must set_has_tooltip to be 'true' */\t\n"
"\t\t(undo_button as Gtk.Widget).set_has_tooltip (true);\n"
"\n"
"\t\t/* Connect the query_tooltip signal to the callback */\n"
"\t\tundo_button.query_tooltip.connect (undo_tooltip_callback);\n"
"\t\n"
"\t\tundo_button.is_important = true;\n"
"\t\ttoolbar.add (undo_button);\n"
"\t\tundo_button.show ();\n"
"\t\tundo_button.action_name = \"win.undo\";\n"
"\n"
"\t\tfullscreen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.FULLSCREEN);\n"
"\t\tfullscreen_button.is_important = true;\n"
"\t\ttoolbar.add (fullscreen_button);\n"
"\t\tfullscreen_button.show ();\n"
"\t\tfullscreen_button.action_name = \"win.fullscreen\";\n"
"\n"
"\t\tleave_fullscreen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.LEAVE_FULLSCREEN)\n"
";\n"
"\t\tleave_fullscreen_button.is_important = true;\n"
"\t\ttoolbar.add (leave_fullscreen_button);\n"
"\n"
"\t\tleave_fullscreen_button.action_name = \"win.fullscreen\";\n"
"\t}\n"
"\n"
"\tvoid undo_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Undo\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid fullscreen_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\tif ((this.get_window ().get_state () &amp; Gdk.WindowState.FULLSCREEN) != 0) {\n"
"\t\t\tthis.unfullscreen ();\n"
"\t\t\tleave_fullscreen_button.hide ();\n"
"\t\t\tfullscreen_button.show ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tthis.fullscreen ();\n"
"\t\t\tfullscreen_button.hide ();\n"
"\t\t\tleave_fullscreen_button.show ();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Create the \"new\" action and add it to the app*/\n"
"\t\tvar new_action = new SimpleAction (\"new\", null);\n"
"\t\tnew_action.activate.connect (new_callback);\n"
"\t\tthis.add_action (new_action);\n"
"\n"
"\t\t/* Create the \"open\" action, and add it to the app */\n"
"\t\tvar open_action = new SimpleAction (\"open\", null);\n"
"\t\topen_action.activate.connect (open_callback);\n"
"\t\tthis.add_action (open_action);\n"
"\n"
"\t\t/* You could also add the action to the app menu\n"
"\t\t * if you wanted to.\n"
"\t\t */\n"
"\t\t//var menu = new Menu ();\n"
"\t\t//menu.append (\"New\", \"app.new\");\n"
"\t\t//this.app_menu = menu;\n"
"\t}\n"
"\n"
"\tvoid new_callback (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"New\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid open_callback (SimpleAction action, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Open\\\".\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates the application and runs it. */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"/* This is the Window */\n"
"class MyWindow : Gtk.ApplicationWindow {\n"
"\n"
"\t/* Instance variables belonging to the window */\n"
"\tGtk.Toolbar toolbar;\n"
"\tGtk.ToolButton new_button;\n"
"\tGtk.ToolButton open_button;\n"
"\tGtk.ToolButton undo_button;\n"
"\tGtk.ToolButton fullscreen_button;\n"
"\tGtk.ToolButton leave_fullscreen_button;\n"
"\n"
"\t/* Constructor */\n"
"\tinternal MyWindow (MyApplication app) {\n"
"\t\tObject (application: app, title: \"Toolbar with Tooltips Example\");\n"
"\n"
"\t\tthis.set_default_size (400, 200);\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\t\tthis.add (grid);\n"
"\t\tgrid.show ();\n"
"\n"
"\t\tcreate_toolbar ();\n"
"\t\ttoolbar.set_hexpand (true);\n"
"\t\tgrid.attach (toolbar, 0, 0, 1, 1);\n"
"\t\ttoolbar.show ();\n"
"\n"
"\t\t/* create the \"undo\" window action action */\n"
"\t\tvar undo_action = new SimpleAction (\"undo\", null);\n"
"\t\tundo_action.activate.connect (undo_callback);\n"
"\t\tthis.add_action (undo_action);\n"
"\n"
"\t\t/* create the \"fullscreen\" window action */\n"
"\t\tvar fullscreen_action = new SimpleAction (\"fullscreen\", null);\n"
"\t\tfullscreen_action.activate.connect (fullscreen_callback);\n"
"\t\tthis.add_action (fullscreen_action);\n"
"\t}\n"
"\n"
"\t/* Callback for query_tooltip signal */\n"
"\tbool undo_tooltip_callback (int x, int y, bool keyboard_tooltip, Gtk.Tooltip tooltip) {\n"
"\n"
"\t\t/* set the text for the tooltip */\n"
"        \ttooltip.set_text (\"Undo your last action\");\n"
"\t\t\n"
"\t\t/* set an icon fot the tooltip */\n"
"\t\ttooltip.set_icon_from_stock(\"gtk-undo\", Gtk.IconSize.MENU);\n"
"\n"
"        \t/* show the tooltip */\n"
"        \treturn true;\n"
"\t}\n"
"\n"
"\t/* This function creates the toolbar, its  ToolButtons,\n"
"\t * and assigns the actions names to the ToolButtons.*/\n"
"\tvoid create_toolbar () {\n"
"\t\ttoolbar = new Gtk.Toolbar ();\n"
"\t\ttoolbar.get_style_context ().add_class (Gtk.STYLE_CLASS_PRIMARY_TOOLBAR);\n"
"\n"
"\t\tnew_button = new Gtk.ToolButton.from_stock (Gtk.Stock.NEW);\n"
"\n"
"\t\t/* tooltip with text */\n"
"\t\tnew_button.set_tooltip_text (\"Create a new file\");\n"
"\n"
"\t\tnew_button.is_important = true; //decides whether to show the label\n"
"\t\ttoolbar.add (new_button);\n"
"\t\tnew_button.show ();\n"
"\t\tnew_button.action_name = \"app.new\";\n"
"\n"
"\t\topen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.OPEN);\n"
"\n"
"\t\t/* a tooltip using Pango markup language */\n"
"\t\topen_button.set_tooltip_markup (\"Open an &lt;i&gt;existing&lt;/i&gt; file\");\n"
"\n"
"\t\topen_button.is_important = true;\n"
"\t\ttoolbar.add (open_button);\n"
"\t\topen_button.show ();\n"
"\t\topen_button.action_name = \"app.open\";\n"
"\n"
"\t\tundo_button = new Gtk.ToolButton.from_stock (Gtk.Stock.UNDO);\n"
"\t\n"
"\t\t/* For a tooltip to have an image, first we must set_has_tooltip to be 'true' */\t\n"
"\t\t(undo_button as Gtk.Widget).set_has_tooltip (true);\n"
"\n"
"\t\t/* Connect the query_tooltip signal to the callback */\n"
"\t\tundo_button.query_tooltip.connect (undo_tooltip_callback);\n"
"\t\n"
"\t\tundo_button.is_important = true;\n"
"\t\ttoolbar.add (undo_button);\n"
"\t\tundo_button.show ();\n"
"\t\tundo_button.action_name = \"win.undo\";\n"
"\n"
"\t\tfullscreen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.FULLSCREEN);\n"
"\t\tfullscreen_button.is_important = true;\n"
"\t\ttoolbar.add (fullscreen_button);\n"
"\t\tfullscreen_button.show ();\n"
"\t\tfullscreen_button.action_name = \"win.fullscreen\";\n"
"\n"
"\t\tleave_fullscreen_button = new Gtk.ToolButton.from_stock (Gtk.Stock.LEAVE_FULLSCREEN)\n"
";\n"
"\t\tleave_fullscreen_button.is_important = true;\n"
"\t\ttoolbar.add (leave_fullscreen_button);\n"
"\n"
"\t\tleave_fullscreen_button.action_name = \"win.fullscreen\";\n"
"\t}\n"
"\n"
"\tvoid undo_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Undo\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid fullscreen_callback (SimpleAction simple, Variant? parameter) {\n"
"\t\tif ((this.get_window ().get_state () &amp; Gdk.WindowState.FULLSCREEN) != 0) {\n"
"\t\t\tthis.unfullscreen ();\n"
"\t\t\tleave_fullscreen_button.hide ();\n"
"\t\t\tfullscreen_button.show ();\n"
"\t\t}\n"
"\t\telse {\n"
"\t\t\tthis.fullscreen ();\n"
"\t\t\tfullscreen_button.hide ();\n"
"\t\t\tleave_fullscreen_button.show ();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"/* This is the application */\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\t\tnew MyWindow (this).show ();\n"
"\t}\n"
"\n"
"\tprotected override void startup () {\n"
"\t\tbase.startup ();\n"
"\n"
"\t\t/* Create the \"new\" action and add it to the app*/\n"
"\t\tvar new_action = new SimpleAction (\"new\", null);\n"
"\t\tnew_action.activate.connect (new_callback);\n"
"\t\tthis.add_action (new_action);\n"
"\n"
"\t\t/* Create the \"open\" action, and add it to the app */\n"
"\t\tvar open_action = new SimpleAction (\"open\", null);\n"
"\t\topen_action.activate.connect (open_callback);\n"
"\t\tthis.add_action (open_action);\n"
"\n"
"\t\t/* You could also add the action to the app menu\n"
"\t\t * if you wanted to.\n"
"\t\t */\n"
"\t\t//var menu = new Menu ();\n"
"\t\t//menu.append (\"New\", \"app.new\");\n"
"\t\t//this.app_menu = menu;\n"
"\t}\n"
"\n"
"\tvoid new_callback (SimpleAction action, Variant? parameter) {\n"
"\t\tprint (\"You clicked \\\"New\\\".\\n\");\n"
"\t}\n"
"\n"
"\tvoid open_callback (SimpleAction action, Variant? parameter) {\n"
"\t\t\tprint (\"You clicked \\\"Open\\\".\\n\");\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates the application and runs it. */\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/tooltip.vala.page:39
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Tooltip.html\">Gtk.Tooltip</"
"link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Tooltip.html\">Gtk.Tooltip</"
"link>"

#. (itstool) path: item/p
#: C/tooltip.vala.page:41
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Widget.query_tooltip.html"
"\">Gtk.Widget.query_tooltip</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Widget.query_tooltip.html"
"\">Gtk.Widget.query_tooltip</link>"

#. (itstool) path: item/p
#: C/tooltip.vala.page:42
msgid ""
"<link href=\"https://developer.gnome.org/gtk3/3.4/gtk3-Stock-Items.html#GTK-"
"STOCK-UNDO:CAPS\">Stock Items</link>"
msgstr ""
"<link href=\"https://developer.gnome.org/gtk3/3.4/gtk3-Stock-Items.html#GTK-"
"STOCK-UNDO:CAPS\">취급 항목</link>"

#. (itstool) path: info/title
#: C/treeview_advanced_liststore.py.page:8
msgctxt "text"
msgid "Simple Treeview with ListStore (Python)"
msgstr "간단한 TreeView와 ListStore(Python)"

#. (itstool) path: info/desc
#: C/treeview_advanced_liststore.py.page:19
msgid "A TreeView displaying a ListStore (more complex example)"
msgstr "ListStore를 표시하는 TreeView(더 복잡한 예제)"

#. (itstool) path: page/title
#: C/treeview_advanced_liststore.py.page:22
msgid "More Complex Treeview with ListStore"
msgstr "좀 더 복잡한 TreeView와 ListStore"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/treeview_advanced_liststore.py.page:23
msgctxt "_"
msgid ""
"external ref='media/treeview_advanced_liststore.png' "
"md5='102b512197fb9aa4ed9a16462f6af911'"
msgstr ""

#. (itstool) path: page/p
#: C/treeview_advanced_liststore.py.page:24
#: C/treeview_simple_liststore.py.page:25
msgid ""
"This TreeView displays a simple ListStore with the selection \"changed\" "
"signal connected."
msgstr ""
"이 TreeView에서는 선택 \"changed\" 시그널을 연결한 간단한 ListStore를 보여줍"
"니다."

#. (itstool) path: section/code
#: C/treeview_advanced_liststore.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Pango\n"
"import sys\n"
"\n"
"list_of_dvd = [[\"The Usual Suspects\"],\n"
"               [\"Gilda\"],\n"
"               [\"The Godfather\"],\n"
"               [\"Pulp Fiction\"],\n"
"               [\"Once Upon a Time in the West\"],\n"
"               [\"Rear Window\"]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"My DVDs\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data are stored in the model\n"
"        # create a liststore with one column\n"
"        self.listmodel = Gtk.ListStore(str)\n"
"        for i in range(len(list_of_dvd)):\n"
"            self.listmodel.append(list_of_dvd[i])\n"
"\n"
"        # a treeview to see the data stored in the model\n"
"        view = Gtk.TreeView(model=self.listmodel)\n"
"\n"
"        # cellrenderer for the first column\n"
"        cell = Gtk.CellRendererText()\n"
"        # the first column is created\n"
"        col = Gtk.TreeViewColumn(\"Title\", cell, text=0)\n"
"        # and it is appended to the treeview\n"
"        view.append_column(col)\n"
"\n"
"        # when a row of the treeview is selected, it emits a signal\n"
"        self.selection = view.get_selection()\n"
"        self.selection.connect(\"changed\", self.on_changed)\n"
"\n"
"        # the label we use to show the selection\n"
"        self.label = Gtk.Label()\n"
"        self.label.set_text(\"\")\n"
"\n"
"        # a button to add new titles, connected to a callback function\n"
"        self.button_add = Gtk.Button(label=\"Add\")\n"
"        self.button_add.connect(\"clicked\", self.add_cb)\n"
"\n"
"        # an entry to enter titles\n"
"        self.entry = Gtk.Entry()\n"
"\n"
"        # a button to remove titles, connected to a callback function\n"
"        self.button_remove = Gtk.Button(label=\"Remove\")\n"
"        self.button_remove.connect(\"clicked\", self.remove_cb)\n"
"\n"
"        # a button to remove all titles, connected to a callback function\n"
"        self.button_remove_all = Gtk.Button(label=\"Remove All\")\n"
"        self.button_remove_all.connect(\"clicked\", self.remove_all_cb)\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(view, 0, 0, 4, 1)\n"
"        grid.attach(self.label, 0, 1, 4, 1)\n"
"        grid.attach(self.button_add, 0, 2, 1, 1)\n"
"        grid.attach_next_to(\n"
"            self.entry, self.button_add, Gtk.PositionType.RIGHT, 1, 1)\n"
"        grid.attach_next_to(\n"
"            self.button_remove, self.entry, Gtk.PositionType.RIGHT, 1, 1)\n"
"        grid.attach_next_to(\n"
"            self.button_remove_all, self.button_remove, Gtk.PositionType.RIGHT, 1, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    def on_changed(self, selection):\n"
"        # get the model and the iterator that points at the data in the model\n"
"        (model, iter) = selection.get_selected()\n"
"        # set the label to a new value depending on the selection, if there is\n"
"        # one\n"
"        if iter is not None:\n"
"            self.label.set_text(\"\\n %s\" % (model[iter][0]))\n"
"        else:\n"
"            self.label.set_text(\"\")\n"
"        return True\n"
"\n"
"    # callback function for the \"Add\" button\n"
"    def add_cb(self, button):\n"
"        # append to the model the title that is in the entry\n"
"        title = self.entry.get_text()\n"
"        self.listmodel.append([title])\n"
"        # and print a message in the terminal\n"
"        print(\"%s has been added\" % (title))\n"
"\n"
"    def remove_cb(self, button):\n"
"        # if there is still an entry in the model\n"
"        if len(self.listmodel) != 0:\n"
"            # get the selection\n"
"            (model, iter) = self.selection.get_selected()\n"
"            # if there is a selection, print a message in the terminal\n"
"            # and remove it from the model\n"
"            if iter is not None:\n"
"                print(\"%s has been removed\" % (model[iter][0]))\n"
"                self.listmodel.remove(iter)\n"
"            # otherwise, ask the user to select something to remove\n"
"            else:\n"
"                print(\"Select a title to remove\")\n"
"        # else, if there are no entries in the model, print \"Empty list\"\n"
"        # in the terminal\n"
"        else:\n"
"            print(\"Empty list\")\n"
"\n"
"    def remove_all_cb(self, button):\n"
"        # if there is still an entry in the model\n"
"        if len(self.listmodel) != 0:\n"
"            # remove all the entries in the model\n"
"            for i in range(len(self.listmodel)):\n"
"                iter = self.listmodel.get_iter(0)\n"
"                self.listmodel.remove(iter)\n"
"        # print a message in the terminal alerting that the model is empty\n"
"        print(\"Empty list\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Pango\n"
"import sys\n"
"\n"
"list_of_dvd = [[\"The Usual Suspects\"],\n"
"               [\"Gilda\"],\n"
"               [\"The Godfather\"],\n"
"               [\"Pulp Fiction\"],\n"
"               [\"Once Upon a Time in the West\"],\n"
"               [\"Rear Window\"]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"My DVDs\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data are stored in the model\n"
"        # create a liststore with one column\n"
"        self.listmodel = Gtk.ListStore(str)\n"
"        for i in range(len(list_of_dvd)):\n"
"            self.listmodel.append(list_of_dvd[i])\n"
"\n"
"        # a treeview to see the data stored in the model\n"
"        view = Gtk.TreeView(model=self.listmodel)\n"
"\n"
"        # cellrenderer for the first column\n"
"        cell = Gtk.CellRendererText()\n"
"        # the first column is created\n"
"        col = Gtk.TreeViewColumn(\"Title\", cell, text=0)\n"
"        # and it is appended to the treeview\n"
"        view.append_column(col)\n"
"\n"
"        # when a row of the treeview is selected, it emits a signal\n"
"        self.selection = view.get_selection()\n"
"        self.selection.connect(\"changed\", self.on_changed)\n"
"\n"
"        # the label we use to show the selection\n"
"        self.label = Gtk.Label()\n"
"        self.label.set_text(\"\")\n"
"\n"
"        # a button to add new titles, connected to a callback function\n"
"        self.button_add = Gtk.Button(label=\"Add\")\n"
"        self.button_add.connect(\"clicked\", self.add_cb)\n"
"\n"
"        # an entry to enter titles\n"
"        self.entry = Gtk.Entry()\n"
"\n"
"        # a button to remove titles, connected to a callback function\n"
"        self.button_remove = Gtk.Button(label=\"Remove\")\n"
"        self.button_remove.connect(\"clicked\", self.remove_cb)\n"
"\n"
"        # a button to remove all titles, connected to a callback function\n"
"        self.button_remove_all = Gtk.Button(label=\"Remove All\")\n"
"        self.button_remove_all.connect(\"clicked\", self.remove_all_cb)\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(view, 0, 0, 4, 1)\n"
"        grid.attach(self.label, 0, 1, 4, 1)\n"
"        grid.attach(self.button_add, 0, 2, 1, 1)\n"
"        grid.attach_next_to(\n"
"            self.entry, self.button_add, Gtk.PositionType.RIGHT, 1, 1)\n"
"        grid.attach_next_to(\n"
"            self.button_remove, self.entry, Gtk.PositionType.RIGHT, 1, 1)\n"
"        grid.attach_next_to(\n"
"            self.button_remove_all, self.button_remove, Gtk.PositionType.RIGHT, 1, 1)\n"
"\n"
"        # add the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    def on_changed(self, selection):\n"
"        # get the model and the iterator that points at the data in the model\n"
"        (model, iter) = selection.get_selected()\n"
"        # set the label to a new value depending on the selection, if there is\n"
"        # one\n"
"        if iter is not None:\n"
"            self.label.set_text(\"\\n %s\" % (model[iter][0]))\n"
"        else:\n"
"            self.label.set_text(\"\")\n"
"        return True\n"
"\n"
"    # callback function for the \"Add\" button\n"
"    def add_cb(self, button):\n"
"        # append to the model the title that is in the entry\n"
"        title = self.entry.get_text()\n"
"        self.listmodel.append([title])\n"
"        # and print a message in the terminal\n"
"        print(\"%s has been added\" % (title))\n"
"\n"
"    def remove_cb(self, button):\n"
"        # if there is still an entry in the model\n"
"        if len(self.listmodel) != 0:\n"
"            # get the selection\n"
"            (model, iter) = self.selection.get_selected()\n"
"            # if there is a selection, print a message in the terminal\n"
"            # and remove it from the model\n"
"            if iter is not None:\n"
"                print(\"%s has been removed\" % (model[iter][0]))\n"
"                self.listmodel.remove(iter)\n"
"            # otherwise, ask the user to select something to remove\n"
"            else:\n"
"                print(\"Select a title to remove\")\n"
"        # else, if there are no entries in the model, print \"Empty list\"\n"
"        # in the terminal\n"
"        else:\n"
"            print(\"Empty list\")\n"
"\n"
"    def remove_all_cb(self, button):\n"
"        # if there is still an entry in the model\n"
"        if len(self.listmodel) != 0:\n"
"            # remove all the entries in the model\n"
"            for i in range(len(self.listmodel)):\n"
"                iter = self.listmodel.get_iter(0)\n"
"                self.listmodel.remove(iter)\n"
"        # print a message in the terminal alerting that the model is empty\n"
"        print(\"Empty list\")\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/treeview_advanced_liststore.py.page:35
#: C/treeview_cellrenderertoggle.py.page:35
#: C/treeview_simple_liststore.py.page:36 C/treeview_treestore.py.page:36
msgid "Useful methods for a TreeView widget"
msgstr "TreeView 위젯에 쓸만한 메서드"

#. (itstool) path: section/p
#: C/treeview_advanced_liststore.py.page:36
#: C/treeview_cellrenderertoggle.py.page:36 C/treeview_treestore.py.page:37
msgid ""
"The TreeView widget is designed around a <em>Model/View/Controller</em> "
"design: the <em>Model</em> stores the data; the <em>View</em> gets change "
"notifications and displays the content of the model; the <em>Controller</"
"em>, finally, changes the state of the model and notifies the view of these "
"changes. For more information and for a list of useful methods for TreeModel "
"see <link xref=\"model-view-controller.py\"/>."
msgstr ""
"TreeView 위젯은 <em>Model/View/Controller</em>  방식으로 설계했습니다. "
"<em>Model</em>은 데이터를, <em>View</em>는 바뀐 내용 알림을 받은 후의 모델의 "
"내용을, 마지막으로 <em>Controller</em>는 모델의 상태를 바꾸고 뷰에게 바뀐 모"
"델의 상태를 알리는 코드를 담습니다. 자세한 내용과 TreeModel에 대한 쓸만한 메"
"서드 목록을 보시려면 <link xref=\"model-view-controller.py\"/>를 참고하십시"
"오."

#. (itstool) path: section/p
#: C/treeview_advanced_liststore.py.page:37
msgid ""
"In line 36 the <code>\"changed\"</code> signal is connected to the callback "
"function <code>on_changed()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"36번째 줄에서 <code>\"changed\"</code> 시그널은 <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code> 함수로  "
"<code>on_changed()</code> 콜백 함수에 연결했습니다. 더 자세한 설명은 <link "
"xref=\"signals-callbacks.py\"/>를 참조하십시오."

#. (itstool) path: info/title
#: C/treeview_cellrenderertoggle.py.page:8 C/treeview_treestore.py.page:8
msgctxt "text"
msgid "TreeView with TreeStore (Python)"
msgstr "TreeView와 TreeStore(Python)"

#. (itstool) path: info/desc
#: C/treeview_cellrenderertoggle.py.page:19
msgid ""
"A TreeView displaying a TreeStore (more complex example, with "
"CellRendererToggle)"
msgstr ""
"TreeStore를 보여주는 TreeView(CellRendererToggle이 들어간 더 복잡한 예제)"

#. (itstool) path: page/title
#: C/treeview_cellrenderertoggle.py.page:22
msgid "More Complex TreeView with TreeStore"
msgstr "좀 더 복잡한 TreeView와 TreeStore"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/treeview_cellrenderertoggle.py.page:23
msgctxt "_"
msgid ""
"external ref='media/treeview_cellrenderertoggle.png' "
"md5='ade9b9437f8f83150acf37610dab834d'"
msgstr ""

#. (itstool) path: page/p
#: C/treeview_cellrenderertoggle.py.page:24
msgid ""
"This TreeView displays a TreeStore with two columns, one of which is "
"rendered as a toggle."
msgstr ""
"이 TreeView에서는 두 열을 TreeStore로 나타내는데, 두 열 중 하나는 상태 반전 "
"방식으로 보여줍니다."

#. (itstool) path: section/code
#: C/treeview_cellrenderertoggle.py.page:31
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Pango\n"
"import sys\n"
"\n"
"books = [[\"Tolstoy, Leo\", [\"War and Peace\", True], [\"Anna Karenina\", False]],\n"
"         [\"Shakespeare, William\", [\"Hamlet\", False],\n"
"             [\"Macbeth\", True], [\"Othello\", False]],\n"
"         [\"Tolkien, J.R.R.\", [\"The Lord of the Rings\", False]]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Library\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data are stored in the model\n"
"        # create a treestore with two columns\n"
"        self.store = Gtk.TreeStore(str, bool)\n"
"        # fill in the model\n"
"        for i in range(len(books)):\n"
"            # the iter piter is returned when appending the author in the first column\n"
"            # and False in the second\n"
"            piter = self.store.append(None, [books[i][0], False])\n"
"            # append the books and the associated boolean value as children of\n"
"            # the author\n"
"            j = 1\n"
"            while j &lt; len(books[i]):\n"
"                self.store.append(piter, books[i][j])\n"
"                j += 1\n"
"\n"
"        # the treeview shows the model\n"
"        # create a treeview on the model self.store\n"
"        view = Gtk.TreeView()\n"
"        view.set_model(self.store)\n"
"\n"
"        # the cellrenderer for the first column - text\n"
"        renderer_books = Gtk.CellRendererText()\n"
"        # the first column is created\n"
"        column_books = Gtk.TreeViewColumn(\"Books\", renderer_books, text=0)\n"
"        # and it is appended to the treeview\n"
"        view.append_column(column_books)\n"
"\n"
"        # the cellrenderer for the second column - boolean rendered as a toggle\n"
"        renderer_in_out = Gtk.CellRendererToggle()\n"
"        # the second column is created\n"
"        column_in_out = Gtk.TreeViewColumn(\"Out?\", renderer_in_out, active=1)\n"
"        # and it is appended to the treeview\n"
"        view.append_column(column_in_out)\n"
"        # connect the cellrenderertoggle with a callback function\n"
"        renderer_in_out.connect(\"toggled\", self.on_toggled)\n"
"\n"
"        # add the treeview to the window\n"
"        self.add(view)\n"
"\n"
"    # callback function for the signal emitted by the cellrenderertoggle\n"
"    def on_toggled(self, widget, path):\n"
"        # the boolean value of the selected row\n"
"        current_value = self.store[path][1]\n"
"        # change the boolean value of the selected row in the model\n"
"        self.store[path][1] = not current_value\n"
"        # new current value!\n"
"        current_value = not current_value\n"
"        # if length of the path is 1 (that is, if we are selecting an author)\n"
"        if len(path) == 1:\n"
"            # get the iter associated with the path\n"
"            piter = self.store.get_iter(path)\n"
"            # get the iter associated with its first child\n"
"            citer = self.store.iter_children(piter)\n"
"            # while there are children, change the state of their boolean value\n"
"            # to the value of the author\n"
"            while citer is not None:\n"
"                self.store[citer][1] = current_value\n"
"                citer = self.store.iter_next(citer)\n"
"        # if the length of the path is not 1 (that is, if we are selecting a\n"
"        # book)\n"
"        elif len(path) != 1:\n"
"            # get the first child of the parent of the book (the first book of\n"
"            # the author)\n"
"            citer = self.store.get_iter(path)\n"
"            piter = self.store.iter_parent(citer)\n"
"            citer = self.store.iter_children(piter)\n"
"            # check if all the children are selected\n"
"            all_selected = True\n"
"            while citer is not None:\n"
"                if self.store[citer][1] == False:\n"
"                    all_selected = False\n"
"                    break\n"
"                citer = self.store.iter_next(citer)\n"
"            # if they do, the author as well is selected; otherwise it is not\n"
"            self.store[piter][1] = all_selected\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Pango\n"
"import sys\n"
"\n"
"books = [[\"Tolstoy, Leo\", [\"War and Peace\", True], [\"Anna Karenina\", False]],\n"
"         [\"Shakespeare, William\", [\"Hamlet\", False],\n"
"             [\"Macbeth\", True], [\"Othello\", False]],\n"
"         [\"Tolkien, J.R.R.\", [\"The Lord of the Rings\", False]]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Library\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data are stored in the model\n"
"        # create a treestore with two columns\n"
"        self.store = Gtk.TreeStore(str, bool)\n"
"        # fill in the model\n"
"        for i in range(len(books)):\n"
"            # the iter piter is returned when appending the author in the first column\n"
"            # and False in the second\n"
"            piter = self.store.append(None, [books[i][0], False])\n"
"            # append the books and the associated boolean value as children of\n"
"            # the author\n"
"            j = 1\n"
"            while j &lt; len(books[i]):\n"
"                self.store.append(piter, books[i][j])\n"
"                j += 1\n"
"\n"
"        # the treeview shows the model\n"
"        # create a treeview on the model self.store\n"
"        view = Gtk.TreeView()\n"
"        view.set_model(self.store)\n"
"\n"
"        # the cellrenderer for the first column - text\n"
"        renderer_books = Gtk.CellRendererText()\n"
"        # the first column is created\n"
"        column_books = Gtk.TreeViewColumn(\"Books\", renderer_books, text=0)\n"
"        # and it is appended to the treeview\n"
"        view.append_column(column_books)\n"
"\n"
"        # the cellrenderer for the second column - boolean rendered as a toggle\n"
"        renderer_in_out = Gtk.CellRendererToggle()\n"
"        # the second column is created\n"
"        column_in_out = Gtk.TreeViewColumn(\"Out?\", renderer_in_out, active=1)\n"
"        # and it is appended to the treeview\n"
"        view.append_column(column_in_out)\n"
"        # connect the cellrenderertoggle with a callback function\n"
"        renderer_in_out.connect(\"toggled\", self.on_toggled)\n"
"\n"
"        # add the treeview to the window\n"
"        self.add(view)\n"
"\n"
"    # callback function for the signal emitted by the cellrenderertoggle\n"
"    def on_toggled(self, widget, path):\n"
"        # the boolean value of the selected row\n"
"        current_value = self.store[path][1]\n"
"        # change the boolean value of the selected row in the model\n"
"        self.store[path][1] = not current_value\n"
"        # new current value!\n"
"        current_value = not current_value\n"
"        # if length of the path is 1 (that is, if we are selecting an author)\n"
"        if len(path) == 1:\n"
"            # get the iter associated with the path\n"
"            piter = self.store.get_iter(path)\n"
"            # get the iter associated with its first child\n"
"            citer = self.store.iter_children(piter)\n"
"            # while there are children, change the state of their boolean value\n"
"            # to the value of the author\n"
"            while citer is not None:\n"
"                self.store[citer][1] = current_value\n"
"                citer = self.store.iter_next(citer)\n"
"        # if the length of the path is not 1 (that is, if we are selecting a\n"
"        # book)\n"
"        elif len(path) != 1:\n"
"            # get the first child of the parent of the book (the first book of\n"
"            # the author)\n"
"            citer = self.store.get_iter(path)\n"
"            piter = self.store.iter_parent(citer)\n"
"            citer = self.store.iter_children(piter)\n"
"            # check if all the children are selected\n"
"            all_selected = True\n"
"            while citer is not None:\n"
"                if self.store[citer][1] == False:\n"
"                    all_selected = False\n"
"                    break\n"
"                citer = self.store.iter_next(citer)\n"
"            # if they do, the author as well is selected; otherwise it is not\n"
"            self.store[piter][1] = all_selected\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/p
#: C/treeview_cellrenderertoggle.py.page:37
msgid ""
"In line 48 the <code>\"toggled\"</code> signal is connected to the callback "
"function <code>on_toggled()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"48번째 줄에서 <code>\"toggled\"</code> 시그널은 <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code> 함수로  "
"<code>on_toggled()</code> 콜백 함수에 연결했습니다. 더 자세한 설명은 <link "
"xref=\"signals-callbacks.py\"/>를 참조하십시오."

#. (itstool) path: item/p
#: C/treeview_cellrenderertoggle.py.page:46 C/treeview_treestore.py.page:46
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeStore.html"
"\">GtkTreeStore</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkTreeStore.html"
"\">GtkTreeStore</link>"

#. (itstool) path: item/p
#: C/treeview_cellrenderertoggle.py.page:48
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRendererToggle."
"html\">GtkCellRendererToggle</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkCellRendererToggle."
"html\">GtkCellRendererToggle</link>"

#. (itstool) path: info/title
#: C/treeview_simple_liststore.js.page:8
msgctxt "text"
msgid "TreeView with ListStore (JavaScript)"
msgstr "TreeView와 ListStore(JavaScript)"

#. (itstool) path: info/desc
#: C/treeview_simple_liststore.js.page:21
msgid "A widget that shows a separate list of items"
msgstr "각각의 항목 목록을 보여주는 위젯"

#. (itstool) path: page/title
#: C/treeview_simple_liststore.js.page:24
msgid "TreeView with ListStore"
msgstr "TreeView와 ListStore"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/treeview_simple_liststore.js.page:25
msgctxt "_"
msgid ""
"external ref='media/treeview_simple_liststore_penguins.png' "
"md5='d750a0b9fddf8e508753cc639839871d'"
msgstr ""

#. (itstool) path: page/p
#: C/treeview_simple_liststore.js.page:26
msgid ""
"A TreeView is like a window onto the contents of either a ListStore or a "
"TreeStore. A ListStore is like a spreadsheet: a \"flat\", two-dimensional "
"list of things broken up into rows and columns. A TreeStore, meanwhile, can "
"branch out in different directions like a tree can. In this example, we "
"create a TreeView that shows the contents of a ListStore with (fictitious) "
"names and phone numbers in it, and set it so that the <link xref=\"label.js"
"\">Label</link> at the bottom of the window shows more information about "
"whichever name you click on."
msgstr ""
"TreeView는 ListStore 또는 TreeStore의 내용을 보여주는 창입니다. ListStore는 "
"스프레드 시트와 같습니다. 2차원 평면 자료구조이며 행과 열로 나뉩니다. 반면에 "
"TreeStore는 트리로 할 수 있듯이 자료 묶음 방향을 가지로 쪼갤 수 있습니다. 이 "
"예제에서는 TreeView로 가상의 이름과 전화번호가 들어간 ListStore의 내용을 보여"
"주고, 누른 항목의 이름이 무엇인지 자세한 정보를 보여주도록 창 하단의 <link "
"xref=\"label.js\">Label</link>에 설정하겠습니다."

#. (itstool) path: page/p
#: C/treeview_simple_liststore.js.page:27
msgid ""
"The TreeView is not just a single widget, but contains a number of smaller "
"ones:"
msgstr "TreeView는 단일 위젯이 아니지만 여러 작은 부분을 담고 있습니다:"

#. (itstool) path: item/p
#: C/treeview_simple_liststore.js.page:29
msgid ""
"TreeViewColumn widgets show each (vertical) column of information from the "
"ListStore. Each one has a title which can be shown at the top of the column, "
"like in the screenshot."
msgstr ""
"TreeViewColumn 위젯은 ListStore의 각(수직) 열 정보를 보여줍니다. 각각의 "
"TreeViewWidget은 스크린샷에서 보시는 바와 같이 열 상단에 나타낼 제목을 지니"
"고 있습니다."

#. (itstool) path: item/p
#: C/treeview_simple_liststore.js.page:30
msgid ""
"CellRenderer widgets are \"packed\" into each TreeViewColumn, and contain "
"the instructions for how to display each individual \"cell\", or item from "
"the ListStore. There are multiple different types, including the "
"CellRendererText used here and the CellRendererPixbuf, which displays a "
"picture (\"pixel buffer\")."
msgstr ""
"CellRenderer 위젯은 각 TreeViewColumn에 \"패킹\" 처리하고, 각 \"셀\" 또는 "
"ListStore의 항목을 표시하는 방식의 지시 사항을 담습니다. 여기서 사용하는 "
"CellRendererText 그리고 그림(\"픽셀 버퍼\")를 나타내는 CellRendererPixBuf 같"
"은 다양한 형식이 있습니다."

#. (itstool) path: page/p
#: C/treeview_simple_liststore.js.page:32
msgid ""
"Finally, we're going to use an object called a TreeIter, which isn't a "
"widget so much as an invisible cursor which points to a (horizontal) row in "
"the ListStore. Whenever you click on a name in the phonebook, for instance, "
"we create a TreeIter pointing to the row that's selected, and then use that "
"to tell the ListStore which entry we want the Label to show more information "
"about."
msgstr ""
"마지막으로 ListStore에서 (가로 방향) 행을 가리키는 보이지 않는 커서로 위젯이 "
"아닌 TreeIter 객체를 활용하겠습니다. 예를 들어 전화번호부에 이름을 누르면, 선"
"택한 줄을 가리키는 TreeIter를 만드는데, TreeIter는 레이블에 더 많은 정보를 보"
"여줄 항목이 무엇인지 ListStore에 지시할 때 활용합니다."

#. (itstool) path: note/p
#: C/treeview_simple_liststore.js.page:33
msgid ""
"The TreeView is probably the most complicated Gtk widget, because of how "
"many parts it has and how they all have to work together. Give yourself time "
"to learn how it works and experiment with it, or try something easier first "
"if you're having trouble."
msgstr ""
"TreeView는 아마도 Gtk 위젯 중에 제일 복잡한 gtk 위젯이 아닐까 하는데, 위젯이 "
"지닌 부분의 양과 함께 동작하는 방식 때문입니다. 동작 방식과 실험을 배울 시간"
"을 확보하시든지, 하다가 문제 생기면 쉬운 부분 부터 먼저 진행하십시오."

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:38
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"const Pango = imports.gi.Pango;\n"
msgstr ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"const Pango = imports.gi.Pango;\n"

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:51
#, no-wrap
msgid ""
"\n"
"const TreeViewExample = new Lang.Class({\n"
"    Name: 'TreeView Example with Simple ListStore',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jstreeviewsimpleliststore'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
msgstr ""
"\n"
"const TreeViewExample = new Lang.Class({\n"
"    Name: 'TreeView Example with Simple ListStore',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jstreeviewsimpleliststore'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:76
msgid ""
"All the code for this sample goes in the TreeViewExample class. The above "
"code creates a <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/"
"Gtk.Application.html\">Gtk.Application</link> for our widgets and window to "
"go in."
msgstr ""
"이 예제의 모든 코드는 TreeViewExample 클래스에 들어갑니다. 위 코드는 위젯과 "
"창이 들어갈 <link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"Application.html\">Gtk.Application</link>을 만듭니다."

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:77
#, no-wrap
msgid ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 250,\n"
"            default_width: 100,\n"
"            border_width: 20,\n"
"            title: \"My Phone Book\"});\n"
msgstr ""
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 250,\n"
"            default_width: 100,\n"
"            border_width: 20,\n"
"            title: \"My Phone Book\"});\n"

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:95
#, no-wrap
msgid ""
"\n"
"        // Create the underlying liststore for the phonebook\n"
"        this._listStore = new Gtk.ListStore ();\n"
"        this._listStore.set_column_types ([\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING]);\n"
msgstr ""
"\n"
"        // Create the underlying liststore for the phonebook\n"
"        this._listStore = new Gtk.ListStore ();\n"
"        this._listStore.set_column_types ([\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING]);\n"
"읽\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:104
msgid ""
"We first create the ListStore like we would any widget. Then we call its "
"set_column_types method, and pass it an array of GObject data types. (We "
"could have put the types all on one line, but here we are breaking them up "
"to make it easier to read.)"
msgstr ""
"우선 어떤 위젯도 다룰 수 있도록 ListStore를 만들겠습니다. 그 다음 "
"set_column_types 메서드를 호출하여 GObject 데이터 형식의 배열에 전달하겠습니"
"다(한 줄에 모든 형식을 넣을 수 있지만, 보기 쉽게 하려는 목적으로 쪼갰습니다)."

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:105
msgid "The GObject data types you can use include:"
msgstr "여러분이 사용할 수 있는 GObject 데이터 형식은 다음과 같습니다:"

#. (itstool) path: item/p
#: C/treeview_simple_liststore.js.page:110
msgid "<file>gtk.gdk.Pixbuf</file> -- A picture"
msgstr "<file>gtk.gdk.Pixbuf</file> -- 그림"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:112
msgid ""
"In this case, we're making a ListStore of four columns, each one containing "
"string values."
msgstr ""
"이 경우, 각 칸마다 문자열 값이 들어가는 4칸을 지닌 ListStore를 만듭니다."

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:115
#, no-wrap
msgid ""
"\n"
"        // Data to go in the phonebook\n"
"        this.phonebook =\n"
"        let phonebook =\n"
"            [{ name: \"Jurg\", surname: \"Billeter\", phone: \"555-0123\",\n"
"                description: \"A friendly person.\"},\n"
"             { name: \"Johannes\", surname: \"Schmid\", phone: \"555-1234\",\n"
"                description: \"Easy phone number to remember.\"},\n"
"             { name: \"Julita\", surname: \"Inca\", phone: \"555-2345\",\n"
"                description: \"Another friendly person.\"},\n"
"             { name: \"Javier\", surname: \"Jardon\", phone: \"555-3456\",\n"
"                description: \"Bring fish for his penguins.\"},\n"
"             { name: \"Jason\", surname: \"Clinton\", phone: \"555-4567\",\n"
"                description: \"His cake's not a lie.\"},\n"
"             { name: \"Random J.\", surname: \"Hacker\", phone: \"555-5678\",\n"
"                description: \"Very random!\"}];\n"
msgstr ""
"\n"
"        // Data to go in the phonebook\n"
"        this.phonebook =\n"
"        let phonebook =\n"
"            [{ name: \"Jurg\", surname: \"Billeter\", phone: \"555-0123\",\n"
"                description: \"A friendly person.\"},\n"
"             { name: \"Johannes\", surname: \"Schmid\", phone: \"555-1234\",\n"
"                description: \"Easy phone number to remember.\"},\n"
"             { name: \"Julita\", surname: \"Inca\", phone: \"555-2345\",\n"
"                description: \"Another friendly person.\"},\n"
"             { name: \"Javier\", surname: \"Jardon\", phone: \"555-3456\",\n"
"                description: \"Bring fish for his penguins.\"},\n"
"             { name: \"Jason\", surname: \"Clinton\", phone: \"555-4567\",\n"
"                description: \"His cake's not a lie.\"},\n"
"             { name: \"Random J.\", surname: \"Hacker\", phone: \"555-5678\",\n"
"                description: \"Very random!\"}];\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:132
msgid ""
"Here we have the information to go in the ListStore. It's an array of "
"objects, each one corresponding to a single entry in our phone book."
msgstr ""
"ListStore에 정보를 넣었습니다. 전화번호부의 단일 항목에 해당하는 객체 배열입"
"니다."

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:133
msgid ""
"Note that the TreeView in the screenshot doesn't actually show the data from "
"the \"description\" properties. Instead, that information's shown in the "
"Label beneath it, for whichever row that you click on. That's because the "
"TreeView and ListStore are two separate things, and a TreeView can show all "
"or part of a ListStore, and display what's in it in different ways. You can "
"even have multiple widgets show things from the same ListStore, like the "
"Label in our example or even a second TreeView."
msgstr ""
"참고로 스크린샷의 TreeView는 실제로 \"description\" 속성의 데이터를 보여주지 "
"않습니다. 대신 레이블 아래 여러분이 클릭해서 나타난 정보를 보여줍니다. 왜냐"
"면 TreeView와 ListStore는 별개의 존재고, TreeView는 ListStore의 모든 부분을 "
"보여줄 수 있으며, 무엇이 들어있는지 보여주는 방식이 다르기 때문입니다. 우리 "
"예제의 레이블 내지는 두번째 TreeView 처럼 동일한 ListStore의 내용을 여러 위젯"
"으로 보여줄 수 있습니다."

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:135
#, no-wrap
msgid ""
"\n"
"        for (i = 0; i &lt; phonebook.length; i++ ) {\n"
"            let contact = phonebook [i];\n"
"            this._listStore.set (this._listStore.append(), [0, 1, 2, 3],\n"
"                [contact.name, contact.surname, contact.phone, contact.description]);\n"
"        }\n"
msgstr ""
"\n"
"        for (i = 0; i &lt; phonebook.length; i++ ) {\n"
"            let contact = phonebook [i];\n"
"            this._listStore.set (this._listStore.append(), [0, 1, 2, 3],\n"
"                [contact.name, contact.surname, contact.phone, contact.description]);\n"
"        }\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:142
msgid ""
"This <file>for</file> loop puts the strings from our phonebook into our "
"ListStore in order. In order, we pass the ListStore's set method the iter "
"that points to the correct row, an array which says which columns we want to "
"set, and an array which contains the data we want to put into those columns."
msgstr ""
"<file>for</file> 루프로 전화번호부에서 가져온 문자열을 ListStore에 순서대로 "
"넣습니다. 순서대로 ListStore의 set 메서드로 설정하고자 하는 열의 배열, 각 열"
"에 넣어두고나 하는 데이터가 들어간 배열, 올바른 열을 가리키는 iter 값을 전달"
"합니다."

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:143
msgid ""
"A ListStore's <file>append</file> method adds a horizontal row onto it (it "
"starts out with none), and returns a TreeIter pointing to that row like a "
"cursor. So by passing <file>this._listStore.append()</file> to the ListStore "
"as a property, we're creating a new row and telling the <file>set</file> "
"method which row to set data for at the same time."
msgstr ""
"ListStore의 <file>append</file> 메서드로 수평줄을 추가하고(아무것도 없는 상태"
"에서 시작),  커서와 같은 해당 줄에 대한 TreeIter 포인터를 반환합니다. 따라서 "
"ListStore에 <file>this._listStore.append()</file> 함수 값을 속성으로 전달하"
"여 새 줄을 만들고 <file>set</file> 메서드를 통해 방금 만든 새 줄에 통시에 데"
"이터를 넣도록 하겠습니다."

#. (itstool) path: section/title
#: C/treeview_simple_liststore.js.page:148
msgid "Creating the TreeView"
msgstr "TreeView 만들기"

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:149
#, no-wrap
msgid ""
"\n"
"        // Create the treeview\n"
"        this._treeView = new Gtk.TreeView ({\n"
"            expand: true,\n"
"            model: this._listStore });\n"
msgstr ""
"\n"
"        // Create the treeview\n"
"        this._treeView = new Gtk.TreeView ({\n"
"            expand: true,\n"
"            model: this._listStore });\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:155
msgid ""
"Here we create a basic TreeView widget, that expands both horizontally and "
"vertically to use as much space as needed. We set it to use the ListStore we "
"created as its \"model\", or the thing it'll show us stuff from."
msgstr ""
"여기서는 기본적인 TreeView 위젯을 만들어, 가로 세로 방향으로 필요한 만큼 충분"
"한 공간을 늘릴수 있게 하겠습니다. 우리가 만든 ListStore를 \"모델\"로 사용하거"
"나, 어딘가로부터 가져온 내용을 활용하게 하겠습니다."

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:157
#, no-wrap
msgid ""
"\n"
"        // Create the columns for the address book\n"
"        let firstName = new Gtk.TreeViewColumn ({ title: \"First Name\" });\n"
"        let lastName = new Gtk.TreeViewColumn ({ title: \"Last Name\" });\n"
"        let phone = new Gtk.TreeViewColumn ({ title: \"Phone Number\" });\n"
msgstr ""
"\n"
"        // Create the columns for the address book\n"
"        let firstName = new Gtk.TreeViewColumn ({ title: \"First Name\" });\n"
"        let lastName = new Gtk.TreeViewColumn ({ title: \"Last Name\" });\n"
"        let phone = new Gtk.TreeViewColumn ({ title: \"Phone Number\" });\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:163
msgid ""
"Now we create each of the vertical TreeViewColumns we'll see in the "
"TreeView. The title for each one goes at the top, as you can see in the "
"screenshot."
msgstr ""
"이제 TreeView에서 볼 각각의 TreeViewColumn을 만들겠습니다. 각 TreeViewColumn"
"의 제목은, 스크린샷에서 보시는 대로 상단에 올라갑니다."

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:165
#, no-wrap
msgid ""
"\n"
"        // Create a cell renderer for when bold text is needed\n"
"        let bold = new Gtk.CellRendererText ({\n"
"            weight: Pango.Weight.BOLD });\n"
"\n"
"        // Create a cell renderer for normal text\n"
"        let normal = new Gtk.CellRendererText ();\n"
"\n"
"        // Pack the cell renderers into the columns\n"
"        firstName.pack_start (bold, true);\n"
"        lastName.pack_start (normal, true);\n"
"        phone.pack_start (normal, true);\n"
msgstr ""
"\n"
"        // Create a cell renderer for when bold text is needed\n"
"        let bold = new Gtk.CellRendererText ({\n"
"            weight: Pango.Weight.BOLD });\n"
"\n"
"        // Create a cell renderer for normal text\n"
"        let normal = new Gtk.CellRendererText ();\n"
"\n"
"        // Pack the cell renderers into the columns\n"
"        firstName.pack_start (bold, true);\n"
"        lastName.pack_start (normal, true);\n"
"        phone.pack_start (normal, true);\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:178
msgid ""
"Here we create the CellRenderers that we'll use to display the text from our "
"ListStore, and pack them into the TreeViewColumns. Each CellRendererText is "
"used for all the entries in that column. Our normal CellRendererText just "
"creates plain text, while our bold one uses heavier-weight text. We put it "
"into the first name column, and tell the other two to use copies of the "
"normal one. The \"true\" used as the second parameter for the "
"<file>pack_start</file> method tells it to expand the cells when possible, "
"instead of keeping them compact."
msgstr ""
"여기서 ListStore의 텍스트를 나타내는데 활용할 CellRenderer를 만들었고 "
"TreeViewColumns에 감쌌습니다. 각 CellRendererText는 칸에 들어간 모든 항목에 "
"사용합니다. 굵은 글씨에는 더 굵은 텍스트를 사용하지만, 일반적인 "
"CellRendererText는 그냥 텍스트를 만듭니다. 일단 이름 열에 넣고, 다른 두 부분"
"은 일반 CellRendererText로 넣으라고 하겠습니다. <file>pack_start</file> 메서"
"드 두번째 매개변수 값으로 사용하는 \"true\" 값은 가능할 경우 작은 상태로 유지"
"하지 말고 셀 크기를 확장하라고 지시합니다."

#. (itstool) path: note/p
#: C/treeview_simple_liststore.js.page:179
msgid ""
"<link href=\"http://www.pygtk.org/docs/pygtk/pango-constants.html\">Here is "
"a list</link> of other text properties you can use. In order to use these "
"Pango constants, make sure to put the line <file>const Pango = imports.gi."
"Pango;</file> at the beginning of your code like we did."
msgstr ""
"여러분이 활용할 수 있는 다른 텍스트 속성 <link href=\"http://www.pygtk.org/"
"docs/pygtk/pango-constants.html\">목록</link> 입니다. 팡고 상수를 활용하려"
"면, 우리가 했던 바와 같이 <file>const Pango = imports.gi.Pango;</file> 줄을 "
"코드 앞부분에 넣었는지 확인하십시오."

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:181
#, no-wrap
msgid ""
"\n"
"        firstName.add_attribute (bold, \"text\", 0);\n"
"        lastName.add_attribute (normal, \"text\", 1);\n"
"        phone.add_attribute (normal, \"text\", 2);\n"
"\n"
"        // Insert the columns into the treeview\n"
"        this._treeView.insert_column (firstName, 0);\n"
"        this._treeView.insert_column (lastName, 1);\n"
"        this._treeView.insert_column (phone, 2);\n"
msgstr ""
"\n"
"        firstName.add_attribute (bold, \"text\", 0);\n"
"        lastName.add_attribute (normal, \"text\", 1);\n"
"        phone.add_attribute (normal, \"text\", 2);\n"
"\n"
"        // Insert the columns into the treeview\n"
"        this._treeView.insert_column (firstName, 0);\n"
"        this._treeView.insert_column (lastName, 1);\n"
"        this._treeView.insert_column (phone, 2);\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:191
msgid ""
"Now that we've put the CellRenderers into the TreeViewColumns, we use the "
"<file>add_attribute</file> method to tell each column to pull in text from "
"the model our TreeView is set to use; in this case, the ListStore with the "
"phonebook."
msgstr ""
"이제 CellRenderer를 TreeViewColumns에 넣었습니다. <file>add_attribute</file> "
"메서드를 활용하여 활용하기로 설정한 TreeView 모델에서 텍스트를 가져와서 각 칸"
"에 뿌리도록 하겠습니다. 이 경우 전화번호부가 들어간 ListStore가 되겠습니다."

#. (itstool) path: item/p
#: C/treeview_simple_liststore.js.page:193
msgid ""
"The first parameter is which CellRenderer we're going to use to render what "
"we're pulling in."
msgstr ""
"첫번째 매개변수는 우리가 렌더러에 데이터를 가져다 넣을때 활용할 CellRenderer"
"입니다."

#. (itstool) path: item/p
#: C/treeview_simple_liststore.js.page:194
msgid ""
"The second parameter is what kind of information we're going to pull in. In "
"this case, we're letting it know that we're rendering text."
msgstr ""
"두번째 매개변수는 가져다젛을 정보의 종류입니다. 여기서는 텍스트를 렌더링하라"
"고 알려줍니다."

#. (itstool) path: item/p
#: C/treeview_simple_liststore.js.page:195
msgid ""
"The third parameter is which of the ListStore's columns we're pulling that "
"information in from."
msgstr ""
"세번째 매개변수는 우리가 가져올 정보가 들어간 ListStore의 열 위치를 말합니다."

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:197
msgid ""
"After we've set that up, we use the TreeView's <file>insert_column</file> "
"method to put our TreeViewColumns inside it in order. Our TreeView is now "
"complete."
msgstr ""
"설정하고 나면 TreeView의 <file>insert_column</file> 메서드를 활용하여 "
"TreeViewColumns 네 순서대로 넣겠습니다. 이제 TreeView 구현이 끝났습니다."

#. (itstool) path: note/p
#: C/treeview_simple_liststore.js.page:198
msgid ""
"Normally, you might want to use a loop to initialize your TreeView, but in "
"this example we're spelling things out step by step for the sake of making "
"it easier to understand."
msgstr ""
"보통 TreeView를 초기화하려고 루프를 사용하고 싶을지도 모릅니다만, 이 예제에서"
"는 이해를 쉽게 하기 위한 단계별로 하나하나 설명하겠습니다."

#. (itstool) path: section/title
#: C/treeview_simple_liststore.js.page:202
msgid "Building the rest of the UI"
msgstr "나머지 사용자 인터페이스 구성"

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:203
#, no-wrap
msgid ""
"\n"
"        // Create the label that shows details for the name you select\n"
"        this._label = new Gtk.Label ({ label: \"\" });\n"
"\n"
"        // Get which item is selected\n"
"        this.selection = this._treeView.get_selection();\n"
"\n"
"        // When something new is selected, call _on_changed\n"
"        this.selection.connect ('changed', Lang.bind (this, this._onSelectionChanged));\n"
msgstr ""
"\n"
"        // Create the label that shows details for the name you select\n"
"        this._label = new Gtk.Label ({ label: \"\" });\n"
"\n"
"        // Get which item is selected\n"
"        this.selection = this._treeView.get_selection();\n"
"\n"
"        // When something new is selected, call _on_changed\n"
"        this.selection.connect ('changed', Lang.bind (this, this._onSelectionChanged));\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:213
msgid ""
"The TreeView's <file>get_selection</file> method returns an object called a "
"TreeSelection. A TreeSelection is like a TreeIter in that it's basically a "
"cursor that points at a particular row, except that the one it points to is "
"the one that's visibly highlighted as selected."
msgstr ""
"TreeView의 <file>get_selection</file> 메서드는 TreeSelection 객체를 반환합니"
"다. TreeSelection은 행 일부를 가리키는 근본 커서로서 TreeIter와 유사하지만, "
"TreeSelection에는 선택한 부분을 눈에 띄게 강조하는 차이점을 안고 있습니다."

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:214
msgid ""
"After we get the TreeSelection that goes with our TreeView, we ask it to "
"tell us when it changes which row it's pointing to. We do this by connecting "
"its <file>changed</file> signal to the _onSelectionChanged function we "
"wrote. This function changes the text displayed by the Label we just made."
msgstr ""
"TreeSelection을 TreeView에서 가져오고 난 후, TreeSelection에 가리키는 행이 어"
"디인지 요청할 수 있습니다. <file>changed</file> 시그널을 우리가 작성한 "
"_onSelectionChanged 함수에 연결하면 됩니다. 이 함수는 우리가 만든 Label의 텍"
"스트를 바꿉니다."

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:216
#, no-wrap
msgid ""
"\n"
"        // Create a grid to organize everything in\n"
"        this._grid = new Gtk.Grid;\n"
"\n"
"        // Attach the treeview and label to the grid\n"
"        this._grid.attach (this._treeView, 0, 0, 1, 1);\n"
"        this._grid.attach (this._label, 0, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
msgstr ""
"\n"
"        // Create a grid to organize everything in\n"
"        this._grid = new Gtk.Grid;\n"
"\n"
"        // Attach the treeview and label to the grid\n"
"        this._grid.attach (this._treeView, 0, 0, 1, 1);\n"
"        this._grid.attach (this._label, 0, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:231
msgid ""
"After we've gotten that out of the way, we create a <link xref=\"grid.js"
"\">Grid</link> to put everything in, then add it to our window and tell the "
"window to show itself and its contents."
msgstr ""
"위 과정을 끝내고 나면, 모든 위젯을 넣을 <link xref=\"grid.js\">Grid</link>를 "
"만들고, Grid를 창에 추가하여 창과 창에 있는 내용을 표시하도록 합니다."

#. (itstool) path: section/title
#: C/treeview_simple_liststore.js.page:235
msgid "Function which handles a changed selection"
msgstr "바뀐 선택을 처리하는 함수"

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:237
#, no-wrap
msgid ""
"\n"
"    _onSelectionChanged: function () {\n"
"\n"
"        // Grab a treeiter pointing to the current selection\n"
"        let [ isSelected, model, iter ] = this.selection.get_selected();\n"
"\n"
"        // Set the label to read off the values stored in the current selection\n"
"        this._label.set_label (\"\\n\" +\n"
"            this._listStore.get_value (iter, 0) + \" \" +\n"
"            this._listStore.get_value (iter, 1) + \" \" +\n"
"            this._listStore.get_value (iter, 2) + \"\\n\" +\n"
"            this._listStore.get_value (iter, 3));\n"
"\n"
"    }\n"
"\n"
"});\n"
msgstr ""
"\n"
"    _onSelectionChanged: function () {\n"
"\n"
"        // Grab a treeiter pointing to the current selection\n"
"        let [ isSelected, model, iter ] = this.selection.get_selected();\n"
"\n"
"        // Set the label to read off the values stored in the current selection\n"
"        this._label.set_label (\"\\n\" +\n"
"            this._listStore.get_value (iter, 0) + \" \" +\n"
"            this._listStore.get_value (iter, 1) + \" \" +\n"
"            this._listStore.get_value (iter, 2) + \"\\n\" +\n"
"            this._listStore.get_value (iter, 3));\n"
"\n"
"    }\n"
"\n"
"});\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:254
msgid ""
"The line of code with the let statement is a little convoluted, but it's "
"nonetheless the best way to get a TreeIter pointing to the same row as our "
"TreeSelection. It has to create a couple of other object references, but "
"<file>iter</file> is the only one we need."
msgstr ""
"let 문 코드 줄은 조금 복잡하긴 하지만, 그래도 TreeSelection에서 동일한 줄을 "
"가리키는 TreeIter를 가져오는 최상의 수단입니다. 다른 수많은 객체 참조를 들고 "
"있긴 하지만, <file>iter</file>만 필요합니다."

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:255
msgid ""
"After we've done that, we call the Label's <file>set_label</file> function, "
"and use the ListStore's <file>get_value</file> function a handful of times "
"to fill in the data we want to put in it. Its parameters are a TreeIter "
"pointing to the row we want to get data from, and the column."
msgstr ""
"이 과정이 끝나면 레이블의 <file>set_label</file> 함수를 호출하고 ListStore의 "
"<file>get_value</file>  함수를 활용하여 짦은 시간 내에 원하는 데이터를 채워넣"
"겠습니다. 매개 변수는 우리가 가져온 줄 위치와 열을 가리키는 TreeIter입니다."

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:256
msgid ""
"Here, we want to get data from all four columns, including the \"hidden\" "
"one that's not part of the TreeView. This way, we can use our Label to show "
"strings that are too large to fit in the TreeView, and that we don't need to "
"see at a glance."
msgstr ""
"TreeView의 일부가 아닌 \"hidden\"을 네 열의 데이터와 가져오려합니다. 여기서 "
"TreeView에 맞추긴 너무 긴 문자열을 Label에 표시하여 굳이 살펴볼 필요가 없게 "
"하겠습니다."

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:258
#, no-wrap
msgid ""
"\n"
"// Run the application\n"
"let app = new TreeViewExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"// Run the application\n"
"let app = new TreeViewExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.js.page:263
msgid ""
"Finally, we create a new instance of the finished TreeViewExample class, and "
"set the application running."
msgstr ""
"마지막으로 TreeViewExample 클래스의 새 인스턴스를 만들고 프로그램 실행을 설정"
"하겠습니다."

#. (itstool) path: section/code
#: C/treeview_simple_liststore.js.page:268
#, no-wrap
msgid ""
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"const Pango = imports.gi.Pango;\n"
"\n"
"const TreeViewExample = new Lang.Class({\n"
"    Name: 'TreeView Example with Simple ListStore',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jstreeviewsimpleliststore'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 250,\n"
"            default_width: 100,\n"
"            border_width: 20,\n"
"            title: \"My Phone Book\"});\n"
"\n"
"        // Create the underlying liststore for the phonebook\n"
"        this._listStore = new Gtk.ListStore ();\n"
"        this._listStore.set_column_types ([\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING]);\n"
"\n"
"        // Data to go in the phonebook\n"
"        let phonebook =\n"
"            [{ name: \"Jurg\", surname: \"Billeter\", phone: \"555-0123\",\n"
"                description: \"A friendly person.\"},\n"
"             { name: \"Johannes\", surname: \"Schmid\", phone: \"555-1234\",\n"
"                description: \"Easy phone number to remember.\"},\n"
"             { name: \"Julita\", surname: \"Inca\", phone: \"555-2345\",\n"
"                description: \"Another friendly person.\"},\n"
"             { name: \"Javier\", surname: \"Jardon\", phone: \"555-3456\",\n"
"                description: \"Bring fish for his penguins.\"},\n"
"             { name: \"Jason\", surname: \"Clinton\", phone: \"555-4567\",\n"
"                description: \"His cake's not a lie.\"},\n"
"             { name: \"Random J.\", surname: \"Hacker\", phone: \"555-5678\",\n"
"                description: \"Very random!\"}];\n"
"\n"
"        // Put the data in the phonebook\n"
"        for (let i = 0; i &lt; phonebook.length; i++ ) {\n"
"            let contact = phonebook [i];\n"
"            this._listStore.set (this._listStore.append(), [0, 1, 2, 3],\n"
"                [contact.name, contact.surname, contact.phone, contact.description]);\n"
"        }\n"
"\n"
"        // Create the treeview\n"
"        this._treeView = new Gtk.TreeView ({\n"
"            expand: true,\n"
"            model: this._listStore });\n"
"\n"
"        // Create the columns for the address book\n"
"        let firstName = new Gtk.TreeViewColumn ({ title: \"First Name\" });\n"
"        let lastName = new Gtk.TreeViewColumn ({ title: \"Last Name\" });\n"
"        let phone = new Gtk.TreeViewColumn ({ title: \"Phone Number\" });\n"
"\n"
"        // Create a cell renderer for when bold text is needed\n"
"        let bold = new Gtk.CellRendererText ({\n"
"            weight: Pango.Weight.BOLD });\n"
"\n"
"        // Create a cell renderer for normal text\n"
"        let normal = new Gtk.CellRendererText ();\n"
"\n"
"        // Pack the cell renderers into the columns\n"
"        firstName.pack_start (bold, true);\n"
"        lastName.pack_start (normal, true);\n"
"        phone.pack_start (normal, true);\n"
"\n"
"        // Set each column to pull text from the TreeView's model\n"
"        firstName.add_attribute (bold, \"text\", 0);\n"
"        lastName.add_attribute (normal, \"text\", 1);\n"
"        phone.add_attribute (normal, \"text\", 2);\n"
"\n"
"        // Insert the columns into the treeview\n"
"        this._treeView.insert_column (firstName, 0);\n"
"        this._treeView.insert_column (lastName, 1);\n"
"        this._treeView.insert_column (phone, 2);\n"
"\n"
"        // Create the label that shows details for the name you select\n"
"        this._label = new Gtk.Label ({ label: \"\" });\n"
"\n"
"        // Get which item is selected\n"
"        this.selection = this._treeView.get_selection();\n"
"\n"
"        // When something new is selected, call _on_changed\n"
"        this.selection.connect ('changed', Lang.bind (this, this._onSelectionChanged));\n"
"\n"
"        // Create a grid to organize everything in\n"
"        this._grid = new Gtk.Grid;\n"
"\n"
"        // Attach the treeview and label to the grid\n"
"        this._grid.attach (this._treeView, 0, 0, 1, 1);\n"
"        this._grid.attach (this._label, 0, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onSelectionChanged: function () {\n"
"\n"
"        // Grab a treeiter pointing to the current selection\n"
"        let [ isSelected, model, iter ] = this.selection.get_selected();\n"
"\n"
"        // Set the label to read off the values stored in the current selection\n"
"        this._label.set_label (\"\\n\" +\n"
"            this._listStore.get_value (iter, 0) + \" \" +\n"
"            this._listStore.get_value (iter, 1) + \" \" +\n"
"            this._listStore.get_value (iter, 2) + \"\\n\" +\n"
"            this._listStore.get_value (iter, 3));\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new TreeViewExample ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"#!/usr/bin/gjs\n"
"\n"
"const GObject = imports.gi.GObject;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"const Pango = imports.gi.Pango;\n"
"\n"
"const TreeViewExample = new Lang.Class({\n"
"    Name: 'TreeView Example with Simple ListStore',\n"
"\n"
"    // Create the application itself\n"
"    _init: function() {\n"
"        this.application = new Gtk.Application({\n"
"            application_id: 'org.example.jstreeviewsimpleliststore'\n"
"        });\n"
"\n"
"    // Connect 'activate' and 'startup' signals to the callback functions\n"
"    this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    this.application.connect('startup', Lang.bind(this, this._onStartup));\n"
"    },\n"
"\n"
"    // Callback function for 'activate' signal presents window when active\n"
"    _onActivate: function() {\n"
"        this._window.present();\n"
"    },\n"
"\n"
"    // Callback function for 'startup' signal builds the UI\n"
"    _onStartup: function() {\n"
"        this._buildUI ();\n"
"    },\n"
"\n"
"\n"
"\n"
"    // Build the application's UI\n"
"    _buildUI: function() {\n"
"\n"
"        // Create the application window\n"
"        this._window = new Gtk.ApplicationWindow({\n"
"            application: this.application,\n"
"            window_position: Gtk.WindowPosition.CENTER,\n"
"            default_height: 250,\n"
"            default_width: 100,\n"
"            border_width: 20,\n"
"            title: \"My Phone Book\"});\n"
"\n"
"        // Create the underlying liststore for the phonebook\n"
"        this._listStore = new Gtk.ListStore ();\n"
"        this._listStore.set_column_types ([\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING,\n"
"            GObject.TYPE_STRING]);\n"
"\n"
"        // Data to go in the phonebook\n"
"        let phonebook =\n"
"            [{ name: \"Jurg\", surname: \"Billeter\", phone: \"555-0123\",\n"
"                description: \"A friendly person.\"},\n"
"             { name: \"Johannes\", surname: \"Schmid\", phone: \"555-1234\",\n"
"                description: \"Easy phone number to remember.\"},\n"
"             { name: \"Julita\", surname: \"Inca\", phone: \"555-2345\",\n"
"                description: \"Another friendly person.\"},\n"
"             { name: \"Javier\", surname: \"Jardon\", phone: \"555-3456\",\n"
"                description: \"Bring fish for his penguins.\"},\n"
"             { name: \"Jason\", surname: \"Clinton\", phone: \"555-4567\",\n"
"                description: \"His cake's not a lie.\"},\n"
"             { name: \"Random J.\", surname: \"Hacker\", phone: \"555-5678\",\n"
"                description: \"Very random!\"}];\n"
"\n"
"        // Put the data in the phonebook\n"
"        for (let i = 0; i &lt; phonebook.length; i++ ) {\n"
"            let contact = phonebook [i];\n"
"            this._listStore.set (this._listStore.append(), [0, 1, 2, 3],\n"
"                [contact.name, contact.surname, contact.phone, contact.description]);\n"
"        }\n"
"\n"
"        // Create the treeview\n"
"        this._treeView = new Gtk.TreeView ({\n"
"            expand: true,\n"
"            model: this._listStore });\n"
"\n"
"        // Create the columns for the address book\n"
"        let firstName = new Gtk.TreeViewColumn ({ title: \"First Name\" });\n"
"        let lastName = new Gtk.TreeViewColumn ({ title: \"Last Name\" });\n"
"        let phone = new Gtk.TreeViewColumn ({ title: \"Phone Number\" });\n"
"\n"
"        // Create a cell renderer for when bold text is needed\n"
"        let bold = new Gtk.CellRendererText ({\n"
"            weight: Pango.Weight.BOLD });\n"
"\n"
"        // Create a cell renderer for normal text\n"
"        let normal = new Gtk.CellRendererText ();\n"
"\n"
"        // Pack the cell renderers into the columns\n"
"        firstName.pack_start (bold, true);\n"
"        lastName.pack_start (normal, true);\n"
"        phone.pack_start (normal, true);\n"
"\n"
"        // Set each column to pull text from the TreeView's model\n"
"        firstName.add_attribute (bold, \"text\", 0);\n"
"        lastName.add_attribute (normal, \"text\", 1);\n"
"        phone.add_attribute (normal, \"text\", 2);\n"
"\n"
"        // Insert the columns into the treeview\n"
"        this._treeView.insert_column (firstName, 0);\n"
"        this._treeView.insert_column (lastName, 1);\n"
"        this._treeView.insert_column (phone, 2);\n"
"\n"
"        // Create the label that shows details for the name you select\n"
"        this._label = new Gtk.Label ({ label: \"\" });\n"
"\n"
"        // Get which item is selected\n"
"        this.selection = this._treeView.get_selection();\n"
"\n"
"        // When something new is selected, call _on_changed\n"
"        this.selection.connect ('changed', Lang.bind (this, this._onSelectionChanged));\n"
"\n"
"        // Create a grid to organize everything in\n"
"        this._grid = new Gtk.Grid;\n"
"\n"
"        // Attach the treeview and label to the grid\n"
"        this._grid.attach (this._treeView, 0, 0, 1, 1);\n"
"        this._grid.attach (this._label, 0, 1, 1, 1);\n"
"\n"
"        // Add the grid to the window\n"
"        this._window.add (this._grid);\n"
"\n"
"        // Show the window and all child widgets\n"
"        this._window.show_all();\n"
"    },\n"
"\n"
"\n"
"\n"
"    _onSelectionChanged: function () {\n"
"\n"
"        // Grab a treeiter pointing to the current selection\n"
"        let [ isSelected, model, iter ] = this.selection.get_selected();\n"
"\n"
"        // Set the label to read off the values stored in the current selection\n"
"        this._label.set_label (\"\\n\" +\n"
"            this._listStore.get_value (iter, 0) + \" \" +\n"
"            this._listStore.get_value (iter, 1) + \" \" +\n"
"            this._listStore.get_value (iter, 2) + \"\\n\" +\n"
"            this._listStore.get_value (iter, 3));\n"
"\n"
"    }\n"
"\n"
"});\n"
"\n"
"// Run the application\n"
"let app = new TreeViewExample ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: item/p
#: C/treeview_simple_liststore.js.page:282
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TreeSelection."
"html\">Gtk.TreeSelection</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TreeSelection."
"html\">Gtk.TreeSelection</link>"

#. (itstool) path: item/p
#: C/treeview_simple_liststore.js.page:283
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TreeView.html"
"\">Gtk.TreeView</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk.TreeView.html"
"\">Gtk.TreeView</link>"

#. (itstool) path: item/p
#: C/treeview_simple_liststore.js.page:284
msgid ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"TreeViewColumn.html\">Gtk.TreeViewColumn</link>"
msgstr ""
"<link href=\"http://www.roojs.org/seed/gir-1.2-gtk-3.0/gjs/Gtk."
"TreeViewColumn.html\">Gtk.TreeViewColumn</link>"

#. (itstool) path: info/title
#: C/treeview_simple_liststore.py.page:8
msgctxt "text"
msgid "Simple TreeView with ListStore (Python)"
msgstr "간단한 TreeView와 ListStore(Python)"

#. (itstool) path: info/desc
#: C/treeview_simple_liststore.py.page:20
msgid "A TreeView displaying a ListStore (simpler example)"
msgstr "ListStore를 표시하는 TreeView(더 간단한 예제)"

#. (itstool) path: page/title
#: C/treeview_simple_liststore.py.page:23
msgid "Simple TreeView with ListStore"
msgstr "간단한 TreeView와 ListStore"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/treeview_simple_liststore.py.page:24
#: C/treeview_simple_liststore.vala.page:24
msgctxt "_"
msgid ""
"external ref='media/treeview_simple_liststore.png' "
"md5='2dc501a2b95b094da985d37b66aee90c'"
msgstr ""

#. (itstool) path: section/code
#: C/treeview_simple_liststore.py.page:32
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Pango\n"
"import sys\n"
"\n"
"columns = [\"First Name\",\n"
"           \"Last Name\",\n"
"           \"Phone Number\"]\n"
"\n"
"phonebook = [[\"Jurg\", \"Billeter\", \"555-0123\"],\n"
"             [\"Johannes\", \"Schmid\", \"555-1234\"],\n"
"             [\"Julita\", \"Inca\", \"555-2345\"],\n"
"             [\"Javier\", \"Jardon\", \"555-3456\"],\n"
"             [\"Jason\", \"Clinton\", \"555-4567\"],\n"
"             [\"Random J.\", \"Hacker\", \"555-5678\"]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"My Phone Book\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data in the model (three strings for each row, one for each\n"
"        # column)\n"
"        listmodel = Gtk.ListStore(str, str, str)\n"
"        # append the values in the model\n"
"        for i in range(len(phonebook)):\n"
"            listmodel.append(phonebook[i])\n"
"\n"
"        # a treeview to see the data stored in the model\n"
"        view = Gtk.TreeView(model=listmodel)\n"
"        # for each column\n"
"        for i in range(len(columns)):\n"
"            # cellrenderer to render the text\n"
"            cell = Gtk.CellRendererText()\n"
"            # the text in the first column should be in boldface\n"
"            if i == 0:\n"
"                cell.props.weight_set = True\n"
"                cell.props.weight = Pango.Weight.BOLD\n"
"            # the column is created\n"
"            col = Gtk.TreeViewColumn(columns[i], cell, text=i)\n"
"            # and it is appended to the treeview\n"
"            view.append_column(col)\n"
"\n"
"        # when a row is selected, it emits a signal\n"
"        view.get_selection().connect(\"changed\", self.on_changed)\n"
"\n"
"        # the label we use to show the selection\n"
"        self.label = Gtk.Label()\n"
"        self.label.set_text(\"\")\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(view, 0, 0, 1, 1)\n"
"        grid.attach(self.label, 0, 1, 1, 1)\n"
"\n"
"        # attach the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    def on_changed(self, selection):\n"
"        # get the model and the iterator that points at the data in the model\n"
"        (model, iter) = selection.get_selected()\n"
"        # set the label to a new value depending on the selection\n"
"        self.label.set_text(\"\\n %s %s %s\" %\n"
"                            (model[iter][0],  model[iter][1], model[iter][2]))\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Pango\n"
"import sys\n"
"\n"
"columns = [\"First Name\",\n"
"           \"Last Name\",\n"
"           \"Phone Number\"]\n"
"\n"
"phonebook = [[\"Jurg\", \"Billeter\", \"555-0123\"],\n"
"             [\"Johannes\", \"Schmid\", \"555-1234\"],\n"
"             [\"Julita\", \"Inca\", \"555-2345\"],\n"
"             [\"Javier\", \"Jardon\", \"555-3456\"],\n"
"             [\"Jason\", \"Clinton\", \"555-4567\"],\n"
"             [\"Random J.\", \"Hacker\", \"555-5678\"]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"My Phone Book\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data in the model (three strings for each row, one for each\n"
"        # column)\n"
"        listmodel = Gtk.ListStore(str, str, str)\n"
"        # append the values in the model\n"
"        for i in range(len(phonebook)):\n"
"            listmodel.append(phonebook[i])\n"
"\n"
"        # a treeview to see the data stored in the model\n"
"        view = Gtk.TreeView(model=listmodel)\n"
"        # for each column\n"
"        for i in range(len(columns)):\n"
"            # cellrenderer to render the text\n"
"            cell = Gtk.CellRendererText()\n"
"            # the text in the first column should be in boldface\n"
"            if i == 0:\n"
"                cell.props.weight_set = True\n"
"                cell.props.weight = Pango.Weight.BOLD\n"
"            # the column is created\n"
"            col = Gtk.TreeViewColumn(columns[i], cell, text=i)\n"
"            # and it is appended to the treeview\n"
"            view.append_column(col)\n"
"\n"
"        # when a row is selected, it emits a signal\n"
"        view.get_selection().connect(\"changed\", self.on_changed)\n"
"\n"
"        # the label we use to show the selection\n"
"        self.label = Gtk.Label()\n"
"        self.label.set_text(\"\")\n"
"\n"
"        # a grid to attach the widgets\n"
"        grid = Gtk.Grid()\n"
"        grid.attach(view, 0, 0, 1, 1)\n"
"        grid.attach(self.label, 0, 1, 1, 1)\n"
"\n"
"        # attach the grid to the window\n"
"        self.add(grid)\n"
"\n"
"    def on_changed(self, selection):\n"
"        # get the model and the iterator that points at the data in the model\n"
"        (model, iter) = selection.get_selected()\n"
"        # set the label to a new value depending on the selection\n"
"        self.label.set_text(\"\\n %s %s %s\" %\n"
"                            (model[iter][0],  model[iter][1], model[iter][2]))\n"
"        return True\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/p
#: C/treeview_simple_liststore.py.page:37
msgid ""
"The TreeView widget is designed around a <em>Model/View/Controller</em> "
"design: the <em>Model</em> stores the data; the <em>View</em> gets change "
"notifications and displays the content of the model; the <em>Controller</"
"em>, finally, changes the state of the model and notifies the view of these "
"changes. For more information, and for a list of useful methods for "
"TreeModel, see <link xref=\"model-view-controller.py\"/>."
msgstr ""
"TreeView 위젯은 <em>Model/View/Controller</em>  방식으로 설계했습니다. "
"<em>Model</em>은 데이터를, <em>View</em>는 바뀐 내용 알림을 받은 후의 모델의 "
"내용을, 마지막으로 <em>Controller</em>는 모델의 상태를 바꾸고 뷰에게 바뀐 모"
"델의 상태를 알리는 코드를 담습니다. 자세한 내용과 TreeModel에 대한 쓸만한 메"
"서드 목록을 보시려면 <link xref=\"model-view-controller.py\"/>를 참고하십시"
"오."

#. (itstool) path: section/p
#: C/treeview_simple_liststore.py.page:38
msgid ""
"In line 44 the <code>\"changed\"</code> signal is connected to the callback "
"function <code>on_changed()</code> using <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code>. See <link "
"xref=\"signals-callbacks.py\"/> for a more detailed explanation."
msgstr ""
"44번째 줄에서 <code>\"changed\"</code> 시그널은 <code><var>widget</var>."
"connect(<var>signal</var>, <var>callback function</var>)</code> 함수로 "
"<code>on_changed()</code> 콜백 함수에 연결했습니다. 더 자세한 설명은 <link "
"xref=\"signals-callbacks.py\"/>를 참조하십시오."

#. (itstool) path: item/p
#: C/treeview_simple_liststore.py.page:51
msgid ""
"<link href=\"http://developer.gnome.org/pango/stable/pango-Fonts.html"
"\">Fonts</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/pango/stable/pango-Fonts.html"
"\">Fonts</link>"

#. (itstool) path: info/title
#: C/treeview_simple_liststore.vala.page:8
msgctxt "text"
msgid "Simple Treeview with ListStore (Vala)"
msgstr "간단한 TreeView와 ListStore(Vala)"

#. (itstool) path: info/desc
#: C/treeview_simple_liststore.vala.page:20
msgid "A widget can display any TreeModel implementation (lists and trees)"
msgstr "TreeModel 구현체를 나타낼 수 있는 위젯(리스트와 트리)"

#. (itstool) path: page/title
#: C/treeview_simple_liststore.vala.page:23
msgid "Simple Treeview with ListStore"
msgstr "ListStore로 구현한 간단한 TreeView"

#. (itstool) path: page/p
#: C/treeview_simple_liststore.vala.page:25
msgid ""
"This TreeView displays a simple ListStore with the Selection \"changed\" "
"signal connected."
msgstr ""
"이 트리뷰에서는 선택 \"changed\" 시그널을 연결하여 간단한 ListStore를 보여드"
"립니다."

#. (itstool) path: page/code
#: C/treeview_simple_liststore.vala.page:27
#, no-wrap
msgid ""
"public class PhoneBookEntry {\n"
"\tpublic string firstname;\n"
"\tpublic string lastname;\n"
"\tpublic string phone;\n"
"\n"
"\tpublic PhoneBookEntry (string f, string l, string p) {\n"
"\t\tthis.firstname = f;\n"
"\t\tthis.lastname = l;\n"
"\t\tthis.phone = p;\n"
"\t}\n"
"}\n"
"\n"
"class TreeViewSimpleListStore : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Label label;\n"
"\n"
"\tPhoneBookEntry[] phonebook = {\n"
"\t\tnew PhoneBookEntry (\"Jurg\", \"Billeter\", \"555-0123\"),\n"
"\t\tnew PhoneBookEntry (\"Johannes\", \"Schmid\", \"555-1234\"),\n"
"\t\tnew PhoneBookEntry (\"Julita\", \"Inca\", \"555-2345\"),\n"
"\t\tnew PhoneBookEntry (\"Javier\", \"Jardon\", \"555-3456\"),\n"
"\t\tnew PhoneBookEntry (\"Jason\", \"Clinton\", \"555-4567\"),\n"
"\t\tnew PhoneBookEntry (\"Random J.\", \"Hacker\", \"555-5678\")\n"
"\t};\n"
"\n"
"\tenum Column {\n"
"\t\tFIRSTNAME,\n"
"\t\tLASTNAME,\n"
"\t\tPHONE\n"
"\t}\n"
"\n"
"\tinternal TreeViewSimpleListStore (MyApplication app) {\n"
"\t\tObject (application: app, title: \"My Phone Book\");\n"
"\n"
"\t\tthis.set_default_size (250, 100);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tvar view = new Gtk.TreeView ();\n"
"\t\tthis.setup_treeview (view);\n"
"\t\tview.expand = true;\n"
"\n"
"\t\tlabel = new Gtk.Label (\"\");\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\n"
"\t\tgrid.attach (view, 0, 0, 1, 1);\n"
"\t\tgrid.attach (label, 0, 1, 1, 1);\n"
"\t\tthis.add (grid);\n"
"\n"
"\t\tvar selection = view.get_selection ();\n"
"\t\tselection.changed.connect (this.on_changed);\n"
"\t}\n"
"\n"
"\tvoid setup_treeview (Gtk.TreeView view) {\n"
"\t\tvar listmodel = new Gtk.ListStore (3, typeof (string),\n"
"                                              typeof (string),\n"
"                                              typeof (string));\n"
"\t\tview.set_model (listmodel);\n"
"\n"
"\t\tvar cell = new Gtk.CellRendererText ();\n"
"\n"
"\t\t/* 'weight' refers to font boldness.\n"
"\t\t *  400 is normal.\n"
"\t\t *  700 is bold.\n"
"\t\t */\n"
"\t\tcell.set (\"weight_set\", true);\n"
"\t\tcell.set (\"weight\", 700);\n"
"\n"
"\t\t/*columns*/\n"
"\t\tview.insert_column_with_attributes (-1, \"First Name\",\n"
"                                                cell, \"text\",\n"
"                                                Column.FIRSTNAME);\n"
"\n"
"\t\tview.insert_column_with_attributes (-1, \"Last Name\",\n"
"                                                new Gtk.CellRendererText (),\n"
"                                                \"text\", Column.LASTNAME);\n"
"\n"
"\t\tview.insert_column_with_attributes (-1, \"Phone Number\",\n"
"                                                new Gtk.CellRendererText (),\n"
"                                                \"text\", Column.PHONE);\n"
"\n"
"\t\t/* Insert the phonebook into the ListStore */\n"
"\t\tGtk.TreeIter iter;\n"
"\t\tfor (int i = 0; i &lt; phonebook.length; i++) {\n"
"\t\t\tlistmodel.append (out iter);\n"
"\t\t\tlistmodel.set (iter, Column.FIRSTNAME,\n"
"                                 phonebook[i].firstname,\n"
"                                 Column.LASTNAME, phonebook[i].lastname,\n"
"                                 Column.PHONE, phonebook[i].phone);\n"
"\t\t}\n"
"\t}\n"
"\n"
"\tvoid on_changed (Gtk.TreeSelection selection) {\n"
"\t\tGtk.TreeModel model;\n"
"\t\tGtk.TreeIter iter;\n"
"\t\tstring name;\n"
"\t\tstring lastname;\n"
"\t\tstring phone;\n"
"\n"
"\t\tif (selection.get_selected (out model, out iter)) {\n"
"\t\t\tmodel.get (iter,\n"
"                                   Column.FIRSTNAME, out name,\n"
"                                   Column.LASTNAME, out lastname,\n"
"                                   Column.PHONE, out phone);\n"
"\n"
"\t\t\tlabel.set_text (\"\\n\" + name + \" \" + lastname + \" \" + phone);\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create new Window and show all the things. */\n"
"\t\tnew TreeViewSimpleListStore (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"example.liststore.simple.treeview\");\n"
"\t}\n"
"}\n"
"\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"
msgstr ""
"public class PhoneBookEntry {\n"
"\tpublic string firstname;\n"
"\tpublic string lastname;\n"
"\tpublic string phone;\n"
"\n"
"\tpublic PhoneBookEntry (string f, string l, string p) {\n"
"\t\tthis.firstname = f;\n"
"\t\tthis.lastname = l;\n"
"\t\tthis.phone = p;\n"
"\t}\n"
"}\n"
"\n"
"class TreeViewSimpleListStore : Gtk.ApplicationWindow {\n"
"\n"
"\tGtk.Label label;\n"
"\n"
"\tPhoneBookEntry[] phonebook = {\n"
"\t\tnew PhoneBookEntry (\"Jurg\", \"Billeter\", \"555-0123\"),\n"
"\t\tnew PhoneBookEntry (\"Johannes\", \"Schmid\", \"555-1234\"),\n"
"\t\tnew PhoneBookEntry (\"Julita\", \"Inca\", \"555-2345\"),\n"
"\t\tnew PhoneBookEntry (\"Javier\", \"Jardon\", \"555-3456\"),\n"
"\t\tnew PhoneBookEntry (\"Jason\", \"Clinton\", \"555-4567\"),\n"
"\t\tnew PhoneBookEntry (\"Random J.\", \"Hacker\", \"555-5678\")\n"
"\t};\n"
"\n"
"\tenum Column {\n"
"\t\tFIRSTNAME,\n"
"\t\tLASTNAME,\n"
"\t\tPHONE\n"
"\t}\n"
"\n"
"\tinternal TreeViewSimpleListStore (MyApplication app) {\n"
"\t\tObject (application: app, title: \"My Phone Book\");\n"
"\n"
"\t\tthis.set_default_size (250, 100);\n"
"\t\tthis.border_width = 10;\n"
"\n"
"\t\tvar view = new Gtk.TreeView ();\n"
"\t\tthis.setup_treeview (view);\n"
"\t\tview.expand = true;\n"
"\n"
"\t\tlabel = new Gtk.Label (\"\");\n"
"\n"
"\t\tvar grid = new Gtk.Grid ();\n"
"\n"
"\t\tgrid.attach (view, 0, 0, 1, 1);\n"
"\t\tgrid.attach (label, 0, 1, 1, 1);\n"
"\t\tthis.add (grid);\n"
"\n"
"\t\tvar selection = view.get_selection ();\n"
"\t\tselection.changed.connect (this.on_changed);\n"
"\t}\n"
"\n"
"\tvoid setup_treeview (Gtk.TreeView view) {\n"
"\t\tvar listmodel = new Gtk.ListStore (3, typeof (string),\n"
"                                              typeof (string),\n"
"                                              typeof (string));\n"
"\t\tview.set_model (listmodel);\n"
"\n"
"\t\tvar cell = new Gtk.CellRendererText ();\n"
"\n"
"\t\t/* 'weight' refers to font boldness.\n"
"\t\t *  400 is normal.\n"
"\t\t *  700 is bold.\n"
"\t\t */\n"
"\t\tcell.set (\"weight_set\", true);\n"
"\t\tcell.set (\"weight\", 700);\n"
"\n"
"\t\t/*columns*/\n"
"\t\tview.insert_column_with_attributes (-1, \"First Name\",\n"
"                                                cell, \"text\",\n"
"                                                Column.FIRSTNAME);\n"
"\n"
"\t\tview.insert_column_with_attributes (-1, \"Last Name\",\n"
"                                                new Gtk.CellRendererText (),\n"
"                                                \"text\", Column.LASTNAME);\n"
"\n"
"\t\tview.insert_column_with_attributes (-1, \"Phone Number\",\n"
"                                                new Gtk.CellRendererText (),\n"
"                                                \"text\", Column.PHONE);\n"
"\n"
"\t\t/* Insert the phonebook into the ListStore */\n"
"\t\tGtk.TreeIter iter;\n"
"\t\tfor (int i = 0; i &lt; phonebook.length; i++) {\n"
"\t\t\tlistmodel.append (out iter);\n"
"\t\t\tlistmodel.set (iter, Column.FIRSTNAME,\n"
"                                 phonebook[i].firstname,\n"
"                                 Column.LASTNAME, phonebook[i].lastname,\n"
"                                 Column.PHONE, phonebook[i].phone);\n"
"\t\t}\n"
"\t}\n"
"\n"
"\tvoid on_changed (Gtk.TreeSelection selection) {\n"
"\t\tGtk.TreeModel model;\n"
"\t\tGtk.TreeIter iter;\n"
"\t\tstring name;\n"
"\t\tstring lastname;\n"
"\t\tstring phone;\n"
"\n"
"\t\tif (selection.get_selected (out model, out iter)) {\n"
"\t\t\tmodel.get (iter,\n"
"                                   Column.FIRSTNAME, out name,\n"
"                                   Column.LASTNAME, out lastname,\n"
"                                   Column.PHONE, out phone);\n"
"\n"
"\t\t\tlabel.set_text (\"\\n\" + name + \" \" + lastname + \" \" + phone);\n"
"\t\t}\n"
"\t}\n"
"}\n"
"\n"
"class MyApplication : Gtk.Application {\n"
"\tprotected override void activate () {\n"
"\n"
"\t\t/* Create new Window and show all the things. */\n"
"\t\tnew TreeViewSimpleListStore (this).show_all ();\n"
"\t}\n"
"\n"
"\tinternal MyApplication () {\n"
"\t\tObject (application_id: \"example.liststore.simple.treeview\");\n"
"\t}\n"
"}\n"
"\n"
"int main (string[] args) {\n"
"\treturn new MyApplication ().run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/treeview_simple_liststore.vala.page:32
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.TreeView.html\">Gtk."
"TreeView</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.TreeView.html\">Gtk."
"TreeView</link>"

#. (itstool) path: item/p
#: C/treeview_simple_liststore.vala.page:34
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.TreeSelection.html\">Gtk."
"TreeSelection</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.TreeSelection.html\">Gtk."
"TreeSelection</link>"

#. (itstool) path: info/desc
#: C/treeview_treestore.py.page:20
msgid "A TreeView displaying a TreeStore (simpler example)"
msgstr "TreeStore를 표시하는 TreeView(더 간단한 예제)"

#. (itstool) path: page/title
#: C/treeview_treestore.py.page:23
msgid "Simpler TreeView with TreeStore"
msgstr "더 간단한 TreeView와 TreeStore"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/treeview_treestore.py.page:24
msgctxt "_"
msgid ""
"external ref='media/treeview_treestore.png' "
"md5='5ca87bc4acd55c527b3fb5fd46779d85'"
msgstr ""

#. (itstool) path: page/p
#: C/treeview_treestore.py.page:25
msgid "This TreeView displays a TreeStore."
msgstr "이 TreeView에서는 TreeStore의 내용을 표시합니다."

#. (itstool) path: section/code
#: C/treeview_treestore.py.page:32
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import Pango\n"
"import sys\n"
"\n"
"books = [[\"Tolstoy, Leo\", \"War and Peace\", \"Anna Karenina\"],\n"
"         [\"Shakespeare, William\", \"Hamlet\", \"Macbeth\", \"Othello\"],\n"
"         [\"Tolkien, J.R.R.\", \"The Lord of the Rings\"]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Library\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data are stored in the model\n"
"        # create a treestore with one column\n"
"        store = Gtk.TreeStore(str)\n"
"        for i in range(len(books)):\n"
"            # the iter piter is returned when appending the author\n"
"            piter = store.append(None, [books[i][0]])\n"
"            # append the books as children of the author\n"
"            j = 1\n"
"            while j &lt; len(books[i]):\n"
"                store.append(piter, [books[i][j]])\n"
"                j += 1\n"
"\n"
"        # the treeview shows the model\n"
"        # create a treeview on the model store\n"
"        view = Gtk.TreeView()\n"
"        view.set_model(store)\n"
"\n"
"        # the cellrenderer for the column - text\n"
"        renderer_books = Gtk.CellRendererText()\n"
"        # the column is created\n"
"        column_books = Gtk.TreeViewColumn(\n"
"            \"Books by Author\", renderer_books, text=0)\n"
"        # and it is appended to the treeview\n"
"        view.append_column(column_books)\n"
"\n"
"        # the books are sortable by author\n"
"        column_books.set_sort_column_id(0)\n"
"\n"
"        # add the treeview to the window\n"
"        self.add(view)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import Pango\n"
"import sys\n"
"\n"
"books = [[\"Tolstoy, Leo\", \"War and Peace\", \"Anna Karenina\"],\n"
"         [\"Shakespeare, William\", \"Hamlet\", \"Macbeth\", \"Othello\"],\n"
"         [\"Tolkien, J.R.R.\", \"The Lord of the Rings\"]]\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Library\", application=app)\n"
"        self.set_default_size(250, 100)\n"
"        self.set_border_width(10)\n"
"\n"
"        # the data are stored in the model\n"
"        # create a treestore with one column\n"
"        store = Gtk.TreeStore(str)\n"
"        for i in range(len(books)):\n"
"            # the iter piter is returned when appending the author\n"
"            piter = store.append(None, [books[i][0]])\n"
"            # append the books as children of the author\n"
"            j = 1\n"
"            while j &lt; len(books[i]):\n"
"                store.append(piter, [books[i][j]])\n"
"                j += 1\n"
"\n"
"        # the treeview shows the model\n"
"        # create a treeview on the model store\n"
"        view = Gtk.TreeView()\n"
"        view.set_model(store)\n"
"\n"
"        # the cellrenderer for the column - text\n"
"        renderer_books = Gtk.CellRendererText()\n"
"        # the column is created\n"
"        column_books = Gtk.TreeViewColumn(\n"
"            \"Books by Author\", renderer_books, text=0)\n"
"        # and it is appended to the treeview\n"
"        view.append_column(column_books)\n"
"\n"
"        # the books are sortable by author\n"
"        column_books.set_sort_column_id(0)\n"
"\n"
"        # add the treeview to the window\n"
"        self.add(view)\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: info/title
#: C/tutorial.py.page:9
msgctxt "text"
msgid "Tutorial for beginners (Python)"
msgstr "초보자 지침서(Python)"

#. (itstool) path: info/desc
#: C/tutorial.py.page:13
msgid ""
"A tutorial for beginners who want to learn how to program GUIs using GTK+ in "
"Python."
msgstr ""
"GTK+를 활용하여 파이썬 언어로 프로그래밍하는 방법을 배워보려는 초보자용 따라"
"하기 지침입니다."

#. (itstool) path: credit/years
#: C/tutorial.py.page:22
msgid "2012 2013"
msgstr "2012 2013"

#. (itstool) path: credit/name
#: C/tutorial.py.page:25
msgid "Jim Campbell"
msgstr "Jim Campbell"

#. (itstool) path: synopsis/p
#: C/tutorial.py.page:34
msgid ""
"By following these tutorials you will learn the basics of GUI programming "
"using GTK+ in Python."
msgstr ""
"이 따라하기 지침서를 통해 파이썬 언어를 통한 GTK+ GUI 프로그래밍 기본을 배웁"
"니다."

#. (itstool) path: synopsis/p
#: C/tutorial.py.page:36
msgid ""
"If you have never programmed before, or are not familiar with the concepts "
"of object oriented programming, you may need to learn a few basics first. "
"The book <link href=\"http://learnpythonthehardway.org/book/\">Learn Python "
"the Hard Way</link> or <link href=\"http://docs.python.org/tutorial/index."
"html\">The Python Tutorial</link> may be a better place for you to start. "
"You may also be interested in <link href=\"http://python-gtk-3-tutorial."
"readthedocs.org/en/latest/index.html\">The Python GTK+ 3 Tutorial</link>. "
"Once you master the basics, be sure to come back and check out these "
"tutorials."
msgstr ""
"프로그래밍을 해본 적이 없거나 객체지향 프로그래밍에 익숙하지 않다면 우선 기"
"본 학습이 필요합니다. <link href=\"http://learnpythonthehardway.org/book/"
"\">Learn Python the Hard Way</link> 또는 <link href=\"http://docs.python.org/"
"tutorial/index.html\">The Python Tutorial</link>이 시작하기에 좋은 자료입니"
"다. <link href=\"http://python-gtk-3-tutorial.readthedocs.org/en/latest/"
"index.html\">The Python GTK+ 3 Tutorial</link>에도 관심있을 지도 모릅니다. 기"
"본을 익히고 나면 돌아와서 이 지침서를 다시 확인해보십시오."

#. (itstool) path: section/title
#: C/tutorial.py.page:42
msgid "To run the code samples"
msgstr "예제 코드를 실행하려면"

#. (itstool) path: section/p
#: C/tutorial.py.page:44
msgid "To run the code samples in the tutorial:"
msgstr "지침서의 예제 코드를 실행하려면:"

#. (itstool) path: item/p
#: C/tutorial.py.page:46
msgid ""
"Type or copy and paste the code into a file, and save the file with a name "
"like <var>filename</var>.py"
msgstr ""
"파일에 코드를 입력하거나 복사하여 붙여넣고 <var>filename</var>.py 식으로 파일"
"을 저장하십시오"

#. (itstool) path: item/p
#: C/tutorial.py.page:47
msgid "To execute the code, type in the terminal:"
msgstr "코드를 실행하려면 터미널에 다음과 같이 입력하십시오:"

#. (itstool) path: item/screen
#: C/tutorial.py.page:48
#, no-wrap
msgid "python <var>filename</var>.py"
msgstr "python <var>filename</var>.py"

#. (itstool) path: section/p
#: C/tutorial.py.page:51
msgid ""
"After executing the code, you will either see the widget on your screen, or "
"(if you have mistyped some of the code) you will see an error message that "
"will help you identify the problem."
msgstr ""
"코드를 실행한 다음에는 화면에 위젯을 띄워 볼 수 있거나, (코드에 오타가 있을 "
"경우) 문제를 확인하는데 도움을 줄 오류 메시지를 볼 수 있습니다."

#. (itstool) path: section/title
#: C/tutorial.py.page:55
msgid "A path through the widgets (with some theory)"
msgstr "위젯 활용법(과 약간의 이론 지식)"

#. (itstool) path: section/p
#: C/tutorial.py.page:56
msgid ""
"The tutorial will walk you through increasingly complex examples and "
"programming theory, but you can also feel free to just go directly to the "
"tutorial that is most helpful to you."
msgstr ""
"이 따라하기 지침은 여러분을 점점 복잡한 예제와 프로그래밍 이론 내용으로 안내"
"하지만, 여러분에게 더 도움이 되는 내용이 들어있는 다른 따라하기 지침으로 바"
"로 건너뛰셔도 됩니다."

#. (itstool) path: steps/title
#: C/tutorial.py.page:58
msgid "Tutorial"
msgstr "지침서"

#. (itstool) path: steps/title
#: C/tutorial.py.page:60
msgid "Basic windows"
msgstr "기본 창"

#. (itstool) path: steps/title
#: C/tutorial.py.page:65
msgid "Images and labels"
msgstr "그림 및 레이블"

#. (itstool) path: steps/title
#: C/tutorial.py.page:71
msgid "Introduction to properties"
msgstr "속성 소개"

#. (itstool) path: steps/title
#: C/tutorial.py.page:75
msgid "Grid, separator and scrolling"
msgstr "그리드, 구분선, 스크롤"

#. (itstool) path: steps/title
#: C/tutorial.py.page:82
msgid "Signals, callbacks and buttons"
msgstr "시그널, 콜백 함수 및 단추"

#. (itstool) path: steps/title
#: C/tutorial.py.page:96
msgid "Other display widgets"
msgstr "기타 표시 위젯"

#. (itstool) path: steps/title
#: C/tutorial.py.page:102
msgid "Entry widgets"
msgstr "Entry 위젯"

#. (itstool) path: steps/title
#: C/tutorial.py.page:108
msgid "A widget to write and display text"
msgstr "텍스트를 쓰고 표시하는 위젯"

#. (itstool) path: steps/title
#: C/tutorial.py.page:112
msgid "Dialogs"
msgstr "대화상자"

#. (itstool) path: steps/title
#: C/tutorial.py.page:118
msgid "Menus, Toolbars and Tooltips (also: using Glade and GtkBuilder)"
msgstr "메뉴, 도구모음, 풍선 도움말(및: 글레이드 GtkBuilder 사용)"

#. (itstool) path: steps/title
#: C/tutorial.py.page:133
msgid "TreeViews and ComboBoxes (using the M/V/C design)"
msgstr "TreeViews와 ComboBox(M/V/C 설계 사용)"

#. (itstool) path: steps/title
#: C/tutorial.py.page:143
msgid "Custom widget"
msgstr "개별 구성 위젯"

#. (itstool) path: info/title
#: C/vala.page:7
msgctxt "link"
msgid "Vala"
msgstr "Vala"

#. (itstool) path: page/title
#: C/vala.page:21
msgid "Tutorials, code samples and platform demos in Vala"
msgstr "Vala 언어용 따라하기 지침, 코드 예제, 플랫폼 데모"

#. (itstool) path: section/title
#: C/vala.page:26
msgid "Code samples and tutorial"
msgstr "예제 코드 및 따라하기 지침"

#. (itstool) path: info/title
#: C/weatherApp.js.page:7
msgctxt "text"
msgid "Weather application (JavaScript)"
msgstr "날씨 프로그램(JavaScript)"

#. (itstool) path: info/desc
#: C/weatherApp.js.page:22
msgid ""
"How to plan an application that uses asynchronous calls. Asynchronous calls "
"will be presented through a weather application."
msgstr ""
"비동기 함수 호출을 활용하는 프로그램을 기획하는 방법입니다. 비동기 함수 호출"
"은 날씨 프로그램에서 보여드리겠습니다."

#. (itstool) path: page/title
#: C/weatherApp.js.page:27
msgid "Weather application"
msgstr "날씨 프로그램"

#. (itstool) path: synopsis/p
#: C/weatherApp.js.page:29
msgid ""
"In this guide well construct a weather application using asynchronous calls. "
"Weather information in this example is fetched from geonames.org and the "
"application is using the <link href=\"http://en.wikipedia.org/wiki/"
"List_of_airports_by_ICAO_code:_E\">ICAO codes </link> to place your weather "
"request. To write and run all the code examples yourself, you need an editor "
"to write code in, Terminal and GNOME 3 or higher installed into your "
"computer. In this guide we we'll go through the following parts:"
msgstr ""
"안내서의 이 부분에서는 비동기 호출을 활용하여 로컬 라이브러리 geoNames를 만듭"
"니다. 이 예제의 날씨 정보는 geonames.org에서 가져오며, 프로그램에서 날씨 정보"
"를 요청할 때 <link href=\"http://en.wikipedia.org/wiki/"
"List_of_airports_by_ICAO_code:_E\">ICAO codes</link>를 활용합니다. 모든 코드 "
"예제를 여러분 스스로 작성하고 실행하라면 코드를 작성해넣을 편집기, 터미널, 그"
"놈 3 이상을 컴퓨터에 설치해야 합니다. 이 안내서에서는 다음 내용을 진행합니다:"

#. (itstool) path: item/p
#: C/weatherApp.js.page:32
msgid "<link xref=\"#planningUi\">Planning the graphical user interface</link>"
msgstr "<link xref=\"#planningUi\">그래픽 사용자 인터페이스 기획</link>"

#. (itstool) path: item/p
#: C/weatherApp.js.page:33
msgid "<link xref=\"#asynchronous\">Asynchronous calls</link>"
msgstr "<link xref=\"#asynchronous\">비동기 함수 호출</link>"

#. (itstool) path: item/p
#: C/weatherApp.js.page:34
msgid "<link xref=\"#main\">The main program file</link>"
msgstr "<link xref=\"#main\">main 프로그램 파일</link>"

#. (itstool) path: item/p
#: C/weatherApp.js.page:35
msgid "<link xref=\"#main\">Local library GeoNames</link>"
msgstr "<link xref=\"#main\">자체 GeoNames 라이브러리</link>"

#. (itstool) path: item/p
#: C/weatherApp.js.page:36
msgid "<link xref=\"#main\">Autotools and Icons</link>"
msgstr "<link xref=\"#main\">Autotool과 아이콘</link>"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/weatherApp.js.page:41
msgctxt "_"
msgid ""
"external ref='media/weatherAppJs.png' md5='1fe859ac4854273d72ea8fc9203639b2'"
msgstr ""

#. (itstool) path: section/title
#: C/weatherApp.js.page:44
msgid "Planning the graphical user interface"
msgstr "그래픽 사용자 인터페이스 기획"

#. (itstool) path: section/p
#: C/weatherApp.js.page:45
msgid ""
"Structuring an application for GNOME 3 means you will be using <link href="
"\"http://developer.gnome.org/platform-overview/stable/gtk\">GTK+</link>. The "
"most important thing is to remember that the main window will only accept "
"one widget. You must plan your structure accordingly (this example is using "
"Gtk.Grid). A useful method is to draw out the main window and place every "
"widget needed inside that box. By looking at an image of your future "
"application it is easier to tell what are the relations between widgets. For "
"example Gtk.Grid places your widgets in relation to other widgets, so after "
"the first widget is in place, placing widgets can be done in relation to any "
"widget on the grid."
msgstr ""
"그놈 3 프로그램을 구성한다는 건 결국 <link href=\"http://developer.gnome.org/"
"platform-overview/stable/gtk\">GTK+</link>를 사용한다는 의미입니다. 메인 창"
"은 하나의 위젯만 받아들일 수 있다는 점이 기억해야 할 중요한 점입니다. 이에 따"
"라 구조를 기횡해야 합니다(이 예제는 Gtk.Grid를 사용함). 쓸만한 메서드는 메인 "
"창을 그리고 필요한 모든 위젯을 박스에 넣는 함수입니다. 나중에 만들 프로그램"
"의 그림을 살펴보면 여러 위젯에 어떤 관계가 있는지 쉽게 이야기할 수 있습니다. "
"예를 들어 Gtk.Grid에는 다른 위젯과의 관계에 따라 여러분의 위젯을 둡니다. 따라"
"서 처음 위젯을 두고 나면, 그리드에서 다른 위젯에 관계에 따라 다른 위젯을 어"
"떤 위치에 둘 수 있습니다."

#. (itstool) path: section/title
#: C/weatherApp.js.page:48
msgid "Asynchronous calls"
msgstr "비동기 호출"

#. (itstool) path: section/p
#: C/weatherApp.js.page:49
msgid ""
"With many programming languages, all operations are run synchronously - you "
"tell the program to do something, and it will wait until that action "
"completes before proceeding. This is however bad for graphical user "
"interfaces, as then the whole application will be frozen while the program "
"waits for the operation. Going asynchronous (async) helps here. With async "
"calls, your UI won't be blocked with any requests. Async calls make your "
"application more flexible and better equipped to handle situations when "
"calls take more time than expected or for some reason get jammed. Async "
"calls can be used for example file system I/O and for slower calculations in "
"the background."
msgstr ""
"수많은 프로그래밍 언어에서는 많은 동작 처리를 동기방식으로 처리합니다. 여러분"
"의 프로그램에 무언가를 지시하면 앞에 진행하던 동작이 끝나기 전까지 기다립니"
"다. 프로그램이 처리를 기다리는 동안 전체 프로그램이 멈추기에 그래픽 사용자 인"
"터페이스에 좋지 않습니다. 여기서 비동기 방식(async)으로 처리해보겠습니다. 비"
"동기 호출을 수행하면, 여러분이 작성한 사용자 인터페이스는 어떤 요청에도 동작"
"을 멈추지 않습니다. async 호출은 프로그램 동작을 유연하게 하며, 예상 보다 더 "
"많은 함수 호출이 있거나 무슨 이유로 인해 동작이 꼬이는 경우를 처리할 수 있습"
"니다. 비동기 호출은 시스템 입출력과 백그라운드의 느린 계산처리에 활용할 수 있"
"습니다."

#. (itstool) path: section/p
#: C/weatherApp.js.page:52
msgid ""
"In this example we have to get data from geonames.org. While we do that we "
"want the rest of our program to continue. If we wouldn't get any information "
"from geonames.org for the lack of internet connection and this would be a "
"synchronous application we would never get to the point where our "
"main_quit() is processed correctly and the application would have to killed "
"from Terminal."
msgstr ""
"이 예제에서는 geonames.org에서 데이터를 가져와야합니다. 데이터를 가져오는 동"
"안 프로그램의 나머지 동작 부분을 계속 활용하고자 합니다. 인터넷 연결 상태가 "
"좋지 않아 geonames.org에서 어떤 정보도 가져오지 못했고 이 프로그램이 동기 방"
"식 처리 프로그램이라면, main_quit()를 제대로 처리할 부분을 확인할 수 없을 뿐"
"더러 프로그램을 터미널에서 강제로 끝내야 할 수도 있습니다."

#. (itstool) path: section/title
#: C/weatherApp.js.page:55
msgid "The different parts of the program"
msgstr "프로그램의 각 부분"

#. (itstool) path: page/title
#: C/weatherAppMain.js.page:19
msgid "The main program file"
msgstr "주 프로그램 파일"

#. (itstool) path: synopsis/p
#: C/weatherAppMain.js.page:21
msgid ""
"In this part of the guide well construct the main program file of the "
"weather application. To write and run all the code examples yourself, you "
"need an editor to write code in, Terminal and GNOME 3 or higher installed "
"into your computer. In this part we we'll go through the following parts:"
msgstr ""
"안내서의 이 부분에서는 날씨 프로그램의 주 프로그램 파일을 만들어보겠습니다. "
"여러분이 모든 코드 예제를 작성하고 실행하려면, 코드를 작성할 편집기, 터미널, "
"그놈 3 이상을 컴퓨터에 설치해야합니다. 여기서는 다음 내용을 진행합니다:"

#. (itstool) path: item/p
#: C/weatherAppMain.js.page:26
msgid ""
"<link xref=\"#widgets\">Adding a grid and all the necessary widgets to it</"
"link>"
msgstr "<link xref=\"#widgets\">그리드를 추가하고 필요한 위젯 넣기</link>"

#. (itstool) path: item/p
#: C/weatherAppMain.js.page:27
msgid ""
"<link xref=\"#asynccall\">Requesting the weather information asynchronously</"
"link>"
msgstr "<link xref=\"#asynccall\">날씨 정보 비동기 요청</link>"

#. (itstool) path: item/p
#: C/weatherAppMain.js.page:28
msgid ""
"<link xref=\"#connectingbuttons\">Connecting signals to button and entry</"
"link>."
msgstr "<link xref=\"#connectingbuttons\">단추와 항목에 시그널 연결</link>."

#. (itstool) path: item/p
#: C/weatherAppMain.js.page:29
msgid "<link xref=\"#weatherapp.js\">weatherapp.js</link>"
msgstr "<link xref=\"#weatherapp.js\">weatherapp.js</link>"

#. (itstool) path: section/p
#: C/weatherAppMain.js.page:36
msgid ""
"This line tells how to run the script. It needs to be the first line of the "
"code and it needs to be executable. To get the execution rights go to "
"Terminal and run in right folder: chmod +x scriptname. Or you can use the "
"graphical filemanager. Just go to the right folder where your code is, right "
"click you code file, choose properties, click the permissions tab and check "
"the box for allow executing file as a program"
msgstr ""
"이 줄은 스크립트 실행 방법을 알려줍니다. 이 부분은 코드의 처음 부분에 들어가"
"야하며, 스크립트 파일을 실행할 수 있어야합니다. 실행 권한을 가져오려면 터미널"
"을 열고 올바른 폴더에서 chmod +x scriptname 명령을 실행하십시오. 또는 그래픽 "
"파일 관리자를 활용할 수 있습니다. 코드가 있는 적절한 폴더에 들어가서 코드를 "
"작성한 파일에 마우스 커서를 두고 오른쪽 단추를 누른 다음, 속성, 권한 탭을 선"
"택하시고 파일을 프로그램처럼 실행하도록 상자에 표시하십시오."

#. (itstool) path: section/code
#: C/weatherAppMain.js.page:42
#, no-wrap
msgid ""
"\n"
"var Gtk = imports.gi.Gtk;\n"
"const WeatherService = imports.geonames;"
msgstr ""
"\n"
"var Gtk = imports.gi.Gtk;\n"
"const WeatherService = imports.geonames;"

#. (itstool) path: section/p
#: C/weatherAppMain.js.page:45
msgid ""
"In order to have a working program we need to import a GObject Introspection "
"-library to our use. For working UI, we need Gtk. Gtk is imported in the "
"beginning so we have it in our use everywhere. We also import our own local "
"JavaScript library geonames to our use here."
msgstr ""
"프로그램이 동작하려면 GObject 인트로스펙션 라이브러리를 가져와야합니다. UI를 "
"동작하게 할 목적으로 Gtk가 필요합니다. Gtk는 앞부분에서 임포팅해서 코드의 모"
"든 곳에서 쓸 수 있습니다. 또한, 우리가 여기서 사용할 JavaScript geonames 자"
"체 라이브러리를 임포티해야합니다."

#. (itstool) path: section/code
#: C/weatherAppMain.js.page:50
#, no-wrap
msgid ""
"\n"
"// Initialize the gtk\n"
"Gtk.init(null, 0);\n"
"//create your window, name it and connect the x to quit function. Remember that window is a taken word\n"
"var weatherwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL});\n"
"weatherwindow.title = \"Todays weather\";\n"
"//Window only accepts one widget and a title. Further structure with Gtk.boxes of similar\n"
"weatherwindow.connect(\"destroy\", function(){Gtk.main_quit()});\n"
"\n"
"weatherwindow.show_all();\n"
"//and run it\n"
"Gtk.main();"
msgstr ""
"\n"
"// Initialize the gtk\n"
"Gtk.init(null, 0);\n"
"//create your window, name it and connect the x to quit function. Remember that window is a taken word\n"
"var weatherwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL});\n"
"weatherwindow.title = \"Todays weather\";\n"
"//Window only accepts one widget and a title. Further structure with Gtk.boxes of similar\n"
"weatherwindow.connect(\"destroy\", function(){Gtk.main_quit()});\n"
"\n"
"weatherwindow.show_all();\n"
"//and run it\n"
"Gtk.main();"

#. (itstool) path: section/title
#: C/weatherAppMain.js.page:64
msgid "Adding a grid and all the necessary widgets to it"
msgstr "그리드를 추가하고 그리드에 필요한 모든 위젯을 넣으십시오"

#. (itstool) path: section/code
#: C/weatherAppMain.js.page:65
#, no-wrap
msgid ""
"\n"
"var grid = new Gtk.Grid();\n"
"weatherwindow.add(grid);\n"
"\n"
"//We initialize the icon here, but deside the file later in geonames.js.\n"
"var weatherIcon = new Gtk.Image();\n"
"\n"
"//Set some labels to your window\n"
"var label1 = new Gtk.Label({label: \"\"});\n"
"var label2 = new Gtk.Label({label: \"Looking in the sky...\"});\n"
"var label3 = new Gtk.Label({label: \"\"});\n"
"\n"
"var entry = new Gtk.Entry();\n"
"entry.set_width_chars(4);\n"
"entry.set_max_length(4);\n"
"var label4 = new Gtk.Label({label: \"Enter ICAO station for weather: \"});\n"
"var button1 = new Gtk.Button({label: \"search!\"});\n"
"\n"
"grid.attach(label4, 2, 1, 1, 1);\n"
"grid.attach_next_to(label1,label4,3,1,1);\n"
"grid.attach_next_to(label2,label1,3,1,1);\n"
"grid.attach_next_to(label3,label2,3,1,1);\n"
"grid.attach_next_to(entry,label4,1,1,1);\n"
"grid.attach_next_to(button1,entry,1,1,1);\n"
"grid.attach_next_to(weatherIcon,label2,1,1,1)\n"
msgstr ""
"\n"
"var grid = new Gtk.Grid();\n"
"weatherwindow.add(grid);\n"
"\n"
"//We initialize the icon here, but deside the file later in geonames.js.\n"
"var weatherIcon = new Gtk.Image();\n"
"\n"
"//Set some labels to your window\n"
"var label1 = new Gtk.Label({label: \"\"});\n"
"var label2 = new Gtk.Label({label: \"Looking in the sky...\"});\n"
"var label3 = new Gtk.Label({label: \"\"});\n"
"\n"
"var entry = new Gtk.Entry();\n"
"entry.set_width_chars(4);\n"
"entry.set_max_length(4);\n"
"var label4 = new Gtk.Label({label: \"Enter ICAO station for weather: \"});\n"
"var button1 = new Gtk.Button({label: \"search!\"});\n"
"\n"
"grid.attach(label4, 2, 1, 1, 1);\n"
"grid.attach_next_to(label1,label4,3,1,1);\n"
"grid.attach_next_to(label2,label1,3,1,1);\n"
"grid.attach_next_to(label3,label2,3,1,1);\n"
"grid.attach_next_to(entry,label4,1,1,1);\n"
"grid.attach_next_to(button1,entry,1,1,1);\n"
"grid.attach_next_to(weatherIcon,label2,1,1,1)\n"

#. (itstool) path: section/p
#: C/weatherAppMain.js.page:91
msgid ""
"In this section we create the grid we are going to use for positioning the "
"widgets. All the buttons, labels and entrys are initialized and placed on "
"the grid. As seen from the placing of the different widgets, they don't need "
"to be related only to one widget. At this point some of the labels don't "
"have any content. The content for those widgets is applied later. If you run "
"the application at this stage, you have the UI ready, but the widgets are "
"not connected to anything. For this we need to first build the weather "
"searching local library, and then get the information we need "
"asynchronously. When we have our local library ready we can connect it to "
"the necessary widgets."
msgstr ""
"여기서는 위젯을 적소에 배치할 때 활용할 그리드를 만들겠습니다. 모든 단추, 레"
"이블, 항목을 초기화 하고 그리드에 배치합니다. 각기 다른 위젯의 배치에서 보셨"
"듯이 하나의 위젯에만 연관성이 있는건 아닙니다. 여기서는 일부 레이블에는 어떤 "
"내용도 들어가지 않습니다. 이 위젯의 내용은 나중에 반영합니다. 프로그램을 이 "
"단계에서 실행하면, UI를 준비한 상태이지만, 위젯은 그 어떤 것과도 연결한 상태"
"가 아닙니다. 여기서 날씨 검색 자체 라이브러리를 우선 만들고, 필요한 정보를 비"
"동기 방식으로 가져와야합니다. 자체 라이브러리가 준비되면 필요한 위젯에 연결"
"할 수 있습니다."

#. (itstool) path: section/title
#: C/weatherAppMain.js.page:95
msgid "Requesting the weather information asynchronously"
msgstr "비동기 방식으로 날씨 정보 요청"

#. (itstool) path: section/code
#: C/weatherAppMain.js.page:96
#, no-wrap
msgid ""
"\n"
"function getWeatherForStation() {\n"
"  var station = entry.get_text();\n"
"\n"
"  var GeoNames = new WeatherService.GeoNames(station); //\"EFHF\";\n"
"\n"
"  GeoNames.getWeather(function(error, weather) {\n"
"    //this here works bit like signals. This code will be run when we have weather.\n"
"    if (error) {\n"
"      label2.set_text(\"Suggested ICAO station does not exist Try EFHF\");\n"
"    return; }\n"
"    weatherIcon.file = GeoNames.getIcon(weather);\n"
"\n"
"    label1.set_text(\"Temperature is \" + weather.weatherObservation.temperature + \" degrees.\");\n"
"    if (weather.weatherObservation.weatherCondition !== \"n/a\"){\n"
"      label2.set_text(\"Looks like there is \" + weather.weatherObservation.weatherCondition + \" in the sky.\");\n"
"      }\n"
"    else {\n"
"      label2.set_text(\"Looks like there is \" + weather.weatherObservation.clouds + \" in the sky.\");\n"
"    }\n"
"    label3.set_text(\"Windspeed is \" + weather.weatherObservation.windSpeed + \" m/s\")\n"
"    // ...\n"
"  });\n"
"}\n"
msgstr ""
"\n"
"function getWeatherForStation() {\n"
"  var station = entry.get_text();\n"
"\n"
"  var GeoNames = new WeatherService.GeoNames(station); //\"EFHF\";\n"
"\n"
"  GeoNames.getWeather(function(error, weather) {\n"
"    //this here works bit like signals. This code will be run when we have weather.\n"
"    if (error) {\n"
"      label2.set_text(\"Suggested ICAO station does not exist Try EFHF\");\n"
"    return; }\n"
"    weatherIcon.file = GeoNames.getIcon(weather);\n"
"\n"
"    label1.set_text(\"Temperature is \" + weather.weatherObservation.temperature + \" degrees.\");\n"
"    if (weather.weatherObservation.weatherCondition !== \"n/a\"){\n"
"      label2.set_text(\"Looks like there is \" + weather.weatherObservation.weatherCondition + \" in the sky.\");\n"
"      }\n"
"    else {\n"
"      label2.set_text(\"Looks like there is \" + weather.weatherObservation.clouds + \" in the sky.\");\n"
"    }\n"
"    label3.set_text(\"Windspeed is \" + weather.weatherObservation.windSpeed + \" m/s\")\n"
"    // ...\n"
"  });\n"
"}\n"

#. (itstool) path: section/p
#: C/weatherAppMain.js.page:121
msgid ""
"This function is dedicated for calling for the weather information and "
"updating labels and icons accordingly. In the beginning of the function we "
"get the user input for the search. So here for the first time we use our own "
"library and assign it to variable GeoNames. While assigning WeatherService "
"we give it the station. The firs thing we do with GeoNames is to request "
"weather. Everything after GeoNames.getWeather(function(error, weather) "
"happens only if we either get an error message or weather information. If "
"either doesn't come, the rest of the program works as normal, so main_Quit "
"works."
msgstr ""
"이 함수는 날씨 정보를 호출하고 레이블과 아이콘을 즉시 업데이트하는 과정에 관"
"여합니다. 함수 시작 부분을 보면 검색에 필요한 사용자 입력을 가져옵니다. 따라"
"서 여기서는 처음에 자체 라이브러리랄 활용하고 GeoNames 변수에 할당하겠습니"
"다. WeatherService를 할당하는 동안 기상대에 요청을 줍니다. GeoNames에 할 일"
"은 날씨 정보 요청입니다. GeoNames.getWeather(function(error,weather))를 호출"
"하고 난 다음 일은 오류 메시지를 받거나 날씨 정보를 받는 일만 있을 뿐입니다. "
"두가지 경우가 모두 아닌 경우 프로그앰이 할 일은 그냥 평범하게 있을 때 와 동일"
"하므로 main_Quit를 동작합니다."

#. (itstool) path: section/title
#: C/weatherAppMain.js.page:125
msgid "Connecting signals to button and entry."
msgstr "단추와 항목에 시그널 연결."

#. (itstool) path: section/code
#: C/weatherAppMain.js.page:126
#, no-wrap
msgid ""
"\n"
"entry.connect(\"key_press_event\", function(widget, event) {\n"
"  if (entry.get_text().length === 4) {\n"
"    // Enough is enough\n"
"    getWeatherForStation();\n"
"  }\n"
"  return false;\n"
"});\n"
"\n"
"button1.connect(\"clicked\", function(){\n"
"  getWeatherForStation();\n"
"});"
msgstr ""
"\n"
"entry.connect(\"key_press_event\", function(widget, event) {\n"
"  if (entry.get_text().length === 4) {\n"
"    // Enough is enough\n"
"    getWeatherForStation();\n"
"  }\n"
"  return false;\n"
"});\n"
"\n"
"button1.connect(\"clicked\", function(){\n"
"  getWeatherForStation();\n"
"});"

#. (itstool) path: section/p
#: C/weatherAppMain.js.page:138
msgid ""
"And finally we have the connections that make the whole application run as "
"it should. We connect both the entry and the button to do the same thing, "
"getting the weather. So it doesn't matter weather you press enter of click "
"the search button."
msgstr ""
"그리고 마지막으로 전체 프로그램이 돌아가도록 돌아가도록 연결하겠습니다. 항목"
"과 단추를 동일한 방식으로 연결하여 날씨 정보를 가져오겠습니다. 따라서 엔터키"
"를 누르든 검색 단추를 누르든 상관 없이 동작합니다."

#. (itstool) path: section/title
#: C/weatherAppMain.js.page:142
msgid "Weatherapp.js"
msgstr "Weatherapp.js"

#. (itstool) path: section/p
#: C/weatherAppMain.js.page:143
msgid "Weatherapp.js file looks like this:"
msgstr "Weatherapp.js 파일의 내용은 다음과 같습니다:"

#. (itstool) path: section/code
#: C/weatherAppMain.js.page:144
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"//The previous line is a hash bang tells how to run the script.\n"
"// Note that the script has to be executable (run in terminal in the right folder: chmod +x scriptname)\n"
"\n"
"var Gtk = imports.gi.Gtk;\n"
"\n"
"const WeatherService = imports.geonames;\n"
"//Bring your own library from same folder (as set in GJS_PATH). If using autotools .desktop will take care of this\n"
"\n"
"// Initialize the gtk\n"
"Gtk.init(null, 0);\n"
"//create your window, name it and connect the x to quit function. Remember that window is a taken word\n"
"var weatherwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL});\n"
"weatherwindow.title = \"Todays weather\";\n"
"//Window only accepts one widget and a title. Further structure with Gtk.boxes of similar\n"
"weatherwindow.connect(\"destroy\", function(){Gtk.main_quit()});\n"
"//We initialize the icon here, but deside the file later in geonames.js.\n"
"\n"
"var weatherIcon = new Gtk.Image();\n"
"\n"
"//Set some labels to your window\n"
"var label1 = new Gtk.Label({label: \"\"});\n"
"var label2 = new Gtk.Label({label: \"Looking in the sky...\"});\n"
"var label3 = new Gtk.Label({label: \"\"});\n"
"\n"
"var grid = new Gtk.Grid();\n"
"weatherwindow.add(grid);\n"
"\n"
"var entry = new Gtk.Entry();\n"
"entry.set_width_chars(4);\n"
"entry.set_max_length(4);\n"
"var label4 = new Gtk.Label({label: \"Enter ICAO station for weather: \"});\n"
"var button1 = new Gtk.Button({label: \"search!\"});\n"
"\n"
"//some weather\n"
"\n"
"entry.connect(\"key_press_event\", function(widget, event) {\n"
"  // FIXME: Get weather on enter (key 13)\n"
"  if (entry.get_text().length === 4) {\n"
"    // Enough is enough\n"
"    getWeatherForStation();\n"
"  }\n"
"  return false;\n"
"});\n"
"\n"
"button1.connect(\"clicked\", function(){\n"
"  getWeatherForStation();\n"
"});\n"
"\n"
"function getWeatherForStation() {\n"
"  var station = entry.get_text();\n"
"\n"
"  var GeoNames = new WeatherService.GeoNames(station); //\"EFHF\";\n"
"\n"
"  GeoNames.getWeather(function(error, weather) {\n"
"    //this here works bit like signals. This code will be run when we have weather.\n"
"    if (error) {\n"
"      label2.set_text(\"Suggested ICAO station does not exist Try EFHF\");\n"
"    return; }\n"
"    weatherIcon.file = GeoNames.getIcon(weather);\n"
"\n"
"    label1.set_text(\"Temperature is \" + weather.weatherObservation.temperature + \" degrees.\");\n"
"    if (weather.weatherObservation.weatherCondition !== \"n/a\"){\n"
"      label2.set_text(\"Looks like there is \" + weather.weatherObservation.weatherCondition + \" in the sky.\");\n"
"      }\n"
"    else {\n"
"      label2.set_text(\"Looks like there is \" + weather.weatherObservation.clouds + \" in the sky.\");\n"
"    }\n"
"    label3.set_text(\"Windspeed is \" + weather.weatherObservation.windSpeed + \" m/s\")\n"
"    // ...\n"
"  });\n"
"}\n"
"\n"
"grid.attach(label4, 2, 1, 1, 1);\n"
"grid.attach_next_to(label1,label4,3,1,1);\n"
"grid.attach_next_to(label2,label1,3,1,1);\n"
"grid.attach_next_to(label3,label2,3,1,1);\n"
"grid.attach_next_to(entry,label4,1,1,1);\n"
"grid.attach_next_to(button1,entry,1,1,1);\n"
"grid.attach_next_to(weatherIcon,label2,1,1,1)\n"
"weatherwindow.show_all();\n"
"//and run it\n"
"Gtk.main();\n"
msgstr ""
"\n"
"#!/usr/bin/gjs\n"
"//The previous line is a hash bang tells how to run the script.\n"
"// Note that the script has to be executable (run in terminal in the right folder: chmod +x scriptname)\n"
"\n"
"var Gtk = imports.gi.Gtk;\n"
"\n"
"const WeatherService = imports.geonames;\n"
"//Bring your own library from same folder (as set in GJS_PATH). If using autotools .desktop will take care of this\n"
"\n"
"// Initialize the gtk\n"
"Gtk.init(null, 0);\n"
"//create your window, name it and connect the x to quit function. Remember that window is a taken word\n"
"var weatherwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL});\n"
"weatherwindow.title = \"Todays weather\";\n"
"//Window only accepts one widget and a title. Further structure with Gtk.boxes of similar\n"
"weatherwindow.connect(\"destroy\", function(){Gtk.main_quit()});\n"
"//We initialize the icon here, but deside the file later in geonames.js.\n"
"\n"
"var weatherIcon = new Gtk.Image();\n"
"\n"
"//Set some labels to your window\n"
"var label1 = new Gtk.Label({label: \"\"});\n"
"var label2 = new Gtk.Label({label: \"Looking in the sky...\"});\n"
"var label3 = new Gtk.Label({label: \"\"});\n"
"\n"
"var grid = new Gtk.Grid();\n"
"weatherwindow.add(grid);\n"
"\n"
"var entry = new Gtk.Entry();\n"
"entry.set_width_chars(4);\n"
"entry.set_max_length(4);\n"
"var label4 = new Gtk.Label({label: \"Enter ICAO station for weather: \"});\n"
"var button1 = new Gtk.Button({label: \"search!\"});\n"
"\n"
"//some weather\n"
"\n"
"entry.connect(\"key_press_event\", function(widget, event) {\n"
"  // FIXME: Get weather on enter (key 13)\n"
"  if (entry.get_text().length === 4) {\n"
"    // Enough is enough\n"
"    getWeatherForStation();\n"
"  }\n"
"  return false;\n"
"});\n"
"\n"
"button1.connect(\"clicked\", function(){\n"
"  getWeatherForStation();\n"
"});\n"
"\n"
"function getWeatherForStation() {\n"
"  var station = entry.get_text();\n"
"\n"
"  var GeoNames = new WeatherService.GeoNames(station); //\"EFHF\";\n"
"\n"
"  GeoNames.getWeather(function(error, weather) {\n"
"    //this here works bit like signals. This code will be run when we have weather.\n"
"    if (error) {\n"
"      label2.set_text(\"Suggested ICAO station does not exist Try EFHF\");\n"
"    return; }\n"
"    weatherIcon.file = GeoNames.getIcon(weather);\n"
"\n"
"    label1.set_text(\"Temperature is \" + weather.weatherObservation.temperature + \" degrees.\");\n"
"    if (weather.weatherObservation.weatherCondition !== \"n/a\"){\n"
"      label2.set_text(\"Looks like there is \" + weather.weatherObservation.weatherCondition + \" in the sky.\");\n"
"      }\n"
"    else {\n"
"      label2.set_text(\"Looks like there is \" + weather.weatherObservation.clouds + \" in the sky.\");\n"
"    }\n"
"    label3.set_text(\"Windspeed is \" + weather.weatherObservation.windSpeed + \" m/s\")\n"
"    // ...\n"
"  });\n"
"}\n"
"\n"
"grid.attach(label4, 2, 1, 1, 1);\n"
"grid.attach_next_to(label1,label4,3,1,1);\n"
"grid.attach_next_to(label2,label1,3,1,1);\n"
"grid.attach_next_to(label3,label2,3,1,1);\n"
"grid.attach_next_to(entry,label4,1,1,1);\n"
"grid.attach_next_to(button1,entry,1,1,1);\n"
"grid.attach_next_to(weatherIcon,label2,1,1,1)\n"
"weatherwindow.show_all();\n"
"//and run it\n"
"Gtk.main();\n"

#. (itstool) path: section/p
#: C/weatherAppMain.js.page:229
msgid "Running until you have all the autotools files ready. :"
msgstr "모든 autotool 파일을 준비하기 전까지 실행합니다:"

#. (itstool) path: section/screen
#: C/weatherAppMain.js.page:231
#, no-wrap
msgid " <output style=\"prompt\">$ </output><input> GJS_PATH=`pwd` gjs weatherapp.js</input>"
msgstr " <output style=\"prompt\">$ </output><input> GJS_PATH=`pwd` gjs weatherapp.js</input>"

#. (itstool) path: section/p
#: C/weatherAppMain.js.page:232
msgid ""
"Use this command on terminal while developing your modules. When calling "
"your program in this manner it knows where to find your custom JSlibraries, "
"in this case geonames.js."
msgstr ""
"모듈을 개발하는 동안에는 터미널에서 이 명령을 사용하십시오. 프로그램을 이 방"
"식으로 호출할 때, 프로그램에서 개별 JS 라이브러리 위치를 파악합니다. 이 경우"
"는 geonames.js 입니다."

#. (itstool) path: page/title
#: C/weatherAutotools.js.page:19
msgid "Autotools and Icons"
msgstr "Autotool과 아이콘"

#. (itstool) path: synopsis/p
#: C/weatherAutotools.js.page:21
msgid ""
"In this part of the guide well construct the autotools and custom icons "
"needed for weather application to be a seamless part of your desktop. To "
"write and run all the code examples yourself, you need an editor to write "
"code in, Terminal and GNOME 3 or higher installed into your computer. In "
"this guide we we'll go through the following parts:"
msgstr ""
"안내서의 이 부분에서는 날씨 프로그램에서 필요한 autotool와 데스크톱에서 감쪽"
"같이 보일 개별아이콘을 구성하도록 하겠습니다. 여러분 스스로가 모든 코드 예제"
"를 작성하고 실행할 때는 코드를 작성할 편집기, 터미널, 그놈 3 이상을 컴퓨터에 "
"설치해야 합니다. 이 안내서에서는 다음 내용을 진행하겠습니다:"

#. (itstool) path: item/p
#: C/weatherAutotools.js.page:24
msgid "<link xref=\"#autotools\"> Autotools</link>"
msgstr "<link xref=\"#autotools\"> Autotools</link>"

#. (itstool) path: item/p
#: C/weatherAutotools.js.page:25
msgid "<link xref=\"#icons\">Custom icons for your application</link>"
msgstr "<link xref=\"#icons\">프로그램에 넣을 개별 아이콘</link>"

#. (itstool) path: section/title
#: C/weatherAutotools.js.page:32
msgid "Autotools and necessary files"
msgstr "Autotools와 필요한 파일"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:33
msgid ""
"Having more than one file in your folder makes using autotools a bit tricky. "
"You need the .desktop file, autogen.sh, Makefile.am, configure.ac and as a "
"new file: myapp.sh.in file. Hacking the autotools file is a complicated "
"field. More information can be found in many different sources, <link href="
"\"http://en.wikipedia.org/wiki/GNU_build_system\">the wikipedia article</"
"link> provides a good overview on the subject."
msgstr ""
"autotools로 폴더에 여러 파일을 넣는건 조금 어렵습니다. .desktop 파일, "
"autogen.sh, Makefile.am, configure.ac, myapp.sh.in 새 파일이 필요합니다. "
"autotool 파일을 뜯는건 좀 복잡합니다. 자세한 내용은 여러 곳에서 찾아볼 수 있"
"는데, <link href=\"http://en.wikipedia.org/wiki/GNU_build_system\">위키피디아"
"</link> 글이 주제를 살펴보기에 좋습니다."

#. (itstool) path: item/p
#. (itstool) path: section/p
#: C/weatherAutotools.js.page:36 C/weatherAutotools.js.page:42
msgid "weatherapp.desktop"
msgstr "weatherapp.desktop"

#. (itstool) path: item/p
#. (itstool) path: section/p
#: C/weatherAutotools.js.page:37 C/weatherAutotools.js.page:57
msgid "weatherapp.sh.in"
msgstr "weatherapp.sh.in"

#. (itstool) path: section/code
#: C/weatherAutotools.js.page:43
#, no-wrap
msgid ""
"\n"
"[Desktop Entry]\n"
"Version=1.0\n"
"Encoding=UTF-8\n"
"Name=Weather app\n"
"Comment=Weather showing application\n"
"Exec=weatherapp.sh\n"
"Icon=application-default-icon\n"
"Terminal=false\n"
"Type=Application\n"
"StartupNotify=true\n"
"Categories=GNOME;GTK;Utility;"
msgstr ""
"\n"
"[Desktop Entry]\n"
"Version=1.0\n"
"Encoding=UTF-8\n"
"Name=Weather app\n"
"Comment=Weather showing application\n"
"Exec=weatherapp.sh\n"
"Icon=application-default-icon\n"
"Terminal=false\n"
"Type=Application\n"
"StartupNotify=true\n"
"Categories=GNOME;GTK;Utility;"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:55
msgid ""
"The thing to notice in this file is that the Exec line will make this ."
"desktop file work only after running all the other makefiles. Weatherapp.sh "
"is a small shell script created with the weatherapp.sh.in."
msgstr ""
"이 파일에서 주목해 볼 부분은, 다른 makefile을 실행한 다음에야 .desktop 파일"
"을 동작하게 하는 Exec 줄 부분입니다. Weatherapp.sh는 weatherapp.sh.in에서 만"
"든 작은 쉘 스크립트입니다."

#. (itstool) path: section/code
#: C/weatherAutotools.js.page:58
#, no-wrap
msgid ""
"\n"
"#!/bin/sh\n"
"export GJS_PATH=@bindir@\n"
"gjs @bindir@/weatherapp.js"
msgstr ""
"\n"
"#!/bin/sh\n"
"export GJS_PATH=@bindir@\n"
"gjs @bindir@/weatherapp.js"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:62
msgid ""
"This file is a template to the file Makefile will do to be run from .desktop."
msgstr ""
"이 파일은 Makefile 파일을 통해 .desktop 파일로 실행하도록 하는 서식입니다."

#. (itstool) path: section/code
#: C/weatherAutotools.js.page:65
#, no-wrap
msgid ""
"\n"
"# The actual runnable program is set to the SCRIPTS primitive. Prefix bin_ tells where to copy this\n"
"bin_SCRIPTS = weatherapp.js geonames.js weatherapp.sh\n"
"# List of files to be distributed\n"
"EXTRA_DIST=  \\\n"
"    $(bin_SCRIPTS) \\\n"
"    $(private_icons)\t\\\n"
"\t  $(NULL)\n"
"\n"
"CLEANFILES =\n"
"\n"
"# The desktop files\n"
"desktopdir = $(datadir)/applications\n"
"desktop_DATA =weatherapp.desktop\n"
"\n"
"# convenience command for doing Makefile variable substitutions in non-Makefile\n"
"# files (scripts, service files, etc.)\n"
"do_subst = sed -e 's|@abs_top_srcdir[@]|$(abs_top_srcdir)|g' \\\n"
"               -e 's|@abs_top_builddir[@]|$(abs_top_builddir)|g' \\\n"
"               -e 's|@localedir[@]|$(localedir)|g' \\\n"
"               -e 's|@bindir[@]|$(bindir)|g' \\\n"
"               -e 's|@libexecdir[@]|$(libexecdir)|g' \\\n"
"\t       -e 's|@pkglibdir[@]|$(pkglibdir)|g' \\\n"
"\t       -e 's|@pkgdatadir[@]|$(pkgdatadir)|g' \\\n"
"\t       -e 's|@have_libnotify[@]|$(HAVE_LIBNOTIFY)|g' \\\n"
"\t       -e 's|@have_libsoup[@]|$(HAVE_LIBSOUP)|g' \\\n"
"\t       -e 's|@have_cheese[@]|$(HAVE_CHEESE)|g'\n"
"\n"
"weatherapp.sh: weatherapp.sh.in\n"
"\t$(AM_V_GEN) $(do_subst) $&lt; &gt; $@\n"
"\tchmod +x $@\n"
"\n"
"CLEANFILES += weatherapp.sh\n"
"EXTRA_DIST += weatherapp.sh.in\n"
"\n"
"#the application icon\n"
"appicondir=$(datadir)/icons/hicolor/scalable/apps\n"
"appicon_DATA=weather-icon.svg\n"
"\n"
"#icons in the application\n"
"NULL =\n"
"\n"
"private_icons = \\\n"
"\tweather-clear.svg \\\n"
"  weather-few-clouds.svg \\\n"
"  weather-fog.svg \\\n"
"  weather-icon.svg \\\n"
"  weather-overcast.svg \\\n"
"  weather-showers.svg \\\n"
"  weather-showers-scattered.svg \\\n"
"  weather-snow.svg \\\n"
"  $(NULL)\n"
"\n"
"install-icons:\n"
"\tfor icon in $(private_icons); do \\\n"
"\t\tmkdir -p $(DESTDIR)$(pkgdatadir)/icons/; \\\n"
"\t\t$(INSTALL_DATA) $(srcdir)/$$icon $(DESTDIR)$(pkgdatadir)/icons/; \\\n"
"\tdone\n"
"\n"
"install-data-local: install-icons"
msgstr ""
"\n"
"# The actual runnable program is set to the SCRIPTS primitive. Prefix bin_ tells where to copy this\n"
"bin_SCRIPTS = weatherapp.js geonames.js weatherapp.sh\n"
"# List of files to be distributed\n"
"EXTRA_DIST=  \\\n"
"    $(bin_SCRIPTS) \\\n"
"    $(private_icons)\t\\\n"
"\t  $(NULL)\n"
"\n"
"CLEANFILES =\n"
"\n"
"# The desktop files\n"
"desktopdir = $(datadir)/applications\n"
"desktop_DATA =weatherapp.desktop\n"
"\n"
"# convenience command for doing Makefile variable substitutions in non-Makefile\n"
"# files (scripts, service files, etc.)\n"
"do_subst = sed -e 's|@abs_top_srcdir[@]|$(abs_top_srcdir)|g' \\\n"
"               -e 's|@abs_top_builddir[@]|$(abs_top_builddir)|g' \\\n"
"               -e 's|@localedir[@]|$(localedir)|g' \\\n"
"               -e 's|@bindir[@]|$(bindir)|g' \\\n"
"               -e 's|@libexecdir[@]|$(libexecdir)|g' \\\n"
"\t       -e 's|@pkglibdir[@]|$(pkglibdir)|g' \\\n"
"\t       -e 's|@pkgdatadir[@]|$(pkgdatadir)|g' \\\n"
"\t       -e 's|@have_libnotify[@]|$(HAVE_LIBNOTIFY)|g' \\\n"
"\t       -e 's|@have_libsoup[@]|$(HAVE_LIBSOUP)|g' \\\n"
"\t       -e 's|@have_cheese[@]|$(HAVE_CHEESE)|g'\n"
"\n"
"weatherapp.sh: weatherapp.sh.in\n"
"\t$(AM_V_GEN) $(do_subst) $&lt; &gt; $@\n"
"\tchmod +x $@\n"
"\n"
"CLEANFILES += weatherapp.sh\n"
"EXTRA_DIST += weatherapp.sh.in\n"
"\n"
"#the application icon\n"
"appicondir=$(datadir)/icons/hicolor/scalable/apps\n"
"appicon_DATA=weather-icon.svg\n"
"\n"
"#icons in the application\n"
"NULL =\n"
"\n"
"private_icons = \\\n"
"\tweather-clear.svg \\\n"
"  weather-few-clouds.svg \\\n"
"  weather-fog.svg \\\n"
"  weather-icon.svg \\\n"
"  weather-overcast.svg \\\n"
"  weather-showers.svg \\\n"
"  weather-showers-scattered.svg \\\n"
"  weather-snow.svg \\\n"
"  $(NULL)\n"
"\n"
"install-icons:\n"
"\tfor icon in $(private_icons); do \\\n"
"\t\tmkdir -p $(DESTDIR)$(pkgdatadir)/icons/; \\\n"
"\t\t$(INSTALL_DATA) $(srcdir)/$$icon $(DESTDIR)$(pkgdatadir)/icons/; \\\n"
"\tdone\n"
"\n"
"install-data-local: install-icons"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:125
msgid ""
"This needs a bit more explaining. Compared to the HelloWorld Makefile.am "
"this has changed quite a bit. Lets go through all the new blocks:"
msgstr ""
"더 많은 설명이 필요합니다. HelloWorld Makefile.am과 비교하여 약간 바뀌었을 뿐"
"입니다. 새 블록 부분을 살펴보겠습니다:"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:126
msgid ""
"bin_scripts are the files that are needed to run your application. In thin "
"case they are the first two files are the program itself and the third is "
"the script that launches the application."
msgstr ""
"bin_scripts는 프로그램을 실행하는데 필요한 파일입니다. 이 경우 처음 두 파일"
"은 프로그램 그 자체이며, 세번째는 프로그램을 실행하는 스크립트입니다."

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:127
msgid "EXTRA_DIST are the files that are to be distributed"
msgstr "EXTRA_DIST는 배포할 파일 목록입니다."

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:128
msgid "do_subst block is bits and pieces that need to be where they are"
msgstr ""
"du_subst 블록은 각 파일이 각각 어디에 있어야 하는지 나타내는 부분입니다"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:129
msgid ""
"after the comment #icons in the application there are all the icons that are "
"used by the program. For them to be useful you need to install the icons in "
"correct places and that is done byt the install-icons: bit"
msgstr ""
"#icons in the application 주석 다음에는 프로그램에서 활용할 아이콘이 있습니"
"다. 이 항목을 쓸 수 있으려면 아이콘을 올바른 위치에 설치해야 하는데, 이 과정"
"은 install-icons: 부분에서 처리할 수 있습니다."

#. (itstool) path: section/code
#: C/weatherAutotools.js.page:132
#, no-wrap
msgid ""
"\n"
"dnl This file is processed by autoconf to create a configure script\n"
"AC_INIT([Weather App], 1.0)\n"
"AM_INIT_AUTOMAKE([1.10 no-define foreign])\n"
"AC_CONFIG_FILES(Makefile)\n"
"AC_OUTPUT"
msgstr ""
"\n"
"dnl This file is processed by autoconf to create a configure script\n"
"AC_INIT([Weather App], 1.0)\n"
"AM_INIT_AUTOMAKE([1.10 no-define foreign])\n"
"AC_CONFIG_FILES(Makefile)\n"
"AC_OUTPUT"

#. (itstool) path: section/code
#: C/weatherAutotools.js.page:139
#, no-wrap
msgid ""
"\n"
"#!/bin/sh\n"
"# This will run autoconf, automake, etc. for us\n"
"autoreconf --force --install"
msgstr ""
"\n"
"#!/bin/sh\n"
"# This will run autoconf, automake, etc. for us\n"
"autoreconf --force --install"

#. (itstool) path: section/title
#: C/weatherAutotools.js.page:145
msgid "Custom icons for your application"
msgstr "프로그램 개별 아이콘"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:146
msgid ""
"When thinking about custom icons a good rule of thumb is: do you expect to "
"see that icon used elsewhere or is it private to your app? If the first (e."
"g. the icons in the desktop file that are shown by the shell) then you need /"
"usr/share/hicolor, otherwise (e.g. the weather icons of your app) /usr/share/"
"$application/bla/bla"
msgstr ""
"개별 아이콘에 대해 생각할 때 경험상 최고의 방법은 아이콘을 다른 곳에서도 쓸 "
"지, 앱 그 자체로만 한정할 것인지에 대한 고려입니다. 전자라면(쉘에서 나타나는 "
"desktop 파일의 아이콘) /usr/share/hicolor에 넣어야 하고, 그렇지 않으면(여러"
"분 혼자 쓰는 앱의 날씨 아이콘) /usr/share/$application/bla/bla 같은 곳에 넣으"
"면 됩니다"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:147
msgid ""
"Using autotools you have to make some changes to your .desktop and Makefile."
"am files. In the desktop file you change the Icon's name Icon=weather-icon. "
"In the Makefile.am file you add these two lines to the end of your "
"application #the application icon"
msgstr ""
"autotools를 활용하면 .desktop 파일과 Makefile.am 파일을 약간 바꿔야합니다. "
"desktop 파일에는 Icon=weather-icon으로 아이콘 이름을 바꿔주십시오. Makefile."
"am 파일에는 #the application icon을 적고 그 아래에 다음 두 줄을 넣으십시오."

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:148
msgid "appicondir=$(datadir)/icons/hicolor/scalable/apps"
msgstr "appicondir=$(datadir)/icons/hicolor/scalable/apps"

#. (itstool) path: section/p
#: C/weatherAutotools.js.page:149
msgid "appicon_DATA=weather-icon.svg"
msgstr "appicon_DATA=weather-icon.svg"

#. (itstool) path: page/title
#: C/weatherGeonames.js.page:19
msgid "Local library geoNames"
msgstr "로컬 라이브러리 geoName"

#. (itstool) path: synopsis/p
#: C/weatherGeonames.js.page:21
msgid ""
"In this part of the guide we'll construct the local library geoNames using "
"asynchronous calls. Weather information in this example is fetched from "
"geonames.org and the application is using the <link href=\"http://en."
"wikipedia.org/wiki/List_of_airports_by_ICAO_code:_E\">ICAO codes </link> to "
"place your weather request. To write and run all the code examples yourself, "
"you need an editor to write code in, Terminal and GNOME 3 or higher "
"installed into your computer. In this guide we'll go through the following "
"parts:"
msgstr ""
"안내서의 이 부분에서는 비동기 호출을 활용하여 로컬 라이브러리 geoNames를 만듭"
"니다. 이 예제의 날씨 정보는 geonames.org에서 가져오며, 프로그램에서 날씨 정보"
"를 요청할 때 <link href=\"http://en.wikipedia.org/wiki/"
"List_of_airports_by_ICAO_code:_E\">ICAO codes</link>를 활용합니다. 모든 코드 "
"예제를 여러분 스스로 작성하고 실행하라면 코드를 작성해넣을 편집기, 터미널, 그"
"놈 3 이상을 컴퓨터에 설치해야 합니다. 이 안내서에서는 다음 내용을 진행합니다:"

#. (itstool) path: item/p
#: C/weatherGeonames.js.page:24
msgid ""
"<link xref=\"#geonamesimports\">Local library for getting the weather</link>"
msgstr ""
"<link xref=\"#geonamesimports\">날씨 정보를 가져올 자체 라이브러리</link>"

#. (itstool) path: item/p
#: C/weatherGeonames.js.page:25
msgid "<link xref=\"#geonamesfunction\">Creating function geoNames</link>"
msgstr "<link xref=\"#geonamesfunction\">geoNames용 함수 만들기</link>"

#. (itstool) path: item/p
#: C/weatherGeonames.js.page:26
msgid "<link xref=\"#geonamesmethods\">Methods for geoNames</link>"
msgstr "<link xref=\"#geonamesmethods\">geoNames용 메서드</link>"

#. (itstool) path: item/p
#: C/weatherGeonames.js.page:27
msgid "<link xref=\"#geonames.js\">geonames.js </link>"
msgstr "<link xref=\"#geonames.js\">geonames.js </link>"

#. (itstool) path: section/title
#: C/weatherGeonames.js.page:32
msgid "Local library for getting the weather"
msgstr "날씨 정보를 가져오는 자체 라이브러리"

#. (itstool) path: section/p
#: C/weatherGeonames.js.page:33
msgid "For this we need a new file that will be our local library."
msgstr "이 동작을 처리할 때 로컬 라이브러리로 쓸 새 파일이 필요합니다."

#. (itstool) path: section/code
#: C/weatherGeonames.js.page:34
#, no-wrap
msgid ""
"\n"
"const Soup = imports.gi.Soup;\n"
"const _httpSession = new Soup.SessionAsync();\n"
"Soup.Session.prototype.add_feature.call(_httpSession, new Soup.ProxyResolverDefault());\n"
msgstr ""
"\n"
"const Soup = imports.gi.Soup;\n"
"const _httpSession = new Soup.SessionAsync();\n"
"Soup.Session.prototype.add_feature.call(_httpSession, new Soup.ProxyResolverDefault());\n"

#. (itstool) path: section/p
#: C/weatherGeonames.js.page:39
msgid ""
"In the first lines we'll import and initialize the libraries we need to use "
"in this local library. Soup handles all the requests we have to make with "
"http."
msgstr ""
"첫번째 줄에는 로컬 라이브러리에서 필요한 라이브러리를 가져오고 초기화 합니"
"다. Soup는 모든 http 요청을 처리합니다."

#. (itstool) path: section/title
#: C/weatherGeonames.js.page:43
msgid "Creating function GeoNames"
msgstr "GeoNames 함수 만들기"

#. (itstool) path: section/code
#: C/weatherGeonames.js.page:44
#, no-wrap
msgid ""
"\n"
"function GeoNames(station) {\n"
"  this.station = station;\n"
"}\n"
"\n"
"GeoNames.prototype = {\n"
"\n"
"}\n"
msgstr ""
"\n"
"function GeoNames(station) {\n"
"  this.station = station;\n"
"}\n"
"\n"
"GeoNames.prototype = {\n"
"\n"
"}\n"

#. (itstool) path: section/p
#: C/weatherGeonames.js.page:53
msgid ""
"Here we create the function GeoNames that will handle getting weather for "
"us. JavaScript allows us to create functions that have little inside at "
"first and later expand them. This will be done inside the GeoNames.prototype "
"curly braces{}"
msgstr ""
"날씨를 가져올 때 처리할 GeoNames 함수를 만들었습니다. JavaScript에서는 일단 "
"안에 넣고 나중에 확장할 함수를 만들 수 있습니다. GeoNames.prototyle 중괄호 안"
"에 넣으면 됩니다."

#. (itstool) path: section/title
#: C/weatherGeonames.js.page:57
msgid "Methods for GeoNames"
msgstr "GeoNames용 메서드"

#. (itstool) path: section/code
#: C/weatherGeonames.js.page:58
#, no-wrap
msgid ""
"\n"
"getWeather: function(callback) {\n"
"    var request = Soup.Message.new('GET', 'http://api.geonames.org/weatherIcaoJSON?ICAO=' + this.station + '&amp;username=demo');\n"
"    _httpSession.queue_message(request, function(_httpSession, message) {\n"
"      if (message.status_code !== 200) {\n"
"        callback(message.status_code, null);\n"
"        return;\n"
"      }\n"
"      var weatherJSON = request.response_body.data;\n"
"      var weather = JSON.parse(weatherJSON);\n"
"      callback(null, weather);\n"
"      });\n"
"},\n"
"\n"
"getIcon: function(weather){\n"
"    switch (weather.weatherObservation.weatherCondition){\n"
"    case \"drizzle\":\n"
"    case \"light showers rain\":\n"
"    case \"light rain\":\n"
"      return \"weather-showers-scattered.svg\";\n"
"    case \"rain\":\n"
"      return \"weather-showers.svg\";\n"
"    case \"light snow\":\n"
"    case \"snow grains\":\n"
"      return \"weather-snow.svg\";\n"
"    }\n"
"    switch (weather.weatherObservation.clouds){\n"
"      case \"few clouds\":\n"
"      case \"scattered clouds\":\n"
"        return \"weather-few-clouds.svg\";\n"
"      case \"clear sky\":\n"
"        return \"weather-clear.svg\"\n"
"      case \"broken clouds\":\n"
"      case \"overcast\":\n"
"        return \"weather-overcast.svg\";\n"
"    }\n"
"    return \"weather-fog.svg\";\n"
"}\n"
msgstr ""
"\n"
"getWeather: function(callback) {\n"
"    var request = Soup.Message.new('GET', 'http://api.geonames.org/weatherIcaoJSON?ICAO=' + this.station + '&amp;username=demo');\n"
"    _httpSession.queue_message(request, function(_httpSession, message) {\n"
"      if (message.status_code !== 200) {\n"
"        callback(message.status_code, null);\n"
"        return;\n"
"      }\n"
"      var weatherJSON = request.response_body.data;\n"
"      var weather = JSON.parse(weatherJSON);\n"
"      callback(null, weather);\n"
"      });\n"
"},\n"
"\n"
"getIcon: function(weather){\n"
"    switch (weather.weatherObservation.weatherCondition){\n"
"    case \"drizzle\":\n"
"    case \"light showers rain\":\n"
"    case \"light rain\":\n"
"      return \"weather-showers-scattered.svg\";\n"
"    case \"rain\":\n"
"      return \"weather-showers.svg\";\n"
"    case \"light snow\":\n"
"    case \"snow grains\":\n"
"      return \"weather-snow.svg\";\n"
"    }\n"
"    switch (weather.weatherObservation.clouds){\n"
"      case \"few clouds\":\n"
"      case \"scattered clouds\":\n"
"        return \"weather-few-clouds.svg\";\n"
"      case \"clear sky\":\n"
"        return \"weather-clear.svg\"\n"
"      case \"broken clouds\":\n"
"      case \"overcast\":\n"
"        return \"weather-overcast.svg\";\n"
"    }\n"
"    return \"weather-fog.svg\";\n"
"}\n"

#. (itstool) path: section/p
#: C/weatherGeonames.js.page:97
msgid ""
"The first method for GeoNames is getWeather and the second getIcon. In "
"getWeather we make a http request with soup, handle errors and then parse "
"the information from the request to form we can use it. In getIcon we simply "
"compare the results we got from getWeather to the switch we have in order to "
"get the icon matching current weather. Now that we have our local library "
"ready, it's time to make use of it."
msgstr ""
"GeoNames의 첫 메서드는 getWeather와 getIcon입니다. getWeather에서 Soup로 "
"http 요청, 오류를 처리하며, 요청의 응답으로 온 정보를 우리가 사용할 수 있는 "
"모양새로 해석합니다. getIcon에서는 getWeather에서 가져온 결과를 비교하여 현"
"재 날씨와 일치하는 아이콘 결과를 가져옵니다. 이제 준비한 로컬 라이브러리가 있"
"으니 쓸 수 있게 만들 시간입니다."

#. (itstool) path: section/title
#: C/weatherGeonames.js.page:102
msgid "geonames.js"
msgstr "geonames.js"

#. (itstool) path: section/p
#: C/weatherGeonames.js.page:103
msgid ""
"Here is the entire code for our local library. The main program file calls "
"this asynchronously."
msgstr ""
"로컬 라이브러리 전체 코드입니다. 주 프로그램 파일에서는 비동기 방식으로 호출"
"합니다."

#. (itstool) path: section/code
#: C/weatherGeonames.js.page:104
#, no-wrap
msgid ""
"\n"
"const Soup = imports.gi.Soup;\n"
"const _httpSession = new Soup.SessionAsync();\n"
"Soup.Session.prototype.add_feature.call(_httpSession, new Soup.ProxyResolverDefault());\n"
"\n"
"function GeoNames(station) {\n"
"  this.station = station;\n"
"}\n"
"\n"
"GeoNames.prototype = {\n"
"  getWeather: function(callback) {\n"
"    var request = Soup.Message.new('GET', 'http://api.geonames.org/weatherIcaoJSON?ICAO=' + this.station + '&amp;username=demo');\n"
"    _httpSession.queue_message(request, function(_httpSession, message) {\n"
"      if (message.status_code !== 200) {\n"
"        callback(message.status_code, null);\n"
"        return;\n"
"      }\n"
"      var weatherJSON = request.response_body.data;\n"
"      var weather = JSON.parse(weatherJSON);\n"
"      callback(null, weather);\n"
"      });\n"
"    },\n"
"\n"
"  getIcon: function(weather){\n"
"    switch (weather.weatherObservation.weatherCondition){\n"
"    case \"drizzle\":\n"
"    case \"light showers rain\":\n"
"    case \"light rain\":\n"
"      return \"weather-showers-scattered.svg\";\n"
"    case \"rain\":\n"
"      return \"weather-showers.svg\";\n"
"    case \"light snow\":\n"
"    case \"snow grains\":\n"
"      return \"weather-snow.svg\";\n"
"    }\n"
"    switch (weather.weatherObservation.clouds){\n"
"      case \"few clouds\":\n"
"      case \"scattered clouds\":\n"
"        return \"weather-few-clouds.svg\";\n"
"      case \"clear sky\":\n"
"        return \"weather-clear.svg\"\n"
"      case \"broken clouds\":\n"
"      case \"overcast\":\n"
"        return \"weather-overcast.svg\";\n"
"    }\n"
"    return \"weather-fog.svg\";\n"
"    }\n"
"}\n"
"}  "
msgstr ""
"\n"
"const Soup = imports.gi.Soup;\n"
"const _httpSession = new Soup.SessionAsync();\n"
"Soup.Session.prototype.add_feature.call(_httpSession, new Soup.ProxyResolverDefault());\n"
"\n"
"function GeoNames(station) {\n"
"  this.station = station;\n"
"}\n"
"\n"
"GeoNames.prototype = {\n"
"  getWeather: function(callback) {\n"
"    var request = Soup.Message.new('GET', 'http://api.geonames.org/weatherIcaoJSON?ICAO=' + this.station + '&amp;username=demo');\n"
"    _httpSession.queue_message(request, function(_httpSession, message) {\n"
"      if (message.status_code !== 200) {\n"
"        callback(message.status_code, null);\n"
"        return;\n"
"      }\n"
"      var weatherJSON = request.response_body.data;\n"
"      var weather = JSON.parse(weatherJSON);\n"
"      callback(null, weather);\n"
"      });\n"
"    },\n"
"\n"
"  getIcon: function(weather){\n"
"    switch (weather.weatherObservation.weatherCondition){\n"
"    case \"drizzle\":\n"
"    case \"light showers rain\":\n"
"    case \"light rain\":\n"
"      return \"weather-showers-scattered.svg\";\n"
"    case \"rain\":\n"
"      return \"weather-showers.svg\";\n"
"    case \"light snow\":\n"
"    case \"snow grains\":\n"
"      return \"weather-snow.svg\";\n"
"    }\n"
"    switch (weather.weatherObservation.clouds){\n"
"      case \"few clouds\":\n"
"      case \"scattered clouds\":\n"
"        return \"weather-few-clouds.svg\";\n"
"      case \"clear sky\":\n"
"        return \"weather-clear.svg\"\n"
"      case \"broken clouds\":\n"
"      case \"overcast\":\n"
"        return \"weather-overcast.svg\";\n"
"    }\n"
"    return \"weather-fog.svg\";\n"
"    }\n"
"}\n"
"}  "

#. (itstool) path: info/title
#: C/widget_drawing.py.page:8
msgctxt "text"
msgid "Widget (Python)"
msgstr "Widget (Python)"

#. (itstool) path: info/desc
#: C/widget_drawing.py.page:18
msgid "A widget that uses the Cairo library to draw"
msgstr "카이로 라이브러리를 그리기 용도로 활용하는 위젯"

#. (itstool) path: page/title
#: C/widget_drawing.py.page:21
msgid "Widget"
msgstr "Widget"

#. (itstool) path: page/media
#. This is a reference to an external file such as an image or video. When
#. the file changes, the md5 hash will change to let you know you need to
#. update your localized copy. The msgstr is not used at all. Set it to
#. whatever you like once you have updated your copy of the file.
#: C/widget_drawing.py.page:22
msgctxt "_"
msgid ""
"external ref='media/widget_drawing.png' "
"md5='d00abd8cb9e158018c57fd75b81dfe58'"
msgstr ""

#. (itstool) path: page/p
#: C/widget_drawing.py.page:23
msgid "Enter an angle, visualize it."
msgstr "각도를 입력하면 그림으로 나타냅니다."

#. (itstool) path: section/code
#: C/widget_drawing.py.page:30
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"from gi.repository import cairo\n"
"import sys\n"
"import math\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Choose an angle\", application=app)\n"
"        self.set_default_size(400, 400)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a default angle\n"
"        self.angle = 360\n"
"\n"
"        grid = Gtk.Grid()\n"
"\n"
"        # a spinbutton that takes the value of an angle\n"
"        ad = Gtk.Adjustment(360, 0, 360, 1, 0, 0)\n"
"        self.spin = Gtk.SpinButton(adjustment=ad, climb_rate=1, digits=0)\n"
"        self.spin.connect(\"value-changed\", self.get_angle)\n"
"\n"
"        # a drawing area for drawing whatever we want\n"
"        self.darea = Gtk.DrawingArea()\n"
"        # that we describe in the method draw(), connected to the signal \"draw\"\n"
"        self.darea.connect(\"draw\", self.draw)\n"
"        # we have to request a minimum size of the drawing area, or it will\n"
"        # disappear\n"
"        self.darea.set_size_request(300, 300)\n"
"\n"
"        grid.attach(self.spin, 0, 0, 1, 1)\n"
"        grid.attach(self.darea, 0, 1, 1, 1)\n"
"\n"
"        self.add(grid)\n"
"\n"
"    # whenever we get a new angle in the spinbutton\n"
"    def get_angle(self, event):\n"
"        self.angle = self.spin.get_value_as_int()\n"
"        # redraw what is in the drawing area\n"
"        self.darea.queue_draw()\n"
"\n"
"    def draw(self, darea, cr):\n"
"        # a 10-pixels-wide line\n"
"        cr.set_line_width(10)\n"
"        # red\n"
"        cr.set_source_rgba(0.5, 0.0, 0.0, 1.0)\n"
"\n"
"        # get the width and height of the drawing area\n"
"        w = self.darea.get_allocated_width()\n"
"        h = self.darea.get_allocated_height()\n"
"\n"
"        # move to the center of the drawing area\n"
"        # (translate from the top left corner to w/2, h/2)\n"
"        cr.translate(w / 2, h / 2)\n"
"        # draw a line to (55, 0)\n"
"        cr.line_to(55, 0)\n"
"        # and get back to (0, 0)\n"
"        cr.line_to(0, 0)\n"
"        # draw an arc centered in the origin, 50 pixels wide, from the angle 0\n"
"        # (in radians) to the angle given by the spinbutton (in degrees)\n"
"        cr.arc(0, 0, 50, 0, self.angle * (math.pi / 180))\n"
"        # draw a line back to the origin\n"
"        cr.line_to(0, 0)\n"
"        # drawing the path, and keeping the path for future use\n"
"        cr.stroke_preserve()\n"
"\n"
"        # set a colour\n"
"        cr.set_source_rgba(0.0, 0.5, 0.5, 1.0)\n"
"        # and use it to fill the path (that we had kept)\n"
"        cr.fill()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"from gi.repository import cairo\n"
"import sys\n"
"import math\n"
"\n"
"\n"
"class MyWindow(Gtk.ApplicationWindow):\n"
"\n"
"    def __init__(self, app):\n"
"        Gtk.Window.__init__(self, title=\"Choose an angle\", application=app)\n"
"        self.set_default_size(400, 400)\n"
"        self.set_border_width(10)\n"
"\n"
"        # a default angle\n"
"        self.angle = 360\n"
"\n"
"        grid = Gtk.Grid()\n"
"\n"
"        # a spinbutton that takes the value of an angle\n"
"        ad = Gtk.Adjustment(360, 0, 360, 1, 0, 0)\n"
"        self.spin = Gtk.SpinButton(adjustment=ad, climb_rate=1, digits=0)\n"
"        self.spin.connect(\"value-changed\", self.get_angle)\n"
"\n"
"        # a drawing area for drawing whatever we want\n"
"        self.darea = Gtk.DrawingArea()\n"
"        # that we describe in the method draw(), connected to the signal \"draw\"\n"
"        self.darea.connect(\"draw\", self.draw)\n"
"        # we have to request a minimum size of the drawing area, or it will\n"
"        # disappear\n"
"        self.darea.set_size_request(300, 300)\n"
"\n"
"        grid.attach(self.spin, 0, 0, 1, 1)\n"
"        grid.attach(self.darea, 0, 1, 1, 1)\n"
"\n"
"        self.add(grid)\n"
"\n"
"    # whenever we get a new angle in the spinbutton\n"
"    def get_angle(self, event):\n"
"        self.angle = self.spin.get_value_as_int()\n"
"        # redraw what is in the drawing area\n"
"        self.darea.queue_draw()\n"
"\n"
"    def draw(self, darea, cr):\n"
"        # a 10-pixels-wide line\n"
"        cr.set_line_width(10)\n"
"        # red\n"
"        cr.set_source_rgba(0.5, 0.0, 0.0, 1.0)\n"
"\n"
"        # get the width and height of the drawing area\n"
"        w = self.darea.get_allocated_width()\n"
"        h = self.darea.get_allocated_height()\n"
"\n"
"        # move to the center of the drawing area\n"
"        # (translate from the top left corner to w/2, h/2)\n"
"        cr.translate(w / 2, h / 2)\n"
"        # draw a line to (55, 0)\n"
"        cr.line_to(55, 0)\n"
"        # and get back to (0, 0)\n"
"        cr.line_to(0, 0)\n"
"        # draw an arc centered in the origin, 50 pixels wide, from the angle 0\n"
"        # (in radians) to the angle given by the spinbutton (in degrees)\n"
"        cr.arc(0, 0, 50, 0, self.angle * (math.pi / 180))\n"
"        # draw a line back to the origin\n"
"        cr.line_to(0, 0)\n"
"        # drawing the path, and keeping the path for future use\n"
"        cr.stroke_preserve()\n"
"\n"
"        # set a colour\n"
"        cr.set_source_rgba(0.0, 0.5, 0.5, 1.0)\n"
"        # and use it to fill the path (that we had kept)\n"
"        cr.fill()\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def __init__(self):\n"
"        Gtk.Application.__init__(self)\n"
"\n"
"    def do_activate(self):\n"
"        win = MyWindow(self)\n"
"        win.show_all()\n"
"\n"
"    def do_startup(self):\n"
"        Gtk.Application.do_startup(self)\n"
"\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: item/p
#: C/widget_drawing.py.page:39
msgid ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkDrawingArea.html"
"\">GtkDrawingArea</link>"
msgstr ""
"<link href=\"http://developer.gnome.org/gtk3/unstable/GtkDrawingArea.html"
"\">GtkDrawingArea</link>"

#. (itstool) path: item/p
#: C/widget_drawing.py.page:40
msgid ""
"<link href=\"http://www.tortall.net/mu/wiki/CairoTutorial\">The Cairo "
"Tutorial for Python Programmers</link>"
msgstr ""
"<link href=\"http://www.tortall.net/mu/wiki/CairoTutorial\">파이썬 프로그래머"
"용 카이로 지침서</link>"

#. (itstool) path: info/title
#: C/window.c.page:8
msgctxt "text"
msgid "Window (C)"
msgstr "Window (C)"

#. (itstool) path: info/desc
#: C/window.c.page:18 C/window.py.page:25 C/window.vala.page:18
msgid "A toplevel window which can contain other widgets"
msgstr "다른 위젯을 넣을 수 있는 최상위 창"

#. (itstool) path: page/title
#: C/window.c.page:21 C/window.js.page:21 C/window.py.page:28
#: C/window.vala.page:21
msgid "Window"
msgstr "Window"

#. (itstool) path: page/p
#: C/window.c.page:24
msgid ""
"A minimal GtkApplication. Use <link xref=\"GtkApplicationWindow.c"
"\">Application Window</link> if you need GMenu support."
msgstr ""
"소형 GtkApplication입니다. GMenu 지원 기능이 필요하면 <link xref="
"\"GtkApplicationWindow.c\">ApplicationWindow</link>를 사용하세요."

#. (itstool) path: page/code
#: C/window.c.page:28
#, no-wrap
msgid ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  window = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n"
"\n"
"  gtk_window_set_application (GTK_WINDOW (window), GTK_APPLICATION (app));\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Hello GNOME\");\n"
"\n"
"  gtk_widget_show_all (GTK_WIDGET (window));\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\",G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"
msgstr ""
"\n"
"#include &lt;gtk/gtk.h&gt;\n"
"\n"
"static void\n"
"activate (GtkApplication *app,\n"
"          gpointer        user_data)\n"
"{\n"
"  GtkWidget *window;\n"
"\n"
"  window = gtk_window_new (GTK_WINDOW_TOPLEVEL);\n"
"\n"
"  gtk_window_set_application (GTK_WINDOW (window), GTK_APPLICATION (app));\n"
"  gtk_window_set_title (GTK_WINDOW (window), \"Hello GNOME\");\n"
"\n"
"  gtk_widget_show_all (GTK_WIDGET (window));\n"
"}\n"
"\n"
"int\n"
"main (int argc, char **argv)\n"
"{\n"
"  GtkApplication *app;\n"
"  int status;\n"
"\n"
"  app = gtk_application_new (\"org.gtk.example\",G_APPLICATION_FLAGS_NONE);\n"
"  g_signal_connect (app, \"activate\", G_CALLBACK (activate), NULL);\n"
"  status = g_application_run (G_APPLICATION (app), argc, argv);\n"
"  g_object_unref (app);\n"
"  return status;\n"
"}\n"

#. (itstool) path: info/title
#: C/window.js.page:8
msgctxt "text"
msgid "Window (JavaScript)"
msgstr "Window (JavaScript)"

#. (itstool) path: info/desc
#: C/window.js.page:18
msgid "A basic window which can contain other widgets"
msgstr "다른 위젯을 넣을 수 있는 기본 창"

#. (itstool) path: td/p
#: C/window.js.page:26
msgid "A minimal GtkApplication"
msgstr "소형 GtkApplication"

#. (itstool) path: td/p
#: C/window.js.page:29
msgid ""
"Use <link xref=\"GtkApplicationWindow.js\">ApplicationWindow</link> if you "
"need GMenu support."
msgstr ""
"GMenu 지원 기능이 필요하면 <link xref=\"GtkApplicationWindow.js"
"\">ApplicationWindow</link>를 사용하세요."

#. (itstool) path: page/code
#: C/window.js.page:33
#, no-wrap
msgid ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class ({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.myapp',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function () {\n"
"\n"
"        MyWindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL});\n"
"        MyWindow.title = \"Welcome to GNOME\";\n"
"\n"
"       /* Here are a few ways we can customize our window.\n"
"       Try uncommenting them or changing their values! */\n"
"        //MyWindow.set_default_size (400,200);\n"
"        //MyWindow.set_has_resize_grip (false);\n"
"        //MyWindow.set_opacity (0.5);\n"
"        //MyWindow.maximize ();\n"
"\n"
"        //show the window and all child widgets (none in this case)\n"
"        MyWindow.show_all();\n"
"        this.application.add_window(MyWindow);\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application ();\n"
"app.application.run (ARGV);\n"
msgstr ""
"\n"
"#!/usr/bin/gjs\n"
"\n"
"const Gio = imports.gi.Gio;\n"
"const GLib = imports.gi.GLib;\n"
"const Gtk = imports.gi.Gtk;\n"
"const Lang = imports.lang;\n"
"\n"
"const Application = new Lang.Class ({\n"
"    Name: 'Application',\n"
"\n"
"    //create the application\n"
"    _init: function () {\n"
"        this.application = new Gtk.Application ({\n"
"            application_id: 'org.example.myapp',\n"
"            flags: Gio.ApplicationFlags.FLAGS_NONE\n"
"        });\n"
"\n"
"       this.application.connect('activate', Lang.bind(this, this._onActivate));\n"
"    },\n"
"\n"
"    //callback function for 'activate' signal\n"
"    _onActivate: function () {\n"
"\n"
"        MyWindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL});\n"
"        MyWindow.title = \"Welcome to GNOME\";\n"
"\n"
"       /* Here are a few ways we can customize our window.\n"
"       Try uncommenting them or changing their values! */\n"
"        //MyWindow.set_default_size (400,200);\n"
"        //MyWindow.set_has_resize_grip (false);\n"
"        //MyWindow.set_opacity (0.5);\n"
"        //MyWindow.maximize ();\n"
"\n"
"        //show the window and all child widgets (none in this case)\n"
"        MyWindow.show_all();\n"
"        this.application.add_window(MyWindow);\n"
"    }\n"
"});\n"
"\n"
"//run the application\n"
"let app = new Application ();\n"
"app.application.run (ARGV);\n"

#. (itstool) path: page/p
#: C/window.js.page:35
msgid "In this example we used the following:"
msgstr "이 예제에서 다음 구성 요소를 사용합니다:"

#. (itstool) path: item/p
#: C/window.js.page:40
msgid ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Window.html"
"\">Gtk.Window</link>"
msgstr ""
"<link href=\"http://www.roojs.com/seed/gir-1.2-gtk-3.0/gjs/Gtk.Window.html"
"\">Gtk.Window</link>"

#. (itstool) path: info/title
#: C/window.py.page:8
msgctxt "text"
msgid "Window (Python)"
msgstr "Window (Python)"

#. (itstool) path: td/p
#: C/window.py.page:34
msgid "A minimal GTK+ Application: a window with a title."
msgstr "작은 GTK+ 프로그램: 제목이 들어간 창."

#. (itstool) path: td/p
#: C/window.py.page:37
msgid ""
"Use <link xref=\"GtkApplicationWindow.py\"/> if you need <link xref=\"gmenu."
"py\"/> support."
msgstr ""
"<link xref=\"gmenu.py\"/> 지원 기능이 필요하면 <link xref="
"\"GtkApplicationWindow.py\"/>를 사용하세요."

#. (itstool) path: section/code
#: C/window.py.page:47
#, no-wrap
msgid ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def do_activate(self):\n"
"        # create a Gtk Window belonging to the application itself\n"
"        window = Gtk.Window(application=self)\n"
"        # set the title\n"
"        window.set_title(\"Welcome to GNOME\")\n"
"        # show the window\n"
"        window.show_all()\n"
"\n"
"# create and run the application, exit with the value returned by\n"
"# running the program\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"
msgstr ""
"from gi.repository import Gtk\n"
"import sys\n"
"\n"
"\n"
"class MyApplication(Gtk.Application):\n"
"\n"
"    def do_activate(self):\n"
"        # create a Gtk Window belonging to the application itself\n"
"        window = Gtk.Window(application=self)\n"
"        # set the title\n"
"        window.set_title(\"Welcome to GNOME\")\n"
"        # show the window\n"
"        window.show_all()\n"
"\n"
"# create and run the application, exit with the value returned by\n"
"# running the program\n"
"app = MyApplication()\n"
"exit_status = app.run(sys.argv)\n"
"sys.exit(exit_status)\n"

#. (itstool) path: section/title
#: C/window.py.page:52
msgid "Useful methods for a Window widget"
msgstr "Window 위젯에 쓸만한 메서드"

#. (itstool) path: info/title
#: C/window.vala.page:8
msgctxt "text"
msgid "Window (Vala)"
msgstr "Window (Vala)"

#. (itstool) path: td/p
#: C/window.vala.page:26
msgid "The simplest Gtk.Application"
msgstr "간단한 Gtk.Application"

#. (itstool) path: td/p
#: C/window.vala.page:29
msgid ""
"Use <link xref=\"GtkApplicationWindow.vala\">Application Window</link> if "
"you need GMenu support."
msgstr ""
"GMenu 지원 기능이 필요하면 <link xref=\"GtkApplicationWindow.vala"
"\">ApplicationWindow</link>를 사용하세요."

#. (itstool) path: page/code
#: C/window.vala.page:33
#, no-wrap
msgid ""
"/* This is the application. */\n"
"public class Application : Gtk.Application {\n"
"\n"
"\t/* Constructor */\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.window\");\n"
"\t}\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application,\n"
"\t * which is inherited by Gtk.Application. */\n"
"\tpublic override void activate () {\n"
"\n"
"\t\tvar window = new Gtk.Window ();\n"
"\t\twindow.title = \"Welcome to GNOME\";\n"
"\n"
"\t\t/* The following 3 lines are included here to introduce\n"
"\t\t * you to ways you can adjust the toplevel window to suit\n"
"\t\t * your needs.  Uncomment them to see what they do.\n"
"\t\t */\n"
"\n"
"\t\t//window.border_width = 10;\n"
"\t\t//window.set_default_size (350, 70);\n"
"\t\t//window.window_position = Gtk.WindowPosition.CENTER;\n"
"\n"
"\t\t/* Add the window to this application. */\n"
"\t\tthis.add_window (window);\n"
"\n"
"\t\t/* Show the window. */\n"
"\t\twindow.show ();\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates the application and runs it.*/\n"
"int main (string[] args) {\n"
"\tvar app = new Application ();\n"
"\treturn app.run (args);\n"
"}\n"
msgstr ""
"/* This is the application. */\n"
"public class Application : Gtk.Application {\n"
"\n"
"\t/* Constructor */\n"
"\tpublic Application () {\n"
"\t\tObject (application_id: \"org.example.window\");\n"
"\t}\n"
"\n"
"\t/* Override the 'activate' signal of GLib.Application,\n"
"\t * which is inherited by Gtk.Application. */\n"
"\tpublic override void activate () {\n"
"\n"
"\t\tvar window = new Gtk.Window ();\n"
"\t\twindow.title = \"Welcome to GNOME\";\n"
"\n"
"\t\t/* The following 3 lines are included here to introduce\n"
"\t\t * you to ways you can adjust the toplevel window to suit\n"
"\t\t * your needs.  Uncomment them to see what they do.\n"
"\t\t */\n"
"\n"
"\t\t//window.border_width = 10;\n"
"\t\t//window.set_default_size (350, 70);\n"
"\t\t//window.window_position = Gtk.WindowPosition.CENTER;\n"
"\n"
"\t\t/* Add the window to this application. */\n"
"\t\tthis.add_window (window);\n"
"\n"
"\t\t/* Show the window. */\n"
"\t\twindow.show ();\n"
"\t}\n"
"}\n"
"\n"
"/* The main function creates the application and runs it.*/\n"
"int main (string[] args) {\n"
"\tvar app = new Application ();\n"
"\treturn app.run (args);\n"
"}\n"

#. (itstool) path: item/p
#: C/window.vala.page:39
msgid ""
"The widget <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window.html"
"\">Gtk.Window</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window.html\">Gtk.Window</"
"link> 위젯"

#. (itstool) path: item/p
#: C/window.vala.page:41
msgid ""
"The enum <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.WindowPosition.html"
"\">Gtk.WindowPosition</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.WindowPosition.html\">Gtk."
"WindowPosition</link> 서수형"

#. (itstool) path: item/p
#: C/window.vala.page:43
msgid ""
"The method <link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window."
"set_default_size.html\">set_default_size</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window.set_default_size.html"
"\">set_default_size</link> 메서드"

#. (itstool) path: item/p
#: C/window.vala.page:45
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Container.border_width.html"
"\">border_width</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Container.border_width.html"
"\">border_width</link>"

#. (itstool) path: item/p
#: C/window.vala.page:47
msgid ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window.window_position.html"
"\">window_position</link>"
msgstr ""
"<link href=\"http://www.valadoc.org/gtk+-3.0/Gtk.Window.window_position.html"
"\">window_position</link>"

#. (itstool) path: credit/name
#: C/custom-gsource.c.page:11
msgid "Philip Withnall"
msgstr "Philip Withnall"

#. (itstool) path: credit/years
#: C/custom-gsource.c.page:13
msgid "2015"
msgstr "2015"

#. (itstool) path: info/desc
#: C/custom-gsource.c.page:18
msgid "Tutorial for writing a custom <code>GSource</code> implementation"
msgstr "개별 <code>GSource</code> 구현체 작성 지침서"

#. (itstool) path: page/title
#: C/custom-gsource.c.page:23
msgid "Custom GSources"
msgstr "개별 GSource"

#. (itstool) path: synopsis/title
#: C/custom-gsource.c.page:26
msgid "Summary"
msgstr "요약"

#. (itstool) path: synopsis/p
#: C/custom-gsource.c.page:28
msgid ""
"This article is a tutorial on creating a custom <code>GSource</code>. For "
"the reference documentation, see the <link href=\"https://developer.gnome."
"org/glib/stable/glib-The-Main-Event-Loop.html#GSource\">GLib API reference</"
"link>."
msgstr ""
"이 글은 개별 <code>GSource</code>를 만드는 지침 내용을 담고 있습니다. 참고 문"
"서를 찾아보려면 <link href=\"https://developer.gnome.org/glib/stable/glib-"
"The-Main-Event-Loop.html#GSource\">GLib API 참고서</link>를 살펴보십시오."

#. (itstool) path: section/title
#: C/custom-gsource.c.page:37
msgid "What is <code>GSource</code>?"
msgstr "<code>GSource</code>가 뭐죠?"

#. (itstool) path: section/p
#: C/custom-gsource.c.page:39
msgid ""
"A <link href=\"https://developer.gnome.org/glib/stable/glib-The-Main-Event-"
"Loop.html#GSource\"><code>GSource</code></link> is an expected event with an "
"associated callback function which will be invoked when that event is "
"received. An event could be a timeout or data being received on a socket, "
"for example."
msgstr ""
"<link href=\"https://developer.gnome.org/glib/stable/glib-The-Main-Event-"
"Loop.html#GSource\"><code>GSource</code></link>는 이벤트를 받았을때 실행할 콜"
"백 함수와 관계있는 기대 이벤트입니다.  예를 들어 이벤트는 시간 초과 상황 또"
"는 소켓을 통해 데이터를 받았을 때가 될 수 있습니다."

#. (itstool) path: section/p
#: C/custom-gsource.c.page:46
msgid ""
"GLib contains various types of <code>GSource</code>, but also allows "
"applications to define their own, allowing custom events to be integrated "
"into the main loop."
msgstr ""
"GLib에는 다양한 <code>GSource</code>가 있지만, 메인 루프에 통합할 개별 이벤트"
"를 허용하여 프로그램 자체에서의 <code>GSource</code> 정의를 허용합니다."

#. (itstool) path: section/p
#: C/custom-gsource.c.page:52
msgid ""
"The structure of a <code>GSource</code> and its virtual functions are "
"documented in detail in the <link href=\"https://developer.gnome.org/glib/"
"stable/glib-The-Main-Event-Loop.html#GSourceFuncs\">GLib API reference</"
"link>."
msgstr ""
"<code>GSource</code> 구조와 가상 함수에 대한 자세한 문서는 <link href="
"\"https://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop."
"html#GSourceFuncs\">GLib API 참고서</link>에 있습니다."

#. (itstool) path: section/title
#: C/custom-gsource.c.page:61
msgid "A Message Queue Source"
msgstr "메시지 큐 소스"

#. (itstool) path: section/p
#: C/custom-gsource.c.page:63
msgid ""
"As a running example, a message queue source will be used which dispatches "
"its callback whenever a message is enqueued to a queue internal to the "
"source (potentially from another thread)."
msgstr ""
"실행 예제와 같이, 메시지 큐 소스는 내부에서 메시지를 큐에 넣을 때마다 콜백을 "
"source에서 실행하는 함수에"

#. (itstool) path: section/p
#: C/custom-gsource.c.page:69
msgid ""
"This type of source is useful for efficiently transferring large numbers of "
"messages between main contexts. The alternative is transferring each message "
"as a separate idle <code>GSource</code> using <code>g_source_attach()</"
"code>. For large numbers of messages, this means a lot of allocations and "
"frees of <code>GSource</code>s."
msgstr ""
"이 소스 형식은 메인 컨텍스트간 상당한 양의 메시지를 효율적으로 주고 받을때 쓸"
"만합니다. 대신, <code>g_source_attach()</code> 함수를 활용하여 각 메시지를 개"
"별 대기 <code>GSource</code> 로 보내는 방법이 있습니다. 수많은 메시지에 대해 "
"<code>GSource</code>에 대해 메모리를 할당하고 해제함을 의미합니다."

#. (itstool) path: section/title
#: C/custom-gsource.c.page:78
msgid "Structure"
msgstr "구조체"

#. (itstool) path: section/p
#: C/custom-gsource.c.page:80
msgid ""
"Firstly, a structure for the source needs to be declared. This must contain "
"a <code>GSource</code> as its parent, followed by the private fields for the "
"source: the queue and a function to call to free each message once finished "
"with."
msgstr ""
"우선 source 구조를 선언해야합니다. <code>GSource</code>를 상위 구조로 넣어야"
"하며 그 다음 source 자체 필드를 넣습니다. 큐와 각 메시지를 처리하고 나서 메모"
"리 할당을 해제할 함수가 이에 해당합니다."

#. (itstool) path: section/code
#: C/custom-gsource.c.page:86
#, no-wrap
msgid ""
"\n"
"typedef struct {\n"
"  GSource         parent;\n"
"  GAsyncQueue    *queue;  /* owned */\n"
"  GDestroyNotify  destroy_message;\n"
"} MessageQueueSource;"
msgstr ""
"\n"
"typedef struct {\n"
"  GSource         parent;\n"
"  GAsyncQueue    *queue;  /* owned */\n"
"  GDestroyNotify  destroy_message;\n"
"} MessageQueueSource;"

#. (itstool) path: section/title
#: C/custom-gsource.c.page:95
msgid "Prepare Function"
msgstr "준비 함수"

#. (itstool) path: section/p
#: C/custom-gsource.c.page:97
msgid ""
"Next, the prepare function for the source must be defined. This determines "
"whether the source is ready to be dispatched. As this source is using an in-"
"memory queue, this can be determined by checking the queue’s length: if "
"there are elements in the queue, the source can be dispatched to handle them."
msgstr ""
"그 다음, source의 준비 함수를 정의해야합니다. source를 처리할 준비가 됐는지 "
"여부를 결정합니다. source가 인메모리 큐를 사용하기 때문에 큐 길이를 검사하여 "
"결정할 수 있습니다. 큐에 구성요소를 넣어두었다면 source에서 해당 구성 요소를 "
"처리할 수 있습니다."

#. (itstool) path: section/code
#: C/custom-gsource.c.page:104
#, no-wrap
msgid ""
"\n"
"return (g_async_queue_length (message_queue_source-&gt;queue) &gt; 0);"
msgstr ""
"\n"
"return (g_async_queue_length (message_queue_source-&gt;queue) &gt; 0);"

#. (itstool) path: section/title
#: C/custom-gsource.c.page:109
msgid "Check Function"
msgstr "점검 함수"

#. (itstool) path: section/p
#: C/custom-gsource.c.page:111
msgid ""
"As this source has no file descriptors, the prepare and check functions "
"essentially have the same job, so a check function is not needed. Setting "
"the field to <code>NULL</code> in <code>GSourceFuncs</code> bypasses the "
"check function for this source type."
msgstr ""
"이 소스에 파일 서술자가 없기에, 준비하고 검사하는 함수는 근본적으로 동일한 동"
"작을 취합니다. 따라서 검사 함수가 필요하지 않습니다. <code>GSourceFuncs</"
"code>에서 필드 값을 <code>NULL</code>로 설정하면 소스 형식에 대한 검사 함수 "
"동작을 건너뜁니다."

#. (itstool) path: section/title
#: C/custom-gsource.c.page:120
msgid "Dispatch Function"
msgstr "실행 함수"

#. (itstool) path: section/p
#: C/custom-gsource.c.page:122
msgid ""
"For this source, the dispatch function is where the complexity lies. It "
"needs to dequeue a message from the queue, then pass that message to the "
"<code>GSource</code>’s callback function. No messages may be queued: even "
"through the prepare function returned true, another source wrapping the same "
"queue may have been dispatched in the mean time and taken the final message "
"from the queue. Further, if no callback has been set for the <code>GSource</"
"code> (which is allowed), the message must be destroyed and silently dropped."
msgstr ""
"이 source에 대해, 실행 함수는 복잡성이 존재하는 곳입니다. 큐에서 메시지를 빼"
"낸 후 <code>GSource</code>의 콜백 함수에 메시지를 전달해야합니다. 큐에 메시지"
"가 없을 수도 있습니다. 준비 함수에서 true를 반환한다 하더라도, 동일한 큐를 래"
"핑하는 다른 source를 평균 시간내에 처리하며 큐에서 마지막 메시지를 취하기도 "
"합니다. 게다가 <code>GSource</code>에 (허용한) 콜백을 설정하지 않으면, 메시지"
"를 해체하고 버려야합니다."

#. (itstool) path: section/p
#: C/custom-gsource.c.page:133
msgid ""
"If both a message and callback are set, the callback can be invoked on the "
"message and its return value propagated as the return value of the dispatch "
"function. This is <code>FALSE</code> to destroy the <code>GSource</code> and "
"<code>TRUE</code> to keep it alive, just as for <code>GSourceFunc</code> — "
"these semantics are the same for all dispatch function implementations."
msgstr ""
"메시지와 콜백을 설정하면 콜백에서 메시지를 처리하고, 실행 함수의 반환 값으로 "
"반환 값을 전달합니다. <code>GSource</code>가 해체되면 <code>FALSE</code>, "
"<code>GSourceFunc</code>에 대해 계속 남아있으면 <code>TRUE</code>입니다. 이"
"런 식의 의미는 모든 실행 함수 구현에 동일하게 적용합니다."

#. (itstool) path: section/code
#: C/custom-gsource.c.page:141
#, no-wrap
msgid ""
"\n"
"/* Pop a message off the queue. */\n"
"message = g_async_queue_try_pop (message_queue_source-&gt;queue);\n"
"\n"
"/* If there was no message, bail. */\n"
"if (message == NULL)\n"
"  {\n"
"    /* Keep the source around to handle the next message. */\n"
"    return TRUE;\n"
"  }\n"
"\n"
"/* @func may be %NULL if no callback was specified.\n"
" * If so, drop the message. */\n"
"if (func == NULL)\n"
"  {\n"
"    if (message_queue_source-&gt;destroy_message != NULL)\n"
"      {\n"
"        message_queue_source-&gt;destroy_message (message);\n"
"      }\n"
"\n"
"    /* Keep the source around to consume the next message. */\n"
"    return TRUE;\n"
"  }\n"
"\n"
"return func (message, user_data);"
msgstr ""
"\n"
"/* Pop a message off the queue. */\n"
"message = g_async_queue_try_pop (message_queue_source-&gt;queue);\n"
"\n"
"/* If there was no message, bail. */\n"
"if (message == NULL)\n"
"  {\n"
"    /* Keep the source around to handle the next message. */\n"
"    return TRUE;\n"
"  }\n"
"\n"
"/* @func may be %NULL if no callback was specified.\n"
" * If so, drop the message. */\n"
"if (func == NULL)\n"
"  {\n"
"    if (message_queue_source-&gt;destroy_message != NULL)\n"
"      {\n"
"        message_queue_source-&gt;destroy_message (message);\n"
"      }\n"
"\n"
"    /* Keep the source around to consume the next message. */\n"
"    return TRUE;\n"
"  }\n"
"\n"
"return func (message, user_data);"

#. (itstool) path: section/title
#: C/custom-gsource.c.page:169
msgid "Callback Functions"
msgstr "콜백 함수"

#. (itstool) path: section/p
#: C/custom-gsource.c.page:171
msgid ""
"The callback from a <code>GSource</code> does not have to have type "
"<code>GSourceFunc</code>. It can be whatever function type is called in the "
"source’s dispatch function, as long as that type is sufficiently documented."
msgstr ""
"<code>GSource</code> 콜백은 <code>GSourceFunc</code> 형식일 필요는 없습니다. "
"이 형식에 대해 충분히 문서로 남겨둔 만큼 source의 실행 함수에서 불리는 어떤 "
"함수 형식이든 될 수 있습니다."

#. (itstool) path: section/p
#: C/custom-gsource.c.page:178
msgid ""
"Normally, <code>g_source_set_callback()</code> is used to set the callback "
"function for a source instance. With its <code>GDestroyNotify</code>, a "
"strong reference can be held to keep an object alive while the source is "
"still alive:"
msgstr ""
"보통, 소스 인스턴스에서 콜백 함수를 설정할 때 <code>g_source_set_callback()</"
"code> 함수를 사용합니다. <code>GDestroyNotify</code>를 함께 사용하면, 소스가 "
"계속 살아있는 동안 객체의 강 참조를 유지할 수 있습니다:"

#. (itstool) path: section/code
#: C/custom-gsource.c.page:184
#, no-wrap
msgid ""
"\n"
"g_source_set_callback (source, callback_func,\n"
"                       g_object_ref (object_to_strong_ref),\n"
"                       (GDestroyNotify) g_object_unref);"
msgstr ""
"\n"
"g_source_set_callback (source, callback_func,\n"
"                       g_object_ref (object_to_strong_ref),\n"
"                       (GDestroyNotify) g_object_unref);"

#. (itstool) path: section/p
#: C/custom-gsource.c.page:189
msgid ""
"However, <code>GSource</code> has a layer of indirection for retrieving this "
"callback, exposed as <code>g_source_set_callback_indirect()</code>. This "
"allows GObject to set a <code>GClosure</code> as the callback for a source, "
"which allows for sources which are automatically destroyed when an object is "
"finalized — a <em>weak</em> reference, in contrast to the <em>strong</em> "
"reference above:"
msgstr ""
"그러나, <code>GSource</code>는 <code>g_source_set_callback_indirect()</code>"
"로 노출하여 콜백을 전달하는 간접 계층입니다. GObject는 객체 사용을 마감했을 "
"때 소스에서 자동으로 해제하는 소스에 <code>GClosure</code>를 콜백으로 설정할 "
"수 있게 합니다  — 위의 <em>강</em> 참조에 대비되는 <em>약</em>참조는 다음과 "
"같습니다:"

#. (itstool) path: section/code
#: C/custom-gsource.c.page:197
#, no-wrap
msgid ""
"\n"
"g_source_set_closure (source,\n"
"                      g_cclosure_new_object (callback_func,\n"
"                                             object_to_weak_ref));"
msgstr ""
"\n"
"g_source_set_closure (source,\n"
"                      g_cclosure_new_object (callback_func,\n"
"                                             object_to_weak_ref));"

#. (itstool) path: section/p
#: C/custom-gsource.c.page:202
msgid ""
"It also allows for a generic, closure-based ‘dummy’ callback, which can be "
"used when a source needs to exist but no action needs to be performed in its "
"callback:"
msgstr ""
"소스에서는 콜백이 필요하지만 콜백에서 동작이 필요하지 않은 경우 사용할 수 있"
"는 일반 클로저 기반 'dummy' 콜백을 허용합니다:"

#. (itstool) path: section/code
#: C/custom-gsource.c.page:207
#, no-wrap
msgid ""
"\n"
"g_source_set_dummy_callback (source);"
msgstr ""
"\n"
"g_source_set_dummy_callback (source);"

#. (itstool) path: section/title
#: C/custom-gsource.c.page:212
msgid "Constructor"
msgstr "생성자"

#. (itstool) path: section/p
#: C/custom-gsource.c.page:214
msgid ""
"Finally, the <code>GSourceFuncs</code> definition of the <code>GSource</"
"code> can be written, alongside a construction function. It is typical "
"practice to expose new source types simply as <code>GSource</code>s, not as "
"the subtype structure; so the constructor returns a <code>GSource*</code>."
msgstr ""
"마지막으로 <code>GSource</code>의 <code>GSourceFuncs</code> 정의를 생성자 함"
"수에 작성할 수 있습니다. 보통 하위 형식 구조로서가 아닌 <code>GSource</code>"
"로서 새 source 형식을 노출하는 전형적인 사례입니다. 이렇게 하여 생성자에서 "
"<code>GSource*</code>를 반환합니다."

#. (itstool) path: section/p
#: C/custom-gsource.c.page:222
msgid ""
"The example constructor here also demonstrates use of a child source to "
"support cancellation conveniently. If the <code>GCancellable</code> is "
"cancelled, the application’s callback will be dispatched and can check for "
"cancellation. (The application code will need to make a pointer to the "
"<code>GCancellable</code> available to its callback, as a field of the "
"callback’s user data set in <code>g_source_set_callback()</code>)."
msgstr ""
"여기 예제 생성자에서는 편하게 취소하는 방식을 지원하는 하위 source 활용법을 "
"예를 들어 보여줍니다. <code>GCancellable</code>를 취소처리하면, 프로그램의 콜"
"백 함수를 실행하여 취소 여부를확인할 수 있습니다(프로그램 코드에서는 "
"<code>g_source_set_callback()</code> 함수의 콜백 사용자 데이터 세트로, 콜백 "
"함수에 <code>GCancellable</code> 에 접근할 수 있는 포인터를 만들어아합니다.)"

#. (itstool) path: section/code
#: C/custom-gsource.c.page:230
#, no-wrap
msgid ""
"\n"
"GSource *\n"
"message_queue_source_new (GAsyncQueue    *queue,\n"
"                          GDestroyNotify  destroy_message,\n"
"                          GCancellable   *cancellable)\n"
"{\n"
"  GSource *source;  /* alias of @message_queue_source */\n"
"  MessageQueueSource *message_queue_source;  /* alias of @source */\n"
"\n"
"  g_return_val_if_fail (queue != NULL, NULL);\n"
"  g_return_val_if_fail (cancellable == NULL ||\n"
"                        G_IS_CANCELLABLE (cancellable), NULL);\n"
"\n"
"  source = g_source_new (&amp;message_queue_source_funcs,\n"
"                         sizeof (MessageQueueSource));\n"
"  message_queue_source = (MessageQueueSource *) source;\n"
"\n"
"  /* The caller can overwrite this name with something more useful later. */\n"
"  g_source_set_name (source, \"MessageQueueSource\");\n"
"\n"
"  message_queue_source-&gt;queue = g_async_queue_ref (queue);\n"
"  message_queue_source-&gt;destroy_message = destroy_message;\n"
"\n"
"  /* Add a cancellable source. */\n"
"  if (cancellable != NULL)\n"
"    {\n"
"      GSource *cancellable_source;\n"
"\n"
"      cancellable_source = g_cancellable_source_new (cancellable);\n"
"      g_source_set_dummy_callback (cancellable_source);\n"
"      g_source_add_child_source (source, cancellable_source);\n"
"      g_source_unref (cancellable_source);\n"
"    }\n"
"\n"
"  return source;\n"
"}"
msgstr ""
"\n"
"GSource *\n"
"message_queue_source_new (GAsyncQueue    *queue,\n"
"                          GDestroyNotify  destroy_message,\n"
"                          GCancellable   *cancellable)\n"
"{\n"
"  GSource *source;  /* alias of @message_queue_source */\n"
"  MessageQueueSource *message_queue_source;  /* alias of @source */\n"
"\n"
"  g_return_val_if_fail (queue != NULL, NULL);\n"
"  g_return_val_if_fail (cancellable == NULL ||\n"
"                        G_IS_CANCELLABLE (cancellable), NULL);\n"
"\n"
"  source = g_source_new (&amp;message_queue_source_funcs,\n"
"                         sizeof (MessageQueueSource));\n"
"  message_queue_source = (MessageQueueSource *) source;\n"
"\n"
"  /* The caller can overwrite this name with something more useful later. */\n"
"  g_source_set_name (source, \"MessageQueueSource\");\n"
"\n"
"  message_queue_source-&gt;queue = g_async_queue_ref (queue);\n"
"  message_queue_source-&gt;destroy_message = destroy_message;\n"
"\n"
"  /* Add a cancellable source. */\n"
"  if (cancellable != NULL)\n"
"    {\n"
"      GSource *cancellable_source;\n"
"\n"
"      cancellable_source = g_cancellable_source_new (cancellable);\n"
"      g_source_set_dummy_callback (cancellable_source);\n"
"      g_source_add_child_source (source, cancellable_source);\n"
"      g_source_unref (cancellable_source);\n"
"    }\n"
"\n"
"  return source;\n"
"}"

#. (itstool) path: section/title
#: C/custom-gsource.c.page:270
msgid "Complete Example"
msgstr "완전한 예제"

#. (itstool) path: listing/title
#: C/custom-gsource.c.page:273
msgid "Complete Example Code"
msgstr "완전한 예제 코드"

#. (itstool) path: listing/code
#: C/custom-gsource.c.page:275
#, no-wrap
msgid ""
"/**\n"
" * MessageQueueSource:\n"
" *\n"
" * This is a #GSource which wraps a #GAsyncQueue and is dispatched whenever a\n"
" * message can be pulled off the queue. Messages can be enqueued from any\n"
" * thread.\n"
" *\n"
" * The callbacks dispatched by a #MessageQueueSource have type\n"
" * #MessageQueueSourceFunc.\n"
" *\n"
" * #MessageQueueSource supports adding a #GCancellable child source which will\n"
" * additionally dispatch if a provided #GCancellable is cancelled.\n"
" */\n"
"typedef struct {\n"
"  GSource         parent;\n"
"  GAsyncQueue    *queue;  /* owned */\n"
"  GDestroyNotify  destroy_message;\n"
"} MessageQueueSource;\n"
"\n"
"/**\n"
" * MessageQueueSourceFunc:\n"
" * @message: (transfer full) (nullable): message pulled off the queue\n"
" * @user_data: user data provided to g_source_set_callback()\n"
" *\n"
" * Callback function type for #MessageQueueSource.\n"
" */\n"
"typedef gboolean (*MessageQueueSourceFunc) (gpointer message,\n"
"                                            gpointer user_data);\n"
"\n"
"static gboolean\n"
"message_queue_source_prepare (GSource *source,\n"
"                              gint    *timeout_)\n"
"{\n"
"  MessageQueueSource *message_queue_source = (MessageQueueSource *) source;\n"
"\n"
"  return (g_async_queue_length (message_queue_source-&gt;queue) &gt; 0);\n"
"}\n"
"\n"
"static gboolean\n"
"message_queue_source_dispatch (GSource     *source,\n"
"                               GSourceFunc  callback,\n"
"                               gpointer     user_data)\n"
"{\n"
"  MessageQueueSource *message_queue_source = (MessageQueueSource *) source;\n"
"  gpointer message;\n"
"  MessageQueueSourceFunc func = (MessageQueueSourceFunc) callback;\n"
"\n"
"  /* Pop a message off the queue. */\n"
"  message = g_async_queue_try_pop (message_queue_source-&gt;queue);\n"
"\n"
"  /* If there was no message, bail. */\n"
"  if (message == NULL)\n"
"    {\n"
"      /* Keep the source around to handle the next message. */\n"
"      return TRUE;\n"
"    }\n"
"\n"
"  /* @func may be %NULL if no callback was specified.\n"
"   * If so, drop the message. */\n"
"  if (func == NULL)\n"
"    {\n"
"      if (message_queue_source-&gt;destroy_message != NULL)\n"
"        {\n"
"          message_queue_source-&gt;destroy_message (message);\n"
"        }\n"
"\n"
"      /* Keep the source around to consume the next message. */\n"
"      return TRUE;\n"
"    }\n"
"\n"
"  return func (message, user_data);\n"
"}\n"
"\n"
"static void\n"
"message_queue_source_finalize (GSource *source)\n"
"{\n"
"  MessageQueueSource *message_queue_source = (MessageQueueSource *) source;\n"
"\n"
"  g_async_queue_unref (message_queue_source-&gt;queue);\n"
"}\n"
"\n"
"static gboolean\n"
"message_queue_source_closure_callback (gpointer message,\n"
"                                       gpointer user_data)\n"
"{\n"
"  GClosure *closure = user_data;\n"
"  GValue param_value = G_VALUE_INIT;\n"
"  GValue result_value = G_VALUE_INIT;\n"
"  gboolean retval;\n"
"\n"
"  /* The invoked function is responsible for freeing @message. */\n"
"  g_value_init (&amp;result_value, G_TYPE_BOOLEAN);\n"
"  g_value_init (&amp;param_value, G_TYPE_POINTER);\n"
"  g_value_set_pointer (&amp;param_value, message);\n"
"\n"
"  g_closure_invoke (closure, &amp;result_value, 1, &amp;param_value, NULL);\n"
"  retval = g_value_get_boolean (&amp;result_value);\n"
"\n"
"  g_value_unset (&amp;param_value);\n"
"  g_value_unset (&amp;result_value);\n"
"\n"
"  return retval;\n"
"}\n"
"\n"
"static GSourceFuncs message_queue_source_funcs =\n"
"  {\n"
"    message_queue_source_prepare,\n"
"    NULL,  /* check */\n"
"    message_queue_source_dispatch,\n"
"    message_queue_source_finalize,\n"
"    (GSourceFunc) message_queue_source_closure_callback,\n"
"    NULL,\n"
"  };\n"
"\n"
"/**\n"
" * message_queue_source_new:\n"
" * @queue: the queue to check\n"
" * @destroy_message: (nullable): function to free a message, or %NULL\n"
" * @cancellable: (nullable): a #GCancellable, or %NULL\n"
" *\n"
" * Create a new #MessageQueueSource, a type of #GSource which dispatches for\n"
" * each message queued to it.\n"
" *\n"
" * If a callback function of type #MessageQueueSourceFunc is connected to the\n"
" * returned #GSource using g_source_set_callback(), it will be invoked for each\n"
" * message, with the message passed as its first argument. It is responsible for\n"
" * freeing the message. If no callback is set, messages are automatically freed\n"
" * as they are queued.\n"
" *\n"
" * Returns: (transfer full): a new #MessageQueueSource\n"
" */\n"
"GSource *\n"
"message_queue_source_new (GAsyncQueue    *queue,\n"
"                          GDestroyNotify  destroy_message,\n"
"                          GCancellable   *cancellable)\n"
"{\n"
"  GSource *source;  /* alias of @message_queue_source */\n"
"  MessageQueueSource *message_queue_source;  /* alias of @source */\n"
"\n"
"  g_return_val_if_fail (queue != NULL, NULL);\n"
"  g_return_val_if_fail (cancellable == NULL ||\n"
"                        G_IS_CANCELLABLE (cancellable), NULL);\n"
"\n"
"  source = g_source_new (&amp;message_queue_source_funcs,\n"
"                         sizeof (MessageQueueSource));\n"
"  message_queue_source = (MessageQueueSource *) source;\n"
"\n"
"  /* The caller can overwrite this name with something more useful later. */\n"
"  g_source_set_name (source, \"MessageQueueSource\");\n"
"\n"
"  message_queue_source-&gt;queue = g_async_queue_ref (queue);\n"
"  message_queue_source-&gt;destroy_message = destroy_message;\n"
"\n"
"  /* Add a cancellable source. */\n"
"  if (cancellable != NULL)\n"
"    {\n"
"      GSource *cancellable_source;\n"
"\n"
"      cancellable_source = g_cancellable_source_new (cancellable);\n"
"      g_source_set_dummy_callback (cancellable_source);\n"
"      g_source_add_child_source (source, cancellable_source);\n"
"      g_source_unref (cancellable_source);\n"
"    }\n"
"\n"
"  return source;\n"
"}\n"
msgstr ""
"/**\n"
" * MessageQueueSource:\n"
" *\n"
" * This is a #GSource which wraps a #GAsyncQueue and is dispatched whenever a\n"
" * message can be pulled off the queue. Messages can be enqueued from any\n"
" * thread.\n"
" *\n"
" * The callbacks dispatched by a #MessageQueueSource have type\n"
" * #MessageQueueSourceFunc.\n"
" *\n"
" * #MessageQueueSource supports adding a #GCancellable child source which will\n"
" * additionally dispatch if a provided #GCancellable is cancelled.\n"
" */\n"
"typedef struct {\n"
"  GSource         parent;\n"
"  GAsyncQueue    *queue;  /* owned */\n"
"  GDestroyNotify  destroy_message;\n"
"} MessageQueueSource;\n"
"\n"
"/**\n"
" * MessageQueueSourceFunc:\n"
" * @message: (transfer full) (nullable): message pulled off the queue\n"
" * @user_data: user data provided to g_source_set_callback()\n"
" *\n"
" * Callback function type for #MessageQueueSource.\n"
" */\n"
"typedef gboolean (*MessageQueueSourceFunc) (gpointer message,\n"
"                                            gpointer user_data);\n"
"\n"
"static gboolean\n"
"message_queue_source_prepare (GSource *source,\n"
"                              gint    *timeout_)\n"
"{\n"
"  MessageQueueSource *message_queue_source = (MessageQueueSource *) source;\n"
"\n"
"  return (g_async_queue_length (message_queue_source-&gt;queue) &gt; 0);\n"
"}\n"
"\n"
"static gboolean\n"
"message_queue_source_dispatch (GSource     *source,\n"
"                               GSourceFunc  callback,\n"
"                               gpointer     user_data)\n"
"{\n"
"  MessageQueueSource *message_queue_source = (MessageQueueSource *) source;\n"
"  gpointer message;\n"
"  MessageQueueSourceFunc func = (MessageQueueSourceFunc) callback;\n"
"\n"
"  /* Pop a message off the queue. */\n"
"  message = g_async_queue_try_pop (message_queue_source-&gt;queue);\n"
"\n"
"  /* If there was no message, bail. */\n"
"  if (message == NULL)\n"
"    {\n"
"      /* Keep the source around to handle the next message. */\n"
"      return TRUE;\n"
"    }\n"
"\n"
"  /* @func may be %NULL if no callback was specified.\n"
"   * If so, drop the message. */\n"
"  if (func == NULL)\n"
"    {\n"
"      if (message_queue_source-&gt;destroy_message != NULL)\n"
"        {\n"
"          message_queue_source-&gt;destroy_message (message);\n"
"        }\n"
"\n"
"      /* Keep the source around to consume the next message. */\n"
"      return TRUE;\n"
"    }\n"
"\n"
"  return func (message, user_data);\n"
"}\n"
"\n"
"static void\n"
"message_queue_source_finalize (GSource *source)\n"
"{\n"
"  MessageQueueSource *message_queue_source = (MessageQueueSource *) source;\n"
"\n"
"  g_async_queue_unref (message_queue_source-&gt;queue);\n"
"}\n"
"\n"
"static gboolean\n"
"message_queue_source_closure_callback (gpointer message,\n"
"                                       gpointer user_data)\n"
"{\n"
"  GClosure *closure = user_data;\n"
"  GValue param_value = G_VALUE_INIT;\n"
"  GValue result_value = G_VALUE_INIT;\n"
"  gboolean retval;\n"
"\n"
"  /* The invoked function is responsible for freeing @message. */\n"
"  g_value_init (&amp;result_value, G_TYPE_BOOLEAN);\n"
"  g_value_init (&amp;param_value, G_TYPE_POINTER);\n"
"  g_value_set_pointer (&amp;param_value, message);\n"
"\n"
"  g_closure_invoke (closure, &amp;result_value, 1, &amp;param_value, NULL);\n"
"  retval = g_value_get_boolean (&amp;result_value);\n"
"\n"
"  g_value_unset (&amp;param_value);\n"
"  g_value_unset (&amp;result_value);\n"
"\n"
"  return retval;\n"
"}\n"
"\n"
"static GSourceFuncs message_queue_source_funcs =\n"
"  {\n"
"    message_queue_source_prepare,\n"
"    NULL,  /* check */\n"
"    message_queue_source_dispatch,\n"
"    message_queue_source_finalize,\n"
"    (GSourceFunc) message_queue_source_closure_callback,\n"
"    NULL,\n"
"  };\n"
"\n"
"/**\n"
" * message_queue_source_new:\n"
" * @queue: the queue to check\n"
" * @destroy_message: (nullable): function to free a message, or %NULL\n"
" * @cancellable: (nullable): a #GCancellable, or %NULL\n"
" *\n"
" * Create a new #MessageQueueSource, a type of #GSource which dispatches for\n"
" * each message queued to it.\n"
" *\n"
" * If a callback function of type #MessageQueueSourceFunc is connected to the\n"
" * returned #GSource using g_source_set_callback(), it will be invoked for each\n"
" * message, with the message passed as its first argument. It is responsible for\n"
" * freeing the message. If no callback is set, messages are automatically freed\n"
" * as they are queued.\n"
" *\n"
" * Returns: (transfer full): a new #MessageQueueSource\n"
" */\n"
"GSource *\n"
"message_queue_source_new (GAsyncQueue    *queue,\n"
"                          GDestroyNotify  destroy_message,\n"
"                          GCancellable   *cancellable)\n"
"{\n"
"  GSource *source;  /* alias of @message_queue_source */\n"
"  MessageQueueSource *message_queue_source;  /* alias of @source */\n"
"\n"
"  g_return_val_if_fail (queue != NULL, NULL);\n"
"  g_return_val_if_fail (cancellable == NULL ||\n"
"                        G_IS_CANCELLABLE (cancellable), NULL);\n"
"\n"
"  source = g_source_new (&amp;message_queue_source_funcs,\n"
"                         sizeof (MessageQueueSource));\n"
"  message_queue_source = (MessageQueueSource *) source;\n"
"\n"
"  /* The caller can overwrite this name with something more useful later. */\n"
"  g_source_set_name (source, \"MessageQueueSource\");\n"
"\n"
"  message_queue_source-&gt;queue = g_async_queue_ref (queue);\n"
"  message_queue_source-&gt;destroy_message = destroy_message;\n"
"\n"
"  /* Add a cancellable source. */\n"
"  if (cancellable != NULL)\n"
"    {\n"
"      GSource *cancellable_source;\n"
"\n"
"      cancellable_source = g_cancellable_source_new (cancellable);\n"
"      g_source_set_dummy_callback (cancellable_source);\n"
"      g_source_add_child_source (source, cancellable_source);\n"
"      g_source_unref (cancellable_source);\n"
"    }\n"
"\n"
"  return source;\n"
"}\n"

#. (itstool) path: section/title
#: C/custom-gsource.c.page:282
msgid "Further Examples"
msgstr "더 많은 예제"

#. (itstool) path: section/p
#: C/custom-gsource.c.page:284
msgid ""
"Sources can be more complex than the example given above. In <link href="
"\"http://nice.freedesktop.org/\">libnice</link>, a custom <code>GSource</"
"code> is needed to poll a set of sockets which changes dynamically. The "
"implementation is given as <code>ComponentSource</code> in <link href="
"\"http://cgit.freedesktop.org/libnice/libnice/tree/agent/component."
"c#n941\">component.c</link> and demonstrates a more complex use of the "
"prepare function."
msgstr ""
"위에 보여드린 예제보다 소스가 더 복잡할 수 있습니다. <link href=\"http://"
"nice.freedesktop.org/\">libnice</link>에서 자체 정의한 <code>GSource</code>"
"는 동적으로 바뀌는 소켓 세트를 폴링 처리해야 합니다. 구현체는 <link href="
"\"http://cgit.freedesktop.org/libnice/libnice/tree/agent/component."
"c#n941\">component.c</link>의 <code>ComponentSource</code>를 들 수 있으며, 준"
"비 함수보다 더욱 복잡한 활용의 예를 보여줍니다."

#. (itstool) path: section/p
#: C/custom-gsource.c.page:293
msgid ""
"Another example is a custom source to interface GnuTLS with GLib in its "
"<code>GTlsConnection</code> implementation. <link href=\"https://git.gnome."
"org/browse/glib-networking/tree/tls/gnutls/gtlsconnection-gnutls."
"c#n871\"><code>GTlsConnectionGnutlsSource</code></link> synchronizes the "
"main thread and a TLS worker thread which performs the blocking TLS "
"operations."
msgstr ""
"다른 예제로는 GLib의 <code>GTlsConnection</code> 구현체에서 GLib용 GnuTLS 인"
"터페이스를 제공하는 부분입니다. <link href=\"https://git.gnome.org/browse/"
"glib-networking/tree/tls/gnutls/gtlsconnection-gnutls."
"c#n871\"><code>GTlsConnectionGnutlsSource</code></link>는 메인 스레드와 TLS "
"처리 블로킹을 수행하는 TLS 워커 스레드를 동기화합니다."

#~ msgid ""
#~ "\n"
#~ "# a class to define a window\n"
#~ "class MyWindow(Gtk.ApplicationWindow):\n"
#~ "    def __init__(self, app):\n"
#~ "        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", "
#~ "application=app)\n"
#~ "        self.set_default_size(200, 100)\n"
#~ "\n"
#~ "# a class to define a label\n"
#~ "<hi>\n"
#~ "class MyLabel(Gtk.Label):\n"
#~ "    def __init__(self):\n"
#~ "        Gtk.Label.__init__(self)\n"
#~ "        self.set_text(\"Hello GNOME!\")\n"
#~ "</hi>\n"
#~ "\n"
#~ "class MyApplication(Gtk.Application):\n"
#~ "    def __init__(self):\n"
#~ "        Gtk.Application.__init__(self)\n"
#~ "\n"
#~ "    def do_activate(self):\n"
#~ "        # create an instance of MyWindow\n"
#~ "        win = MyWindow(self)\n"
#~ "\n"
#~ "        # create an instance of MyLabel\n"
#~ "<hi>\n"
#~ "        label = MyLabel()\n"
#~ "</hi>\n"
#~ "        # and add it to the window\n"
#~ "<hi>\n"
#~ "        win.add(label)\n"
#~ "</hi>\n"
#~ "        # show the window and everything on it\n"
#~ "        win.show_all()"
#~ msgstr ""
#~ "\n"
#~ "# a class to define a window\n"
#~ "class MyWindow(Gtk.ApplicationWindow):\n"
#~ "    def __init__(self, app):\n"
#~ "        Gtk.Window.__init__(self, title=\"Welcome to GNOME\", "
#~ "application=app)\n"
#~ "        self.set_default_size(200, 100)\n"
#~ "\n"
#~ "# a class to define a label\n"
#~ "<hi>\n"
#~ "class MyLabel(Gtk.Label):\n"
#~ "    def __init__(self):\n"
#~ "        Gtk.Label.__init__(self)\n"
#~ "        self.set_text(\"Hello GNOME!\")\n"
#~ "</hi>\n"
#~ "\n"
#~ "class MyApplication(Gtk.Application):\n"
#~ "    def __init__(self):\n"
#~ "        Gtk.Application.__init__(self)\n"
#~ "\n"
#~ "    def do_activate(self):\n"
#~ "        # create an instance of MyWindow\n"
#~ "        win = MyWindow(self)\n"
#~ "\n"
#~ "        # create an instance of MyLabel\n"
#~ "<hi>\n"
#~ "        label = MyLabel()\n"
#~ "</hi>\n"
#~ "        # and add it to the window\n"
#~ "<hi>\n"
#~ "        win.add(label)\n"
#~ "</hi>\n"
#~ "        # show the window and everything on it\n"
#~ "        win.show_all()"
