<?xml version="1.0" encoding="utf-8"?>
<page xmlns="http://projectmallard.org/1.0/" xmlns:its="http://www.w3.org/2005/11/its" type="guide" style="task" id="additional-materials" xml:lang="ko">

  <info>
    <link type="guide" xref="index#references"/>
    
    <credit type="author copyright">
      <name>Federico Mena-Quintero</name>
      <email its:translate="no">federico@gnome.org</email>
      <years>2013</years>
    </credit>

    <include xmlns="http://www.w3.org/2001/XInclude" href="cc-by-sa-3-0.xml"/>

    <desc>자유 소프트웨어 프로젝트</desc>
  
    <mal:credit xmlns:mal="http://projectmallard.org/1.0/" type="translator copyright">
      <mal:name>조성호</mal:name>
      <mal:email>shcho@gnome.org</mal:email>
      <mal:years>2016.</mal:years>
    </mal:credit>
  </info>

  <title>추가 자료</title>

  <p>여러분이 읽어볼만한 다른 링크를 드리겠습니다. 자유 소프트웨어 개발자로 거대 배포팀에서 일하는 방법, 바람직한 프로그래밍 방법에 대해 일반적인 많은 내용을 담고 있습니다.</p>

  <list>
    <item>
      <p>Karl Fogel 저, <link href="http://producingoss.com/">Produducing Open Source Software</link>. 자유 소프트웨어를 작성하면서 따라야 할 좋은 습관을 설명하는 정말 뛰어난 책입니다. 프로젝트의 <em>참여자 집단</em> 관점에서, 기여자를 대하는 방법, 어떻게 조직을 구성하고 의사소통을 진행하는지, 비영리 재단과 접촉하는 방법을 다룹니다. 언제든지 자신에게 "프로젝트에서 $human_situation을 어떻게 다루어야 하는가?"를 묻는다면, 이 책에서 답을 줄 수도 있습니다.</p>
    </item>

    <item>
      <p><link href="http://www.gnu.org/prep/standards/">GNU 코드 작성 표준</link>. 오래된 문서지만, 여전히 최고의 설명이 많이 있습니다. C 코드 작성 방식, 플러그인 시스템 처리 문제, 명령행 프로그램의 일반 옵션 이름, Makefile 작성 형식, 코드 문서 작성시 Texinfo 활용 예시 같은 상당히 GNU스러운 자세한 설명이 있습니다.</p>
    </item>

    <item>
      <p><link href="https://www.kernel.org/doc/Documentation/CodingStyle">Linux Kernel Coding Style</link>. "전반적인 들여쓰기"의 근거, 중괄호 위치, 명확하고 분명한 이름 부여 방식, 한 곳에서 함수 실행을 빠져나가는 방식을 설명합니다.</p>
    </item>
  </list>
</page>
